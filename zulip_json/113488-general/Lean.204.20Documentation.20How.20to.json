[
    {
        "content": "<p>Hi<br>\nI have finished the tutorial for Lean 4, but many features of Lean 4 outside of this tutorial are useful to me.</p>\n<p>Where do I go for documentation on things like:</p>\n<p>Trees in Lean 4<br>\nCategories in Lean 4<br>\nFunctors in Lean 4<br>\nHashmaps in Lean 4<br>\netc.</p>",
        "id": 312970858,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669771833
    },
    {
        "content": "<p>There is a library overview for <code>mathlib4</code>, see for example<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap#doc\">docs4#Std.HashMap</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Functor#doc\">docs4#Functor</a></p>",
        "id": 312974185,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669774551
    },
    {
        "content": "<p>Lean 4 is still a work in progress, so often the docs that Moritz mentioned (as well as the code on github) is your best bet for documentation.  But when you say \"categories\" what do you mean?  Do you mean in programming, like applicative functors, maps, monads, etc?   Or mathematical category theory, like categories, natural transformations, and Yoneda's lemma?  In Lean 3 at least, these are two separate libraries.  For example, in programming we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor\">docs#functor</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_functor\">docs#is_lawful_functor</a> (in the control library) and on the math side we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor\">docs#category_theory.functor</a> (in <a href=\"https://leanprover-community.github.io/theories/category_theory.html\">mathlib's category theory library</a>).  The later isn't ported yet as far as I'm aware.  The control library however is in Lean4 already, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulFunctor#doc\">docs4#LawfulFunctor</a>.</p>",
        "id": 312983477,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669781788
    },
    {
        "content": "<p>I would however hope that <a href=\"https://leanprover.github.io/functional_programming_in_lean/title.html\">Functional Programming in Lean 4</a> would cover some of these topics when it is finished, like functors, hashmaps, and some examples of how to make your own tree-like data structures.</p>",
        "id": 312984340,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669782381
    },
    {
        "content": "<p>I answered about trees in <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/tree\">#general &gt; tree</a> .</p>",
        "id": 312984852,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669782777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"559197\">@Kind Bubble</span> A warning about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap#doc\">docs4#Std.HashMap</a>.  Usually in functional programming, data structures are immutable and persistent.  Immutable means they can't change.  Persistent means you can copy them without copying the whole structure in memory.  Both properties let you keep track of the history of the structure.  Persistent data structures are used (I assume) for both tactic state and the environment.  That is why you can click anywhere on a Lean file and get information about that place in the code.  When you apply a tactic, you don't overwrite the previous tactic state, you just add onto it.  Lean's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List#doc\">docs4#List</a> is persistent.</p>\n<p>Lean.4 has a trick which lets you use non-persistent data structures like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array#doc\">docs4#Array</a> in a way which mimics procedural code.  If you create a new <code>Array</code> at the same time that you destroy a previous <code>Array</code> (by no longer having any references to that array), then you will not make a copy, and instead Lean will update your old array.  In a language like Rust, the compiler keeps track of this \"linear usage\", but in Lean you have to do it yourself.</p>\n<p>This is all to say, if you don't want to deal with that, then you may also want to use an alternative persistent key-value store like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.RBMap#doc\">docs4#Std.RBMap</a> (or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.AssocList#doc\">docs4#Std.AssocList</a> which has its own performance issues for large lists).  (There is also a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.RBSet#doc\">docs4#Std.RBSet</a> as well for set datastructures.)  (Honestly, if your example is small enough, then using HashMap is likely not a problem, but as the HashMap grows, note that a non-linear usage pattern where you have references to both the old map and new map at the same time, may lead to a lot of copying of a large object in memory.)</p>\n<p>I don't know if this sort of thing is well-documented anywhere, but I mention it a bit more in this <a href=\"https://proofassistants.stackexchange.com/a/1708/122\">PA.SE answer</a>.</p>",
        "id": 313065667,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669816754
    },
    {
        "content": "<p>Also worth mentioning <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PersistentHashMap#doc\">docs4#Lean.PersistentHashMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PersistentHashSet#doc\">docs4#Lean.PersistentHashSet</a> in this context.</p>",
        "id": 313071420,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669818334
    }
]