[
    {
        "content": "<p>I had hoped this would work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125602905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544053
    },
    {
        "content": "<p>So which tactic do I need here?</p>",
        "id": 125602950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544123
    },
    {
        "content": "<p>That's not the kind of stuff it does. Try:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic -- from mathlib\n\nlemma ... := by solve_by_elim\n</pre></div>",
        "id": 125602958,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544149
    },
    {
        "content": "<p>Next goal: just have <code>hf : function.injective f</code> as hypothesis</p>",
        "id": 125603006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544212
    },
    {
        "content": "<p>Instead of unpacking that definition myself...</p>",
        "id": 125603018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544297
    },
    {
        "content": "<p>Have you tried it?</p>",
        "id": 125603023,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544317
    },
    {
        "content": "<p>Yes. Then it fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">solve_by_elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125603067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544383
    },
    {
        "content": "<p>squiggles under <code>solve_by_elim</code></p>",
        "id": 125603074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544398
    },
    {
        "content": "<p>What error message does it give you?</p>",
        "id": 125603076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>assumption tactic failed\nstate:\nA : Type u,\n_inst_1 : group A,\nB : Type u,\n_inst_2 : group B,\nf : A → B,\n_inst_3 : is_group_hom f,\nhf : function.injective f,\nx : A,\nhfx : f x = 1\n⊢ x = 1\n</pre></div>",
        "id": 125603130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544446
    },
    {
        "content": "<p>to be fair the proof needs to go like f x = f 1 and then x = 1</p>",
        "id": 125603131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544448
    },
    {
        "content": "<p>and it needs is_group_hom.one</p>",
        "id": 125603133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544465
    },
    {
        "content": "<p>Yeah, there is a bit more to be done... but I think there should be a tactic that can do that for me</p>",
        "id": 125603138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544499
    },
    {
        "content": "<p>Ideally there is a <code>diagram_chase</code> tactic</p>",
        "id": 125603146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544517
    },
    {
        "content": "<p>And I think <code>cc</code> is very close to that</p>",
        "id": 125603147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544525
    },
    {
        "content": "<p>It only needs to know little facts like this lemma and some similar stuff.</p>",
        "id": 125603149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544544
    },
    {
        "content": "<p>try mixing is_group_hom.one into the ingredient</p>",
        "id": 125603150,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544551
    },
    {
        "content": "<p>And then it would be able to prove the five lemma on its own</p>",
        "id": 125603152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544558
    },
    {
        "content": "<p>have := is_group_hom.one f; solve_by_elim</p>",
        "id": 125603198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544581
    },
    {
        "content": "<p>That's not enough</p>",
        "id": 125603210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544623
    },
    {
        "content": "<p>Alas</p>",
        "id": 125603215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544624
    },
    {
        "content": "<p>This one should work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125603273,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544715
    },
    {
        "content": "<p>Ok, so <code>have := \\fo x, (fx = 1 \\to x = 1)</code>. How should I prove that? Is it a one-liner?</p>",
        "id": 125603276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Nice!</p>",
        "id": 125603286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524544781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I don’t get it at all</p>",
        "id": 125603335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544827
    },
    {
        "content": "<p>If you want to go fully anonymous (not name your assumptions like <code>this</code> and <code>hf</code>) you can do:</p>\n<div class=\"codehilite\"><pre><span></span>begin\n  have := is_group_hom.one f,\n  apply_assumption, cc\nend\n</pre></div>",
        "id": 125603337,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544829
    },
    {
        "content": "<p>how does apply hf even succeed</p>",
        "id": 125603339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544835
    },
    {
        "content": "<p>oh nvm I thought wrongly</p>",
        "id": 125603349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544874
    },
    {
        "content": "<p>You apply it to <code>x = 1</code> and <code>hf </code> is <code>hf : ∀ x y, f x = f y → x = y</code>. When you apply it, you instantiate it with <code>x := x, y := 1</code> so the antecedent becomes <code>f x = f 1</code>. Your idea with <code>have</code> gets us <code>this : f 1 = 1</code></p>",
        "id": 125603401,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544958
    },
    {
        "content": "<p>I mean, I would just write the proof in term mode</p>",
        "id": 125603402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524544965
    },
    {
        "content": "<p>I think I would keep <code>cc</code> at the very least.</p>",
        "id": 125603410,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524544999
    },
    {
        "content": "<blockquote>\n<p>Ok, so <code>have := \\fo x, (fx = 1 \\to x = 1)</code>. How should I prove that? Is it a one-liner?</p>\n</blockquote>\n<p>Did you find an answer for this?</p>",
        "id": 125603418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545040
    },
    {
        "content": "<p>Not yet, Lean doesn't like that expression</p>",
        "id": 125603474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545134
    },
    {
        "content": "<p>Error message?</p>\n<p>I would expect it to work but I don't think that's what you're looking for</p>",
        "id": 125603523,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545203
    },
    {
        "content": "<p>And the problem is not <code>fx</code>, I changed that to <code>f x</code></p>",
        "id": 125603526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545209
    },
    {
        "content": "<p><code>invalid expression starting at xx:y</code></p>",
        "id": 125603532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545228
    },
    {
        "content": "<p><code>have := expr</code> uses <code>expr</code> as a proof of an unnamed proposition. That proposition is just the type of the expression. If <code>expr</code> is the proposition you want to prove, you write <code>have : expr</code></p>",
        "id": 125603536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545270
    },
    {
        "content": "<p>Can you show me the whole proof? Maybe you missed a comma</p>",
        "id": 125603582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545300
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n</pre></div>",
        "id": 125603594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545388
    },
    {
        "content": "<p>Do you have an <code>end</code> keyword after that?</p>",
        "id": 125603643,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545418
    },
    {
        "content": "<p>yes</p>",
        "id": 125603648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545455
    },
    {
        "content": "<p>several lines lower</p>",
        "id": 125603653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524545476
    },
    {
        "content": "<p>Can you show me what the rest of the proof is?</p>",
        "id": 125603719,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545625
    },
    {
        "content": "<p>Also, do you have imports?</p>",
        "id": 125603720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524545636
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125603992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524546171
    },
    {
        "content": "<p>All the other stuff in that file is wrapped withing a section</p>",
        "id": 125604019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524546230
    },
    {
        "content": "<p>hf $ hx.trans $ eq.symm $ is_group_hom.one f</p>",
        "id": 125604129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524546377
    },
    {
        "content": "<p>I first need to get rid of an error message: <code>invalid expression starting at &lt;coords&gt;</code></p>",
        "id": 125604198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524546565
    },
    {
        "content": "<p>the <code>&lt;coords&gt;</code> are of the <code>\\fo</code></p>",
        "id": 125604201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524546584
    },
    {
        "content": "<p>I don't see a problem there. Try restarting your Lean server</p>",
        "id": 125604257,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524546692
    },
    {
        "content": "<p>Yay, that did it (-;</p>",
        "id": 125604365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524546885
    },
    {
        "content": "<p>Unfortunately, that's a common solution to problems <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 125604377,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524546924
    },
    {
        "content": "<p>Ok, need to go now</p>",
        "id": 125604527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524547309
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 125604528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524547315
    },
    {
        "content": "<p>I think this happens more frequently since <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> enabled the new \"region of interest\" thing</p>",
        "id": 125609972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524558002
    },
    {
        "content": "<p>It's nice to have Lean reacting quicker but I did get quite a lot of those random <code>invalid expression starting at &lt;coords&gt;</code> yesterday</p>",
        "id": 125610009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524558034
    },
    {
        "content": "<p>Do you have a reproducible test case?</p>",
        "id": 125610074,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524558171
    },
    {
        "content": "<p>Oh so <code>cc</code> deals with commutativity and associativity also?</p>",
        "id": 125672053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524663562
    },
    {
        "content": "<p>No. Why do you say that?</p>",
        "id": 125672100,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524663627
    },
    {
        "content": "<p>apparently it did</p>",
        "id": 125672103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524663637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (m n : ℕ), m + n = n + m :=</span>\n<span class=\"cm\">λ (m n : ℕ),</span>\n<span class=\"cm\">  of_eq_true (eq_true_intro (eq.symm (eq.trans (eq.refl (n + m)) (eq.symm (is_commutative.comm has_add.add m n)))))</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125672486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524664282
    },
    {
        "content": "<p>Oh interesting! I didn't think it would</p>",
        "id": 125672553,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524664370
    }
]