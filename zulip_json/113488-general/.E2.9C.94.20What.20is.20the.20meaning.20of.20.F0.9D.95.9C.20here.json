[
    {
        "content": "<p>Hi all, <br>\nI find myself having trouble understanding the <code>src/analysis/calculus/fderiv.lean</code> file ....<br>\nMy current understanding is: 𝕜 is the \"scaling function\" required in <code>(map_smul' : ∀ (r : R) (x : M), to_fun (r • x) = (σ r) • to_fun x)</code> of  <code>linear_map</code>, so that for instance if I wish to only work on \"strict\" ring homomorphisms, I would just let <code>𝕜 := ring_hom.id ℝ</code>. <br>\nBut I also see that in line 124 of <code>fderiv.lean</code> it stated that <code>[nondiscrete_normed_field 𝕜]</code>, which is where I fail to comprehend ... Why does the \"scaling factor function\" have to be a normed field?  Sorry for my possible ignorance on abstract algebra though, we haven't learn that yet in undergrad courses ...</p>",
        "id": 276913418,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648492047
    },
    {
        "content": "<p>I don't understand what you mean by \"scaling function\", but here <code>𝕜</code> is essentially <code>ℝ</code>.</p>",
        "id": 276914052,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492359
    },
    {
        "content": "<p>I mean, <code>ℝ</code> is the main example of <code>𝕜</code>.</p>",
        "id": 276914105,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492388
    },
    {
        "content": "<p>But you can also have <code>𝕜 = ℂ</code> or more exotic things like <code>𝕜 = ℚ_p</code>.</p>",
        "id": 276914260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492471
    },
    {
        "content": "<p>Oh, that's strange ... I was drawing that conclusion because of below reasons, could you help me spot which step is wrong?</p>\n<ol>\n<li>𝕜 is supplied as an argument for continuous linear map in e.g. here</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_fderiv_at_filter</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">L</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>The argument in that notation is something of type ring homomorphism from the semirings of \"scalars\" in the modules:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">continuous_linear_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.interactive.continuity'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">σ</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n</code></pre></div>",
        "id": 276914364,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648492537
    },
    {
        "content": "<ol start=\"3\">\n<li>the sigma in <code>extends M →ₛₗ[σ] M₂</code> refers to linear_map, which denotes the \"scaling function\" for linearity of multiplication, as denoted above:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A map `f` between an `R`-module and an `S`-module over a ring homomorphism `σ : R →+* S`</span>\n<span class=\"sd\">is semilinear if it satisfies the two properties `f (x + y) = f x + f y` and</span>\n<span class=\"sd\">`f (c • x) = (σ c) • f x`. Elements of `linear_map σ M M₂` (available under the notation</span>\n<span class=\"sd\">`M →ₛₗ[σ] M₂`) are bundled versions of such maps. For plain linear maps (i.e. for which</span>\n<span class=\"sd\">`σ = ring_hom.id R`), the notation `M →ₗ[R] M₂` is available. An unbundled version of plain linear</span>\n<span class=\"sd\">maps is available with the predicate `is_linear_map`, but it should be avoided most of the time. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_hom</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 276914721,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648492701
    },
    {
        "content": "<p>I don't understand the question: linear maps are defined using scalar multiplication, in Lean and in \"normal\" math. You take module <code>M₁</code> and <code>M₂</code> over a ring <code>R</code> (vector spaces <code>V₁</code> and <code>V₂</code> over a field <code>K</code> if you are not familiar with modules. If you are not familiar with fields just take <code>K=ℝ</code>). Then <code>f : M₁ → M₂</code> (<code>f: V₁ → V₂</code>) is linear if <code>f(x+y) = f(x) + f(y)</code> and <code>f(α • x) = α • f(x)</code>. Here <code>α : R</code> (or <code>α : K</code>) is a scalar.</p>",
        "id": 276914831,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492773
    },
    {
        "content": "<p>In mathlib we really love super general things, so linear maps are really a special case of <em>semilinear</em> maps, so the actual definition you can find in mathlib can be a little hard to read</p>",
        "id": 276914924,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492820
    },
    {
        "content": "<p>Unless you really need semilinear maps you can just forget about <code>M →ₛₗ[σ] M₂</code> and just use <code>M →ₗ M₂</code>, that means linear wrt the module structure.</p>",
        "id": 276915186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648492988
    },
    {
        "content": "<p>Yes I understand the part where 𝕜 is used as the semiring for module <code>M_1</code> and <code>M_2</code>. I just don't get why it is supplied as a ring homomorphism ...</p>",
        "id": 276915246,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493041
    },
    {
        "content": "<p>In <code>E →L[𝕜] F</code> there is no ring hom.</p>",
        "id": 276915330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648493073
    },
    {
        "content": "<p>The <code>L</code> in <code>E →L[𝕜] F</code> is uppercase, it means \"continuous and linear\"</p>",
        "id": 276915374,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648493094
    },
    {
        "content": "<p>but in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">continuous_linear_map</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.interactive.continuity'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>isn't σ supposed to be a ring hom?</p>",
        "id": 276915475,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493155
    },
    {
        "content": "<p>Oh</p>",
        "id": 276915527,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493168
    },
    {
        "content": "<p>I get it LOL</p>",
        "id": 276915532,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">σ</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n<span class=\"kd\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n<span class=\"kd\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"bp\">⋆</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map</span> <span class=\"o\">(</span><span class=\"n\">star_ring_end</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n</code></pre></div>\n<p>I was mistakenly reading -&gt;L as -&gt;SL <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 276915565,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493192
    },
    {
        "content": "<p>Yes, but look closely at the notation: <code>ₛₗ[σ]</code> VS <code>ₗ[K]</code></p>",
        "id": 276915573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648493198
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 276915613,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648493233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431349\">Shi Zhengyu</span> has marked this topic as resolved.</p>",
        "id": 276916188,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648493597
    }
]