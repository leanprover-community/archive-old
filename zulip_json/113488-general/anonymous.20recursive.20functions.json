[
    {
        "content": "<p>is it possible to define an anonymous recursive function? so for I've been making auxiliary defs as needed, but I'm copying a development from coq that uses them a lot</p>",
        "id": 128191984,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1529209906
    },
    {
        "content": "<p>something like this from CPDT</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">check_even</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">isEven</span> <span class=\"n\">n</span><span class=\"o\">].</span>\n  <span class=\"kn\">Hint</span> <span class=\"n\">Constructors</span> <span class=\"n\">isEven</span><span class=\"o\">.</span>\n\n  <span class=\"k\">refine</span> <span class=\"o\">(</span><span class=\"k\">fix</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">isEven</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"o\">|</span> <span class=\"mi\">0</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Yes</span>\n      <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">=&gt;</span> <span class=\"n\">No</span>\n      <span class=\"o\">|</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Reduce</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span>\n    <span class=\"k\">end</span><span class=\"o\">);</span> <span class=\"k\">auto</span><span class=\"o\">.</span>\n<span class=\"kn\">Defined</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 128192028,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1529209967
    },
    {
        "content": "<p>Unfortunately no, at least not in term mode. As a workaround you can use <code>induction</code>,  but the only way to get the full power of the equation compiler is to have an auxiliary def, and this is what I usually do.</p>",
        "id": 128193830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529214387
    },
    {
        "content": "<p>You could write </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">Yes</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n                    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">No</span>\n                    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span>\n                   <span class=\"kn\">end</span> <span class=\"o\">)</span>\n</pre></div>",
        "id": 128204616,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529241155
    },
    {
        "content": "<p>There is also a somewhat hackish way. Did you ever wonder about those <code>_match</code> and <code>_let_match</code> variables in the context sometimes? Those are the same mechanism used to support recursive definitions using the equation compiler, and if you refer to them it will get compiled to a recursive function just like a recursive def. For example:</p>\n<div class=\"codehilite\"><pre><span></span>def fib (n : ℕ) : ℕ :=\nmatch n with\n| 0 := 0\n| 1 := 1\n| n+2 := by rename _match fib; exact fib n + fib (n+1)\nend\n</pre></div>\n\n\n<p>This doesn't work in term mode though:</p>\n<div class=\"codehilite\"><pre><span></span>def fib (n : ℕ) : ℕ :=\nmatch n with\n| 0 := 0\n| 1 := 1\n| n+2 := _match n + _match (n+1)\nend\n</pre></div>\n\n\n<p>fails unless you insert <code>by exact</code> on the last line.</p>",
        "id": 128211341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529256608
    },
    {
        "content": "<p>I guess the main reason this isn't already supported officially is because there is no obvious place in match notation to put the name of the defined function</p>",
        "id": 128211656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529257356
    },
    {
        "content": "<p>Examples of the other two match types:</p>\n<div class=\"codehilite\"><pre><span></span>inductive tree : Type\n| mk : ∀ n, (fin n → tree) → tree\n\ndef path : tree → Type :=\nλ ⟨n, t⟩, by exact Σ n, _fun_match (t n)\n\ndef path&#39; (T : tree) : Type :=\nlet ⟨n, t⟩ := T in\nby exact Σ n, _let_match (t n)\n</pre></div>",
        "id": 128211859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529257887
    },
    {
        "content": "<p>Cool hack <span class=\"emoji emoji-1f601\" title=\"grin\">:grin:</span></p>",
        "id": 128211909,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529257986
    }
]