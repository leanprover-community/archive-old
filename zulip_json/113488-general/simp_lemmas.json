[
    {
        "content": "<p>What is the difference between a 'simp' and a 'congr' below?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">add_simp</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span> <span class=\"bp\">→</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">simp_lemmas</span>\n<span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">add_congr</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span> <span class=\"bp\">→</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">simp_lemmas</span>\n</pre></div>",
        "id": 135532880,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539168329
    },
    {
        "content": "<p>My guess is that anything of the form <code>lhs = rhs</code> goes in <code>add_congr</code> so <code>simp</code> knows its a congruence relation.</p>\n<p>In the C++, I can see that there is a pair of tables for each equivalence relation we have simp lemmas for. One table contains congruences and the other contains simps. So I guess for <code>=</code> and <code>&lt;-&gt;</code> the simps table would be empty? What would be an example of a relation where both the congr and simps table would be occupied?</p>\n<p>I remember hearing somewhere that simp can support arbitrary congruence relations.</p>",
        "id": 135533034,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539168502
    },
    {
        "content": "<p>I'm interested in expanding on this from <code>simp.md</code> in mathlib's docs.</p>\n<blockquote>\n<p>### Something that could be added later on:</p>\n<p>\"Re: documentation. If you mention congruence, you could show off simp's support for congruence relations. If you show reflexivity and transitivity for cong, and have congruence lemmas for +, etc., then you can rewrite with congruences as if they were equations.\"</p>\n</blockquote>",
        "id": 135533129,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539168620
    },
    {
        "content": "<p>What is on the lhs and rhs for the simp lemma made from this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 135533645,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539169345
    },
    {
        "content": "<p>Ok now that I've printed out the congruence rules and simp rules for the default set of simp_lemmas I am just confused.</p>",
        "id": 135535720,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539172082
    },
    {
        "content": "<p>Ah ok, congruence lemmas let you move between different relations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">if_simp_congr</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"mi\">11</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">↔</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_4</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">x_6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">x_7</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_4</span> <span class=\"err\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_6</span> <span class=\"err\">?</span><span class=\"n\">x_7</span>\n</pre></div>\n\n\n<p>Whereas simps  don't. I am now curious about whether simp lemmas can be defined for other relations. They have to be transitive and reflexive, but I don't know if it has to be congruent <code>x = y -&gt; f x = f y</code>. Would it be possible to define simp lemmas for  the relation<code>&lt;</code>? What about integer conguence mod n?</p>",
        "id": 135536015,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539172474
    },
    {
        "content": "<p>Simp lemmas and congruence lemmas are very different.  1) They have different variable constraints: for simp lemmas, all variables of the rhs must occur on the lhs.  E.g. <code>g x y = f x</code> is a simp lemma, but <code>f x = g x y</code> is not.  Congruence lemmas on the hand impose a requirement on the hypotheses: e.g. <code>x = y -&gt; f x = f y</code> is a congruence lemma, but <code>x = h x -&gt; f x = f x</code> is not (because the rhs of <code>x = h x</code> is just wrong).</p>",
        "id": 135536879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539173706
    },
    {
        "content": "<p>2) Their purpose is different.  You use congruence lemmas to specify where to rewrite, and simp lemmas tell you the result of the rewriting.</p>",
        "id": 135536979,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539173794
    },
    {
        "content": "<p>Ideally you could use simp to rewrite modulo integer congruence.  As far as I remember there was a technical problem preventing this though.  But there's no fundamental reason why this can't work.</p>",
        "id": 135537089,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539173915
    },
    {
        "content": "<p>I think the most interesting example of a simp relation other than <code>eq</code> is <code>equiv</code> at the moment.  Look at <code>data/equiv.lean</code>.</p>",
        "id": 135537137,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539173996
    },
    {
        "content": "<p>Thanks! As far as I can tell, <code>x = y -&gt; f x = f y</code> is not explicitly in simp_lemmas. simp is assuming the relation is congruent. Is this right?</p>",
        "id": 135537396,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539174356
    },
    {
        "content": "<p>That's a congruence lemma.  And yes, it is generated on-demand using the same tool that powers the <code>congr</code> tactic.</p>",
        "id": 135537459,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539174401
    },
    {
        "content": "<p>So you couldn't do simp with the <code>&lt;</code> relation?</p>",
        "id": 135537491,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539174451
    },
    {
        "content": "<p>No, because 1) <code>&lt;</code> is not reflexive and 2) <code>has_lt.lt</code> is not transitive in general.  I think you can turn <code>nat.le</code> into a simplification relation though.</p>",
        "id": 135542107,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539179228
    }
]