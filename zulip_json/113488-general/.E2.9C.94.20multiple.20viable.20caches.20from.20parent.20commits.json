[
    {
        "content": "<p>My workflow is to use <code>leanproject get-cache --fallback=download-first</code>: <code>leanproject</code> makes a choice, which could probably be optimized, but I am normally happy with it.</p>\n<p>I try to work on \"relative leaves\": I keep the import-distance between files that I modify really small, typically diameter at most 1.  If you are in this situation, then getting the oleans from master and merging master should work relatively well.</p>\n<p>I do find that if I get the oleans from master, then switch to my branch with VSCode open, it helps to restart VSCode (or even quit and reopen).</p>",
        "id": 292121729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659687472
    },
    {
        "content": "<p>When you're told multiple caches are available, what's happening is that your commit doesn't have a cache at all, but that it has multiple parents with caches, perhaps as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">HEAD</span> <span class=\"c1\">-- A -- B -- C -- ...</span>\n         <span class=\"bp\">\\</span>\n           <span class=\"c1\">-- D -- E -- ...</span>\n</code></pre></div>\n<p>Here <code>HEAD</code> is your current commit, and <code>A</code> is a merge commit. If there are caches available for <code>B</code> and <code>D</code>, then these are likely the two most viable caches for the state of <code>HEAD</code>; but neither of them will be a perfect match</p>",
        "id": 292121826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687541
    },
    {
        "content": "<p>and I guess that in your picture, I should understand D and E as previous commits on <code>master</code> typically (in the sense that <code>HEAD</code>- A B -C is probably the history of my branch, D - E that on <code>master</code> and <code>A</code> was created was merging master in my branch: correct?)</p>",
        "id": 292122022,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659687673
    },
    {
        "content": "<p>For now, you're forced between picking the cache from <code>B</code> or the cache from <code>D</code>. A more intelligent solution would mix and match the individual olean files between the two caches, but this requires knowledge of the import graph at both revisions, and still won't help much unless  the two branches only diverge in the \"leaf\" files</p>",
        "id": 292122070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687701
    },
    {
        "content": "<p>\"leaf\" files?</p>",
        "id": 292122157,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659687741
    },
    {
        "content": "<p>Yes, I think your interpretation is reasonable; the children of merge commits are ordered, so when you type <code>git merge some-other-branch</code>, the first parent of the merge will be the branch you were already on, and the second parent will be the branch you asked to merge with</p>",
        "id": 292122197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687771
    },
    {
        "content": "<p>So your interpretation matches a \"parents are drawn from top to bottom\" interpretation</p>",
        "id": 292122239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687804
    },
    {
        "content": "<p>CI always follows first parents to find a cache, I believe <code>leanproject get-cache --fallback=download-first</code> chooses the last parent when it has a choice.</p>",
        "id": 292122348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687847
    },
    {
        "content": "<p>Oh great, thank you. And can you speculate a little bit more on your sentence \" this requires knowledge of the import graph at both revisions, and still won't help much unless the two branches only diverge in the \"leaf\" files\"?</p>",
        "id": 292122439,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659687910
    },
    {
        "content": "<p>Leaf files as in files that are at the \"leaves\" of the import tree; files that aren't imported by any other files. I guess I'm using the term loosely here to mean \"many other files\" rather than \"any other files\". <code>logic/basic.lean</code> is an example of something that is _not_ a leaf file!</p>",
        "id": 292122456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687925
    },
    {
        "content": "<p>The thing that can go wrong is this. Say you're editing <code>number_theory/obscure_thing.lean</code> and you realise you want the new goodies from <code>master</code> so you merge <code>master</code>. Say someone has edited <code>data.nat.basic</code> since you last merged. Now there are no oleans that are perfect for you. Which oleans do you want then? You can get your last oleans from your branch but that will be a disaster because now mathlib has to recompile <code>data.nat.basic</code> and everything which depend on it, which is almost everything. Alternatively you can get the oleans from master and this will be great because then Lean will only have to recompile <code>number_theory.obscure_thing</code>. </p>\n<p>Filippo I must be honest -- I solve this problem by simply waiting until the oleans are ready. If I want to work on a branch and there are no oleans there I simply do one of the other 100 things on my job list.</p>",
        "id": 292122465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659687931
    },
    {
        "content": "<p>(an aside: git merges can have more than two parents, and these are realy called \"octopus merges\")</p>",
        "id": 292122481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659687950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks, it makes a lot of sense, yes. I am getting a much cleared picture of some of the cabbalistic typing I have been doing since one and a half year!</p>",
        "id": 292122645,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659688050
    },
    {
        "content": "<p>My workflow for getting a cache is:</p>\n<ul>\n<li>Try the <code>leanproject get-cache --download-all</code> option, which downloads all possible caches and chooses the first one</li>\n<li>Run <code>lean --make src/the/file_i_want_to_work_on.lean</code>.  If this starts building <code>data/nat/basic</code> or something I know to be a long way from my work, declare this cache bad</li>\n<li>If <code>download-first</code> printed out any alternative caches, try those with <code>leanproject get-cache --rev ANOTHER_CACHE</code>and repeat the step above.</li>\n<li>If none of the caches avoid rebuilding some foundational file, give up and let CI build it for me, and do other things</li>\n</ul>",
        "id": 292122779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659688122
    },
    {
        "content": "<p>I guess that what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> meant by \"knowing the import graph at the revisions\" means that in theory one could say \"pick all oleans from <code>master</code> but for the specific file <code>number_theory.obscure_thing</code> rather pick the commit <code>bla</code>\".</p>",
        "id": 292122817,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659688162
    },
    {
        "content": "<p>Right, but that doesn't work if <code>number_theory.obscure_thing</code> imports other files that have changed on master</p>",
        "id": 292122854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659688191
    },
    {
        "content": "<p>because if files you import have changed, your olean is stale</p>",
        "id": 292122927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659688208
    },
    {
        "content": "<p>Sure. Great, thank you all so much! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 292122930,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659688209
    },
    {
        "content": "<p>Where we could do something cleverer if is one branch changes <code>number_theory/obscure_thing</code> and the other changes <code>combinatorics/obscure_thing</code>; in the case, we can just mix the oleans from the two branches</p>",
        "id": 292123004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659688252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/multiple.20viable.20caches.20from.20parent.20commits/near/292122779\">said</a>:</p>\n<blockquote>\n<p>My workflow for getting a cache is:</p>\n<ul>\n<li>Try the <code>leanproject get-cache --download-all</code> option, which downloads all possible caches and chooses the first one</li>\n<li>Run <code>lean --make src/the/file_i_want_to_work_on.lean</code>.  If this starts building <code>data/nat/basic</code> or something I know to be a long way from my work, declare this cache bad</li>\n<li>If <code>download-first</code> printed out any alternative caches, try those with <code>leanproject get-cache --rev ANOTHER_CACHE</code>and repeat the step above.</li>\n<li>If none of the caches avoid rebuilding some foundational file, give up and let CI build it for me, and do other things</li>\n</ul>\n</blockquote>\n<p>Great!</p>",
        "id": 292123012,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659688260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 292123020,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659688266
    },
    {
        "content": "<p>Bottomline: always have some e-mails that needed to be treated in your inbox! <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 292123122,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659688328
    },
    {
        "content": "<p>or you have always have more than 3 Lean projects to work on <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 292123248,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659688431
    },
    {
        "content": "<p>It is certainly good to have non-Lean things to attend to, but I find that I only really am in trouble with oleans if I am actually working on two different files with large import graph between them.</p>",
        "id": 292123668,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659688700
    },
    {
        "content": "<p>Otherwise, <code>master</code>s oleans are essentially perfect.</p>",
        "id": 292123708,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659688737
    },
    {
        "content": "<p>Yes, I agree: the problem is that I did a <code>merge master</code> recently and saw this <code>multiple viable...</code> for the first time, that got me interested. But indeed, 99% of the time <code>master</code> oleans are perfect.</p>",
        "id": 292124421,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659689231
    }
]