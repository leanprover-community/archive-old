[
    {
        "content": "<p>Here's an interesting edge case in the typeclass system I came across in <a href=\"https://github.com/leanprover-community/mathlib/pull/16919\">#16919</a> involving <code>outParam</code>s. Suppose we have a chain of instances <code>Top α β → Middle α β → Bot α β</code>, where <code>β</code> is an <code>outParam</code>, and both take an instance on <code>β</code> as a parameter. If the classes on <code>β</code> arise from diamond inheritance, Lean 3 can't find the desired instance automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Root</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Left</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Leaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Left</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Right</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bottom</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Middle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toMiddle</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Left</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Middle.toBottom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Right</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toBottom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails</span>\n</code></pre></div>\n<p>The reason for this issue is as follows. After we apply <code>Middle.toBottom</code> we want to apply <code>Top.toMiddle</code>, so we need to unify <code>@Middle ?x_3 ?x_4 (@Right.to_Root ?x_4 ?x_5)</code> arising from <code>Middle.toBottom</code> with <code>@Middle ?x_7 ?x_8 (@Left.to_Root ?x_8 ?x_9)</code> arising from <code>Top.toMiddle</code>. To unify <code>(@Right.to_Root ?x_4 ?x_5) =?= (@Left.to_Root ?x_8 ?x_9)</code> we need to fill in a value for the metavariables (which will be <code>β</code>). But the value of this metavariable is only available through unification with <code>Top.toMiddle</code>, so we are stuck in a dependency cycle.</p>",
        "id": 319807606,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673020300
    },
    {
        "content": "<p>On the other hand, Lean 4 can successfully find this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Root</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Left</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Leaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Left</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Right</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bottom</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Middle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toMiddle</span> <span class=\"o\">[</span><span class=\"n\">Left</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Middle.toBottom</span> <span class=\"o\">[</span><span class=\"n\">Right</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toBottom</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- Succeeds</span>\n</code></pre></div>\n<p>However, the dangerous instance linter is not satisfied:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dangerousInstance` linter reports:</span>\n<span class=\"cm\">SOME INSTANCES ARE DANGEROUS</span>\n<span class=\"cm\">During type-class search, they produce subgoals like `Group ?M`.</span>\n<span class=\"cm\">Try marking the dangerous arguments as implicit instead. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Top.toMiddle</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 3 inst✝¹ : Left ?β -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Middle.toBottom</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 3 inst✝¹ : Right ?β -/</span>\n</code></pre></div>",
        "id": 319808078,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673020438
    },
    {
        "content": "<p>This seems to be caused by Lean 4 going ahead and solving the <code>Leaf ?β</code> instance with backtracking. For example, if I try to confuse matters by adding in more <code>Leaf</code> instances, we see the backtracking:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Top.toBottom</span> <span class=\"o\">[</span><span class=\"n\">correctInst</span> <span class=\"o\">:</span> <span class=\"n\">Leaf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">badInst1</span> <span class=\"o\">:</span> <span class=\"n\">Leaf</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">badInst2</span> <span class=\"o\">:</span> <span class=\"n\">Right</span> <span class=\"n\">Int</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  [] new goal Bottom α _tc.0 ▶</span>\n<span class=\"sd\">  [] ✅ apply @Middle.toBottom to Bottom α ?m.332 ▼</span>\n<span class=\"sd\">    [tryResolve] ✅ Bottom α ?m.332 ≟ Bottom α ?m.332 ▼</span>\n<span class=\"sd\">      [synthInstance] 💥 Right ?m.332 ▶</span>\n<span class=\"sd\">      [synthInstance] 💥 Right ?m.332 ▼</span>\n<span class=\"sd\">        [] new goal Right ?m.332 ▼</span>\n<span class=\"sd\">          [instances] #[@Leaf.toRight, badInst2]</span>\n<span class=\"sd\">        [] 💥 apply badInst2 to Right ?m.332 ▼</span>\n<span class=\"sd\">          [tryResolve] 💥 Right ?m.332 ≟ Right Int</span>\n<span class=\"sd\">    [] new goal Right _tc.0 ▼</span>\n<span class=\"sd\">      [instances] #[@Leaf.toRight, badInst2]</span>\n<span class=\"sd\">  [] ✅ apply badInst2 to Right Int ▶</span>\n<span class=\"sd\">  [resume] propagating Right Int to subgoal Right Int of Bottom α Int ▶</span>\n<span class=\"sd\">  [] ❌ apply @Top.toMiddle to Middle α Int ▶</span>\n<span class=\"sd\">  [] ✅ apply @Leaf.toRight to Right ?m.356 ▼</span>\n<span class=\"sd\">    [tryResolve] ✅ Right ?m.356 ≟ Right ?m.356</span>\n<span class=\"sd\">    [] new goal Leaf _tc.0 ▶</span>\n<span class=\"sd\">  [] ✅ apply badInst1 to Leaf Nat ▼</span>\n<span class=\"sd\">    [tryResolve] ✅ Leaf Nat ≟ Leaf Nat</span>\n<span class=\"sd\">  [resume] propagating Leaf Nat to subgoal Leaf Nat of Right Nat ▶</span>\n<span class=\"sd\">  [resume] propagating Right Nat to subgoal Right Nat of Bottom α Nat ▶</span>\n<span class=\"sd\">  [] ✅ apply @Top.toMiddle to Middle α Nat ▶</span>\n<span class=\"sd\">  [] ✅ apply @Leaf.toLeft to Left Nat</span>\n<span class=\"sd\">  [resume] propagating Left Nat to subgoal Left Nat of Middle α Nat ▶</span>\n<span class=\"sd\">  [] ❌ apply inst✝ to Top α Nat ▶</span>\n<span class=\"sd\">  [] ✅ apply correctInst to Leaf β ▶</span>\n<span class=\"sd\">  [resume] propagating Leaf β to subgoal Leaf β of Right β ▶</span>\n<span class=\"sd\">  [resume] propagating Right β to subgoal Right β of Bottom α β ▶</span>\n<span class=\"sd\">  [] ✅ apply @Top.toMiddle to Middle α β ▶</span>\n<span class=\"sd\">  [] ✅ apply @Leaf.toLeft to Left β</span>\n<span class=\"sd\">  [resume] propagating Left β to subgoal Left β of Middle α β ▶</span>\n<span class=\"sd\">  [] ✅ apply inst✝ to Top α β ▶</span>\n<span class=\"sd\">  [resume] propagating Top α β to subgoal Top α β of Middle α β ▶</span>\n<span class=\"sd\">  [resume] propagating Middle α β to subgoal Middle α β of Bottom α β ▶</span>\n<span class=\"sd\">  [] result Middle.toBottom</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 319809334,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673020788
    },
    {
        "content": "<p>Finally, if we follow the <code>dangerousInstance</code> linter and turn the instance parameters into implicits, the example breaks in Lean 4 for the same reason as in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Root</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Left</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Leaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Left</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Right</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bottom</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Middle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toMiddle</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Left</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Middle.toBottom</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Right</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toBottom</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- Failed</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[Meta.synthInstance] ❌ Bottom α β ▼</span>\n<span class=\"cm\">  [] new goal Bottom α _tc.0 ▶</span>\n<span class=\"cm\">  [] ✅ apply @Middle.toBottom to Bottom α ?m.322 ▶</span>\n<span class=\"cm\">  [] ❌ apply @Top.toMiddle to Middle α ?m.322 ▼</span>\n<span class=\"cm\">    [tryResolve] ❌ Middle α ?m.322 ≟ Middle ?m.340 ?m.339 ▼</span>\n<span class=\"cm\">      [synthInstance] 💥 Right ?m.339 ▼</span>\n<span class=\"cm\">        [] new goal Right ?m.339 ▶</span>\n<span class=\"cm\">        [] ✅ apply @Leaf.toRight to Right ?m.339 ▶</span>\n<span class=\"cm\">        [] 💥 apply inst✝¹ to Leaf ?m.339 ▼</span>\n<span class=\"cm\">          [tryResolve] 💥 Leaf ?m.339 ≟ Leaf β</span>\n<span class=\"cm\">      [synthInstance] 💥 Left ?m.339 ▶</span>\n<span class=\"cm\">      [synthInstance] 💥 Right ?m.339 ▶</span>\n<span class=\"cm\">      [synthInstance] 💥 Left ?m.339 ▶</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 319809939,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673020944
    },
    {
        "content": "<p>I'm not entirely sure what the conclusion is supposed to be. We can see it is possible to make this construction work, and it certainly does arise naturally in mathlib (since I came across it in <a href=\"https://github.com/leanprover-community/mathlib/pull/16919\">#16919</a>), so I'd love for this to just work unconditionally. But the elaboration order to make this work without backtracking is highly nontrivial.</p>",
        "id": 319810999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673021277
    },
    {
        "content": "<p>Perhaps the conclusion is that we shouldn't have instances that take instance parameters depending on <code>outParam</code>s only, and instead only do constructions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Root</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Left</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Root</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Leaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Left</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Right</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ParamProvider</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bottom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Middle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Root</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toMiddle</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Left</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Middle.toBottom</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Right</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Middle</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Top.toBottom</span> <span class=\"o\">[</span><span class=\"n\">ParamProvider</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bottom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>That is, unbundled inheritance from <code>FunLike</code> and <code>SetLike</code>.</p>",
        "id": 319812423,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673021731
    }
]