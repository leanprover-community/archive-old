[
    {
        "content": "<p>Hi,</p>\n<p>I am redefining + from the library for pedagogical reasons. When I prove something I noticed that <code>dsimp [(+),add],</code> folds the result back using my notation, e.g. my goal is <code>0+succ n' = succ n'</code> and I say <code>dsimp [(+),add],</code> I get <code>succ (0+n') = succ n'</code>. But when I use the library version this doesn't work and I have to use <code>nat.add</code> even though I opened nat. Do I need to open something else?</p>",
        "id": 308960958,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1668076967
    },
    {
        "content": "<p>See the attached files.<br>\nCheers,<br>\nThorsten <br>\n<a href=\"/user_uploads/3121/edyFP0xf36VQgaP9DLA8Ii1m/ex-1.lean\">ex-1.lean</a> <a href=\"/user_uploads/3121/ujt0yxi7PHIyP21uYe21Tqlx/ex-2.lean\">ex-2.lean</a></p>",
        "id": 308961075,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1668077021
    },
    {
        "content": "<p>In mathlib the <code>n + m</code> and <code>nat.add n m</code> are definitionally equal, but not syntactically equal. The former is <code>has_add.add n m</code> (and the instance <code>nat.has_add</code> is defined to use <code>nat.add</code>. In your file, you made <code>+</code> directly notation for your version of <code>nat.add</code>. That's why the behavior is different.</p>\n<p>For the mathlib <code>+</code> you want to use the lemma <code>nat.add_succ</code> (proven by reflexivity) instead: <code>dsimp [nat.add_succ],</code> (and <code>dsimp [nat.add_zero],</code> works in the zero-case).</p>",
        "id": 308984111,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668085523
    },
    {
        "content": "<p>(PS: we prefer code snippets in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> instead of Lean files on this Zulip, unless the files are huge.)</p>",
        "id": 308984274,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668085590
    },
    {
        "content": "<p>BTW: I recommend using backticks in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">add</span><span class=\"o\">)</span>\n  <span class=\"n\">m</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Then the pretty printer will print spaces around your <code>+</code>.</p>",
        "id": 308984337,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668085620
    },
    {
        "content": "<p>One further comment: in <code>ex-1</code>, <code>dsimp [(+)]</code>, <code>dsimp [add]</code>, and <code>dsimp [(+), add]</code> all do exactly the same thing (since <code>+</code> is notation for <code>add</code>). In <code>ex-2</code> both arguments in <code>dsimp [(+), nat.add]</code> do something different.</p>",
        "id": 308984952,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668085840
    },
    {
        "content": "<p>Ah thank you. Ok I should always use the lemmas instead. From agda I am used to just apply definitions but I see that this can have disadvantages in terms of portability of proofs.</p>",
        "id": 309010081,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1668093289
    }
]