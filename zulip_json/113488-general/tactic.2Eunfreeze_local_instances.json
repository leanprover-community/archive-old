[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">class</span> <span class=\"n\">t0_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_open_singleton_of_fintype</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t0_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}:</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">case_strong_induction_on</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">S</span> <span class=\"n\">hxS</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">x</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">is_open_univ</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hv1</span><span class=\"o\">,</span> <span class=\"n\">hv2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hxV</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">t0_space</span><span class=\"bp\">.</span><span class=\"n\">t0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">hxS</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hxy</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">hu1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hu2</span><span class=\"o\">,</span> <span class=\"n\">hu3</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">hu2</span><span class=\"o\">,</span> <span class=\"n\">hu3</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">x</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">is_open_inter</span> <span class=\"n\">hu1</span> <span class=\"n\">hv1</span><span class=\"o\">],</span>\n          <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n          <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hzx</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">hzx</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">hzx</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">x</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hu2</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span>\n            <span class=\"n\">rcases</span> <span class=\"n\">hz</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">hz1</span><span class=\"o\">,</span> <span class=\"n\">hz2</span><span class=\"o\">,</span> <span class=\"n\">hz3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hz1</span> <span class=\"k\">with</span> <span class=\"n\">hz4</span> <span class=\"n\">hz4</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hz4</span> <span class=\"o\">},</span>\n            <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n              <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hz4</span><span class=\"o\">,</span> <span class=\"n\">hz3</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n              <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hv2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hu3</span> <span class=\"n\">hz2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">is_open_inter</span> <span class=\"n\">hu1</span> <span class=\"n\">hv1</span><span class=\"o\">],</span>\n          <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n          <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hu2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">hv2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"k\">with</span> <span class=\"n\">hz1</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hz1</span> <span class=\"k\">with</span> <span class=\"n\">hz3</span> <span class=\"n\">hz3</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hz3</span> <span class=\"n\">at</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hu3</span> <span class=\"n\">hz2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n            <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">hz3</span><span class=\"o\">,</span> <span class=\"n\">hz2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hv2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hv1</span><span class=\"o\">],</span>\n        <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">hv2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hv2</span><span class=\"o\">,</span>\n          <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"k\">with</span> <span class=\"n\">hz1</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n          <span class=\"n\">cases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hz1</span> <span class=\"k\">with</span> <span class=\"n\">hz3</span> <span class=\"n\">hz3</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hz3</span> <span class=\"n\">at</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hxV</span> <span class=\"n\">hz2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hz3</span><span class=\"o\">,</span> <span class=\"n\">hz2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ne_empty_of_mem</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hyf</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hu1</span><span class=\"o\">,</span> <span class=\"n\">hu2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">hu2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ_inter</span> <span class=\"n\">at</span> <span class=\"n\">hu2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hu2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hu1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136670895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540763025
    },
    {
        "content": "<p>Why do I need <code>tactic.unfreeze_local_instances</code> there?</p>",
        "id": 136670896,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540763031
    },
    {
        "content": "<p>(working example, but clearly not minimal)</p>",
        "id": 136670937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540763043
    },
    {
        "content": "<p>because it's a typeclas arg left of the colon</p>",
        "id": 136671127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540763436
    },
    {
        "content": "<p>you can use <code>unfreezeI</code> for short</p>",
        "id": 136671141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540763468
    },
    {
        "content": "<p>I don't understand</p>",
        "id": 136671337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540763831
    },
    {
        "content": "<p>isn't every typeclass argument left of colon?</p>",
        "id": 136671338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540763837
    },
    {
        "content": "<p>You don't usually do <code>cases </code> on type class args</p>",
        "id": 136672307,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540765580
    },
    {
        "content": "<p>yeah even if I don't do cases it still messes up</p>",
        "id": 136672310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540765618
    },
    {
        "content": "<p>anything that disrupts the context past the position of the colon will require <code>unfreezeI</code></p>",
        "id": 136672815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540766575
    },
    {
        "content": "<p>in this case you can do <code>cases id ha with a</code> if you don't want to clear the hypothesis in the context</p>",
        "id": 136672827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540766626
    },
    {
        "content": "<p>oh, I get it now</p>",
        "id": 136672869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540766655
    },
    {
        "content": "<p>oh and how would you golf the proof?</p>",
        "id": 136672878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540766701
    },
    {
        "content": "<p>I've been thinking about that... that proof is a little scary long</p>",
        "id": 136672888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540766727
    },
    {
        "content": "<p>Maybe you can find a maximal element in the specialization preorder?</p>",
        "id": 136672900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540766751
    },
    {
        "content": "<p>I don't understand what you mean by the specialization preorder</p>",
        "id": 136673208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540767238
    },
    {
        "content": "<p>okay, I refreshed my memory on the <a href=\"https://en.wikipedia.org/wiki/Specialization_(pre)order\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Specialization_(pre)order\">specialization preorder</a> and indeed this proof should work (although it is a minimal element by wiki's definition)</p>",
        "id": 136673248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767257
    },
    {
        "content": "<p>it's basically finite zorn's lemma</p>",
        "id": 136673257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767282
    },
    {
        "content": "<p>A point x specialises to a point y if y is in the closure of x</p>",
        "id": 136673318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540767351
    },
    {
        "content": "<p>I think that's the reverse of wiki's terminology?</p>",
        "id": 136673388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767395
    },
    {
        "content": "<p>they say y is a specialization of x in that case</p>",
        "id": 136673398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767409
    },
    {
        "content": "<p>they also say that the orientation is contentious</p>",
        "id": 136673422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767442
    },
    {
        "content": "<p>Darn Zulip app doesn't show me new posts when they arrive</p>",
        "id": 136673448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540767476
    },
    {
        "content": "<p>Including my own</p>",
        "id": 136673490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540767485
    },
    {
        "content": "<p>Right -- x specialises to y, so y is a specialisation of x.</p>",
        "id": 136673513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540767546
    },
    {
        "content": "<p>okay, I wasn't sure about the active verb there</p>",
        "id": 136673520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767573
    },
    {
        "content": "<p>This is how the words are used in algebraic geometry at least</p>",
        "id": 136673587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540767654
    },
    {
        "content": "<p>You should look at the wiki page and decide which order of le makes sense</p>",
        "id": 136673661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767747
    },
    {
        "content": "<p>I'm leaning to the first definition, <code>x &lt;= y</code> means x is a specialization of y, because the evidence from algebraic geometry using Spec R smacks of that order-reversing filter thing</p>",
        "id": 136673675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540767817
    },
    {
        "content": "<p>The ordering I have seen is the one which is equivalent to x \\le y if closure({x}) is a subset of closure({y})</p>",
        "id": 136674194,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540768773
    },
    {
        "content": "<p>Actually, I'm not sure which way it goes now and my source is at home</p>",
        "id": 136674320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540769007
    },
    {
        "content": "<p>I'm not sure why this argument doesn't extend to the infinite case by zorn's lemma though</p>",
        "id": 136674734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540769769
    },
    {
        "content": "<p>Obviously it's not true for R so I'm missing a part of the argument</p>",
        "id": 136674742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540769803
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/448\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/448\">https://github.com/leanprover/mathlib/pull/448</a></p>",
        "id": 136680702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540781191
    },
    {
        "content": "<blockquote>\n<p>Obviously it's not true for R so I'm missing a part of the argument</p>\n</blockquote>\n<p>For sensible spaces like R the preorder is just \"x&lt;=y iff x=y\". So there are maximal and minimal elements, but these do not correspond to open singletons.</p>",
        "id": 136690249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540799786
    },
    {
        "content": "<p>Okay, the paper where I've encountered this actually says \"... so that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>≤</mo><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\le_X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.63597em;\"></span><span class=\"strut bottom\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mrel\"><span class=\"mrel\">≤</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is the well-known [4] reflexive and transitive relation <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>∈</mo><mo>{</mo><mi>x</mi><msup><mo>}</mo><mo>−</mo></msup></mrow><annotation encoding=\"application/x-tex\">y \\in \\{x\\}^-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">∈</span><span class=\"mopen\">{</span><span class=\"mord mathit\">x</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span></span></span></span>\", so I did have this backwards.</p>",
        "id": 136702815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540816683
    },
    {
        "content": "<p>After being confused by this for a while, my conclusion is that the \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> specializes to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>\" relation is actually different in algebraic geometry and in domain theory</p>",
        "id": 136708004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540822211
    },
    {
        "content": "<p>one of them has to do with closed sets, the other with open sets</p>",
        "id": 136708039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540822266
    },
    {
        "content": "<p>Because of the duality between open and closed sets, this appears as a reversal of the order</p>",
        "id": 136708108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540822328
    },
    {
        "content": "<p>In algebraic geometry, a \"generic point\" of an irreducible algebraic variety is a rigorous notion of the intuitive idea of how a general point on the variety behaves. Historically this was done in a vague way -- we had the \"actual points\" and then \"it's true for a generic point\" just meant \"most points satisfy this\" with several, sometimes competing definitions of \"most\", but with Grothendieck's approach we have the luxury of the generic point actually being a point in the top space, whose topological closure is the entire variety. The idea is that a generic point can specialise to a random \"actual point\", which is then a specialisation of the generic point. Perhaps the simplest example of this is the two-point topological space with one closed and one open point. A fruitful mental model of this space in geometry is that the whole space is the open unit disc, the closed point is the origin, and the open point is all the other points --  a \"general\" point in the open disc. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">η</span></span></span></span> is the generic point and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span></span></span></span> the closed point then the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>η</mi><mo separator=\"true\">,</mo><mi>η</mi><mo separator=\"true\">,</mo><mi>η</mi><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\eta,\\eta,\\eta,\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">η</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">η</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">η</span><span class=\"mpunct\">,</span><span class=\"minner\">…</span></span></span></span> converges to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span></span></span></span> (as well as to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">η</span></span></span></span>), which is the specialisation in action. One cna think of it as a bunch of points in the punctured disc tending to the origin.</p>",
        "id": 136715016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540828330
    },
    {
        "content": "<p>BTW, since I just grepped for <code>unfreeze</code> in mathlib and was surprised by how often it turns up: please don't use <code>tactic.unfreeze_local_instances</code>.  This is a huge performance problem since it disables the local instance cache.  Please use tactics like <code>substI</code>, <code>casesI</code>, <code>unfreezingI { ... }</code>, etc. instead.  And if all that doesn't work, please use <code>tactic.reset_instance_cache</code>.  Please never use <code>tactic.unfreeze_local_instances</code>.</p>",
        "id": 267378028,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641762743
    },
    {
        "content": "<p>I had no idea. Sorry if something I wrote used it and made it to master</p>",
        "id": 267378475,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641763440
    },
    {
        "content": "<p>It might help if Lean didn't suggest using it. There are two places in the Lean repository that say \"try <code>tactic.unfreeze_local_instances</code>\" or \"use tactic <code>tactic.unfreeze_local_instances</code>\".  library/init/meta/tactic.lean and src/library/type_context.cpp</p>",
        "id": 267379189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641764505
    },
    {
        "content": "<p>Can we lint against this? Also, are the suggested alternatives available in core, or are they partly mathlib?</p>",
        "id": 267400795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641797177
    },
    {
        "content": "<p>The <code>exactI</code> etc tactics are in mathlib, but it wouldn't be the first time lean error messages make reference to things in mathlib</p>",
        "id": 267404179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641801018
    },
    {
        "content": "<p>But also, they have very few prerequisites so we could just move them to core</p>",
        "id": 267404199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641801049
    }
]