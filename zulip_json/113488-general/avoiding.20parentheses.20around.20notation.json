[
    {
        "content": "<p>I have the following notation definition, and I would like the first example to work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space_def</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">measurable_set'</span><span class=\"bp\">`</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set'</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>  <span class=\"c1\">-- error: function expected at m</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">measurable_set'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The issue is that <code>m s</code> is understood to be the argument of the notation instead of <code>m</code> only. How can I change that behaviour?</p>",
        "id": 245937286,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626255167
    },
    {
        "content": "<p>An alternative would be to define a notation taking two arguments, but I don't know how to do that without introducing a symbol between them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">measurable_set'</span><span class=\"bp\">`</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">s</span>           <span class=\"c1\">-- error</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">measurable_set'</span><span class=\"bp\">`</span> <span class=\"n\">m</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measurable_set</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">s</span>   <span class=\"c1\">-- works, but not what I want</span>\n</code></pre></div>",
        "id": 245937661,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626255433
    },
    {
        "content": "<p><code>notation `measurable_set'` := @measurable_set _</code> seems to work</p>",
        "id": 245938062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626255704
    },
    {
        "content": "<p>Thanks! It works indeed.</p>",
        "id": 245938279,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626255838
    },
    {
        "content": "<p><code>notation `measurable_set'` m:max := @measurable_set _ m</code> works too</p>",
        "id": 245938389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626255897
    },
    {
        "content": "<p>Is there a reason for avoiding <code>abbreviation</code> here?</p>",
        "id": 245938434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626255933
    },
    {
        "content": "<p>Interesting. Do you have a link to documentation about that <code>:max</code>? I would like to know more</p>",
        "id": 245938436,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626255933
    },
    {
        "content": "<p><code>:max</code> is just <code>:1024</code></p>",
        "id": 245938448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626255945
    },
    {
        "content": "<p>After all, there are no larger integers /s</p>",
        "id": 245938470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626255960
    },
    {
        "content": "<p>My dumb reason for not using abbreviation is that I don't know what it is. I'll look it up.</p>",
        "id": 245938571,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626256027
    },
    {
        "content": "<p>Do you have a link to documentation about <code>abbreviation</code>?</p>",
        "id": 245938945,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626256286
    },
    {
        "content": "<p>No, but I can tell you that <code>abbreviation</code> is just short for <code>@[inline, reducible] def</code>, and you almost certainly don't care about <code>inline</code>.</p>",
        "id": 245939428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626256666
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#reducible\">attr#reducible</a> isn't documented in a way doc-gen understands</p>",
        "id": 245939487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626256685
    },
    {
        "content": "<p>Thanks. Is there an advantage to using <code>abbreviation</code> instead of <code>notation</code>?</p>",
        "id": 245939967,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1626257036
    },
    {
        "content": "<p>The main one I can think of is that it works with namespaces,<code>measurable_space.measurable_set'</code> would only work with <code>abbreviation</code> and not <code>notation</code></p>",
        "id": 245941086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626257833
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/busywork/near/244410669\">This recent conversation</a> cleared up a lot of my confusion about the difference between <code>abbreviation</code> and <code>notation</code>.</p>",
        "id": 245941980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626258469
    },
    {
        "content": "<p>I think you want this to be a notation and not an abbreviation, since it is being used as a shorthand to write statements involving <code>measurable_set</code> with unusual instances</p>",
        "id": 245947623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626262423
    }
]