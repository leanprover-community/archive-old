[
    {
        "content": "<p>Is there any attempt at converting lean code into interactive proofs? I mean LaTeX could never do that because it does not actually understand the proof. But if there was a way to \"render\" lean proofs, you could click on an equal sign or implication and lean could add additional information. Has anybody thought about this yet? I.e. Proof assistants to generate Math presentation?</p>",
        "id": 277886905,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649168856
    },
    {
        "content": "<p>Do you mean slides? Or any interactive means?<br>\n<a href=\"https://github.com/cpitclaudel/alectryon\">Alectryon</a> can create pages with hover handles for Lean 3. And there's a WIP integration of Alectryon and <a href=\"https://github.com/leanprover/LeanInk\">LeanInk</a> for Lean 4</p>",
        "id": 277887646,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649169158
    },
    {
        "content": "<p>In Lean itself we have <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> work on teaching the tactic system a form of natural languagehere in french: <a href=\"https://github.com/PatrickMassot/lean-bavard\">https://github.com/PatrickMassot/lean-bavard</a> and here the English port: <a href=\"https://github.com/PatrickMassot/lean-verbose\">https://github.com/PatrickMassot/lean-verbose</a>. The Isabelle/HOL system has made huge efforts over the years to make their proofs as readable as normal mathematical text using an extension upon their basic system that is called Isar, however integrating such a thing into Lean would first require us to develop the insane amount of automatic reasoning Isabelle already has. Regarding theorem prover mathematics it's the closest thing I know to just ordinary mathematical texts.</p>\n<p>We also have some work going on on porting the Coq tool <a href=\"https://github.com/cpitclaudel/alectryon\">https://github.com/cpitclaudel/alectryon</a> to Lean 4 here: <a href=\"https://github.com/leanprover/LeanInk\">https://github.com/leanprover/LeanInk</a> this doesn't exactly make the proof itself more readable, but the static presentation of the proof outside of an editor becomes much more interactive and we could for example render proofs about trees as actual trees in HTML.</p>",
        "id": 277887686,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649169176
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/LeanInk.2FAlectryon/near/276611868\">This thread</a> is reasonably recent on the topic of LeanInk + Alectryon</p>",
        "id": 277887975,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649169300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  I mean interactive webpages - something more advanced than this <a href=\"https://mannheim-probability.github.io/Probability-Theory/exercises/sheet_7.html\">https://mannheim-probability.github.io/Probability-Theory/exercises/sheet_7.html</a> (which is the result of applying latexml to existing latex documents and adding javascript which turns the solutions into collapsible html elements - which is the only interactive element so far).</p>",
        "id": 277888166,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649169380
    },
    {
        "content": "<p>for example being able to get incrementally more explicit hints or having your solution checked etc</p>",
        "id": 277888268,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649169430
    },
    {
        "content": "<p>That would be absolutely amazing but I don't think something like this is even close to what we can reasonably provide at the moment.</p>",
        "id": 277888343,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649169465
    },
    {
        "content": "<p>At least not automatically generated, you could have the math texts handwritten and backed by lean code of course.</p>",
        "id": 277888462,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649169499
    },
    {
        "content": "<p>Do you mean having a Lean kernel running in your browser, being able to communicate with a remote Lean kernel or something like that?</p>",
        "id": 277888477,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649169506
    },
    {
        "content": "<p>anything really - just wanted to know what efforts there were so far in this direction. Will read up on all the links provided now :)</p>",
        "id": 277888761,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649169626
    },
    {
        "content": "<p>Have you seen the <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">Natural number game</a>?</p>",
        "id": 277889033,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649169736
    },
    {
        "content": "<p>yes I have - amazing! :)</p>",
        "id": 277889118,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649169779
    },
    {
        "content": "<p>that was my first contact with lean - what I noticed there is that it is kind of like giving directions a la</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">go</span> <span class=\"mi\">30</span> <span class=\"n\">steps</span> <span class=\"n\">southeast</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span> <span class=\"n\">turn</span> <span class=\"mi\">20</span> <span class=\"n\">degrees</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">and</span> <span class=\"n\">go</span> <span class=\"mi\">20</span> <span class=\"n\">steps</span>\n<span class=\"mi\">3</span><span class=\"bp\">....</span>\n</code></pre></div>\n<p>In contrast to how math is usually laid out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">To</span> <span class=\"n\">the</span> <span class=\"n\">south</span> <span class=\"n\">east</span> <span class=\"n\">you</span> <span class=\"n\">should</span> <span class=\"n\">see</span> <span class=\"n\">a</span> <span class=\"n\">watertower</span><span class=\"o\">,</span> <span class=\"n\">go</span> <span class=\"n\">to</span> <span class=\"n\">that</span>\n</code></pre></div>\n<p>i.e. provide landmark equations and some sentences in-between but leave the actual steps to the reader.</p>",
        "id": 277889544,
        "sender_full_name": "Felix Benning",
        "timestamp": 1649169958
    },
    {
        "content": "<p>Felix, you can have a look at <a href=\"https://www.imo.universite-paris-saclay.fr/~pmassot/files/exposition/why_formalize.pdf\">https://www.imo.universite-paris-saclay.fr/~pmassot/files/exposition/why_formalize.pdf</a> to see you're not the only one dreaming here. Clearly we need a way to turn Lean file into interactive document that look like ordinary math texts except you can ask to see more details anywhere you like.</p>",
        "id": 277889919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649170100
    },
    {
        "content": "<p>As usual here, the answer is that we wait for mathlib in Lean 4 before doing serious work.</p>",
        "id": 277890013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649170131
    }
]