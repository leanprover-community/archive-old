[
    {
        "content": "<p>Hello! It took me quite a while, because I struggled a lot with equivalences, but I have a proof of the derangement formula! <a href=\"https://pastebin.com/Mvx1TE2Y\">https://pastebin.com/Mvx1TE2Y</a></p>\n<p>This is a super rough draft -- lemme know if there's anything else I should do prior to making a PR. I'm mostly just stoked to have a sorry-free proof finally. I plan to:</p>\n<ul>\n<li>rename a bunch of lemmas to be more Lean-conventional</li>\n<li>try to turn those <code>apply equiv.trans</code> sections into calc blocks</li>\n<li>look for more small lemmas to extract, some of these are pretty long</li>\n<li>figure out if equiv_rw can help me here</li>\n</ul>\n<p>Also, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I know you suggested a finset approach, but I couldn't get the proofs of nodup working right. I feel like <code>nodup_perms_of_list</code> is the right kind of thing to pattern off of,  but that proof is a bit too dense for me.</p>",
        "id": 237270937,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1620106534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402311\">@Henry Swanson</span> congrats!</p>",
        "id": 237272341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620107969
    },
    {
        "content": "<p>Your list of plans looks good. I would add three things before opening a PR:</p>\n<ul>\n<li>update the code to follow the style guide (you have lots of <code>{</code> and <code>}</code> on their own line, but mathlib compresses them like</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">some_tactic</span><span class=\"o\">,</span>\n    <span class=\"n\">other_tactic</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">yet_other</span> <span class=\"n\">tactic</span> <span class=\"o\">}</span>\n</code></pre></div>\n<ul>\n<li>add docstrings <code>/-- I'm a docstring, I start with two dashes -/</code> above every definition</li>\n<li>add a module docstring <code>/-! I'm a module doc. I start with dash-bang, and I'm usually &gt; 10 lines long. -/</code> at the top of the file, explaining what's going on.</li>\n</ul>",
        "id": 237272611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620108171
    },
    {
        "content": "<p>alrighty, that should be straightforward enough</p>\n<p>btw, is there a linter? i didn't see one in the vscode extensions, but maybe there's a python script of some sort</p>",
        "id": 237276632,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1620111226
    },
    {
        "content": "<p>I you type <code>#lint</code> in the lean file, it will warn you about missing definitions and other issues for all statements in the file above the current line.</p>",
        "id": 237276788,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1620111360
    },
    {
        "content": "<p>There isn't a style linter though</p>",
        "id": 237276836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620111374
    },
    {
        "content": "<p>It will not warn you about missing spaces or lone <code>{</code></p>",
        "id": 237276860,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1620111393
    },
    {
        "content": "<p>i'm following the <a href=\"https://leanprover-community.github.io/contribute/index.html\">instructions</a> on how to contribute to mathlib; can i get permissions to add a new branch? my username is <code>HenrySwanson</code></p>",
        "id": 237595255,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1620267485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402311\">@Henry Swanson</span> invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 237595308,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620267548
    },
    {
        "content": "<p>submitted now, thanks! :D</p>",
        "id": 237596137,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1620268238
    }
]