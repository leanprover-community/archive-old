[
    {
        "content": "<p>Hello everyone, my attempts at auto-generating the corresponding homomorphism types and categories for the classes we have already defined in mathlib have moved a bit. For example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">add_homomorphism_type</span> <span class=\"bp\">`</span><span class=\"n\">ordered_ring</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ordered_ring_homomorphism</span>\n</pre></div>\n\n\n<p>yields</p>\n<div class=\"codehilite\"><pre><span></span>def ordered_ring_homomorphism : Π {α : Type u} {β : Type v} [i₁ : ordered_ring α] [i₂ : ordered_ring β], (α → β) → Prop :=\nλ {α : Type u} {β : Type v} [i₁ : ordered_ring α] [i₂ : ordered_ring β] (f : α → β),\n  (∀ {x0 x1 : α}, f (ordered_ring.add x0 x1) = ordered_ring.add (f x0) (f x1)) ∧\n    f (ordered_ring.zero α) = ordered_ring.zero β ∧\n      (∀ {x0 : α}, f (ordered_ring.neg x0) = ordered_ring.neg (f x0)) ∧\n        (∀ {x0 x1 : α}, f (ordered_ring.mul x0 x1) = ordered_ring.mul (f x0) (f x1)) ∧\n          f (ordered_ring.one α) = ordered_ring.one β ∧\n            (∀ {x0 x1 : α}, ordered_ring.le x0 x1 → ordered_ring.le (f x0) (f x1)) ∧\n              ∀ {x0 x1 : α}, ordered_ring.lt x0 x1 → ordered_ring.lt (f x0) (f x1)\n</pre></div>\n\n\n<p>This is not perfect though, as one would hope for a class for the homomorphism type (to access the fields more easily).<br>\n How can I generate structures/classes in meta code?<br>\nAnd connected to that: can one retrieve the information that <code>group</code>extends <code>monoid</code> programmatically somehow, or is this immediately inlined?</p>",
        "id": 166707601,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559043918
    },
    {
        "content": "<p>The only way to create structures and classes in 3.4 is to use <code>emit_code_here</code> and build a string to send to the parser. There is an API for this in 3.5c</p>",
        "id": 166708585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559044722
    },
    {
        "content": "<p>I guess it should be possible to write a wrapper around <code>emit_code_here</code> that works in 3.4, right?</p>",
        "id": 166882389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559194794
    },
    {
        "content": "<p>It would take some <code>expr</code> and traverse it to build the string for you.</p>",
        "id": 166882438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559194829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Did you by chance already write such a wrapper?</p>",
        "id": 166882442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559194842
    },
    {
        "content": "<p>sorry Johan!</p>",
        "id": 166888219,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1559202991
    },
    {
        "content": "<blockquote>\n<p>The only way to create structures and classes in 3.4 is to use <code>emit_code_here</code> and build a string to send to the parser. There is an API for this in 3.5c</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! Follow-up: how does one \"call\" a <code>lean.parser unit</code> as a user?</p>",
        "id": 167419581,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559761159
    },
    {
        "content": "<p>You have to write a user command. You can look through mathlib and core for the occurrence of <code>@[user_command]</code> to show you examples of how it's done</p>",
        "id": 167420210,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559761590
    },
    {
        "content": "<p>ah, I already tried this and got stuck. What is wrong about this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_command</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">emit_homomorphism_structure</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;emitte&quot;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">struct_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">of_tactic</span> <span class=\"err\">$</span> <span class=\"n\">homomorphism_structure</span> <span class=\"n\">struct_name</span><span class=\"o\">,</span>\n   <span class=\"n\">emit_structure_here</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 167421841,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559762566
    },
    {
        "content": "<p>the error message reads </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">user</span><span class=\"bp\">-</span><span class=\"n\">defined</span> <span class=\"n\">command</span><span class=\"o\">,</span> <span class=\"n\">must</span> <span class=\"n\">return</span> <span class=\"n\">type</span> <span class=\"bp\">`</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">unit</span><span class=\"bp\">`</span>\n</pre></div>",
        "id": 167421985,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559762649
    },
    {
        "content": "<p>you can't put <code>struct_name</code> in the type; use <code>struct_name &lt;- ident</code> in the body</p>",
        "id": 167422333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559762915
    },
    {
        "content": "<p>thanks, it now works!<br>\nI had to put a dot after the last line, what does it mean?</p>",
        "id": 167423674,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559763916
    },
    {
        "content": "<p>Dot ends a top-level command. Usually it should be optional.</p>",
        "id": 167424026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559764184
    },
    {
        "content": "<p>Another question: i am using <code>expr.to_string</code> to create the strings for <code>emit_code_here</code> but the results do not parse straight away</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">i₁</span> <span class=\"n\">x0</span> <span class=\"n\">x1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">i₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x1</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 167424954,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559764855
    },
    {
        "content": "<p>is this intended, are there better methods, workarounds?<br>\n(implicit parameters are one problem, and <code>succ u</code>instead of <code>u+1</code>the other)</p>",
        "id": 167425097,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559764926
    }
]