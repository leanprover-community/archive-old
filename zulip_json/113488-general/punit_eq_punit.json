[
    {
        "content": "<p>This definition (from <code>library/init/data/punit.lean</code>) is less general than probably intended because <code>()</code> is (apparently) built-in notation for <code>unit.star</code> only, and so the full inferred type is actually <code>punit_eq_punit : âˆ€ (a : punit.{1}), @eq.{1} punit.{1} a unit.star</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">punit_eq_punit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n<span class=\"n\">punit_eq</span> <span class=\"n\">a</span> <span class=\"o\">()</span>\n</pre></div>\n\n\n<p>Since this is in the core Lean library, is there any hope to change it?</p>",
        "id": 125550617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524452792
    },
    {
        "content": "<blockquote>\n<p>Since this is in the core Lean library, is there any hope to change it?</p>\n</blockquote>\n<p>Someone should really read that Zulip bot documentation. Programming a bot to detect this question and answer \"no\" is probably a nice exercise then.</p>",
        "id": 125558322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524470092
    }
]