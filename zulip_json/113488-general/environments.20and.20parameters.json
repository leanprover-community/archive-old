[
    {
        "content": "<p>So I want to emulate inductive types defined in some section with parameters (or variables, I don't care). Can I do that by adding the paramters as local consts to some evironment <code>e</code> and then use <code>e.add_inductive</code>?</p>",
        "id": 125449732,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1524232129
    },
    {
        "content": "<p>You would need to make it a proper constant I think. I assume you're writing a user command?</p>",
        "id": 125449994,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524232540
    },
    {
        "content": "<p>There is no list of local consts in an environment, it's all in the parser (unexposed to Lean)</p>",
        "id": 125450242,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524232858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Yes, I am... I'll just take a look at environments...</p>",
        "id": 125450717,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1524233551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I don't necessarily need a list of them. So far I get around using parameters by just adding them as parameters to the inductive types I'm constructing and to every function I'm defining.</p>",
        "id": 125450747,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1524233612
    },
    {
        "content": "<p>Yes, that's what Lean itself does. It also creates aliases for the applied definitions in the parser, but you can't do that.</p>",
        "id": 125450823,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524233692
    },
    {
        "content": "<p>Do you have an idea how to solve that annoyance? Because it really makes my code very messy.</p>",
        "id": 125450856,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1524233757
    },
    {
        "content": "<p>It sometimes seems a bit arbitrary what's exposed as meta constants and what isn't...</p>",
        "id": 125451136,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1524234206
    }
]