[
    {
        "content": "<p>Hello everybody,</p>\n<p>Is there a definition of bilinear maps in mathlib? More specifically, I am looking for bilinear forms over the reals.</p>\n<p>I saw in a thread called \"module refactoring\" that there was a definition of bilinear maps before, but it seems to have disappeared. Maybe you know where this went, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> ?</p>\n<p>I have tried to chain linear maps like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but then I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Any ideas?</p>",
        "id": 160136971,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1551908361
    },
    {
        "content": "<p>works on my end:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160137599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551908813
    },
    {
        "content": "<p>Thank you! I hadn't imported <code>linear_algebra.tensor_product</code>. There must be some instantiation in there that I need. Do you know which one? I don't see it.</p>",
        "id": 160148861,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1551912839
    },
    {
        "content": "<p>you can use:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>to see that the instantiations are <code>linear_map.add_comm_group</code> and <code>linear_map.module</code>: both are in <code>linear_algebra/basic.lean</code></p>",
        "id": 160149069,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551913003
    }
]