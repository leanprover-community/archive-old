[
    {
        "content": "<p>Here is a mwe. It gives deterministic timeout. But if I remove the <code>mv_polynomial.bind₁</code> call from the hypothesis and the goal, it does exactly what I want, namely to convert it to a comparison of the lambdas. Why should this extra function cause it to time out?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.monad</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">proof_elems_index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_crs</span> <span class=\"n\">n_sample</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">twin1</span> <span class=\"n\">twin2</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n_crs</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">crs_elems</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_crs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_sample</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">agm</span><span class=\"o\">:</span> <span class=\"n\">proof_elems_index</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n_crs</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">proof_elems_index</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">poly_checks_pass'</span><span class=\"o\">:</span>\n    <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">mv_polynomial.bind₁</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">pf_idx</span> <span class=\"o\">:</span> <span class=\"n\">proof_elems_index</span><span class=\"o\">),</span>\n        <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">crs_idx</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n_crs</span><span class=\"o\">),</span>\n          <span class=\"n\">agm</span> <span class=\"n\">pf_idx</span> <span class=\"n\">crs_idx</span>\n            <span class=\"bp\">•</span>\n          <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">crs_idx</span> <span class=\"bp\">=</span> <span class=\"n\">twin1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">crs_elems</span> <span class=\"n\">twin1</span> <span class=\"bp\">+</span> <span class=\"n\">crs_elems</span> <span class=\"n\">twin2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">crs_idx</span> <span class=\"bp\">=</span> <span class=\"n\">twin2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">crs_elems</span> <span class=\"n\">crs_idx</span><span class=\"o\">))))</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">mv_polynomial.bind₁</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">pf_idx</span> <span class=\"o\">:</span> <span class=\"n\">proof_elems_index</span><span class=\"o\">),</span>\n      <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">crs_idx</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n_crs</span><span class=\"o\">),</span>\n      <span class=\"n\">agm</span> <span class=\"n\">pf_idx</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">crs_idx</span> <span class=\"bp\">=</span> <span class=\"n\">twin2</span><span class=\"o\">)</span> <span class=\"n\">twin1</span> <span class=\"n\">crs_idx</span><span class=\"o\">)</span>\n        <span class=\"bp\">•</span> <span class=\"n\">crs_elems</span> <span class=\"n\">crs_idx</span><span class=\"o\">))</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">poly_checks_pass'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295767769,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661733057
    },
    {
        "content": "<p>Well there's no particular reason why it shouldn't time out -- after all, maybe if we just unfold <code>mv_polynomial.bind₁</code> a bit we will find out that <code>poly_checks_pass'</code> already has the desired type?</p>",
        "id": 295768093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661733485
    },
    {
        "content": "<p>And often \"a bit\" turns into \"rather a lot\" especially when the answer is that the types <em>aren't</em> the same in the end.</p>",
        "id": 295768114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661733555
    },
    {
        "content": "<p>You could start with an explicit <code>apply congr_arg mv_polynomial.bind₁</code> or something.</p>",
        "id": 295768184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661733621
    },
    {
        "content": "<p>Probably not exactly right because of the coercion</p>",
        "id": 295768200,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661733658
    },
    {
        "content": "<p>I would also have expected <code>  rw &lt;- poly_checks_pass', congr' 1,</code> to work, but that times out too.</p>",
        "id": 295768329,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661733831
    },
    {
        "content": "<p>Why would it unfold <code>mv_polynomial.bind₁</code> at all, it's there in both propositions, why shouldn't <code>convert</code> just eliminate it?</p>",
        "id": 295768420,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661733910
    },
    {
        "content": "<p>Ok, I finally got it in the state I wanted with <code>rw &lt;- poly_checks_pass', apply congr, apply congr, refl, apply congr, refl,</code>.</p>",
        "id": 295769080,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661734778
    },
    {
        "content": "<p>This is still very confusing to me because I thought that <code>congr</code> worked essentially like repeatedly applying <code>apply congr</code> and <code>refl</code> until they failed. Can someone explain what the distinction is in how <code>congr</code> actually works?</p>",
        "id": 295769179,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661734885
    },
    {
        "content": "<p>It's indeed quite peculiar. The following also works; looks like it's checking <code>coe_fn = coe_fn</code> that is slow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">poly_checks_pass'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_fun</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> works (so does `apply congr_arg`), but `apply congr rfl`, `congr` and `congr' 1` all time out. The goal solved by `refl` is `coe_fn = coe_fn`. -/</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 295774178,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661741939
    },
    {
        "content": "<p><code>refine congr rfl _,</code> works fine. My guess is that the issue isn't the rfl, could it be the apply bug? <code>congr</code> uses <code>applyc</code> which uses <code>apply</code>.</p>",
        "id": 295816765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661768816
    }
]