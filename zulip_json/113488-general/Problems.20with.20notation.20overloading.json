[
    {
        "content": "<p>I'm having problems with overloading a notation.</p>\n<p>Everything works fine without overloading</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>However, adding an overload for the notation produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"n\">pair</span><span class=\"bp\">⟧</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Why do I get <code>(λ (x_1 : Expr X), pair[x_1].app) x y : Expr (X × Y)</code> instead of <code>pair[x][y]</code> ?</p>\n<p>This actually causes a failure of overload resolution for <code>(x|y)|x</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span> <span class=\"n\">for</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">choice</span> <span class=\"n\">Expr.app'</span> <span class=\"n\">Expr.app</span><span class=\"o\">]</span> <span class=\"o\">([</span><span class=\"n\">choice</span> <span class=\"n\">Expr.app'</span> <span class=\"n\">Expr.app</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk</span> <span class=\"n\">pair</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"bp\">?</span><span class=\"n\">m_1.setoid</span><span class=\"o\">),</span> <span class=\"n\">Expr.app'</span> <span class=\"bp\">⟦</span><span class=\"n\">pair</span><span class=\"bp\">⟧</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">])</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">quotient</span> <span class=\"bp\">?</span><span class=\"n\">m_1.setoid</span>\n\n<span class=\"n\">error</span> <span class=\"n\">for</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">choice</span> <span class=\"n\">Expr.app'</span> <span class=\"n\">Expr.app</span><span class=\"o\">]</span> <span class=\"o\">([</span><span class=\"n\">choice</span> <span class=\"n\">Expr.app'</span> <span class=\"n\">Expr.app</span><span class=\"o\">]</span> <span class=\"n\">pair</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"n\">X</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Expr</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">pair</span><span class=\"o\">[</span><span class=\"n\">x_1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 211982942,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601590625
    },
    {
        "content": "<p>I wouldn't recommend overloading notation, except possibly in cases where it's really obvious to Lean which variant is needed.</p>",
        "id": 211984398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601591542
    },
    {
        "content": "<p>Not sure what is 'really obvious' but in my case those overloads either act on a type or on its quotient.</p>",
        "id": 211985186,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601592119
    },
    {
        "content": "<p>Well, for example, since I don't know what <code>pair[x]</code> means, I couldn't tell which variant is expected in your <code>#check</code> example, except from context</p>",
        "id": 211985283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601592183
    },
    {
        "content": "<p>We don't really use overloaded notation, instead we use type classes. If you want to \"overload function application\" then you can create an instance of <code>has_coe_to_fun</code>.</p>",
        "id": 211985527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601592379
    },
    {
        "content": "<p>I will have look at <code>has_coe_to_fun</code>.</p>\n<p>Anyway, <code>#check pair[x]</code> gives <code>pair[x] : Expr (?M_1 ⟶ X × ?M_1)</code>, it pairs with <code>x</code>.</p>",
        "id": 211985981,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601592799
    },
    {
        "content": "<p>Is this <code>[ ]</code> notation also overloaded?</p>",
        "id": 211986152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601592951
    },
    {
        "content": "<p>Yes it is. I'm working with a type representing expressions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.app</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 211986257,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601593022
    },
    {
        "content": "<p>And it is also defined on the quotient</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Expr.app'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.lift₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span>  <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.app'</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 211986396,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601593165
    },
    {
        "content": "<p>Yeah, so in this situation I would not trust Lean to pick the correct overload variants.</p>",
        "id": 211987745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601594196
    },
    {
        "content": "<p>So lean actually does support overloading without the usual approach of typeclasses? Is this documented anywhere?</p>",
        "id": 211987900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601594321
    },
    {
        "content": "<p>I'm pretty sure Lean makes some nonzero effort to select the right notation based on the available type information--it definitely does this for disambiguating the same name in several different open namespaces, which is a feature used mainly without being aware of it.</p>",
        "id": 211988879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601595179
    },
    {
        "content": "<p>So functions can be overloaded by declaring them in different namespaces then opening both?</p>",
        "id": 211989106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601595427
    },
    {
        "content": "<p>Yes, or more commonly when a function in an opened namespace has the same name as one in the root namespace</p>",
        "id": 211989393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601595685
    },
    {
        "content": "<p>Overloaded names and notations are simply tried in turn, after which the unique successful interpretation is taken if any</p>",
        "id": 212046552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1601627540
    }
]