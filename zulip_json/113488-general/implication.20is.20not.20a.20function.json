[
    {
        "content": "<p>Levels 2-6 and 3-8 represent branch points in [the natural number game v1.0]. The truth of the matter is that <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> 's game maker currently will only let me let the user create a certain kind of structure, and basically I can't get the user to get from 2-6 to 3-1 without forcing other levels on them to add to their left hand box -- stuff I don't want them to see. I have only just realised that one can guide a mathematician to a tactic mode proof that the  natural numbers are a commutative semiring -- this is \"mathematician collectible <a href=\"https://github.com/leanprover-community/mathlib/issues/6\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/6\">#6</a>\" -- without <em>ever being introduced to the concept of a function</em>. It's just all manipulations of equalities, you can prove everything with <code>rw</code>. They never once prove P implies Q. <span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span> -- you got confused because I accidentally left in an <code>intro</code> in and introduced you to the fact that Lean thinks of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> as a <em>function</em> without any warning.</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20%28https.3A.2F.2Ftinyurl.2Ecom.2Fnatgame1234%29/near/179295674\" title=\"#narrow/stream/113489-new-members/topic/natural.20number.20game.20%28https.3A.2F.2Ftinyurl.2Ecom.2Fnatgame1234%29/near/179295674\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/natural.20number.20game.20%28https.3A.2F.2Ftinyurl.2Ecom.2Fnatgame1234%29/near/179295674</a></p>\n<p>The groupings of the levels are (2-1 to 2.6), (2-7 to 2-16), (3-1 to 3,8), ... Currently I want to write \"Level 6 and a half -- you are not going to believe this -- they think that <code>succ_inj</code> is a <em>function</em>! rofl. Here, let me tell about this thing called <code>intro</code>.\". What is going on here?</p>",
        "id": 179419982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572432777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228602\">@Sian Carey</span> was a UROP student with me from Leeds over the summer, and I gave her a really technically difficult problem about constructing a theory of quotient monoids and I found it absolutely fascinating teaching her, but there were some concepts which I could see I was teaching her poorly. And then I showed her the natural number game and said I needed a power world and she just knocked one off. There are secret collectibles in the natural number game, which I couldn't figure out how to add to the system in its current form but you can see them in the source code. Mathematicians like collecting them.</p>",
        "id": 179420304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572433077
    },
    {
        "content": "<p>This explains a lot of the errors I've been getting! Let me try to remember where they were.</p>\n<p>In 3.11 after the split I wanted to just type \"exact eq_zero_or_eq_zero_of_mul_eq_zero,\" </p>\n<p>When that didn't work I tried \"exact eq_zero_or_eq_zero_of_mul_eq_zero a b,\" (with various combinations of parentheses). </p>\n<p>Finally I realized  I could \"apply the function\" with something like:</p>\n<div class=\"codehilite\"><pre><span></span>intro hyp,\napply eq_zero_or_eq_zero_of_mul_eq_zero,\nexact hyp,\n</pre></div>",
        "id": 179422794,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1572435700
    },
    {
        "content": "<p>Similarly I was hoping to compose succ_inj with the inductive hypothesis \"hn : n + b = n + c → b = c,\" in 2.9 but instead had to settle for</p>\n<div class=\"codehilite\"><pre><span></span>intro hyp,\napply hn,\napply succ_inj,\nexact hyp,\n</pre></div>",
        "id": 179423542,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1572436397
    },
    {
        "content": "<p>Yeah, this is the <em>weird bit</em>.</p>",
        "id": 179424580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572437254
    },
    {
        "content": "<p>I need to tell you about <code>have</code>. You want to reason forwards because that's the way your <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> goes. But their <code>→</code>goes backwards!</p>",
        "id": 179424695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572437365
    },
    {
        "content": "<p>I have made things worse by trying to do something super-clever with fancy <code>{{</code> brackets and breaking the thing which you instinctively want to do.</p>",
        "id": 179444059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572449409
    },
    {
        "content": "<p>This happened to me in world2! I had to put an <code>@</code> before the theorem so I could move forward</p>",
        "id": 179445956,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572450436
    }
]