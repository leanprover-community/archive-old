[
    {
        "content": "<p>Fill in the blank.  If we wanted to evolve, beginning at Lean4.  How can we make things \"higher level\"?</p>",
        "id": 287768880,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1656446672
    },
    {
        "content": "<p>If we wanted to develop a language at a higher level than Lean4 then what would it be like?</p>",
        "id": 287768972,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1656446722
    },
    {
        "content": "<p>Lean4 with many more tactics?</p>",
        "id": 287770432,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656447468
    },
    {
        "content": "<p>And maybe a SAT solver for good measure</p>",
        "id": 287770443,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656447479
    },
    {
        "content": "<p>Lean4 but with the automation power of Isabelle I'd say</p>",
        "id": 287770749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656447661
    },
    {
        "content": "<p>Isabelle is insane at automation, tactics, termination proofs, automatic generation of helpful theorems for e.g. inductive relations etc.</p>",
        "id": 287770778,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656447679
    },
    {
        "content": "<p>This is a really weird statement because lean 4 is already really high level and much more extensible than C++. High level lean 4 is lean 4 + mathlib</p>",
        "id": 287778490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656451749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/If.20Lean4.20is.20assembler.2C.20then.20a.20language.20like.20___.20is.20C.2B.2B.3F/near/287770778\">said</a>:</p>\n<blockquote>\n<p>Isabelle is insane at automation, tactics, termination proofs, automatic generation of helpful theorems for e.g. inductive relations etc.</p>\n</blockquote>\n<p>I have been growing steadily more jealous of their locales <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 287780881,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656453143
    },
    {
        "content": "<p>Meanwhile I never understood what a locale is, not when I used Isabelle and in Lean i haven't touched them yet</p>",
        "id": 287781708,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656453645
    },
    {
        "content": "<p>In my understanding, a language that would be at a higher level than Lean 4 would, for instance, generate Lean 4 code automatically, allowing the programmer not to worry about some details. Or do something equivalent to generating Lean 4 code. Automation in theorem proving is a good example</p>",
        "id": 287782737,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656454238
    },
    {
        "content": "<p>Locales in Isabelle are, as I understand it, trying to do similar things as typeclasses in Lean: bring declarations into a context when their dependencies are satisfied. The important difference is that a typeclass instance can be inferred, while a locale is opened somewhat explicitly. So that allows you to do more complicated things in the locales (such as make the group operation a parameter to the structure instead of a field of the structure, so we wouldn't need <code>@[to_additive]</code>).</p>",
        "id": 287782985,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656454387
    },
    {
        "content": "<p>Isabelle also has typeclasses, reducing some of the extra bookkeeping. (Still I understand there's still quite a bit more, and Lean's typeclass instances can generally be treated more flexibly since they are just tuples to the type system.)</p>",
        "id": 287783222,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656454512
    },
    {
        "content": "<p>Although perhaps typeclasses can regain some level of resilience against the complications in Lean 4: As I recall, the main reason that we have <code>group G</code> and not <code>group G (*) 1 (^-1)</code> is that the simplifier couldn't deal with <code>simp</code> lemmas like <code>mul_one</code> looking like <code>∀ x, ?op x ?one = ?one</code>.</p>",
        "id": 287783621,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656454736
    },
    {
        "content": "<p>I think even if Lean 4 completely played ball, we would need to be careful to make things usable; we don't want people only writing lemmas about <code>group G (*) 1 (^-1)</code> (as we need to cover <code>group A (+) 0 (-)</code> too), but no one (at least, users of current mathlib) wants to write their lemmas statements and names with <code>op</code> and <code>id</code>.</p>",
        "id": 287787559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656457175
    },
    {
        "content": "<p>just let <code>*</code>and <code>1</code> unfold to <code>op</code> and <code>id</code></p>",
        "id": 287788087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656457479
    },
    {
        "content": "<p>as in <code>variables (* : G → G → G) (e : G) [group * g]</code> or ways that will typecheck</p>",
        "id": 287788297,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656457654
    },
    {
        "content": "<p>Sure, but I don't want to rewrite <code>a - b = a + -b</code> using <code>div_eq_mul_inv</code> (nor do I want to accidentally rewrite it!)</p>",
        "id": 287788392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656457727
    },
    {
        "content": "<p>I don't think it'd be difficult to make meta code a-la <code>to_additive</code> that specialises these lemmas and names to additive/divisibility specifically</p>",
        "id": 287788658,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656457903
    },
    {
        "content": "<p>it'd literally be <code>λ G, @statement G has_add.add 1</code> or something</p>",
        "id": 287788730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656457940
    },
    {
        "content": "<p>Okay, so you're not trying to reduce duplication but rather allow triplication?</p>",
        "id": 287788734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656457942
    },
    {
        "content": "<p>memory is cheap, doing theorems automatically is cheap</p>",
        "id": 287789201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656458279
    },
    {
        "content": "<p>this is essentially an alias so you don't do <code>divop_eq_op_inv</code></p>",
        "id": 287789269,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656458309
    },
    {
        "content": "<p>I care much more about duplication of work than duplication of theorems</p>",
        "id": 287798880,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656468093
    },
    {
        "content": "<p>To be fair, I think we've done a great job with type synonyms that already drastically reduces the usability generalized typeclasses would otherwise have</p>",
        "id": 287798964,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656468135
    },
    {
        "content": "<p>Not that I wouldn't like them still</p>",
        "id": 287798967,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656468140
    }
]