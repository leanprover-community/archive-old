[
    {
        "content": "<p>So general chatter goes in \"archives\" topic?</p>",
        "id": 123008190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519671052
    },
    {
        "content": "<p>oh no I have made (no topic). Do I have to have a topic?</p>",
        "id": 123008198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519671077
    },
    {
        "content": "<p>no topic necessary for off-topic conversation</p>",
        "id": 123008201,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519671093
    },
    {
        "content": "<p>I don't understand how to have off-topic conversation</p>",
        "id": 123008205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519671113
    },
    {
        "content": "<p>Chris has already observed that mathematicians frequently want to sum from 0 to n, or 1 to n, and have a bunch of basic facts about such sums available to them. I know there are finsets and fintypes or whatever, but this case of summing from 0 to n or 1 to n is such a common usage case in maths. Is there already a specialised type for dealing specifically with such sums, which is easier to handle than dealing with general finsets? I am thinking about teaching induction to mathematicians without having to fill their heads with what I would call \"specialised types\" such as finset.</p>",
        "id": 123033113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519719004
    },
    {
        "content": "<p>If not I might be tempted to build such things myself but I don't want to reinvent the wheel.</p>",
        "id": 123033117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519719039
    },
    {
        "content": "<p>I was faced with a similar situation last year. The formulation of <code>sum</code> I find is less than conducive to reasoning. I'm not sure if my lemmas about <code>foldl</code> and <code>foldr</code> are still around (I think they are now in mathlib) but your best bet I think is to prove <code>sum (xs ++ ys) = sum xs + sum ys</code>. That should get you started at least</p>",
        "id": 123033165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519719158
    },
    {
        "content": "<p>DId you try <code>by simp</code>? I think this is the consequence of several lemmas</p>",
        "id": 123033218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519719281
    },
    {
        "content": "<p>But I'm also working on a definition of sums over natural numbers to make this sort of thing easier</p>",
        "id": 123033225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519719313
    },
    {
        "content": "<p>I didn't try simp because I was writing teaching materials and for some reason I wanted to be \"explicit\" about what was happening -- e.g. \"this lemma with this name shows the fundamental fact which we will need, namely that the sum to n+1 is related to the sum to n in this obvious way\". There is a danger with the sort of stuff I was doing that simp would just clear the goal completely and I know I can target it with (have blah, by simp) or whatever, but my goal was not to prove the lemma, it was to show math undergraduates how to use induction in Lean without any extra bells and whistles.</p>",
        "id": 123033478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519719907
    },
    {
        "content": "<p>I suspect that in general as my thoughts about teaching progress I will want access to lemmas with possibly names that Mario disapproves of and which state things which he does not want in mathlib (e.g. because they can be done with a fold in one line or some such thing). Things like folds are what I am trying to avoid currently because I do not want to teach them any functional programming.</p>",
        "id": 123033519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519719990
    },
    {
        "content": "<p>You CS guys might think this is mad, but look at Chris Hughes -- he showed up knowing a bit of matlab and had no idea what a functional program was, and I got him doing mathematics in Lean very quickly because of tactic mode. The more tactics / lemmas there are, the more mathematicians are able to stay away from the whole functional thing, and they can just get into it later when it all begins to make more sense.</p>",
        "id": 123033527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519720075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"k.buzzard@imperial.ac.uk\" data-user-id=\"110038\">@Kevin Buzzard</span> Not mad at all. Tactics are great for incrementally proving theorems.</p>",
        "id": 123033576,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519720194
    },
    {
        "content": "<p>I think that will limit how much you can do but there must still be interesting fragments</p>",
        "id": 123033577,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519720201
    },
    {
        "content": "<p>... and this is coming from a CS guy, though, again, I'm not sure why that matters. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 123033619,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519720222
    },
    {
        "content": "<p>I think that you can get through a whole bunch of my introduction to proof course in Lean without really knowing too much about functional programming. I've seen it happen.</p>",
        "id": 123033630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519720288
    },
    {
        "content": "<p>My job is not to teach functional programming, it is to teach rigorous thinking.</p>",
        "id": 123033635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519720320
    },
    {
        "content": "<p>I think functional programming is especially hard to avoid as you're scaling up your proof efforts which often doesn't really come up in introductions</p>",
        "id": 123033666,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519720322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"k.buzzard@imperial.ac.uk\" data-user-id=\"110038\">@Kevin Buzzard</span>  I'm sure you're right. Why do you feel the need to defend that idea?</p>",
        "id": 123033679,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519720343
    },
    {
        "content": "<p>If that's the kind of teaching you are going for, I recommend giving a direct inductive definition like it is done in TPIL</p>",
        "id": 123033683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519720366
    },
    {
        "content": "<p>I would be interested to hear <span class=\"user-mention\" data-user-email=\"chrishughes24@gmail.com\" data-user-id=\"110044\">@Chris Hughes</span> 's take on the issue. I am not sure he knows what a fold is but he has proved the fundamental theorem of arithmetic and much more in Lean.</p>",
        "id": 123033685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519720381
    },
    {
        "content": "<p>then you can give all the natural lemmas and prove basic properties and there is no hidden magic</p>",
        "id": 123033691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519720392
    },
    {
        "content": "<p>I totally agree that tactics is the way to teach lean to maths students. I proved the fundamental theorem of arithmetic without even knowing what lambda did, and this gave me enough proficiency very quickly, that I've probably learnt a fair amount about functional programming, whatever that is, without really thinking about trying to learn functional programming.</p>",
        "id": 123042606,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519737273
    },
    {
        "content": "<p>Hey Patrick did you make an arbitrary product of rings a ring recently?</p>",
        "id": 123061458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"patrickmassot@free.fr\" data-user-id=\"110031\">@Patrick Massot</span> I need that now! But it's in gitter chat and it'll be hard to find :-/</p>",
        "id": 123061860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519769440
    },
    {
        "content": "<p>Aah I've found it by looking through your github repos until I found the right commit :-)</p>",
        "id": 123061930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519769565
    },
    {
        "content": "<p>Yes: <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean</a> I will make a PR at some point</p>",
        "id": 123066299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519776940
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AwppWERsWgYQlkaoTxtLAKL-/pic1.png\" target=\"_blank\" title=\"pic1.png\">pic1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AwppWERsWgYQlkaoTxtLAKL-/pic1.png\" target=\"_blank\" title=\"pic1.png\"><img src=\"/user_uploads/3121/AwppWERsWgYQlkaoTxtLAKL-/pic1.png\"></a></div>",
        "id": 125960052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525204936
    },
    {
        "content": "<p>he made that</p>",
        "id": 125960056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525204950
    },
    {
        "content": "<p>it's the syntax tree for my proof that sqrt(3) is irrational</p>",
        "id": 125960075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525204982
    },
    {
        "content": "<p>it's like <code>set_option pp.all</code></p>",
        "id": 125960087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525205003
    },
    {
        "content": "<p>In fact we made it from the output of <code>set_option pp.all</code> and some emacs trickery and some python code</p>",
        "id": 125960160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525205067
    },
    {
        "content": "<p>and then he made that in blender</p>",
        "id": 125960168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525205086
    },
    {
        "content": "<p>red dots are functions, blue are evaluated terms</p>",
        "id": 125960195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525205133
    },
    {
        "content": "<p>I proved it for non integer nth roots of integers.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_pow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_pow_dvd_pow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dvd_zero</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_gcd_eq_zero_right</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">dvd_zero</span> <span class=\"bp\">_</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">eq_one_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">a</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">dvd</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">one_dvd</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"kn\">end</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div_lt_self</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n    <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_pow_dvd_pow</span> <span class=\"n\">hn</span> <span class=\"err\">$</span> <span class=\"n\">dvd_of_mul_dvd_mul_left</span>\n      <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pos_pow_of_pos</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">dec_trivial</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hb</span><span class=\"o\">]),</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_dvd_mul_left</span> <span class=\"bp\">_</span> <span class=\"n\">this</span>\n  <span class=\"kn\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_pow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">nat_abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_pow_dvd_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat_abs_dvd</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">dvd_nat_abs</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_pow</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat_abs_dvd</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">dvd_nat_abs</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_dvd</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_pow_dvd_pow</span> <span class=\"n\">hn</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nth_root_irrational</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">had</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span> <span class=\"bp\">_</span> <span class=\"n\">had</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">pow_ne_zero</span> <span class=\"bp\">_</span> <span class=\"n\">had</span><span class=\"o\">),</span>\n    <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_dvd</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">dvd_nat_abs</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_pow_dvd_pow</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">))),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">eq_one_of_dvd</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125960445,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525205419
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nth_root_irrational</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125960579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205622
    },
    {
        "content": "<p>yay you made it constructive :D</p>",
        "id": 125960583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205627
    },
    {
        "content": "<blockquote>\n<p>he made that</p>\n</blockquote>\n<p>who?</p>",
        "id": 125960586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205639
    },
    {
        "content": "<p>His son I believe</p>",
        "id": 125960829,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525205933
    },
    {
        "content": "<p>oh</p>",
        "id": 125960845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205955
    },
    {
        "content": "<blockquote>\n<p>yay you made it constructive :D</p>\n</blockquote>\n<p>Actually, it makes no difference since if a rational number is an integer, then you can obtain its value using <code>rat.num</code>, or <code>rat.floor</code></p>",
        "id": 125984628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251686
    },
    {
        "content": "<p>(which is to say, that theorem would still be constructive with <code>exists</code>)</p>",
        "id": 125984672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251738
    },
    {
        "content": "<p>Hi all,</p>\n<p>I'm working on applying formal methods to cryptocurrency protocols. We're a well funded startup (recently raised $20 million) and pay competetively. </p>\n<p>If anyone has interest, please message me.</p>\n<p>Thanks!</p>",
        "id": 130300533,
        "sender_full_name": "gary",
        "timestamp": 1532550662
    },
    {
        "content": "<p>I have an expression that uses a type class instance. Is there a command to that prints out which instance was inferred?</p>",
        "id": 132250941,
        "sender_full_name": "Jason Dagit",
        "timestamp": 1534437488
    },
    {
        "content": "<p>Before the code printing the expression, use <code>set_option pp.implicit true</code> so that the pretty printer shows more parts of your expression, namely, implicit parameters (which include class instances)</p>",
        "id": 132250998,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534437602
    },
    {
        "content": "<p>Thanks</p>",
        "id": 132251070,
        "sender_full_name": "Jason Dagit",
        "timestamp": 1534437685
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 132357521,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1534593462
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 151864889,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1544935744
    },
    {
        "content": "<p>I know I'm flooding, but here is IRC bot written in pure Lean 3.4.1 (someone asked me in lounge)<br>\n<a href=\"https://github.com/forked-from-1kasper/leanbot\" target=\"_blank\" title=\"https://github.com/forked-from-1kasper/leanbot\">https://github.com/forked-from-1kasper/leanbot</a><br>\nCan't wait to write WebSocket binary protocol for Lean4!</p>",
        "id": 154581476,
        "sender_full_name": "Namdak Tonpa",
        "timestamp": 1546878741
    },
    {
        "content": "<p>This is the kind of flooding that is appreciated. By all means do continue to flood.</p>",
        "id": 154584968,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1546881876
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 166056537,
        "sender_full_name": "Jason Rute",
        "timestamp": 1558327958
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171590176,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959630
    },
    {
        "content": "<p>I'm not sure either how to make a \"function that returns a string\".  I've tried 10 different thoughts on it :/</p>",
        "id": 174419677,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567047972
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 175142449,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567865872
    },
    {
        "content": "<p>deleted</p>",
        "id": 192119060,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1585395682
    },
    {
        "content": "<p>What is <em>prod,</em> exactly? Not <em>mult,</em> obviously.</p>",
        "id": 193026527,
        "sender_full_name": "Phiroc",
        "timestamp": 1586171801
    },
    {
        "content": "<p>it is the type former for pairs</p>",
        "id": 193026587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171834
    },
    {
        "content": "<p><code>prod A B</code> is the type of pairs of an element of A and an element of B</p>",
        "id": 193026603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171850
    },
    {
        "content": "<p>like cartesian product but with types instead of sets</p>",
        "id": 193026635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171872
    },
    {
        "content": "<p>it's usually written <code>A \\times B</code> or <code>A × B</code></p>",
        "id": 193026736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171934
    },
    {
        "content": "<p>I see.</p>",
        "id": 193026781,
        "sender_full_name": "Phiroc",
        "timestamp": 1586171966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , but that's the proof provided by the author of the book.</p>",
        "id": 193026902,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172032
    },
    {
        "content": "<p>How would you write the proof?</p>",
        "id": 193026921,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172053
    },
    {
        "content": "<p>Can you please reply on the correct thread?</p>",
        "id": 193026954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172078
    },
    {
        "content": "<p>simple noob question - how do I prove 1 + 1 = 2 in lean? it seems like it should be something built into \"nat\" but i can't find it</p>",
        "id": 198476617,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171747
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 198476675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171774
    },
    {
        "content": "<p>ok thanks. how could I have figured that out without bugging you, is there some way I missed?</p>",
        "id": 198476913,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171877
    },
    {
        "content": "<p>The first trick would have been to post this in the \"new members\" stream, with a topic.</p>",
        "id": 198477003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171928
    },
    {
        "content": "<p>And then try <code>by library_search</code></p>",
        "id": 198477043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171951
    },
    {
        "content": "<p>ok. thanks!</p>",
        "id": 198477128,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> Have you seen the tutorials? They definitely help. For example the natural number game. See <a href=\"https://leanprover-community.github.io/\">#homepage</a> for some links to get started</p>",
        "id": 198519937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590212374
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198684284,
        "sender_full_name": "Ami",
        "timestamp": 1590423538
    },
    {
        "content": "<p>Is there any way to forbid \"no topic\" posts?</p>\n<p>Ami, I don't understand what exactly you want to prove. If I interpret the definitions correctly, then you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">two</span>\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n</code></pre></div>\n\n\n<p>How exactly do you define <code>Φ(x)</code>: is it <code>(∀ y, Q y) → P x</code> or <code>∀ y, (Q y → P x)</code>?</p>",
        "id": 198685987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424888
    },
    {
        "content": "<p>the first one.</p>",
        "id": 198686113,
        "sender_full_name": "Ami",
        "timestamp": 1590424987
    },
    {
        "content": "<p>And what are you trying to prove about <code>Φ</code>?</p>",
        "id": 198686122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424994
    },
    {
        "content": "<p>Ami, it will be much easier to get someone putting enough energy into answering your question if you put more energy asking it (eg. typing it and providing enough context)</p>",
        "id": 198686128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590425000
    },
    {
        "content": "<p>That's true. I will do it.</p>",
        "id": 198686224,
        "sender_full_name": "Ami",
        "timestamp": 1590425077
    },
    {
        "content": "<p>hmm, i was looking at what seems to be a totally different tutorial linked from a totally different home page, at <a href=\"https://leanprover.github.io/\">https://leanprover.github.io/</a> .</p>",
        "id": 198700250,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590438571
    },
    {
        "content": "<p>That webpage is more closely linked to the last official lean release, as opposed to the work being dont by members of this chat on mathlib and the community fork (while we wait for lean 4). So I'd definitely recommend the <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> version of everything.</p>",
        "id": 198700533,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590438832
    },
    {
        "content": "<p>Maybe it's time to kindly ask for a couple of links from <a href=\"https://leanprover.github.io/\">https://leanprover.github.io/</a> to <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>",
        "id": 198702190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590440509
    },
    {
        "content": "<p>Google still puts all the official out of date pages ahead of the community pages when you're searching for lean</p>",
        "id": 201235655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592465386
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202543240,
        "sender_full_name": "James Arthur",
        "timestamp": 1593592375
    },
    {
        "content": "<p>Nat golf anyone? I was writing lecture notes.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_left_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210765874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600705668
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_eq_of_lt_le</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 210768574,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600707082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_left</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210798981,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600721894
    },
    {
        "content": "<p>I guess if we're golfing the proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_left</span> <span class=\"mi\">1</span><span class=\"n\">n</span><span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"err\">$</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 210799425,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600722122
    },
    {
        "content": "<p>golfing is no excuse for poor formatting :P</p>",
        "id": 210807689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600726864
    },
    {
        "content": "<p>I need some excuse to have bad formatting though :(</p>",
        "id": 210893153,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600790906
    },
    {
        "content": "<p>[Deleted message]</p>",
        "id": 211029103,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600879024
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214946508,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603965654
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226552686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499149
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227102954,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1613839390
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229124627,
        "sender_full_name": "François Sunatori",
        "timestamp": 1615060916
    },
    {
        "content": "<p>/poll What should the notation for <code>order_dual</code> be?<br>\n<code>ᵒᵈ</code><br>\n<code>﹥⇄﹤</code></p>",
        "id": 280628199,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651237073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 319573313,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672921246
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Stating.20properties.20of.20monadic.20results\">#general &gt; Stating properties of monadic results</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 319573314,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672921246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 319573392,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672921270
    },
    {
        "content": "<p>(ugh, the double checkmarks when editing topic names get me every time)</p>",
        "id": 319573449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672921290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 319573523,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672921321
    }
]