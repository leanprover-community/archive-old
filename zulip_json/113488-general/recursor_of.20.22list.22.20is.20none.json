[
    {
        "content": "<p>Dear all, could someone tell me why the result of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">recursor_of</span> <span class=\"s2\">&quot;list&quot;</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>is <code>none</code>?</p>",
        "id": 171513840,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563885523
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">recursor_of</span> <span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">r</span> <span class=\"c1\">--(some list)</span>\n</pre></div>\n\n\n<p>Looks like it returns a type given a recursor.</p>",
        "id": 171514476,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563886101
    },
    {
        "content": "<p>from my experiments it looks like that if it returns none, then the recursor is X.rec</p>",
        "id": 171515311,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563886781
    },
    {
        "content": "<p>Is there an inductive type whose recursor is not <code>X.rec</code>?</p>",
        "id": 171515890,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563887114
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 171516178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563887291
    },
    {
        "content": "<p>C++ doc says: \"If  n is the name of an elimination rule in env, then return the name of the inductive datatype D<br>\n    s.t. n is an elimination rule of D. Otherwise, return none.\"</p>",
        "id": 171516952,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563887870
    },
    {
        "content": "<blockquote>\n<p>C++ doc says: \"If  n is the name of an elimination rule in env, then return the name of the inductive datatype D<br>\n    s.t. n is an elimination rule of D. Otherwise, return none.\"</p>\n</blockquote>\n<p>Thanks! Looks like the lean doc is wrong (<code>Return the recursor of the given inductive datatype</code>). Where can I find the C++ doc?</p>",
        "id": 171586890,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563956152
    },
    {
        "content": "<blockquote>\n<p>Is there an inductive type whose recursor is not <code>X.rec</code>?</p>\n</blockquote>\n<p>Since <code>recursor_of</code> did not work, I am indeed using <code>X.rec</code>, but name-based meta-programming is not a very good practice in my experience.</p>",
        "id": 171587111,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563956384
    },
    {
        "content": "<p>It's not always <code>rec</code> :/</p>",
        "id": 171588820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958312
    },
    {
        "content": "<p>Sometimes it's <code>drec</code></p>",
        "id": 171588868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958322
    },
    {
        "content": "<p>Or rather, I think <code>X.rec</code> always exists but it may not be primitive</p>",
        "id": 171588889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958351
    },
    {
        "content": "<p>I don't see any docs, but from <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_environment.cpp#L183-L188\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_environment.cpp#L183-L188\">https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_environment.cpp#L183-L188</a> it looks like Wojciech's description is correct</p>",
        "id": 171589124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958610
    },
    {
        "content": "<p>Looks like the code actually does that \"name based meta-programming\" <a href=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.cpp#L183-L186\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.cpp#L183-L186\">https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.cpp#L183-L186</a></p>",
        "id": 171589397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958879
    },
    {
        "content": "<blockquote>\n<p>Or rather, I think <code>X.rec</code> always exists but it may not be primitive</p>\n</blockquote>\n<p>Oww,... I'd say it's always a primitive but not always the most general one (e.g. <code>eq.rec</code> is primitive but not as general as <code>eq.drec</code>). What is the general rule about <code>rec</code> vs <code>drec</code>?</p>",
        "id": 171589501,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563958995
    },
    {
        "content": "<p>I am wrong it looks like <code>eq.drec</code> is actually programmed using <code>eq.rec</code>... so I did not yet find a case where <code>drec</code> is primitive and <code>rec</code> isn't...</p>",
        "id": 171589619,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959103
    },
    {
        "content": "<p>I got it confused. <code>rec</code> is always primitive, but it is dependent only if it doesn't eliminate to Prop. If it does eliminate to Prop then <code>drec</code> is the dependent one</p>",
        "id": 171590161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959605
    },
    {
        "content": "<blockquote>\n<p>I got it confused. <code>rec</code> is always primitive, but it is dependent only if it doesn't eliminate to Prop. If it does eliminate to Prop then <code>drec</code> is the dependent one</p>\n</blockquote>\n<p>ok.... could you tell me the rationale?</p>",
        "id": 171590514,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959886
    },
    {
        "content": "<p>No, this is me griping</p>",
        "id": 171590633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960011
    },
    {
        "content": "<blockquote>\n<p>I got it confused. <code>rec</code> is always primitive, but it is dependent only if it doesn't eliminate to Prop. If it does eliminate to Prop then <code>drec</code> is the dependent one</p>\n</blockquote>\n<p>I'm not sure I understood the rule... do you mean if it admits strong elimination? (i.e. elimination to Type of an inductive in Prop ?)</p>",
        "id": 171590635,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960017
    },
    {
        "content": "<p>Ah, actually it's not strong elimination that is the deciding factor, it is whether the inductive itself is a prop</p>",
        "id": 171590667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960079
    },
    {
        "content": "<p>for example <code>or</code> and <code>eq</code> both have a <code>drec</code></p>",
        "id": 171590672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960092
    },
    {
        "content": "<p>but <code>nat</code> doesn't</p>",
        "id": 171590679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960101
    },
    {
        "content": "<p>ok, is it using proof irrelevance for prop to derive drec from rec? (because otherwise I do not see how it is possible)</p>",
        "id": 171590751,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960173
    },
    {
        "content": "<p>yes</p>",
        "id": 171590754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960179
    },
    {
        "content": "<p>If I were king of lean I would make the dependent version always be called <code>rec</code> and always be primitive</p>",
        "id": 171590772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960194
    },
    {
        "content": "<blockquote>\n<p>yes</p>\n</blockquote>\n<p>ok, this will not make my life easy ^^'</p>",
        "id": 171590783,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960217
    },
    {
        "content": "<p>The fact that you can derive it from the non-dependent version is a cute fact but not worth breaking the pattern</p>",
        "id": 171590791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960228
    },
    {
        "content": "<blockquote>\n<p>If I were king of lean I would make the dependent version always be called <code>rec</code> and always be primitive</p>\n</blockquote>\n<p>Now you make me wish you were the king of lean</p>",
        "id": 171590793,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960231
    },
    {
        "content": "<p>Writing parametricity translation of inductive families is already difficult without having to take into account discrepancies in the patterns of primitives... :'(</p>",
        "id": 171590894,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960351
    },
    {
        "content": "<blockquote>\n<p>If I were king of lean I would make the dependent version always be called <code>rec</code> and always be primitive</p>\n</blockquote>\n<p>Like this? <a href=\"https://github.com/leanprover/lean4/commit/a7d08d2f3dd608a70d41c92ca5559c2528e21ee5\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/a7d08d2f3dd608a70d41c92ca5559c2528e21ee5\">https://github.com/leanprover/lean4/commit/a7d08d2f3dd608a70d41c92ca5559c2528e21ee5</a></p>",
        "id": 171594631,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1563964483
    }
]