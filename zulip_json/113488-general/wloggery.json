[
    {
        "content": "<p>Can I use <code>wlog</code> to get around that <code>suffices</code> trick below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">image_injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  X Y : Type</span>\n<span class=\"cm\">  f : X → Y</span>\n<span class=\"cm\">  hf : injective f</span>\n<span class=\"cm\">  S T : set X</span>\n<span class=\"cm\">  h : f '' S = f '' T</span>\n<span class=\"cm\">  x : X</span>\n<span class=\"cm\">  ⊢ x ∈ S ↔ x ∈ T</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- how do I say \"wlog I only have to do one implication?\"</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225927981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612999573
    },
    {
        "content": "<p>It's a little silly because <code>wlog</code> isn't designed to handle wlogging in the goal, only the hypotheses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">image_injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">wlog</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">iff_def</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">case</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">case</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225929302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613000340
    }
]