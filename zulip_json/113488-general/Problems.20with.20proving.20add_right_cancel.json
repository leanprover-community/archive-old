[
    {
        "content": "<p>Hi folks, I'm a beginner at lean and I was trying my hand at proving one of the arithmetic identities, <code>add_right_cancel</code>. Here's my attempt (please note this is done within a hidden namespace so it does not conflict with the usual definition):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n            <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span>\n                                  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>There are a few problems here. One is that it doesn't type check. I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span>[Lean]\n&quot;eliminator&quot; elaborator type mismatch, term\n  λ (h : n + 0 = m + 0),\n    show n = m, from\n      eq.trans\n        (eq.trans (eq.mpr (id (eq.rec (eq.refl (n = n + 0)) (add_zero n))) (eq.refl n))\n           (eq.mpr (id (eq.rec (eq.refl (n + 0 = m + 0)) h)) (eq.refl (m + 0))))\n        (eq.mpr (id (eq.rec (eq.refl (m + 0 = m)) (add_zero m))) (eq.refl m))\nhas type\n  n + 0 = m + 0 → n = m\nbut is expected to have type\n  (?m_3 * ?m_4 = ?m_5 * ?m_4 → ?m_3 = ?m_5) → n + 0 = m + 0 → n = m\nAdditional information:\n/Users/lyle/Sync/devel/lean/logic_and_proof/ch18-exercises.lean:95:0: context: the inferred motive for the eliminator-like application is\n  λ (_x : ℕ), (?m_3 * ?m_4 = ?m_5 * ?m_4 → ?m_3 = ?m_5) → n + _x = m + _x → n = m\nnat.rec_on : ∀ {C : ℕ → Prop} (n : ℕ), C 0 → (∀ (n : ℕ), C n → C (succ n)) → C n\n</pre></div>\n\n\n<p>Clearly this relates to the base case of the induction. I'm not sure what it's missing, though. </p>\n<p>As for the inductive step, it seemed a bit awkward that I had to have nested equalities in the calc mode, but perhaps that's normal? I suppose I can prove a hypothesis and then apply an equivalence using <code>▸</code>, e.g. <code>from add_succ ▸ h1</code>?</p>\n<p>Then, I didn't like the fact that I had to use the <code>simp</code> strategy. Perhaps that's fine normally but for this exercise I wanted to be more explicit. It seems that <code>succ.inj</code> ought to apply, but I can't figure out how to apply it. I can't use that as a rewrite rule because it's an implication, not an equivalence.</p>\n<p>Finally, it bugged me that I had to have that last line to make the <code>s1</code> substitution within <code>h</code>. Because in the calc mode I've only proven <code>(n + succ k = m + succ k) = (n + k = m + k)</code>, so I have to take an extra step outside of calc mode to get <code>n = m</code>. I feel that perhaps I'm going about this the wrong way.</p>\n<p>Any tips? Thanks.</p>",
        "id": 148741055,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543437223
    },
    {
        "content": "<p>It typechecks for me</p>",
        "id": 148741455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543437635
    },
    {
        "content": "<p>Do you maybe have a <code>mul_right_cancel</code> on the line following this theorem?</p>",
        "id": 148741515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543437685
    },
    {
        "content": "<p>I don't like how you use <code>calc</code> for equality of propositions</p>",
        "id": 148741587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543437733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span> <span class=\"n\">id</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"err\">$</span> <span class=\"n\">succ_inj</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 148741644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543437795
    },
    {
        "content": "<p>You can probably replace all the equalities between equations with <code>\\iff</code>s</p>",
        "id": 148741673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543437829
    },
    {
        "content": "<p>and the weird triangle with <code>s1.mp h</code></p>",
        "id": 148741739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543437860
    },
    {
        "content": "<blockquote>\n<p>Do you maybe have a <code>mul_right_cancel</code> on the line following this theorem?</p>\n</blockquote>\n<p>Top Lean tip : stick <code>#exit</code> directly after the code you're writing, and make sure there are no red errors earlier in the file -- any random stuff before or after your code can interfere with your code.</p>",
        "id": 148742052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543438115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: Ah yes, you're right it does type check. When I copy-pasted it, I noticed it had an extra <code>mul_right_cancel</code> at the end and thought I had just made a mistake in copying it. But the mistake was there in the source file, and when I got rid of that, it type checked.</p>\n<p>And I don't like how I use <code>calc</code> for equality of propositions, either. Wondering how I can reformulate that.</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> : I will try using <code>\\iff</code>s, thanks. Weird triangle? It's <code>\\t</code> and is used for substituting via equivalences. I learned that from <em>Logic &amp; Proof</em>. E.g. if you have <code>h1 : s = t</code> and <code>h2: s * x  = 4</code> you can derive <code>have t * x = 4, from h1 ▸ h2</code>. Haven't heard of <code>.mp</code>, I'll try that, thanks.</p>",
        "id": 148744233,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543439768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"113073\">@Lyle Kopnicky</span> did you see my one-liner?</p>",
        "id": 148744246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543439786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Ah I missed that, it was so short. Thanks. I'll try that out. I may want to expand a bit because for pedagogical reasons I want to be able to see the steps.</p>",
        "id": 148744336,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543439876
    },
    {
        "content": "<p>I think tactic mode is much better for seeing the steps. Here's my effort:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"c1\">-- to get simpa</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"c1\">-- n = n + 0 is true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- again true by definition</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">random</span>\n</pre></div>",
        "id": 148744872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543440293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_right_cancel</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">random</span>\n</pre></div>\n\n\n<p>lol</p>",
        "id": 148744972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543440380
    },
    {
        "content": "<p>Thanks, folks. I guess there are some steps in there that seem a little too magic to me.</p>\n<p>E.g., <code>succ_inj</code> is being applied to <code>n + succ k = m + succ k</code> but it's supposed to be applied to something of the form <code>succ a = succ b</code>. So how does it get from <code>n + succ k = m + succ k</code> to <code>succ (n + k) = succ (m + k)</code>? This is where I was trying to apply <code>succ_add</code> twice to make that transformation. But I guess since that's part of the definition of <code>succ</code>, it's considered definitionally equivalent and doesn't need a proof step. For a beginner it's a little hard to follow when multiple steps are happening at the same time.</p>\n<p>Similarly with the leap from <code>n + 0 = m + 0</code> to <code>n + m</code>. I guess there's no proof step because it's just a definitional equivalence.</p>\n<p>What about when you really <em>do</em> need to make substitutions (<code>eq.subst</code>) on both sides of the equation?</p>",
        "id": 148746236,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543441484
    },
    {
        "content": "<p>it's not definiton of <code>succ</code>, it's definition of <code>+</code></p>",
        "id": 148746273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543441520
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 148746289,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543441538
    },
    {
        "content": "<p>what's your background?</p>",
        "id": 148746387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543441610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n          <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_succ</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>   <span class=\"o\">:</span> <span class=\"n\">h</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">succ_inj</span> <span class=\"n\">this</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">random</span>\n</pre></div>",
        "id": 148746555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543441745
    },
    {
        "content": "<p>Kevin, using <code>simpa</code> in this situation is cheating, it probably uses <code>simp</code> lemmas of the same level as what we try to prove by hand</p>",
        "id": 148746594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543441780
    },
    {
        "content": "<p>BS and MS in computer science, have done a lot of Haskell programming, have done quite a few proofs by hand but have been working through <em>Logic &amp; Proof</em> and learning how to do proofs with a proof assistant.</p>",
        "id": 148746600,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543441783
    },
    {
        "content": "<p>Lyle, if you want to see more explicitly where definitional equality is used, you can try to follow that version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- n = n + 0 is true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"n\">change</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- again true by definition</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">succ_inj</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148746758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543441894
    },
    {
        "content": "<p>When you call <code>exact</code> and see what <code>h</code> looks like in the info view, you see what defintional reduction occurred. Same with the <code>change</code> tactic</p>",
        "id": 148746839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543441948
    },
    {
        "content": "<p>I also used <code>;</code> to do <code>intro h</code> in both cases</p>",
        "id": 148746853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543441972
    },
    {
        "content": "<p>Definitional equality vs usual equality is clearly the single most confusing point of type theory</p>",
        "id": 148746880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442009
    },
    {
        "content": "<p>you'll need time to get used to it</p>",
        "id": 148746889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , I see, nice trick, using <code>h</code> in the middle of the <code>calc</code>. Thanks.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> : I haven't really gotten into tactic mode yet. Trying to do proofs without tactics at first because that's closer to how they are proven by hand. Once I get comfortable with that I will move on to tactics. I know, I'm using them a bit with <code>by rw</code>.</p>\n<p>I'll load your example up in the editor though and hover the cursor over things and see what happens. I'm using VS Code. Thanks for the pointers.</p>",
        "id": 148747036,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442152
    },
    {
        "content": "<blockquote>\n<p>Trying to do proofs without tactics at first because that's closer to how they are proven by hand.</p>\n</blockquote>\n<p>This may be the weirdest thing I read on this chat. I guess it's the background difference (CS vs pure maths training)</p>",
        "id": 148747145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442271
    },
    {
        "content": "<p>Hmm, I can hover over the tactic names and get nice detailed description of what the tactic means. But I don't have an \"info view\".</p>",
        "id": 148747191,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442298
    },
    {
        "content": "<p>Ctrl-Shift-Enter</p>",
        "id": 148747204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442323
    },
    {
        "content": "<p>One reason I'm studying Lean instead of Coq is because all the training materials for Coq seem to use tactics right away. I can't follow what's going on in the proof.</p>",
        "id": 148747210,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442341
    },
    {
        "content": "<p>And suddenly you'll discover why tactic mode is <em>way easier</em> than term mode</p>",
        "id": 148747222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442348
    },
    {
        "content": "<p>Tactic mode proofs can be hard to read without the view you just unlocked with Ctrl-Shift-Enter</p>",
        "id": 148747246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442398
    },
    {
        "content": "<p>But with this view they are infinitely easier to read</p>",
        "id": 148747306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442417
    },
    {
        "content": "<p>Yeah, I want to be able to read them off a piece of paper or a text file, without having to use a special viewer.</p>",
        "id": 148747366,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442498
    },
    {
        "content": "<p>But I'll give it a try</p>",
        "id": 148747379,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442511
    },
    {
        "content": "<p>I'm used to reading proofs out of textbooks.</p>",
        "id": 148747442,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442546
    },
    {
        "content": "<p>It's very difficult to write proofs in Lean that are readable on paper and, unfortunately, this is not at all a goal of mathlib</p>",
        "id": 148747485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442607
    },
    {
        "content": "<p>It's doable, but pretty verbose</p>",
        "id": 148747507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442637
    },
    {
        "content": "<p>I have taken a lot of math classes but we always did proofs on paper too.</p>",
        "id": 148747616,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442719
    },
    {
        "content": "<blockquote>\n<p>I'm used to reading proofs out of textbooks.</p>\n</blockquote>\n<p>Proofs in textbooks explain the steps (just like a tactic proof). The idea that there is a \"proof term\" is pretty alien to most mathematicians. :-)</p>",
        "id": 148747627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543442731
    },
    {
        "content": "<p>Mathematicians' paper proofs do use <code>show</code> a lot (\"Next, we need...\"), and this makes a big improvement in readability.</p>",
        "id": 148747691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543442771
    },
    {
        "content": "<p>By \"proof term\" you mean the goal that we are trying to prove? My understanding is that the tactic proofs work backwards from the goal. I'm used to working forwards from the hypotheses.</p>",
        "id": 148747735,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442840
    },
    {
        "content": "<p>The thing which could be readable would be a sequence of <code>have</code> and <code>suffices</code> stating all steps that would be mentioned on paper, with automation crushing the proof of each step. But automation is not ready yet</p>",
        "id": 148747738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442848
    },
    {
        "content": "<p>No, you don't have to go backward in tactic mode, both directions are allowed</p>",
        "id": 148747755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442879
    },
    {
        "content": "<p>OK, interesting</p>",
        "id": 148747794,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543442891
    },
    {
        "content": "<p>And I think you use backward reasoning on paper more than you are aware</p>",
        "id": 148747816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442931
    },
    {
        "content": "<p>Working backwards means using the <code>apply</code> tactic, but there are other tactics!</p>",
        "id": 148747837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543442969
    },
    {
        "content": "<p>Especially when you write \"We can now apply the ... theorem because ...\" (first naming the theorem and then explaining why assumptions are satisfied)</p>",
        "id": 148747840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442978
    },
    {
        "content": "<p>And indeed this is the <code>apply</code> tactic</p>",
        "id": 148747845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543442992
    },
    {
        "content": "<p>I would think you could still write that in forward mode by writing:</p>\n<p><code>the_theorem h1 h2 h3 h4</code></p>\n<p>But maybe I am still too stuck in that mode of thinking.</p>",
        "id": 148749147,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543444339
    },
    {
        "content": "<p>Anyway, thanks for the help, folks. I run a meetup where we are going through <em>Logic &amp; Proof</em>, so we're all on the same page and I can't just say \"let's use tactics for all the proofs from now on\" when the examples in the book don't use tactic mode. If it were just me I could diverge and study tactics. I will show the example code you folks created in the meeting tonight.</p>",
        "id": 148749232,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543444442
    },
    {
        "content": "<p><em>Logic &amp; Proof</em> being what's linked to at the bottom of <a href=\"https://leanprover.github.io/publications/\" target=\"_blank\" title=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a></p>",
        "id": 148749268,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543444493
    },
    {
        "content": "<p>It's a goal of our study to learn mathematical logic, but also to learn to use a proof assistant. Which makes the book perfect.</p>",
        "id": 148749310,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1543444555
    },
    {
        "content": "<p>FWIW, I like proof terms for readability too. You do you! That's why we have both options.</p>",
        "id": 148762910,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543462589
    },
    {
        "content": "<p>Although, it is possible to write incomprehensible code in either mode pretty easily</p>",
        "id": 148762983,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543462753
    },
    {
        "content": "<p>The most important thing for comprehension is using lots of show, have, and suffices</p>",
        "id": 148763035,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543462820
    },
    {
        "content": "<p>As Patrick mentioned</p>",
        "id": 148763037,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543462828
    },
    {
        "content": "<p>Proof terms are highly unreadable to me. One can't inspect them without having to do some work. <span class=\"user-mention\" data-user-id=\"113073\">@Lyle Kopnicky</span> I just want to check you've understood Patrick's comment. When I am looking through my tactic proof in VS Code after ctrl-shift-enter, my session looks like the attached pic. <a href=\"/user_uploads/3121/-ce0o2nYwcGCB9e_XvSMqgjI/vscode.png\" target=\"_blank\" title=\"vscode.png\">vscode.png</a> . Clicking on different lines in the tactic proof shows me the exact state that Lean is in on every line. When I was a beginner I found this <em>completely indispensable</em>. One can attempt to mimic this in term mode, to try and understand someone else's term mode proof, but it involves actually deleting terms and replacing them with <code>_</code> which is much more of a pain.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-ce0o2nYwcGCB9e_XvSMqgjI/vscode.png\" target=\"_blank\" title=\"vscode.png\"><img src=\"/user_uploads/3121/-ce0o2nYwcGCB9e_XvSMqgjI/vscode.png\"></a></div>",
        "id": 148772700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543480562
    },
    {
        "content": "<p>Exactly!<br>\nI've somewhat gotten the hang of writing term mode proofs by keeping a sufficient number of <code>_</code> to the right of my cursor. But inspecting a term-mode proof is a nightmare.</p>",
        "id": 148773031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543480991
    }
]