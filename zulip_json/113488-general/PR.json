[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I've fixed all your suggestions on <a href=\"https://github.com/leanprover/mathlib/pull/94\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/94\">https://github.com/leanprover/mathlib/pull/94</a>. Thanks!</p>",
        "id": 124870985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523338150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how come you didn't notice that <code>subgroup</code> is already there =P</p>",
        "id": 124871841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523340085
    },
    {
        "content": "<p>I assumed that scott would have noticed :P</p>",
        "id": 124871884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523340161
    },
    {
        "content": "<p>You should move all this stuff from the <code>group</code> folder to <code>group_theory</code></p>",
        "id": 124871886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523340183
    },
    {
        "content": "<p>Speaking of two developments, I think I prefer Scott's definition of <code>subgroup</code> to the one that's there (Kenny's?), which is being clever combining two axioms into one. That's the sort of thing you do in an auxiliary constructor theorem, not in the definition</p>",
        "id": 124871941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523340355
    },
    {
        "content": "<p>that isn't mine</p>",
        "id": 124871978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523340364
    },
    {
        "content": "<p>I would never do such things :P</p>",
        "id": 124871983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523340373
    },
    {
        "content": "<p>it's johoelzl's work</p>",
        "id": 124871985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523340408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> someone is challenging your style</p>",
        "id": 124871999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523340424
    },
    {
        "content": "<p>looks like it</p>",
        "id": 124872002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523340425
    },
    {
        "content": "<p>I don't mind changing the definition of <code>is_subgroup</code>. I guess now we want to have <code>is_submonoid</code> and than <code>is_subgroup</code> as an extension? <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> did you find some time to work on your free groups? As I remember the were submonoids involved?</p>",
        "id": 124872587,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523341674
    },
    {
        "content": "<p>there's no submonoid in my free group</p>",
        "id": 124872643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523341733
    },
    {
        "content": "<p>there are monoids with involutions, maybe that's what confuses you</p>",
        "id": 124872645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523341741
    },
    {
        "content": "<p>there are also monoid homomorphisms</p>",
        "id": 124872650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523341761
    },
    {
        "content": "<p>Ah, okay. I think the monoid homomorphism confused me.</p>",
        "id": 124872867,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523342242
    },
    {
        "content": "<p>Now I found it, <code>is_submonoid</code> is already in <code>algebra/group.lean</code>. I will do some cleanup.</p>",
        "id": 124872911,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523342341
    },
    {
        "content": "<p>aha!</p>",
        "id": 124872920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523342382
    },
    {
        "content": "<p>that's indeed my work for the localization isn't it</p>",
        "id": 124872924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523342395
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/commit/c852939f5fcb3a1f0ebe38d8eebc6aede22b9e25#diff-52b9e281e7667f88f8203fb617843d93\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/c852939f5fcb3a1f0ebe38d8eebc6aede22b9e25#diff-52b9e281e7667f88f8203fb617843d93\">https://github.com/leanprover/mathlib/commit/c852939f5fcb3a1f0ebe38d8eebc6aede22b9e25#diff-52b9e281e7667f88f8203fb617843d93</a></p>",
        "id": 124872976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523342450
    },
    {
        "content": "<p>yes it is</p>",
        "id": 124872977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523342451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>, in my group theory PR I just added a commit modifying your <code>subgroup.lean</code>. You said higher in the thread that you would do some cleanup --- if possible could we coordinate to avoid having merge issues later?</p>",
        "id": 124878465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353382
    },
    {
        "content": "<p>(Sorry, all for not noticing Johannes work. Mitchell did his work back in January, and I didn't noticed Johannes' work being committed in the meantime.)</p>",
        "id": 124878481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353421
    },
    {
        "content": "<p>Would be good, mostly I changed <code>is_subgroup</code> to extend <code>is_submonoid</code> and moved <code>is_submonoid</code>, also I'm adding <code>gpowers</code>.</p>",
        "id": 124878523,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523353445
    },
    {
        "content": "<p>It sounds like everyone agrees that the \"3 axiom\" version of <code>is_subgroup</code> is better than the \"2 axiom\" version, so maybe we could switch that as well?</p>",
        "id": 124878533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353482
    },
    {
        "content": "<p>I'm curious also about the naming. I (or rather, Mitchell) had written just <code>subgroup</code>, where you have <code>is_subgroup</code>.</p>",
        "id": 124878542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353517
    },
    {
        "content": "<p>Is <code>is_subgroup</code> obviously better?</p>",
        "id": 124878545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353531
    },
    {
        "content": "<p>Somehow when I think of it as a typeclass rather than a predicate <code>subgroup</code> seems more natural to me.</p>",
        "id": 124878552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353557
    },
    {
        "content": "<p><code>is_subgroup</code> is not (yet) a type class. I'm not sure if it is a good idea to make structures like this type classes, for me sets and functions are to fluid in some sense to be nice type classes. This is also a reason why I  don't like morphism predicates like <code>is_group_hom</code> etc to be type classes. But on the other hand they mostly work well, so maybe we should stay with this approach.</p>",
        "id": 124878755,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523353891
    },
    {
        "content": "<p>Ah, I hadn't even realised that we might not want <code>is_subgroup</code> to be a type class, although I should have from the mere fact that you didn't do this!</p>",
        "id": 124878802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353976
    },
    {
        "content": "<p>The other thing is that we might want to use <code>subgroup := {s // is_subgroup s}</code>. for the bundled type</p>",
        "id": 124878803,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523353980
    },
    {
        "content": "<p>I guess I was anticipating the naming convention was <code>Subgroup := { s // subgroup s}</code>.</p>",
        "id": 124878821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523354018
    },
    {
        "content": "<p>True. There might be also <code>Group := sigma A : Type, group A</code>, and then <code>Subgroup</code> could be over <code>Group</code>. But I guess we don't need this yet. And in the worst case it could be in its own namespace.</p>\n<p>For the current PR: can you revert your changes on <code>group_theory/subgroup</code>? Then I will push my changes, as far as I see it you don't use it yet.</p>",
        "id": 124878961,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523354234
    },
    {
        "content": "<p>Or would this be work for you?</p>",
        "id": 124878969,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523354260
    },
    {
        "content": "<p>Also the <code>is_</code> convention is also coming from <code>is_commutative</code> etc. which is a <code>Prop</code> and talks about operators and not types. This is another reason why I slightly prefer <code>is_subgroup</code> for this kind of type classes.</p>",
        "id": 124879276,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523354828
    },
    {
        "content": "<p>Okay, I will work out how to revert my changes to <code>group_theory/subgroup</code>.</p>",
        "id": 124880527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523357413
    },
    {
        "content": "<p>Okay, I've done this. Just let me know once you've pushed yours.</p>",
        "id": 124880583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523357619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I moved <code>is_submonoid</code> from <code>algebra/group</code> to its own file <code>group_theory/submonoid.lean</code>. Maybe it should be in <code>algebra</code> after all, but I think it shouldn't be part of the base, i.e. it shouldn't be part of what most theories import.</p>",
        "id": 124881464,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523359341
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124908083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523402240
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124908092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523402273
    },
    {
        "content": "<p>(Silly question, sorry)</p>",
        "id": 124908093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523402277
    },
    {
        "content": "<p>Okay, I've successfully combined Mitchell's and Johannes' work on subgroups, and my PR &lt;<a href=\"https://github.com/leanprover/mathlib/pull/94\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/94\">https://github.com/leanprover/mathlib/pull/94</a>&gt; looks mostly good to me --- there are a few TODOs where I need help, in particular the typeclass resolution problem I was having earlier is still there; unfortunately Mario's suggestions don't seem to have helped.</p>",
        "id": 124917374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523421859
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> for merging that and making some final stylistic changes.</p>",
        "id": 124926513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523441867
    },
    {
        "content": "<p>There's one change that I'd like to disagree with, however. I saw that you changed a number of <code>group G</code> to <code>group α</code>.</p>",
        "id": 124927069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523442970
    },
    {
        "content": "<p>I know this is according to style.</p>",
        "id": 124927082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523443019
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> have already asked about this, but I want to add my vote too --- could we please consider changing the style rule so that types for which mathematicians would always use some particular letters for, can use those letters, rather than lower case greek letters?</p>",
        "id": 124927094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523443065
    },
    {
        "content": "<p>I'm just not going to be taken seriously if I call a group <code>α</code>.</p>",
        "id": 124927139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523443087
    },
    {
        "content": "<p>(As an aside, for a long time I've been making fun of (/exasperated by) physicists for using standard notations in the place of proper definitions --- just knowing that <code>Z</code> is a partition function, etc. I now feel properly chastised and sorry for my past bad behaviour, realising that I can't cope with groups that aren't called <code>G</code>.)</p>",
        "id": 124927160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523443196
    },
    {
        "content": "<p>Hm, slightly prefer <code>α</code> as it is a type and not a group, i.e. it is only the groups support type. What I prefer in following this style is that I don't need to think how to call certain elements I just follow the general rules. Btw, I will change more, I simplified most of the proofs and generalized some statement.s</p>",
        "id": 124929093,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523447159
    },
    {
        "content": "<p>Really, groups should be called G. It only helps readability, especially since you also insist on separating the carrier type and the instance in <code>(α : Type*) (β : Type*) [group α] [group β]</code> instead of <code>(α : Type*) [group α] (β : Type*)  [group β]</code></p>",
        "id": 124937052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523461657
    },
    {
        "content": "<p>I don't see what the ordering of variables has to do with naming here. The idea is that greek letters label types (or \"underlying sets\" of things), while <code>Group</code>s would be labeled with <code>G</code> or <code>H</code> or whatever; it's just that these never come up because we don't use <code>Group</code> (the bundled one) in mathlib currently.</p>",
        "id": 124944334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523471953
    },
    {
        "content": "<p>Patrick's point is that it is even less clear that one should think of <code>\\alpha</code> and <code>\\beta</code> as groups, because the place where they are introduced is visually not located next to the fact that you have an instance of <code>group</code></p>",
        "id": 124944578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523472269
    },
    {
        "content": "<p>Does it make sense what I am saying?</p>",
        "id": 124944583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523472278
    },
    {
        "content": "<p>If it were ordered as <code>(α : Type*) [group α] (β : Type*)  [group β]</code> that would improve readability, because one does not have to scan very far ahead to figure out that <code>α</code> is a group.</p>",
        "id": 124944655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523472372
    },
    {
        "content": "<p>Is this really normal in computer science to demand that every variable of a certain type must be called one of three characters and that's the end of it?</p>",
        "id": 124947047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475950
    },
    {
        "content": "<p>From my point of view this is crazy.</p>",
        "id": 124947050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475958
    },
    {
        "content": "<p>Does this kind of convention exist in Isabelle? I checked it isn't use in Coq's Feit-Thompson stuff.</p>",
        "id": 124947221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523476168
    },
    {
        "content": "<p>It's just going to make mathematicians' heads explode if groups aren't called <code>G</code>, rings <code>R</code>, categories <code>𝒞</code>, manifolds <code>M</code>, etc. I've been convinced that typeclasses really are nice (after initially being very dubious), but if the expense is that the actual names of the things we're talking about never get mentioned (because it's rarely necessary to write <code>[G : Group α]</code>) then I'm going back to dubious.</p>",
        "id": 124952035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523482689
    },
    {
        "content": "<p>Given that typeclass arguments rarely receive names, I think a good convention is just that, like in the usual mathematicians' convention, we use the same name for the \"underlying thing\" (i.e. the type) and the \"extra structure on it\". I agree that if they were being referred to separately it would be more correct to name the typeclass <code>G</code> and the type <code>α</code>, but when they're not I want to keep the name <code>G</code>.</p>",
        "id": 124952517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523483425
    },
    {
        "content": "<p>It's not just that, it's just going to make arguments harder to follow. It's as simple as that.</p>",
        "id": 124953600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484921
    },
    {
        "content": "<p>In Isabelle type variables get a prime at the start, i.e. they are all names <code>'a</code>, <code>'b</code>, ... sometimes people are more specific and use <code>'state</code>. But at least <code>'a</code>, etc refer to alpha etc.</p>\n<p>If we look now into <code>group_theory.coset</code>, the name <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span> gets introduced at the beginning, and only occasionally refers to groups. So it doesn't make sense to call it <code>G</code> anymore. At least not globally in the file. We can give it different names in different section of that theory.</p>",
        "id": 124971719,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523516170
    }
]