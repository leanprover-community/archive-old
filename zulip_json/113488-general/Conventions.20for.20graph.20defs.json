[
    {
        "content": "<p>While working on <a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a>, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and I had a lot of discussion about some defining and naming conventions in graph theory, and I'd like to get some more opinions.</p>",
        "id": 204880237,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595567316
    },
    {
        "content": "<ul>\n<li>For relations such as the edge relation or the incidence of vertices on edges, I prefer a Prop-valued definition (<code>V → V → Prop</code>), and he prefered a set-valued definition (<code>V → set V</code>). These are definitionally equal, but does it matter which we use?</li>\n<li>It is also useful to have <code>finset</code>-valued versions, given some <code>fintype</code> instances. At that point, there are several versions of the same thing floating around, and they all have to have distinct names.</li>\n</ul>",
        "id": 204880398,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595567597
    },
    {
        "content": "<p>As building out more combinatorics will have a lot of variations on these themes, I'd like to have a consistent guideline. Also, probably there are actually analogies in mathlib already, but I haven't identified them yet. I think my preference is the following, but this just lines up with what I've found convenient this summer:</p>",
        "id": 204880453,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595567665
    },
    {
        "content": "<ul>\n<li>The original definition is Prop-valued, and is given as simple a name as possible, like <code>G.adj v w</code> or <code>v ~[G] w</code></li>\n<li>To get the corresponding set, we use <code>{w | G.adj v w}</code> or similar, and it doesn't get a separate name</li>\n<li>To get the finset, which may require some bundled proofs and instances, we use the full name, like <code>G.neighbors v</code></li>\n</ul>",
        "id": 204880639,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595567976
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> just because you had useful reviews asking for consistency</p>",
        "id": 204965928,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595624168
    },
    {
        "content": "<p>As I started saying in my review, while <code>V → V → Prop</code> and <code>V → set V</code> are definitionally equal, it's best not to take constant advantage of that, as it ends up being hard to use: the set API expects you to \"stay in the world of <code>set</code>\" most of the time.</p>",
        "id": 204974613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595631355
    },
    {
        "content": "<p>To me <code>V → V → Prop</code> feels like the safer choice because it makes the connections with other types of graphs (and categories) more transparent.</p>",
        "id": 204974676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595631387
    }
]