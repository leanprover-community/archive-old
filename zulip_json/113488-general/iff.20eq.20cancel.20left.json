[
    {
        "content": "<p>Is it true that this is not in the library?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">eq_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 172484776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564990668
    },
    {
        "content": "<p>Does <code>simp [h]</code> do it? If so you could look and see how</p>",
        "id": 172486715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564992856
    },
    {
        "content": "<p><code>rw h</code> does it.</p>",
        "id": 172496005,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565003685
    },
    {
        "content": "<p>yeah but that doesn't tell us if it's in the library :-)</p>",
        "id": 172496367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565004097
    },
    {
        "content": "<p>It looks like it should be in equiv, it follows from symm and trans</p>",
        "id": 172496418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565004132
    },
    {
        "content": "<p>Why would it be in the library when it's one <code>rw</code>?</p>",
        "id": 172496984,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565004768
    },
    {
        "content": "<p>Because you might want to <code>apply</code> it</p>",
        "id": 172497134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565004921
    },
    {
        "content": "<p>If I have <code>complicated_foo = 1 ↔ complicated_bar = 1</code>...</p>",
        "id": 172497193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565004965
    },
    {
        "content": "<p>I would prefer <code>suffices</code> in that situation. More readable.</p>",
        "id": 172497270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565005068
    },
    {
        "content": "<p>This from the man who thinks <code>le</code> is more readable than <code>subset</code> ;-)</p>",
        "id": 172497375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565005168
    },
    {
        "content": "<p>Sometimes that would mean adding 15 type ascriptions while telling Lean what suffices.</p>",
        "id": 172497386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565005185
    },
    {
        "content": "<p>And <code>complicated_foo = 1</code> suddenly becomes <code>(very : complicated) (why : am_I_writing_this) (horrible : long_goal) foo = 1</code></p>",
        "id": 172497451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565005229
    },
    {
        "content": "<p>It would be nice if you could use <code>congr</code> to take care of the iff</p>",
        "id": 172497499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565005304
    },
    {
        "content": "<p>How about <code>apply iff_of_eq (congr_arg _ h)</code></p>",
        "id": 172497560,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565005355
    }
]