[
    {
        "content": "<p>This is giving deterministic timeout and I have no idea why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">deterministic_timeout</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284080975,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1653613916
    },
    {
        "content": "<p>If you do <code>noncomputable! def</code> it avoids the timeout.</p>",
        "id": 284081995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653614970
    },
    {
        "content": "<p>This is some timeout in the VM compiler we haven't spent many resources investigating, and I think we're generally hoping that Lean 4 will not have the same issue.</p>",
        "id": 284082068,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653615023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453640\">Iván Sadofschi Costa</span> has marked this topic as resolved.</p>",
        "id": 284082142,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653615117
    },
    {
        "content": "<p>(A brief explanation: Whenever you make a definition, Lean will decide for itself whether it is \"computable,\" meaning whether it can be compiled into executable code. When you do <code>noncomputable theory</code>, it only turns off the check that Lean's decision matches whether or not <code>noncomputable</code> is present, and Lean still makes its own private decision. When it decides it's computable, then it passes the definition to the VM compiler. What I remember is that the first step of compilation involves unfolding some definitions in a way that turns out to be extremely expensive for these sorts of algebraic typeclasses. What <code>noncomputable!</code> does is tell Lean to trust you that it shouldn't even try.)</p>",
        "id": 284082574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653615582
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 284083590,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1653616663
    }
]