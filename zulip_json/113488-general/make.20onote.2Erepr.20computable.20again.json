[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The ordinal denoted by a notation -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">onote</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">oadd</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ω</span> <span class=\"err\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>This is in <code>set_theory/ordinal_notation.lean</code>. This definition is currently noncomputable. Should I start working on it to make it computable? (I believe I know how to make it computable, my only worry is that my PR will be rejected)</p>",
        "id": 125412217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524216790
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>)</p>",
        "id": 125412264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524216801
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> )</p>",
        "id": 125413219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524216983
    },
    {
        "content": "<p>maybe I'll do some analysis to show that I know how to make it computable</p>",
        "id": 125419192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524218034
    },
    {
        "content": "<p><code>ω</code> depends on <code>nat.lt.is_well_order</code>, which depends on <code>has_lt.lt.is_strict_total_order'</code>, which depends on <code>lt_trichotomy</code>, which depends on <code>lt_or_eq_of_le</code>, which uses <code>classical.by_cases</code>, so we only need to change one of them</p>",
        "id": 125419783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524218116
    },
    {
        "content": "<p><code>classical.by_cases</code> is in <code>Prop</code>, so it has zero effect on noncomputability.</p>",
        "id": 125420264,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524218184
    },
    {
        "content": "<p>you're right. I need to redo my analysis.</p>",
        "id": 125421754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524218436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you have any idea which part is noncomputable?</p>",
        "id": 125422169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524218520
    },
    {
        "content": "<p><code>ord.has_pow</code> is noncomputable because it 1) has an if-then-else on <code>a=0</code>, and 2) uses <code>limit_rec_on</code></p>",
        "id": 125424751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524218958
    },
    {
        "content": "<p>I wonder if there is a cheap trick where you \"eta-expand\" an arbitrary ordinal to make it computable.  All components of ordinals are props or types after all.</p>",
        "id": 125425296,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524219069
    },
    {
        "content": "<p>Ordinals are a noncomputable theory, so there isn't much point. Furthermore, as Gabriel observes, ordinals are \"cheaply noncomputable\" since they contain only erasable data, so the VM never computes with them anyway. I think a future version of lean may mark this function computable simply because it doesn't compute anything.</p>",
        "id": 125471318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524264259
    },
    {
        "content": "<p>You may wonder why so many things are noncomputable, when the choice usage is only in things like <code>ord</code>; the reason is because there is a lot of use of \"unique choice\", which is okay in ZF but not in lean. For example, can you even decide <code>a = 0</code>? This is easy in ZF, where everything is decidable by unique choice, but to do in lean you would have to decide if an arbitrary type is empty, for example <code>plift p</code> where <code>p</code> is a nondecidable proposition.</p>",
        "id": 125471438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524264502
    },
    {
        "content": "<p>My question to you: why do you care that <code>repr</code> is noncomputable? If the goal is to compute with ordinals, that's the whole reason I wrote the <code>ordinal_notation</code> file - it gives computational analogues of the ordinal functions. You will note that <code>onote.add</code> and such are all computable. <code>repr</code> is only there to make it possible to state correctness results, assuming full choice.</p>",
        "id": 125471516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524264628
    }
]