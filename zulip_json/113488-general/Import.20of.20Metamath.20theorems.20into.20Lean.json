[
    {
        "content": "<p>I have manually imported 78 Metamath theorems regarding tautologies into Lean in the attached file, and would like to translate the remaining over 23K theorems automatically for addition to mathlib. The automated translation might rely on Mario's MM0 tools (see <a href=\"#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean/near/168472336\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean/near/168472336</a>), modified to include documentation and otherwise make proofs intelligible.  You will notice in the attached that the theorems name are cryptic, but the documentation is excellent. Some further work would be needed to show that Lean's and Metamath's natural numbers (for example) are isomorphic, so we can say that Lean has a proof of the Prime Number Theorem (see Mario's work on this <a href=\"https://github.com/digama0/mm0/blob/build/mm0-lean/mm0/set/post.lean\">https://github.com/digama0/mm0/blob/build/mm0-lean/mm0/set/post.lean</a>).  I would appreciate your feedback: (1) would you support inclusion of the attached file with 78 theorems and later the complete file with over 23K theorems; (2) how should I revise the file, for instance to avoid tactics, as a template for the automated translation; and (3) would this be a desirable first step towards importing theorems from other proof assistants such as Isabelle and Mizar (a notoriously difficult task)? <a href=\"/user_uploads/3121/qz1ETcCjmUiRPXSyVThUAi99/set_mm.lean\">set_mm.lean</a></p>",
        "id": 235427775,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1618958826
    },
    {
        "content": "<p>Without wanting to comment on the idea as a whole as I'm not familiar with Metamath:</p>\n<blockquote>\n<p>The theorem names below are identical to those in <a href=\"http://set.mm\">set.mm</a>, except for theorem names beginning<br>\nwith a number (for example 2a1i) or containing a period (for example, pm2.18d) or a theorem name<br>\ncolliding with a Lean theorem</p>\n</blockquote>\n<p>On the assumption you don't care about readable names, you can use <code>«pm2.18d»</code> and <code>«2a1i»</code> if you want a leading number in your lemma name <code>«»</code> is special syntax for unusual identifiers that has language support.</p>",
        "id": 235432026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618961550
    },
    {
        "content": "<p>Metamath has a very different naming convention than mathlib, so theorems intended to be directly used by mathlib users should be provided under a different name</p>",
        "id": 235433249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618962335
    },
    {
        "content": "<p>theorems ported directly from metamath should probably retain their original names inside a namespace, especially if the port is fully automatic</p>",
        "id": 235433354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618962379
    },
    {
        "content": "<blockquote>\n<p>(1) would you support inclusion of the attached file with 78 theorems and later the complete file with over 23K theorems;</p>\n</blockquote>\n<p>Those are two <em>very</em> different questions. For the first part, I don't think it is worthwhile to simply copy these theorems and associated documentation without an intended application. For the second part I think it would be best suited as a separate lean project, which can be used as a dependency like mathlib.</p>\n<blockquote>\n<p>(2) how should I revise the file, for instance to avoid tactics, as a template for the automated translation;</p>\n</blockquote>\n<p>Much like the current mathport project, this involves tweaking the heuristics of the translator itself, while continuously using an up to date version of <a href=\"http://set.mm\">set.mm</a>. If you manually port the file there is no way you will be able to keep up with upstream changes.</p>\n<blockquote>\n<p>(3) would this be a desirable first step towards importing theorems from other proof assistants such as Isabelle and Mizar (a notoriously difficult task)?</p>\n</blockquote>\n<p>Other proof languages have other problems. I have investigated isabelle to some extent but not much on mizar, and certainly nothing like a full port exists. To do this you have to understand the breadth of what the source system can express and how the target system (lean) can model it. Plus there are a bunch of technical issues to getting proofs out of those systems. Metamath is comparatively simple, which is part of why the translation you mention exists.</p>",
        "id": 235434126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618962865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"397140\">@Hunter Monroe</span> if you make this port than (for example) you will be creating a new copy of the real numbers, right? And that one will not automatically play nice with the existing copy of the reals in mathlib. This seems like a huge issue to me. One that probably requires manual intervention for almost every definition. (You need to line up the mm copy of <code>nat</code>, <code>int</code>, <code>rat</code>, <code>real</code>, <code>complex</code>, <code>group</code>, <code>ring</code>, <code>vector_space</code>, <code>topological_space</code>, <code>metric_space</code>, <code>continuous</code>, etc... the list goes on and on.)<br>\nOne of the massive strengths of mathlib is that it is a monolith, with very tight compatibility between almost all theories. Compare this to some of the other systems, that have multiple topology libraries, multiple algebra libraries, etc... and all those specialized libraries don't work together nicely all the time.</p>",
        "id": 235458976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618984115
    },
    {
        "content": "<p>That sounds a bit like \"not invented here\" mentality though. If our library is so good it should be possible to prove all those isomorphisms you mention</p>",
        "id": 235463615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618988093
    },
    {
        "content": "<p>There's a bunch of math that was written in systems other than lean too</p>",
        "id": 235463646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618988116
    },
    {
        "content": "<p>Hmm, I don't think what I'm saying is NIH. Those isomorphisms <em>can</em> be proven. But my point is that adding a huge port to mathlib without proving all those isoms will lead to fragmentation. And I think fragmentation is very bad in the long run. We'll never be able to state the Hodge conjecture if our algebra, topology, analysis, and geometry libraries don't play very well together. Because you need a boatload of stuff from all those areas.</p>",
        "id": 235465599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618989171
    },
    {
        "content": "<p>Yes. So presumably the right approach is that there is a big blob of automatically translated stuff, that never gets tweaked by hand, except insofar as modifying a list of alignments that have been made. There's also a bunch of hand-written alignment code. Presumably the part that can be committed to mathlib is the alignments + the fraction of the automatically translated stuff that has been aligned + the scripts that do the automatic translation on the source library, so that it's possible to bump as needed.</p>",
        "id": 235465799,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618989352
    },
    {
        "content": "<p>(Perhaps those scripts would read some configuration file that specified what is considered aligned by now. They then translate everything, and discard the non-aligned parts.)</p>",
        "id": 235465863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618989383
    },
    {
        "content": "<p>I don't know about discarding the non-aligned parts, since alignment only happens if people write the alignments, which is a lot easier if the unaligned theorem is already available without having to re-run the porting tool</p>",
        "id": 235474918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618994691
    },
    {
        "content": "<p>Sure! Maybe it makes sense to try to split into two different directories or something that indicates the boundary between aligned and non-aligned.</p>",
        "id": 235475127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618994808
    },
    {
        "content": "<p>I don't think they come organized like that though. Suppose we have basic logical connectives aligned and nothing else; there are basic logic theorems littered throughout the metamath library (although there is a big concentration at the beginning)</p>",
        "id": 235475378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618994956
    },
    {
        "content": "<p>in particular because the second half of <a href=\"http://set.mm\">set.mm</a> is a collection of \"mathboxes\" aka mini-libraries maintained by their authors</p>",
        "id": 235475495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995013
    },
    {
        "content": "<p>What's the motivation behind the single-file structure of <a href=\"http://set.mm\">set.mm</a>?</p>",
        "id": 235475538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995039
    },
    {
        "content": "<p>That 2 seconds is so small that splitting the file isn't necessary (-;</p>",
        "id": 235475570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618995066
    },
    {
        "content": "<p>Is it produced by a build tool that concatenated smaller pieces?</p>",
        "id": 235475571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995066
    },
    {
        "content": "<p>Norm cites ease of various global file editing operations</p>",
        "id": 235475582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995070
    },
    {
        "content": "<p>There are markings in the file that let you split and concatenate it if you want</p>",
        "id": 235475599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995088
    },
    {
        "content": "<p>You need an editor with large file support but otherwise it has never been a big deal</p>",
        "id": 235475713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995145
    },
    {
        "content": "<p>There is of course plenty of organizational structure in the file, see <a href=\"http://us.metamath.org/mpeuni/mmtheorems.html\">http://us.metamath.org/mpeuni/mmtheorems.html</a></p>",
        "id": 235475768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995176
    },
    {
        "content": "<p>Ah, I think I was expecting the level of structure mathlib has within files</p>",
        "id": 235475834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995218
    },
    {
        "content": "<p>One thing that makes this distinctly different from lean's approach is that <a href=\"http://set.mm\">set.mm</a> is linearly laid out, it's not a dag</p>",
        "id": 235475858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995240
    },
    {
        "content": "<p>That is, not much at all</p>",
        "id": 235475929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995261
    },
    {
        "content": "<p>It makes it a lot easier to see what parts of the library are \"early\" and what order dependencies go</p>",
        "id": 235475971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995295
    },
    {
        "content": "<p>It still behave as a dag presumably?</p>",
        "id": 235475972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995295
    },
    {
        "content": "<p>At a lemma level</p>",
        "id": 235476008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618995317
    },
    {
        "content": "<p>The theorem references form a dag, of course, but they come with a predefined topological sort</p>",
        "id": 235476021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995326
    },
    {
        "content": "<p>If metamath took a lot longer to compile this might be more annoying</p>",
        "id": 235476140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618995376
    },
    {
        "content": "<p>I guess once <code>set.mm</code> starts taking &gt; 10s to compile, everyone will start worrying, and thinking about porting to MM0 <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 235476413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618995559
    }
]