[
    {
        "content": "<p>My minimal working example is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.bicategory.basic</span>\n<span class=\"c1\">--import category_theory.bicategory.locally_discrete</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category_theory.bicategory</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>So here everything works fine, i.e. the #check sees as instance the <code>category_theory.bicategory.hom_category X X</code></p>\n<p>But if you uncomment the second import statement, now #check sees <code>category_theory.locally_discrete.quiver.hom.category_theory.small_category X X</code>.</p>\n<p>I don't get why.<br>\nIn the locally_discrete file, there is a category instance for <code>(X \\hom X)</code> for all <code>X : locally_discrete C</code>, and <code>locally_discrete C</code> is defined as <code>C</code>.<br>\nBut I find it strange (and it really hurts while trying to work with a bicategory), that apperently the instance provider reverse unfolds my <code>C</code> to <code>locally_discrete C</code> and then applys the instance availabel for locally_discrete instead of the other instance</p>",
        "id": 292264022,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1659799982
    },
    {
        "content": "<p>I apparently worked on an outdated version of mathlib, in a new version this problem is fixed by giving the locally_discrete instance a low priority.<br>\nApart from fixing my problem, I still don't get why the instance provider would work that way.</p>",
        "id": 292266160,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1659802714
    },
    {
        "content": "<p>I guess the unusual feature here is that the \"type synonym\" <code>locally_discrete</code> appears in the types of arguments, not in the instance head.</p>",
        "id": 292273757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659812667
    },
    {
        "content": "<p>Hmm, I can't reproduce this even if I raise the priority of <code>category_theory.locally_discrete.hom_small_category</code> (I assume this is the new name for the instance you mentioned)</p>",
        "id": 292274113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659813065
    },
    {
        "content": "<p>The change of priority was in this thread: <a href=\"#narrow/stream/113489-new-members/topic/bicategory/near/271747662\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/bicategory/near/271747662</a></p>",
        "id": 292275211,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659814519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20apply_instance.20using.20instances.20which.20should.20not.20be.20visi.2E.2E.2E/near/292274113\">said</a>:</p>\n<blockquote>\n<p>Hmm, I can't reproduce this even if I raise the priority of <code>category_theory.locally_discrete.hom_small_category</code> (I assume this is the new name for the instance you mentioned)</p>\n</blockquote>\n<p>Yeah, that's the new name. Apparently the priority was not the problem, if you look at the following commit : <a href=\"https://github.com/leanprover-community/mathlib/commit/c9c9fa15fec7ca18e9ec97306fb8764bfe988a7e\">https://github.com/leanprover-community/mathlib/commit/c9c9fa15fec7ca18e9ec97306fb8764bfe988a7e</a><br>\nThere category_theory.discrete was changed from a type synonym to a wrapper, and thus a bicategory could no longer be veiwed as a locally_discrete category by giving all hom sets the trivial cat stucture automatically because <code>discrete(X \\hom Y)</code> and <code>X \\hom Y</code> are now different types.</p>",
        "id": 292281366,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1659823360
    },
    {
        "content": "<p>So why would one ever use this type synonyms, if they can cause such massive problems with typeclass deduction?<br>\nWould it be best practice to always use such wrappers instead of the same type?</p>",
        "id": 292281437,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1659823465
    },
    {
        "content": "<p>This is a tough question and the answer is \"probably no\" because this definitional abuse is the easiest way to copy over structure. One place where that definitely cannot be done is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift\">docs#ulift</a> and there's pain around it because we must track very rigorously what's in each type.</p>",
        "id": 292297123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659846508
    },
    {
        "content": "<p>It might be possible to  make a <code>derive</code> handler for structures with one field, but it seems the current <code>derive</code> doesn't handle instances with additional arguments...</p>",
        "id": 292302453,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659853543
    }
]