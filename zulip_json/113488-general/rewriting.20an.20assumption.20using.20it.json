[
    {
        "content": "<p>Nice little weirdness from <a href=\"https://github.com/leanprover-community/mathlib/issues/9934\">#9934</a>: you can't rewrite at an assumption using that assumption. Stupid example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>slightly more realistic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">):</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h.trans</span> <span class=\"n\">h'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">h.trans</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h''</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258880627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635084683
    },
    {
        "content": "<p>The actual example where this is disappointing is <a href=\"https://github.com/leanprover-community/mathlib/pull/9934/files#diff-007a1719e43583bdb2859622b2bbb8c1077df80b48dd26e0bf52fdd4041f8b53R335-R339\">https://github.com/leanprover-community/mathlib/pull/9934/files#diff-007a1719e43583bdb2859622b2bbb8c1077df80b48dd26e0bf52fdd4041f8b53R335-R339</a></p>",
        "id": 258880638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635084719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> You can replace this proof by <code>show tendsto f (ùìù a) (ùìù $ f a), by rwa eq_of_tendsto_nhds h</code> to make it less puzzling.</p>",
        "id": 258880746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635084854
    },
    {
        "content": "<p>Yes I was a bit surprised it didn't work, I felt I had already done that lots of time without problem, but I guess not then. Anyway, thanks for the alternative.</p>",
        "id": 258880909,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1635085176
    },
    {
        "content": "<p>This is actually a failsafe security of <code>rw</code>. It checks whether the rewritten hypothesis appears in the term you rewrite by.</p>",
        "id": 258887585,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1635094744
    },
    {
        "content": "<p>I just ran into this again, with, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"n\">hcd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">hbc.trans</span> <span class=\"n\">hcd</span> <span class=\"k\">in</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">hbc.trans</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This behaviour seems totally sensible, but that it silently errors (whilst fully breaking the infoview in the rw!) is baffling to me. if as Ya√´l says, this behaviour is an explicit failsafe, I think an error message should be emitted</p>",
        "id": 272744289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645485748
    },
    {
        "content": "<p>It is an explicit failsafe, but it is supposed to do nothing</p>",
        "id": 272745350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645486844
    },
    {
        "content": "<p>it can't just fail because I think that breaks <code>rw at *</code> which applies the rewrite to all the hypotheses</p>",
        "id": 272745386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645486907
    },
    {
        "content": "<p>and this behavior makes it automagically skip the expressions in the rewrite</p>",
        "id": 272745439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645486941
    },
    {
        "content": "<p>oh but there is a bug, it's skipping all the rest of the rules instead of just the one that is involved</p>",
        "id": 272745727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487297
    },
    {
        "content": "<p>Can't we detect whether a <code>rw</code> did anything or not? If it didn't, then throw a warning.</p>",
        "id": 272745817,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645487410
    },
    {
        "content": "<p>if it fails then it will break tactics that depend on this behavior to apply <code>rw thm</code> to several hypotheses at once</p>",
        "id": 272745852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487472
    },
    {
        "content": "<p>there is literally a bit of code that says \"if the thm uses the hypothesis then do nothing\"</p>",
        "id": 272745910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487536
    },
    {
        "content": "<p>\"did <strong>anything</strong>\"</p>",
        "id": 272745912,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645487542
    },
    {
        "content": "<p>normally that would be where you put \"fail\", so this behavior is definitely intentional</p>",
        "id": 272745928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487572
    },
    {
        "content": "<p>the part that looks unintentional is that \"do nothing\" is also skipping the remainder of the list of rules to apply</p>",
        "id": 272745958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487624
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/686\">lean#686</a></p>",
        "id": 272746141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/rewriting.20an.20assumption.20using.20it/near/272745912\">said</a>:</p>\n<blockquote>\n<p>\"did <strong>anything</strong>\"</p>\n</blockquote>\n<p>I'm talking about meta-tactics that apply <code>rw</code> in a loop, or to multiple hypotheses. <code>rw</code> itself is written that way</p>",
        "id": 272746194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645487862
    },
    {
        "content": "<p>this is a nice bug-fix as on the consumer-end it will probably be very noticeable that it does nothing!</p>",
        "id": 272746555,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645488159
    }
]