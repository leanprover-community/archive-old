[
    {
        "content": "<p>Is the following lemma true?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">infi_sup_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>It works for sets, but I'm worried this is not in the library. Of course I need it for filters <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205334979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015294
    },
    {
        "content": "<p>the standard counter-example should be 0 &lt; a,b,c &lt; 1</p>",
        "id": 205335034,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015355
    },
    {
        "content": "<p>and then you'd start requiring it be a complete_distrib_lattice, which solves the finite case, but I guess then there can be some infinite counter-example</p>",
        "id": 205335145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015411
    },
    {
        "content": "<p>Of course I meant <code>complete_distrib_lattice</code></p>",
        "id": 205335209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015451
    },
    {
        "content": "<p>yeah and I'm saying there should be some analogous counter-example</p>",
        "id": 205335241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015478
    },
    {
        "content": "<p>emphasis on \"should\"</p>",
        "id": 205335290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015486
    },
    {
        "content": "<p>Wait, maybe <code>complete_distrib_lattice</code> is not what I thought.</p>",
        "id": 205335334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015530
    },
    {
        "content": "<p>can I do something like finite subsets of N and the full subset?</p>",
        "id": 205335343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015538
    },
    {
        "content": "<p>then have <code>a = {0}</code> and <code>s n = {2n+1}</code></p>",
        "id": 205335396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015588
    },
    {
        "content": "<p>It seems the definition of <code>complete_distrib_lattice</code> is essentially that my lemma holds there.</p>",
        "id": 205335673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015744
    },
    {
        "content": "<p>oh really</p>",
        "id": 205335687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015756
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">complete_distrib_lattice</span> <span class=\"n\">α</span> <span class=\"kn\">extends</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">infi_sup_le_sup_Inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inf_Sup_le_supr_inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 205335709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015774
    },
    {
        "content": "<p>I see</p>",
        "id": 205335717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015781
    },
    {
        "content": "<p>Yes, it asks for inequalities only, but they are the problematic inequalities.</p>",
        "id": 205335847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015865
    },
    {
        "content": "<p>I wasn't even sure that <code>complete_distrib_lattice</code> exists when I said it</p>",
        "id": 205335870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015896
    },
    {
        "content": "<p>Ok, my new job is to prove filters on a given type form a completely distributive lattice. This works on paper (at least the inequality I need).</p>",
        "id": 205336460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596016333
    },
    {
        "content": "<p>But I'm still very worried that Johannes didn't do it three years ago. This doesn't sound like something Johannes would have missed the opportunity to do.</p>",
        "id": 205336499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596016373
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/frame#definition\">https://ncatlab.org/nlab/show/frame#definition</a></p>",
        "id": 205342922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596021258
    },
    {
        "content": "<p>and more information at <a href=\"https://ncatlab.org/nlab/show/distributive+lattice#infinitely_distributive_property\">https://ncatlab.org/nlab/show/distributive+lattice#infinitely_distributive_property</a></p>",
        "id": 205343433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596021646
    },
    {
        "content": "<p>For the record: filters do not form a completely distributive lattice, because the other case (swapping sup and inf) does not hold. And the part that holds was already there, but through a little variation. My latest PR fills some of this little gap.</p>",
        "id": 205367011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596034298
    }
]