[
    {
        "content": "<p>Is there a library of vectors, defined inductively?</p>\n<div class=\"codehilite\"><pre><span></span>inductive dvector (α : Type u) : ℕ → Type u\n| nil {} : dvector 0\n| cons : ∀{n}, α → dvector n → dvector (n+1)\n</pre></div>\n\n\n<p>Alternatively, can I use the equation compiler to pattern match on <code>vector</code> in the library in a nice way? I want something resembling the definitions in the following code:</p>\n<div class=\"codehilite\"><pre><span></span>universe variables u v w\ninductive dvector (α : Type u) : ℕ → Type u\n| nil {} : dvector 0\n| cons : ∀{n}, α → dvector n → dvector (n+1)\n\nlocal notation h :: t  := dvector.cons h t\nlocal notation `[` l:(foldr `, ` (h t, dvector.cons h t) dvector.nil `]`) := l\n\nnamespace dvector\nvariables {α : Type u} {β : Type v} {γ : Type w} {n : ℕ}\n\n@[simp] protected def map (f : α → β) : ∀{n : ℕ}, dvector α n → dvector β n\n| _ []      := []\n| _ (x::xs) := f x :: map xs\n\n@[simp] protected def map_id : ∀{n : ℕ} (xs : dvector α n), xs.map (λx, x) = xs\n| _ []      := rfl\n| _ (x::xs) := by dsimp; simp*\n\n@[simp] protected def map_congr {f g : α → β} (h : ∀x, f x = g x) :\n  ∀{n : ℕ} (xs : dvector α n), xs.map f = xs.map g\n| _ []      := rfl\n| _ (x::xs) := by dsimp; simp*\n\n@[simp] protected def map_map (g : β → γ) (f : α → β): ∀{n : ℕ} (xs : dvector α n),\n  (xs.map f).map g = xs.map (λx, g (f x))\n  | _ []      := rfl\n  | _ (x::xs) := by dsimp; simp*\n\nend dvector\n</pre></div>",
        "id": 136140175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1539984575
    },
    {
        "content": "<p>(and yes, <em>these</em> operations are probably already defined for <code>vector</code>, but I want to define new operations on vectors using pattern matching, and I kind-of don't want to do it on lists first)</p>",
        "id": 136140303,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1539984667
    },
    {
        "content": "<p><code>vector.cons</code> already has the <code>pattern</code> attribute; have you tried using it in the equation compiler?</p>",
        "id": 136140731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539985140
    },
    {
        "content": "<p>What does the <code>pattern</code> attribute do?<br>\nYes, I tried matching on vectors using <code>vector.nil</code> and <code>vector.cons</code>, but something like this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span>protected def vector.my_map {α : Type u} {β : Type v} {γ : Type w} (f : α → β) :\n ∀{n : ℕ}, vector α n → vector β n\n| _ vector.nil         := vector.nil\n| _ (vector.cons x xs) := vector.cons (f x) (vector.my_map xs)\n</pre></div>",
        "id": 136141401,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1539985871
    },
    {
        "content": "<p>It lets you use the definition in a pattern context, I'm not too sure of the details of how it works</p>",
        "id": 136141888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539986420
    },
    {
        "content": "<p>Yeah, it seems not to work, unfortunate...</p>",
        "id": 136142036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539986591
    },
    {
        "content": "<p>It seems like maybe the problem is the way that Lean moved the proof field of <code>vector.nil</code> into a <code>theorem</code></p>",
        "id": 136142212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539986859
    },
    {
        "content": "<p>I wonder whether there is some option to disable that?</p>",
        "id": 136142217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539986867
    },
    {
        "content": "<p>though one would like it to not matter, since it is a Prop anyways</p>",
        "id": 136142222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539986881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> There should be a custom recursor for this</p>",
        "id": 136143993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539989528
    },
    {
        "content": "<p>that's usually the way we show alternate inductive patterns for types</p>",
        "id": 136143995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539989559
    },
    {
        "content": "<p>But can you use that with the equation compiler?</p>",
        "id": 136145108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539991429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> In <code>kbb</code> we experimented with code like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`!</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">l</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">fast_matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fast_matrix</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">5</span> <span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">]]</span>\n</pre></div>\n\n\n<p>It is not exactly what you want, but maybe a bit related.</p>",
        "id": 136152692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540006754
    },
    {
        "content": "<p>Yes, a custom recursor for <code>vector</code> would be nice. That doesn't affect pattern matching though, right?</p>",
        "id": 136187187,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540074363
    },
    {
        "content": "<p>What is the reason to define vectors (and fin) this way, instead of the inductive family with the nicer pattern matching? Is it because the virtual machine can then use its representation of lists (and nat) for efficient computation?</p>",
        "id": 136187264,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540074487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that is indeed nice notation. You can get the same effect if you define the notation using <code>vector.nil</code> and <code>vector.cons</code>, right?</p>",
        "id": 136187318,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540074647
    },
    {
        "content": "<p>Yes, both of these types are implemented this way for efficient computation</p>",
        "id": 136187497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540075060
    },
    {
        "content": "<p>The downside of custom recursors is of course that they don't hook in to the equation compiler, so you don't get the nice pattern matching</p>",
        "id": 136187550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540075118
    },
    {
        "content": "<p>An alternative is to define the alternate inductive structure as <code>vector2</code> or something, and prove an equiv</p>",
        "id": 136187558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540075161
    },
    {
        "content": "<p>If you want these, <code>fin2</code> and <code>vector2</code> are defined in <code>dioph.lean</code></p>",
        "id": 136187561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540075177
    },
    {
        "content": "<p>Oh, so they do exist, just not in the <code>data</code> folder. In <code>dioph</code> I only find <code>vector3</code> though. Where is <code>vector2</code>?</p>",
        "id": 136187742,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540075510
    },
    {
        "content": "<p>oh,  I thought I renamed it</p>",
        "id": 136190101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540080114
    },
    {
        "content": "<p><code>vector2</code> used to be just <code>fin n -&gt; A</code></p>",
        "id": 136190144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540080126
    },
    {
        "content": "<p>or maybe it was <code>fin2 n -&gt; A</code></p>",
        "id": 136190149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540080142
    }
]