[
    {
        "content": "<p>What we want to avoid is anything that is O(n^2)</p>",
        "id": 207098954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597627372
    },
    {
        "content": "<p>False negatives here are because the expr ordering is fairly strict and might not pick up on theorems that we would say are the same but differ in some behind the scenes detail like variable names</p>",
        "id": 207099022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597627443
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Starting.20to.20contribute.20to.20mathlib\">#new members &gt; Starting to contribute to mathlib</a> by <span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span></p>",
        "id": 207100470,
        "sender_full_name": "Notification Bot",
        "timestamp": 1597629912
    },
    {
        "content": "<p>okay, so I guess we can a little bit farther by computing a normal form for <code>expr</code>s that forgets variable names. informally speaking, the algorithm is like <br>\nFix a canonical infinite list of names. <br>\nfor a given expr, put an order on the variables names by traversing the expr tree and writing them down in the order you see them<br>\nrename the nth variable in this expr list to the nth variable in the canonical list</p>",
        "id": 207101856,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597632208
    },
    {
        "content": "<p>but this approach doesn't seem like it will get you to a much coarser notion of equivalence than this uh \"syntactic equality up to renaming variables\"</p>",
        "id": 207101911,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597632286
    },
    {
        "content": "<p>I think <code>expr.lt</code> already does something like this. I would try just using it and see if it needs tweaking after</p>",
        "id": 207103190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597634288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Maybe you can make all variables explicit during this step, because that might be another source of \"the same, but not syntactially so\"</p>",
        "id": 207104505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597636140
    },
    {
        "content": "<p>And if the order of two assumptions doesn't matter to the type checker, sort them by their types. That might take care of permutations of the variables.</p>",
        "id": 207104567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597636213
    },
    {
        "content": "<p>Initially with that suggestion I was worried about dependence of later args on earlier ones. But we're just trying to construct a function on <code>expr</code> whose preinages form the right equivalence relation. We don't need the image to be something we can elaborate! (I'll not sure \"elaborate\" is the right concept.)</p>",
        "id": 207126110,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597658981
    },
    {
        "content": "<p><code>expr.alpha_eqv</code> compares expressions ignoring binder type and bound variable names. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207126614,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597659441
    },
    {
        "content": "<p>I guess the next step is to peek into the implementation of <code>expr.alpha_eqv</code> and see whether it is already computing normal form <code>expr</code>s and checking <code>expr</code> equality, since that's really what's needed for the linter.</p>",
        "id": 207198748,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597699148
    }
]