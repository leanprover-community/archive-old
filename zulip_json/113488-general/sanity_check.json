[
    {
        "content": "<p>What is the attribute to mark something that shouldn't be checked by sanity check? I couldn't find it in the docs</p>",
        "id": 177325441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570183406
    },
    {
        "content": "<p><code>@[sanity_skip]</code></p>",
        "id": 177325571,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570183539
    },
    {
        "content": "<p>Should really be <code>@[insane]</code></p>",
        "id": 177326962,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1570184977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Currently, if everything is fine in the file, then <code>#sanity_check</code> still prints some output. Would it be possible to have a version that only prints something if it finds something \"insane\"?</p>",
        "id": 177330833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189291
    },
    {
        "content": "<p>Because then it would be possible to have <code>#sanity_check</code> at the end of every file in a project, and it wouldn't create any noise during compilation, unless something is wrong.</p>",
        "id": 177330883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189331
    },
    {
        "content": "<p><code>#doc_blame</code> already does this: it is silent if everything is fine.</p>",
        "id": 177330892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189348
    },
    {
        "content": "<p>Also... could it (maybe with some config option) report which file it is checking? Here is a snippet coming from a compilation of the perfectoid project:</p>\n<div class=\"codehilite\"><pre><span></span>/home/jmc/data/math/lean-perfectoid-spaces/src/for_mathlib/topological_groups.lean: parsing at line 294/- Note: This command is still in development. -/\n/- Checking 23 declarations in the current file -/\n\n/- OK: No unused arguments. -/\n/- OK: All declarations correctly marked as def/lemma. -/\n/- OK: No declarations have a duplicate namespace. -/\n/- OK: No illegal constants in declarations. -/\n\nlinear_ordered_comm_group_with_zero.to_linear_ordered_comm_monoid\nlinear_ordered_comm_group_with_zero.to_comm_group_with_zero\n/home/jmc/data/math/lean-perfectoid-spaces/src/valuation/basic.lean: valuation.comap_comp/- Note: This command is still in development. -/\n/- Checking 26 declarations in the current file -/\n\n/- UNUSED ARGUMENTS: -/\n#print linear_ordered_comm_group_with_zero.ne_zero_filter_basis /- argument 4: (h : x ≠ 0) -/\n#print linear_ordered_comm_group_with_zero.discrete_ordered_comm_group /- argument 2: [_inst_2 : linear_ordered_comm_group α] -/\n</pre></div>",
        "id": 177331001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189479
    },
    {
        "content": "<p>The unused arguments are in the file <code>src/valuation/with_zero_topology.lean</code>...</p>",
        "id": 177331024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189503
    },
    {
        "content": "<p>(Ooh, and let me stress that I'm only complaining about this tool because it is so incredibly useful that it deserves to have these tiny improvements as well. Without this tool, these clean ups would be almost impossible.)</p>",
        "id": 177331066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189555
    },
    {
        "content": "<p>Once again: big kudos from me. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 177331119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570189569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Here is another thing: <code>#sanity_check</code> complains about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">directed_lt</span> <span class=\"o\">:</span> <span class=\"n\">directed</span> <span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"err\">Γ₀</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"err\">Γ₀</span> <span class=\"bp\">|</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">γ₀</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>because this lemma mentions <code>≥</code>. I can mark this as <code>[sanity_skip]</code>, but I wonder if we can somehow detect that this is not something like <code>(h : a ≥ b)</code>...</p>",
        "id": 177331632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570190204
    },
    {
        "content": "<p>Vote with emotes: <code>@[sanity_skip]</code> should be renamed <code>@[insane]</code></p>",
        "id": 177342056,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570198286
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Currently, if everything is fine in the file, then <code>#sanity_check</code> still prints some output. Would it be possible to have a version that only prints something if it finds something \"insane\"?</p>\n</blockquote>\n<p>I'll add an option to toggle that, and turn that option on for <code>#sanity_check</code>.</p>\n<blockquote>\n<p>Also... could it (maybe with some config option) report which file it is checking? </p>\n</blockquote>\n<p>I don't know how to access the current file name via metaprogramming. Is this possible (Maybe using the IO monad)? </p>\n<blockquote>\n<p>(Ooh, and let me stress that I'm only complaining about this tool because it is so incredibly useful that it deserves to have these tiny improvements as well. Without this tool, these clean ups would be almost impossible.)</p>\n</blockquote>\n<p>I'm happy that it is helpful, and also like to add these quality of life features!</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Here is another thing: <code>#sanity_check</code> complains about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">directed_lt</span> <span class=\"o\">:</span> <span class=\"n\">directed</span> <span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"err\">Γ₀</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"err\">Γ₀</span> <span class=\"bp\">|</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">γ₀</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>because this lemma mentions <code>≥</code>. I can mark this as <code>[sanity_skip]</code>, but I wonder if we can somehow detect that this is not something like <code>(h : a ≥ b)</code>...</p>\n</blockquote>\n<p>I'll add a check that <code>ge</code> is fully applied.</p>",
        "id": 177342688,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570198723
    },
    {
        "content": "<p>Thanks! And I'm sorry that I can't help you with figuring out the filename...</p>",
        "id": 177343345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570199149
    },
    {
        "content": "<p><code>@[nolint]</code>, why are there no <code>lint ⟶ leant</code> puns!?! :D</p>",
        "id": 177349959,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570202875
    },
    {
        "content": "<p>I've been very quit about it but those punts have been happening in my head :P</p>",
        "id": 177350208,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570203013
    },
    {
        "content": "<p>To be honest, I would prefer another name (like \"lint\") for <code>sanity_check</code>, since the programming environments I'm used to interpret \"sanity check\" as a correctness test, not readability test. Also, some consider the term \"sanity check\" to be disparaging to people with mental illness (although I can't find a good source for this right now).</p>",
        "id": 177350891,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1570203486
    },
    {
        "content": "<p>(This StackExchange answer mentions the last point briefly: <a href=\"https://english.stackexchange.com/questions/387320/non-idiomatic-synonym-for-sanity-check/387355#387355\" target=\"_blank\" title=\"https://english.stackexchange.com/questions/387320/non-idiomatic-synonym-for-sanity-check/387355#387355\">https://english.stackexchange.com/questions/387320/non-idiomatic-synonym-for-sanity-check/387355#387355</a>)</p>",
        "id": 177351007,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1570203580
    },
    {
        "content": "<p>I think linting or style check might be better substitute</p>",
        "id": 177351230,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570203718
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Linter_(software)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Linter_(software)\">https://en.wikipedia.org/wiki/Linter_(software)</a> is the famous name, after all; and I'd claim even <code>nolint</code> is ubiquitous, though I'd only support that claim with a google search</p>",
        "id": 177351304,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570203757
    },
    {
        "content": "<p>+1 for renaming to <code>lint</code></p>",
        "id": 177356309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570206906
    },
    {
        "content": "<p>I'm happy to rename <code>#sanity_check</code>. I'm a bit hesitant renaming it to <code>lint</code>, since it doesn't do many things a linter normally does. My command doesn't even have access to the source code in the <code>.lean</code> file...</p>",
        "id": 177373777,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570218977
    },
    {
        "content": "<p>The good news is that, if someone writes a linter that has access to the Lean files, it's probably not how it's going to be called.</p>",
        "id": 177374474,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570219460
    },
    {
        "content": "<p>maybe we could rename it <code>#insanity_check</code> (because it's really checking for insane things in our code); then <code>@[sanity_skip]</code> becomes <code>@[sane]</code>, which makes more sense :^)</p>",
        "id": 177376825,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1570221420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> you might have missed the bit about disparaging people with mental illness</p>",
        "id": 177394040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570242443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Could you have a look at what <code>sanity_check</code> says in <code>topology/algebra/group_completion</code>? It incorrectly reports an unused argument in <code>uniform_space.completion.is_add_group_hom_map</code>.</p>",
        "id": 177408190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570270931
    },
    {
        "content": "<p>It is an unused argument:</p>\n<div class=\"codehilite\"><pre><span></span>theorem uniform_space.completion.is_add_group_hom_map : ∀ {α : Type u_1} [_inst_1 : uniform_space α] [_inst_2 : add_group α] [_inst_3 : uniform_add_group α]\n{β : Type u_2} [_inst_4 : uniform_space β] [_inst_5 : add_group β] [_inst_6 : uniform_add_group β]\n[_inst_7 : add_group β] [_inst_8 : uniform_add_group β] {f : α → β} [_inst_9 : is_add_group_hom f],\n  continuous f → is_add_group_hom (completion.map f)\n</pre></div>\n\n\n<p>Note that <code>[add_group β] [uniform_add_group β]</code> both occur twice. If you remove <em>both</em> duplicates from the declaration, it will happily compile. If you only remove <code>_inst_8</code> it will not compile, because the two difference <code>add_group</code> instances will conflict with each other, that confused me (too) when I tried to remove it.<br>\nNote that my duplication test doesn't apply here, since <code>_inst_6</code> and <code>_inst_8</code> have different implicit arguments (and <code>_inst_5</code> is not marked as unused, since it is used in <code>_inst_6</code>)</p>",
        "id": 177419920,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570290723
    },
    {
        "content": "<p>Oooh. Ok</p>",
        "id": 177423313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570296153
    },
    {
        "content": "<p>oh, I guess the unused check should ignore uses by other unused variables, which makes this a graph reachability problem</p>",
        "id": 177424720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570298610
    },
    {
        "content": "<p>actually it's probably better to just rerun the unused analysis until fixpoint, because that will perform better in the common case that nothing is unused</p>",
        "id": 177424794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570298732
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177425363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570299710
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177425549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570299981
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177425638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300173
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177425651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300194
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177425740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300281
    },
    {
        "content": "<p>[really sorry -- wrong thread]</p>",
        "id": 177425794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300331
    },
    {
        "content": "<p>It occurs to me that naming topological spaces X, rings R, and so on, and reserving α, β, ... for types which really have no extra structure (such as types which index families) would also go some way towards making one class of errors caught by <code>sanity_check</code> more unlikely, those where we accidentally have an unwanted <code>[topological_space α]</code> hypothesis.</p>",
        "id": 177535673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570465420
    },
    {
        "content": "<p>(Besides making it easier to set up <code>variables</code> that work as intended throughout a file, even if one ignores the possibility of making mistakes.)</p>",
        "id": 177536184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570465802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I met a new problem with the <code>ge</code> vs <code>le</code> check. sanity_check complains about every lemma containing <code>∀ ε &gt; 0, ...</code>. And I think we want to keep those.</p>",
        "id": 177557133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570479995
    },
    {
        "content": "<p>I don't think we want to keep those, they create many problems down the road. We still can't write <code>∀ 0 &lt; ε</code>, but <code>∀ε (h : 0 &lt; ε), ...</code> is not so bad.</p>",
        "id": 177562448,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570483520
    },
    {
        "content": "<p>I always felt that <code>∀ 0 &lt; ε</code> was somehow not \"correct\" -- I would always parse it as \"for all zero,...\".</p>",
        "id": 177567604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570487726
    },
    {
        "content": "<p>I have no strong opinions either way.</p>",
        "id": 177571461,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570491602
    },
    {
        "content": "<p>The problem with <code>∀ 0 &lt; ε</code> is: what happens if, instead of <code>0</code> we want to use <code>x</code>? In <code>∀ x &lt; ε</code> which one is the bound variable and which one is the free variable? Whichever choice we make, there are people who will assume the opposite</p>",
        "id": 177572156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570492366
    },
    {
        "content": "<p>I just read somewhere else:</p>\n<blockquote>\n<p>Nonsensical abbreviations like <code>∃0 &lt;i&lt;n</code> [...] are not justifiable by the space that they save.</p>\n</blockquote>",
        "id": 177575375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570496507
    }
]