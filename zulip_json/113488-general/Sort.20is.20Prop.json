[
    {
        "content": "<p>Just as <code>Type</code> refers to <code>Type 0</code>, <code>Sort</code> refers to <code>Sort 0</code>, aka <code>Prop</code>. Given that we already have this <code>Prop</code> spelling, wouldn't it be better if <code>Sort</code> meant the same as <code>Sort*</code>?</p>",
        "id": 286709174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655644328
    },
    {
        "content": "<p>It's certainly occasionally tripped up people in the past</p>",
        "id": 286712948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655649388
    },
    {
        "content": "<p>Or just have it be illegal without the * or universe</p>",
        "id": 286712987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655649478
    },
    {
        "content": "<p>I think this suggestion would confuse me more! <br>\nI would suggest simply disallowing <code>Sort</code></p>",
        "id": 286712990,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655649480
    },
    {
        "content": "<p>I presume Adam means Yael's suggestion. I think removing <code>Sort</code> is a great idea. I bet you never see bare sort in the docs either, except for that one line when they explain that it means Prop.</p>",
        "id": 286713204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655649723
    },
    {
        "content": "<p>Fun fact: <code>Prop</code> <a href=\"https://github.com/leanprover-community/lean/blob/bfce34363b0efe86e93e3fe75de76ab3740c772d/library/init/core.lean#L10\">is a notation</a> not a definition and therefore doesn't show up in the docs.</p>",
        "id": 286713370,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655649887
    },
    {
        "content": "<p>I think this is where unadorned <code>Sort</code> gets parsed: <a href=\"https://github.com/leanprover-community/lean/blob/bfce34363b0efe86e93e3fe75de76ab3740c772d/src/frontends/lean/builtin_exprs.cpp#L101\">https://github.com/leanprover-community/lean/blob/bfce34363b0efe86e93e3fe75de76ab3740c772d/src/frontends/lean/builtin_exprs.cpp#L101</a></p>",
        "id": 286713689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655650220
    },
    {
        "content": "<p>But reading the code, I'm not exactly sure how <code>Sort u</code> works. It only seems to have <code>Sort.{u}</code> here.</p>",
        "id": 286713900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655650446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Sort.20is.20Prop/near/286713204\">said</a>:</p>\n<blockquote>\n<p>I presume Adam means Yael's suggestion. I think removing <code>Sort</code> is a great idea. I bet you never see bare sort in the docs either, except for that one line when they explain that it means Prop.</p>\n</blockquote>\n<p>Yes, that's what I meant... Eric's comment came in as I was pressing enter ;)</p>",
        "id": 286715107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655651950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Sort.20is.20Prop/near/286713204\">said</a>:</p>\n<blockquote>\n<p>I bet you never see bare sort in the docs either, except for that one line when they explain that it means Prop.</p>\n</blockquote>\n<p>A (case-sensitive) search of mathlib turns up 1083 instances of the string <code>Sort</code>, all of which are either <code>Sort*</code>, <code>Sort u</code> (for some expression <code>u</code>) or in comments.  I can't find a single use of unadorned <code>Sort</code> in mathlib code.</p>",
        "id": 286715514,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655652564
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/732\">lean#732</a>. It doesn't show up even once in the entire lean core library + test suite either</p>",
        "id": 286715765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655652904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> The way the parsing works is that when it reads <code>Sort</code> it creates a syntax like <code>sort_wo_universe(Sort 0)</code>, and then <a href=\"https://github.com/leanprover-community/lean/blob/bfce34363b0efe86e93e3fe75de76ab3740c772d/src/frontends/lean/parser.cpp#L2463-L2475\">later</a> if it sees a level parameter following this it will strip the <code>sort_wo_universe</code> annotation producing <code>Sort l</code>. (This way, <code>Sort 0 0</code> does not spuriously get accepted.) The fix implemented above does not try to catch this at parse time and instead refuses to elaborate <code>sort_wo_universe(Sort 0)</code> to <code>Prop</code></p>",
        "id": 286715932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655653118
    },
    {
        "content": "<p>Thanks Mario!</p>",
        "id": 286730452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655673303
    }
]