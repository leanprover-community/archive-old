[
    {
        "content": "<p>Sorry for a noob question, but is there any difference between the have and apply tactics when used on functions and propositions? (The first thought would be that its the same since they are both understood by Lean as types, but my intuition is telling me that maybe it is not exactly the case)?</p>",
        "id": 279051350,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650000704
    },
    {
        "content": "<p><code>have</code> and <code>apply</code> are actually fairly different, and they do not ever have the same behavior</p>",
        "id": 279052341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650002379
    },
    {
        "content": "<p><code>apply</code> changes the goal by applying a lemma and giving you subgoals for the hypotheses (\"backward reasoning\")</p>",
        "id": 279052435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650002423
    },
    {
        "content": "<p><code>have</code> adds a hypothesis to your context given a proof term (\"forward reasoning\")</p>",
        "id": 279052472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650002454
    },
    {
        "content": "<p>Rereading your question, perhaps I misread and you meant to compare functions to propositions when used in <code>have</code> and <code>apply</code>. In this case, the answer is that there is no difference: you can use <code>apply</code> to apply a function and get subgoals for the arguments of the function, in just the same way as with lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.add</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : ℕ :=</span>\n<span class=\"c1\">-- let x : ℕ := 2.succ in 2.add x</span>\n</code></pre></div>",
        "id": 279052681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650002761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Functions.20and.20Propositions/near/279052681\">said</a>:</p>\n<blockquote>\n<p>Rereading your question, perhaps I misread and you meant to compare functions to propositions when used in <code>have</code> and <code>apply</code>. In this case, the answer is that there is no difference: you can use <code>apply</code> to apply a function and get subgoals for the arguments of the function, in just the same way as with lemmas:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.add</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : ℕ :=</span>\n<span class=\"c1\">-- let x : ℕ := 2.succ in 2.add x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Another noob question -&gt; if A-&gt;B is a function, is A-&gt;B-&gt;C a function as well?</p>",
        "id": 279059882,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650011050
    },
    {
        "content": "<p>I'd say that both A-&gt;B and A-&gt;B-&gt;C are types</p>",
        "id": 279060144,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650011285
    },
    {
        "content": "<p>If I may ask another dumb question -&gt; what is the mathematical difference between functions and types?</p>",
        "id": 279060191,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650011360
    },
    {
        "content": "<p>What do you mean by \"mathematical difference\"?</p>",
        "id": 279060295,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650011462
    },
    {
        "content": "<p>Functions are an example of a type</p>",
        "id": 279060313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650011473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Functions.20and.20Propositions/near/279060295\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"mathematical difference\"?</p>\n</blockquote>\n<p>are these same objects?</p>",
        "id": 279060336,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650011493
    },
    {
        "content": "<p>Ah, no. You can have many functions from <code>Nat</code> to <code>Nat</code>, but <code>Nat -&gt; Nat</code> is <em>one</em> type</p>",
        "id": 279060500,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650011634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Functions.20and.20Propositions/near/279060500\">said</a>:</p>\n<blockquote>\n<p>Ah, no. You can have many functions from <code>Nat</code> to <code>Nat</code>, but <code>Nat -&gt; Nat</code> is <em>one</em> type</p>\n</blockquote>\n<p>what do you mean by \"one type\"?</p>",
        "id": 279060572,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650011692
    },
    {
        "content": "<p>I mean that all functions from nat to Nat have that same type</p>",
        "id": 279060603,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650011722
    },
    {
        "content": "<p>What's your background? Computer science, mathematics or some other?</p>",
        "id": 279060925,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650011970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Functions.20and.20Propositions/near/279060925\">said</a>:</p>\n<blockquote>\n<p>What's your background? Computer science, mathematics or some other?</p>\n</blockquote>\n<p>Theoretical Economics, Game Theory</p>",
        "id": 279072162,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650022336
    },
    {
        "content": "<p>A type is what a mathematician calls a set. A term is what they call an element. You can look at the set of all functions from X to Y and that's a type in Lean. Or you can look at one function from X to Y and that's a term</p>",
        "id": 279080346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650029583
    },
    {
        "content": "<p>Related to what Kevin is saying, I think this might be part of the confusion: <code>ℕ → ℕ</code> is the <em>type</em> of (all) functions from ℕ to itself. A <em>term</em> <code>f</code> of this type (denoted <code>f : ℕ → ℕ</code>) is a specific function from ℕ to itself.</p>",
        "id": 279084419,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650032589
    },
    {
        "content": "<p>Yeah, <code>X -&gt; Y</code> is what I'd call Hom(X,Y)</p>",
        "id": 279084914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650032899
    },
    {
        "content": "<p>thank you, everybody, I'm looking forward to asking more dumb questions, but hopefully each time a bit more meaningful than the last one.</p>",
        "id": 279127188,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650059257
    },
    {
        "content": "<p>Why does the \"cc\" tactic work on \"and\" logical operations (and many others) but not for \"OR\"?</p>",
        "id": 279250265,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650245233
    },
    {
        "content": "<p>cc is for congruence closure, which is to say it proves that some number of equalities implies another equality. It can do some basic preprocessing of the hypotheses which includes breaking up ANDs in the hypotheses and conclusion, but it is not a generic propositional or SMT solver and you should generally use other tactics to perform this kind of preprocessing</p>",
        "id": 279260642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650260794
    }
]