[
    {
        "content": "<p>I have to admit that I don't understand the type class search in Lean 3.  (If there is a description somewhere, please point me to it.)  In particular, given an instance like <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ring.html#topological_ring.to_topological_add_group\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ring.html#topological_ring.to_topological_add_group\"><code>topological_ring.to_topological_add_group</code></a>, will Lean enumerate all possible instances of <code>[ring α]</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">topological_ring</span><span class=\"bp\">.</span><span class=\"n\">to_topological_add_group</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">topological_add_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 189617444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583258349
    },
    {
        "content": "<p>Context: I'm just looking at a type-class trace where Lean produces such wonderful instances of <code>ring ℝ</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">ℝ</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">ℝ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">ℝ</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_ordered_comm_ring</span> <span class=\"n\">ℝ</span>\n                 <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"o\">))))</span>\n</pre></div>",
        "id": 189617475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583258382
    },
    {
        "content": "<p>Yes this is really how it works</p>",
        "id": 189617555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583258409
    },
    {
        "content": "<p>Is there some standard workaround?  Should it be <code>{ring ℝ}</code> instead of <code>[ring ℝ]</code>?</p>",
        "id": 189617756,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583258551
    },
    {
        "content": "<p>On the basis that it will be determined as the parameter of the <code>topological_ring</code> instance? Maybe?</p>",
        "id": 189617932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583258703
    },
    {
        "content": "<p><code>attribute [instance, priority 1000] real.ring</code> ?</p>",
        "id": 189617998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583258753
    },
    {
        "content": "<p><code>real.ring</code> is already an instance with the default priority 1000.</p>",
        "id": 189618234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583258912
    },
    {
        "content": "<p>2000?</p>",
        "id": 189618259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583258923
    },
    {
        "content": "<p>The problem is not that Lean doesn't find the <code>real.ring</code> instances.  In fact, that's the one it tries first.  The problem is that Lean then tries <em>all</em> other ring instances, of which there are unfortunately very many.</p>",
        "id": 189618352,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583258998
    },
    {
        "content": "<p><span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> ?</p>",
        "id": 189618443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583259037
    },
    {
        "content": "<p>It shouldn't do that unless a later failure makes it backtrack</p>",
        "id": 189618453,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583259042
    },
    {
        "content": "<p>Yes, of course it does backtrack.  This problem occurs when showing that the reals are a topological additive group.  We already know that the reals are a uniform additive group, but we haven't yet shown that they are a uniform ring.  Now there is an instance that every topological ring is a topological additive group, which Lean tries first, and then it gets stuck enumerating all ring structures on the reals (none of which is known to be a topological ring yet...).</p>",
        "id": 189618656,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583259179
    },
    {
        "content": "<p>These \"wrong way\" instances are still insane to me</p>",
        "id": 189618722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583259223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189618352\" title=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189618352\">said</a>:</p>\n<blockquote>\n<p>The problem is not that Lean doesn't find the <code>real.ring</code> instances.  In fact, that's the one it tries first.  The problem is that Lean then tries <em>all</em> other ring instances, of which there are unfortunately very many.</p>\n</blockquote>\n<p>The other example you gave is defeq to <code>real.ring</code> of course -- but the system isn't smart enough to spot this? I thought the rule was supposed to be that you were only supposed to be able to find one instance anyway.</p>",
        "id": 189618799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583259248
    },
    {
        "content": "<blockquote>\n<p>On the basis that it will be determined as the parameter of the topological_ring instance? Maybe?</p>\n</blockquote>\n<p>Exactly, these should be filled in via unification and not via type class search.  Looking back through the PRs, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> has already fixed a lot of such instances: <a href=\"https://github.com/leanprover-community/mathlib/pull/1525\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1525\">https://github.com/leanprover-community/mathlib/pull/1525</a>   We should probably write a linter for this.</p>",
        "id": 189619389,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583259636
    },
    {
        "content": "<p>Can the linter also output a <code>sed</code> script that will fix the source code for us?</p>",
        "id": 189619547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583259729
    },
    {
        "content": "<p>I don't think it's easy to create a sed script.  Maybe I'm bad at lean, but this abomination is the only thing I could get working: <a href=\"https://github.com/leanprover-community/mathlib/pull/2064/commits/88a084fbdc6deeff9cb498ea454ee5735ccc89c2\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/2064/commits/88a084fbdc6deeff9cb498ea454ee5735ccc89c2\">https://github.com/leanprover-community/mathlib/pull/2064/commits/88a084fbdc6deeff9cb498ea454ee5735ccc89c2</a></p>",
        "id": 189619784,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583259886
    },
    {
        "content": "<p>Is the point that this compiles much faster?</p>",
        "id": 189620885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583260572
    },
    {
        "content": "<p>In this case the type-class search did not terminate within a few minutes.  I guess it should terminate eventually, since we only have a finite number of ring instances for the reals.</p>",
        "id": 189621539,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583261003
    },
    {
        "content": "<p>This occurs a lot in the library, see also issue <a href=\"https://github.com/leanprover-community/mathlib/issues/1561\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1561\">#1561</a>. I think we should indeed try to make all of these use curly braces. There might potentially be downsides to this, but probably very few. <br>\nThis problem also occurs with automatically generated instances, like <code>module.to_semimodule</code>. Ideally the elaboration procedure would solve the type-class problems in the reverse order in cases like these.</p>",
        "id": 189624512,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583263052
    },
    {
        "content": "<p>I think this would be helped a bit if <code>topological_ring</code> extended <code>ring</code> and <code>topological_space</code></p>",
        "id": 189631801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583267910
    },
    {
        "content": "<p>That way it would not have to search every ring structure for every topological ring structure, it could do that in one go</p>",
        "id": 189631842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583267946
    },
    {
        "content": "<p>But that comes with its own set of complications, right?</p>",
        "id": 189631844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583267948
    },
    {
        "content": "<p>That's the standard approach we've been using for the typeclass hierarchy everywhere else</p>",
        "id": 189631871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583267972
    },
    {
        "content": "<p>See e.g., the recent commit that <code>mv_polynomial</code> over an integral domain is an integral domain.</p>",
        "id": 189631885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583267980
    },
    {
        "content": "<p>that sounds fine to me...?</p>",
        "id": 189631905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268002
    },
    {
        "content": "<p>It is already a <code>comm_ring</code>, and now you need to inductively build an instance of <code>integral_domain</code>, but the data should be defeq to the existing <code>comm_ring</code> instance.</p>",
        "id": 189631956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268020
    },
    {
        "content": "<p>So you have to jump through a bunch of hoops, instead of focusing on the core of the mathematical argument.</p>",
        "id": 189631982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268043
    },
    {
        "content": "<p>Isn't this just the constructor?</p>",
        "id": 189632004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268060
    },
    {
        "content": "<p>of <code>integral_domain</code></p>",
        "id": 189632011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268070
    },
    {
        "content": "<p>you use <code>..foo.comm_ring</code> and you get all the defeqs</p>",
        "id": 189632031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268092
    },
    {
        "content": "<p>The code became really slow in certain parts.</p>",
        "id": 189632117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268142
    },
    {
        "content": "<p>If you can golf it and speed it up, I would love to learn how.</p>",
        "id": 189632127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268156
    },
    {
        "content": "<p>My gut feeling says that lots of mixing becomes easier if we have a strict separation between data and properties in our type classes.</p>",
        "id": 189632173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268189
    },
    {
        "content": "<p>Otoh, it makes tc search more painful, which is why you suggested bundling upstairs. Also, my suggestion boosts the verbosity of code. (Which I don't like myself either...)</p>",
        "id": 189632231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583268239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189632173\" title=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189632173\">said</a>:</p>\n<blockquote>\n<p>My gut feeling says that lots of mixing becomes easier if we have a strict separation between data and properties in our type classes.</p>\n</blockquote>\n<p>This is not like <code>topological_space</code> vs <code>t2_space</code> we're talking about here; a <code>topological_ring</code> is data (a topology, a ring, and some coherence, just like all our other algebraic classes)</p>",
        "id": 189633108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268860
    },
    {
        "content": "<p>I still want to stick to the rule \"one type = one typeclass\" to the maximum extent possible</p>",
        "id": 189633191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268955
    },
    {
        "content": "<p>Your argument would also extend to the case of <code>ring</code> = <code>add_group</code> + <code>monoid</code> + properties</p>",
        "id": 189633301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583269035
    },
    {
        "content": "<p>I think the idea up to now has been: one big chain of typeclasses for topology (with <code>topological_space</code>, <code>uniform_space</code>, <code>metric_space</code>, <code>normed_space</code>), one big chain of typeclasses for algebra (with <code>monoid</code>, <code>group</code>, <code>ring</code>, <code>integral_domain</code>, <code>field</code>). If you start mixing the two, you will need something like 4 x 5 typeclasses (and in fact much more since I have omitted a big part of the hierarchy), so to keep things reasonable you will not extend things but rather add the properties you need as new typeclasses. In this way, if you have defined a topological ring and you want to talk about a normed integral domain, you don't need to define a new typeclass, only to say <code>[normed_space alpha] [integral_domain alpha] [topological_ring alpha]</code>.</p>",
        "id": 189637402,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583271373
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> was talking about something like \"make all algebraic classes take <code>has_add</code>, <code>has_zero</code> and other data as arguments. Am I right?</p>",
        "id": 189639794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583273163
    },
    {
        "content": "<p>Then every type will have only one instance of <code>has_add</code>, and <code>monoid</code> etc live in <code>Prop</code></p>",
        "id": 189639951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583273293
    },
    {
        "content": "<p>I don't know if this will be easier or harder for lean</p>",
        "id": 189639984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583273321
    },
    {
        "content": "<p>Note that we have things like <code>[nondiscrete_normed_field alpha]</code>, so we are not very coherent. I agree that for things that we use often it is good to have a dedicated typeclass.</p>",
        "id": 189641067,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583274208
    },
    {
        "content": "<p>But you need 4 x 5 typeclasses anyway, because for each pair in those examples the coherence conditions are different. A topological group has continuous subtraction, a uniform ring has locally uniformly continuous multiplication, and so on. We can still fill the matrix by need so that it doesn't get out of hand, but for the structures that matter I think there should actually be one single class <code>topological_group</code> bundling all operations and coherence (and similarly for the other elements of that matrix)</p>",
        "id": 189650716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583282981
    },
    {
        "content": "<p>If you just need the conjunction of properties, i.e. a topological space that is a ring but without coherence (why?), you don't need any added typeclasses, you can just use <code>[topological_space A] [ring A]</code>. (This usually doesn't work because of diamonds but here they don't share any operations so it's fine.)</p>",
        "id": 189650924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583283169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No, the example that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> gave is a good one: a topological integral domain is a topological ring that is also an integral domain. In my hypothetical setup that would mean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">ring_data</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"c1\">-- this gives you `has_zero`, `has_one`, `has_add`, `has_neg` and `has_mul`</span>\n<span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"c1\">-- this gives you the compatibility properties: mul, add, and neg are continuous</span>\n<span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"c1\">-- this tells you that mul is commutative, and there are no zero divisors</span>\n</pre></div>",
        "id": 189663210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583301291
    },
    {
        "content": "<p>There would only be a few \"mixing\" classes, like <code>topological_group</code>, <code>topological_ring</code> etc... but only very few.</p>",
        "id": 189663233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583301334
    },
    {
        "content": "<p>Well let's at least have those be classes then</p>",
        "id": 189663235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583301350
    },
    {
        "content": "<p>It still seems preferable from a readability POV to have <code>topological_integral_domain</code></p>",
        "id": 189663279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583301419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> One downside is that we can not write instances like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_integral_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>because we have no way of expressing that the ring data from the two instances in the assumptions are the same.</p>",
        "id": 189665032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583303779
    },
    {
        "content": "<p>Which means that we can use the type class system to \"prove\" obvious things for us.</p>",
        "id": 189665041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583303802
    },
    {
        "content": "<p>On the other hand, if we separate data and props, then we can do this.</p>",
        "id": 189665042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583303821
    },
    {
        "content": "<p>We already have that problem elsewhere in the hierarchy. The solution is to just create instances of <code>topological_integral_domain</code> whenever you have the first two</p>",
        "id": 189665051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583303846
    },
    {
        "content": "<p>So... just because we have the problem elsewhere, you advocate to also have it here?</p>",
        "id": 189665102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583303907
    },
    {
        "content": "<p>I would rather have some way to tell lean: hey, if I write <code>[comm_ring R]</code> you should understand that I really am abbreviating <code>[ring_data R] [is_comm_ring R]</code>.</p>",
        "id": 189665209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583304060
    },
    {
        "content": "<p>That would still give you the readable code, but also the flexibility of separating data and props</p>",
        "id": 189665229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583304108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189624512\" title=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189624512\">said</a>:</p>\n<blockquote>\n<p>Ideally the elaboration procedure would solve the type-class problems in the reverse order in cases like these.</p>\n</blockquote>\n<p>It does so by default in Lean 4.</p>",
        "id": 189670541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583310766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189624512\" title=\"#narrow/stream/113488-general/topic/I.20don't.20understand.20type.20class.20search.2E/near/189624512\">said</a>:</p>\n<blockquote>\n<p>Ideally the elaboration procedure would solve the type-class problems in the reverse order in cases like these.</p>\n</blockquote>\n<p>I don't understand how processing the arguments in reverse orders solves the underlying problem.  In the original example, won't the type class instance search then not just enumerate all instances of <code>topological_ring</code> (instead of <code>ring</code>).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">topological_ring</span><span class=\"bp\">.</span><span class=\"n\">to_topological_add_group</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">topological_add_group</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>Oh, I see,  it will still enumerate all of them, but in this special case it can then always find instances for <code>topological_space</code> and <code>ring</code> as well.  Hence it won't enumerate all <code>ring</code> instances.  However if there was a <code>[separable_space α]</code> at the beginning (and the current space happens not to be separable), then switching the order doesn't solve anything and we still end up enumerating all <code>topological_ring </code> and <code>ring</code> and <code>topological_space</code> instances.  That is, the following instance would still cause cubic runtime in type class instance search:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">topological_ring</span><span class=\"bp\">.</span><span class=\"n\">to_topological_add_group&#39;</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">topological_add_group</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 189673769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583313877
    },
    {
        "content": "<p>Sure, it doesn't solve everything. It's just the better default whenever there are dependencies.</p>",
        "id": 189673869,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583313997
    },
    {
        "content": "<p>Well, fair enough. At least it's an improvement.</p>",
        "id": 189674036,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583314168
    },
    {
        "content": "<p>This algebra typeclass system might go on \"forever\" -- we have Huber rings which are topological rings + ..., and then perfectoid rings which are Huber rings + ... . This is what actual mathematics looks like, and it would be good if we could do actual mathematics in Lean 4. I'm optimistic that we can but I do find all this stuff scary.</p>",
        "id": 189680756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583320287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> has already told me he is not too happy about this approach but I don't see any better way in Lean 3:<br>\n<a href=\"https://github.com/leanprover-community/lean/pull/135\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/135\">https://github.com/leanprover-community/lean/pull/135</a></p>",
        "id": 189694060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583331273
    }
]