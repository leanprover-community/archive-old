[
    {
        "content": "<p>I've finally completed a proof that <code>finset \\N</code> with the Jaccard distance <a href=\"https://en.wikipedia.org/wiki/Jaccard_index\">https://en.wikipedia.org/wiki/Jaccard_index</a> is indeed a <code>metric_space</code>.<br>\nI actually proved a more general result from my own research (perhaps as a result of my old-fashioned attitude that all work done has to be related to new research papers <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> ).</p>\n<p>Usually Jaccard distance would be defined by cases: there is a certain formula that works in all cases except the distance between the empty set and itself. However, since Lean says 0/0=0 <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>, I was able to avoid that case distinction and work within a \"group with zero\". </p>\n<p>I know there is a whole process for getting code ready for mathlib, but is there anything particular I should be aware of --- like is there anything in mathlib that is at all similar to Jaccard distance?</p>",
        "id": 219670126,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607725566
    },
    {
        "content": "<p>The code is 900 lines right now. Surely it could be reduced significantly by doing less reinventing of the wheel.</p>",
        "id": 219670924,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607726176
    },
    {
        "content": "<p>Thanks are due to <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, <span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span>, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  for significant help on this project.</p>",
        "id": 219671465,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607726595
    },
    {
        "content": "<p>I jettisoned the idea that all research work had to be related to new research papers and now I just work with the principle that all research work has to be fun.  However I am in an extremely privileged position. Have you ever heard of groups with zero before seeing them in mathlib? They are something which came out of the perfectoid project and I always credit Johan Commelin with the abstraction but I would be interested to know if there was more history. Well done on the project, stuff like this is a great way to learn Lean. I could imagine that something like this could end up in mathlib although it's hard work getting code up to the standard the maintainers require, it's not something which can be taken lightly, as I discovered the hard way</p>",
        "id": 219675289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607729913
    },
    {
        "content": "<blockquote>\n<p>Have you ever heard of groups with zero before seeing them in mathlib?</p>\n</blockquote>\n<p>I probably wouldn't have given this passage a second thought if I hadn't heard about Johan's work here, but Emil Artin defines them in the first chapter of Geometric Algebra (published 1957): <a href=\"/user_uploads/3121/USHztET9rn8izx3MDxrjG8OV/Screen-Shot-2020-12-11-at-7.07.53-PM.png\">Screen-Shot-2020-12-11-at-7.07.53-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/USHztET9rn8izx3MDxrjG8OV/Screen-Shot-2020-12-11-at-7.07.53-PM.png\" title=\"Screen-Shot-2020-12-11-at-7.07.53-PM.png\"><img src=\"/user_uploads/3121/USHztET9rn8izx3MDxrjG8OV/Screen-Shot-2020-12-11-at-7.07.53-PM.png\"></a></div>",
        "id": 219677419,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607731825
    },
    {
        "content": "<p>Back when Johan was PRing this stuff to mathlib, I also posted <a href=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191725305\">some links</a> to some papers by Lorscheid on \"the field with one element\" where \"monoids with zero\" show up.</p>",
        "id": 219677720,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607732081
    },
    {
        "content": "<p>A hyperfield is a commutative multiplicative group with zero together with blah blah blah</p>",
        "id": 219677756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607732127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes even the fact that the mathlib instructions say that \"tabs are 2 spaces\" makes me question whether that's worth it. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 219677862,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607732215
    },
    {
        "content": "<p>I'm curious to see the code, to evaluate how hard I'd think it'd be to get into mathlib...</p>",
        "id": 220481132,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608402197
    },
    {
        "content": "<p>...and also to evaluate how hard it'd be to extend it to general measure spaces, but I'm probably not familiar enough with Lean measure theory to make that evaluation.</p>",
        "id": 220481648,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608403131
    },
    {
        "content": "<p>Great <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I almost missed this reply but I can post it on github!</p>\n<p>I have no idea about measure theory in Lean but yes, we should be able to replace the counting measure on finite sets by something more general.</p>\n<p>Actually, for some entropy related application I'm interested in a version involving certain signed measures.</p>",
        "id": 220505258,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608444296
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/bjoernkjoshanssen/jaccard-nid\">https://github.com/bjoernkjoshanssen/jaccard-nid</a> <span aria-label=\"construction worker\" class=\"emoji emoji-1f477\" role=\"img\" title=\"construction worker\">:construction_worker:</span></p>",
        "id": 220506193,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608446305
    },
    {
        "content": "<p>So, any obvious things that should be done to it? <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Feel free to \"roast\" my code!</p>",
        "id": 220746897,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608680170
    },
    {
        "content": "<p>One thing to do is make the repo an actual lean project, as described on <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>",
        "id": 220748276,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681281
    },
    {
        "content": "<p>This will track the dependency of the exact version of mathlib you are using, and make it easier for others to do <code>leanproject get</code> to get a copy of your code running in vscode.</p>",
        "id": 220748318,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681327
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 220748489,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608681477
    },
    {
        "content": "<p>Whats the reasoning for using <code>ring2</code> it should be possible to replace all of them with <code>ring</code></p>",
        "id": 220748572,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681529
    },
    {
        "content": "<p>(ring2 is not used in mathlib outside of the file it is defined in, its fairly experimental)</p>",
        "id": 220748621,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681573
    },
    {
        "content": "<p>If you have multiple <code>let .. in</code> chained you can combine them like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Z</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">x_z</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">X</span><span class=\"bp\">\\</span><span class=\"n\">Z</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">z_x</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Z</span><span class=\"bp\">\\</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">y_z</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">\\</span><span class=\"n\">Z</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">z_y</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Z</span><span class=\"bp\">\\</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">x_y</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">X</span><span class=\"bp\">\\</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"n\">y_x</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">\\</span><span class=\"n\">X</span><span class=\"bp\">|</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>in place of line 212 of delta.lean</p>",
        "id": 220748840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681712
    },
    {
        "content": "<p>You should not need to do <code>from begin ...</code>, and <code>by begin</code> the words from and by can be removed there.</p>",
        "id": 220748969,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681794
    },
    {
        "content": "<p>Likewise, with <code>from by</code></p>",
        "id": 220749062,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608681883
    },
    {
        "content": "<p>Theorem <code>seventeen</code> takes ages to compile for me, probably because of all the invocations of finish and tidy, tidy can be replaced with the output of <code>tidy?</code> (which can then often be simplified)</p>",
        "id": 220749205,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608682020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">dist_comm</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">calc</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">delta_comm</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>is really just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">dist_comm</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">delta_comm</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 220749310,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608682086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/220748572\">said</a>:</p>\n<blockquote>\n<p>Whats the reasoning for using <code>ring2</code> it should be possible to replace all of them with <code>ring</code></p>\n</blockquote>\n<p>Thanks, it seems you're right. (Maybe I just thought <code>ring2</code> was \"the big guns\" and it was better to use that.)</p>",
        "id": 220749351,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608682128
    },
    {
        "content": "<p><code>ring_exp</code> is the big guns I guess, in that thats what I try if ring fails me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220749381,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608682174
    },
    {
        "content": "<p>If you turn on the profiler with <code>set_option profiler true</code> you can see which of the finishes / tidys are taking the most time.</p>",
        "id": 220749606,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608682382
    },
    {
        "content": "<p>So the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> works in place of tidy in all uses in seventeen, and reduces the time massively</p>",
        "id": 220749776,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608682557
    },
    {
        "content": "<p>I would have found a tactic called <code>ordered_ring</code> useful.</p>",
        "id": 220750445,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608683244
    },
    {
        "content": "<p>That's probably <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> ?</p>",
        "id": 220750530,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608683310
    },
    {
        "content": "<p>Or  its friend <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nlinarith\">tactic#nlinarith</a>, they work over linear ordered rings</p>",
        "id": 220750555,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608683350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/220748969\">said</a>:</p>\n<blockquote>\n<p>You should not need to do <code>from begin ...</code>, and <code>by begin</code> the words from and by can be removed there.</p>\n</blockquote>\n<p>Thanks. Also <code>from by</code> apparently is not needed, that always did sound strange...</p>",
        "id": 220751001,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608683868
    },
    {
        "content": "<p>Is there a running time with <code>set_option profiler true</code> that's considered \"acceptable\"?</p>",
        "id": 220751755,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608684712
    },
    {
        "content": "<p>that depends on what you are doing</p>",
        "id": 220751924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684892
    },
    {
        "content": "<p>for a proof that goes into mathlib I would try for under a second, but up to 5-10 seconds seems ok for a big proof</p>",
        "id": 220751951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684956
    },
    {
        "content": "<p>The -T50000 challenge uses a particular time bound at the command line to measure this instead of <code>profiler</code></p>",
        "id": 220752015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684992
    },
    {
        "content": "<p>For something like <code>tidy</code> that is intended to find a proof but not for archival I don't think there needs to be any bound besides your own patience</p>",
        "id": 220752049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608685038
    },
    {
        "content": "<p>So maybe there is a list of tactics that should not be used in mathlib code? Or is it just: \"whichever ones run slowly\"</p>",
        "id": 220752308,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608685276
    },
    {
        "content": "<p>I don't think there are any actual banned tactics, but <code>simp</code>, <code>omega</code>, <code>finish</code>, <code>tidy</code>, <code>linarith</code> are the usual suspects if you have a slow proof</p>",
        "id": 220752517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608685469
    },
    {
        "content": "<p>Tactics that emit messages, like <code>library_search</code>, <code>squeeze_simp</code> are effectively banned since mathlib files have to be silent when they compile.</p>",
        "id": 220752547,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608685534
    },
    {
        "content": "<p>I noticed that when I <code>#print</code> a theorem proved by a tactic like <code>tidy</code>, the proof printed can't just be cut and pasted into my code --- that gives some errors about failing to synthesize type class instances.</p>",
        "id": 220752886,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608685942
    },
    {
        "content": "<p>that's a general problem with pretty printing - it may potentially hide information that is necessary for faithful reproduction as lean source code</p>",
        "id": 220753627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608686885
    },
    {
        "content": "<p>You can mostly solve this using <code>pp.all</code> (although the result probably isn't something you actually want to put in a mathlib file), although there are some things that even <code>pp.all</code> can't roundtrip unfortunately</p>",
        "id": 220753645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608686934
    },
    {
        "content": "<p>You can wrap your tactic in <code>show_term { ... }</code> to see the term that the tactic constructs (see <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a>). In many cases the term is much too large and complex to be of any use though.</p>",
        "id": 220753807,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608687158
    },
    {
        "content": "<p><code>tidy?</code> will give you a more useful trace. Not the term it generates but the sequence of tactics it tried.</p>",
        "id": 220754452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608688061
    },
    {
        "content": "<p>You get the hang of the most common round trip failures and how to deal with them after a while, for example <code>\\u a</code> often needs to be changed to <code>(a : X)</code> and widgets can tell you X</p>",
        "id": 220783048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608725231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/220783048\">said</a>:</p>\n<blockquote>\n<p>You get the hang of the most common round trip failures and how to deal with them after a while, for example <code>\\u a</code> often needs to be changed to <code>(a : X)</code> and widgets can tell you X</p>\n</blockquote>\n<p>Thanks, but now I'm curious what a \"round trip failure\" is? Casting from N to Q and back to N? I see some mentions of \"round trip\" in this Zulip but they didn't really help.</p>",
        "id": 220841153,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608771944
    },
    {
        "content": "<p>In this case it's referring to Lean pretty-printing some expression, which we then try to get Lean to accept as input.</p>",
        "id": 220841260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608772118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/220752517\">said</a>:</p>\n<blockquote>\n<p>I don't think there are any actual banned tactics, but <code>simp</code>, <code>omega</code>, <code>finish</code>, <code>tidy</code>, <code>linarith</code> are the usual suspects if you have a slow proof</p>\n</blockquote>\n<p>Thanks. So <code>cc</code> is not included in this list?</p>",
        "id": 220952892,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608965515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> <code>cc</code> can occassionaly also be slow. But I think it's not a \"usual suspect\" because it's not used that much in mathlib...</p>",
        "id": 220953174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608966025
    },
    {
        "content": "<p>Maybe it can be used more often... but it just doesn't seem to be the case.</p>",
        "id": 220953180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608966038
    },
    {
        "content": "<p>Thanks. I'm noticing a difference, after getting rid of <code>finish</code> and <code>tidy</code> I can now use <code>set_option profiler true</code> on the whole file without server crashing problems.</p>",
        "id": 220954462,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608968966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/220748276\">said</a>:</p>\n<blockquote>\n<p>One thing to do is make the repo an actual lean project, as described on <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>\n</blockquote>\n<p>OK I think I have done that now, it's at <a href=\"https://github.com/bjoernkjoshanssen/jaccard\">https://github.com/bjoernkjoshanssen/jaccard</a> thanks again. Haven't tried to make it comply with the Style Guide.</p>",
        "id": 221194489,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1609311720
    },
    {
        "content": "<p>Now on arXiv with linked Lean \"Code &amp; Data\" <a href=\"https://arxiv.org/abs/2111.02498\">https://arxiv.org/abs/2111.02498</a></p>",
        "id": 261059815,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636581016
    },
    {
        "content": "<p>Congratulations!  Perhaps you could make a PR adding it to<br>\n<a href=\"https://leanprover-community.github.io/papers.html\">https://leanprover-community.github.io/papers.html</a><br>\nalso?</p>",
        "id": 261060056,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636581132
    },
    {
        "content": "<p>Is this our first (Lean) math paper formalized at time of publication?</p>",
        "id": 261060152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636581208
    },
    {
        "content": "<p>Perhaps not, I see there's also <a href=\"https://arxiv.org/abs/1907.07801\">https://arxiv.org/abs/1907.07801</a></p>",
        "id": 261060405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636581354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> thanks! Do I need access/permission to make a PR for that page?</p>",
        "id": 261063557,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636582828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> nope, you can go ahead and make a PR from a fork.</p>",
        "id": 261067654,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636584998
    },
    {
        "content": "<p>Only part of <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> 's paper with Nicola Bellumat was formalised in Lean IIRC</p>",
        "id": 261069636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636585853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> how does it work? I haven't done any PR <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 261071601,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636587111
    },
    {
        "content": "<p>You can try clicking the edit button on <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/lean.bib\">this page</a> and adding your paper to the bib file. (We can normalize the formatting afterwards.)</p>",
        "id": 261071816,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636587234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  thanks, I did it now... I think</p>",
        "id": 261073071,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636588051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/261073071\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span>  thanks, I did it now... I think</p>\n</blockquote>\n<p>I see that you made the changes in a fork, now you can make a PR to the main repository by visiting this link: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/compare/newsite...bjoernkjoshanssen:patch-1?expand=1\">https://github.com/leanprover-community/leanprover-community.github.io/compare/newsite...bjoernkjoshanssen:patch-1?expand=1</a></p>",
        "id": 261073854,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636588631
    },
    {
        "content": "<p>Ah, okay... should be done now</p>",
        "id": 261074865,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636589281
    },
    {
        "content": "<p>And is there another step to actually add the paper to <a href=\"https://leanprover-community.github.io/papers.html\">https://leanprover-community.github.io/papers.html</a> ?</p>",
        "id": 261075511,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636589722
    },
    {
        "content": "<p>It will take some time for the website build to finish, but the paper should show up soon afterwards.</p>",
        "id": 261075598,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636589773
    },
    {
        "content": "<p>It's automatized via the tags <code>formalization</code> and <code>lean3</code> in the BiBTeX entry I guess</p>",
        "id": 261075674,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636589858
    },
    {
        "content": "<p>I added those manually just now :)</p>",
        "id": 261075742,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636589887
    },
    {
        "content": "<p>Beat you to it :) So now there are two <code>tags</code> lines... should I try to make another change, or is it better to roll-back yours?</p>",
        "id": 261075976,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636590078
    },
    {
        "content": "<p>Yeah, whoops, I missed that you had already added tags to the BibTeX entry! I've removed the duplicate tags field so it should hopefully be fixed now.</p>",
        "id": 261076005,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636590114
    },
    {
        "content": "<p>yes, thanks @<strong>Bryan</strong></p>",
        "id": 261076088,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636590159
    },
    {
        "content": "<p>Maybe we should make a new category \"math papers with accompanying Lean formalization\"!</p>",
        "id": 261080058,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636593123
    },
    {
        "content": "<p>Or maybe we should wait til there are 3 examples rather than 2.</p>",
        "id": 261080081,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636593138
    },
    {
        "content": "<p>Really cool!<br>\nI recommend that you add some references to Lean-related papers, like <a href=\"https://link.springer.com/chapter/10.1007%2F978-3-319-21401-6_26\">https://link.springer.com/chapter/10.1007%2F978-3-319-21401-6_26</a> and <a href=\"https://dl.acm.org/doi/10.1145/3372885.3373824\">https://dl.acm.org/doi/10.1145/3372885.3373824</a>.</p>",
        "id": 261123129,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636631313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Jaccard.20distance/near/219675289\">said</a>:</p>\n<blockquote>\n<p>I jettisoned the idea that all research work had to be related to new research papers and now I just work with the principle that all research work has to be fun.  However I am in an extremely privileged position. Have you ever heard of groups with zero before seeing them in mathlib? They are something which came out of the perfectoid project and I always credit Johan Commelin with the abstraction but I would be interested to know if there was more history. Well done on the project, stuff like this is a great way to learn Lean. I could imagine that something like this could end up in mathlib although it's hard work getting code up to the standard the maintainers require, it's not something which can be taken lightly, as I discovered the hard way</p>\n</blockquote>\n<p>Alas now I've found an easier proof, so would want to revise the formalization rather thoroughly... so this advice of not trying to get it into mathlib standards right away was on-point <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 277208942,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1648677431
    }
]