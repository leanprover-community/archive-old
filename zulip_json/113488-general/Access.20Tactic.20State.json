[
    {
        "content": "<p>Is there any way to retrieve the tactic state during some point in a proof? I.E. as a string or some kind of object that would include the goals of the current tactic state.</p>",
        "id": 203465433,
        "sender_full_name": "Mohammed Eyad Kurd-Misto",
        "timestamp": 1594350643
    },
    {
        "content": "<p>Do you just want to trace it?  If so, just do <code>trace_state</code>.</p>",
        "id": 203466109,
        "sender_full_name": "Jason Rute",
        "timestamp": 1594351678
    },
    {
        "content": "<p>If you want a string or list of goals, there are a few approaches.</p>",
        "id": 203466188,
        "sender_full_name": "Jason Rute",
        "timestamp": 1594351798
    },
    {
        "content": "<p>Assuming you are familiar with <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#monadology\">\"monadology\"</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_state_string</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">state</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">,</span>\n  <span class=\"n\">fmt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pp</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">fmt</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">trace_state_string</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">state_string</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_state_string</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">state_string</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"c1\">-- built in trace state</span>\n<span class=\"n\">trace_state</span><span class=\"o\">,</span>\n<span class=\"c1\">-- our reimplementation</span>\n<span class=\"n\">trace_state_string</span><span class=\"o\">,</span>\n<span class=\"c1\">-- rest of proof</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203466728,
        "sender_full_name": "Jason Rute",
        "timestamp": 1594352641
    },
    {
        "content": "<p>More advanced things you can do are:</p>\n<ul>\n<li><a href=\"#narrow/stream/113488-general/topic/recreating.20.60trace_state.60\">get strings for individual goals or hypotheses</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/recreating.20.60trace_state.60\">get strings for the types of the hypotheses in the local context</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/Creating.20my.20own.20pp.2Eall.20.3D.20true.20string\">change how the pretty printer prints goals</a></li>\n</ul>\n<p>These all get a little trickier.</p>",
        "id": 203466878,
        "sender_full_name": "Jason Rute",
        "timestamp": 1594352868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112049\">@Mohammed Eyad Kurd-Misto</span> Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a>?</p>",
        "id": 203467181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594353290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I'm curious.  How robust is <code>extract_goal</code>?  I once tried to recreate something like that, but I found it often didn't round trip very well.  It was easy to create an example string which couldn't be entered into Lean.  (Of course, maybe my goals at the time were too ambitious.  It probably works well for a lot of use cases.)</p>",
        "id": 203467345,
        "sender_full_name": "Jason Rute",
        "timestamp": 1594353597
    },
    {
        "content": "<p>I think it has exactly the same set of problems as round-tripping <code>pp</code> does.</p>",
        "id": 203467705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594354193
    },
    {
        "content": "<p>In particular, I've not heard of any problems to do with setting up the arguments.</p>",
        "id": 203467757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594354216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> That looks perfect, thank you!</p>",
        "id": 203468617,
        "sender_full_name": "Mohammed Eyad Kurd-Misto",
        "timestamp": 1594355612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> extract_goal looks like it might do what I need but if not this seems helpful, thank you!</p>",
        "id": 203468688,
        "sender_full_name": "Mohammed Eyad Kurd-Misto",
        "timestamp": 1594355753
    }
]