[
    {
        "content": "<p>My experience is that I find fixing/maintaining long term mode proofs harder than fixing/maintaining long tactic proofs.<br>\nWhat are the benefits of writing long term mode proofs?</p>",
        "id": 198738866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590485526
    },
    {
        "content": "<p>I think it's mostly showing off.</p>",
        "id": 198738919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590485606
    },
    {
        "content": "<p>Also making sure no one can touch it ever, so it remains <em>your</em> proof.</p>",
        "id": 198739267,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590485900
    },
    {
        "content": "<p>Doesn't isabelle style map to term mode proofs (using lots of have/show)?</p>",
        "id": 198739328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485970
    },
    {
        "content": "<p>I guess that's the initial motivation for most of the keywords and such</p>",
        "id": 198739343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485987
    },
    {
        "content": "<p>If I understand correctly, Isabelle style map to using SledgeHammer in Lean, so it maps to nothing</p>",
        "id": 198739499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590486099
    },
    {
        "content": "<p>For me, the difference between term and tactic mode proofs that require diagnosis all comes down to the fact that I find it so much more convenient to read the intermediate tactic state in a tactic mode proof than in a term mode proof.</p>",
        "id": 198739517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590486114
    },
    {
        "content": "<p>Even if there are lots of \"literate\" <code>have</code>, <code>show</code>, and <code>assume</code>s.</p>",
        "id": 198739569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590486128
    },
    {
        "content": "<p>No, Isabelle style maps to structured tactic proof (you have a goal state that you can see all the time in your proof).</p>",
        "id": 198739581,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590486144
    },
    {
        "content": "<p>It sounds like all complaints boil down to the same thing: you can't see the tactic state in a term proof</p>",
        "id": 198739619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590486169
    },
    {
        "content": "<p>this is literally a feature that existed in lean 2</p>",
        "id": 198739629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590486177
    },
    {
        "content": "<p>there is no innate reason why term proofs can't show the context and expected type</p>",
        "id": 198739663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590486215
    },
    {
        "content": "<p>so I don't see it as a failing of term mode so much as a missing feature in lean 3</p>",
        "id": 198739730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590486249
    },
    {
        "content": "<p>You can open a PR to Lean3, but I'm not sure this will exist in Lean4</p>",
        "id": 198739751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590486267
    },
    {
        "content": "<p>How hard is it to add this feature (to Lean 3.x.c)?</p>",
        "id": 198740307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590486712
    },
    {
        "content": "<p>It depends on what you want.  If you want to have it show up as the goal, then I think the hardest part is figuring out what types to show.  That is, where do you want term-mode goals in <code>f (by exact g (by simp) b)</code>?</p>",
        "id": 198740434,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590486797
    },
    {
        "content": "<p>What was it like in Lean 2?</p>",
        "id": 198741377,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590487414
    },
    {
        "content": "<p>You could place your cursor over a parenthesis and it would tell you the type of the expression</p>",
        "id": 198741575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590487520
    },
    {
        "content": "<p>I think the most useful thing would be, if you mouse over a constant it shows the goal that you would get if you replaced the entire application with that constant at the head with <code>_</code></p>",
        "id": 198741855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590487697
    },
    {
        "content": "<p>so for <code>f (by exact g (by simp) b)</code> you could mouse over <code>f</code> and get the result type, <code>g</code> gives you the same as the <code>exact</code>, the open paren on <code>by simp</code> gives you the type that <code>simp</code> is solving, and <code>b</code> gives you the type of <code>b</code></p>",
        "id": 198741958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590487769
    },
    {
        "content": "<p>This would be useful even for tactic mode, since we still use a lot of short terms there.</p>",
        "id": 198742454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590488140
    },
    {
        "content": "<p>I don't think it ever displayed the context, did it?</p>",
        "id": 198743135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590488719
    },
    {
        "content": "<p>Parentheses always felt a bit arbitrary, Mario's suggestion sounds more sensible to me</p>",
        "id": 198743284,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590488819
    },
    {
        "content": "<p>This was back in the days when it was emacs mode and the context display was this janky console printing thing</p>",
        "id": 198743445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590488953
    },
    {
        "content": "<p>I think it showed the type in the mini-bar</p>",
        "id": 198743457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590488970
    },
    {
        "content": "<p>It would be nice if <code>have</code>, <code>let</code> etc. also qualified as \"constants\" here.</p>",
        "id": 198743762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590489192
    },
    {
        "content": "<p>I find that long tactics mode proofs can often be very hard to maintain, because they're not divided up, and you can't tell how to fix it, because you don't know what the tactic state was supposed to look like, and the thing that changed is not necessarily anywhere near the bit that breaks.</p>",
        "id": 198745324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590490322
    },
    {
        "content": "<p>This is more of a issue with <code>have</code>s versus no <code>have</code>s rather than term mode or tactic mode.</p>",
        "id": 198745369,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590490361
    },
    {
        "content": "<p>I think you should try to keep any proof below about 100 lines. Beyond that it should be broken up into lemmas, which are better in every way with respect to understandability, doc comments, having intermediate statements, and increasing build parallelism</p>",
        "id": 198745566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590490545
    },
    {
        "content": "<p>actually 100 is too generous. Even 50 is pretty big</p>",
        "id": 198745700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590490597
    },
    {
        "content": "<p>Looking at my most recent big proof in <a href=\"https://github.com/leanprover-community/mathlib/issues/2792\">#2792</a> , the longest proofs are 38, 59, and 83 lines, and the 83 line proof has two really obvious sub-lemmas that it could be broken into. There is also a 50 line definition but that is written with deliberately short lines for formatting reasons</p>",
        "id": 198746398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590491007
    },
    {
        "content": "<p>That's simply not how real maths work. Of course you can always use <code>extract_goal</code> to cut a proof into pieces, but you'll get meaningless lemmas.</p>",
        "id": 198747382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590491712
    },
    {
        "content": "<p>Of course, I'm talking about good lemmas here, not just chopping the proof in half</p>",
        "id": 198747996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492168
    },
    {
        "content": "<p>Of course this is how real maths works, humans have to chunk things up in order to understand them, and this happens all the time in paper proofs</p>",
        "id": 198748108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492256
    },
    {
        "content": "<p>But the inductive step of a tricky induction is also a reasonable place to make a lemma, even though it may not be the prettiest thing</p>",
        "id": 198748175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492340
    },
    {
        "content": "<p>I want to fight the notion that every top level theorem/lemma should be \"meaningful\". This is actively harmful in formalization</p>",
        "id": 198748342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492466
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/275\">lean#275</a></p>",
        "id": 198748394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590492487
    },
    {
        "content": "<p>This is a quick&amp;dirty implementation.  If you really want this, you need to live with unexpected side effects.</p>",
        "id": 198748426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590492514
    },
    {
        "content": "<p>What if you are in a term inside tactic mode?</p>",
        "id": 198748478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590492551
    },
    {
        "content": "<p>For instance in the stupid example <code>by exact some_term sub_term other_arg</code>?</p>",
        "id": 198748510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590492590
    },
    {
        "content": "<p>It's a bit quirky.  Between <code>by</code> and <code>exact</code> it will show you the goal of the tactic block.  On <code>some_term</code>, <code>sub_term</code>, <code>other_arg</code> it will show you the type of the subterm.<br>\nSo far as expected.  But it will also show the tactic block goal on the space between <code>some_term</code> and <code>sub_term</code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 198748873,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590492839
    },
    {
        "content": "<p>Isn't the type of <code>some_term</code> going to be the same thing as the <code>by exact</code>?</p>",
        "id": 198749417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493203
    },
    {
        "content": "<p>Ooh... will it show the full goal state, or only types?</p>",
        "id": 198749458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493229
    },
    {
        "content": "<p>Screenshot suggests full goal state</p>",
        "id": 198749513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493281
    },
    {
        "content": "<p>Yep, full goal state!</p>",
        "id": 198749520,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590493288
    },
    {
        "content": "<p>I think it's time for a new lean release! It's been like 3 days already!</p>",
        "id": 198749564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493321
    },
    {
        "content": "<p>I'm kind of waiting for <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> to finish dividing up the widget PR.  But depending on how long that's going to take, we could also make a release now.</p>",
        "id": 198749684,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590493411
    },
    {
        "content": "<p>Oh yes, let's have that widget thing!</p>",
        "id": 198749862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590493544
    },
    {
        "content": "<p>There are 12 new commits already...</p>",
        "id": 198749864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493545
    },
    {
        "content": "<p>Otoh... I guess there won't be much mathlib breakage... so that isn't a reason to release early</p>",
        "id": 198749928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590493575
    },
    {
        "content": "<p>Mmh, there is also one change that might reduce linting time by up to 50%.  So maybe it's better to test it soon.</p>",
        "id": 198750724,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590494134
    },
    {
        "content": "<p>By the way, in IntelliJ (and other JetBrains projects like PyCharm) if one selects a term/expression and presses cntr-cmd-P (on a mac, don't know the windows keys off hand) it shows the type of the term.  It is amazingly useful, especially in Scala (but even in Python).  I wonder if vs-code has support for something like this.</p>",
        "id": 198757182,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590497807
    },
    {
        "content": "<p>Maybe relevant: <a href=\"https://github.com/microsoft/vscode/issues/65890\">https://github.com/microsoft/vscode/issues/65890</a></p>",
        "id": 198757417,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590497903
    },
    {
        "content": "<p>(Python? what kind of type information does it give?)</p>",
        "id": 198757515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497951
    },
    {
        "content": "<p><a href=\"https://docs.python.org/3/library/typing.html\">Python has static types now!</a>  Well sort of.  Also, IntelliJ is pretty smart about guessing the type.  If your function only has one return and it returns a string, then it knows the type of the function output is a string, for example.</p>",
        "id": 198757881,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590498083
    },
    {
        "content": "<p>In VSCode if you hover over a variable it gives you the type (if it can figure it out/has type hints)</p>",
        "id": 198758054,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590498155
    },
    {
        "content": "<p>That is the problem.  In IntelliJ you can hover over a <em>selection</em>.  That is a big difference than a single variable.</p>",
        "id": 198758140,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590498190
    },
    {
        "content": "<p>The vscode side is easy.  The hard part is the Lean side, we don't really store enough information to interpret ranges as expressions.  At the moment we only store one position per expression (typically the \"start\").</p>",
        "id": 198758357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590498293
    },
    {
        "content": "<p>Yeah, I'm thinking for the future, like Lean 4.  But are you sure this exists in vs-code for any language?  The issue I linked above suggested that it maybe doesn't.</p>",
        "id": 198758478,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590498362
    },
    {
        "content": "<p>Yeah, I don't think any language extension does that so far.  But we're doing many things in Lean that other languages don't.</p>",
        "id": 198758595,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590498420
    }
]