[
    {
        "content": "<p>I am presently trying to solve the exercises of chapter 4 in {Theorem proving in Lean} using tactics.</p>\n<p>In the context</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>\n\n\n<p>the following </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">hr</span>\n</pre></div>\n\n\n<p>works as a charm, but I can't manage to prove the same example using tactics.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>fails miserably, with an “unknown identifier 'a'” error that I don't understand.<br>\nBy the way, “#check a” returns the expected “a : α”.</p>\n<p>What am I doing wrong ?</p>",
        "id": 180869148,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1573850048
    },
    {
        "content": "<p>Put <code>include a</code> before your example</p>",
        "id": 180869242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573850145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Let me try to explain: Lean looks at the type that you write down, and uses that to determine which variables it should include into the statement. And in fact, it doesn't only look at the type, but also at the term that follows it, if you are in term-mode.<br>\nIn tactic mode, it cannot do this (because, monad <em>mumble mumble</em>). Hence you need to help it a little bit.</p>",
        "id": 180869655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573850462
    },
    {
        "content": "<p>This is my amateur explanation of what is going on.</p>",
        "id": 180869669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573850472
    },
    {
        "content": "<p>Thanks ! <br>\nTo try to understand a bit of this wizardry, what is the difference of status between this term <code>a</code> (that needs to be included) and the other <code>variables</code> introductions ?</p>",
        "id": 180869839,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1573850607
    },
    {
        "content": "<p>The difference is that <code>a</code> doesn't appear in the statement.</p>",
        "id": 180869905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573850644
    },
    {
        "content": "<p>Having it appearing in the proof is sufficient if you give a proof term, but not in a tactic proof.</p>",
        "id": 180869943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573850671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Lean doesn't automatically include all the variables into all the statements. It tries to be smart, and in 99% of the cases, that's the right thing.<br>\nIn this way, you can put a group <code>G</code> in your <code>variables</code> together with <code>x y z : G</code>, and write down some lemma involving only <code>x</code> and <code>y</code>. Lean will figure out that it shouldn't include <code>z</code> in that statement. (If it didn't, then calling that lemma would require you to always supply a useless third argument.)</p>",
        "id": 180870239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573850906
    },
    {
        "content": "<p>By the way, you can also avoid this difficulty by using copy-paste instead of <code>variables</code>, writing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180870296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573850952
    },
    {
        "content": "<p>But at the moment that Lean is figuring out which variables to include, it can't look inside the tactic proof yet. Maybe this could be changed by making Lean smarter. But my understanding is that if you try that, you would break some computer science barrier of abstraction.</p>",
        "id": 180870309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573850968
    },
    {
        "content": "<p>I see it's the right behaviour to have. Thanks again.</p>",
        "id": 180870329,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1573850986
    },
    {
        "content": "<p>Seriously, overuse of variable can already make statements hard to read (exactly in the same way as in some traditional texts, where you need to remember that in such and such chapter, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span> will always denote a ring with finite global dimension). If a variable doesn't even appear in the statement it's very likely it will cause confusion.</p>",
        "id": 180870615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573851196
    },
    {
        "content": "<p>So <code>include</code> is pretty rarely used in big files.</p>",
        "id": 180870671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573851232
    },
    {
        "content": "<p>In maths it's the same. \"From now until the end of section 12, we assume that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">p&gt;2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>.\"</p>",
        "id": 180872618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573852404
    },
    {
        "content": "<p>My example was targeting a specific book with infamous standing notations.</p>",
        "id": 180873973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573853384
    },
    {
        "content": "<p>My example was targetting every number theory paper written about mod p modular forms in the 1990s</p>",
        "id": 180874910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573854098
    },
    {
        "content": "<p>The opening line \"Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> be an odd prime\" was a very common story at the beginning of a section back in those days.</p>",
        "id": 180875020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573854180
    },
    {
        "content": "<blockquote>\n<p>Maybe this could be changed by making Lean smarter. But my understanding is that if you try that, you would break some computer science barrier of abstraction.</p>\n</blockquote>\n<p>Basically, yes. The fundamental issue is that in a tactic script <code>begin foo, apply a end</code>, Lean has no idea whether <code>a</code> will be introduced by the tactic <code>foo</code> or will refer to an outside <code>a</code>.</p>",
        "id": 180904294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573895225
    },
    {
        "content": "<p>It could be fixed if the tactic state kept track of which variables are available in the section</p>",
        "id": 180904338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573895298
    },
    {
        "content": "<p>or if the tactic state appeared to have all variables in the section but they get trimmed down at the end</p>",
        "id": 180904352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573895352
    },
    {
        "content": "<blockquote>\n<p>or if the tactic state appeared to have all variables in the section but they get trimmed down at the end</p>\n</blockquote>\n<p>This sounds unpredictable. You could have a proof that doesn't depend on a variable <code>h</code>, and makes no reference to <code>h</code>, yet still breaks if <code>h</code> is changed.</p>",
        "id": 180904533,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573895697
    },
    {
        "content": "<p>This can't be fixed at all during tactic execution because of parallel processing. The type of a lemma has to be determined before tactics are invoked.</p>",
        "id": 180905367,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573897277
    },
    {
        "content": "<p>Alternatively, don't allow variable appearances in theorem proofs to count as includes, just use presence in defs and theorem statements since that's the main thread part</p>",
        "id": 180906209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573898905
    },
    {
        "content": "<p>I'm not even sure why it works in the first place</p>",
        "id": 180906222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573898944
    },
    {
        "content": "<blockquote>\n<p>I'm not even sure why it works in the first place</p>\n</blockquote>\n<p>Names outside of tactic arguments are resolved during parsing. This will actually change in Lean 4, so you should get your desired behavior.</p>",
        "id": 180906592,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573899641
    }
]