[
    {
        "content": "<p>I have been working on a category theory formalization in Lean 4 and I am trying to make it so that the opposite of the opposite of a category is definitionally equal to the original category (in Agda this idea <a href=\"https://arxiv.org/abs/2005.07059\">apparently works</a>). The reason for this, is that it seems pretty inconvenient to dualize theorems by replacing categories by their opposites if we don't have a definitional equality.</p>\n<p>In any case, the issue can be illustrated with the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The code is in Lean 4, but similar code should</span>\n<span class=\"c1\">-- behave the same way in Lean 3</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Tuple</span> <span class=\"n\">where</span>\n  <span class=\"n\">first</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">second</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tuple.flip</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"n\">second</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">flipflip</span> <span class=\"o\">:</span> <span class=\"n\">Tuple.flip</span> <span class=\"o\">(</span><span class=\"n\">Tuple.flip</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- Eta rule fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">second</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I would like <code>Tuple.flip (Tuple.flip x)</code> to be definitionally equal to <code>x</code>, but that seems to fail because Lean does not seem to have an eta rule for records. This seems to be precisely the issue I am running into with my opposite categories.</p>\n<p>I also tried to define <code>flip</code> by pattern matching, but I ran into a similar issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Tuple.flip'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- fails since passing the record constructor to the recursion</span>\n<span class=\"c1\">-- does not reduce to the identity</span>\n<span class=\"kd\">def</span> <span class=\"n\">flipflip'</span> <span class=\"o\">:</span> <span class=\"n\">Tuple.flip'</span> <span class=\"o\">(</span><span class=\"n\">Tuple.flip'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there some trick I am missing to make this work or am I better off giving up on this idea?</p>",
        "id": 246266048,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1626462669
    },
    {
        "content": "<p>I will just point out that currently in mathlib <code>opposite (opposite X)</code> is not defeq to <code>X</code>, even for things like rings, preorders, etc... We provide isomorphisms instead.<br>\nIf I recall correctly, the reason is that type class inference got mightily confused if we didn't put up a strong barrier.</p>",
        "id": 246266683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626463005
    },
    {
        "content": "<p>I guess that typeclass inference won't be an issue for me, since I am experimenting with bundled structures and unification hints, but it is still nice to know how things currently work in mathlib.</p>",
        "id": 246267861,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1626463665
    },
    {
        "content": "<p>I think you can't do this since Lean doesn't have eta for records/structures? The mathlib style is to not rely too much on def eqs. But even of you want to use def eqs here, you might be fine since any reasonable definition involving a category C will unfold to something only mentioning projections, and the double opposite doesn't do anything to these projections</p>",
        "id": 246270529,
        "sender_full_name": "David Wärn",
        "timestamp": 1626465211
    },
    {
        "content": "<p>Does Agda have eta for records/structures?</p>",
        "id": 246270714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626465303
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"402440\">@Adrian Marti</span> your link is not to a URL or an upload, so doesn't work for me.</p>",
        "id": 246270801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626465360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , you're wrong, <code>opposite (opposite X) = X</code> <em>is</em> true by <code>rfl</code></p>",
        "id": 246271496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465711
    },
    {
        "content": "<p>Because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite/src\">src#opposite</a> is a def not a structure with one field</p>",
        "id": 246271573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465736
    },
    {
        "content": "<p>Ooh, I thought we transitioned to a structure recently...</p>",
        "id": 246271609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626465754
    },
    {
        "content": "<p>Yep, Agda indeed has definitional η-conversion for records, which coincidentally came up in another recent thread: <a href=\"#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/246077975\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/246077975</a></p>",
        "id": 246271629,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1626465766
    },
    {
        "content": "<p>This only happened for <code>additive</code> and <code>multiplicative</code> maybe?</p>",
        "id": 246271632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626465769
    },
    {
        "content": "<p>Additive and multiplicative are the ones you're thinking of, but the transition didn't happen for the same reason</p>",
        "id": 246271670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465793
    },
    {
        "content": "<p>Hmm, I guess I missed some discussions then</p>",
        "id": 246271724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626465824
    },
    {
        "content": "<p>Polynomial _did_ make the transition, but that's because definitional roundtripping between finsupp and polynomial isn't nearly as important</p>",
        "id": 246271872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465883
    },
    {
        "content": "<p>I think @Gabriels Herculean PR to change additive / multiplicative is still open, but there was a Zulip thread where Mario and I expressed opposition</p>",
        "id": 246271940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465935
    },
    {
        "content": "<p>And of course it's now stale</p>",
        "id": 246271966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626465951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Making.20records.20definitionally.20equal/near/246270801\">said</a>:</p>\n<blockquote>\n<p>PS <span class=\"user-mention silent\" data-user-id=\"402440\">Adrian Marti</span> your link is not to a URL or an upload, so doesn't work for me.</p>\n</blockquote>\n<p>Fixed</p>",
        "id": 246272289,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1626466131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Making.20records.20definitionally.20equal/near/246271496\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> , you're wrong, <code>opposite (opposite X) = X</code> <em>is</em> true by <code>rfl</code></p>\n</blockquote>\n<p>I'm not sure what this is supposed to mean? <code>(opposite.op a).unop = a</code> is true by <code>rfl</code>, but <code>opposite.op</code> is a function that goes from a type <code>T</code> to <code>T\\op</code>, so <code>opposite.op (opposite.op a)</code> has type <code>T\\op\\op</code>...</p>",
        "id": 246285231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626472496
    },
    {
        "content": "<p>I guess this is what's meant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.opposite</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">opposite</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>this is absolute abuse though</p>",
        "id": 246286653,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626473436
    },
    {
        "content": "<p><code>local attribute [semireducible] opposite</code> <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 246286675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626473461
    },
    {
        "content": "<p>yeah strong do-not-try-this-at-home here</p>",
        "id": 246286713,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626473490
    },
    {
        "content": "<p>But without that attribute, does the proof break? Because I think that is what I had in mind...</p>",
        "id": 246301931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626493081
    },
    {
        "content": "<p>I couldn't make it work without it, no. I needed to <code>unfold</code></p>",
        "id": 246310103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626505906
    },
    {
        "content": "<p>I must have been in a section with that attribute set when I last saw opposite. I think the statement is still true without the attribute, but you have to use <code>rw</code> instead of <code>rfl</code></p>",
        "id": 246310930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626507172
    },
    {
        "content": "<p>Also <code>opposite X = X</code> is clearly evil and it's nice to pretend that only <code>opposite (opposite X) = X</code> is true!</p>",
        "id": 246310950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626507241
    }
]