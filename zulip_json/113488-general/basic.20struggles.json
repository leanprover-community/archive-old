[
    {
        "content": "<p>I find myself struggling with things that are extremely math-trivial. If I have a goal of the form <code>a = b</code>, how do I turn that into <code>a * c = b * c</code>? (Assume that <code>a b c : R</code> and <code>[comm_ring R]</code>.)</p>",
        "id": 131024386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533620726
    },
    {
        "content": "<p>Have you tried <code>mul_right_cancel_iff</code>?</p>",
        "id": 131024655,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533621192
    },
    {
        "content": "<p>Hmmm, I only need the easy implication, for which I don't need a cancellative instance.</p>",
        "id": 131024771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533621443
    },
    {
        "content": "<p>And in fact I don't have an instance of cancellative semiblabla... <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 131024779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533621474
    },
    {
        "content": "<p>Ok, I think I see the issue. If <code>R</code> was a multiplicative group, you'd have a <code>left_cancel_semigroup</code> for free. As it is, your statement is not true I think because rings don't have a multiplicative inverse for every non-zero element.</p>",
        "id": 131025662,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623107
    },
    {
        "content": "<p>If you had a field though ...</p>",
        "id": 131025717,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623178
    },
    {
        "content": "<p>Can you choose your <code>c</code> so that it has an inverse?</p>",
        "id": 131025720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623192
    },
    {
        "content": "<p>Hmmz, sorry, I've been brainfarting...</p>",
        "id": 131025721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623217
    },
    {
        "content": "<p>My <code>c</code> has an inverse</p>",
        "id": 131025729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623257
    },
    {
        "content": "<p>How rude! :)</p>",
        "id": 131025730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623257
    },
    {
        "content": "<p>I'll copy-paste my goal.</p>",
        "id": 131025770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">n</span> <span class=\"bp\">-</span>\n         <span class=\"n\">map₂</span> <span class=\"n\">witt_polynomial</span> <span class=\"n\">C</span>\n           <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))))</span> <span class=\"bp\">*</span>\n      <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">X</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 131025771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623310
    },
    {
        "content": "<p>So you see that there is this term <code>C (1 / _)</code>.</p>",
        "id": 131025773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623329
    },
    {
        "content": "<p>I would like to move it to the other side.</p>",
        "id": 131025775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623336
    },
    {
        "content": "<p>This goal has been misbehaving quite a lot, lately.</p>",
        "id": 131025784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623373
    },
    {
        "content": "<p>What is the statement that <code>C (1 / _)</code> has an inverse like?</p>\n<p>(it does look pretty hairy)</p>",
        "id": 131025850,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623491
    },
    {
        "content": "<p>Well <code>1 / _</code> has an inverse in <code>rat</code>. And <code>C</code> is a ring hom. So it maps inverses to inverses.</p>",
        "id": 131025960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623657
    },
    {
        "content": "<p>So in short, <code>C _</code> is the inverse <code>C (1 / _)</code> I assume. It is surprisingly hard to sneak in I realize. Any chance <code>C</code> has an inverse? Then you could transform your goal from <code>R</code> to <code>rat</code> just long enough to play with the inverse.</p>",
        "id": 131026067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623914
    },
    {
        "content": "<p>(That's probably a long shot: if you had that inverse of C, <code>R</code> would probably be a field)</p>",
        "id": 131026077,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533623951
    },
    {
        "content": "<p>No, <code>C</code> is the function <code>R \\to mv_polynomial Xs R</code> that takes a ring element to the constant polynomial.</p>",
        "id": 131026078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533623953
    },
    {
        "content": "<p>I'm starting to think your assumptions are not strong enough for what you're trying to do</p>",
        "id": 131026130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533624048
    },
    {
        "content": "<p>Ok, so <code>rat</code> is a field, therefore <code>p^(n+1)</code> has an inverse (it is nonzero). Now I apply <code>C</code> to <code>p^(n+1)</code> and I get a crazy element of some ring, and it will still have an inverse.</p>",
        "id": 131026132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624054
    },
    {
        "content": "<p>So I want to multiply both sides with <code>C (p^(n+1))</code>.</p>",
        "id": 131026138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624078
    },
    {
        "content": "<p>you are thinking backwards</p>",
        "id": 131026180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624142
    },
    {
        "content": "<p>What if you multiply by <code>C 1</code> on the right</p>",
        "id": 131026193,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533624164
    },
    {
        "content": "<p>you want to multiply some equation that will be your new goal by <code>C (1 / ↑p ^ (n + 1))</code></p>",
        "id": 131026194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624169
    },
    {
        "content": "<p>Right</p>",
        "id": 131026201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624198
    },
    {
        "content": "<p>So I use suffices?</p>",
        "id": 131026247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624264
    },
    {
        "content": "<p>... and then decompose it to <code>C (x * 1/x)</code> and then <code>C x * C (1/x)</code></p>",
        "id": 131026248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533624266
    },
    {
        "content": "<p>Here's a trick: <code>rw (_ : _ - _ = X n * C (p ^ (n + 1)))), {simp}</code></p>",
        "id": 131026254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624303
    },
    {
        "content": "<p>(maybe <code>simp</code> won't kill that goal, you may need to do some more careful rewrites, but it should still be relatively easy)</p>",
        "id": 131026262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624353
    },
    {
        "content": "<p>Whaaaa?</p>",
        "id": 131026263,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533624355
    },
    {
        "content": "<p>there should be a simp lemma <code>C(1/x) = 1/C x</code></p>",
        "id": 131026310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624435
    },
    {
        "content": "<p>then <code>simp</code> will kill the goal</p>",
        "id": 131026311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624448
    },
    {
        "content": "<p>Too bad:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_sub</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131026422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624693
    },
    {
        "content": "<p>It didn't figure out the base ring...</p>",
        "id": 131026426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533624712
    },
    {
        "content": "<p>You have to add a type ascription</p>",
        "id": 131026517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624872
    },
    {
        "content": "<p>or fill it in a bit more, <code>witt_polynomial n - _ = ...</code></p>",
        "id": 131026526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure if <code>1/C x</code> makes sense? There is no division in the polynomial ring, right?</p>",
        "id": 131027462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626511
    },
    {
        "content": "<p>Or maybe there is, in the sense of Euclidean domains... but that is not what we want here.</p>",
        "id": 131027506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626535
    },
    {
        "content": "<p>Oh, I see... <code>C x</code> is a unit of the ring</p>",
        "id": 131027510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626550
    },
    {
        "content": "<p>maybe this is why I thought <code>C_mul</code> was not a good simp lemma</p>",
        "id": 131027588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626663
    }
]