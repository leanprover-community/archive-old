[
    {
        "content": "<p>I would like to turn <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.restrict_scalars\">docs#submodule.restrict_scalars</a> into an order embedding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">restrict_scalars</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">submodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">V.carrier</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">V.zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">V.smul_of_tower_mem</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">V.add_mem</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set_like.ext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">set_like.ext_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">set_like.le_def</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>However, this breaks dot notation: if you write <code>(p : submodule R M).restrict_scalars S</code>, you get an error <code>invalid field notation, function 'submodule.restrict_scalars' does not have explicit argument with type (submodule ...)</code> because the elaborator doesn't turn <code>↪o</code> into <code>→</code> when elaborating dot notation. So I think I'll just add a new bundled version and <code>simp</code> it to <code>restrict_scalars</code> when it gets applied, or does someone want to help replacing all the dots?</p>",
        "id": 250470082,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629804002
    },
    {
        "content": "<p>Another argument against bundling: <code>restrict_scalars</code> is also a <code>monoid_with_zero_hom</code> (or at least it preserves some subset of those operations).</p>",
        "id": 250470681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629804331
    },
    {
        "content": "<p>I'll just go with the separate definition. Thanks for the rubber duck debugging.</p>",
        "id": 250470717,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629804363
    },
    {
        "content": "<p>Dot notation would work if you made <code>S</code> implicit, but that's also annoying</p>",
        "id": 250496626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629816779
    }
]