[
    {
        "content": "<p>Just curious: Do we know how <code>to_additive</code> interacts with proving lemmas in side tasks?<br>\nSince <code>to_additive</code> translates definiitons to definitions and lemmas to lemmas, it should be possible for it to translate the statement of a lemma on the main task while translating the proof on a side task (which will join on the task that is checking the original lemma when it tries to fetch the original proof). But it would be easy to implement <code>to_additive</code> in a way for which that doesn't happen, which would mean that the main task ends up joining on the checking the original proof, which wouldn't happen in the absence of <code>to_additive</code>.</p>",
        "id": 209378303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599567785
    },
    {
        "content": "<p>Maybe it doesn't really matter because the theorems to which we apply <code>to_additive</code> generally have trivial proofs.</p>",
        "id": 209378331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599567806
    },
    {
        "content": "<p>it does exactly what you fear</p>",
        "id": 209378667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599568036
    },
    {
        "content": "<p>it joins the proof on the main task</p>",
        "id": 209378695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599568049
    },
    {
        "content": "<p>you know, I'm apparently the sole author of <code>tactic.transform_decl</code> but I don't recognize any of the functions in it</p>",
        "id": 209378845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599568131
    }
]