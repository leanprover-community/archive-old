[
    {
        "content": "<p>I'm looking for a hashmap type with (for all practical purposes) constant time lookup (and of course the ability to add f(a) = b, preferably in constant time as well). Unfortunately the literature on hashmaps doesn't give me complexity times.</p>\n<p>Does anyone have a hashmap type they like to use?</p>",
        "id": 298601707,
        "sender_full_name": "Dean Young",
        "timestamp": 1663080519
    },
    {
        "content": "<p>For Lean 3, I'm not aware of any efficient hashmap implementation. Lean 4 has two variants of hashmaps in the standard library: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap#doc\">docs4#Std.HashMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.PersistentHashMap#doc\">docs4#Std.PersistentHashMap</a>. The first one is what one would usually call a hashmap and it has the usual amortised constant-time insert/lookup/delete.</p>",
        "id": 298607482,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663081911
    },
    {
        "content": "<p>thanks very much Jannis. I'm new here .... do you think you could direct me to the standard documentation for docs4 and lean4? Those links aren't working for me.</p>",
        "id": 298608358,
        "sender_full_name": "Dean Young",
        "timestamp": 1663082160
    },
    {
        "content": "<p>Curious -- if you click on these links, they should take you to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/HashMap.html#Std.HashMap\">this URL</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/PersistentHashMap.html#Std.PersistentHashMap\">this URL</a>. (This <code>docs4</code> stuff is a Zulip feature which allows us to write abbreviations for certain classes of links.)</p>",
        "id": 298608814,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663082317
    },
    {
        "content": "<p>oh wow those worked! Thanks Jannis you're the best.</p>",
        "id": 298608937,
        "sender_full_name": "Dean Young",
        "timestamp": 1663082368
    },
    {
        "content": "<p>Lean 3 also has a hashmap implementation, very similar to std.hashmap: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hash_map\">docs#hash_map</a></p>",
        "id": 298637884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663091916
    }
]