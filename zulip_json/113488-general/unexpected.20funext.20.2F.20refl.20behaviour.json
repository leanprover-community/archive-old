[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span> <span class=\"c1\">-- might help</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"c1\">-- phenomenon won&#39;t occur if you replace this with theorem T!</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"c1\">-- only pulls off X, possibly because of universe issues</span>\n  <span class=\"c1\">-- two failed attempts to pull off f now:</span>\n  <span class=\"c1\">-- funext, -- does nothing</span>\n  <span class=\"c1\">-- apply funext, -- fails to unify</span>\n  <span class=\"n\">refine</span> <span class=\"n\">funext</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- Type of X now Sort (imax ? ?) and a type mismatch error reported **but goal changes anyway**</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal now f = f</span>\n  <span class=\"c1\">-- refl, -- doesn&#39;t work! Fails to unify.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- does work</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124946494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475088
    },
    {
        "content": "<p>I am pleased to have confused tactic mode so much that <code>refl</code> won't work but <code>exact rfl</code> will.</p>",
        "id": 124946536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475123
    },
    {
        "content": "<p>I am not sure if my goal is true, as the sorts may or may not be in different universes initially. However the funext tactic seems to buy it, although after pulling off the X it gets confused and won't pull off the <code>f</code>.</p>",
        "id": 124946548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475171
    },
    {
        "content": "<p><code>apply f</code> won't do it but I seem to be able to explicitly do it with <code>refine funext _</code> although now Lean is in a funny state -- the refine tactic does appear to do something, but reports an error anyway.</p>",
        "id": 124946563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475221
    },
    {
        "content": "<p>replacing <code>example</code> with <code>theorem T</code> makes all the problems go away, which is to me very surprising behaviour.</p>",
        "id": 124946610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475265
    },
    {
        "content": "<p>This Lean 3 is all broken. Let's have Lean 4.</p>",
        "id": 124946682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475402
    },
    {
        "content": "<p>(and hope Kevin stops trying to break everything)</p>",
        "id": 124946695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475421
    },
    {
        "content": "<p>Isn't it just because your X's are in different universes. And then if you put them in the same universe, it fails because the funext tactic gets rid of both lambdas.</p>",
        "id": 124946760,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523475495
    },
    {
        "content": "<p>I agree that if you put them in the same universe, all is well.</p>",
        "id": 124946857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475654
    },
    {
        "content": "<p>But if you leave them in different universes, Lean ends up in a weird state.</p>",
        "id": 124946864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475666
    },
    {
        "content": "<p>After the intro f, you have a goal <code>f = f</code> which refl won't close</p>",
        "id": 124946940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475767
    },
    {
        "content": "<p>but <code>exact rfl</code> will. However we are now passed a red squiggly line and I am not too sure how seriously to take Lean.</p>",
        "id": 124946953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475799
    },
    {
        "content": "<p>I'm beginning to see the problem. Is it something to do with, it let's you do funext the first time, so if you can prove their equal, it will deduce the universes are the same. So your proposition is a bit like an heq?</p>",
        "id": 124946954,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523475801
    },
    {
        "content": "<p>I was wondering if there was some implicit unification going on</p>",
        "id": 124946958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475821
    },
    {
        "content": "<p>Also it was very strange to see a line in tactic mode fail and yet see the goal change.</p>",
        "id": 124947005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475866
    },
    {
        "content": "<p>Looks a bit in the same spirit as your most recent issue on Lean github</p>",
        "id": 124947019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475897
    },
    {
        "content": "<p>And it automatically lifts the functions to a different universe to be able to state that they're equal.</p>",
        "id": 124947028,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523475905
    },
    {
        "content": "<p>Lean somehow fails to notice it's failing</p>",
        "id": 124947033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475911
    },
    {
        "content": "<p>Haven't ever done anything that really tests the universe system so I don't really know.</p>",
        "id": 124947109,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523476004
    },
    {
        "content": "<p>I just started playing with it recently. I'm just trying to get the hang of it :-)</p>",
        "id": 124947173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476090
    },
    {
        "content": "<p>I know there's something strange going on here but I've not explained it very well. How about this</p>",
        "id": 125162334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"c1\">-- it&#39;s not very effective</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- back on track</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125162336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906386
    },
    {
        "content": "<p>That works fine.</p>",
        "id": 125162338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906391
    },
    {
        "content": "<p>But now let me change <code>example</code> to <code>theorem strange</code>:</p>",
        "id": 125162340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906400
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">strange</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"c1\">-- it&#39;s super effective!</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid type ascription</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125162390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906410
    },
    {
        "content": "<p>The proof no longer typechecks if I name the theorem</p>",
        "id": 125162393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906429
    },
    {
        "content": "<p>because the behaviour of <code>funext</code> changes now the theorem has a name</p>",
        "id": 125162398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906447
    },
    {
        "content": "<p>That's not right, is it?</p>",
        "id": 125162401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906453
    },
    {
        "content": "<p>I think this has something to do with screwy universes</p>",
        "id": 125162462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523906556
    },
    {
        "content": "<p>Yes, it could be related to the fact that <code>example</code> (compared to <code>theorem</code>) does allow meta (universe) variables in its statement. So the type is not fully elaborated, it gets fully elaborated together with the value like <code>def</code>. So maybe <code>funext</code> has a problem with instantiating them.</p>",
        "id": 125162620,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523906788
    },
    {
        "content": "<p>Oh yes! If I set <code>pp.universes true</code> then I see that in the <code>theorem</code> the goal has <code>(X : Sort u_1)</code></p>",
        "id": 125162747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523907003
    },
    {
        "content": "<p>but in the <code>example</code> it has <code>(X : Sort ?l_1)</code></p>",
        "id": 125162780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523907020
    },
    {
        "content": "<p>I see, so <code>definition strange</code> fixes the problem :-)</p>",
        "id": 125163009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523907473
    },
    {
        "content": "<p>here's some possibly related weird behaviour:</p>",
        "id": 125166006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">funext</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this proof isn&#39;t finished yet</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125166023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911712
    },
    {
        "content": "<p>the goal now is <code>f = f</code></p>",
        "id": 125166031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911727
    },
    {
        "content": "<p>(at the point where the proof is not finished)</p>",
        "id": 125166037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911733
    },
    {
        "content": "<p>or with <code>pp.all</code> on</p>",
        "id": 125166041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911737
    },
    {
        "content": "<p><code>⊢ @eq.{?l_2} (X → X) f f</code></p>",
        "id": 125166054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911755
    },
    {
        "content": "<p>and the red squiggle is under <code>end</code></p>",
        "id": 125166066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911770
    },
    {
        "content": "<p>because we wrote end before the proof was complete</p>",
        "id": 125166073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911777
    },
    {
        "content": "<p>However if we write <code>admit</code> to finish the proof</p>",
        "id": 125166079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911790
    },
    {
        "content": "<p>we get a new red squiggle</p>",
        "id": 125166087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911798
    },
    {
        "content": "<p>on the second funext :-)</p>",
        "id": 125166137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911813
    },
    {
        "content": "<p>Maybe the universe unification or whatever only takes place after the admit, and then Lean decides something was wrong all along</p>",
        "id": 125166149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911854
    },
    {
        "content": "<p>I guess this is the price I pay for the silly <code>Sort*</code> choices I made earlier</p>",
        "id": 125166164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911886
    },
    {
        "content": "<p>changing <code>example</code> to <code>theorem T</code> gives me the red squiggle on the second funext immediately</p>",
        "id": 125166182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523911921
    },
    {
        "content": "<p>I think it might be because the proof could give a clue about universes, but not if the proof is admit.</p>",
        "id": 125168260,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523914788
    }
]