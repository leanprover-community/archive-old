[
    {
        "content": "<p>I was under the impression that <code>norm_num</code> was always successful in its range of expertise. Here is a real-life counterexample:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">crazy</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">real</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_of_le_one</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is 2⁻¹ ≤ 1</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The last <code>norm_num</code> call gives rise to a deterministic timeout. Replacing it with <code>show 2⁻¹ ≤ (1 : real), by norm_num</code> works fine, so this is not really a problem for me, but still surprising.</p>",
        "id": 150797276,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543868361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">crazy</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">real</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_of_le_one</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is 2⁻¹ ≤ 1</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I've seen this before, but don't remember why it's happening.</p>",
        "id": 150797777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543868838
    },
    {
        "content": "<p><code>norm_num</code> is fighting with <code>simp</code>. Compare with <code>norm_num1, simp, norm_num1, simp,</code></p>",
        "id": 150797846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543868900
    },
    {
        "content": "<p>which is basically what <code>norm_num</code> does</p>",
        "id": 150797854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543868911
    },
    {
        "content": "<p>Does it mean that it would be more safe for <code>norm_num</code> to call <code>simp [-one_div_eq_inv]</code>? By the way, I am not convinced that <code>one_div_eq_inv</code> is a good simp rule, what do you think?</p>",
        "id": 150798112,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543869185
    },
    {
        "content": "<p>It's the same family that turns every <code>a-b</code> into <code>a+-b</code> that I hate</p>",
        "id": 150798174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543869242
    },
    {
        "content": "<p>and it's in core lib <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 150798199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543869250
    },
    {
        "content": "<p>a better question is why <code>norm_num1</code> isn't solving the goal</p>",
        "id": 150798795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543869782
    },
    {
        "content": "<p>since it does solve the goal if you canonize the instances by restating the goal as you did</p>",
        "id": 150798811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543869802
    },
    {
        "content": "<p>I think this one is a result of my relying on the C++ <code>norm_num</code> implementation, which lags behind the mathlib implementation quite a bit</p>",
        "id": 150798908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543869880
    },
    {
        "content": "<p>I use it for doing <code>+</code> <code>-</code> <code>*</code> <code>/</code> on rings and fields, and do everything else in lean</p>",
        "id": 150798941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543869909
    },
    {
        "content": "<p>but I have seen it get confused with weird instances before (i.e. <code>simp</code> wants to prove that <code>(0 : int) != (1 : multiplicative int)</code> even though it's false)</p>",
        "id": 150799067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543870007
    },
    {
        "content": "<p>It is definitely confused by the instances. With <code>pp.all</code>, the goal it can not solve is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_cancel_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">linear_ordered_semiring</span><span class=\"o\">))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">to_has_inv</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_distrib</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">linear_ordered_semiring</span><span class=\"o\">)))))</span>\n</pre></div>\n\n\n<p>while the \"right\" instance is the much nicer </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_le</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">to_has_inv</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_distrib</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 150799423,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543870324
    },
    {
        "content": "<p>Something in <code>norm_num</code>, either in C++ or in mathlib, is creating some metavars and leaving them uninstantiated. Adding <code>e₂ ← instantiate_mvars e₂,</code> before the <code>guard</code> at <a href=\"https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L162\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L162\">https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L162</a> allows <code>norm_num1</code> to kill the goal.</p>",
        "id": 150800863,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543871677
    },
    {
        "content": "<p>I haven't tracked down where the uninstantiated metavar is coming from yet.</p>",
        "id": 150800903,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543871716
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ux1kBLQGexv8qc9xmddMHxrJ/20180814_193304.jpg\" target=\"_blank\" title=\"20180814_193304.jpg\">20180814_193304.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ux1kBLQGexv8qc9xmddMHxrJ/20180814_193304.jpg\" target=\"_blank\" title=\"20180814_193304.jpg\"><img src=\"/user_uploads/3121/ux1kBLQGexv8qc9xmddMHxrJ/20180814_193304.jpg\"></a></div>",
        "id": 150802454,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1543872971
    },
    {
        "content": "<p>I also  bumped into deterministic timeout few times when solving various inequality; the common situation was that I had goals involving some \"variable\" real number (i.e. not explicit - like the 'k' and 'l' in the example) and norm_num got in a loop (often involving 'one_div_eq_inv')</p>",
        "id": 150802460,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1543872979
    },
    {
        "content": "<p>Hmm. I think the C++ <code>norm_num</code> instantiates mvars as a side effect, but only sometimes. It doesn't do it when it when the term is already in normal form.</p>",
        "id": 150802866,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543873352
    },
    {
        "content": "<p>Simple fix: <code>e ← instantiate_mvars e,</code> at <code>norm_num.lean:468</code></p>",
        "id": 150802905,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543873400
    },
    {
        "content": "<p>468?</p>",
        "id": 150804050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874482
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L468\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L468\">https://github.com/leanprover/mathlib/blob/master/tactic/norm_num.lean#L468</a></p>",
        "id": 150804058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874497
    },
    {
        "content": "<p>you mean before the <code>ext_simplify_core</code>?</p>",
        "id": 150804070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874522
    },
    {
        "content": "<p>Booooo! Rob is not running up to date mathlib</p>",
        "id": 150804122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543874543
    },
    {
        "content": "<p>lol, you don't want to know what I'm running</p>",
        "id": 150804158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874593
    },
    {
        "content": "<p>Nope, the argument to <code>derive</code> should be instantiated before you do anything with it.</p>",
        "id": 150804210,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543874643
    },
    {
        "content": "<p>So make that the first line of the <code>do</code> block.</p>",
        "id": 150804221,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543874663
    },
    {
        "content": "<p>why not 471/472? that's the first place after calling C <code>norm_num</code></p>",
        "id": 150804240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874703
    },
    {
        "content": "<p>or is the problem uninstantiated metavars in the user input</p>",
        "id": 150804287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874760
    },
    {
        "content": "<p>Yeah, exactly. At some point you compare the input with something that went through the C++ <code>norm_num</code>. The former has mvars, the latter doesn't.</p>",
        "id": 150804363,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543874812
    },
    {
        "content": "<p>we could just check for unify instead of alpha equivalent</p>",
        "id": 150804500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543874952
    },
    {
        "content": "<p>eh, I guess that doesn't make sense here</p>",
        "id": 150804591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543875028
    },
    {
        "content": "<p>yeah okay, ship it</p>",
        "id": 150804644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543875092
    },
    {
        "content": "<p>ship who?</p>",
        "id": 150805046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543875437
    },
    {
        "content": "<p>Not sure if this is a serious question, but this is an international forum, so... <a href=\"https://english.stackexchange.com/questions/48443/meaning-of-ship-it\" target=\"_blank\" title=\"https://english.stackexchange.com/questions/48443/meaning-of-ship-it\">ship it</a></p>",
        "id": 150809032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543879322
    },
    {
        "content": "<p>What is the purpose of <code>algebra/norm_num</code> in the Lean core library? Is it used for some tactic?</p>",
        "id": 191656673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585076028
    },
    {
        "content": "<p>It is used for the  <code>norm_num</code> tactic</p>",
        "id": 191657016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585076181
    },
    {
        "content": "<p>The <code>norm_num</code> tactic in <code>mathlib</code>?</p>",
        "id": 191657943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585076555
    },
    {
        "content": "<p>I mean, can we move all these lemmas to <code>mathlib</code>?</p>",
        "id": 191657982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585076574
    },
    {
        "content": "<p><code>tactic.norm_num</code> is in core, and <code>norm_num</code> in mathlib uses it</p>",
        "id": 191658006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585076584
    },
    {
        "content": "<p>we recently discussed having mathlib <code>norm_num</code> be implemented as standalone so that <code>tactic.norm_num</code> can be deleted</p>",
        "id": 191658158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585076651
    },
    {
        "content": "<p><code>tactic.norm_num</code> is a <code>meta constant</code>. Will it work if supporting lemmas will be in <code>mathlib</code> instead of stdlib?</p>",
        "id": 191658437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585076799
    },
    {
        "content": "<p>no, there are tests in the lean repo that would fail if you did that</p>",
        "id": 191658483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585076829
    },
    {
        "content": "<p>move the tests to the mathlib repo?</p>",
        "id": 191658639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585076908
    },
    {
        "content": "<p>that's just breaking lean and pretending we didn't</p>",
        "id": 191658757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585076977
    },
    {
        "content": "<p>move all of Lean into mathlib?</p>",
        "id": 191658873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585077031
    },
    {
        "content": "<p>It's not really practical to move <code>constants</code> backed by C++ code outside of core. For now. In Lean 4 we could do something like that but not in Lean 3.</p>",
        "id": 191690434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585096518
    },
    {
        "content": "<p><del>Out of curiosity, was the issue discussed at the start of this thread in Dec 2018 ever fixed?</del> Yep, <a href=\"#narrow/stream/113488-general/topic/norm_num/near/150797777\" title=\"#narrow/stream/113488-general/topic/norm_num/near/150797777\">the example</a> works in 3.7.2c and a recent mathlib.</p>",
        "id": 191690687,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585096819
    },
    {
        "content": "<p>Do we need <code>init_/algebra/norm_num</code> for some reason?</p>",
        "id": 202259591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593385378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 202259602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593385398
    },
    {
        "content": "<p>I think it is not imported by anything right now</p>",
        "id": 202267184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593398309
    },
    {
        "content": "<p>I meant \"it is not imported, may I remove it\"?</p>",
        "id": 202311712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593438853
    },
    {
        "content": "<p>Yup, I think it can go. I didn't pay close attention to what stuff was dead code when I ripped algebra out of core.</p>",
        "id": 202312338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593439120
    },
    {
        "content": "<p>But since Mario rewrote norm_num, I think this is now a leaf and can be safely deleted.</p>",
        "id": 202312373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593439139
    },
    {
        "content": "<p>(Unless you think there is something in there that is worth merging into the main tree.)</p>",
        "id": 202312416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593439155
    },
    {
        "content": "<p>When I did my second pass on Johan's import I specifically attended to making sure that everything in <code>init_.algebra.norm_num</code> that is needed by the new <code>norm_num</code> got moved where it needs to be, without importing it, exactly so that it could be deleted</p>",
        "id": 202314530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593440044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I broke <code>norm_num</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/14683\">#14683</a>. It does not infer the <code>0 &lt; b</code> argument to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.zpow_neg\">docs#norm_num.zpow_neg</a> anymore. Do you think you could investigate?</p>",
        "id": 286792384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655730598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/14852\">#14852</a>. The bug was there all along but it was causing a non-fatal error and <code>simp</code> used to find an alternative proof if you use <code>norm_num</code> instead of <code>norm_num1</code>.</p>",
        "id": 286808000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655737613
    },
    {
        "content": "<p>It appears the way this interacted with your PR is that <code>simp</code> would previously rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div</span> <span class=\"n\">real</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div</span> <span class=\"n\">real</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_div_inv_monoid</span> <span class=\"n\">real</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field.to_field</span> <span class=\"n\">real</span> <span class=\"n\">real.linear_ordered_ring</span><span class=\"o\">))))</span>\n     <span class=\"mi\">1</span>\n     <span class=\"mi\">9</span><span class=\"o\">)</span>\n<span class=\"bp\">==&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div</span> <span class=\"n\">real</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div</span> <span class=\"n\">real</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_div_inv_monoid</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field.to_field</span> <span class=\"n\">real</span> <span class=\"n\">real.linear_ordered_ring</span><span class=\"o\">)))</span>\n     <span class=\"mi\">1</span>\n     <span class=\"mi\">9</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which would cause a failure in <code>simp</code> when applying transitivity with the bad proof in a place that would get ignored, and on your branch the term is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div</span> <span class=\"n\">real</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_has_div</span> <span class=\"n\">real</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_div_inv_monoid</span> <span class=\"n\">real</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field.to_field</span> <span class=\"n\">real</span> <span class=\"n\">real.linear_ordered_ring</span><span class=\"o\">))))</span>\n           <span class=\"mi\">1</span>\n           <span class=\"mi\">9</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and <code>simp</code> is no longer interested in rewriting it, so the bad proof makes it to the top level and causes the failure. I guess you changed the instance search around division rings in some way?</p>",
        "id": 286810363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655738865
    },
    {
        "content": "<p>I added <code>semifield</code> and <code>division_semiring</code> under <code>field</code> and <code>division_ring</code>, so I had to change the inheritance around those parts.</p>",
        "id": 286812036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655739636
    }
]