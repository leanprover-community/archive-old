[
    {
        "content": "<p>Kevin Buzzard, Rob Lewis, Patrick Massot, and I have started working on a new tutorial introduction to Lean and mathlib, with help from Gabriel Ebner. It is here: <a href=\"https://github.com/leanprover-community/mathematics_in_lean\" title=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a>. The tutorial is meant to supplement other sources, like Kevin's Natural Number game, Patrick's tutorial, and TPIL. There is overlap. The goal is to provide as much useful learning material as possible for people looking to learn how to formalize mathematics and contribute to mathlib.</p>\n<p>There is also an online version: <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\" title=\"https://leanprover-community.github.io/mathematics_in_lean/\">https://leanprover-community.github.io/mathematics_in_lean/</a>, but we recommend using the VS Code version. We hope to get some new chapters out quickly over the next few weeks.</p>\n<p>In VS Code version, the examples and exercises are opened in an <code>examples</code> folder and you can save your work. Caveat: we don't yet have a good way of updating the tutorial without moving your files and resetting the repository or making a fresh copy. And the infrastructure may get additional bells and whistles. But in the meanwhile, the current version provides some fun exercises for people looking for things to do.</p>\n<p>Enjoy!</p>",
        "id": 196898625,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588946422
    },
    {
        "content": "<p>Hi, I have started this tutorial and I think it's great so far.  I completed the natural numbers game a few days ago, and have no other experience with lean or any theorem proving software.<br>\nI think it would probably be good to say a few words in the first page about the VSCode interface. For instance, how to open the Goals window if you closed it by mistake, and perhaps how to split/switch tabs according to how you expect the user to interact with the tutorials.<br>\nI also found a typo in the first exercise of 2.2 : The theorem to prove says (a+b) + -b = 0.<br>\nMaybe it's good to leave it there though, it teaches readers that theorem provers can be useful to spot mistakes in theorem statements <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 196940678,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1588966534
    },
    {
        "content": "<p>Thanks! I just corrected the exercise in the version I am working on, so it will be fixed next time we put new material online, hopefully within the next couple of days.</p>\n<p>As to adding more information about VS Code, from my experience writing documentation, it is a bad idea to mix purposes. Information then become fragmented, outdated, etc. I think it makes more sense to have a stand-alone markdown document with information about the VS Code interface and FAQs in the mathlib documentation folder (<a href=\"https://github.com/leanprover-community/mathlib/tree/master/docs\" title=\"https://github.com/leanprover-community/mathlib/tree/master/docs\">https://github.com/leanprover-community/mathlib/tree/master/docs</a>). Or maybe such a thing already exists somewhere? I'd be happy to link to it from the text if someone writes it.</p>",
        "id": 196994397,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589034834
    },
    {
        "content": "<p>Another small typo : at the end of 2.2, in the \"group theory\" block, I suspect the one_mul theorem should be mul_one, since the other one is an axiom.</p>",
        "id": 197158134,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589209396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> <code>one_mul : 1 * a = a</code>, and <code>mul_one : a * 1 = a</code>.</p>",
        "id": 197158231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589209441
    },
    {
        "content": "<p>Because for the first it is \"one mul something\" and for the other, \"something mul one\"</p>",
        "id": 197158319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589209466
    },
    {
        "content": "<p>Yes, exactly, that's what I think it should say, but not what it currently says</p>",
        "id": 197158799,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589209652
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span>  is saying is that the exercise</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>should be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>since <code>one_mul</code> is true by definition of a group</p>",
        "id": 197159933,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589210093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> sorry, I'm dense <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 197161201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589210577
    },
    {
        "content": "<p>Thanks! I just fixed in my copy. It will be online within the next day or two. Also, the name of the theorem after that should have been <code>mul_right_inv</code>. We have a tool that checks the snippets to make sure they compile, but we don't have a tool to check the exercises to make sure that they make sense.</p>",
        "id": 197165647,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589212379
    },
    {
        "content": "<p>Yeah we do, it's called Zulip :-)</p>",
        "id": 197170495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589214390
    },
    {
        "content": "<p>It should be called \"the authors\" but one of them is far more concerned with marking right now :-/</p>",
        "id": 197170560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589214422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> and others, on my 12 inch laptop, the documentation opened on the right hand side of the split, and therefore hid the \"Lean Goal\" window. After clicking \"Try it\", I had to manually switch to the \"Lean Goal\" tab.<br>\nFor people who don't know that the \"Lean Goal\" tab/window exists, you might want to mention it.</p>",
        "id": 197263227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589284008
    },
    {
        "content": "<p>This sentence towards the end of the intro also seems slightly crippled:</p>\n<blockquote>\n<p>But be forewarned: interactive theorem prover will challenge you to think about mathematics and mathematical reasoning in fundamentally new ways.</p>\n</blockquote>\n<p>I guess making that <em>\"an interactive theorem prover\"</em> would already fix it.</p>",
        "id": 197263652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589284282
    },
    {
        "content": "<p>Or \"proving\"</p>",
        "id": 197263679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589284301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Another note. <code>calc</code> in tactic mode is now <code>refine calc</code>, and not <code>exact calc</code>. Just a minor point, but you might want to be aware of it (-;</p>",
        "id": 197268193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589286879
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197268415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286993
    },
    {
        "content": "<p>Thanks! We'll mention the tab, and also modify the statement about <code>calc</code> so that it is not outright false.</p>",
        "id": 197324706,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589310998
    },
    {
        "content": "<p>In section 2.5 : The second \"absorption\" exercise has a typo (sup instead of inf).</p>\n<p>I also have a very basic question, which perhaps should go in \"new members\", but since I'm working through the tutorial I thought the context would be clearer if I ask here. I was working on the distributivity exercises, and my goal was in the following state : a ⊓ c ⊔ c ⊓ b = a ⊓ c ⊔ b ⊓ c .<br>\nI want to rw inf_comm on the pair c ⊓ b, but the proposition inf_comm uses the curly braces \"implicit variables\" so I get an error if I write rw inf_comm c b. I can get around this by adding an intermediate goal  \"have c ⊓ b = b ⊓ c\" but this can't be the right way to do it... How do I specify where to substitute when a proposition has variables in curly braces ? I didn't have this problem with add_comm.</p>",
        "id": 197414256,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589377453
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a></p>",
        "id": 197414504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> I think typo is already fixed. (But maybe not yet live)</p>",
        "id": 197414512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589377573
    },
    {
        "content": "<p>So you can use <code>rw @inf_comm _ _ c b,</code></p>",
        "id": 197414708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377673
    },
    {
        "content": "<p>This is a general answer, but not what is expected here</p>",
        "id": 197414765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377684
    },
    {
        "content": "<p>Another general trick is to use</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inf_comm</span> <span class=\"o\">,</span>\n</code></pre></div>",
        "id": 197414861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377729
    },
    {
        "content": "<p>But again this is probably not what Jeremy had in mind at this stage</p>",
        "id": 197414888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377742
    },
    {
        "content": "<p>Ok, I've reread the context, and I can do the exercises using only the surrounding lemmas</p>",
        "id": 197415232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377909
    },
    {
        "content": "<p>So no need for my general tricks</p>",
        "id": 197415245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377918
    },
    {
        "content": "<p>But it's a bit unfortunate that the obvious proof hits this implicit argument issue</p>",
        "id": 197415339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377940
    },
    {
        "content": "<p>Yes, especially since it seems inconsistent with the way the previous section on rings worked (where this issue didn't arise) and the text states things like : \"mul_comm a matches any pattern of the form a * ? and rewrites it to ? * a\"</p>",
        "id": 197415948,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589378176
    },
    {
        "content": "<p>I think the good answer is that <code>inf_comm</code> should have explicit arguments. Feel free to open your first mathlib PR! (Maybe first check that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wouldn't complain)</p>",
        "id": 197416973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589378625
    },
    {
        "content": "<p>Indeed, it looks like a lot of identities in <a href=\"https://github.com/leanprover-community/mathlib/blob/5d3b8307dd8c86ca07afc23eab434d9fa7664902/src/order/lattice.lean#L14\"><code>order.lattice</code></a> should have explicit arguments.</p>",
        "id": 197417756,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589378966
    },
    {
        "content": "<p>What is the general philosophy for having implicit vs explicit arguments ?</p>",
        "id": 197417974,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589379058
    },
    {
        "content": "<p>The rule I've always followed is that an argument should be implicit iff it can be inferred from later explicit arguments.</p>",
        "id": 197418187,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589379137
    },
    {
        "content": "<p>For instance, if you have a lemma that depends on <code>a : nat</code> and <code>ha : a &gt; 0</code>, then <code>a</code> can be implicit, since Lean will be able to infer it when you provide <code>ha</code>.</p>",
        "id": 197418360,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589379218
    },
    {
        "content": "<p>I'm trying to remember where I learned this and I guess it must be from <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">the discussion in 4.1 of TPiL</a>.</p>",
        "id": 197418826,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589379398
    },
    {
        "content": "<p>We also tend to use implicit arguments for iff statements when an object appears on both sides.</p>",
        "id": 197419264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589379599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm okay with this change. There are a number of definitions in lattices and topology written by Johannes in 2017 that use too many implicits. I'm not sure if it is a difference of style or if it is simply because of the <code>variables {a b : A}</code> at the top of the file causing this to be the default.</p>",
        "id": 197437929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589386995
    },
    {
        "content": "<p>I finished the exercises now.<br>\nA few more issues that I noticed at the end of Chapter 2 :</p>\n<ul>\n<li>The first ordered ring exercise is  a ≤ b ↔ 0 ≤ b - a, and I think this is the first time the reader is asked to prove an equivalence. I had to use the \"split\" and \"intro\" tactics which I learned from the NNG but were not introduced yet in the book.</li>\n<li>For a few proofs in this section I wanted to replace \"a - b\" with \"a + (-b)\" and even though it's mentioned that \"refl\" works for goals of this type (and that this is the definition of \"-\"), I don't know which tactic to use to just replace one with the other in a more complicated goal. I managed to avoid having to do it in all cases but it's frustrating to know it's the right thing and not be able to do it.</li>\n<li>The mul_nonneg lemma in ordered_ring.lean is stated in terms of ≥ instead of ≤ for some reason, which does not match the book.</li>\n</ul>",
        "id": 198071506,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589897583
    },
    {
        "content": "<p>Many thanks for this!</p>",
        "id": 198072557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589898060
    },
    {
        "content": "<p>For your own information, you can achieve the second item using the <code>change</code> or <code>show</code> tactics, which are mostly overlapping in functionality.</p>",
        "id": 198072764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589898145
    },
    {
        "content": "<p>I find <code>change</code> much easier to use in practice than <code>show</code> - in particular if I've made a type error in my new goal <code>show</code> will just say failed, but <code>change</code> gives me a more useful error message</p>",
        "id": 198074240,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589898728
    },
    {
        "content": "<p>Oh interesting---I only ever use <code>change</code> really. I guess <code>show</code>'s goal selection functionality prevents it from giving good error messages.</p>",
        "id": 198075080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589899040
    },
    {
        "content": "<p>I tell students to use <code>change</code> because it works on hypotheses too</p>",
        "id": 198085126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589902898
    },
    {
        "content": "<p>Oh! I thought <code>show</code> was syntactic sugar for <code>change</code>. In the early chapters, should I rely exclusively on <code>change</code>, or show readers both?</p>",
        "id": 198128867,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589923512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> You can rewrite <code>a - b</code> to <code>a + -b</code> with <code>sub_eq_add_neg</code>.</p>",
        "id": 198128927,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589923560
    },
    {
        "content": "<p>We'll fix the ring exercise. We are thinking of renaming the first chapter \"Equality and Order\" or something like that (because \"basic skills\" is so vague). Any thoughts there?</p>",
        "id": 198129321,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589923740
    },
    {
        "content": "<p>I personally don't see the advantage of <code>show</code> - <code>change</code> has the additional advantage of being able to modify subexpressions as well</p>",
        "id": 198129390,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589923792
    },
    {
        "content": "<p>O.k., Iets go with <code>change</code>.</p>",
        "id": 198129730,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589923958
    },
    {
        "content": "<p><code>show</code> is useful to treat the goals in any order. If you have a tactic that will spit several goals in an unpredictable order, it is really useful.</p>",
        "id": 198130286,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589924288
    },
    {
        "content": "<p>Yeah, I know. I'll go back and take a look at the text. Maybe we'll introduce them both at once, or maybe we'll start with <code>change</code> and use <code>show</code> later, when it is useful.</p>",
        "id": 198130741,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589924562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial/near/198130286\">said</a>:</p>\n<blockquote>\n<p><code>show</code> is useful to treat the goals in any order. If you have a tactic that will spit several goals in an unpredictable order, it is really useful.</p>\n</blockquote>\n<p>Good to know, thanks!</p>",
        "id": 198130787,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589924608
    },
    {
        "content": "<p>I think you can also use <code>show</code> to change the type to a defeq type like <code>change</code>. It would be nice if when it fails it gives the error for the first goal though, so that you get something more informative like <code>change</code></p>",
        "id": 198132890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589925840
    },
    {
        "content": "<p>Yeah, with <code>show</code> (even with one goal) if I give a badly-formed type I think the error message is 'failed' which is the same as if I give a well-formed type which isn't defeq to the goal</p>",
        "id": 198134437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589926879
    },
    {
        "content": "<p>Yes. If I get <code>failed</code> with <code>show</code> then I usually change it to <code>let foo := ...</code> to see if what I wrote actually made syntactic sense and typechecked</p>",
        "id": 198136118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589928097
    },
    {
        "content": "<p>You should probably just change it to <code>change</code> instead though?</p>",
        "id": 198144025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589935586
    },
    {
        "content": "<p>assuming it's the current goal you want to <code>change</code></p>",
        "id": 198144035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589935611
    },
    {
        "content": "<p>Found a typo in section 2.1:</p>\n<blockquote>\n<p>In response to the command <code>#check mul_comm a b</code>, Lean reports that <code>mul_comm a b</code> is a proof of the fact <code>a + b = b + a</code>.</p>\n</blockquote>\n<p>should be</p>\n<blockquote>\n<p>In response to the command <code>#check mul_comm a b</code>, Lean reports that <code>mul_comm a b</code> is a proof of the fact <code>a * b = b * a</code>.</p>\n</blockquote>",
        "id": 198147131,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589939689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> Thanks very much for the feedback. I left <code>show</code> in Chapter 2 but we mention <code>change</code>in the next chapter. We don't say much about either, but it's hard to decide what it is most important to convey early on, without subjecting the reader to information overload. We'll probably end up cycling back and saying more as they come up in more examples. I also fixed the exercise you mentioned, replacing the \"iff\" with two implications.</p>\n<p>A draft of the next chapter is here: <a href=\"https://avigad.github.io/mathematics_in_lean/\">https://avigad.github.io/mathematics_in_lean/</a>. We'll add sections on \"not\", \"or\", \"and\", and \"iff\" before the \"convergent sequences\" section, and hopefully have it out within a week or so.</p>\n<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> Thanks for the correction! I just fixed it in the draft, so it will hopefully go online soon.</p>",
        "id": 198147541,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589940249
    },
    {
        "content": "<p>I'm not sure if this is a typo or not, but in the code block right at the beginning of section 2.2 supposed to begin with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>Right now, it begins with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>but the discussion around it is about non-necessarily commutative rings.</p>",
        "id": 198153265,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589948432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I made a new fork and tried turning all the identities in lattices.lean to explicit variables, but this breaks <em>a lot</em> of things in mathlib. What's the best way when making such a change to track everything that broke in an organized way ?<br>\nIn particular, after making the change, when trying to open some files (like things in topology/metric spaces) in VSCode I would get \"ran out of memory\" errors, I assume because so many things couldn't compile. This isn't very helpful to finding where the lemmas that I changed were used.</p>",
        "id": 198209443,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589986207
    },
    {
        "content": "<p>If you have the energy for this, that would be awesome!</p>",
        "id": 198209545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986263
    },
    {
        "content": "<p>Run <code>leanpkg build</code> in a terminal, and hit <code>Ctrl-C</code> as soon as you see the first error message</p>",
        "id": 198209592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986286
    },
    {
        "content": "<p>See which file it complains about, and open it in VScode.</p>",
        "id": 198209612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986299
    },
    {
        "content": "<p>There is a better way, hold on.</p>",
        "id": 198209648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589986316
    },
    {
        "content": "<p>Fix it. Close the project in VScode.</p>",
        "id": 198209650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986317
    },
    {
        "content": "<p>Ooh, ok</p>",
        "id": 198209666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986322
    },
    {
        "content": "<p>/me is curious, about to learn how I should have done my refactors in the past.</p>",
        "id": 198209740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589986341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span>  Indeed, it should be <code>ring</code>. I'll fix it. Thanks!</p>",
        "id": 198220288,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589990702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299728\">@Jean-Philippe Burelle</span> sorry for disappearing. I'm ready to answer questions now. Which declarations did you change?</p>",
        "id": 198226164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589993438
    },
    {
        "content": "<p>Using <a href=\"https://github.com/leanprover-community/leancrawler\">leancrawler</a>, you can type things like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">line_nb</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"s1\">&#39;inf_comm&#39;</span><span class=\"p\">)]</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]:</span>\n<span class=\"p\">[(</span><span class=\"s1\">&#39;compl_inf_eq_bot&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/boolean_algebra.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">33</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;inf_infi&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/complete_lattice.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">476</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;mem_closure_iff_ultrafilter&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/basic.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">533</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;Sup_inf_eq&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/complete_boolean_algebra.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">43</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;compact.image_of_continuous_on&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/subset_properties.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">391</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;inf_left_comm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/lattice.lean&#39;</span><span class=\"p\">,</span> <span class=\"mi\">265</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;multiset.inter_comm&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/data/multiset.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">1290</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;inf_sup_right&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/lattice.lean&#39;</span><span class=\"p\">,</span> <span class=\"mi\">363</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;inf_is_commutative&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/lattice.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">252</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;power_series.order_add_of_order_eq&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/ring_theory/power_series.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">1369</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;is_compl.symm&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/bounded_lattice.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">861</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;compact_of_finite_subfamily_closed&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/subset_properties.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">199</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s2\">&quot;filter.push_pull&#39;&quot;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/filter/basic.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">1424</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;disjoint.comm&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/bounded_lattice.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">817</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s2\">&quot;filter.prod_comm&#39;&quot;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/filter/basic.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">1836</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;inf_eq_bot_iff_le_compl&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/bounded_lattice.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">279</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;cauchy_prod&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/uniform_space/cauchy.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">202</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;nhds_order_unbounded&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/algebra/ordered.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">404</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;filter.inf_ne_bot_iff_frequently_right&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/order/filter/basic.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">964</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">&#39;compact.inter_right&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;/home/pmassot/lean/mathlib/src/topology/subset_properties.lean&#39;</span><span class=\"p\">,</span>\n  <span class=\"mi\">43</span><span class=\"p\">)]</span>\n</code></pre></div>",
        "id": 198226494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589993626
    },
    {
        "content": "<p>That seems useful! I changed all identities that had implicit variables to explicit, so <code>le_sup_left</code>, <code>le_sup_right</code>, <code>sup_idem</code>, <code>sup_comm</code>,  and all their inf counterparts.</p>",
        "id": 198228362,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1589994429
    },
    {
        "content": "<p>Enjoy <a href=\"https://gist.github.com/PatrickMassot/4e2cefb6be685dedfceb5653a0a4330d\">https://gist.github.com/PatrickMassot/4e2cefb6be685dedfceb5653a0a4330d</a></p>",
        "id": 198229002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589994775
    },
    {
        "content": "<p>You can also download <a href=\"https://www.imo.universite-paris-saclay.fr/~pmassot/mathlib.yaml\">https://www.imo.universite-paris-saclay.fr/~pmassot/mathlib.yaml</a> and start playing from there (see the leancrawler README)</p>",
        "id": 198229431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589994966
    },
    {
        "content": "<p>The next chapter of the new Lean / mathlib tutorial is now live:<br>\n<a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">https://leanprover-community.github.io/mathematics_in_lean/</a></p>",
        "id": 199213324,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590787063
    },
    {
        "content": "<p>Where is the source?</p>",
        "id": 199213671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590787215
    },
    {
        "content": "<p>Found <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a></p>",
        "id": 199213862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590787319
    },
    {
        "content": "<p>no</p>",
        "id": 199214196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590787468
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/avigad/mathematics_in_lean_source\">https://github.com/avigad/mathematics_in_lean_source</a>.</p>",
        "id": 199214209,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590787478
    },
    {
        "content": "<p><a href=\"https://github.com/avigad/mathematics_in_lean_source/\">https://github.com/avigad/mathematics_in_lean_source/</a></p>",
        "id": 199214210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590787478
    },
    {
        "content": "<p>Jeremy was quicker</p>",
        "id": 199214225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590787490
    },
    {
        "content": "<p>We use <code>mathematics_in_lean</code> for the repository that users can fetch for the local VS Code version. But we also deploy the online version there, so we have the nicer url.</p>",
        "id": 199214314,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590787542
    }
]