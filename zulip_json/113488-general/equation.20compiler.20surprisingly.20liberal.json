[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mytype</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span>\n<span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mytype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"mi\">34</span>\n<span class=\"bp\">|</span> <span class=\"n\">cake</span> <span class=\"o\">:=</span> <span class=\"mi\">19</span>\n</pre></div>\n\n\n<p>If I asked you to guess whether the definition of <code>f</code> compiled, what would you say?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"n\">T</span> <span class=\"c1\">-- 34</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"n\">F</span>  <span class=\"c1\">-- 19</span>\n</pre></div>\n\n\n<p>Works fine.</p>",
        "id": 177786354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570693116
    },
    {
        "content": "<p>How about <code>#eval f cake</code>?</p>",
        "id": 177786388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570693193
    },
    {
        "content": "<p>I'm not sure why you would expect a different result. <code>T</code> is a constructor pattern, while <code>cake</code> is an (irrefutable) variable pattern.</p>",
        "id": 177786448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1570693234
    },
    {
        "content": "<p>Lean let's you have your cake and eat it too</p>",
        "id": 177786463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570693260
    },
    {
        "content": "<p>At least until it supports linear cake types</p>",
        "id": 177786502,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1570693294
    },
    {
        "content": "<p>Lean: dependent cakes all the way down</p>",
        "id": 177786572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570693345
    },
    {
        "content": "<blockquote>\n<p>I'm not sure why you would expect a different result. <code>T</code> is a constructor pattern, while <code>cake</code> is an (irrefutable) variable pattern.</p>\n</blockquote>\n<p><em>penny drops</em></p>",
        "id": 177787202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570693958
    },
    {
        "content": "<p>Yeah, sorry, I get it now. Expected behaviour :D</p>",
        "id": 177787221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570693983
    }
]