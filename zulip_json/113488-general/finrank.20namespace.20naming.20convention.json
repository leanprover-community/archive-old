[
    {
        "content": "<p>A couple of years ago I did a twitch livestream where I formalised an example sheet question (if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are two 5-dimensional subspaces of a 9-dimensional vector space then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A\\cap B\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>). I just tried this again and noticed a couple of things; firstly we can't write <code>vector_space</code> any more (this much I knew and I'm a bit sad but it's on my job list to get this notation back in a locale and then I'll be happy again) and secondly (perhaps when <code>findim</code> got refactored to <code>finrank</code>?) namespaces are all over the place. If you import <code>linear_algebra.finite_dimensional</code> then you get <code>finite_dimensional.finrank</code> (the nat-valued dimension of a f.d. vector space) and then lemmas like <code>finrank_bot</code> (in the root namespace) and also lemmas like <code>submodule.finrank_le</code> (in the <code>submodule</code> namespace).</p>\n<p>I am never really clear on how these things should work; for example I never remember whether <code>map f : subgroup G -&gt; subgroup H</code> is supposed to be <code>subgroup.map</code> or <code>monoid_hom.map</code>, so I don't quite know whether all this inconsistency is somehow expected (i.e. it's a consequence of our conventions) or whether everything should just be in the <code>finite_dimensional</code> namespace really. </p>\n<p>Note also that <code>dim_sup_add_dim_inf_eq</code> is a statement about <code>module.rank</code> but <code>submodule.dim_sup_add_dim_inf_eq</code> is a statement about <code>finrank</code>s. Should we expect the naming convention (whatever it is) to do better here? Why are either of these things called <code>dim</code> anyway if the convention now is to call things <code>rank</code> or <code>finrank</code>? Is this just an oversight?</p>\n<p>I guess maybe it's actually time I understood the naming convention properly. Is there logic to whether <code>map</code> above is <code>monoid_hom.map</code> or <code>subgroup.map</code>? If so, does that same logic tell us anything here?</p>",
        "id": 273362182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645908574
    },
    {
        "content": "<p><code>monoid_hom.map</code> could refer to a zillion things so I would be against using this name at all.</p>",
        "id": 273362364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645908790
    },
    {
        "content": "<p>Unless we had a <code>has_monoid_hom_map</code> typeclass, then it could just mean the Right Thing™ on whatever type you have</p>",
        "id": 273363776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645910792
    }
]