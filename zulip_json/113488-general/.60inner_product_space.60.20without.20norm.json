[
    {
        "content": "<p>I started working on some facts about weak topology in Hilbert Spaces. The first fact is of course to prove that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner\">docs#inner</a> is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing\">docs#inducing</a> for this topology. Putting type annotations everywhere is annoying so I added a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_inner\">docs#has_inner</a> instance on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_space\">docs#weak_space</a>, but the problem is that I can’t rewrite with algebraic lemmas assuming <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a>. Would it be reasonable to split <code>inner_product_space</code> into two typeclasses, one purely algebraic (this would basically be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space.core\">docs#inner_product_space.core</a>) and the other adding the compatibility with the norm?</p>",
        "id": 299286708,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663402811
    },
    {
        "content": "<p>Maybe we need a typeclass <code>has_pairing</code>?</p>",
        "id": 299288999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663404131
    },
    {
        "content": "<p>Or <code>has_bilin_pairing</code></p>",
        "id": 299289033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663404161
    },
    {
        "content": "<p>Yep, and maybe we could even make it work for sesquilinear pairings over two different spaces</p>",
        "id": 299300242,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663410347
    },
    {
        "content": "<p>On that note, I was wondering wether we should generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_bilin\">docs#weak_bilin</a> to sesquilinear pairings. That would allow defining a <code>weak_hilbert</code> type alias whose topology is directly defined in terms of the inner product, so that we don’t have to invoke the identification between H and H’ at all. It may not be a good idea since we wouldn’t be able to apply général theorems about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_space\">docs#weak_space</a> seamlessly, but I think we should make sure that the library allows such a definition</p>",
        "id": 299300933,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663410647
    }
]