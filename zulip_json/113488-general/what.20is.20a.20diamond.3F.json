[
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/Examples/Category_5_Diamond.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/Examples/Category_5_Diamond.lean\">The Category 5 Diamond (Xena)</a>.</p>\n<p>What is a typeclass diamond (note : this has nothing to do with Scholze's diamonds, it's an unfortunate name-clash)? I think it's something like the above link. Two distinct instance routes from A to D, with typeclass inference giving us two terms of type D which are provably distinct. I am assuming that the system should be regarded as having failed at this point. How much can I get away with? I think there are other lower category diamonds as well though, right? What other things can go wrong? Instances which are equal but not computably equal? Instances which are equal but not definitionally equal? Is there some sort of complete catalogue of diamonds?</p>",
        "id": 163833275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555819203
    },
    {
        "content": "<p>With regard to auto-naming, what do you think a good strategy for naming those would be? It would <del>probably</del> be really easy to implement</p>",
        "id": 163833380,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555819390
    },
    {
        "content": "<p>I was going from <code>xena.B</code> to <code>xena.D</code> in my example, in the xena namespace, and getting a name which depended only on <code>D</code>. I guess I want to have B tagging along somehow. Is there some clever thing you can do with dots?</p>",
        "id": 163833569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555819773
    },
    {
        "content": "<p>I think the term <code>type class diamond</code> is used whenever there are two ways to go from class <code>A</code> to class <code>D</code>, regardless of whether the two resulting instances are definitionally equal or not. I think it will be quite a big problem if you have a diamond and the resulting instances are not definitionally equal (whether they are provably equal is less important. I think we should restrict instances enough so that we don't get these kinds of bad diamonds.</p>",
        "id": 164268877,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556290512
    },
    {
        "content": "<p>golf:</p>\n<div class=\"codehilite\"><pre><span></span>theorem you_are_in_typeclass_trouble_now : d1 ≠ d2 := by rintro ⟨⟩\n</pre></div>",
        "id": 164268887,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556290521
    },
    {
        "content": "<p>If the class is a subsingleton, I want to be able to use non-defeq instances.</p>",
        "id": 164269265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556290723
    },
    {
        "content": "<p>That ought to be possible, right?</p>",
        "id": 164269295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556290742
    },
    {
        "content": "<p>That currently is annoying. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I know the type class system will not be changing, but this issue about typeclass inference failing to do subsingleton elimination is something we mathematicians are beginning to run into. Am I asking for <code>rfl++</code> or something?</p>",
        "id": 164270793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556291681
    },
    {
        "content": "<p>I don't think Sebastian said the type class system won't change. He wrote they didn't know yet what would be a better system. It's clear it has to improve, the current system simply doesn't scale.</p>",
        "id": 164270868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556291759
    },
    {
        "content": "<p>Part of the problem is indeed type-theoretic but, as far as I understand, most of the issues are completely generic (in which order do we search, what is cached, etc.)</p>",
        "id": 164271044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556291881
    },
    {
        "content": "<p>Ralf Jung, who's a Coq expert, just wrote <a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">a blog post (link)</a> about the problems diamonds cause and possible solutions. It seems that it's still a mostly unsolved problem, and possibly some issues you encounter here are due to the exponential blowup described there.</p>",
        "id": 165756571,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1557955879
    },
    {
        "content": "<p>Interesting post. How did you come across it, by the way?</p>",
        "id": 165763496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557962022
    },
    {
        "content": "<p>The diamonds mentioned in that post are of a different type, related to classes extending other classes</p>",
        "id": 165763606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557962106
    },
    {
        "content": "<p>For example, B and C both extend A and D extends both B and C. If you have a D then you probably want the As to be defeq, but there's no way to even express that.</p>",
        "id": 165764226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557962663
    },
    {
        "content": "<p>In both Coq and Lean?</p>",
        "id": 165764349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557962772
    },
    {
        "content": "<p>I think the issues are mostly the same in both. I guess I didn't pick the best example--in this case Lean will deduplicate the A fields in D if you use the old structure command, I think?</p>",
        "id": 165774918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557975905
    },
    {
        "content": "<p>A better example is if you don't want to make the class D at all</p>",
        "id": 165774948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557975961
    },
    {
        "content": "<p>because you have lots of things that extend A, and you don't want to make all the combinations.<br>\nThen you have no way to say \"A which is both B and C\"</p>",
        "id": 165775007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557976021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Thanks for sharing this! Interesting read.</p>",
        "id": 165783076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557987372
    },
    {
        "content": "<p>Hi! Author of that post here. Lean was also just mentioned in our <a href=\"https://coq.discourse.group/t/blog-post-exponential-blowup-when-using-unbundled-typeclasses-to-model-algebraic-hierarchies/289\" target=\"_blank\" title=\"https://coq.discourse.group/t/blog-post-exponential-blowup-when-using-unbundled-typeclasses-to-model-algebraic-hierarchies/289\">Coq-side discussion of this post</a>. I am very curious how Lean compares here.</p>",
        "id": 165793783,
        "sender_full_name": "RalfJ",
        "timestamp": 1557999197
    },
    {
        "content": "<blockquote>\n<p>The diamonds mentioned in that post are of a different type, related to classes extending other classes</p>\n</blockquote>\n<p>Yeah, the diamonds I saw mentioned in the backlog here are diamonds in the inference search tree, not in the algebraic hierarchy (which are the kinds of diamonds that bundling approaches have problems with). I mention that issue in my post as well though I dont call it a dimaond -- this is the exponential blowup coming from the <code>Monoid A -&gt; Semigroup A</code> instance together with the <code>prod</code> instances, where there are now two ways to derive <code>Monoid (A*A) -&gt; Semigroup (A*A)</code>.</p>",
        "id": 165793922,
        "sender_full_name": "RalfJ",
        "timestamp": 1557999328
    },
    {
        "content": "<p>Cool, welcome!</p>",
        "id": 165794897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558000309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222132\">@RalfJ</span> Lean has the same foundational problem, but it isn't yet a big issue. The blog post doesn't discuss the style used in mathlib, which is to have \"partially unbundled\" structures, where the type is a parameter but none of the operators. This minimizes the nesting level, although there are some examples where we have deeper depth like modules (that use two variables) and there was an example using three variables that floated on the chat recently</p>",
        "id": 165796691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558002120
    },
    {
        "content": "<p>Also, not mentioned in that asymptotic analysis is the amount of subterm sharing in the term. I think the size of those instances is actually linear, but if you write it as a tree instead of a dag then it becomes quadratic or cubic etc</p>",
        "id": 165796772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558002209
    },
    {
        "content": "<p>But it is very likely to become a problem in the (near?) future?</p>",
        "id": 165796774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558002209
    },
    {
        "content": "<p>I don't think so... you have to be dealing with some pretty complicated objects for it to come up, so if it was an issue it would have stopped us already</p>",
        "id": 165796853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558002288
    },
    {
        "content": "<p>We have issues with typeclass search order, but that's a different matter</p>",
        "id": 165796880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558002317
    },
    {
        "content": "<p>This is a really great thing about the <code>lean-perfectoid-spaces</code> project: we've made a definition which is about as complicated as they come (at least in algebraic geometry / number theory?), and Lean could cope.</p>",
        "id": 165796987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558002460
    },
    {
        "content": "<p>One of my main motivations for doing perfectoids was to see if Lean could handle them -- it was clear from the start that it was theoretically possible but Patrick pointed out very early on that this didn't mean that it was possible, and at times I was (incorrectly) worried that it might not be. I am still trying hard to understand what Mario wrote about timeouts. I've taken to trying to compile the perfectoid project with smaller values for the timeout parameter and am trying to understand what makes part of it slow to compile -- everything so far is pointing at naivity in the code -- poor proof engineering, as Mario calls it.</p>",
        "id": 165797486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558002965
    },
    {
        "content": "<p>In short, I have no formal training in programming and this is now beginning to show</p>",
        "id": 165797498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558002991
    },
    {
        "content": "<p>But at the end of the day the project does compile</p>",
        "id": 165797521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558003044
    },
    {
        "content": "<blockquote>\n<p>\"partially unbundled\" structures, where the type is a parameter but none of the operators</p>\n</blockquote>\n<p>I mentioned having the operators unbundled but the superclasses bundled, that gives you <code>O(n^3)</code> If you just have the type unbundled you get <code>O(n^2)</code>, but you have even more sharing problems and you cannot even use the typeclasses for the operators and their notation before having shown the axioms. We had some cases where that was annoying, but the real trouble here is sharing once your inheritance hierarchy has a diamond.</p>",
        "id": 165799283,
        "sender_full_name": "RalfJ",
        "timestamp": 1558004890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>not mentioned in that asymptotic analysis is the amount of subterm sharing in the term. I think the size of those instances is actually linear, but if you write it as a tree instead of a dag then it becomes quadratic or cubic etc</p>\n</blockquote>\n<p>I explicitly mention that in the conclusion. :) And yes, if you fully exploit sharing I think it remains linear. But then you have to ensure that every pass traversing your AST (unification, reduction, elaboration, type checking, whatever...) exploits sharing. A single lapse and your get the bad complexities back. At least in the Coq world people tell me that is not feasible.</p>",
        "id": 165799345,
        "sender_full_name": "RalfJ",
        "timestamp": 1558004978
    },
    {
        "content": "<blockquote>\n<p>I don't think so... you have to be dealing with some pretty complicated objects for it to come up, so if it was an issue it would have stopped us already</p>\n</blockquote>\n<p>in our case, it was really when we started to put the hierarchy to use that the performance became an issue. as long as you are just defining your algebraic classes and show all sorts of properties about them it's good, but then we ended up defining our logic with 5 or more nested combinators (i.e., the equivalent of <code>Zn 5</code>), and then we nest that <em>again</em> in several more layers, so we end up with n=10 and more -- and then we have quite a few lemmas about that, and everything got slow. I have no idea what people have been doing in Lean so I cannot compare.</p>",
        "id": 165799593,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005171
    },
    {
        "content": "<p>what do you mean about Zn 5?</p>",
        "id": 165799618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005207
    },
    {
        "content": "<p>I was referring to my post; I mean that we had something like <code>iProp := T*U*V -&gt; A -&gt; B</code>, where <code>*</code> and <code>-&gt;</code> have TC instances like <code>prod</code> in my post. This is like <code>Zn 5 = Z*Z*Z*Z*Z</code>.</p>",
        "id": 165799722,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005287
    },
    {
        "content": "<p>so you are trying to infer that e.g. Z^5 has a ring structure?</p>",
        "id": 165799769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005342
    },
    {
        "content": "<p>and then we built things like <code>((X -&gt; iProp) -&gt; T -&gt; iProp) -&gt; ((X -&gt; iProp) -&gt; T -&gt; iProp)</code>. So if you count the number of combinators here, it's... 20 or more.</p>",
        "id": 165799786,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005350
    },
    {
        "content": "<p>I'm confused about the role of T,U,V etc in those examples</p>",
        "id": 165799865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005396
    },
    {
        "content": "<p>just random types that are in our hierarchy</p>",
        "id": 165799871,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005413
    },
    {
        "content": "<p>You have a theorem that has 20 type arguments, plus all their typeclasses?</p>",
        "id": 165799872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005414
    },
    {
        "content": "<p>like, random rings, if we stick to that example</p>",
        "id": 165799889,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005423
    },
    {
        "content": "<p>no, these are all concrete types</p>",
        "id": 165799900,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005428
    },
    {
        "content": "<p>well, most of them</p>",
        "id": 165799903,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005431
    },
    {
        "content": "<p>Inferring that Z^5 has a ring structure should be quadratic, since you have to talk about Z^n itself and the ring structure for each of the subterms</p>",
        "id": 165800004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005499
    },
    {
        "content": "<p>it's not quintic</p>",
        "id": 165800015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005520
    },
    {
        "content": "<p>with the fully unbundled approach and if ring is a subclass of group, the power is 6 at least</p>",
        "id": 165800019,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005527
    },
    {
        "content": "<p>that's what I explained in my post</p>",
        "id": 165800049,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005564
    },
    {
        "content": "<p>So in mathlib if ring is a subclass of group that only increases things by a constant factor, I think, since the typeclass args will be twice as big</p>",
        "id": 165800122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005615
    },
    {
        "content": "<p>I think fully unbundled is the killer here</p>",
        "id": 165800152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005652
    },
    {
        "content": "<blockquote>\n<p>I think fully unbundled is the killer here</p>\n</blockquote>\n<p>it definitely is</p>",
        "id": 165800284,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005765
    },
    {
        "content": "<p>but we've also had loads of problems with bundling^^</p>",
        "id": 165800306,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005789
    },
    {
        "content": "<p>with partially unbundled style you won't get that kind of thing unless you have n different type arguments, which is quite rare for mathematical structures</p>",
        "id": 165800322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005812
    },
    {
        "content": "<p>the sheer number of arguments doesnt even matter</p>",
        "id": 165800332,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005826
    },
    {
        "content": "<p>only their \"level of nesting\" -- like arguments that have arguments</p>",
        "id": 165800336,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005835
    },
    {
        "content": "<p>So I guess this is another variant on \"don't use dependent types in DTT\"</p>",
        "id": 165800413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005879
    },
    {
        "content": "<p>;)</p>",
        "id": 165800425,
        "sender_full_name": "RalfJ",
        "timestamp": 1558005891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222132\">@RalfJ</span> I don't know if you have Lean installed. I ran this code to illustrate how mathlib/Lean deals with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inst01</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst02</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst03</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst04</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst05</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inst01</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inst02</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inst03</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inst04</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inst05</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The output of the last two prints is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">inst04</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))))</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">inst05</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                       <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                       <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">)))))))</span>\n</pre></div>",
        "id": 165869412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558063914
    },
    {
        "content": "<p>It is slightly repetetive, but it's clearly linear (-;</p>",
        "id": 165869467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558063954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inst01</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst02</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst03</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst04</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inst05</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_int</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">_::</span><span class=\"n\">l&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"k\">take</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;int&quot;</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"k\">then</span> <span class=\"n\">count_int</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span>\n  <span class=\"n\">count_int</span> <span class=\"n\">l&#39;</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_int_in_decl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">count_int</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"bp\">.</span><span class=\"n\">to_list</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">mmap</span> <span class=\"n\">count_int_in_decl</span>\n    <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">inst01</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">inst02</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">inst03</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">inst04</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">inst05</span><span class=\"o\">],</span>\n  <span class=\"n\">trace</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"c1\">-- [5, 12, 20, 29, 39]</span>\n  <span class=\"n\">guard</span> <span class=\"err\">$</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">13</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">5</span>\n</pre></div>",
        "id": 165870396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558065574
    },
    {
        "content": "<p>it's quadratic</p>",
        "id": 165870398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558065582
    },
    {
        "content": "<p>but the linear term is pretty large, so the quadratic behavior doesn't assert itself until <code>n = 13</code> or so</p>",
        "id": 165870513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558065682
    },
    {
        "content": "<p>to see why, notice that <code>(prod.{0 0} int (prod.{0 0} int (prod.{0 0} int int)))</code> appears on line 1, <code>(prod.{0 0} int (prod.{0 0} int int))</code> appears on line 5, <code>(prod.{0 0} int int)</code> appears on line 10 and so on in <code>inst05</code></p>",
        "id": 165870582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558065799
    },
    {
        "content": "<p>I experimented with this stuff a few weeks ago. IIRC when you go up to 6 factors it doesn't work!</p>",
        "id": 165876758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558074921
    },
    {
        "content": "<p>Some search gives up before it finds it. Is my memory correct?</p>",
        "id": 165876763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558074960
    },
    {
        "content": "<p>yes, you have to raise the instance search depth to get past 5 factors</p>",
        "id": 165877139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558075539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> given that this uses just the type as an index, quadratic is exactly what my blog post predicts :)</p>",
        "id": 165922321,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116118
    },
    {
        "content": "<p>what I am curious about now is if lean can keep the inference and/or checking times linear by exploiting sharing</p>",
        "id": 165922379,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116137
    },
    {
        "content": "<p>Heh, this just appeared on the isabelle mailing list: <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-May/msg00089.html\" target=\"_blank\" title=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-May/msg00089.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-May/msg00089.html</a> . Looks familiar...</p>",
        "id": 166160360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558434844
    }
]