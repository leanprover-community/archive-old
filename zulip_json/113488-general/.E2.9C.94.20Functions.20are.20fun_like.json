[
    {
        "content": "<p>Yes it does</p>",
        "id": 298162103,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662830891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> has marked this topic as resolved.</p>",
        "id": 298162105,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662830893
    },
    {
        "content": "<p>IIRC the specific thing that breaks is that Lean starts inserting <code>coe_fn</code> in half of your function applications, and tactics don't tend to like that.</p>",
        "id": 298340817,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1662973735
    },
    {
        "content": "<p>Eric(W) was saying that this sort of approach would allow unbundled morphisms, though, which would be nice.</p>",
        "id": 298340891,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662973776
    },
    {
        "content": "<p>So maybe this is a serious thing to consider</p>",
        "id": 298340898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662973781
    },
    {
        "content": "<p>So the idea there is we'd insert a dummy <code>coe_fn</code> head symbol for all morphisms, so <code>simp</code> can match on it?</p>",
        "id": 298341182,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1662973913
    },
    {
        "content": "<p>precisely, yeah</p>",
        "id": 298341838,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662974171
    },
    {
        "content": "<p>Yes, but my suggestion was to do that by making a <code>wrapped_function</code> structure rather than introducing coe_fns everywhere</p>",
        "id": 298460209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663009228
    }
]