[
    {
        "content": "<p>When I load <code>data.real.basic</code> I get already around 4GB of memory consumption. When I browse some files I get even more. I just tried to open the LTE (with no other projects open) and lean says excessive memory consumption when I open the <code>condensed/ab.lean file</code>. My system tells me that LEAN now uses over 20GB of RAM. Is the fix really to just increase the memory limit even further? Right now it is set to 16GB. This is in the VS-code extension with the setting <code>checking visible files</code>, and only <code>condensed/ab.lean</code> is visible (the only open file in fact).</p>",
        "id": 262791204,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637929313
    },
    {
        "content": "<p>This is in LEAN3 on linux.</p>",
        "id": 262791265,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637929329
    },
    {
        "content": "<p>do you have mathlib oleans downloaded? That sounds excessive</p>",
        "id": 262791318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929379
    },
    {
        "content": "<p>I did run <code>leanproject get leanprover-community/lean-liquid</code>. Does this get me the oleans?</p>",
        "id": 262791364,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637929420
    },
    {
        "content": "<p>for LTE I don't know if they are shipping oleans so you probably have to <code>lean --make src</code> in the project</p>",
        "id": 262791379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929440
    },
    {
        "content": "<p>Ok, I will try this. Is it normal to get 4GB of RAM full by importing <code>data.real.basic</code> though?</p>",
        "id": 262791486,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637929500
    },
    {
        "content": "<p>browsing a big project when there are no oleans on disk is usually a bad idea because lean will compile everything on the spot and not save the results, meaning wasted work and huge memory consumption</p>",
        "id": 262791497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929507
    },
    {
        "content": "<p>But for <code>data.real.basic</code> I should have the oleans probably right (when I just create a new project with <code>leanproject new NAME</code>)? How can I check this?</p>",
        "id": 262791651,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637929623
    },
    {
        "content": "<p>I just tried opening <code>data.real.basic</code> without anything else open and with precompiled mathlib oleans. I'm seeing 1108M virtual memory and 602M resident memory in htop</p>",
        "id": 262791689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929656
    },
    {
        "content": "<p>Opening it in vscode should take about 1 second load time. It's usually really obvious when something is not compiled because this jumps to more like 40 seconds</p>",
        "id": 262791849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929759
    },
    {
        "content": "<p>or potentially hours if it's something really deep in the hierarchy</p>",
        "id": 262791870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929780
    },
    {
        "content": "<p>There is <code>leanproject check</code> which can be used to check for uncompiled oleans, but I think <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> mentioned that it doesn't work anymore because lean changed its caching strategy</p>",
        "id": 262792055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929905
    },
    {
        "content": "<p>Ok, actually it seems to only take long in one of the projects that I have. So somehow the oleans probably got messed up there, and I just need to just build them again. I assume that <code>lean --make src</code> would reuse already existing oleans from what you were saying.</p>",
        "id": 262792350,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637930084
    },
    {
        "content": "<p>yes, <code>lean --make src</code> will exit immediately if everything is compiled so that's another way to check for uncompiled stuff</p>",
        "id": 262792543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637930253
    },
    {
        "content": "<p>It seems that the <code>.olean</code> files are put in the same directory as the source code. So I guess you could just try to find <code>.lean</code> files, that do not have a <code>.olean</code> file in their directory. Or can some <code>.olean</code> get into an invalid state, where they are there, but no longer used?</p>",
        "id": 262792658,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637930335
    },
    {
        "content": "<p>Yes, if you change a <code>.lean</code> file, the <code>.olean</code> file, and also the <code>.olean</code> file for all the files depending on the changed <code>.lean</code> file, is out of date and can't be used.</p>",
        "id": 262792797,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637930442
    },
    {
        "content": "<p><code>leanproject check</code> simply checks that olean files are not older than the corresponding lean files.</p>",
        "id": 262792805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637930450
    },
    {
        "content": "<p>For example, what happens when I put a <code>#check</code> into a mathlib lean file? I think I have done that, that was probably the problem right?</p>",
        "id": 262792809,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637930453
    },
    {
        "content": "<p>Oh yes!</p>",
        "id": 262792820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637930460
    },
    {
        "content": "<p>That would definitely create huge problems</p>",
        "id": 262792831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637930469
    },
    {
        "content": "<p>Ok, now everything seems to make sense <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 262792851,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637930500
    },
    {
        "content": "<p>We would love if Lean could be smarter when deciding what to recompile. But this is a very tricky issue because a lot of things are very non-local.</p>",
        "id": 262792963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637930551
    },
    {
        "content": "<p>I guess that would be good. Although for me the issue was that I just did not know how the compiler handles things. Probably that was mentioned somewhere and I missed it. But if not maybe it makes sense to mention it more explicitly that changing anything in the <code>_target</code> folder is a bad idea, or at least that they should run <code>lean --make src</code> afterward. I know at least one other person who also very likely ran into this issue.</p>",
        "id": 262793491,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637930935
    },
    {
        "content": "<p>If you add a <code>#check</code> and then delete it or undo to before you added it, I think the cache will still be good</p>",
        "id": 262793656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931078
    },
    {
        "content": "<p>although you might need to restart the server to make it reload the cache from disk</p>",
        "id": 262793701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931120
    },
    {
        "content": "<p>What if I add whitespace or a newline. That might be hard to detect.</p>",
        "id": 262793939,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637931302
    },
    {
        "content": "<p>what I said applies to any textual change</p>",
        "id": 262793967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931322
    },
    {
        "content": "<p>if you restore the file to be byte-wise identical to the original, then the file hash will come out the same and the cache will not be invalidated</p>",
        "id": 262793993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931352
    },
    {
        "content": "<p>whitespace changes will invalidate the cache just as much as anything else</p>",
        "id": 262794077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931388
    },
    {
        "content": "<p>unless it's a trailing whitespace and you have trim whitespace on save in vscode (which is enabled by default in mathlib)</p>",
        "id": 262794122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637931425
    },
    {
        "content": "<p>Ok, so I guess undo would work always, and trying to delete it would fail often when you make large changes because you would likely miss some whitespace. Good to know.</p>",
        "id": 262794143,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637931443
    },
    {
        "content": "<p>There is a discussion about this on zulip from a couple of weeks back, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> wanted to make target read only or at least add some warning to the extension when you edit (I can't find the link right now when I'm on mobile). I definitely think an alert message when you start editing target warning not to save any changes and to close the tab and restart lean when done #checking would help people avoid this</p>",
        "id": 262794149,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637931447
    },
    {
        "content": "<p>Of course this message should have a \"never show again\" checkbox so people who want to edit _target files don't get annoyed by it every time!</p>",
        "id": 262794263,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637931513
    },
    {
        "content": "<p>That seems like a very good idea.</p>",
        "id": 262794298,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637931542
    },
    {
        "content": "<p>At least for new people, it could save them some headaches.</p>",
        "id": 262794492,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637931625
    },
    {
        "content": "<p>The pernicious thing that happened to me actually seems especially bad. I actually thought that it was normal for <code>data.real.basic</code> to load so long, because although I invalidated some <code>.orlean</code> files related to it, it was still not so slow that it was obviously not intentional. (It took like 15s or so I think).</p>",
        "id": 262795451,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637932214
    },
    {
        "content": "<p>And only when I tried to open the LTE did I run against the wall of nonunderstanding hard enough to realize that it exists.</p>",
        "id": 262795642,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637932345
    },
    {
        "content": "<p>Is there a general troubleshooting page for questions like this? The main advice I’ve seen on the mathlib web pages is “ask on Zulip”.</p>",
        "id": 262918250,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638090141
    }
]