[
    {
        "content": "<p>Hello everybody! Why does <code>ac_refl</code> not work for <code>and</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span> <span class=\"c1\">-- ac_refl failed</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span> <span class=\"c1\">-- ac_refl failed</span>\n</code></pre></div>\n<p>Or is there some other tactic that can do this purely propositional reasoning?</p>",
        "id": 242404354,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623446142
    },
    {
        "content": "<p><code>tauto</code> (or  maybe <code>ext ; toto</code> to fight the weird equal sign) should work</p>",
        "id": 242404958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623446487
    },
    {
        "content": "<p>Patrick is right of course that tauto seems like the right choice for this, but I was curious so I did some more digging:<br>\n<code>ac_refl</code> uses the <code>is_commutative</code> and <code>is_associative</code> typeclasses which aren't set for <code>and</code>, but if we add those it seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"kt\">Prop</span> <span class=\"o\">((</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inf_is_commutative</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"kt\">Prop</span> <span class=\"o\">((</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inf_is_associative</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span>\n</code></pre></div>\n<p>This also suggests a different fix, which is just to state the theorems using lattice operations so that typeclasses don't get confused e.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span>\n</code></pre></div>",
        "id": 242413659,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623452678
    },
    {
        "content": "<p>Haha, thanks for investigating! I'll stickt to <code>∧</code>, though :)</p>",
        "id": 242432226,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623479957
    }
]