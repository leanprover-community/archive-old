[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">fall</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">descend</span> <span class=\"o\">(</span><span class=\"n\">pivot</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">pivot</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"k\">then</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">fall</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">H1</span><span class=\"bp\">;</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_le_zero</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_gt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"k\">from</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ascend</span> <span class=\"o\">(</span><span class=\"n\">pivot</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">descend_ascend</span> <span class=\"o\">(</span><span class=\"n\">pivot</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"n\">ascend</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">pivot</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"n\">descend</span> <span class=\"o\">(</span><span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"n\">ascend</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">descend</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ascend</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130454443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532761343
    },
    {
        "content": "<p>I've used <code>split_ifs</code> quite a lot but it just happens to timeout here</p>",
        "id": 130454446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532761359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">descend</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ascend</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pivot</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">dP</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>Is <code>P</code> decidable? It looks decidable to me.</p>",
        "id": 130455338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532763263
    },
    {
        "content": "<p>it should be decidable</p>",
        "id": 130455339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532763279
    },
    {
        "content": "<p>but Lean is not very intelligent</p>",
        "id": 130455342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532763292
    },
    {
        "content": "<p>Is there some missing instance <code>decidable.dite</code>?</p>",
        "id": 130455351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532763329
    },
    {
        "content": "<blockquote>\n<p>Is there some missing instance <code>decidable.dite</code>?</p>\n</blockquote>\n<p><code>P</code> is just the statement that some nat is less than some other nat, right? But <code>example (a b : ℕ) : decidable (a &lt; b) := by apply_instance </code> works fine</p>",
        "id": 130455871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532764487
    },
    {
        "content": "<p>Oh I'm being an idiot. I've used <code>have</code> instead of <code>let</code> again.</p>",
        "id": 130456027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532764822
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/224\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/224\">https://github.com/leanprover/mathlib/pull/224</a></p>",
        "id": 130456430,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532765723
    },
    {
        "content": "<p>Nice one Gabriel.</p>",
        "id": 130456434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532765753
    },
    {
        "content": "<p>Apparently <code>simp</code> cannot simplify the second ite.</p>",
        "id": 130456474,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532765770
    },
    {
        "content": "<p>thanks</p>",
        "id": 130456480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532765823
    }
]