[
    {
        "content": "<p>Why is type theory defined in the Intuitionistic logic? Would it be possible to build (some kind of sufficiently strong) type theory in the First-order (classical) logic instead?</p>\n<p>I am not talking about Howard-Curry correspondence and interactive theorem provers. I am talking about type theory as a foundation for MathematiCS; in case we want to replace set theory by type theory. Are there any fundamental obstacles?</p>",
        "id": 261278227,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636735215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> I think the conceptual problem is that a type theory in classical logic would just be category / set theory. The distinctions would disappear.</p>",
        "id": 261287163,
        "sender_full_name": "Mac",
        "timestamp": 1636739397
    },
    {
        "content": "<p>I am sorry; I don't understand your answer.</p>",
        "id": 261289561,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636740441
    },
    {
        "content": "<p>A type is, essentially, a constructive/Intuitionistic set/class. That is, in classical logic, a type and a set / class would just be equivalent.</p>",
        "id": 261292400,
        "sender_full_name": "Mac",
        "timestamp": 1636741689
    },
    {
        "content": "<p>Type theory isn't defined in any \"external\" logic</p>",
        "id": 261297052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636744057
    },
    {
        "content": "<p>the initial type theories (first one by Russell &amp; Whitehead in Principia, second one by Church in his paper on simple types) were designed to do classical reasoning. In the case of Church, this is why proof assistants based on HOL get LEM out of the box. People used classical logic both inside and outside the initial type theories (i.e., when reasoning about their respective metatheory)</p>",
        "id": 261297549,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1636744319
    },
    {
        "content": "<p>Is it impossible to define a simply-typed λ-calculus as a theory in FOL? The universe would contain a superset of all correct terms and for each type you would have a unary relational operator that would tell you whether the argument is a term of the given type. I believe there is some catch but I don't know where.</p>",
        "id": 261299743,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636745416
    },
    {
        "content": "<p>you can embed anything in FOL like that</p>",
        "id": 261299931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636745531
    },
    {
        "content": "<p>well, you probably don't want an infinite set of relational operators, but you can get around that by representing types as elements of the domain and making typing a binary predicate</p>",
        "id": 261300099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636745605
    },
    {
        "content": "<p>You can certainly do this kind of syntactic embedding (and this is what you're doing when proving things about the metatheory of type theory) but whether the meta-logic satisfies LEM (for example) doesn't have anything to do with whether LEM is provable in the type theory itself</p>",
        "id": 261300881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636745999
    },
    {
        "content": "<p>That is, the fact that the metalogic is classical does not equate to the embedded logic (type theory) being classical.</p>",
        "id": 261301012,
        "sender_full_name": "Mac",
        "timestamp": 1636746058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261300099\">said</a>:</p>\n<blockquote>\n<p>well, you probably don't want an infinite set of relational operators, but you can get around that by representing types as elements of the domain and making typing a binary predicate</p>\n</blockquote>\n<p>Your suggestion sounds great for dependent type theory actually! Universe consists of all terms. And you will have an operator <code>is_a_type_of</code> that will take two terms to check the typing. However, I don't know how to avoid infinitely many functional operators in case we wanted the full range of inductive types.</p>",
        "id": 261301378,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636746231
    },
    {
        "content": "<p>You encode inductive specifications as elements of the domain too, and have a \"make inductive\" term constructor</p>",
        "id": 261301549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636746310
    },
    {
        "content": "<p>I actually do exactly this in my <a href=\"https://github.com/digama0/mm0/blob/master/examples/lean.mm1\">encoding of lean in MM0</a>, which is roughly FOL-based</p>",
        "id": 261301613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636746348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261301549\">said</a>:</p>\n<blockquote>\n<p>You encode inductive specifications as elements of the domain too, and have a \"make inductive\" term constructor</p>\n</blockquote>\n<p>Are inductive specifications terms themselves?</p>",
        "id": 261304092,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636747465
    },
    {
        "content": "<p>no, in the MM0 formalization they are elements of a different \"sort\" (it is actually multi-sorted FOL); in plain one-sorted FOL everything has to live together in the same universe but you can have predicates like <code>is_term(x)</code>, <code>is_indspec(x)</code> and assert that they are mutually disjoint</p>",
        "id": 261304246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636747558
    },
    {
        "content": "<p>This is also how type theories are translated to FOL for use with ATP programs (i.e. <code>sledgehammer</code>)</p>",
        "id": 261304476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636747678
    },
    {
        "content": "<p>(well, at least at the basic level; usually you don't go all the way to translating inductive specifications and opt for something more coarse grained that better fits the level of description of the goal)</p>",
        "id": 261305308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636748163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261304246\">said</a>:</p>\n<blockquote>\n<p>in plain one-sorted FOL everything has to live together in the same universe but you can have predicates like <code>is_term(x)</code>, <code>is_indspec(x)</code> and assert that they are mutually disjoint</p>\n</blockquote>\n<p>Note that this is just essentially reducing types to naive sets (i.e., the predicate <code>is_term</code> is equivalent to a naive set of terms), illustrating that types in classical logic are just sets / classes.</p>",
        "id": 261368694,
        "sender_full_name": "Mac",
        "timestamp": 1636821290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Not necessarily. Since both types and terms are objects in the universe here, you can have two types <code>t</code> and <code>u</code> (such that <code>is_type(t)</code> and <code>is_type(u)</code>), which are not equal (i.e. <code>t != u</code> using FOL equality), such that <code>∀ x, has_type(x, t) &lt;-&gt; has_type(x, u)</code>, i.e. <code>t</code> and <code>u</code> are extensionally equal but not FOL-equal. (The relation between FOL-equal and type theory equality notions like propositional equality and defeq is somewhat flexible, but FOL-equal has to be the strongest equality notion, so it has to mean at least defeq, and it could even mean \"syntactic equal\", if the model is sufficiently syntactic so as to make this distinction.)</p>",
        "id": 261389150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636850556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wouldn't that be just as true for naive sets though to? That is, you can have two (naive) sets <code>s</code> and <code>t</code> such that <code>s != t</code> using FOL equality but <code>forall x, x : s &lt;-&gt; x : t</code> (i.e., are extensionally equal sets -- <code>:</code> being membership).</p>",
        "id": 261389383,
        "sender_full_name": "Mac",
        "timestamp": 1636850918
    },
    {
        "content": "<p>no, because that's an axiom</p>",
        "id": 261389389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636850940
    },
    {
        "content": "<p>it's the first axiom in ZFC</p>",
        "id": 261389408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636850983
    },
    {
        "content": "<p>but I was talking about naive sets, not ZFC?</p>",
        "id": 261389451,
        "sender_full_name": "Mac",
        "timestamp": 1636851005
    },
    {
        "content": "<p>I assume by naive sets you mean that you are encoding a set theory of some description, and every set theory has an extensionality axiom</p>",
        "id": 261389463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851043
    },
    {
        "content": "<p>otherwise it's not set theory</p>",
        "id": 261389468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851052
    },
    {
        "content": "<p>I naive set is just a set <code>s</code> is defined as <code>x : s &lt;-&gt; P(x)</code> where P is predicate defining the set</p>",
        "id": 261389470,
        "sender_full_name": "Mac",
        "timestamp": 1636851056
    },
    {
        "content": "<p><code>s</code> is not an object in that encoding</p>",
        "id": 261389489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851085
    },
    {
        "content": "<p>so <code>s = t</code> is not well formed</p>",
        "id": 261389491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851091
    },
    {
        "content": "<p>fyi, by naive set, I mean a set from <a href=\"https://en.wikipedia.org/wiki/Naive_set_theory\">naive set theory</a> i.e. that ones that encounter Russell's paradox if axiomatized.</p>",
        "id": 261389549,
        "sender_full_name": "Mac",
        "timestamp": 1636851158
    },
    {
        "content": "<p>pretty sure extensionality is also the first axiom in frege's set theory axiomatization</p>",
        "id": 261389562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851191
    },
    {
        "content": "<p>in my example, both <code>x</code> and <code>s</code> are terms in first order logic and the set membership relation <code>:</code> is a relation between two a two terms, which for the set <code>s</code> is defined as <code>x : s &lt;-&gt; P(s)</code> where <code>P</code> is a the defining proposition. In our example, the set <code>terms</code> would be defined like <code>x : terms &lt;-&gt; is_term(x)</code>.</p>",
        "id": 261389623,
        "sender_full_name": "Mac",
        "timestamp": 1636851272
    },
    {
        "content": "<p>It's true that if <code>:</code> is an otherwise uninterpreted binary relation on objects then extensionality need not hold. Usually axiomatizing it is the first step in making it look like an elementhood relation</p>",
        "id": 261389645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851321
    },
    {
        "content": "<p>true, which is how russell's paradox emerges, but the theory can remain naive by simply doing as you said and leaving it uninterpreted outside the axiomatic definitions for specific sets.</p>",
        "id": 261389734,
        "sender_full_name": "Mac",
        "timestamp": 1636851435
    },
    {
        "content": "<p>Note that in some presentations of naive set theory extensionality is instead taken as the <em>definition</em> of <code>=</code>, for example <a href=\"https://en.wikipedia.org/wiki/Naive_set_theory#Equality\">here</a></p>",
        "id": 261389735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851436
    },
    {
        "content": "<p>Fair enough, when I said naive  set, I was mostly just thinking of sets defined in the way they are in Russell's paradox, but without the axiom of unrestricted comprehension restricted to specific predicates (i.e., the ones of interest). I was probably assuming that my notion was a bit more natural than it actual is.</p>",
        "id": 261389873,
        "sender_full_name": "Mac",
        "timestamp": 1636851609
    },
    {
        "content": "<p>This page (<a href=\"https://en.wikipedia.org/wiki/Extensionality\">https://en.wikipedia.org/wiki/Extensionality</a>) also calls out extensionality as a defining difference between set theory and type theory</p>",
        "id": 261389988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851736
    },
    {
        "content": "<p>My main point though is that by reduce types to predicates in FOL, they lose most of what makes them types, and they could just as easily be reinterpreted as a kind of set.</p>",
        "id": 261389996,
        "sender_full_name": "Mac",
        "timestamp": 1636851760
    },
    {
        "content": "<p>I don't believe that to be the case. To the extent that type theory is formalizable at all, it can be formalized in FOL</p>",
        "id": 261390017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851829
    },
    {
        "content": "<p>this reduction is not lossy w.r.t. the intensional aspects of type theory, but identifying types with their extensions is lossy in this sense</p>",
        "id": 261390065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636851881
    },
    {
        "content": "<p>interestingly, it's even possible to formalize intuitionistic type theory in classical FOL without LEM \"contamination\" of the internal logic</p>",
        "id": 261390162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636852047
    },
    {
        "content": "<p>Ah, oops, I think I figured out where my misunderstand was, I completely misread this statement:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261304246\">said</a>:</p>\n<blockquote>\n<p>in plain one-sorted FOL everything has to live together in the same universe but you can have predicates like <code>is_term(x)</code>, <code>is_indspec(x)</code> and assert that they are mutually disjoint</p>\n</blockquote>\n<p>I thought that you where saying that <code>x</code> is of  the <em>type</em> <code>term</code> would be encoded as <code>is_term(x)</code> or that <code>x</code> is of  type <code>indspec</code> would be encoded as <code>is_indspec(x)</code>. I for some stupid reason did not catch on to the fact that <code>indspec</code> was short for inductive specification and these where predicates about the logical structure and not about individual terms within the logic. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 261390213,
        "sender_full_name": "Mac",
        "timestamp": 1636852096
    },
    {
        "content": "<p>the idea is that <code>x</code> is some particular term, for example <code>nat</code> is an element of the universe and <code>is_term(nat)</code> holds. Similarly <code>(T. 1 + T)</code> (or some such thing) is an element of the universe and <code>is_indspec(T. 1 + T)</code> holds, and <code>nat != (T. 1 + T)</code> holds (it's not necessary to assert this, but it is simpler to keep things in different syntactic categories as distinct), and let's say <code>nat = mu(T. 1 + T)</code> where <code>mu</code> is the equivalent of the <code>inductive</code> command, which makes types from inductive specifications</p>",
        "id": 261390391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636852377
    },
    {
        "content": "<p><code>term</code> and <code>indspec</code> themselves are not objects in this encoding</p>",
        "id": 261390405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636852409
    },
    {
        "content": "<p>Yeah, that makes perfect sense now that realized my error. Sorry for the unnecessary tangent!</p>",
        "id": 261390460,
        "sender_full_name": "Mac",
        "timestamp": 1636852479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but as to the original question, that encoding is more reasoning about type theory in classical logic than doing type theory with classical logic, no? The question, as I saw it, was about that later, which I presumed to mean something like, for example, a simply typed lambda calculus where the terms are FOL terms/propositions.</p>",
        "id": 261390920,
        "sender_full_name": "Mac",
        "timestamp": 1636853179
    },
    {
        "content": "<p>You can do reasoning about the theory in this encoding, but just doing type theory is also possible. Terms are FOL terms, and typing judgments are FOL proofs. (Type theory proof terms are FOL terms, which can get cumbersome but that's mostly a display issue - they are just as cumbersome in type theory proper, but the computer is usually good at hiding the complexity)</p>",
        "id": 261391006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636853389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261390162\">said</a>:</p>\n<blockquote>\n<p>interestingly, it's even possible to formalize intuitionistic type theory in classical FOL without LEM \"contamination\" of the internal logic</p>\n</blockquote>\n<p>For this purpose, Prop cannot by modelled by a relation symbol, right?</p>",
        "id": 261489406,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636978761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> It can; you just don't have that <code>¬ (∃ x, has_type(x, p)) → ∃ x, has_type(x, ¬ p)</code> which can be read \"if <code>p</code> is not provable then <code>¬ p</code> is provable\"</p>",
        "id": 261491366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636980043
    },
    {
        "content": "<p>LEM in the outer logic means that <code>(∃ x, has_type(x, p)) ∨ ¬ (∃ x, has_type(x, p))</code> is provable but this isn't much use for finding witnesses in the inner logic</p>",
        "id": 261491511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636980156
    },
    {
        "content": "<p>In type theory, we speak solely about provability, right?</p>",
        "id": 261494119,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636981732
    },
    {
        "content": "<p>Is there any _semantics_ of type theory?</p>",
        "id": 261494584,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636981953
    },
    {
        "content": "<p>pretty hard to prove an implementation of a type theory correct without any semantics, e.g., <a href=\"http://www.sigplan.org/Awards/Dissertation/2017_kumar.pdf#page=91\">http://www.sigplan.org/Awards/Dissertation/2017_kumar.pdf#page=91</a></p>",
        "id": 261494810,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1636982070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261491511\">said</a>:</p>\n<blockquote>\n<p>LEM in the outer logic means that <code>(∃ x, has_type(x, p)) ∨ ¬ (∃ x, has_type(x, p))</code> is provable but this isn't much use for finding witnesses in the inner logic</p>\n</blockquote>\n<p>If I understand you correctly, you are saying that the \"outer\" LEM (of FOL here) <code>(∃ x, has_type(x, p)) ∨ ¬ (∃ x, has_type(x, p))</code> does not imply <code>¬ (∃ x, has_type(x, p)) → ∃ x, has_type(x, ¬ p)</code>, i.e., the LEM in the \"inner system\" (type theory). Am I right?</p>",
        "id": 261495864,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636982668
    },
    {
        "content": "<p>The latter could be written as  <code>(∃ x, has_type(x, p)) ∨ (∃ x, has_type(x, ¬ p))</code> afaik.</p>",
        "id": 261495952,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636982741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261495952\">said</a>:</p>\n<blockquote>\n<p>The latter could be written as  <code>(∃ x, has_type(x, p)) ∨ (∃ x, has_type(x, ¬ p))</code> afaik.</p>\n</blockquote>\n<p>This isn't LEM in the internal theory, because there will be undecidable statements</p>",
        "id": 261496737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983154
    },
    {
        "content": "<p>Is  <code>¬ (∃ x, has_type(x, p)) → ∃ x, has_type(x, ¬ p)</code> LEM in the internal theory?</p>",
        "id": 261496974,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636983264
    },
    {
        "content": "<p>no</p>",
        "id": 261497049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983305
    },
    {
        "content": "<p>Also the two <code>¬</code> in that formula are not the same thing, so maybe we should write them differently</p>",
        "id": 261497105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983341
    },
    {
        "content": "<p>LEM is <code>∃ x, has_type(x, p or not p)</code></p>",
        "id": 261497119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983349
    },
    {
        "content": "<p>Or more precisely, this is the claim that the type theory proves <code>p or not p</code> for some specific <code>p</code></p>",
        "id": 261497249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Type.20theory.20in.20classical.20logic.3F/near/261497249\">said</a>:</p>\n<blockquote>\n<p>Or more precisely, this is the claim that the type theory proves <code>p or not p</code> for some specific <code>p</code></p>\n</blockquote>\n<p>For any given <code>p</code>, right?</p>",
        "id": 261497797,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636983709
    },
    {
        "content": "<p>A specific, given, and in all other ways predetermined <code>p</code></p>",
        "id": 261498177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636983940
    },
    {
        "content": "<p>Can we add an axiom <code>∀ p : Prop,  p or not p</code> to our inner theory?</p>",
        "id": 261499201,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636984468
    },
    {
        "content": "<p>On the implementation-in-FOL level, it would be <code>∃ x, has_type(x, (∀ p : Prop, p or not p))</code>.</p>",
        "id": 261499332,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1636984542
    },
    {
        "content": "<p>yes, that's what LEM in the inner theory looks like</p>",
        "id": 261521051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636993382
    },
    {
        "content": "<p>What does the outer FOL representation add to the setup in this case?</p>",
        "id": 261547390,
        "sender_full_name": "Mac",
        "timestamp": 1637004815
    },
    {
        "content": "<p>It gives you a language to express metatheoretic properties of the type theory, e.g., soundness: <code>¬ (∃ x, has_type(x, false))</code></p>",
        "id": 261571832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637016566
    },
    {
        "content": "<p>Another major advantage of this representation is that the rules for proof are simply standard FOL (with axioms about <code>has_type</code>), rather than requiring a custom verifier. This is very useful for connecting DTT to standard logic, since FOL is much more \"canonical\" in its design than type theory, which has many knobs at the foundation like what things are defeq to what other things</p>",
        "id": 261585104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637024833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> <br>\nYou can also try to embed type theory directly into classical logic, that is what I am trying to do with <a href=\"https://obua.com/publications/practical-types/1/\">Practical Types</a>. <br>\nAt the moment though I am occupied with the target of the embedding. I believed initially it is first-order logic, but it actually is <a href=\"https://obua.com/publications/philosophy-of-abstraction-logic/1/\">Abstraction Logic</a>. I believe type theory will embed very naturally into Abstraction Logic just by means of axioms; I believe that because I think that <em>any</em> sensible logic can be embedded into Abstraction Logic via axioms. That might be easy to show in principle just by embedding first-order logic into Abstraction Logic, and then cite <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's work for the other embeddings <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 262735040,
        "sender_full_name": "Steven Obua",
        "timestamp": 1637867410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have a writeup somewhere about how you embed Lean into mm0? I checked out the link, but that example is too dense for me to understand it easily.</p>",
        "id": 262736019,
        "sender_full_name": "Steven Obua",
        "timestamp": 1637868608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"429698\">@Steven Obua</span> No, it is still unfinished and on hiatus, so I have only gotten as far as the axioms (I would like to be producing proofs from lean export files at some point). The rules for inductives are pretty complicated, because we basically have to simulate a program that reads the indspec and decides whether it is strictly positive and implements all the edge case stuff right. But feel free to ask about how the predicates work or something.</p>\n<p>At a high level it's not too hard to see what it's doing: we have a sort for terms/types and there is a predicate Gamma |- e : A that has axioms corresponding to the rules of the judgment. <a href=\"https://github.com/digama0/mm0/blob/master/examples/lean.mm1#L129-L138\">These rules</a> should all be fairly recognizable from the <a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">lean type theory</a> paper, except possibly for the one that has to evaluate a substitution. (Here the complication is that substitution is not actually a type operator, it is a metafunction that operates at the level of terms, so we need a bunch of rules to describe what it does.)</p>",
        "id": 262782066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637923110
    },
    {
        "content": "<p>This paper is perfect, that is probably what I was looking for in the first place, thanks!</p>",
        "id": 262785353,
        "sender_full_name": "Steven Obua",
        "timestamp": 1637925331
    }
]