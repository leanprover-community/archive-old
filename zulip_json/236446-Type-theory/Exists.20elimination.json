[
    {
        "content": "<p>I have read that the kernel of Lean 3 works proof irrelevant. All proofs of a theorem are judgmentally equal. Does that mean that if I have constructed a proof p  : exists x, P x where P : A -&gt; Prop, A : Type, then there is no way to extract an actual w : A from p for which P w is true? </p>\n<p>Is it possible to extract witnesses from existence proofs in Lean 2? I really like this feature of (intuitionistic) type theory, and I would like to use it. How is the situation in Coq?</p>",
        "id": 270027814,
        "sender_full_name": "Nico Beck",
        "timestamp": 1643634507
    },
    {
        "content": "<p>Coq extraction (to OCaml/Haskell/Scheme) removes all occurrences of terms in <code>Prop</code>. That is, if you want to get witnesses, you have to define them in the <code>Set</code> or <code>Type</code> sorts. People usually do this with sigma types, e.g., they write <code>{ x : nat | prime x}</code> as the type of a \"fancy\" existence proof of a primality checker that should extract well (and you can also easily get the proof of primality inside Coq when you need it).</p>\n<p>To my knowledge, Lean doesn't have a similar extraction like Coq's to OCaml etc., but others may know more about the closest functionality.</p>",
        "id": 270028189,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1643634705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426290\">@Nico Beck</span> In Lean you would have to use the axiom of choice to pull out a witness.</p>",
        "id": 270028591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643634890
    },
    {
        "content": "<p>But again, if you have a term of the subtype <code>{x : A // P x}</code>, then you can of course get the witness constructively.</p>",
        "id": 270028687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643634942
    },
    {
        "content": "<p>@Johan Commelin  I have learned that in intuitionistic logic a proof of \\exists x : A, P x is the same as a pair (x, p) where x : A and p : P x. (I.e. exists is just a Sigma-type). If exists is implemented like this, then I shouldn't need the axiom of choice to extract a witness from a proof. </p>\n<p>I have tried to use Sigma types in Lean, but I can not form \\Sigma x : A, P x if P is of type P: A \\to Prop. I can only do it if P is of type P : A\\to Type. My question is basically if there is a version of Lean where exists is implemented as a \\Sigma type (maybe I am misunderstanding something). What about the HoTT version of Lean 2? Can I use \\Sigma x : A, P x : Prop in HoTT?</p>",
        "id": 270029420,
        "sender_full_name": "Nico Beck",
        "timestamp": 1643635258
    },
    {
        "content": "<p>You are exactly looking for <code>{x : A // P x}</code>.</p>",
        "id": 270029777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643635404
    },
    {
        "content": "<p>But not that this is not necessarily a subsingleton.</p>",
        "id": 270029843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643635437
    },
    {
        "content": "<p>If you want that, then you could stick a <code>trunc</code> in front of it.</p>",
        "id": 270029929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643635459
    },
    {
        "content": "<p>Okay, thank you :) Where can I read about {x : A // P x }? Is it in the 'theorem proving in Lean' book?</p>",
        "id": 270030084,
        "sender_full_name": "Nico Beck",
        "timestamp": 1643635533
    },
    {
        "content": "<p>Probably. It's notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a></p>",
        "id": 270030595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643635775
    },
    {
        "content": "<p>If I may: what's the difference between sigma and subtype?</p>",
        "id": 270033979,
        "sender_full_name": "bottine",
        "timestamp": 1643637216
    },
    {
        "content": "<p>subtype is for <code>P : X → Prop</code> as opposed to <code>P : X → Type u</code>.</p>",
        "id": 270034104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643637254
    },
    {
        "content": "<p>OK, and is there a reason for the distinction? I understand (or somehow am OK) with the distinction between Exists and Sigma: Exists behaves as the subsingleton truncation of Sigma (right?), but wouldn't Sigma subsume subtype?</p>",
        "id": 270034450,
        "sender_full_name": "bottine",
        "timestamp": 1643637393
    },
    {
        "content": "<p>It probably has to do with <code>Prop</code> being impredicative. But I really don't know. I've never really thought about these issues.</p>",
        "id": 270034570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643637439
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 270034627,
        "sender_full_name": "bottine",
        "timestamp": 1643637464
    },
    {
        "content": "<p>By the way, is there a kind of \"LEAN book\" reference mirroring the HoTT book: somewhere explaining the type theory underlying LEAN and how things are built on it?</p>",
        "id": 270034831,
        "sender_full_name": "bottine",
        "timestamp": 1643637535
    },
    {
        "content": "<p>There is <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> and <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 270035216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643637660
    },
    {
        "content": "<p>These are good references, indeed :)</p>",
        "id": 270036749,
        "sender_full_name": "bottine",
        "timestamp": 1643638298
    },
    {
        "content": "<p>here is the explanation for why Coq distinguishes sigma types: <a href=\"https://cstheory.stackexchange.com/questions/21836/why-does-coq-have-prop\">https://cstheory.stackexchange.com/questions/21836/why-does-coq-have-prop</a></p>",
        "id": 270036925,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1643638360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198375\">Karl Palmskog</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Exists.20elimination/near/270028189\">said</a>:</p>\n<blockquote>\n<p>To my knowledge, Lean doesn't have a similar extraction like Coq's to OCaml etc., but others may know more about the closest functionality.</p>\n</blockquote>\n<p>The closest analogue is the Lean interpreter (or in Lean 4, the compiler). Interpreted/compiled code also has no runtime representation for <code>p : Prop</code>. Functions that use constants like <code>choice</code> in ways that are relevant for computation (e.g., not just inside proofs) are marked <code>noncomputable</code> and the interpreter/compiler won't generate code for them.</p>",
        "id": 270037712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643638711
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a> are both special cases of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma\">docs#psigma</a>.</p>",
        "id": 270121687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643670359
    }
]