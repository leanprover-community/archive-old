[
    {
        "content": "<p>Consider the set of closed typeable terms whose type is a term of Type 0 (we are working within Lean's underlying type theory).</p>\n<p>Is there some \"natural\" function from that to non-negative integers such that the inverse image of any non-negative integer is finite?</p>\n<p>We don't require that judgmentally equal terms are mapped to the same integer.</p>\n<p>We could use the length of the defining string when fully elaborated in Lean but that is pretty arbitrary.</p>",
        "id": 225711874,
        "sender_full_name": "Roman Bars",
        "timestamp": 1612886563
    },
    {
        "content": "<p>Going by your topic title, isn't term depth an example of such a function?</p>",
        "id": 225821592,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612955705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217819\">Josh Chen</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Measuring.20the.20complexity.20of.20terms/near/225821592\">said</a>:</p>\n<blockquote>\n<p>Going by your topic title, isn't term depth an example of such a function?</p>\n</blockquote>\n<p>Is there a reference discussing that? I've been trying to find something but so far unsuccessfully.</p>",
        "id": 225822320,
        "sender_full_name": "Roman Bars",
        "timestamp": 1612956131
    },
    {
        "content": "<p>Your finiteness criterion is not so easy to fulfill. E.g. if you take the length of the string, you have <code>λ x, x</code>, <code>λ y, y</code> etc. all mapped to 5. This could be solved by working up to α-equality, but there may be other instances of this problem.</p>\n<p>What do you want to do with this function?</p>",
        "id": 225823567,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1612956957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217819\">Josh Chen</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Measuring.20the.20complexity.20of.20terms/near/225821592\">said</a>:</p>\n<blockquote>\n<p>Going by your topic title, isn't term depth an example of such a function?</p>\n</blockquote>\n<p>What is the term depth of <code>x</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 225826311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612958808
    },
    {
        "content": "<p>38</p>",
        "id": 225826674,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612959064
    },
    {
        "content": "<p>I may be thinking a lot less syntactically than the question means to ask; consider the AST depth of the normalized term (I think Lean still has normalization of closed terms?)</p>",
        "id": 225826781,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612959145
    },
    {
        "content": "<p>Ok... this is beyond what I know about Leans internals...</p>",
        "id": 225827241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612959470
    },
    {
        "content": "<p>Are you sure its not 5, since <code>37</code> is <code>bit1 (bit0 (bit1 (bit0 (bit0 1))))</code>?</p>",
        "id": 225827410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612959595
    },
    {
        "content": "<p>Sure, if that's what the constructors are <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 225827471,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612959618
    },
    {
        "content": "<p>It's not what the constructors are, but it is what <code>#check 37</code> prints with <code>pp.numerals</code> set to <code>false</code></p>",
        "id": 225827497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612959640
    },
    {
        "content": "<p><code>#reduce 37</code> gives the term you're expecting</p>",
        "id": 225827525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612959667
    },
    {
        "content": "<p>*whatever the normalized term is, which I guess is what <code>#reduce</code> does. I'm not very familiar with Lean's specific type theory.</p>",
        "id": 225827621,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612959733
    },
    {
        "content": "<p>But I understand that if <span class=\"user-mention\" data-user-id=\"387766\">@Roman Bars</span> wants to do something implementation-related you'd need to consider terms more syntactically.</p>",
        "id": 225827872,
        "sender_full_name": "Josh Chen",
        "timestamp": 1612959898
    },
    {
        "content": "<p>A less synthetic approach would be to take the depth of the typing derivation of the term. There are a finite number of finitely branching rules so the set of terms with a given depth of typing derivation is finite</p>",
        "id": 225847621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612968964
    },
    {
        "content": "<p>To handle definitions, you would also have to include the typing derivation steps involved in filling the environment with those definitions before you use them</p>",
        "id": 225847815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612969046
    },
    {
        "content": "<p>I don't think it's a good idea to rely on the result of <code>#reduce</code> because it doesn't always terminate</p>",
        "id": 225847982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612969107
    },
    {
        "content": "<p>There could still be trouble with user-defined types, e.g. <code>Bool1 = true1 | false1</code> etc. with <code>id1 := λ (x : Bool1), x</code> etc. The identity functions would all have the same typing derivation depth, even if the typing derivation of <code>Bool1</code> is included in the measure. If we can pretend that Lean doesn't have user-defined data types (so only sums and products or W-types or something), that might work.</p>\n<p>(Supremely hacky solution: encode the names into the output. But then you might as well Gödel-encode the terms. :P)</p>",
        "id": 225852247,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1612970795
    },
    {
        "content": "<p>no, the typing derivation depth will count variables as de bruijn</p>",
        "id": 225860622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973485
    },
    {
        "content": "<p>because the proof that de bruijn variable <code>#n</code> is well typed has length n</p>",
        "id": 225860727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973517
    },
    {
        "content": "<p>Alternatively, if you want to count these alpha-equal terms as distinct, you just have to add in the construction of the <code>name</code> itself to the typing derivation</p>",
        "id": 225861064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973599
    },
    {
        "content": "<p>so <code>\\lam x, x</code> and <code>\\lam y, y</code> will have the same typing derivation length but <code>\\lam blabla, blabla</code> will be longer</p>",
        "id": 225861240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973642
    },
    {
        "content": "<p>same thing for the names of constructors in an inductive data type</p>",
        "id": 225861333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973666
    },
    {
        "content": "<p>Yes, but you can construct infinitely many distinct <code>id_i</code> functions with the same type derivation length, even disregarding the naming of the variable, because you can have infinitely many distinct <code>Bool_i</code>. If you add the name lengths, I guess that works, assuming a finite character set.</p>",
        "id": 225861679,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1612973758
    },
    {
        "content": "<blockquote>\n<p>you can have infinitely many distinct Bool_i.</p>\n</blockquote>\n<p>The theory I use in the paper uses structural typing, so these types are all considered the same</p>",
        "id": 225861937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973813
    },
    {
        "content": "<p>Okay, then that's not a problem.</p>",
        "id": 225862056,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1612973841
    },
    {
        "content": "<p>but if you want to recover nominal typing you can stick an index on the mu constructor and that's the measure that increases</p>",
        "id": 225862079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973847
    }
]