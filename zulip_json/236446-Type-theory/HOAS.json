[
    {
        "content": "<p>I have a quick terminology question, not Lean-specific, but I imagine there are people here knowing much more about these things than I do.<br>\nI am implementing a first order logic, and I encoded the formulas as follows (I am only including the relevant case of the universal quantifier)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">universal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n</code></pre></div>\n<p><code>D</code> is some domain over which the quantification ranges, and when encoding <code>∀ x ∈ D, φ(x)</code>, <code>φ</code> is encoded as an actual Lean function of type <code>D -&gt; formula</code>, and <code>φ(x)</code> is an actual function application. So the encoding of the syntax does not contain variables, substitutions are not dealt with explicitly, etc, and instead all of this is delegated to the existing implementation in the meta-language (e.g. Lean).<br>\nCan this be called a higher order abstract syntax? If not, is there a better name for such an encoding?</p>",
        "id": 243748402,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624518307
    },
    {
        "content": "<p>Yes, this is HOAS. You should be aware that HOAS formulas are problematic in foundations as \"full featured\" as Coq or Lean, because they allow the creation of impossible terms that depend on choice or involve type equality or other things like that, which can make the set of formulas behave strangely. An obvious example is that the set of formulas in a language is generally countable by definition, while your HOAS formulas are provably uncountable if D is infinite</p>",
        "id": 243782725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624540159
    },
    {
        "content": "<p>Thanks. Indeed, I did notice myself the problems you mention, but this worked mostly well so far. Do you know whether there are some conditions I could impose on the <code>D -&gt; formula</code> argument that would prohibit the construction of such exotic terms?</p>",
        "id": 243791785,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624543880
    },
    {
        "content": "<p>The obvious condition is that it is generated by a formula :P</p>",
        "id": 243801847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624547962
    },
    {
        "content": "<p>You can sometimes get away with some kind of parametricity or naturality condition</p>",
        "id": 243801991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624548025
    },
    {
        "content": "<p>but I think it depends on the details of the system</p>",
        "id": 243802019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624548040
    },
    {
        "content": "<p>What's the difference between HOAS and lambda-tree syntax? I've seen the latter in <a href=\"https://abella-prover.org\">https://abella-prover.org</a></p>",
        "id": 243873473,
        "sender_full_name": "Billy Price",
        "timestamp": 1624593765
    },
    {
        "content": "<p>I have never heard of this before (I am very much a beginner though). After your question I searched a little and only skimmed through <a href=\"https://arxiv.org/abs/1908.03619\">this paper</a> where they extend ML to lambda tree syntax. Honestly, I failed to understand the difference. It seems to me they introduce a new constructor <code>=&gt;</code> called binding abstraction, and instead of representing abstractions by plain functions in the language, they use this instead. I don't know though</p>",
        "id": 243915238,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624627736
    }
]