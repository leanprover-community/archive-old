[
    {
        "content": "<p>(Naive) set theory is simple to state, and in order to prove certain things we need the axiom of choice, which is equivalent to the well-ordering theorem. I notice that in type theory, sets are fairly complicated types compared to lists which are very easy to define and work with. Moreover, it seems that lists are inherently well-ordered by construction. Would there be any benefits to just using lists in all the places traditional math uses sets? We'd have to do some extra work to prove things up to permutation of the lists, but it seems like in this case we wouldn't need the axiom of choice for anything since all lists are already well-ordered. What am I misconstruing here?</p>",
        "id": 197701447,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589553762
    },
    {
        "content": "<p>(Thinking about this as I start on page 6 trying to formalize things in the book \"Algebra: Chapter 0\" by Paolo Aluffi)</p>",
        "id": 197702363,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589554111
    },
    {
        "content": "<p>I think the main point here is that the replacement for sets when we do proof in type theory is the type, rather than sets or lists</p>",
        "id": 197702628,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589554210
    },
    {
        "content": "<p>Lean's notion of a set is more similar to a subset, and you're right that lists are inherently ordered</p>",
        "id": 197702789,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589554258
    },
    {
        "content": "<p>But for example, I'm trying to do basic things like define an equivalence relation on sets or what a partition is, and it seems like it might be easier to do these things on a list</p>",
        "id": 197702849,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589554283
    },
    {
        "content": "<p>Note that a list is always finite, which might occasionally get in the way of mathematicians.</p>",
        "id": 197703022,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589554346
    },
    {
        "content": "<p>Why does a list have to be finite? In Haskell I believe you can define infinite lists. Maybe that requires laziness though</p>",
        "id": 197703154,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589554413
    },
    {
        "content": "<p>Yeah it fundamentally does require laziness</p>",
        "id": 197703187,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589554432
    },
    {
        "content": "<p>If type is essentially equivalent to set, then can I do things like define a partition of a type etc? Why even bother defining a set as a specific type then</p>",
        "id": 197703976,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589554745
    },
    {
        "content": "<p>Note that even a haskell style infinite list is countable</p>",
        "id": 197704622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589554985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon Brown</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Math.20on.20lists/near/197703976\">said</a>:</p>\n<blockquote>\n<p>If type is essentially equivalent to set, then can I do things like define a partition of a type etc? Why even bother defining a set as a specific type then</p>\n</blockquote>\n<p>Yup! Take a look at equivalence relations in lean. Lean's set resembles subsets, ie you can think of <code>set A</code> as a subset of the type A</p>",
        "id": 197704632,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589554989
    },
    {
        "content": "<p>But I don't think you have identified correctly why choice comes up in set theory. It's quite simple to define lists in set theory, and they have all the same properties as type theory lists</p>",
        "id": 197704805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589555048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Math.20on.20lists/near/197703187\">said</a>:</p>\n<blockquote>\n<p>Yeah it fundamentally does require laziness</p>\n</blockquote>\n<p>or coinductive types, laziness gives a sort of over-approximation of colists</p>",
        "id": 197704852,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589555066
    },
    {
        "content": "<p>In maths they are usually called \"sequences\" instead of \"lists\" though</p>",
        "id": 197704892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589555080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247064\">Matt Earnshaw</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Math.20on.20lists/near/197704852\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Math.20on.20lists/near/197703187\">said</a>:</p>\n<blockquote>\n<p>Yeah it fundamentally does require laziness</p>\n</blockquote>\n<p>or coinductive types, laziness gives a sort of over-approximation of colists</p>\n</blockquote>\n<p>Yeah this is a good point - in Haskell the least fixed point and greatest fixed point coincide so there's not much of a distinction but in other languages you can do infinite lists in other ways</p>",
        "id": 197705006,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589555122
    },
    {
        "content": "<p>So as I'm trying to formalize stuff in this intro abstract algebra book I should be doing everything using generic types, e.g. a : Type u, rather than using  the set type?</p>",
        "id": 197706929,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589555783
    },
    {
        "content": "<p>Yes</p>",
        "id": 197707074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589555852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon Brown</span> there's a certain knack to it. If you run through various mathematical examples of statements in abstract algebra then people who know mathlib will be able to point you to the way these things are done in Lean. <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">Here is an approximation to what we have right now</a>. In each cases these ideas have been successfully ported to type theory and behave as expected.</p>",
        "id": 197718432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589560648
    }
]