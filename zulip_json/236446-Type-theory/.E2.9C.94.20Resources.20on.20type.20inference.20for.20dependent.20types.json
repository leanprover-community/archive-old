[
    {
        "content": "<p>As far as I know, the best theoretically-motivated approach is bidirectional typechecking, e.g. in this <a href=\"https://www.cl.cam.ac.uk/~nk480/bidir-survey.pdf\">survey</a>. However (again, afaik) there isn't really a theory of what Lean specifically does - it is a rather complicated algorithm based on higher-order unification and metavariables which encapsulate their local environment. Metavariables represent \"holes\" in the expression to be filled in at some later point. An early incarnation of these appeared in Conor McBride's <a href=\"http://www.lfcs.inf.ed.ac.uk/reports/00/ECS-LFCS-00-419/ECS-LFCS-00-419.pdf\">thesis</a>. Metavariables can be filled (\"elaborated\") in any order - this mechanism is known as <em>postponing</em>. This can generally infer much more than the bidirectional approach. The Lean 4 metaprogramming book describes various practical aspects, e.g. <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/elaboration.md#term-elaboration-1\">here</a>.</p>",
        "id": 289008409,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657326879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244748\">ohhaimark</span> has marked this topic as resolved.</p>",
        "id": 289008889,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657327552
    },
    {
        "content": "<p>This article <a href=\"https://leanprover.github.io/reference/expressions.html#expression-syntax\">https://leanprover.github.io/reference/expressions.html#expression-syntax</a> explains how Lean kernel determines the type of a fully elaborated expression. It may help better understand dependent types in general.</p>",
        "id": 289016085,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657338042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244748\">@ohhaimark</span> I fond the survey posed by Wojceicg very useful. When it came to <em>implementing</em> the algorithm, I found the tutorial <a href=\"https://davidchristiansen.dk/tutorials/nbe/\">checking dependent types with normalization by evaluation: a tutorial by david thrane christiansen</a> to be the most hands-on. </p>\n<p>Here's a repo with the same implemented in haskell, along with papers I found enlightening when learning this stuff: <a href=\"https://github.com/bollu/minitt\">https://github.com/bollu/minitt</a></p>",
        "id": 289076572,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1657421540
    }
]