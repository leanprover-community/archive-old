[
    {
        "content": "<p>This can be a stupid question, but what are the alternatives to encode second-order logic in dependent types? </p>\n<p>Image something like this hypothetical second-order language:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">forall</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">GreatGeneral</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">Napoleon</span>\n</code></pre></div>\n<p>I can only think in the following Lean encoding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">GreatGeneral</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Napoleon</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n <span class=\"kd\">def</span> <span class=\"n\">my</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">GreatGeneral</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">Napoleon</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This gives me that <code>my</code> is parametrized by any predicate  <code>u → Prop</code> such as <code>P</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">my</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>But can I internalize the quantifier over predicates? Maybe Friday and I am not thinking hard enough...</p>",
        "id": 277435006,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1648826764
    },
    {
        "content": "<p>Is <code>def my := \\forall (P : u -&gt; Prop), ...</code> and then the rest what you mean?</p>",
        "id": 277436127,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1648827303
    },
    {
        "content": "<p>I am just naming the formula...</p>",
        "id": 277438099,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1648828101
    },
    {
        "content": "<p>I made some editions to the message above... does it clarify?</p>",
        "id": 277438340,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1648828225
    },
    {
        "content": "<p>The question can be simplified, how can we encode in dependent types, or concretely in Lean, a formula such as <code>∀ P, ∀ x, P x</code> that is a second-order formula</p>",
        "id": 277438610,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1648828335
    },
    {
        "content": "<p>But if you do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">GreatGeneral</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">Napoleon</span>\n <span class=\"k\">#check</span> <span class=\"n\">my</span>\n</code></pre></div>\n<p>then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">my</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>So it is no longer parametrized by <code>P</code>, that's the way I interpreted it. Sorry if this is not what you mean</p>",
        "id": 277438796,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1648828422
    },
    {
        "content": "<p>Here is another example: you can state the induction principle for natural numbers as a single proposition quantifying over all predicates on <code>ℕ</code> (in fact, you can also prove this statement).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">statement_of_induction_for_nat</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 277439162,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648828541
    },
    {
        "content": "<p>Or like you can do the second order definition of false, <code>def falsehood : Prop := ∀ p : Prop, p</code></p>",
        "id": 277439355,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1648828623
    },
    {
        "content": "<p>Oh good, yes it makes sense the examples. So second-order logic is easily encoded. I guess my confusion was given by an unexpected Lean 4 behaviors:</p>\n<p>The example from <span class=\"user-mention\" data-user-id=\"329243\">@Horatiu Cheval</span> parsed without errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">my</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">GreatGeneral</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">Napoleon</span>\n</code></pre></div>\n<p>But if I omit the type of P:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">GreatGeneral</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Napoleon</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n <span class=\"kd\">def</span> <span class=\"n\">my</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">GreatGeneral</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">Napoleon</span>\n <span class=\"k\">#check</span> <span class=\"n\">my</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Than I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Test.lean</span>    <span class=\"mi\">31</span>  <span class=\"mi\">41</span> <span class=\"n\">error</span>           <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n   <span class=\"n\">P</span>\n <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"bp\">?</span><span class=\"n\">m.50</span> <span class=\"o\">(</span><span class=\"n\">lsp</span><span class=\"o\">)</span>\n <span class=\"n\">Test.lean</span>    <span class=\"mi\">31</span>  <span class=\"mi\">49</span> <span class=\"n\">error</span>           <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n   <span class=\"n\">P</span>\n <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"bp\">?</span><span class=\"n\">m.50</span> <span class=\"o\">(</span><span class=\"n\">lsp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277440819,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1648829179
    },
    {
        "content": "<p>Lean doesn't like to infer function types for variables by seeing them on the left of an application. I'm not entirely sure why, but the type is often underdetermined since it could be a dependent pi type</p>",
        "id": 277441457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648829421
    }
]