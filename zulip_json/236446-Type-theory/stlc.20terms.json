[
    {
        "content": "<p>Is this correct (in Haskell)? Are the types for the var term and the bound variable in the abs term the same or should they differ?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Nat</span> <span class=\"ow\">=</span> <span class=\"kt\">O</span> <span class=\"o\">|</span> <span class=\"kt\">S</span> <span class=\"kt\">Nat</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">Atomic</span> <span class=\"o\">|</span> <span class=\"kt\">Arrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">Nat</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">Nat</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kt\">Expr</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Term</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Expr</span><span class=\"p\">]</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Proof</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Context</span><span class=\"p\">,</span> <span class=\"kt\">Expr</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- Typing rules</span>\n\n<span class=\"nf\">applyVar</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Expr</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Proof</span>\n<span class=\"nf\">applyVar</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">elem</span> <span class=\"n\">e</span> <span class=\"n\">c</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n<span class=\"nf\">applyApp</span> <span class=\"ow\">::</span> <span class=\"kt\">Proof</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Proof</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Proof</span>\n<span class=\"nf\">applyApp</span> <span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"kt\">Arrow</span> <span class=\"n\">s11</span> <span class=\"n\">s12</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">))</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s11</span> <span class=\"o\">==</span> <span class=\"n\">s2</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">s12</span><span class=\"p\">))</span> <span class=\"kr\">else</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n<span class=\"nf\">applyApp</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n<span class=\"nf\">applyAbs</span> <span class=\"ow\">::</span> <span class=\"kt\">Proof</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Proof</span>\n<span class=\"nf\">applyAbs</span> <span class=\"p\">(((</span><span class=\"kt\">Var</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">es</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">))</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">es</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"n\">s1</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">Arrow</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"p\">))</span>\n<span class=\"nf\">applyAbs</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Example:</span>\n\n<span class=\"cm\">*Main&gt; applyApp (applyVar [(Var O, Arrow Atomic Atomic), (Var (S O), Atomic)] (Var O, (Arrow Atomic Atomic))) (applyVar [(Var O, Arrow Atomic Atomic), (Var (S O), Atomic)] (Var (S O), Atomic))</span>\n<span class=\"cm\">([(Var O,Arrow Atomic Atomic),(Var (S O),Atomic)],(App (Var O) (Var (S O)),Atomic))</span>\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 241988211,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623187283
    },
    {
        "content": "<p>I think you want <code>applyVar</code> and similar definitions to return the type of the expression, rather than returning a context</p>",
        "id": 241988503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623187446
    },
    {
        "content": "<p>the context should be an additional argument to all the functions like a reader monad</p>",
        "id": 241988524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623187465
    },
    {
        "content": "<p>Your typing rules allow a single variable to have multiple types, which is not correct, or at least will significantly complicate substitution</p>",
        "id": 241988899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623187669
    },
    {
        "content": "<p>Are you thinking in terms of how to make it get the type of a given expression in a given context?</p>",
        "id": 241989148,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623187796
    },
    {
        "content": "<p>yes, typecheckers usually have two functions, mutually defined: give me the type of a term, or check that this term has this type. The signatures are something like <code>Context -&gt; Term -&gt; option Type</code> and <code>Context -&gt; Term -&gt; Type -&gt; bool</code></p>",
        "id": 241989693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623188049
    },
    {
        "content": "<p>the second one is easily defined in terms of the first:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">infer</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n<span class=\"o\">...</span>\n\n<span class=\"nf\">check</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">check</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"ow\">=</span> <span class=\"kr\">case</span> <span class=\"n\">infer</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"kr\">of</span>\n  <span class=\"kt\">Just</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">ty</span>\n  <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">False</span>\n</code></pre></div>",
        "id": 241989967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623188173
    },
    {
        "content": "<p>If you use <code>error</code> for error handling, then these can have type <code>Type</code> and <code>Unit</code> respectively, although that might cause haskell to delete calls to the unit function</p>",
        "id": 241990150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623188272
    },
    {
        "content": "<p>I see. I wasn't going for a type checker, but that was going to be the next attempt. Thank you. Do I have the data definitions right, especially in regard to the types for the var term and the bound variable in the abs term? Are the var terms just identifiers that can be added to the context and used as bound variables in abstraction?</p>",
        "id": 241990505,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623188437
    },
    {
        "content": "<p>There are two general approaches here, known as \"named variables\" vs \"de bruijn variables\". You are using the \"named variables\" approach, even though the names are numbers here (they could be strings as well). The named variables approach has the advantage that you don't need to define or think about \"lifting\" terms when they go under a binder, but you do have to check for bound variable capture. de Bruijn variables refer to a binder by the number of nested binders, which makes alpha renaming and substitution a bit easier but adds lifting, and also makes it harder to read the resulting terms because the names of variables are implicit</p>",
        "id": 241992261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623188957
    },
    {
        "content": "<p>If you were to use the de bruijn variables approach, <code>Abs</code> would look like <code>Abs Type Term</code>, with no <code>Nat</code> argument since it always introduces the variable now named 0 and everything else shifts up</p>",
        "id": 241992380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623189015
    },
    {
        "content": "<p>I see. So the Term and Type data definitions are right for the named variables approach? I think Coq and Lean use de bruijn variables?</p>",
        "id": 241992880,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623189334
    },
    {
        "content": "<p>Yes. Lean uses a combination of named and de bruijn variables called \"locally nameless\": variables inside a term are de bruijn, but binders are \"opened\" when they enter the local context, at which point they are replaced with \"local constants\" that are basically named variables</p>",
        "id": 241994045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623190038
    },
    {
        "content": "<p>HOL Light implements STLC using the named variables approach</p>",
        "id": 241994165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623190109
    },
    {
        "content": "<p>Interesting. Thank you!</p>",
        "id": 241994469,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623190259
    },
    {
        "content": "<p>Is there a base type built into the STLC for Coq and Lean, or do inductive types take the place of that?</p>",
        "id": 241997092,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623192097
    },
    {
        "content": "<p>Base types are only needed when there are no type constructors other than things like arrow. Practical systems will usually have some specific types there. Lean has a bunch of \"base types\": <code>Type u</code> and <code>Prop</code>, inductive types, and axiomatic constants</p>",
        "id": 241997480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623192437
    },
    {
        "content": "<p>HOL Light has <code>bool</code> (aka <code>Prop</code>) and <code>ind</code> (an infinite type used to build <code>nat</code>) as base types</p>",
        "id": 241997620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623192539
    },
    {
        "content": "<p>And types also become included as terms as an extension to the STLC?</p>",
        "id": 241997963,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623192824
    },
    {
        "content": "<p>In dependently typed languages, types are also terms, so lambda and variables also appear as types</p>",
        "id": 241999031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193614
    },
    {
        "content": "<p>well, even plain STLC often has type variables, but they are a separate class from regular variables. That's probably closer to HOL though</p>",
        "id": 241999121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193683
    },
    {
        "content": "<p>It's not like adding another constructor like <code>data Term = Var Nat | App Term Term | Abs Nat Type Term | TypeC Type</code>?</p>",
        "id": 241999827,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623194289
    },
    {
        "content": "<p>No, in DTT you have one inductive type containing all of the constructors of <code>Type</code> and <code>Term</code></p>",
        "id": 242001800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196033
    },
    {
        "content": "<p>that has the side effect of making <code>Abs</code> a type constructor and <code>Arrow</code> a term constructor, because the two syntactic classes are unified</p>",
        "id": 242001822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196064
    },
    {
        "content": "<p>If you have an embedding like <code>TypeC</code> that only means that every type is a term, but doesn't permit using <code>App</code> and <code>Abs</code> in types</p>",
        "id": 242001916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196142
    },
    {
        "content": "<p>for example <code>list A</code> is a type in lean which can be rendered <code>App (Const \"List\") (Var 0)</code>, where <code>App</code> is the same <code>App</code> as used on terms</p>",
        "id": 242001963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196196
    },
    {
        "content": "<p>You couldn't use <code>App (TypeC (Const \"List\")) ((TypeC (Var 0))</code>?<br>\nWould unifying them like that imply that every term is a type? That isn't true right?</p>",
        "id": 242002354,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623196503
    },
    {
        "content": "<p>That would be a <code>Term</code>, but not a <code>Type</code></p>",
        "id": 242002710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196843
    },
    {
        "content": "<p>we want <code>List A</code> to be a type</p>",
        "id": 242002726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623196858
    },
    {
        "content": "<p>I see. But does unifying them in one inductive type remove the distinction between terms and types altogether? Aren't there base terms that are not types?</p>",
        "id": 242003018,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623197120
    },
    {
        "content": "<p>I thought all types were terms, but not all terms were types.</p>",
        "id": 242003045,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623197157
    },
    {
        "content": "<p>Is this right? Do I need to worry about the fact that inserting a value into the context that already has the value does not give an error, but overwrites the existing type for it?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- Modified from https://softwarefoundations.cis.upenn.edu/plf-current/Typechecking.html</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">Atomic</span> <span class=\"o\">|</span> <span class=\"kt\">Arrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">String</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span>\n\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">v</span> <span class=\"n\">gamma</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Arrow</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty11</span> <span class=\"o\">==</span> <span class=\"n\">ty2</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"n\">ty1</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">ty1</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">tm1</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">Arrow</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList [(\"a\", Atomic)]) (Var \"a\")</span>\n<span class=\"cm\">Just Atomic</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList [(\"a\", Atomic), (\"b\", (Arrow Atomic Atomic))]) (App (Var \"b\") (Var \"a\"))</span>\n<span class=\"cm\">Just Atomic</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList [(\"b\", Atomic)]) (Abs \"a\" Atomic (Var \"b\"))</span>\n<span class=\"cm\">Just (Arrow Atomic Atomic)</span>\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 242012825,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623207487
    },
    {
        "content": "<p>I can't prove anything with this in its current form, correct? Not even limited propositional logic? What is the next minimal extension required to do that?</p>",
        "id": 242147274,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623284745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/stlc.20terms/near/242003018\">said</a>:</p>\n<blockquote>\n<p>I see. But does unifying them in one inductive type remove the distinction between terms and types altogether? Aren't there base terms that are not types?</p>\n</blockquote>\n<p>In DTT, the distinction between types and terms is a matter of typechecking, not syntax. A type is something whose type is <code>*</code> (in a haskell like language) or <code>Sort u</code> for lean</p>",
        "id": 242147447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623284932
    },
    {
        "content": "<p>I see.</p>",
        "id": 242147488,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285000
    },
    {
        "content": "<blockquote>\n<p>Is this right? Do I need to worry about the fact that inserting a value into the context that already has the value does not give an error, but overwrites the existing type for it?</p>\n</blockquote>\n<p>That's okay as long as the updates to the context are functional / temporary within a scope. Once you are out of the scope with the shadowed variable the variable needs to go back to its old type</p>",
        "id": 242147551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285041
    },
    {
        "content": "<p>you can also accomplish this by keeping the context as an ordered list and doing linear search when looking variables up in the context</p>",
        "id": 242147575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285099
    },
    {
        "content": "<p>In haskell the former approach is easier since <code>Data.Map</code> is already a persistent map, and that's what you did</p>",
        "id": 242147669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285180
    },
    {
        "content": "<p>your typechecker looks correct</p>",
        "id": 242147753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/stlc.20terms/near/242147274\">said</a>:</p>\n<blockquote>\n<p>I can't prove anything with this in its current form, correct? Not even limited propositional logic? What is the next minimal extension required to do that?</p>\n</blockquote>\n<p>Well it's haskell, so no</p>",
        "id": 242147766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285265
    },
    {
        "content": "<p>You can just transpose all of this to lean though</p>",
        "id": 242147777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285279
    },
    {
        "content": "<p>You mean no type checker I write in Haskell can prove propositional logic? Because Haskell itself can't prove propositional logic?</p>",
        "id": 242147820,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285325
    },
    {
        "content": "<p>I mean if you want to prove the correctness of the typechecker</p>",
        "id": 242147832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285344
    },
    {
        "content": "<p>If you want to write a prover in haskell that works fine</p>",
        "id": 242147852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285358
    },
    {
        "content": "<p>Oh. No, I'm not worried about formally checking it. This is more a learning exercise for now.</p>",
        "id": 242147915,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285403
    },
    {
        "content": "<p>If you want to extend STLC to intuitionistic logic you need some more constructors like and / or</p>",
        "id": 242147919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285415
    },
    {
        "content": "<p>Do I need to make the types act as terms first?</p>",
        "id": 242147956,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285464
    },
    {
        "content": "<p>First meaning as a requirement for proving anything.</p>",
        "id": 242148010,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285495
    },
    {
        "content": "<p>no need, if you are doing curry howard then proofs are the terms and propositions are the types</p>",
        "id": 242148014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285503
    },
    {
        "content": "<p>you only need DTT if you want theorems about lambda terms</p>",
        "id": 242148037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285546
    },
    {
        "content": "<p>basic propositional logic doesn't have any of that</p>",
        "id": 242148050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285562
    },
    {
        "content": "<p>Right now the types are just things like <code>Atomic -&gt; (Atomic -&gt; Atomic)</code> right?. I haven't been able to see how that maps to something like <code>P -&gt; (Q -&gt; P)</code>.</p>",
        "id": 242148118,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285607
    },
    {
        "content": "<p>You add type variables, <code>Type = ... | TVar String</code></p>",
        "id": 242148132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285637
    },
    {
        "content": "<p>then you will have a type like <code>Arrow (TVar \"P\") (Arrow (TVar \"Q\") (TVar \"P\"))</code></p>",
        "id": 242148153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285667
    },
    {
        "content": "<p>You don't strictly need them, you can have a function which proves <code>P -&gt; Q -&gt; P</code> for any types <code>P</code> and <code>Q</code> (which are themselves concrete types)</p>",
        "id": 242148188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285723
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">mkK</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">mkK</span> <span class=\"kt\">P</span> <span class=\"kt\">Q</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"s\">\"x\"</span> <span class=\"kt\">P</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"s\">\"y\"</span> <span class=\"kt\">Q</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"s\">\"x\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>it is then a meta-theorem that <code>getType (mkK P Q) = Just (Arrow P (Arrow Q P))</code></p>",
        "id": 242148273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285829
    },
    {
        "content": "<p>but if you have type variables then you can actually verify this with <code>P = TVar \"P\"</code> and <code>Q = TVar \"Q\"</code></p>",
        "id": 242148346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623285909
    },
    {
        "content": "<p>Oh. I was going to ask if you assign <code>P</code> to <code>Atomic</code> and <code>Q</code> to <code>Atomic -&gt; Atomic</code> and prove <code>Atomic -&gt; ((Atomic -&gt; Atomic) -&gt; Atomic)</code>.</p>",
        "id": 242148358,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623285934
    },
    {
        "content": "<p>If you transposed this all to lean, the theorem <code>getType (mkK P Q) = Just (Arrow P (Arrow Q P))</code> would actually be provable</p>",
        "id": 242148471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286043
    },
    {
        "content": "<p>but you can quickcheck it in haskell too</p>",
        "id": 242148495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286079
    },
    {
        "content": "<p>Hmm. I might have to think on that some. So the type variable constructor replaces the <code>Atomic</code> constructor I have now?</p>",
        "id": 242148592,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"kt\">Type</span> <span class=\"bp\">=</span> <span class=\"n\">TVar</span> <span class=\"n\">String</span> <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">deriving</span> <span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"n\">Show</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 242148674,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286243
    },
    {
        "content": "<p>Well, you probably want one anyway since otherwise you don't have any closed terms</p>",
        "id": 242148761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286327
    },
    {
        "content": "<p>but you can still run programs on types containing type variables so that might be sufficient for you</p>",
        "id": 242148787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286395
    },
    {
        "content": "<p>I think the HOL type system contains arrow, constants and variables</p>",
        "id": 242148841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286443
    },
    {
        "content": "<p>Do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"kt\">Type</span> <span class=\"bp\">=</span> <span class=\"n\">Atomic</span> <span class=\"bp\">|</span> <span class=\"n\">Arrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"n\">Show</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 242148847,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286448
    },
    {
        "content": "<p>yeah</p>",
        "id": 242148853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286457
    },
    {
        "content": "<p>And a closed term is one with Atomic as a type?</p>",
        "id": 242148869,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286499
    },
    {
        "content": "<p>you want to distinguish the constants from the variables because there is an operation \"instantiation\" that substitutes all the type variables in a type or term</p>",
        "id": 242148873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286504
    },
    {
        "content": "<p>a closed <del>term</del> type is one built from only <code>Arrow</code> and <code>Atomic</code>, no <code>TVar</code></p>",
        "id": 242148891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286521
    },
    {
        "content": "<p>Did you mean closed type above?</p>",
        "id": 242148949,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286572
    },
    {
        "content": "<p>Further above.</p>",
        "id": 242148955,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286583
    },
    {
        "content": "<p><code>Well, you probably want one anyway since otherwise you don't have any closed terms</code></p>",
        "id": 242148964,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286599
    },
    {
        "content": "<p>yes</p>",
        "id": 242148968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286602
    },
    {
        "content": "<p>closed term/type means no free variables</p>",
        "id": 242148973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286621
    },
    {
        "content": "<p>for types, since there are no variable binders, that just means no variables</p>",
        "id": 242148990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623286637
    },
    {
        "content": "<p>Oh, so if I changed the name from Atomic to Prop, this might be clearer.</p>",
        "id": 242149172,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286853
    },
    {
        "content": "<p>Is that right?</p>",
        "id": 242149188,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623286890
    },
    {
        "content": "<p>No wait, how do you construct something like <code>P : Prop</code> in this?</p>",
        "id": 242149309,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287041
    },
    {
        "content": "<p>I guess you don't. The data construct <code>data Type</code> would be considered Prop?</p>",
        "id": 242149396,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287142
    },
    {
        "content": "<p>In the meta logic.</p>",
        "id": 242149451,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287187
    },
    {
        "content": "<p>yes</p>",
        "id": 242149495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287267
    },
    {
        "content": "<p>You might want to change <code>Atomic</code> to <code>True</code> and add <code>False</code> though</p>",
        "id": 242149554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287307
    },
    {
        "content": "<p>Why?</p>",
        "id": 242149578,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287377
    },
    {
        "content": "<p>Oh, because these are the possible values of propositions?</p>",
        "id": 242149630,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287414
    },
    {
        "content": "<p>I guess I'm not certain what <code>Atomic</code> and <code>TVar String</code> actually represent. If <code>TVar String</code> is a type variable, what is the domain of the variable? Is it instances of <code>data Type</code>?</p>",
        "id": 242149920,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623287781
    },
    {
        "content": "<p>It is a variable which represents an arbitrary proposition/type</p>",
        "id": 242149932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287805
    },
    {
        "content": "<p>type substitution would take a map <code>subst : String -&gt; Type</code> and replace <code>TVar P</code> with <code>subst P</code> everywhere in a type/term</p>",
        "id": 242149949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287842
    },
    {
        "content": "<p>however, it only \"represents\" an arbitrary type, it doesn't have to literally be something in <code>data Type</code>, in the same way that when you have a variable <code>x : real</code> in lean it represents an arbitrary real number even though only countably many of them can possibly have closed terms describing them</p>",
        "id": 242150040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287959
    },
    {
        "content": "<p>the determination of what type variables actually range over is a meta-theoretic question and depends on the model</p>",
        "id": 242150056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623287986
    },
    {
        "content": "<p>I think I see. So why change <code>Atomic</code> to <code>True</code> and <code>False</code>?</p>",
        "id": 242150168,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623288103
    },
    {
        "content": "<p>since you are doing propositional logic, you probably want true and false, and they serve as base types so you don't need <code>Atomic</code> anymore</p>",
        "id": 242150232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288155
    },
    {
        "content": "<p>plus what would the meaning of <code>Atomic</code> be as a proposition?</p>",
        "id": 242150245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288181
    },
    {
        "content": "<p>So <code>True</code> and <code>False</code> represent the possible values of propositions.</p>",
        "id": 242150257,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623288197
    },
    {
        "content": "<p>they are two specific propositions; <code>True</code> will have a term <code>trivial : True</code> in it</p>",
        "id": 242150272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288228
    },
    {
        "content": "<p>Does that mean I need to add additional term constructors?</p>",
        "id": 242150364,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623288325
    },
    {
        "content": "<p>yes</p>",
        "id": 242150366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288329
    },
    {
        "content": "<p><code>False</code> will have an eliminator <code>exfalso : Type -&gt; Term</code> such that <code>exfalso T</code> has type <code>False -&gt; T</code></p>",
        "id": 242150374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288339
    },
    {
        "content": "<p>each type has an introduction and elimination rule</p>",
        "id": 242150424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288363
    },
    {
        "content": "<p>and those are term constructors</p>",
        "id": 242150427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288369
    },
    {
        "content": "<p>you should check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.itauto.prop/src\">src#tactic.itauto.prop</a>, which does this kind of thing for intuitionistic propositional logic</p>",
        "id": 242150480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288419
    },
    {
        "content": "<p><code>prop</code> is what you call <code>Type</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.itauto.proof/src\">src#tactic.itauto.proof</a> is what you call <code>Term</code></p>",
        "id": 242150520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288477
    },
    {
        "content": "<p>although it is slightly optimized for a particular kind of proof search</p>",
        "id": 242150576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288509
    },
    {
        "content": "<p>Wait, I can't currently have types of the form <code>Type -&gt; Term</code> can I?</p>",
        "id": 242150588,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623288523
    },
    {
        "content": "<p>that is to say, <code>data Term = ... | Exfalso Type</code></p>",
        "id": 242150601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288546
    },
    {
        "content": "<p>and later <code>getType _ (Exfalso t) = Just (Arrow False t)</code></p>",
        "id": 242150628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623288599
    },
    {
        "content": "<p>Hmm. Ok. I think.</p>",
        "id": 242150773,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623288728
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/stlc.20terms\">#new members &gt; stlc terms</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>",
        "id": 242150782,
        "sender_full_name": "Notification Bot",
        "timestamp": 1623288748
    },
    {
        "content": "<blockquote>\n<p>and <code>getType _ trivial = Just True</code>?</p>\n</blockquote>\n<p>yes</p>",
        "id": 242151011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623289072
    },
    {
        "content": "<p>Cool. Thank you!</p>",
        "id": 242151093,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623289191
    },
    {
        "content": "<p>Cool! If I did it right :)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- Modified from https://softwarefoundations.cis.upenn.edu/plf-current/Typechecking.html</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"c1\">-- Proposition</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- P, Q, etc.</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeTrue</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeFalse</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Implies</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Proof</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- Hypothesis</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermTriv</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermExFalso</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Implication Elimination</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Implication Introduction</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span>\n\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">v</span> <span class=\"n\">gamma</span>\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span>     <span class=\"kt\">TermTriv</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">TypeTrue</span>\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span>     <span class=\"p\">(</span><span class=\"kt\">TermExFalso</span> <span class=\"n\">ty</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"kt\">TypeFalse</span> <span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeArrow</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty11</span> <span class=\"o\">==</span> <span class=\"n\">ty2</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">v</span> <span class=\"n\">ty1</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">ty1</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">tm1</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList []) (TermAbs \"HP\" (TypeVar \"P\") (TermAbs \"HQ\" (TypeVar \"Q\") (TermVar \"HP\")))</span>\n<span class=\"cm\">Just (TypeArrow (TypeVar \"P\") (TypeArrow (TypeVar \"Q\") (TypeVar \"P\")))</span>\n\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 242156849,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623297050
    },
    {
        "content": "<p>This helps clarify so much!</p>",
        "id": 242157371,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623297899
    },
    {
        "content": "<p>What would be the next smallest extension? First order predicate logic?</p>",
        "id": 242290170,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623373596
    },
    {
        "content": "<p>Well the code above doesn't yet have all the connectives of propositional logic</p>",
        "id": 242290634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374187
    },
    {
        "content": "<p>That is true. I figured <code>and</code> and <code>or</code> should be straightforward to add.</p>",
        "id": 242290664,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623374239
    },
    {
        "content": "<p>you could add negation, conjunction and disjunction, along with the corresponding proof terms <code>and.mk</code>, <code>and.left</code>, <code>and.right</code> and <code>or.inl</code> <code>or.inr</code> and <code>or.elim</code></p>",
        "id": 242290667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374242
    },
    {
        "content": "<p>you have some choices about how to present the operations: should they have type arguments or not?</p>",
        "id": 242290733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374300
    },
    {
        "content": "<p>So, if abstraction didn't have an explicit type for the variable then you couldn't write a type checker right?</p>",
        "id": 242290785,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623374381
    },
    {
        "content": "<p>Lean's <code>and.left</code> has type arguments, i.e. <code>and.left P Q h</code> is a proof of <code>P</code> if <code>h</code> is a proof of <code>P /\\ Q</code>, but it should be clear that this isn't required for typechecking, and a lot of languages with a pairing operator leave off the types in this operator</p>",
        "id": 242290788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374396
    },
    {
        "content": "<p>you can write a typechecker for a surprisingly sparsely typed term</p>",
        "id": 242290845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374438
    },
    {
        "content": "<p>curry style typing is where you don't provide <em>any</em> types and it's still possible to typecheck those terms</p>",
        "id": 242290867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374464
    },
    {
        "content": "<p>but assuming you don't want to do unification and infer types, you generally need type annotations whenever a variable is discharged from the context, i.e. in binders like <code>Abs</code></p>",
        "id": 242290961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374535
    },
    {
        "content": "<p>as well as when a type variable is not determined from the arguments, like <code>or.inl</code> and <code>exfalso</code></p>",
        "id": 242290980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374563
    },
    {
        "content": "<p>How would you type check something like <code>lam x -&gt; x</code> without a type for <code>x</code>?</p>",
        "id": 242291001,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623374585
    },
    {
        "content": "<p>You would use a metavariable: it has type <code>?A -&gt; ?A</code></p>",
        "id": 242291013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374603
    },
    {
        "content": "<p>a type checker can work that out without any assistance</p>",
        "id": 242291021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374616
    },
    {
        "content": "<p>Oh! That is what those are! Ha!</p>",
        "id": 242291032,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623374625
    },
    {
        "content": "<p>working with metavariables gets complicated though because you might discover additional facts about the type by its use later. For example <code>lam x -&gt; (x.1, x.2)</code> has the type <code>?A /\\ ?B -&gt; ?A /\\ ?B</code></p>",
        "id": 242291131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623374745
    },
    {
        "content": "<p>Ok, I'll see if I can add those, without unification and inferring types.</p>",
        "id": 242291317,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623374948
    },
    {
        "content": "<p>How is this? I wasn't sure if I should use negation intro and elim instead.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- Modified from https://softwarefoundations.cis.upenn.edu/plf-current/Typechecking.html</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"c1\">-- Proposition</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- P, Q, etc.</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeTrue</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeFalse</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeImp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAnd</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeOr</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeNeg</span> <span class=\"kt\">Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Proof</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- Hypothesis</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermTriv</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermExFalso</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermImpIntro</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Abstraction</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermImpElim</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Application</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndIntro</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndElimLeft</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndElimRight</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrIntroLeft</span> <span class=\"kt\">Term</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrIntroRight</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrElim</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermNeg</span> <span class=\"kt\">Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span>\n\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">v</span> <span class=\"n\">gamma</span>\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span>     <span class=\"kt\">TermTriv</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">TypeTrue</span>\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span>     <span class=\"p\">(</span><span class=\"kt\">TermExFalso</span> <span class=\"n\">ty</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeImp</span> <span class=\"kt\">TypeFalse</span> <span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermImpIntro</span> <span class=\"n\">v</span> <span class=\"n\">tyv</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">tyv</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">tm1</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeImp</span> <span class=\"n\">tyv</span> <span class=\"n\">ty1</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermImpElim</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeImp</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty11</span> <span class=\"o\">==</span> <span class=\"n\">ty2</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAndIntro</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeAnd</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAndElimLeft</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeAnd</span> <span class=\"n\">ty11</span> <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ty11</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAndElimRight</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeAnd</span> <span class=\"kr\">_</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermOrIntroLeft</span> <span class=\"n\">tm1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeOr</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermOrIntroRight</span> <span class=\"n\">ty1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeOr</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermOrElim</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span> <span class=\"n\">tm3</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">ty3</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm3</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeOr</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span>\n      <span class=\"kr\">case</span> <span class=\"n\">ty2</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">TypeImp</span> <span class=\"n\">ty21</span> <span class=\"n\">ty22</span> <span class=\"ow\">-&gt;</span>\n          <span class=\"kr\">case</span> <span class=\"n\">ty3</span> <span class=\"kr\">of</span>\n            <span class=\"kt\">TypeImp</span> <span class=\"n\">ty31</span> <span class=\"n\">ty32</span> <span class=\"ow\">-&gt;</span>\n              <span class=\"kr\">if</span> <span class=\"n\">ty21</span> <span class=\"o\">==</span> <span class=\"n\">ty11</span> <span class=\"o\">&amp;&amp;</span>\n                 <span class=\"n\">ty31</span> <span class=\"o\">==</span> <span class=\"n\">ty12</span> <span class=\"o\">&amp;&amp;</span>\n                 <span class=\"n\">ty22</span> <span class=\"o\">==</span> <span class=\"n\">ty32</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty32</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n            <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermNeg</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeImp</span> <span class=\"n\">ty11</span> <span class=\"kt\">TypeFalse</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeNeg</span> <span class=\"n\">ty11</span><span class=\"p\">)</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">1. [HP : P, HQ : Q] |- HP : P ; Var</span>\n<span class=\"cm\">2. [HP : P] |- \\HQ =&gt; HP : Q -&gt; P ; Abs 1</span>\n<span class=\"cm\">3. [] |- \\HP =&gt; (\\HQ =&gt; HP) : P -&gt; (Q -&gt; P) ; Abs 2</span>\n\n<span class=\"cm\">\\HP : P =&gt; (\\HQ : Q =&gt; HP)</span>\n<span class=\"cm\">P -&gt; (Q -&gt; P)</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList []) (TermImpIntro \"HP\" (TypeVar \"P\") (TermImpIntro \"HQ\" (TypeVar \"Q\") (TermVar \"HP\")))</span>\n<span class=\"cm\">Just (TypeImp (TypeVar \"P\") (TypeImp (TypeVar \"Q\") (TypeVar \"P\")))</span>\n\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 242299148,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623384403
    },
    {
        "content": "<p>Looks good. You are missing <code>TermNegElim</code> though, or however you want to call it. It does the reverse of <code>TermNeg</code>: if <code>tm : !P</code> then <code>TermNegElim tm : P -&gt; False</code></p>",
        "id": 242299826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623385371
    },
    {
        "content": "<p>alternatively, you can have a rule that <code>Absurd h1 h2 : False</code> if <code>h1 : !P</code> and <code>h2 : P</code></p>",
        "id": 242299848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623385419
    },
    {
        "content": "<p>or you can just define <code>TypeNeg T = TypeImp T False</code> which is what lean does</p>",
        "id": 242299912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623385460
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 242300009,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623385600
    },
    {
        "content": "<p>Regarding FOL, you can do that here using <code>TypeForall String Type</code> which is <code>\\all x, P[x]</code> and <code>TermForallIntro String Term</code> which is like <code>\\lam x, e[x]</code> but introduces another kind of variable. <code>TermForallElim Term String</code> takes a proof of <code>\\all x, P[x]</code> and <code>y</code> and produces <code>P[y]</code></p>",
        "id": 242300275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386011
    },
    {
        "content": "<p>This is assuming you want pure FOL, not HOL where the forall would have variables which range over regular types</p>",
        "id": 242300337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386058
    },
    {
        "content": "<p>In this case, that would mean that they can only range over propositions</p>",
        "id": 242300343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386079
    },
    {
        "content": "<p>I thought in FOL you had some domain of discourse that the variables ranged over, other than propositions?</p>",
        "id": 242300615,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623386455
    },
    {
        "content": "<p>and predicates took those variables to propositions.</p>",
        "id": 242300771,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623386742
    },
    {
        "content": "<p>right, <code>TypeForall</code> is like <code>\\all x : D, P[x]</code> where <code>D</code> is the domain of discourse, which acts like a fake type here</p>",
        "id": 242300908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386973
    },
    {
        "content": "<p>so you have a split context, with variables for propositions and variables over the domain of discourse</p>",
        "id": 242300977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387043
    },
    {
        "content": "<p>Oh. I  think I see. Does that mean you actually need an additional map for a second context?</p>",
        "id": 242301087,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387217
    },
    {
        "content": "<p>yes</p>",
        "id": 242301091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387226
    },
    {
        "content": "<p>Ok.</p>",
        "id": 242301143,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387252
    },
    {
        "content": "<p>you can also share the map and have the map value be <code>Either Type Unit</code></p>",
        "id": 242301145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387254
    },
    {
        "content": "<p>the difference is whether you allow hypotheses and variables with the same \"namespace\" where they can shadow each other or not</p>",
        "id": 242301177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387317
    },
    {
        "content": "<p>Is Unit the type in Haskell that is uninhabited or something like that? Here it would represent the domain of discourse D?</p>",
        "id": 242301183,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387338
    },
    {
        "content": "<p>It's the type with one element</p>",
        "id": 242301199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387352
    },
    {
        "content": "<p>I think it's called unit</p>",
        "id": 242301202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387358
    },
    {
        "content": "<p>you can use <code>Maybe Type</code> too if that isn't confusing to you</p>",
        "id": 242301239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387371
    },
    {
        "content": "<p>You're probably right. I was guessing.</p>",
        "id": 242301246,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387388
    },
    {
        "content": "<p>oh, sorry it's spelled <code>()</code> in haskell</p>",
        "id": 242301264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623387423
    },
    {
        "content": "<p>No problem.</p>",
        "id": 242301365,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387550
    },
    {
        "content": "<p>I'll see if I can add it another night. Thank you!</p>",
        "id": 242301442,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623387631
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242428480,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623475169
    },
    {
        "content": "<p>I'm not sure what to return for <code>TermForAllElim</code>. Do I need to add a type like <code>TypeApp Type String</code>? And a type like <code>TypeVar'</code> for variables that range over the domain of discourse?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- Modified from https://softwarefoundations.cis.upenn.edu/plf-current/Typechecking.html</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"c1\">-- Proposition</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- Propositional variables. (P, Q, etc.)</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeTrue</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeFalse</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeImp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAnd</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeOr</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeNeg</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeForAll</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- \\forall x, P[x]. String is the name of a variable that ranges over some domain of discourse. (x, y, etc.) Type is the proposition formed from substituting some element in the domain of discourse into some predicate. (P[x], P[y], etc.)</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Proof</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- Hypothesis</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermTriv</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermExFalso</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermImpIntro</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Abstraction</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermImpElim</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Application</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndIntro</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndElimLeft</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAndElimRight</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrIntroLeft</span> <span class=\"kt\">Term</span> <span class=\"kt\">Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrIntroRight</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermOrElim</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermNegIntro</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermNegElim</span> <span class=\"kt\">Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermForAllIntro</span> <span class=\"kt\">String</span> <span class=\"kt\">Term</span>\n<span class=\"c1\">--          | TermForAllElim Term String</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- String is the name of an assumption that some proposition holds.</span>\n<span class=\"c1\">-- Type is the proposition that is being assumed to hold.</span>\n<span class=\"kr\">type</span> <span class=\"kt\">ContextH</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- String is the name of a variable assumed to range over some domain of discourse.</span>\n<span class=\"kr\">type</span> <span class=\"kt\">ContextD</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">ContextH</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ContextD</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- x is the name of an arbitrary element in the domain of discourse.</span>\n<span class=\"c1\">-- tm1 is the proof of the proposition formed from substituting x into some predicate P.</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermForAllIntro</span> <span class=\"n\">x</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma_d'</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">gamma_d</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"c1\">-- ty1 is the proposition formed from substituting x into some predicate P. (P[x])</span>\n    <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d'</span> <span class=\"n\">tm1</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeForAll</span> <span class=\"n\">x</span> <span class=\"n\">ty1</span><span class=\"p\">)</span>\n<span class=\"cm\">{-</span>\n<span class=\"cm\">getType gamma_h gamma_d (TermForAllElim tm1 y) =</span>\n<span class=\"cm\">  if elem y gamma_d then do</span>\n<span class=\"cm\">    ty1 &lt;- getType gamma_h gamma_d tm1</span>\n<span class=\"cm\">    case ty1 of</span>\n<span class=\"cm\">      TypeForAll x ty11 -&gt; return ?</span>\n<span class=\"cm\">      _ -&gt; Nothing</span>\n<span class=\"cm\">  else Nothing</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">v</span> <span class=\"n\">gamma_h</span>\n\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"kt\">TermTriv</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">TypeTrue</span>\n\n<span class=\"nf\">getType</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">TermExFalso</span> <span class=\"n\">ty</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeImp</span> <span class=\"kt\">TypeFalse</span> <span class=\"n\">ty</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermImpIntro</span> <span class=\"n\">v</span> <span class=\"n\">tyv</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma_h'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">tyv</span> <span class=\"n\">gamma_h</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h'</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeImp</span> <span class=\"n\">tyv</span> <span class=\"n\">ty1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermImpElim</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm2</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeImp</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty11</span> <span class=\"o\">==</span> <span class=\"n\">ty2</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermAndIntro</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeAnd</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermAndElimLeft</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeAnd</span> <span class=\"n\">ty11</span> <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ty11</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermAndElimRight</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeAnd</span> <span class=\"kr\">_</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ty12</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermOrIntroLeft</span> <span class=\"n\">tm1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeOr</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermOrIntroRight</span> <span class=\"n\">ty1</span> <span class=\"n\">tm2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeOr</span> <span class=\"n\">ty1</span> <span class=\"n\">ty2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermOrElim</span> <span class=\"n\">tm1</span> <span class=\"n\">tm2</span> <span class=\"n\">tm3</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"n\">ty2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm2</span>\n  <span class=\"n\">ty3</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm3</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeOr</span> <span class=\"n\">ty11</span> <span class=\"n\">ty12</span> <span class=\"ow\">-&gt;</span>\n      <span class=\"kr\">case</span> <span class=\"n\">ty2</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">TypeImp</span> <span class=\"n\">ty21</span> <span class=\"n\">ty22</span> <span class=\"ow\">-&gt;</span>\n          <span class=\"kr\">case</span> <span class=\"n\">ty3</span> <span class=\"kr\">of</span>\n            <span class=\"kt\">TypeImp</span> <span class=\"n\">ty31</span> <span class=\"n\">ty32</span> <span class=\"ow\">-&gt;</span>\n              <span class=\"kr\">if</span> <span class=\"n\">ty21</span> <span class=\"o\">==</span> <span class=\"n\">ty11</span> <span class=\"o\">&amp;&amp;</span>\n                 <span class=\"n\">ty31</span> <span class=\"o\">==</span> <span class=\"n\">ty12</span> <span class=\"o\">&amp;&amp;</span>\n                 <span class=\"n\">ty22</span> <span class=\"o\">==</span> <span class=\"n\">ty32</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">ty32</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n            <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermNegIntro</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeImp</span> <span class=\"n\">ty11</span> <span class=\"kt\">TypeFalse</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeNeg</span> <span class=\"n\">ty11</span><span class=\"p\">)</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"p\">(</span><span class=\"kt\">TermNegElim</span> <span class=\"n\">tm1</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma_h</span> <span class=\"n\">gamma_d</span> <span class=\"n\">tm1</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty1</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeNeg</span> <span class=\"n\">ty11</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeImp</span> <span class=\"n\">ty11</span> <span class=\"kt\">TypeFalse</span><span class=\"p\">)</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">1. [HP : P, HQ : Q] |- HP : P ; Var</span>\n<span class=\"cm\">2. [HP : P] |- \\HQ =&gt; HP : Q -&gt; P ; Abs 1</span>\n<span class=\"cm\">3. [] |- \\HP =&gt; (\\HQ =&gt; HP) : P -&gt; (Q -&gt; P) ; Abs 2</span>\n\n<span class=\"cm\">\\HP : P =&gt; (\\HQ : Q =&gt; HP)</span>\n<span class=\"cm\">P -&gt; (Q -&gt; P)</span>\n\n<span class=\"cm\">*Main&gt; getType (Data.Map.fromList []) (TermImpIntro \"HP\" (TypeVar \"P\") (TermImpIntro \"HQ\" (TypeVar \"Q\") (TermVar \"HP\")))</span>\n<span class=\"cm\">Just (TypeImp (TypeVar \"P\") (TypeImp (TypeVar \"Q\") (TypeVar \"P\")))</span>\n\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 242428664,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623475544
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242429179,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623476176
    },
    {
        "content": "<p>Suggestion: you can define <code>type Context = (ContextH, ContextD)</code> and that way you don't need two gamma variables everywhere</p>",
        "id": 242431148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478595
    },
    {
        "content": "<p>Good point.</p>",
        "id": 242431153,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623478620
    },
    {
        "content": "<p>For the type of <code>TermForAllElim</code>, you should return <code>subst x y P</code>, meaning to replace free occurrences of <code>x</code> with <code>y</code></p>",
        "id": 242431167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478654
    },
    {
        "content": "<p>so you have to define that function</p>",
        "id": 242431169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478670
    },
    {
        "content": "<p>There isn't really anything to substitute though, since there is no way to put a domain variable in a type right now</p>",
        "id": 242431339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478709
    },
    {
        "content": "<p>so you need something like <code>TypePred String String</code> representing <code>R(x)</code> where <code>R</code> is an uninterpreted constant</p>",
        "id": 242431348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478756
    },
    {
        "content": "<p>that way you can construct types like <code>all x, P(x) -&gt; !P(y)</code></p>",
        "id": 242431363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478794
    },
    {
        "content": "<p>I guess I'm confused why I need to define that substitution function, but not the one for the term application?</p>",
        "id": 242431412,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623478839
    },
    {
        "content": "<p>Or are you saying I actually don't need it?</p>",
        "id": 242431425,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623478894
    },
    {
        "content": "<p>you will need substitution at the term level as well, if you want to reduce lambda terms instead of just typechecking them</p>",
        "id": 242431478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478927
    },
    {
        "content": "<p>Right now I'm just looking at type checking.</p>",
        "id": 242431494,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623478952
    },
    {
        "content": "<p>there isn't any lambda calculus at the type level (yet...) so app would just get in the way</p>",
        "id": 242431496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623478961
    },
    {
        "content": "<p>So to just do type checking all I need to do is add <code>TypePred String String</code>?</p>",
        "id": 242431543,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479018
    },
    {
        "content": "<p>for example, if you defer the substitution, then you go from <code>all x, P(x) /\\ Q(x)</code> to <code>(P(x) /\\ Q(x))[y/x]</code> and now you can't use <code>and.left</code> anymore because the substitution is in the way</p>",
        "id": 242431545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479019
    },
    {
        "content": "<p>Oh.</p>",
        "id": 242431588,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479049
    },
    {
        "content": "<p>you don't actually need <code>TypePred</code>, but without it <code>subst</code> will be trivial, <code>subst x y P = P</code></p>",
        "id": 242431589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479050
    },
    {
        "content": "<p>basically there is no way right now to write <code>P(x)</code> so you can build types like <code>all x, P /\\ Q</code> which substitutes to <code>P /\\ Q</code>. True, but not very interesting</p>",
        "id": 242431606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479089
    },
    {
        "content": "<p>So for that I need <code>TypePred</code>.</p>",
        "id": 242431624,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479143
    },
    {
        "content": "<p>right, that's the <code>P(x)</code> I'm writing</p>",
        "id": 242431632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479153
    },
    {
        "content": "<p>I see.</p>",
        "id": 242431660,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479163
    },
    {
        "content": "<p>you want <code>all x, P(x) /\\ Q(x)</code>to substitute to <code>P(y) /\\ Q(y)</code>, and <code>subst</code> will traverse the term to replace <code>x</code> with <code>y</code></p>",
        "id": 242431676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479185
    },
    {
        "content": "<p>but you have to be careful about binders: <code>all x, (all x, P(x)) /\\ Q(x)</code> should substitute to <code>(all x, P(x)) /\\ Q(y)</code></p>",
        "id": 242431689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479214
    },
    {
        "content": "<p>So in <code>TermForAllElim</code> what happens if I return <code>TypePred</code>?</p>",
        "id": 242431802,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479309
    },
    {
        "content": "<p>well <code>TypePred</code> here is for an atomic predicate, in general <code>TermForAllElim</code> can return a composite term like <code>P(y) /\\ Q(y)</code></p>",
        "id": 242431823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479355
    },
    {
        "content": "<p>I see.</p>",
        "id": 242431841,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479396
    },
    {
        "content": "<p>it can be seen as a replacement for <code>TypeVar</code> now that we are doing predicate calculus instead of propositional calc</p>",
        "id": 242431887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479410
    },
    {
        "content": "<p>so we need predicates</p>",
        "id": 242431904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479441
    },
    {
        "content": "<p>Yep.</p>",
        "id": 242431925,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479467
    },
    {
        "content": "<p>What part of the lambda cube is this, or is it on the lambda cube?</p>",
        "id": 242431964,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479517
    },
    {
        "content": "<p>people also sometimes allow n-ary predicates like <code>P(x, y, z)</code> with the 0-ary case being propositional variables</p>",
        "id": 242431967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479521
    },
    {
        "content": "<p>I'm guessing it is no longer STLC?</p>",
        "id": 242432016,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623479583
    },
    {
        "content": "<p>it's a bit off the beaten track: we have types that bind D-variables and terms that H-bind types, but the two categories are separated so it's not as powerful as lambda-P2</p>",
        "id": 242432090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479714
    },
    {
        "content": "<p>notice what it says <a href=\"https://en.wikipedia.org/wiki/Lambda_cube#%CE%BBP\">here</a>:</p>\n<blockquote>\n<p>The conversion rule is strongly needed when dealing with dependent types, because it allows to perform computation on the terms in the type. For instance, if you have <code>Γ ⊢ A : P ( ( λ x . x ) y )</code> and <code>Γ ⊢ B : Π x : P ( y ) . C</code>, you need to apply the conversion rule to obtain <code>Γ ⊢ A : P ( y )</code> to be able to type <code>Γ ⊢ B A : C</code>. </p>\n</blockquote>\n<p>For the moment we're getting around this by not having D-terms</p>",
        "id": 242432164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479877
    },
    {
        "content": "<p>which is enough to do pure predicate calculus, and you can even do ZFC without needing any terms inside predicates (although you need at least one binary relation, unary predicates don't cut it)</p>",
        "id": 242432234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623479989
    },
    {
        "content": "<p>Are D terms like functions in FOL? Like there are predicates that take elements of D to Prop and functions that take elements of D to elements of D?</p>",
        "id": 242432406,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623480270
    },
    {
        "content": "<p>An example of a D term in FOL is <code>x + y</code> in peano arithmetic</p>",
        "id": 242432429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480359
    },
    {
        "content": "<p>so <code>+</code> is a term constructor, we would say it has type D -&gt; D -&gt; D</p>",
        "id": 242432476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480391
    },
    {
        "content": "<p>predicates are things like <code>=</code>, which has type D -&gt; D -&gt; Prop</p>",
        "id": 242432477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480411
    },
    {
        "content": "<p>In classical predicate logic you usually have predicates like <code>=</code> and then maybe term constructors like <code>+</code></p>",
        "id": 242432486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480446
    },
    {
        "content": "<p><code>0</code> is also considered a 0-ary term constructor in PA</p>",
        "id": 242432498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480461
    },
    {
        "content": "<p>ZFC has no term constructors and only one predicate, <code>x \\in y</code></p>",
        "id": 242432543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480509
    },
    {
        "content": "<p>sometimes <code>=</code> is also included but you can define it in terms of <code>\\in</code></p>",
        "id": 242432555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623480541
    },
    {
        "content": "<p>Oh. Right. The domain of discourse is sets.</p>",
        "id": 242432573,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623480582
    },
    {
        "content": "<p>Did you mean lambda P above instead of lambda P2?</p>",
        "id": 242432717,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623480760
    },
    {
        "content": "<p>The quote is from lambda P I think?</p>",
        "id": 242432729,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623480792
    },
    {
        "content": "<p>I guess I'm wondering, from a learning perspective, if I should continue expanding this or jump to the next simplest on the way to CIC, which I guess is lambda P?</p>",
        "id": 242432918,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623481086
    },
    {
        "content": "<p>In which systems in the lambda cube do the terms and types get combined into one data type?</p>",
        "id": 242433485,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623482130
    },
    {
        "content": "<p>only lambda-C aka CoC combines the two</p>",
        "id": 242434528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623483727
    },
    {
        "content": "<p>anywhere below that, you need terms and types to be separate to even be able to state the dependency relations</p>",
        "id": 242434550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623483782
    },
    {
        "content": "<p>What would my formulation look like for lambda P? <a href=\"https://en.wikipedia.org/wiki/Lambda_cube#(%CE%BBP)_Lambda-P\">https://en.wikipedia.org/wiki/Lambda_cube#(%CE%BBP)_Lambda-P</a></p>",
        "id": 242462235,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1623519262
    },
    {
        "content": "<p>Is this correct for the untyped lambda calculus using named variables? What is the usual way to automate the alpha renaming when it is needed in substitution?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"nn\">Data.List</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Set</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">String</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">String</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">getSubTermList</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Term</span><span class=\"p\">]</span>\n<span class=\"nf\">getSubTermList</span> <span class=\"n\">t</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"kr\">_</span><span class=\"p\">)</span>   <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span>\n<span class=\"nf\">getSubTermList</span> <span class=\"n\">t</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">getSubTermList</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">++</span> <span class=\"p\">(</span><span class=\"n\">getSubTermList</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span>\n<span class=\"nf\">getSubTermList</span> <span class=\"n\">t</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"kr\">_</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">getSubTermList</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">++</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span>\n\n<span class=\"nf\">getProperSubTermList</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Term</span><span class=\"p\">]</span>\n<span class=\"nf\">getProperSubTermList</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"n\">getSubTermList</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">getFreeVariableSet</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span>\n<span class=\"nf\">getFreeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">x</span><span class=\"p\">)</span>   <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span>\n<span class=\"nf\">getFreeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">getFreeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">difference</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">isClosedTerm</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">isClosedTerm</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">null</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">getBindingVariableSet</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span>\n<span class=\"nf\">getBindingVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"kr\">_</span><span class=\"p\">)</span>   <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"nf\">getBindingVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getBindingVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">getBindingVariableSet</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">getBindingVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getBindingVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">replaceFree</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">x</span><span class=\"p\">)</span>   <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">x</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nf\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">x</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">m</span><span class=\"p\">))</span>\n\n<span class=\"nf\">alphaReplace</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">alphaReplace</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">x</span>\n                             <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n                             <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">getBindingVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n                             <span class=\"kr\">then</span> <span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">replaceFree</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n                             <span class=\"kr\">else</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n<span class=\"nf\">alphaReplace</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span>         <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n\n<span class=\"c1\">-- substitute m x n = m [ x := n ]</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>   <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">Abs</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">getFreeVariableSet</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">Abs</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n\n<span class=\"nf\">betaReduce</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">betaReduce</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">substitute</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n<span class=\"nf\">betaReduce</span> <span class=\"kr\">_</span>                 <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n</code></pre></div>",
        "id": 243272377,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624142010
    },
    {
        "content": "<p>Is this right?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- untyped lambda calculus using De Bruijn indexing</span>\n\n<span class=\"c1\">-- Modified from https://www.cs.cornell.edu/courses/cs4110/2018fa/lectures/lecture15.pdf</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">Int</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">De Bruijn | Named Variable</span>\n<span class=\"cm\">Abs (Var 0) = Abs \"x\" (Var \"x\")</span>\n<span class=\"cm\">Abs (Var 1) = Abs \"x\" (Var \"y\")</span>\n<span class=\"cm\">Abs (Abs (Var 0)) = Abs \"x\" (Abs \"y\" (Var \"y\"))</span>\n<span class=\"cm\">Abs (Abs (Var 1)) = Abs \"x\" (Abs \"y\" (Var \"x\"))</span>\n<span class=\"cm\">Abs (Abs (Var 2)) = Abs \"x\" (Abs \"y\" (Var \"z\"))</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">shift t c i = Shifts the indices of the free variables in a term t above a</span>\n<span class=\"cm\">cutoff c up by i.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">shift</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">n</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span> <span class=\"kr\">then</span> <span class=\"kt\">Var</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e1</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e2</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Each time a lambda is gone under the index of the variable being substituted</span>\n<span class=\"cm\">for is increased by one and the free variables in the expression being</span>\n<span class=\"cm\">substituted in are shifted up by one. The free variables in the expression</span>\n<span class=\"cm\">being substituted in are shifted up by one so that they do not become captured</span>\n<span class=\"cm\">by the binding variables above the variable being substituted for.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">y</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"n\">y</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Substitutes occurrences of 0, the index of the variable being bound by the</span>\n<span class=\"cm\">lambda, by e2 shifted up by one. Then shifts the result down by one to ensure</span>\n<span class=\"cm\">that any free variables in e1 continue to refer to the same things after the</span>\n<span class=\"cm\">lambda is removed.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">betaReduce</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">betaReduce</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e1</span><span class=\"p\">)</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e2</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">betaReduce</span> <span class=\"kr\">_</span>                 <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n</code></pre></div>",
        "id": 243452582,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624315479
    },
    {
        "content": "<p>Is this right for the second order typed lambda calculus using named variables? If all of the variables names in the context and given term are required to differ, does that avoid the need for alpha renaming?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- second order typed lambda calculus using named variables</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Set</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Type -&gt; Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypePi</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Pi V : * . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span> <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermTypeApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Term Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermTypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V : * . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">getFreeTypeVariableSet</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span>\n<span class=\"nf\">getFreeTypeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x</span><span class=\"p\">)</span>     <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span>\n<span class=\"nf\">getFreeTypeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">getFreeTypeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"p\">)</span>    <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">difference</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- substitute m x n = m [ x := n ]</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeArrow</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kt\">TermContext</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span>\n<span class=\"kr\">type</span> <span class=\"kt\">TypeContext</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span> <span class=\"c1\">-- String : *</span>\n\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">TermContext</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TypeContext</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var)</span>\n<span class=\"cm\">\\Gamma |- x : \\sigma if x : \\sigma \\in Gamma</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"n\">x</span> <span class=\"n\">term_gamma</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl)</span>\n<span class=\"cm\">\\Gamma |- M : \\sigma -&gt; \\tau  \\Gamma |- N : \\sigma</span>\n<span class=\"cm\">--------------------------------------------------</span>\n<span class=\"cm\">            \\Gamma |- M N : \\tau</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeArrow</span> <span class=\"n\">sigma</span> <span class=\"n\">tau</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">sigma</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">tau</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst)</span>\n<span class=\"cm\">         \\Gamma, x : \\sigma |- M : \\tau</span>\n<span class=\"cm\">-------------------------------------------------</span>\n<span class=\"cm\">\\Gamma |- \\lambda x : \\sigma . M : \\sigma -&gt; \\tau</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"n\">sigma</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">x</span> <span class=\"n\">term_gamma</span> <span class=\"o\">&amp;&amp;</span>\n     <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">x</span> <span class=\"n\">type_gamma</span> <span class=\"o\">&amp;&amp;</span>\n     <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">sigma</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">isSubsetOf</span><span class=\"p\">`</span> <span class=\"n\">type_gamma</span>\n  <span class=\"kr\">then</span>\n     <span class=\"kr\">let</span> <span class=\"n\">term_gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">sigma</span> <span class=\"n\">term_gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n     <span class=\"n\">tau</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">term_gamma'</span> <span class=\"n\">type_gamma</span> <span class=\"n\">m</span>\n     <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">sigma</span> <span class=\"n\">tau</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl_2)</span>\n<span class=\"cm\">\\Gamma |- M : (Pi \\alpha : * . A)  \\Gamma |- B : *</span>\n<span class=\"cm\">--------------------------------------------------</span>\n<span class=\"cm\">          \\Gamma |- M B : A [\\alpha := B]</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermTypeApp</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"p\">(</span><span class=\"n\">getFreeTypeVariableSet</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">isSubsetOf</span><span class=\"p\">`</span> <span class=\"n\">type_gamma</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"n\">m</span>\n    <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">TypePi</span> <span class=\"n\">alpha</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">a</span> <span class=\"n\">alpha</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst_2)</span>\n<span class=\"cm\">          \\Gamma, \\alpha : * |- M : A</span>\n<span class=\"cm\">----------------------------------------------------</span>\n<span class=\"cm\">\\Gamma |- \\lambda \\alpha : * . M : Pi \\alpha : * . A</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermTypeAbs</span> <span class=\"n\">alpha</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">alpha</span> <span class=\"n\">term_gamma</span> <span class=\"o\">&amp;&amp;</span>\n     <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span> <span class=\"n\">alpha</span> <span class=\"n\">type_gamma</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">let</span> <span class=\"n\">type_gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">alpha</span> <span class=\"n\">type_gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">a</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">term_gamma</span> <span class=\"n\">type_gamma'</span> <span class=\"n\">m</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">alpha</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Example:</span>\n\n<span class=\"cm\">*Main&gt; getType Data.Map.empty (Data.Set.singleton \"nat\") (TermTypeApp (TermTypeAbs \"alpha\" (TermAbs \"f\" (TypeArrow (TypeVar \"alpha\") (TypeVar \"alpha\")) (TermAbs \"x\" (TypeVar \"alpha\") (TermApp (TermVar \"f\") (TermApp (TermVar \"f\") (TermVar \"x\")))))) (TypeVar \"nat\"))</span>\n<span class=\"cm\">Just (TypeArrow (TypeArrow (TypeVar \"nat\") (TypeVar \"nat\")) (TypeArrow (TypeVar \"nat\") (TypeVar \"nat\")))</span>\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 243853600,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624572970
    },
    {
        "content": "<p>Sorry, just wondering if anyone could help with the above questions.</p>",
        "id": 244285343,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624975297
    },
    {
        "content": "<blockquote>\n<p>If all of the variables names in the context and given term are required to differ, does that avoid the need for alpha renaming?</p>\n</blockquote>\n<p>Unfortunately not, because terms can end up duplicated by substitution and beta reduction can end up requiring you to nest a term inside itself</p>",
        "id": 244322630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624989906
    },
    {
        "content": "<blockquote>\n<p>What is the usual way to automate the alpha renaming when it is needed in substitution?</p>\n</blockquote>\n<p>I recall the HOL light implementation will just keep putting <code>'</code> on the variable name until it is not in the context anymore</p>",
        "id": 244322997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624990028
    },
    {
        "content": "<p>Thank you! Does what I have for the De Bruijn indexing look right?</p>",
        "id": 244331583,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624993718
    },
    {
        "content": "<p><code>substitute</code> isn't quite right. What you want is a function that maps <code>subst (var i) k e = if i &lt; k then var i else if i == k then e else var (i-1)</code></p>",
        "id": 244335507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995409
    },
    {
        "content": "<p>that is, all variables above the cutoff are decreased by 1</p>",
        "id": 244335559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995431
    },
    {
        "content": "<p>there is also a generalized version of this where you substitute a list of values of length <code>n</code> into variables <code>k, k+1, ..., k+n-1</code> and shift everything above that down by <code>n</code></p>",
        "id": 244335664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995477
    },
    {
        "content": "<p>but you don't need that for basic lambda calculus, unless you optimize for the case of substituting multiple lambdas at once</p>",
        "id": 244335760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995512
    },
    {
        "content": "<p>then in <code>betaReduce</code> you won't need to <code>shift _ 0 (-1)</code></p>",
        "id": 244335854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995561
    },
    {
        "content": "<p>Are you saying it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- untyped lambda calculus using De Bruijn indexing</span>\n\n<span class=\"c1\">-- Modified from https://www.cs.cornell.edu/courses/cs4110/2018fa/lectures/lecture15.pdf</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">Int</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">De Bruijn | Named Variable</span>\n<span class=\"cm\">Abs (Var 0) = Abs \"x\" (Var \"x\")</span>\n<span class=\"cm\">Abs (Var 1) = Abs \"x\" (Var \"y\")</span>\n<span class=\"cm\">Abs (Abs (Var 0)) = Abs \"x\" (Abs \"y\" (Var \"y\"))</span>\n<span class=\"cm\">Abs (Abs (Var 1)) = Abs \"x\" (Abs \"y\" (Var \"x\"))</span>\n<span class=\"cm\">Abs (Abs (Var 2)) = Abs \"x\" (Abs \"y\" (Var \"z\"))</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">shift t c i = Shifts the indices of the free variables in a term t above a</span>\n<span class=\"cm\">cutoff c up by i.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">shift</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">n</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span> <span class=\"kr\">then</span> <span class=\"kt\">Var</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e1</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e2</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nf\">shift</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Each time a lambda is gone under the index of the variable being substituted</span>\n<span class=\"cm\">for is increased by one and the free variables in the expression being</span>\n<span class=\"cm\">substituted in are shifted up by one. The free variables in the expression</span>\n<span class=\"cm\">being substituted in are shifted up by one so that they do not become captured</span>\n<span class=\"cm\">by the binding variables above the variable being substituted for.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">y</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span> <span class=\"kr\">then</span> <span class=\"kt\">Var</span> <span class=\"n\">y</span> <span class=\"kr\">else</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Substitutes occurrences of 0, the index of the variable being bound by the</span>\n<span class=\"cm\">lambda, by e2 shifted up by one. Then shifts the result down by one to ensure</span>\n<span class=\"cm\">that any free variables in e1 continue to refer to the same things after the</span>\n<span class=\"cm\">lambda is removed.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">betaReduce</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">betaReduce</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e1</span><span class=\"p\">)</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">shift</span> <span class=\"n\">e2</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">betaReduce</span> <span class=\"kr\">_</span>                 <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n</code></pre></div>",
        "id": 244337759,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624996477
    },
    {
        "content": "<p>you shouldn't need <code> (substitute e (x + 1) (shift n 0 1))</code> in the <code>Abs</code> case, it should just be <code>substitute e (x + 1) n</code></p>",
        "id": 244338028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624996582
    },
    {
        "content": "<p>oh wait, no you do need that</p>",
        "id": 244338184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624996664
    },
    {
        "content": "<p>you can also not shift there and shift by <code>x</code> in the <code>Var</code> case, although it's a toss-up which is more efficient</p>",
        "id": 244338314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624996709
    },
    {
        "content": "<p>Were you saying that the beta reduce would not work correctly in the original version, or that it was just not the usual implementation?</p>",
        "id": 244338865,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624996928
    },
    {
        "content": "<p>I'm not sure I understand what the change does.</p>",
        "id": 244339932,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624997309
    },
    {
        "content": "<p>If I translate this into Lean, what do I need to prove to ensure that it is correct?</p>",
        "id": 244342027,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624998139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/244338865\">said</a>:</p>\n<blockquote>\n<p>Were you saying that the beta reduce would not work correctly in the original version, or that it was just not the usual implementation?</p>\n</blockquote>\n<p>It's not the usual implementation. In particular, the revised version means that you never have to worry about negative shifts, which are problematic to reason about because they might produce negative variables and/or overlap variables</p>",
        "id": 244343409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624998721
    },
    {
        "content": "<p>you can think of <code>substitute</code> as a rearrangement of indices that removes <code>x</code> from the list (substituting the variable there) and shifts other indexes around so that no indexes are left stranded</p>",
        "id": 244343751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624998849
    },
    {
        "content": "<p>you can even type check these operations as <code>context -&gt; context</code> functions that insert or remove an element from the middle of the list</p>",
        "id": 244343966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624998927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/244342027\">said</a>:</p>\n<blockquote>\n<p>If I translate this into Lean, what do I need to prove to ensure that it is correct?</p>\n</blockquote>\n<p>The main theorem you want to prove about these operations is type correctness: if <code>Gamma |- e : A</code> then <code>Gamma, B |- lift e 0 1 : A</code>, and if <code>Gamma, B |- f : A</code> and <code>Gamma |- x : B</code> then <code>Gamma |- substitute f 0 x : B</code></p>",
        "id": 244344375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999126
    },
    {
        "content": "<p>if you have dependent types then the first theorem is actually <code>Gamma |- e : A =&gt; Gamma, B |- lift e 0 1 : lift A 0 1</code></p>",
        "id": 244344462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999179
    },
    {
        "content": "<p>and of course these theorems generalize when the indices are not just <code>0</code> and <code>1</code>, which you will need when proving them by induction</p>",
        "id": 244344549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999214
    },
    {
        "content": "<p>In the source I translated the code from it stated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Then</span> <span class=\"n\">shifts</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">down</span> <span class=\"kd\">by</span> <span class=\"n\">one</span> <span class=\"n\">to</span> <span class=\"n\">ensure</span>\n<span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">free</span> <span class=\"kd\">variables</span> <span class=\"k\">in</span> <span class=\"n\">e1</span> <span class=\"n\">continue</span> <span class=\"n\">to</span> <span class=\"n\">refer</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">things</span> <span class=\"n\">after</span> <span class=\"n\">the</span>\n<span class=\"n\">lambda</span> <span class=\"n\">is</span> <span class=\"n\">removed.</span>\n</code></pre></div>\n<p>How is this ensured in the revision?</p>",
        "id": 244345288,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1624999596
    },
    {
        "content": "<p>it is done by <code>substitute</code>  in the high-var case</p>",
        "id": 244345421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999659
    },
    {
        "content": "<p>substituting <code>(#1 + #0)[e/#0]</code> is <code>(#0 + e)</code></p>",
        "id": 244345575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999732
    },
    {
        "content": "<p>essentially, we think of the substitution operation itself being a kind of binder, so variables above the substitution target are actually referring to numbers one less in the outer context</p>",
        "id": 244345781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999810
    },
    {
        "content": "<p>you can see that from the typing theorem I gave for <code>substitute</code>: if <code>substitute f 0 x</code> exists in context <code>Gamma</code> then <code>f</code> is in context <code>Gamma, B</code>, which is to say that variable 0 refers to <code>B</code> and variables 1 and up refer to things in <code>Gamma</code></p>",
        "id": 244346013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624999930
    },
    {
        "content": "<p>If you don't do that shift then you have the more awkward typing theorem that if <code>Gamma, B |- f : A</code> and <code>Gamma |- x : B</code> then <code>Gamma, INVALID |- substitute f 0 x : B</code> where <code>INVALID</code> means that this variable should not be referred to in the term</p>",
        "id": 244346223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625000039
    },
    {
        "content": "<p>and you later fix that up with a <code>shift _ 0 (-1)</code>, which only has a partial typing theorem: if <code>Gamma, INVALID |- e : A</code> then <code>Gamma |- shift e 0 (-1) : A</code></p>",
        "id": 244346365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625000106
    },
    {
        "content": "<p>I'm sorry, I'm not sure I see how Var (y - 1) in substitute has any affect on the variables in n (e2 in betaReduce)?</p>",
        "id": 244349409,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625001598
    },
    {
        "content": "<p>Should the shift be removed from the betaReduce function in the revised version? That is, <code>substitute e1 0 e2</code>?</p>",
        "id": 244358451,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625007072
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- untyped lambda calculus using De Bruijn indexing</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">Int</span> <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span> <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"kt\">Term</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">De Bruijn | Named Variable</span>\n<span class=\"cm\">Abs (Var 0) = Abs \"x\" (Var \"x\")</span>\n<span class=\"cm\">Abs (Var 1) = Abs \"x\" (Var \"y\")</span>\n<span class=\"cm\">Abs (Abs (Var 0)) = Abs \"x\" (Abs \"y\" (Var \"y\"))</span>\n<span class=\"cm\">Abs (Abs (Var 1)) = Abs \"x\" (Abs \"y\" (Var \"x\"))</span>\n<span class=\"cm\">Abs (Abs (Var 2)) = Abs \"x\" (Abs \"y\" (Var \"z\"))</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">lift t c = Increases the indices of the free variables in a term t above a</span>\n<span class=\"cm\">cutoff c by one.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">lift</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">lift</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">n</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span> <span class=\"kr\">then</span> <span class=\"kt\">Var</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">lift</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">lift</span> <span class=\"n\">e1</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">lift</span> <span class=\"n\">e2</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"nf\">lift</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">c</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">lift</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Each time a lambda is gone under the index of the variable being substituted</span>\n<span class=\"cm\">for is increased by one and the indices of the free variables in the term being</span>\n<span class=\"cm\">substituted in are increased by one. The indices of the free variables in the</span>\n<span class=\"cm\">term being substituted in are increased by one so that they do not become</span>\n<span class=\"cm\">captured by the binding variables above the variable being substituted for.</span>\n<span class=\"cm\">The indices of the free variables in the term being substituted into are</span>\n<span class=\"cm\">decreased by one because the substitution is intended to be used for defining</span>\n<span class=\"cm\">beta reduction and a lambda disappears in the beta reduction process.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">y</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span> <span class=\"kr\">then</span> <span class=\"kt\">Var</span> <span class=\"n\">y</span> <span class=\"kr\">else</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substitute</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e</span><span class=\"p\">)</span>     <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"nf\">betaReduce</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">betaReduce</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">e1</span><span class=\"p\">)</span> <span class=\"n\">e2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">substitute</span> <span class=\"n\">e1</span> <span class=\"mi\">0</span> <span class=\"n\">e2</span>\n<span class=\"nf\">betaReduce</span> <span class=\"kr\">_</span>                 <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n</code></pre></div>",
        "id": 244362293,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625009824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/241994045\">said</a>:</p>\n<blockquote>\n<p>Yes. Lean uses a combination of named and de bruijn variables called \"locally nameless\": variables inside a term are de bruijn, but binders are \"opened\" when they enter the local context, at which point they are replaced with \"local constants\" that are basically named variables</p>\n</blockquote>\n<p>Is this what you mean? Is this right?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- The untyped lambda calculus using locally nameless bindings.</span>\n\n<span class=\"c1\">-- Adapted from https://boarders.github.io/posts/locally-nameless/</span>\n\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.List</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Map</span>\n\n\n<span class=\"c1\">-- named variable</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"n\">a</span>\n            <span class=\"o\">|</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"kt\">Term</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Term</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"o\">|</span> <span class=\"kt\">Abs</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">Term</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n              <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Var</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">F</span> <span class=\"n\">a</span>   <span class=\"c1\">-- The name of a free variable or a binding variable.</span>\n           <span class=\"o\">|</span> <span class=\"kt\">B</span> <span class=\"kt\">Int</span> <span class=\"c1\">-- The De Bruijn index of a bound variable.</span>\n             <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- locally nameless</span>\n<span class=\"kr\">type</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Term</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Translates a named variable term to a locally nameless term.</span>\n<span class=\"cm\">Keeps the name of each free variable and binding variable. Changes the name of</span>\n<span class=\"cm\">each bound variable to its De Bruijn index.</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">toLN</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n<span class=\"nf\">toLN</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span>\n  <span class=\"kr\">where</span>\n    <span class=\"cm\">{-</span>\n<span class=\"cm\">    The mapping is from the name of each binding variable to its De Bruijn</span>\n<span class=\"cm\">    index at the current depth.</span>\n<span class=\"cm\">    -}</span>\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"n\">a</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">name</span><span class=\"p\">)</span>   <span class=\"ow\">=</span>\n      <span class=\"kr\">case</span> <span class=\"n\">name</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">`</span> <span class=\"n\">env</span> <span class=\"kr\">of</span>\n        <span class=\"cm\">{-</span>\n<span class=\"cm\">        The variable name is a key in the map. Therefore it has the same name</span>\n<span class=\"cm\">        as a binding variable. Therefore it is a bound variable. Then the</span>\n<span class=\"cm\">        De Bruijn index of the binding variable it matches is used.</span>\n<span class=\"cm\">        -}</span>\n        <span class=\"kt\">Just</span> <span class=\"n\">index</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"kt\">B</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"cm\">{-</span>\n<span class=\"cm\">        The variable name is not a key in the map. Therefore it is a free</span>\n<span class=\"cm\">        variable. Then its name is kept.</span>\n<span class=\"cm\">        -}</span>\n        <span class=\"kt\">Nothing</span>    <span class=\"ow\">-&gt;</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"kt\">F</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span>  <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"n\">t2</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">name</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"cm\">{-</span>\n<span class=\"cm\">      Since a binding variable has been gone under, the De Bruijn index of</span>\n<span class=\"cm\">      each binding variable at the current depth is increased by 1 and the</span>\n<span class=\"cm\">      De Bruijn index of the encountered binding variable at the current</span>\n<span class=\"cm\">      depth is set to 0.</span>\n<span class=\"cm\">      -}</span>\n      <span class=\"kr\">let</span> <span class=\"n\">env'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"n\">name</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n      <span class=\"kt\">Abs</span> <span class=\"p\">(</span><span class=\"kt\">F</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env'</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">-- The name of the binding variable is kept.</span>\n\n\n<span class=\"c1\">-- Translates a locally nameless term to a named variable term.</span>\n<span class=\"nf\">fromLN</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span>\n<span class=\"nf\">fromLN</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span>\n  <span class=\"kr\">where</span>\n    <span class=\"cm\">{-</span>\n<span class=\"cm\">    The mapping is from the De Bruijn index of each binding variable at the</span>\n<span class=\"cm\">    current depth to its name.</span>\n<span class=\"cm\">    -}</span>\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span> <span class=\"kt\">Int</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">v</span><span class=\"p\">)</span>     <span class=\"ow\">=</span>\n      <span class=\"kr\">case</span> <span class=\"n\">v</span> <span class=\"kr\">of</span>\n        <span class=\"c1\">-- This is a free variable.</span>\n        <span class=\"kt\">F</span> <span class=\"n\">name</span>  <span class=\"ow\">-&gt;</span> <span class=\"kt\">Var</span> <span class=\"n\">name</span>\n        <span class=\"c1\">-- This is a bound variable.</span>\n        <span class=\"kt\">B</span> <span class=\"n\">index</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">case</span> <span class=\"n\">index</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">`</span> <span class=\"n\">env</span> <span class=\"kr\">of</span>\n                     <span class=\"kt\">Just</span> <span class=\"n\">name</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Var</span> <span class=\"n\">name</span>\n                     <span class=\"kt\">Nothing</span>   <span class=\"ow\">-&gt;</span> <span class=\"ne\">error</span> <span class=\"s\">\"Bound variable has no binder.\"</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"n\">t2</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"p\">)</span>   <span class=\"ow\">=</span>\n      <span class=\"kr\">case</span> <span class=\"n\">v</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">B</span> <span class=\"kr\">_</span>    <span class=\"ow\">-&gt;</span> <span class=\"ne\">error</span> <span class=\"s\">\"Bound variable at binding site.\"</span>\n        <span class=\"cm\">{-</span>\n<span class=\"cm\">        Since a binding variable has been gone under, the</span>\n<span class=\"cm\">        De Bruijn index of each binding variable at the</span>\n<span class=\"cm\">        current depth is increased by 1 and the De Bruijn</span>\n<span class=\"cm\">        index of the encountered binding variable at the</span>\n<span class=\"cm\">        current depth is set to 0.</span>\n<span class=\"cm\">        -}</span>\n        <span class=\"kt\">F</span> <span class=\"n\">name</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">let</span> <span class=\"n\">env'</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"mi\">0</span> <span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">mapKeysMonotonic</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n                             <span class=\"kt\">Abs</span> <span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">env'</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">substitute m n = Computes (Abs x m) [x := n].</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">substitute</span> <span class=\"ow\">::</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n<span class=\"nf\">substitute</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n    <span class=\"n\">go</span> <span class=\"n\">outer</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span>\n      <span class=\"kr\">case</span> <span class=\"n\">v</span> <span class=\"kr\">of</span>\n        <span class=\"cm\">{-</span>\n<span class=\"cm\">        If the bound variable refers to the outermost binder of the body then</span>\n<span class=\"cm\">        the bound variable is replaced by n.</span>\n<span class=\"cm\">        -}</span>\n        <span class=\"kt\">B</span> <span class=\"n\">index</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"n\">outer</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"kt\">B</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"kt\">F</span> <span class=\"n\">name</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Var</span> <span class=\"p\">(</span><span class=\"kt\">F</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"n\">outer</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">App</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">outer</span> <span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"n\">outer</span> <span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"cm\">{-</span>\n<span class=\"cm\">    Since a binding variable has been gone under, the index of the bound</span>\n<span class=\"cm\">    variable to be replaced must be increased so that it continues to refer</span>\n<span class=\"cm\">    to the outermost binder.</span>\n<span class=\"cm\">    -}</span>\n    <span class=\"n\">go</span> <span class=\"n\">outer</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"n\">outer</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- Converts a locally nameless term to weak head normal form.</span>\n<span class=\"nf\">whnfLN</span> <span class=\"ow\">::</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n<span class=\"nf\">whnfLN</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"kt\">[]</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">TermLN</span> <span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n    <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"n\">args</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">t1</span> <span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"kt\">:</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"kr\">_</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">args</span>\n    <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"n\">args</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">foldl'</span> <span class=\"kt\">App</span> <span class=\"n\">t</span> <span class=\"n\">args</span>\n\n<span class=\"c1\">-- Converts a named variable term to weak head normal form.</span>\n<span class=\"nf\">whnf</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span>\n<span class=\"nf\">whnf</span> <span class=\"ow\">=</span> <span class=\"n\">fromLN</span> <span class=\"o\">.</span> <span class=\"n\">whnfLN</span> <span class=\"o\">.</span> <span class=\"n\">toLN</span>\n\n\n<span class=\"c1\">-- Converts a locally nameless term to normal form.</span>\n<span class=\"nf\">nfLN</span> <span class=\"ow\">::</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n<span class=\"nf\">nfLN</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"kt\">[]</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">go</span> <span class=\"ow\">::</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">TermLN</span> <span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TermLN</span> <span class=\"n\">a</span>\n    <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"kt\">App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"n\">args</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"n\">t1</span> <span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"kt\">:</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"kt\">[]</span> <span class=\"ow\">=</span> <span class=\"kt\">Abs</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">nfLN</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"kt\">Abs</span> <span class=\"kr\">_</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">go</span> <span class=\"p\">(</span><span class=\"n\">substitute</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">args</span>\n    <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"n\">args</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">foldl'</span> <span class=\"kt\">App</span> <span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">nfLN</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Converts a named variable term to normal form.</span>\n<span class=\"nf\">nf</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Ord</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"n\">a</span>\n<span class=\"nf\">nf</span> <span class=\"ow\">=</span> <span class=\"n\">fromLN</span> <span class=\"o\">.</span> <span class=\"n\">nfLN</span> <span class=\"o\">.</span> <span class=\"n\">toLN</span>\n</code></pre></div>",
        "id": 244816438,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625334471
    },
    {
        "content": "<p>Are these the correct terms and types for \\lambda \\underline{\\omega} (types that depend on other types)?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Square</span> <span class=\"ow\">=</span> <span class=\"kt\">SquareSquare</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindArrow</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>      <span class=\"c1\">-- Type -&gt; Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>        <span class=\"c1\">-- Type Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- \\lambda V : Kind . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Declaration</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n                 <span class=\"o\">|</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Kind</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Declaration</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 245522238,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625879839
    },
    {
        "content": "<p>You also want a big-lambda operator in the term language, as the inhabitants of <code>TypeAbs</code></p>",
        "id": 245527245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625888428
    },
    {
        "content": "<p>Can you suggest a good reference for what I am trying to do? I'm using Type Theory and Formal Proof by Rob Nederpelt and Herman Geuvers but it wasn't clear on this language syntax.</p>",
        "id": 245553742,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625927889
    },
    {
        "content": "<p>I think maybe you are referring to what is titled here [1] as λω (System F-omega) and I am referring to what is titled λω_ (STLC + higher-kinded type operators)?<br>\n[1] <a href=\"https://cstheory.stackexchange.com/questions/36054/how-do-you-get-the-calculus-of-constructions-from-the-other-points-in-the-lambda\">https://cstheory.stackexchange.com/questions/36054/how-do-you-get-the-calculus-of-constructions-from-the-other-points-in-the-lambda</a></p>",
        "id": 245555396,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625929337
    },
    {
        "content": "<p>How do you deal with the weakening rule when writing a type checker for λω_ (STLC + higher-kinded type operators) when it seems that its conclusion can mirror the conclusion of other rules?</p>",
        "id": 245580661,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625965808
    },
    {
        "content": "<p>This is my attempt that I'm not sure how to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- underscore omega (STLC + type constructors)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Square</span> <span class=\"ow\">=</span> <span class=\"kt\">SquareSquare</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindArrow</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>      <span class=\"c1\">-- Type -&gt; Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>        <span class=\"c1\">-- Type Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- \\lambda V : Kind . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Declaration</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n                 <span class=\"o\">|</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Kind</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Declaration</span><span class=\"p\">]</span>\n\n<span class=\"nf\">getDomain</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">getDomain</span> <span class=\"kt\">[]</span>                                   <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">alpha</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- getSquare</span>\n\n<span class=\"nf\">getSquare</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Kind</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Square</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(sort)</span>\n<span class=\"cm\">\\empty |- * : Square</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"kt\">[]</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">* -&gt; * : Square</span>\n<span class=\"cm\">* -&gt; (* -&gt; *) : Square</span>\n\n<span class=\"cm\">(form) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">     \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span> <span class=\"kr\">of</span>\n                           <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span>\n                           <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getKind</span>\n\n<span class=\"nf\">getKind</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Kind</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = square)</span>\n<span class=\"cm\">   \\Gamma |- A : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : A |- x : A</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"p\">(</span><span class=\"n\">x'</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">))</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getKind</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">\\alpha -&gt; \\sigma : *</span>\n<span class=\"cm\">\\beta -&gt; (\\sigma -&gt; \\alpha) : *</span>\n\n<span class=\"cm\">(form) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">     \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span> <span class=\"kr\">of</span>\n                       <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span>\n                       <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (type)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">            \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ki_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ki_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ki_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ki_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = square)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getType</span>\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = star)</span>\n<span class=\"cm\">   \\Gamma |- A : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : A |- x : A</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"p\">(</span><span class=\"n\">x'</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">))</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (term)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">            \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = star)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin Gamma</span>\n<span class=\"cm\">    \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n</code></pre></div>",
        "id": 245583040,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1625969891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/245580661\">said</a>:</p>\n<blockquote>\n<p>How do you deal with the weakening rule when writing a type checker for λω_ (STLC + higher-kinded type operators) when it seems that its conclusion can mirror the conclusion of other rules?</p>\n</blockquote>\n<p>Generally typecheckers don't ever weaken; they only use a variant on the hypothesis rule that says that <code>Gamma |- x : T</code> when <code>(x: T) \\in Gamma</code></p>",
        "id": 245593438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625988308
    },
    {
        "content": "<p>How do they ensure that the types in the declarations in the context are permissible?</p>",
        "id": 245602692,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626003297
    },
    {
        "content": "<p>Do I add a function that iterates through the context checking that each type below square has been previously declared in the context?</p>",
        "id": 245602762,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626003373
    },
    {
        "content": "<p>Do you know where I might find existing implementations in Haskell of the type checkers for the eight corners of the lambda cube?</p>",
        "id": 245607430,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626010561
    },
    {
        "content": "<p>Am I taking the wrong approach?</p>",
        "id": 245628080,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626038798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/245593438\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/245580661\">said</a>:</p>\n<blockquote>\n<p>How do you deal with the weakening rule when writing a type checker for λω_ (STLC + higher-kinded type operators) when it seems that its conclusion can mirror the conclusion of other rules?</p>\n</blockquote>\n<p>Generally typecheckers don't ever weaken; they only use a variant on the hypothesis rule that says that <code>Gamma |- x : T</code> when <code>(x: T) \\in Gamma</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> My text has:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">It</span> <span class=\"n\">becomes</span> <span class=\"n\">also</span> <span class=\"n\">clear</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"kd\">example</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"n\">rule</span> <span class=\"n\">introduced</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">present</span> <span class=\"n\">chapter</span> <span class=\"n\">is</span>\n<span class=\"n\">less</span> <span class=\"n\">general</span> <span class=\"n\">than</span> <span class=\"n\">the</span> <span class=\"n\">one</span> <span class=\"k\">in</span> <span class=\"n\">e.</span> <span class=\"n\">g.</span> <span class=\"n\">the</span> <span class=\"n\">system</span> <span class=\"bp\">λ→</span> <span class=\"o\">(</span><span class=\"n\">see</span> <span class=\"n\">Definition</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"n\">since</span> <span class=\"n\">the</span> <span class=\"n\">present</span> <span class=\"o\">(</span><span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"n\">rule</span>\n<span class=\"n\">only</span> <span class=\"n\">allows</span> <span class=\"n\">the</span> <span class=\"n\">derivation</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">newly</span> <span class=\"n\">added</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"n\">declaration</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">context.</span> <span class=\"n\">See</span> <span class=\"n\">lines</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">derivation.</span> <span class=\"n\">In</span> <span class=\"bp\">λ→</span><span class=\"o\">,</span> <span class=\"n\">however</span><span class=\"o\">,</span> <span class=\"n\">any</span> <span class=\"n\">declaration</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"n\">occurring</span> <span class=\"k\">in</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"n\">derivable</span> <span class=\"k\">with</span>\n<span class=\"n\">respect</span> <span class=\"n\">to</span> <span class=\"n\">this</span> <span class=\"bp\">Γ.</span> <span class=\"n\">It</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">natural</span> <span class=\"n\">desire</span> <span class=\"n\">that</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"k\">do</span> <span class=\"n\">as</span> <span class=\"n\">much</span> <span class=\"k\">in</span> <span class=\"n\">our</span> <span class=\"n\">present</span> <span class=\"n\">system</span> <span class=\"bp\">λ</span><span class=\"n\">ω</span> <span class=\"n\">as</span>\n<span class=\"k\">in</span> <span class=\"bp\">λ→.</span> <span class=\"n\">So</span><span class=\"o\">,</span> <span class=\"n\">for</span> <span class=\"kd\">example</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">want</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">able</span> <span class=\"n\">to</span> <span class=\"n\">derive</span> <span class=\"n\">not</span> <span class=\"n\">only</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"bp\">∗</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊢</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">but</span>\n<span class=\"n\">also</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"bp\">∗</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊢</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"bp\">∗</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">impossible</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">present</span> <span class=\"n\">rules.</span>\n<span class=\"bp\">...</span>\n <span class=\"n\">The</span> <span class=\"n\">solution</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">previously</span> <span class=\"n\">explained</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">addition</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">new</span> <span class=\"n\">rule.</span> <span class=\"n\">This</span> <span class=\"n\">rule</span><span class=\"o\">,</span> <span class=\"n\">called</span>\n<span class=\"n\">Weakening</span><span class=\"o\">,</span> <span class=\"n\">allows</span> <span class=\"n\">us</span> <span class=\"n\">to</span> <span class=\"bp\">‘</span><span class=\"n\">weaken</span><span class=\"bp\">’</span> <span class=\"n\">the</span> <span class=\"n\">context</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">judgement</span> <span class=\"kd\">by</span> <span class=\"n\">adding</span> <span class=\"n\">new</span> <span class=\"n\">declarations</span><span class=\"o\">,</span> <span class=\"n\">provided</span>\n<span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"bp\">‘</span><span class=\"n\">types</span><span class=\"bp\">’</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">declarations</span> <span class=\"n\">are</span> <span class=\"bp\">‘</span><span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">formed</span><span class=\"bp\">’.</span>\n</code></pre></div>\n<p>The derivation rules they give are:</p>\n<p><a href=\"/user_uploads/3121/px6rC4X6BXvLrowuleXrpZlG/Screenshot-from-2021-07-12-19-44-56.png\">Screenshot-from-2021-07-12-19-44-56.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/px6rC4X6BXvLrowuleXrpZlG/Screenshot-from-2021-07-12-19-44-56.png\" title=\"Screenshot-from-2021-07-12-19-44-56.png\"><img src=\"/user_uploads/3121/px6rC4X6BXvLrowuleXrpZlG/Screenshot-from-2021-07-12-19-44-56.png\"></a></div><p>Are there a different set of rules that are more canonical for this system?</p>",
        "id": 246040750,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626310945
    },
    {
        "content": "<p>That's fine for the abstract presentation; what I'm saying is that in practice typecheckers defer all uses of the (weak) rule to immediately before an application of (var), so that you get the combined (var+weak) rule that I described</p>",
        "id": 246040855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311089
    },
    {
        "content": "<p>Similarly, you would use a (sort+weak) rule of the form <code>Gamma |- * : box</code></p>",
        "id": 246040904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311160
    },
    {
        "content": "<p>How do they ensure that the types in the context are permissible?</p>",
        "id": 246040941,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626311169
    },
    {
        "content": "<p>you check that when you first construct the context</p>",
        "id": 246040950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311187
    },
    {
        "content": "<p>that is, in the (abst) rule</p>",
        "id": 246040965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311212
    },
    {
        "content": "<p>you could also check it in every application of the (var+weak) and (sort+weak) rules, but that's a lot more expensive</p>",
        "id": 246040987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311277
    },
    {
        "content": "<p>Do we only usually give an empty context in the first call to getType?</p>",
        "id": 246041043,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626311328
    },
    {
        "content": "<p>presumably</p>",
        "id": 246041052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311349
    },
    {
        "content": "<p>alternatively it can be a context that you have pre-checked</p>",
        "id": 246041058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311365
    },
    {
        "content": "<p>or one that was previously constructed somehow and you have the invariant that it is checked</p>",
        "id": 246041070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311385
    },
    {
        "content": "<p>Do you lose anything by that requirement (that the initial context is empty)?</p>",
        "id": 246041135,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626311503
    },
    {
        "content": "<p>I guess you can just add on more abstractions?</p>",
        "id": 246041199,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626311546
    },
    {
        "content": "<p>It's just reversing the \"polarity\" of the context: in <code>Gamma |- e : T</code>, we are assuming that <code>Gamma</code> is type correct and proving that <code>e</code> is type correct (whether <code>T</code> is an input or output depends on the context, but it's usually an output), rather than proving that both <code>Gamma</code> and <code>e</code> are type correct (which is what your given rules are doing)</p>",
        "id": 246041437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311901
    },
    {
        "content": "<p>With Gamma as an input, it means that we can have rules like <code>Gamma |- * : box</code> and <code>Gamma, x : T |- x : T</code> with no hypotheses</p>",
        "id": 246041447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311938
    },
    {
        "content": "<p>but the lambda rule has an extra hypothesis: <code>Gamma |- A : s</code> and <code>Gamma, x : A |- M : B</code> implies <code>Gamma |- (\\lam x : A. M) : A -&gt; B</code></p>",
        "id": 246041524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626312045
    },
    {
        "content": "<p>So we aren't requiring that the initial context is empty, only that the initial context is type correct</p>",
        "id": 246041595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626312195
    },
    {
        "content": "<p>of course the empty context is type correct so that's an easy way to start out</p>",
        "id": 246041601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626312211
    },
    {
        "content": "<p>If you want to explicitly type check a context you can use a judgment <code>Γ ⊢</code> defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span>   <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">s</span>   <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">Dom</span><span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">)</span>\n<span class=\"c1\">---    ----------------------------</span>\n<span class=\"bp\">∅</span> <span class=\"bp\">⊢</span>            <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⊢</span>\n</code></pre></div>",
        "id": 246041741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626312401
    },
    {
        "content": "<p>I'll give that a try. Thank you!</p>",
        "id": 246042021,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626312790
    },
    {
        "content": "<p>Do we need to step out of these rules to check <code>T : s</code> or just check that T is a type or a kind?</p>",
        "id": 246042382,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626313242
    },
    {
        "content": "<p>The way I've just presented it, <code>Gamma |- e : T</code> implies <code>Gamma |- T : s</code> (or possibly also <code>|- T : s</code> if you don't have dependent types), so you don't need to check it in most cases</p>",
        "id": 246042417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626313315
    },
    {
        "content": "<p>This is why the lambda rule I gave doesn't need to also assume <code>Gamma |- B : s</code></p>",
        "id": 246042614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626313482
    },
    {
        "content": "<p>I'm sorry, I'm not sure I understand why that first implication holds.</p>",
        "id": 246042991,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626313849
    },
    {
        "content": "<p>Because we are assuming gamma is type correct?</p>",
        "id": 246043102,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626313968
    },
    {
        "content": "<p>We just make sure it holds for all the rules</p>",
        "id": 246043218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626314067
    },
    {
        "content": "<p>We do need to assume gamma is type correct though, since for it to work in the (var) rule <code>Gamma, x : T |- x : T</code> (which has no assumptions), we need <code>Gamma, x : T |-</code> to supply the needed <code>Gamma |- T : s</code> assertion</p>",
        "id": 246043358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626314251
    },
    {
        "content": "<p>That is, I claim one can prove:</p>\n<blockquote>\n<p><code>Gamma |-</code> and <code>Gamma |- e : T</code> implies <code>Gamma |- T : s</code><br>\nProof: By induction on <code>Gamma |- e : T</code>.</p>\n</blockquote>",
        "id": 246043466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626314343
    },
    {
        "content": "<p>Actually, looking again at the (abst) rule, I think you need to assume <code>Gamma |- B : s</code> because otherwise you could typecheck <code>|- (λ T : s. λ x : T. x) : s -&gt; T -&gt; T</code> which would be bad because <code>T</code> has escaped its scope</p>",
        "id": 246043776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626314627
    },
    {
        "content": "<p>Do the rules from the screenshot work (other than the weakening)?</p>",
        "id": 246044007,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626314778
    },
    {
        "content": "<p>I guess <code>s</code> is a metavariable for <code>*</code> or <code>box</code>? If so, then yes. They are using the shorthand <code>Gamma |- A -&gt; B : s</code> which is equivalent to the conjunction <code>Gamma |- A : s</code> and <code>Gamma |- B : s</code></p>",
        "id": 246044079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626314875
    },
    {
        "content": "<p>Yes, sorry, <code>s</code> is a metavariable for <code>*</code> or <code>box</code>.</p>",
        "id": 246044137,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626314912
    },
    {
        "content": "<p>Ah, I guess those rules do not satisfy the theorem I claimed, because <code>Gamma |- box : ?</code> does not typecheck</p>",
        "id": 246044213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315003
    },
    {
        "content": "<p>In lean you have an infinite hierarchy of universes so that everything on the right of a type judgment can also appear on the left</p>",
        "id": 246044274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315047
    },
    {
        "content": "<p>No, I don't think that is the case here. <code>box</code> is as high as it goes.</p>",
        "id": 246044301,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626315088
    },
    {
        "content": "<p>You can still repair the theorem to say that <code>Gamma |- e : T</code> implies <code>Gamma |- T : s</code> or <code>T = box</code></p>",
        "id": 246044414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315196
    },
    {
        "content": "<p>The book version also has <code>Gamma |- e : T</code> implies <code>Gamma |-</code>, while my version has the weaker theorem <code>Gamma |-</code> and <code>Gamma |- e : T</code> implies <code>Gamma |- T : s</code> or <code>T = box</code></p>",
        "id": 246044515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315268
    },
    {
        "content": "<p>Where in the book?</p>",
        "id": 246044658,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626315413
    },
    {
        "content": "<p>Oh I don't know, I don't know your book. I'm just saying that you could prove that theorem about those rules</p>",
        "id": 246044682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315437
    },
    {
        "content": "<p>it's pretty straightforward by induction on <code>Gamma |- e : T</code></p>",
        "id": 246044696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626315460
    },
    {
        "content": "<p>Your version is the book's set of rules minus (weak), but plus the two context rules?</p>",
        "id": 246044870,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626315612
    },
    {
        "content": "<p>I'm guessing it is not possible to create a type checker using just the book's rules as is?</p>",
        "id": 246044981,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626315744
    },
    {
        "content": "<p>It's possible to write a type checker using weak nondeterministically (and sometimes it is necessary, if the type theory is complicated enough), but it's a lot harder, you have to do backtracking</p>",
        "id": 246045507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626316393
    },
    {
        "content": "<p>It's also possible to defer all uses of (weak) without changing the (sort) and (var) rules, that just means checking <code>Gamma |-</code> at all the leaves of the type derivation</p>",
        "id": 246045604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626316490
    },
    {
        "content": "<p>What do you mean by defer? Just to be sure, what does <code>Gamma |-</code> mean precisely?</p>",
        "id": 246045742,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626316677
    },
    {
        "content": "<p>Do you mean call (weak) every time it would otherwise return <code>Nothing</code>?</p>",
        "id": 246045935,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626316885
    },
    {
        "content": "<blockquote>\n<p>Just to be sure, what does <code>Gamma |-</code> mean precisely?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/stlc.20terms/near/246041741\">said</a>:</p>\n<blockquote>\n<p>If you want to explicitly type check a context you can use a judgment <code>Γ ⊢</code> defined like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span>   <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">s</span>   <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">Dom</span><span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">)</span>\n<span class=\"c1\">---    ----------------------------</span>\n<span class=\"bp\">∅</span> <span class=\"bp\">⊢</span>            <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⊢</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 246053860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626327412
    },
    {
        "content": "<blockquote>\n<p>What do you mean by defer?</p>\n</blockquote>\n<p>I mean to never use the (weak) rule unless no other rule applies. That means when typechecking a lambda, arrow, or application you never use (weak) even though it could be used; the only time you use it is when the goal is e.g. <code>x : A, y : B |- x : A</code> in which case the (var) rule does not directly apply because the variable is not the last one in the list, so you have to use (weak) first and then (var); or with <code>x : A |- * : box</code> you can't apply (sort) because the context is not empty so you have to apply (weak) until the context is empty, and then (sort). These combinations of weak and then var/sort are what I was calling (var+weak) and (sort+weak), and they are basically derived rules that look like this:</p>\n<ul>\n<li>(sort+weak): <code>Gamma |- * : box</code></li>\n<li>(var+weak): <code>Gamma |- x : A</code> if <code>(x : A) \\in Gamma</code></li>\n</ul>",
        "id": 246054063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626327676
    },
    {
        "content": "<p>In general, you can't just choose not to use a certain rule when it could apply, because you might falsely reject a well typed expression, but in this case it is admissible because weak \"commutes\" with the other rules: a proof by (weak) followed by (appl) can be transformed into a proof by (appl) with (weak) in both subgoals. By performing such commutations we push all uses of (weak) to the leaves (var) and (sort), resulting in the aforementioned combined rules</p>",
        "id": 246054232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626327898
    },
    {
        "content": "<p>More formally, one can prove that if <code>Γ |- e : T</code> in the original system with (weak), then for every <code>Γ' &gt;= Γ</code> (where <code>Γ &lt;= Γ'</code> means that <code>Γ</code> is a sublist of <code>Γ'</code>, i.e. some bindings are removed but the order is preserved), <code>Γ' |- e : T</code> in the system without (weak) and with the (var+weak) and (sort+weak) rules.</p>\n<p>The proof is by induction on <code>Γ |- e : T</code> (assume in each case that <code>Γ' &gt;= Γ</code> is given):</p>\n<ul>\n<li>If (weak) is used to derive <code>Γ, x : A |- e : T</code> from <code>Γ |- e : T</code>, then <code>Γ' &gt;= (Γ, x : A)</code> implies <code>Γ' &gt;= Γ</code> so <code>Γ' |- e : T</code> by the IH.</li>\n<li>If (var) is used to derive <code>Γ, x : A |- x : A</code>, then <code>Γ' &gt;= (Γ, x : A)</code> implies <code>(x : A) \\in Γ'</code> so <code>Γ' |- x : A</code> by the (var+weak) rule.</li>\n<li>If (sort) is used to derive <code>|- * : box</code>, then <code>Γ' |- * : box</code>by the (sort+weak) rule.</li>\n<li>If (appl) is used to derive <code>Γ |- M N : B</code> from <code>Γ |- M : A -&gt; B</code> and <code>Γ |- N : A</code>, then <code>Γ' |- M : A -&gt; B</code> and <code>Γ' |- N : A</code> by the IH so (appl) applies. (The (form) and (conv) rules are similar.)</li>\n<li>If (abst) is used to derive <code>Γ |- (λ x: A. M) : A -&gt; B</code> from <code>Γ |- A -&gt; B : s</code> and <code>Γ, x : A |- M : B</code>, then by the IH <code>Γ' |- A -&gt; B : s</code>, and <code>Γ' &gt;= Γ</code> implies <code>(Γ', x : A) &gt;= (Γ, x : A)</code> (here it is important that we have a sublist relation, not just an initial segment) so <code>Γ', x : A |- M : B</code> by the IH, so (abst) applies.</li>\n</ul>",
        "id": 246055117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626328925
    },
    {
        "content": "<p>The (var + weak) rule you have above is less restrictive than just using weak only when the var rule does not apply right? I think that, because I tried the code below, which I think is what you meant by using weak only when the var rule does not apply (?) and it doesn't type check <code>getSquare [(TypeDeclaration (\"a\", KindStar)), (TermDeclaration (\"x\", (TypeVar \"a\")))] KindStar</code></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Square</span> <span class=\"ow\">=</span> <span class=\"kt\">SquareSquare</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindArrow</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>      <span class=\"c1\">-- Type -&gt; Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>        <span class=\"c1\">-- Type Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- \\lambda V : Kind . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Declaration</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n                 <span class=\"o\">|</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Kind</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Declaration</span><span class=\"p\">]</span>\n\n<span class=\"nf\">getDomain</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">getDomain</span> <span class=\"kt\">[]</span>                                   <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">alpha</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- getSquare</span>\n\n<span class=\"nf\">getSquare</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Kind</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Square</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(sort)</span>\n<span class=\"cm\">\\empty |- * : Square</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"kt\">[]</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"kt\">KindStar</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"kt\">KindStar</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">* -&gt; * : Square</span>\n<span class=\"cm\">* -&gt; (* -&gt; *) : Square</span>\n\n<span class=\"cm\">(form) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">     \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span> <span class=\"kr\">of</span>\n                           <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span>\n                           <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getKind</span>\n\n<span class=\"nf\">getKind</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Kind</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = square)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">x'</span>\n    <span class=\"kr\">then</span>\n      <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">c</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">else</span>\n      <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getKind</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">\\alpha -&gt; \\sigma : *</span>\n<span class=\"cm\">\\beta -&gt; (\\sigma -&gt; \\alpha) : *</span>\n\n<span class=\"cm\">(form) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">     \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span> <span class=\"kr\">of</span>\n                       <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span>\n                       <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (type)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">            \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ki_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ki_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ki_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ki_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = square)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getType</span>\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = square)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">x'</span>\n    <span class=\"kr\">then</span>\n      <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"n\">c</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">else</span>\n      <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n        <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = square)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getSquare</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (term)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">            \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = star)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"kr\">case</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">of</span>\n      <span class=\"kt\">Just</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n      <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n</code></pre></div>",
        "id": 246185810,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626412894
    },
    {
        "content": "<p>Basically, the weakening rule pulls off the type declaration and then tries to find the type of \"a\" in the term declaration, which it can't any more, because it lost it when the type declaration was pulled off. At least that is what I think is happening.</p>",
        "id": 246186023,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626413178
    },
    {
        "content": "<p>Or maybe that shouldn't actually be typeable?</p>",
        "id": 246187016,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626414652
    },
    {
        "content": "<p>I think at least that everything that is typeable in this code is typeable in the rules from the text? I'm not sure about the other way around?</p>",
        "id": 246187416,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626415224
    },
    {
        "content": "<p>I think the issue is that you have the type context backwards</p>",
        "id": 246187457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626415288
    },
    {
        "content": "<p>Haskell lists are destructured from the front, so you want the deepest bindings on the left</p>",
        "id": 246187470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626415316
    },
    {
        "content": "<p>hopefully you can confirm that</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">getSquare</span> <span class=\"p\">[(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"s\">\"x\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"s\">\"a\"</span><span class=\"p\">))),</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"kt\">KindStar</span><span class=\"p\">))]</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"kt\">SquareSquare</span>\n</code></pre></div>",
        "id": 246187517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626415349
    },
    {
        "content": "<p>Yep.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span><span class=\"n\">Main</span><span class=\"bp\">&gt;</span> <span class=\"n\">getSquare</span> <span class=\"o\">[(</span><span class=\"n\">TermDeclaration</span> <span class=\"o\">(</span><span class=\"s2\">\"x\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TypeVar</span> <span class=\"s2\">\"a\"</span><span class=\"o\">))),</span> <span class=\"o\">(</span><span class=\"n\">TypeDeclaration</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">KindStar</span><span class=\"o\">))]</span> <span class=\"n\">KindStar</span>\n<span class=\"n\">Just</span> <span class=\"n\">SquareSquare</span>\n</code></pre></div>",
        "id": 246187609,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626415475
    },
    {
        "content": "<p>I was expecting it should type check both ways, but I guess it shouldn't?</p>",
        "id": 246187697,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626415578
    },
    {
        "content": "<p>Each item you pull off the end of the context should type check in the remaining context?</p>",
        "id": 246187771,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626415690
    },
    {
        "content": "<p>yes</p>",
        "id": 246187785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626415709
    },
    {
        "content": "<p>if you need the variable to typecheck in its own context, you will get into circularities</p>",
        "id": 246187814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626415744
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 246187845,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626415799
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 246188598,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626416712
    },
    {
        "content": "<p>I cleaned my code up and added some examples.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- \"Type Theory and Formal Proof\" by Rob Nederpelt and Herman Geuvers</span>\n<span class=\"c1\">-- lambda underline omega (types dependent on types)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Box</span> <span class=\"ow\">=</span> <span class=\"kt\">BoxBox</span>\n  <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindArrow</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Kind</span>      <span class=\"c1\">-- Kind -&gt; Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeArrow</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>      <span class=\"c1\">-- Type -&gt; Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>        <span class=\"c1\">-- Type Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- \\lambda V : Kind . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Declaration</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n                 <span class=\"o\">|</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Kind</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Declaration</span><span class=\"p\">]</span>\n\n<span class=\"nf\">getDomain</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">getDomain</span> <span class=\"kt\">[]</span>                                   <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">alpha</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- getBox</span>\n\n<span class=\"nf\">getBox</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Kind</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Box</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(sort)</span>\n<span class=\"cm\">\\empty |- * : Box</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"kt\">[]</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">BoxBox</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box) (A = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n    <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n    <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star) (A = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n    <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n    <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">* -&gt; * : Box</span>\n<span class=\"cm\">* -&gt; (* -&gt; *) : Box</span>\n\n<span class=\"cm\">(form) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">      \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kt\">BoxBox</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">s1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s1</span> <span class=\"o\">==</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span> <span class=\"o\">==</span> <span class=\"n\">s</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">s</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getKind</span>\n\n<span class=\"nf\">getKind</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Kind</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = box)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">If x == x' then the var rule applies and it is used.</span>\n<span class=\"cm\">If x != x' then the var rule does not apply and the weak rule is used instead.</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">x'</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">c</span> <span class=\"kr\">else</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getKind</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">\\alpha -&gt; \\sigma : *</span>\n<span class=\"cm\">\\beta -&gt; (\\sigma -&gt; \\alpha) : *</span>\n\n<span class=\"cm\">(form) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : s  \\Gamma |- B : s</span>\n<span class=\"cm\">--------------------------------</span>\n<span class=\"cm\">      \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">s1</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s2</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">b</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s1</span> <span class=\"o\">==</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span> <span class=\"o\">==</span> <span class=\"n\">s</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">s</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (type)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">          \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ki_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ki_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ki_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ki_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = box)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">KindArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getType</span>\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = box)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">If x == x' then the var rule applies and it is used.</span>\n<span class=\"cm\">If x != x' then the var rule does not apply and the weak rule is used instead.</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">x'</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">c</span> <span class=\"kr\">else</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x'</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (term)</span>\n<span class=\"cm\">\\Gamma |- M : A -&gt; B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------</span>\n<span class=\"cm\">          \\Gamma |- M N : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = star)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- A -&gt; B : s</span>\n<span class=\"cm\">--------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : A -&gt; B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypeArrow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">*Main&gt; getKind [] (TypeAbs \"a\" KindStar (TypeArrow (TypeVar \"a\") (TypeVar \"a\")))</span>\n<span class=\"cm\">Just (KindArrow KindStar KindStar)</span>\n\n<span class=\"cm\">*Main&gt; getKind [] (TypeAbs \"a\" KindStar (TypeAbs \"b\" KindStar (TypeArrow (TypeVar \"a\") (TypeVar \"b\"))))</span>\n<span class=\"cm\">Just (KindArrow KindStar (KindArrow KindStar KindStar))</span>\n\n<span class=\"cm\">*Main&gt; getKind [] (TypeAbs \"a\" (KindArrow KindStar KindStar) (TypeVar \"a\"))</span>\n<span class=\"cm\">Just (KindArrow (KindArrow KindStar KindStar) (KindArrow KindStar KindStar))</span>\n\n<span class=\"cm\">*Main&gt; getType [(TermDeclaration (\"x\", (TypeVar \"a\"))), (TypeDeclaration (\"a\", KindStar))] (TermVar \"x\")</span>\n<span class=\"cm\">Just (TypeVar \"a\")</span>\n\n<span class=\"cm\">*Main&gt; getKind [(TermDeclaration (\"x\", (TypeVar \"a\"))), (TypeDeclaration (\"a\", KindStar))] (TypeVar \"a\")</span>\n<span class=\"cm\">Just KindStar</span>\n\n<span class=\"cm\">*Main&gt; getKind [(TypeDeclaration (\"b\", KindStar)), (TypeDeclaration (\"a\", KindStar))] (TypeVar \"a\")</span>\n<span class=\"cm\">Just KindStar</span>\n\n<span class=\"cm\">*Main&gt; getKind [(TypeDeclaration (\"b\", KindStar)), (TypeDeclaration (\"a\", KindStar))] (TypeVar \"b\")</span>\n<span class=\"cm\">Just KindStar</span>\n\n<span class=\"cm\">*Main&gt; getBox [(TypeDeclaration (\"a\", KindStar))] KindStar</span>\n<span class=\"cm\">Just BoxBox</span>\n\n<span class=\"cm\">*Main&gt; getBox [(TypeDeclaration (\"a\", KindStar))] (KindArrow KindStar KindStar)</span>\n<span class=\"cm\">Just BoxBox</span>\n\n<span class=\"cm\">*Main&gt; getKind [(TypeDeclaration (\"b\", KindStar))] (TypeApp (TypeAbs \"a\" KindStar (TypeArrow (TypeVar \"a\") (TypeVar \"a\"))) (TypeVar \"b\"))</span>\n<span class=\"cm\">Just KindStar</span>\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 246339671,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626549769
    },
    {
        "content": "<p>Is this the correct syntax for λP?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Box</span> <span class=\"ow\">=</span> <span class=\"kt\">BoxBox</span>\n           <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindApp</span> <span class=\"kt\">Kind</span> <span class=\"kt\">Term</span>         <span class=\"c1\">-- Kind Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Kind</span>  <span class=\"c1\">-- \\Pi V' : Type . Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>            <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>         <span class=\"c1\">-- Type Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>  <span class=\"c1\">-- \\Pi V' : Type . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>            <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>         <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>  <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 246807226,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626927246
    },
    {
        "content": "<p>I don't recall <code>KindAbs</code> being a thing. Also it doesn't match up with <code>KindApp</code>, so I don't know what beta reduction at that level would look like</p>",
        "id": 246807956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626928403
    },
    {
        "content": "<p>From the description on wikipedia it looks like there aren't any kinds other than star</p>",
        "id": 246808032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626928513
    },
    {
        "content": "<p>I'm confused about that too. I'm trying to figure it out from this: <a href=\"/user_uploads/3121/oo0PKZPNqdASLP3tlKnQ8uiA/Screenshot-from-2021-07-21-21-35-21.png\">Screenshot-from-2021-07-21-21-35-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oo0PKZPNqdASLP3tlKnQ8uiA/Screenshot-from-2021-07-21-21-35-21.png\" title=\"Screenshot-from-2021-07-21-21-35-21.png\"><img src=\"/user_uploads/3121/oo0PKZPNqdASLP3tlKnQ8uiA/Screenshot-from-2021-07-21-21-35-21.png\"></a></div>",
        "id": 246808095,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626928581
    },
    {
        "content": "<p><code>s</code> is either KindStar or BoxBox as before.</p>",
        "id": 246808114,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626928648
    },
    {
        "content": "<p>There is another source here: <a href=\"http://ceur-ws.org/Vol-878/paper2.pdf\">http://ceur-ws.org/Vol-878/paper2.pdf</a> (ignore the modulo part)</p>",
        "id": 246808186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626928725
    },
    {
        "content": "<p>your variables shouldn't have to range over different types</p>",
        "id": 246808199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626928747
    },
    {
        "content": "<p>What is that screenshot from?</p>",
        "id": 246808377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626928992
    },
    {
        "content": "<p>\"Type Theory and Formal Proof\" by Rob Nederpelt and Herman Geuvers. I have an electronic version I bought on <a href=\"http://ebooks.com\">ebooks.com</a>.</p>",
        "id": 246808477,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626929125
    },
    {
        "content": "<p>The rule compression in that picture is convenient for presentation, but it's much clearer to just separate them all out, because there are two copies of everything and this makes it clearer what is what.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">sort</span><span class=\"o\">)</span> <span class=\"bp\">|-</span> <span class=\"bp\">*</span> <span class=\"n\">kind</span>\n<span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">K</span> <span class=\"bp\">|-</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">K</span>\n<span class=\"o\">(</span><span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">|-</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"o\">(</span><span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">|-</span> <span class=\"n\">K</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">ΠΠ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">K</span> <span class=\"n\">kind</span>\n<span class=\"o\">(</span><span class=\"n\">form</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">|-</span> <span class=\"n\">B</span> <span class=\"o\">::</span> <span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">B</span> <span class=\"o\">::</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">Appl</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">::</span> <span class=\"bp\">ΠΠ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">@</span> <span class=\"n\">N</span> <span class=\"o\">::</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">:=</span><span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">appl</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">:=</span><span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Abst</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">|-</span> <span class=\"n\">T</span> <span class=\"o\">::</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">ΠΠ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">K</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">T</span> <span class=\"o\">::</span> <span class=\"bp\">ΠΠ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">K</span>\n<span class=\"o\">(</span><span class=\"n\">abst</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">|-</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A.</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 246810011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626931206
    },
    {
        "content": "<p>I had forgotten about the first answer to this question: <a href=\"https://cstheory.stackexchange.com/questions/36054/how-do-you-get-the-calculus-of-constructions-from-the-other-points-in-the-lambda\">https://cstheory.stackexchange.com/questions/36054/how-do-you-get-the-calculus-of-constructions-from-the-other-points-in-the-lambda</a><br>\nMaybe?:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Box</span> <span class=\"ow\">=</span> <span class=\"kt\">BoxBox</span>\n           <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindPi</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Kind</span>  <span class=\"c1\">-- \\Pi V' : Type . Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>            <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>         <span class=\"c1\">-- Type Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypePi</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>  <span class=\"c1\">-- \\Pi V' : Type . Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- /\\  V' : Type . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>            <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>         <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>  <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 246810275,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626931546
    },
    {
        "content": "<p>Pi is not \"Abs\", that means abstraction aka lambda</p>",
        "id": 246810346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626931642
    },
    {
        "content": "<p>I see.</p>",
        "id": 246810430,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626931748
    },
    {
        "content": "<ul>\n<li>There are three versions of the typing judgment: <code>M : A</code>, <code>T :: K</code> and <code>K kind</code> (which the book writes <code>K : box</code>, but <code>box</code> isn't really a term so this is mostly just to keep up the colon style)</li>\n<li>\n<p>There are two pi-like types: <code>Π x: A. B</code> produces a type and <code>ΠΠ x: A. K</code> produces a kind. Note that the variable is always a <code>x: A</code> binder, no <code>t :: K</code> binders exist in this language.<br>\nThere are two applications: <code>F @ N</code> where <code>F</code> is a type constructor and <code>N</code> is a term, and <code>M N</code> where <code>M</code> and <code>N</code> are terms.</p>\n</li>\n<li>\n<p>There are two lambda-like terms: <code>Λ x: A. T</code> produces a type where <code>T</code> is a type, and <code>λ x: A. M</code> produces a term where <code>M</code> is a term.</p>\n</li>\n<li>There are also two substitutions: both types and terms can have term variables substituted into them, used in the (Appl) and (appl) rules.</li>\n</ul>",
        "id": 246810614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626932003
    },
    {
        "content": "<p>Your haskell looks right</p>",
        "id": 246810795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626932189
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 246810818,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1626932241
    },
    {
        "content": "<p>(although you don't need <code>Box</code> as I mentioned)</p>",
        "id": 246810823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626932251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  If you have time at some point, would you mind checking if I did this right? I'm most uncertain about whether I handled the substitution in the apply rules correctly. I have ignored alpha equivalence for the time being.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- \"Type Theory and Formal Proof\" by Rob Nederpelt and Herman Geuvers</span>\n<span class=\"c1\">-- lambda P (types dependent on terms)</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Set</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Box</span> <span class=\"ow\">=</span> <span class=\"kt\">BoxBox</span>\n           <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Kind</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span>\n          <span class=\"o\">|</span> <span class=\"kt\">KindPi</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Kind</span>  <span class=\"c1\">-- \\Pi V' : Type . Kind</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Type</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeApp</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Type Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypePi</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span>  <span class=\"c1\">-- \\Pi V' : Type . Type</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TypeAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- /\\  V' : Type . Type</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span> <span class=\"ow\">=</span> <span class=\"kt\">TermVar</span> <span class=\"kt\">String</span>           <span class=\"c1\">-- V'</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermApp</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>        <span class=\"c1\">-- Term Term</span>\n          <span class=\"o\">|</span> <span class=\"kt\">TermAbs</span> <span class=\"kt\">String</span> <span class=\"kt\">Type</span> <span class=\"kt\">Term</span> <span class=\"c1\">-- \\lambda V' : Type . Term</span>\n            <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n\n<span class=\"nf\">getFreeTermVariableSetInType</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span>\n<span class=\"nf\">getFreeTermVariableSetInType</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"nf\">getFreeTermVariableSetInType</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInType</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">getFreeTermVariableSetInType</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"kr\">_</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">difference</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInType</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nf\">getFreeTermVariableSetInType</span> <span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">x</span> <span class=\"kr\">_</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">difference</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInType</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">getFreeTermVariableSetInTerm</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"kt\">Set</span> <span class=\"kt\">String</span>\n<span class=\"nf\">getFreeTermVariableSetInTerm</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span>\n<span class=\"nf\">getFreeTermVariableSetInTerm</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">getFreeTermVariableSetInTerm</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"kr\">_</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">difference</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- substituteInType m x n = m [ x := n ]</span>\n<span class=\"nf\">substituteInType</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"nf\">substituteInType</span> <span class=\"n\">e</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n<span class=\"nf\">substituteInType</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">TypeApp</span> <span class=\"p\">(</span><span class=\"n\">substituteInType</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substituteInTerm</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substituteInType</span> <span class=\"n\">e</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInType</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">TypePi</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"p\">(</span><span class=\"n\">substituteInType</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n<span class=\"nf\">substituteInType</span> <span class=\"n\">e</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInType</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">TypeAbs</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"p\">(</span><span class=\"n\">substituteInType</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n<span class=\"c1\">-- substituteInTerm m x n = m [ x := n ]</span>\n<span class=\"nf\">substituteInTerm</span> <span class=\"ow\">::</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span>\n<span class=\"nf\">substituteInTerm</span> <span class=\"n\">e</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"kr\">then</span> <span class=\"n\">n</span> <span class=\"kr\">else</span> <span class=\"n\">e</span>\n<span class=\"nf\">substituteInTerm</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">TermApp</span> <span class=\"p\">(</span><span class=\"n\">substituteInTerm</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">substituteInTerm</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"nf\">substituteInTerm</span> <span class=\"n\">e</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">e</span>\n  <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"n\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"p\">`</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Set</span><span class=\"o\">.</span><span class=\"n\">notMember</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getFreeTermVariableSetInTerm</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n      <span class=\"kt\">TermAbs</span> <span class=\"n\">y</span> <span class=\"n\">q</span> <span class=\"p\">(</span><span class=\"n\">substituteInTerm</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">\"bad input\"</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Declaration</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Type</span><span class=\"p\">)</span>\n                 <span class=\"o\">|</span> <span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Kind</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Context</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Declaration</span><span class=\"p\">]</span>\n\n<span class=\"nf\">getDomain</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n<span class=\"nf\">getDomain</span> <span class=\"kt\">[]</span>                                   <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"nf\">getDomain</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">alpha</span> <span class=\"kt\">:</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- getBox</span>\n\n<span class=\"nf\">getBox</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Kind</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Box</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(sort)</span>\n<span class=\"cm\">\\empty |- * : Box</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"kt\">[]</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">BoxBox</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box) (A = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n    <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n    <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star) (A = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kt\">KindStar</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n    <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n    <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(form) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : *  \\Gamma, x : A |- B : s</span>\n<span class=\"cm\">---------------------------------------</span>\n<span class=\"cm\">      \\Gamma |- Pi x : A . B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getBox</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindPi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"c1\">-- a = Type, b = Kind</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ki_a</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma'</span> <span class=\"n\">b</span>\n    <span class=\"kr\">if</span> <span class=\"n\">ki_a</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">s</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getKind</span>\n\n<span class=\"nf\">getKind</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Kind</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = box)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">If x == a then the var rule applies and it is used.</span>\n<span class=\"cm\">If x != a then the var rule does not apply and the weak rule is used instead.</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">c</span> <span class=\"kr\">else</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getKind</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TypeVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(form) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : *  \\Gamma, x : A |- B : s</span>\n<span class=\"cm\">---------------------------------------</span>\n<span class=\"cm\">      \\Gamma |- Pi x : A . B : s</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"c1\">-- a = Type, b = Type</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ki_a</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">a</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma'</span> <span class=\"n\">b</span>\n    <span class=\"kr\">if</span> <span class=\"n\">ki_a</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">s</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (type)</span>\n<span class=\"cm\">\\Gamma |- M : Pi x : A . B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------------</span>\n<span class=\"cm\">        \\Gamma |- M N : B [x := N]</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span> <span class=\"c1\">-- m = Type, n = Term</span>\n  <span class=\"n\">ki_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ki_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">KindPi</span> <span class=\"kr\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = box)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- Pi x : A . B : s</span>\n<span class=\"cm\">--------------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : Pi x : A . B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypeAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"c1\">-- a = Type, m = Type</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">KindPi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">KindPi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"c1\">-- getType</span>\n\n<span class=\"nf\">getType</span> <span class=\"ow\">::</span> <span class=\"kt\">Context</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(var) (s = star)</span>\n<span class=\"cm\">   \\Gamma |- C : s</span>\n<span class=\"cm\">----------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">\\Gamma, x : C |- x : C</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = star)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">If x == a then the var rule applies and it is used.</span>\n<span class=\"cm\">If x != a then the var rule does not apply and the weak rule is used instead.</span>\n<span class=\"cm\">-}</span>\n\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"n\">c</span> <span class=\"kr\">else</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(weak) (s = box)</span>\n<span class=\"cm\">\\Gamma |- A : B  \\Gamma |- C : s</span>\n<span class=\"cm\">--------------------------------  if x \\notin \\Gamma</span>\n<span class=\"cm\">     \\Gamma, x : C |- A : B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"p\">(</span><span class=\"kt\">TypeDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getBox</span> <span class=\"n\">gamma</span> <span class=\"n\">c</span>\n  <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">BoxBox</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">notElem</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">getDomain</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n  <span class=\"kr\">then</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"nf\">getType</span> <span class=\"kt\">[]</span> <span class=\"p\">(</span><span class=\"kt\">TermVar</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(appl) (term)</span>\n<span class=\"cm\">\\Gamma |- M : Pi x : A . B  \\Gamma |- N : A</span>\n<span class=\"cm\">-------------------------------------------</span>\n<span class=\"cm\">        \\Gamma |- M N : B [x := N]</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermApp</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span> <span class=\"c1\">-- m = Term, n = Term</span>\n  <span class=\"n\">ty_m</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">m</span>\n  <span class=\"n\">ty_n</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma</span> <span class=\"n\">n</span>\n  <span class=\"kr\">case</span> <span class=\"n\">ty_m</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">ty_n</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">substituteInType</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">(abst) (s = star)</span>\n<span class=\"cm\">\\Gamma, x : A |- M : B  \\Gamma |- Pi x : A . B : s</span>\n<span class=\"cm\">--------------------------------------------------</span>\n<span class=\"cm\">    \\Gamma |- \\lambda x : A . M : Pi x : A . B</span>\n<span class=\"cm\">-}</span>\n<span class=\"nf\">getType</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TermAbs</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"c1\">-- a = Type, m = Term</span>\n  <span class=\"kr\">let</span> <span class=\"n\">gamma'</span> <span class=\"ow\">=</span> <span class=\"kt\">TermDeclaration</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">gamma</span> <span class=\"kr\">in</span> <span class=\"kr\">do</span>\n    <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getType</span> <span class=\"n\">gamma'</span> <span class=\"n\">m</span>\n    <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">getKind</span> <span class=\"n\">gamma</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kt\">KindStar</span> <span class=\"kr\">then</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"kt\">TypePi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">else</span> <span class=\"kt\">Nothing</span>\n\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">Examples:</span>\n\n<span class=\"cm\">*Main&gt; getType [(TypeDeclaration (\"P\", (KindPi \"x\" (TypeVar \"A\") KindStar))), (TypeDeclaration (\"A\", KindStar))] (TermAbs \"x\" (TypeVar \"A\") (TermAbs \"y\" (TypeApp (TypeVar \"P\") (TermVar \"x\")) (TermVar \"y\")))</span>\n<span class=\"cm\">Just (TypePi \"x\" (TypeVar \"A\") (TypePi \"y\" (TypeApp (TypeVar \"P\") (TermVar \"x\")) (TypeApp (TypeVar \"P\") (TermVar \"x\"))))</span>\n<span class=\"cm\">-}</span>\n</code></pre></div>",
        "id": 247091035,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1627157576
    },
    {
        "content": "<p>I have uploaded what I have for the first five chapters of \"Type Theory and Formal Proof\" to github: <a href=\"https://github.com/pthomas505/ttfp\">https://github.com/pthomas505/ttfp</a>. If anyone has any feedback on things I might have done wrong, or other suggestions, they would be welcome and appreciated. Thank you.</p>",
        "id": 247661162,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1627608030
    }
]