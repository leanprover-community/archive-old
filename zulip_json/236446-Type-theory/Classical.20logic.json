[
    {
        "content": "<p>Just found this paper \"Classical Proofs as Parallel Programs\" wherein they devise a typed lambda calculus with concurrency and show it models classical logic. &lt; <a href=\"https://arxiv.org/pdf/1809.03094.pdf\">https://arxiv.org/pdf/1809.03094.pdf</a> &gt;</p>",
        "id": 197374443,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589352949
    },
    {
        "content": "<p>Actually I've never understood what call/cc does or why it corresponds to ((A -&gt; B) -&gt; A) -&gt; A</p>",
        "id": 197375252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589353721
    },
    {
        "content": "<p>This was the point where I stopped following Leroy's College de France lectures</p>",
        "id": 197376374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Classical.20logic/near/197375252\">said</a>:</p>\n<blockquote>\n<p>Actually I've never understood what call/cc does or why it corresponds to ((A -&gt; B) -&gt; A) -&gt; A</p>\n</blockquote>\n<p>I'm in the middle of writing a big blurb about this, actually - call/cc is one of those things that's really simple once you've spent many hours thinking about it, but sadly I don't think there's a magic analogy that makes it obvious</p>",
        "id": 197377936,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589355937
    },
    {
        "content": "<p>Here's my path to enlightenment. I was meditating on <code>return-from</code>, <code>unwind-protect</code>, <code>throw</code> and <code>catch</code>, when I realized this (almost!) works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">call/cc</span> <span class=\"p\">(</span><span class=\"nv\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\">apply</span> <span class=\"nv\">body</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">return-from</span> <span class=\"nv\">call/cc</span> <span class=\"nv\">x</span><span class=\"p\">))</span> <span class=\"no\">nil</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 197378787,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589356617
    },
    {
        "content": "<p><a href=\"http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/speope_return-from.html#return-from\"><code>return-from call/cc x</code></a> is like <code>return x</code> but returns from the call to <code>call/cc</code> that constructed the <code>lambda</code>, instead of the <code>lambda</code> itself.</p>",
        "id": 197378801,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589356631
    },
    {
        "content": "<p>The paper I posted proposes a typed lambda calculus that does not seem to rely on the call/cc operator for its model of classical logic.</p>",
        "id": 197379537,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1589357101
    }
]