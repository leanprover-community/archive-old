[
    {
        "content": "<p>If I understand this MMT talk correctly, they must have a formal specification of Coq's type theory somewhere in their project <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 198709705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590451033
    },
    {
        "content": "<p>Indeed, it is interesting that they seem to have been successful in acquiring exports in an almost disjoint set from my attempts. Coq and isabelle in particular seem quite difficult but they have managed it(?)</p>",
        "id": 198709906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590451320
    },
    {
        "content": "<p>Hmm actually I just see a lot of Scala files</p>",
        "id": 198710914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590452774
    },
    {
        "content": "<p>yep, their codebase is huge and unreadable</p>",
        "id": 198710924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590452808
    },
    {
        "content": "<p>and I still don't really understand what it does</p>",
        "id": 198710925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590452822
    },
    {
        "content": "<p>From the demo I expected to see a description in LF or something</p>",
        "id": 198711079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590453096
    },
    {
        "content": "<p>ok, looking at their paper, I don't think they actually have a declarative description of the typing rules</p>",
        "id": 198711926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590454410
    },
    {
        "content": "<p>I did find some nice mmt files in a separate repository though<br>\n<a href=\"https://gl.mathhub.info/MMT/LATIN2/-/tree/master/source\">https://gl.mathhub.info/MMT/LATIN2/-/tree/master/source</a></p>",
        "id": 198711935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590454439
    },
    {
        "content": "<p>Which MMT paper is this?</p>",
        "id": 198713631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590457172
    },
    {
        "content": "<p>The relevant reference for Coq export appears to be <a href=\"https://kwarc.info/people/frabe/Research/MRS_coq_19.pdf\">https://kwarc.info/people/frabe/Research/MRS_coq_19.pdf</a></p>",
        "id": 198713820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590457498
    },
    {
        "content": "<p>Which links to <a href=\"https://gl.mathhub.info/Coq/foundation/blob/master/source/Coq.mmt\">https://gl.mathhub.info/Coq/foundation/blob/master/source/Coq.mmt</a></p>",
        "id": 198713893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590457613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>theory Coq : ur:?LF =\n  include ?CoqSyntax❙\n  /T We omit the typing rules of Coq.❙\n❚\n</code></pre></div>",
        "id": 198713896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590457629
    },
    {
        "content": "<p>by the way, if you are curious about the funny characters at the end of each line, that is because MMT made the slightly nutty decision that all MMT keywords should be low ASCII unprintable characters like RS (record separator)</p>",
        "id": 198713964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590457781
    },
    {
        "content": "<p>It's nice to see low ASCII unprintable characters again. They were very popular in the late 80s. Character 7 used to make my Acorn Atom beep. Printing non text files could get quite noisy</p>",
        "id": 198727870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590478065
    },
    {
        "content": "<p>Ah, I was looking at <a href=\"https://arxiv.org/pdf/2005.03089.pdf\">https://arxiv.org/pdf/2005.03089.pdf</a></p>",
        "id": 198737076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590484204
    },
    {
        "content": "<p>Yes, I was curious about those. At first I thought they were just something the IDE showed for some reason, not actual source characters! Then when I found the mmt files online, I thought they were Unicode box-drawing characters</p>",
        "id": 198737241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590484348
    },
    {
        "content": "<p>I believe the reason for the design is that because MMT is a metalanguage, it tries to maximize the flexibility of the second level language, and I guess that means all regular characters are reserved and so they have to use a character no one would ever use. I think this is a self-refuting proposition though</p>",
        "id": 198738510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485256
    },
    {
        "content": "<p>But you could also skip the MMT part and just focus on the \"getting things out of Coq\" part, which leads to <a href=\"http://www.cs.unibo.it/~sacerdot/cicm19/xmlexport.pdf\">http://www.cs.unibo.it/~sacerdot/cicm19/xmlexport.pdf</a></p>",
        "id": 198738774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485465
    },
    {
        "content": "<p>oh, gzipped xml, what a format</p>",
        "id": 198738824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485519
    },
    {
        "content": "<p>I wish someone who knows Coq internals could explain to me what a Coq module is</p>",
        "id": 198738912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485593
    },
    {
        "content": "<p>my lean experience does very little to help me understand what is going on there</p>",
        "id": 198738940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485634
    },
    {
        "content": "<p>I bet it's like an ML module</p>",
        "id": 198739014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590485671
    },
    {
        "content": "<p>I also have no idea what those are though</p>",
        "id": 198739016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590485678
    },
    {
        "content": "<p>I also think it's like an ML module</p>",
        "id": 198739037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485697
    },
    {
        "content": "<p>I wrote an ML compiler for a class and I still have no idea what ML modules are</p>",
        "id": 198739056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485722
    },
    {
        "content": "<p>they seem kind of like existential types?</p>",
        "id": 198739074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485747
    },
    {
        "content": "<p>It's really not clear to me why a DTT theorem prover like Coq can gain a benefit from more elaborate typing</p>",
        "id": 198739130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590485787
    },
    {
        "content": "<p>ML has them so they must be good</p>",
        "id": 198739336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590485978
    },
    {
        "content": "<p>I'm also confused by that though. I thought it was something like: give me an implementation of <code>&lt;</code> and I'll give you an implementation of balanced binary search trees. Aren't dependent types enough for that already?</p>",
        "id": 198739424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590486015
    },
    {
        "content": "<p>The only thing I can think is that the necessary <code>structure</code> declarations to do this get unwieldy, and they want a piecemeal definition using several top level statements</p>",
        "id": 198739504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590486103
    },
    {
        "content": "<p>I get the impression that the Coq people don't really like modules either. Afaik they are hardly used in modern developments. What they give you is strong implementation hiding, but that turns out to be more cumbersome than helpful in a dependently typed language.</p>",
        "id": 198740802,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590487051
    },
    {
        "content": "<p>Definitions inside modules, like regular definitions and unlike structure fields, can be universe polymorphic. Which means that modules cannot be first-class objects.</p>",
        "id": 198742952,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590488543
    },
    {
        "content": "<p>Can they be modeled by regular definitions by just not hiding the definition?</p>",
        "id": 198743157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590488743
    },
    {
        "content": "<p>If you also simulate instantiating modules and applying functors by copying and instantiating/applying all definitions, I think so, yes. It's a very fancy, reusable <code>section</code> more or less.</p>",
        "id": 198744420,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590489625
    },
    {
        "content": "<p>Could you explain that part? I don't really get why copying is involved</p>",
        "id": 198744489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590489673
    },
    {
        "content": "<p>You probably don't have to copy the definition body, just the signature.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Mod</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mod</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n<span class=\"n\">def</span> <span class=\"n\">Mod</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mod</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n\n\n<p>Well now I haven't even copied most of the signature</p>",
        "id": 198748616,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590492650
    },
    {
        "content": "<p>Is there a reason that downstream uses can't just say <code>Mod.foo Nat</code>?</p>",
        "id": 198748685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492704
    },
    {
        "content": "<p>like do the new definitions get attributes or custom names or something?</p>",
        "id": 198748765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590492740
    },
    {
        "content": "<p>Yes, in Coq you would write <code>Module ModNat := Mod Nat</code> and then you have <code>ModNat.foo</code> etc. ... I think. I don't know much more than that but if this were Lean I guess you might want to register some instantiated defs as simp lemmas, for example.</p>",
        "id": 198749115,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590492997
    },
    {
        "content": "<p>There's also this amusing page about modules vs records: <a href=\"https://github.com/coq/coq/wiki/ModuleSystem\">https://github.com/coq/coq/wiki/ModuleSystem</a></p>",
        "id": 198749194,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590493071
    }
]