[
    {
        "content": "<p>Can someone give a simple example to show where the <code>{}</code> annotation for constructors of inductive types is necessary? For instance, what works with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum</span>\n</code></pre></div>\n<p>that doesn't work for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">sum'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum'</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum'</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220524315,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1608478016
    },
    {
        "content": "<p>implicit arguments</p>",
        "id": 220524776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608478808
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> explains an example <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#other-recursive-data-types\">here</a>. </p>\n<p>...erm, except that indeed the <code>{}</code> (in <code>list.nil</code>) seems to have no effect in their example either.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list'</span> <span class=\"c1\">-- get {} brackets</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list'</span> <span class=\"bp\">→</span> <span class=\"n\">list'</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">list''</span> <span class=\"c1\">-- get () brackets :D</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list''</span> <span class=\"bp\">→</span> <span class=\"n\">list''</span>\n</code></pre></div>",
        "id": 220524849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608478964
    },
    {
        "content": "<p>I think some change was made in core Lean relatively recently and perhaps TPIL was not updated.</p>",
        "id": 220524949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608479103
    },
    {
        "content": "<p>Right, that's what I thought. The <code>[]</code> annotation does make a difference, but just removing <code>{}</code> doesn't seem to do anything. Should the definitions in mathlib be updated to remove the <code>{}</code> annotation?</p>\n<p>Unless there really is a difference and I just don't understand what it is.</p>",
        "id": 220525969,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1608480679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">sum1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum1</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum1</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">sum2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum2</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum2</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">hidden.sum1</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">hidden.sum2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>\n<p>Make the infoview big and move your cursor between the two #print statements to see...no change at all other than 1&lt;-&gt;2</p>",
        "id": 220526245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608481130
    },
    {
        "content": "<p>Yes and ignore my previous comment. I see that the constructors for <code>sum</code> and <code>list</code> don't take the <code>{}</code> annotation in core Lean.</p>",
        "id": 220526381,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1608481336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> can you confirm that the <code>{}</code> annotation for constructors of implicit types doesn't do anything in the current version of Lean? Does tpil need to be updated?</p>",
        "id": 220526477,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1608481561
    },
    {
        "content": "<p>so one can use git blame to find out when that changed, and one is led <a href=\"https://github.com/leanprover-community/lean/pull/175\">here</a>.</p>",
        "id": 220526536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608481654
    },
    {
        "content": "<p>Looking at the diff, you see that it was clearly the right decision.</p>",
        "id": 220526737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608481951
    },
    {
        "content": "<p>Sorry, I have been dragging my feet on this. The semester is over now, and my grades are in. Within the next day or two I'll update TPIL to compile with the latest version of mathlib, and I'll update this in the text.</p>",
        "id": 220715713,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1608659234
    },
    {
        "content": "<p>I just updated TPIL to Lean 3.23.0, removed the discussion of {}, and merged a number of pull requests I had been neglecting. <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> thanks for pinging me on this.</p>",
        "id": 220755853,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1608690031
    }
]