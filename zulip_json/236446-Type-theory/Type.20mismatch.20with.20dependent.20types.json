[
    {
        "content": "<p>I am unsure why the following code doesn't compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would expect the type of the lambda expression to be <code>p ↔ ¬p → false</code>, or <code>¬(p ↔ ¬p)</code>, but the type according to the compiler is <code>Π (h : p ↔ ¬p), ¬(p → ¬p) → ?m_1[h] : Sort ?</code>. It appears to make a distinction between dependent types and regular types (h is a dependent type in the lambda expression), but I'm not sure how to introduce <code>¬(p ↔ ¬p)</code> without hypothesizing something first, and a hypothesis involving p appears to always introduce a dependent type.</p>\n<p>There may be other issues with the code I'm trying to compile, but in general I think the meaning of dependent types in lean is still a bit fuzzy to me, so any clarification of that would be much appreciated!</p>",
        "id": 293993026,
        "sender_full_name": "Clayton Knittel",
        "timestamp": 1660777854
    },
    {
        "content": "<p>absurd takes two arguments to produce false. What two arguments do you want to provide here?</p>",
        "id": 293994516,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660779018
    },
    {
        "content": "<p>I see, I assumed passing something of type <code>p → ¬p</code> would consume both of those arguments. It makes sense intuitively to me that there would be a way to \"unpack\" arguments to a function like that</p>",
        "id": 293995565,
        "sender_full_name": "Clayton Knittel",
        "timestamp": 1660779902
    },
    {
        "content": "<p>Even if you could do something like that, it would presumably be a value of type <code>p /\\ ¬p</code>, not <code>p → ¬p</code>.</p>",
        "id": 293998392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660782459
    },
    {
        "content": "<p>\"p implies not p\" is not absurd, because p could be false and then the implication is fine.</p>",
        "id": 294022426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660805947
    }
]