[
    {
        "content": "<p>a question from another stream: Is it necessary, when building a model of HoTT, to do it constructively?</p>",
        "id": 197460897,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589396700
    },
    {
        "content": "<p>My perspective is this: It's not necessary but it'd be nice. When dealing with this sort of foundational stuff it feels weird to me to use choice when it's not needed. Taking an example from set theory (because I'm sharper on set theory and category theory than HoTT), constructing an inner model of ZFC (eg ZF + V=L) from a model of ZF doesn't feel like an achievement if your metatheory assumed choice</p>",
        "id": 197461186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589396840
    },
    {
        "content": "<p>I would argue that constructive mathematics isn't really appropriate for lean, in the sense that if you have a hard \"yes, it must be constructive\" answer to this, then you should use another proof assistant entirely like cubicaltt or something, because \"constructive lean\" isn't going to satisfy your constraints</p>",
        "id": 197461187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589396841
    },
    {
        "content": "<p>I'm totally on board with \"avoid choice until it becomes necessary\" though</p>",
        "id": 197461300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589396884
    },
    {
        "content": "<p>I'm also okay with \"use choice but don't stop someone else reproving your things without choice\"</p>",
        "id": 197461366,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589396915
    },
    {
        "content": "<p>I guess the concern is when it comes to a choice argument being more convenient</p>",
        "id": 197461463,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589396961
    },
    {
        "content": "<p>Oddly enough I think LEM is the main stumbling block, not that it matters much.</p>",
        "id": 197461498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589396977
    },
    {
        "content": "<p>People from a set theory background think about these things differently than type theorists working in extensions of MLTT</p>",
        "id": 197461624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589397021
    },
    {
        "content": "<p>Relatedly, for some topos stuff I'm playing with I only need 'unique choice' rather than full choice and again I don't much like the idea of using full choice to prove independence-like results related to choice</p>",
        "id": 197461738,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589397082
    },
    {
        "content": "<p>One of the first things you'd probably want is the classical model structure on simplicial sets, which doesn't need choice but in the absence of LEM \"splits\" into two different model structures.</p>",
        "id": 197461740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397083
    },
    {
        "content": "<p>That said I appreciate it would be unpleasant in lean to have some hierarchy of choice results, and I also appreciate the internal vs external arguments</p>",
        "id": 197461847,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589397128
    },
    {
        "content": "<p>So as soon as you write down a definition of this structure, you are committing to one or the other constructive interpretation (or neither, I guess)</p>",
        "id": 197461862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397135
    },
    {
        "content": "<p>If the metatheory, that is lean, is completely classical, then you don't have to mind the constructive interpretations</p>",
        "id": 197461942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589397177
    },
    {
        "content": "<p>so it's not really a decision you can defer</p>",
        "id": 197461945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397179
    },
    {
        "content": "<p>Right, but then you score 0 on Bhavik's scale.</p>",
        "id": 197462005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197461862\">said</a>:</p>\n<blockquote>\n<p>So as soon as you write down a definition of this structure, you are committing to one or the other constructive interpretation (or neither, I guess)</p>\n</blockquote>\n<p>Do you have anything I can read to learn more about this?</p>",
        "id": 197462017,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589397216
    },
    {
        "content": "<p>I'll try to dig up links (should be easy), or I can just tell you if you know a little about simplicial sets.</p>",
        "id": 197462177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397291
    },
    {
        "content": "<p>(I'm also not an expert on these particular constructive structures. Like, I don't know what \"model category\" actually means constructively.)</p>",
        "id": 197462221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397312
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/constructive+model+structure+on+simplicial+sets\">https://ncatlab.org/nlab/show/constructive+model+structure+on+simplicial+sets</a> describes one of the structures</p>",
        "id": 197462399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397381
    },
    {
        "content": "<p>although probably <a href=\"https://arxiv.org/pdf/1907.05394.pdf\">https://arxiv.org/pdf/1907.05394.pdf</a> is more readable than the nlab page about it</p>",
        "id": 197462523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397438
    },
    {
        "content": "<p>So it sounds like a person who had the goal \"convince HoTT people to play with Lean\" should non-constructively build a model of HoTT, and package it in such a way that it is clear what API a new model needs to satisfy, so that an incoming HoTT person could redo it constructively if they like</p>",
        "id": 197462663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589397498
    },
    {
        "content": "<p>Actually now I can't find anything about the other structure (with all monomorphisms as cofibrations); hopefully I didn't hallucinate it.</p>",
        "id": 197462688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589397507
    },
    {
        "content": "<p>I also have a concern related to the idea which I think is expressed here: \"This becomes more than a philosophical issue with the relevance of this model category-structure in homotopy type theory, where internalization into the type theory requires constructive methods for interpreting proofs as programs.\" but I don't know enough HoTT to argue either side</p>",
        "id": 197462689,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589397508
    },
    {
        "content": "<p>are there any people that both have this goal and know enough about HoTT?</p>",
        "id": 197462758,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589397539
    },
    {
        "content": "<p>can someone unpack that quote for me?</p>",
        "id": 197462797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589397557
    },
    {
        "content": "<p>(I guess the reason <em>I</em> care about this at all is because I have the impression that some of the HoTT folks are very sharp and persuasive)</p>",
        "id": 197462833,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589397576
    },
    {
        "content": "<p>(it's from Reid's nlab link, by the way)</p>",
        "id": 197462841,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589397579
    },
    {
        "content": "<p>The primary reason HoTT people aren't interested in Lean is not the classical vs constructive issue. HoTT is perfectly compatible with classical axioms; afair, even parts of the HoTT book use classical logic. (Some of the HoTT people are pretty hardcore constructivists though.) Besides, it would be possible, with some effort, to ensure that Lean's classical axioms are not used in any HoTT-based development.</p>\n<p>Instead, the primary reason is that Lean's type theory implies axiom K (uniqueness of identity proofs), which contradicts univalence. This cannot be turned off or worked around, so you can't do axiomatic HoTT in Lean (and besides, with HoTT-based proof assistants like Cubical Agda now available, axiomatic HoTT doesn't look too hot anyway). Of course, you can still deeply embed HoTT into Lean and prove things about it, but it is not clear to me that this would be significantly easier than with any other proof assistant.</p>",
        "id": 197465968,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589398979
    },
    {
        "content": "<p>what do you mean by \"deeply embed\"?</p>",
        "id": 197466103,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399040
    },
    {
        "content": "<p>is this morally equivalent to \"build a model of HoTT\"?</p>",
        "id": 197466166,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399054
    },
    {
        "content": "<p>I think it's the embedding we're talking about - the idea is to do such an embedding (constructively or otherwise) and then get the HoTT people to work in/on it</p>",
        "id": 197466208,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589399066
    },
    {
        "content": "<p>I also don't see any reason that it would be easier to build a model of HoTT in Lean rather than another theorem prover, except insofar as you can ask questions on this server as you do it</p>",
        "id": 197466318,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399129
    },
    {
        "content": "<p>Deep embedding = \"define the terms, typing judgements etc. of (some variant of) HoTT as inductive data types\".</p>",
        "id": 197466353,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589399150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> , do you think that once that work is done, it would make sense to start \"doing HoTT in Lean\"?</p>",
        "id": 197466446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399181
    },
    {
        "content": "<p>in the same sense that many of us (who are content with Lean's dependent type theory foundations) already \"do math in Lean\"?</p>",
        "id": 197466473,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399193
    },
    {
        "content": "<p>It would be impractical without a <em>lot</em> of automation.</p>",
        "id": 197467024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399442
    },
    {
        "content": "<p>To perform all the work that Lean normally does for you, like type checking, elaboration, etc. Ideally, one would somehow repurpose Lean itself for this but that's not something that just happens automatically.</p>",
        "id": 197467117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197466446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> , do you think that once that work is done, it would make sense to start \"doing HoTT in Lean\"?</p>\n</blockquote>\n<p>No, this would be extremely inconvenient. If you wanted to define the  \"HoTT natural numbers\", you'd have to write HoTT terms (inhabitants of your <code>term</code> type, i.e. syntax trees) for all relevant definitions, then write proofs that these syntax trees are well-typed, then write proofs that they satisfy any definitional equalities you care about, etc. This could in principle be automated, but at that point you're implementing something like Cubical Agda within Lean.</p>\n<p>Compare this with the situation in Coq or non-cubical Agda: You postulate the univalence axiom and otherwise use the proof assistant as usual.</p>",
        "id": 197467131,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589399517
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 197467225,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399541
    },
    {
        "content": "<p>so i guess the question at hand is \"is it easier to write a HoTT theorem-prover from scratch or to implement one inside of Lean\"</p>",
        "id": 197467262,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399573
    },
    {
        "content": "<p>For example flypitch contains a deep embedding of first-order logic and its proof theory and the axioms of ZFC, but I don't think they ever actually write down proofs as terms in this way</p>",
        "id": 197467271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399580
    },
    {
        "content": "<p>Definitely from scratch</p>",
        "id": 197467278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399584
    },
    {
        "content": "<p>and the answer to that question right now is probably \"from scratch\"?</p>",
        "id": 197467286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399586
    },
    {
        "content": "<p>that's why it's been done so many times</p>",
        "id": 197467296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399594
    },
    {
        "content": "<p>Not least because it has already been done for you</p>",
        "id": 197467300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399595
    },
    {
        "content": "<p>But then you don't get a relative consistency proof, for example.</p>",
        "id": 197467342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399622
    },
    {
        "content": "<p>but what this doesn't give you is any of the meta properties like soundness or consistency or interpretation as theorems about homotopy theory</p>",
        "id": 197467345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399625
    },
    {
        "content": "<p>My question here is what exactly do HoTT people want to do when they \"do HoTT\"? Are they proving things inside the theory or proving things about the theory? In the latter case it's not clear to me why we care about the embedding being inconvenient (but I suspect the former is more likely)</p>",
        "id": 197467356,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589399631
    },
    {
        "content": "<p>When I look at HoTT papers, it's <em>all</em> external reasoning</p>",
        "id": 197467435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399661
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197467437,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399662
    },
    {
        "content": "<p>the only people who do internal HoTT are people who actually work on the proof assistants</p>",
        "id": 197467476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399686
    },
    {
        "content": "<p>well, both; but the intended use of HoTT is to prove theorems in it, otherwise why are you interested in the metatheory?</p>",
        "id": 197467493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399694
    },
    {
        "content": "<p>I mean there's proofs of stuff like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>4</mn></msub><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\pi_4(S^3) = \\mathbb{Z}/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span> and stuff like that. Or Floris's Serre spectral sequence.</p>",
        "id": 197467528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399719
    },
    {
        "content": "<p>so how fragmented should the online formal theorem-proving community be? (like in equilibrium?)<br>\nproposed state of the world:<br>\nthere's an ATP similar to lean, together with a userbase that doesn't care about foundations,<br>\nand for each popular foundational system whose type theory is incompatible with \"native lean\", there is another ATP with an associated community</p>",
        "id": 197467530,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399719
    },
    {
        "content": "<p>I can't parse that last sentence</p>",
        "id": 197467721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399804
    },
    {
        "content": "<p>if you were responding to me, is that better?</p>",
        "id": 197467905,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399889
    },
    {
        "content": "<p>Well, this seems like two questions: one about the tools, another about the communities around those tools.</p>",
        "id": 197467996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399938
    },
    {
        "content": "<p>I don't wish lean world domination at equilibrium</p>",
        "id": 197468022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589399951
    },
    {
        "content": "<p>you can't have tools without communities to maintain them</p>",
        "id": 197468036,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399960
    },
    {
        "content": "<p>do you wish \"exists X, X world domination\"?</p>",
        "id": 197468097,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399980
    },
    {
        "content": "<p>But we can change these answers independently.</p>",
        "id": 197468110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589399991
    },
    {
        "content": "<p>(I think i wish that, which is why i wrote lean* originally)</p>",
        "id": 197468123,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589399998
    },
    {
        "content": "<p>For example, we could decide that maybe there should just be a single \"<a href=\"http://itp.zulipchat.com\">itp.zulipchat.com</a>\" while still having Lean, Coq, Agda etc.</p>",
        "id": 197468207,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589400023
    },
    {
        "content": "<p>ah you mean a community can write new ITPs and abandon old ones</p>",
        "id": 197468208,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400024
    },
    {
        "content": "<p>not really... more like there should be a cabal of mutually interpretable theorem provers with joint world domination</p>",
        "id": 197468216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400030
    },
    {
        "content": "<p>Or vice versa.</p>",
        "id": 197468217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589400030
    },
    {
        "content": "<p>okay</p>",
        "id": 197468268,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400058
    },
    {
        "content": "<p>which isn't too far from current reality</p>",
        "id": 197468270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400059
    },
    {
        "content": "<p>(except for the mutually interpretable part)</p>",
        "id": 197468291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400068
    },
    {
        "content": "<p>It's hard to write the single greatest possible theorem prover to rule them all, but easy (or at least differently hard) to bring people together into one community.</p>",
        "id": 197468293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589400070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197468270\">said</a>:</p>\n<blockquote>\n<p>which isn't too far from current reality</p>\n</blockquote>\n<p>Well... and that part about world domination</p>",
        "id": 197468342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589400104
    },
    {
        "content": "<p>details</p>",
        "id": 197468429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400133
    },
    {
        "content": "<p>my view of mutual interpretability is that there's one ITP (maybe i'll call it MM0*?) which every serious new ATP wants to show bi-interpretability with</p>",
        "id": 197468435,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400136
    },
    {
        "content": "<p>because you want only O(n) bi-interpretations instead of O(n^2)</p>",
        "id": 197468484,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400168
    },
    {
        "content": "<p>there are foundational issues with actual bi-interpretability, but you can get interpretability up to adding axioms in the target</p>",
        "id": 197468521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400189
    },
    {
        "content": "<p>(though in practice people will keep writing bi-interpretations between other pairs, and you'll end up with O(n log n) many bi-interpretations)</p>",
        "id": 197468550,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400203
    },
    {
        "content": "<p>that's fine</p>",
        "id": 197468574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400214
    },
    {
        "content": "<p>what is interpretability up to extra axioms?</p>",
        "id": 197468663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400247
    },
    {
        "content": "<p>It might still be O(n) if the graph is a tree but not a star graph</p>",
        "id": 197468682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400258
    },
    {
        "content": "<p>does it allow for \"automated translations\"?</p>",
        "id": 197468690,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400260
    },
    {
        "content": "<p>right, my point is just that it's not going to be a tree</p>",
        "id": 197468734,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400279
    },
    {
        "content": "<p>I can translate MM into HOL but MM supports ZFC and HOL is weaker than ZFC</p>",
        "id": 197468790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400310
    },
    {
        "content": "<p>because people like having fun, and if there's a unique root people will be sad about that</p>",
        "id": 197468798,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400313
    },
    {
        "content": "<p>okay, does that mean the other direction wouldn't require extra axioms?</p>",
        "id": 197468849,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400338
    },
    {
        "content": "<p>A spanning tree has no designated root</p>",
        "id": 197468882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400355
    },
    {
        "content": "<p>there might be non-tree parts if a composite translation can be done more efficiently directly</p>",
        "id": 197468971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197468849\">said</a>:</p>\n<blockquote>\n<p>okay, does that mean the other direction wouldn't require extra axioms?</p>\n</blockquote>\n<p>In theory yes, in practice that depends on the quality of translation</p>",
        "id": 197469044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400415
    },
    {
        "content": "<p>For example in the MM -&gt; lean translation the raw translation gives you thousands of new axioms in lean</p>",
        "id": 197469104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400445
    },
    {
        "content": "<p>and I had to go through and prove each of them as theorems</p>",
        "id": 197469130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197468882\">said</a>:</p>\n<blockquote>\n<p>A spanning tree has no designated root</p>\n</blockquote>\n<p>right, thanks. the interpretation tree means that you get to trust all of the theorem provers if you trust any of their implementations<br>\nand if you don't trust any of them, you can write a new one and just link it into the tree</p>",
        "id": 197469143,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400468
    },
    {
        "content": "<p>(most are trivial because they are actually definitions)</p>",
        "id": 197469151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400470
    },
    {
        "content": "<p>okay so we already know constructions that do translation and they generate a bunch of extra goals</p>",
        "id": 197469299,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400536
    },
    {
        "content": "<p>so a \"higher quality translation\" is just one that has automation for closing those goals</p>",
        "id": 197469321,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400546
    },
    {
        "content": "<p>In a sense that's where the actual mathematical work is</p>",
        "id": 197469362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400568
    },
    {
        "content": "<p>in particular, if Lean automation is very good, that makes interpreting things in Lean easier</p>",
        "id": 197469372,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400573
    },
    {
        "content": "<p>it generally can't be automated</p>",
        "id": 197469423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400591
    },
    {
        "content": "<p>the \"not-very good translation\" reduces the translation problem to doing math in the target theorem prover?</p>",
        "id": 197469505,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400608
    },
    {
        "content": "<p>for example if I prove a library of theorems about rings I can apply them to the type <code>int</code> but it leaves behind some proof obligations, namely to show that <code>int</code> is a ring</p>",
        "id": 197469535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400629
    },
    {
        "content": "<p>seems like the sort of proof obligation we're already good at automating?</p>",
        "id": 197469592,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400666
    },
    {
        "content": "<p><code>by apply_instance</code>?</p>",
        "id": 197469631,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400686
    },
    {
        "content": "<p>maybe I did some really complicated theorem about rings in a \"ring theorem prover\" that takes the axioms of rings for granted and proves some really complicated statement</p>",
        "id": 197469637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400688
    },
    {
        "content": "<p>and now I can translate this proof to lean, where \"ring\" is relativized to a predicate on types rather than being a built in notion</p>",
        "id": 197469700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400720
    },
    {
        "content": "<p>and then you just have to prove once that the ring predicate on types is satisfied by any type with a ring instance?</p>",
        "id": 197469774,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400745
    },
    {
        "content": "<p>right</p>",
        "id": 197469802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400759
    },
    {
        "content": "<p>that seems like the kind of thing that software engineers do for a living</p>",
        "id": 197469894,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400803
    },
    {
        "content": "<p>\"here are two very similar APIs, plug them into each other\"</p>",
        "id": 197469926,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400820
    },
    {
        "content": "<p>For HoTT that means constructing simplicial sets and showing that they form a model of HoTT, and having a general translation that takes proofs from theorem prover X and produces a proof in lean in any model of HoTT</p>",
        "id": 197469928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400821
    },
    {
        "content": "<p>sure, it's not a new idea by any stretch, nor is it an insurmountable task</p>",
        "id": 197470121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400881
    },
    {
        "content": "<p>but if I was to do something like this for HoTT today there would be a big gap in the target (lean) because there is no definition of \"model of HoTT\" nor any construction satisfying that definition</p>",
        "id": 197470242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589400934
    },
    {
        "content": "<p>okay, I thought we disagreed on whether this was automatable and I think we learned that I was just using a nonstandard definition of automation</p>",
        "id": 197470279,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589400948
    },
    {
        "content": "<p>the part that can be automated is not that hard, but there is more to the story that requires attention from actual mathematicians</p>",
        "id": 197470786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589401002
    },
    {
        "content": "<p>and this is what I hope to convince HoTT-minded mathematicians to do</p>",
        "id": 197471273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589401111
    },
    {
        "content": "<p>and the part that needs mathematicians is exactly \"build a model of hott in lean\"?</p>",
        "id": 197471286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589401117
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> in the chat...</p>",
        "id": 197471351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589401145
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It is already late in Europe, I'll read up on this thread tomorrow. </p>\n<p>But to get HoTT people interested in Lean, it would be nice if it wouldn't be inconsistent to assume the univalence axiom in Lean. The lean developers have closed the door for us a couple of years ago, and we weren't welcome anymore.</p>",
        "id": 197484410,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589408362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> (I've said this above but the short version is) Is the univalence axiom required to define models of HoTT though? The sort of mathematics that is done in your papers doesn't actually need univalence at the metalevel, right?</p>",
        "id": 197484557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408482
    },
    {
        "content": "<p>No, certainly not</p>",
        "id": 197484612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408513
    },
    {
        "content": "<p>I'm interested in capturing a rather different aspect of HoTT than that traditionally represented in existing HoTT theorem provers</p>",
        "id": 197484669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you know what the current state of HoTT foundations in lean are? I think something to do with simplicial sets is in lean, as well as a bunch of category theory that is not necessarily directly related to HoTT. Do you know what the roadmap would look like?</p>",
        "id": 197484870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408674
    },
    {
        "content": "<p>I know a lot about what the homotopy theory/model category side of things would look like (and eventually I'll get around to this), but not much about what the type theory side would look like.</p>",
        "id": 197484929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408727
    },
    {
        "content": "<p>I think the homotopy/category side is the limiting factor right now AFAIK</p>",
        "id": 197485003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408766
    },
    {
        "content": "<p>I imagine the type theory side is pretty simple, just defining an axiomatic description of a category with operations needed by HoTT</p>",
        "id": 197485039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408802
    },
    {
        "content": "<p>As I sort of suggested at <a class=\"stream-topic\" data-stream-id=\"236446\" href=\"/#narrow/stream/236446-Type-theory/topic/externalization\">#Type theory &gt; externalization</a>, one could consider the type theory side for an extensional type theory first.</p>",
        "id": 197485089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408838
    },
    {
        "content": "<p>Do we have topoi yet?</p>",
        "id": 197485239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408929
    },
    {
        "content": "<p>You could start with a lot less than Lean's type theory of course.</p>",
        "id": 197485254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408941
    },
    {
        "content": "<p>Well, there's <a href=\"https://github.com/b-mehta/topos\">https://github.com/b-mehta/topos</a></p>",
        "id": 197485279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408955
    },
    {
        "content": "<p>If the README is up to date then \"soon\"</p>",
        "id": 197485296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589408972
    },
    {
        "content": "<p>How far are we from a category supporting MLTT without universes?</p>",
        "id": 197485299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589408974
    },
    {
        "content": "<p>that might just be a topos, I'm not up on the lingo</p>",
        "id": 197485370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409002
    },
    {
        "content": "<p>The relevant API is currently atrocious and badly documented (at least, most of the parts I wrote are), but I should be able to interpret and, or, exists so far</p>",
        "id": 197485433,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409046
    },
    {
        "content": "<p>Actually the readme is a bit out of date</p>",
        "id": 197485439,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409055
    },
    {
        "content": "<p>I never defined a typeclass <code>topos</code> but I've been using <code>finite limits</code> and <code>has_power_objects</code> which is the same thing</p>",
        "id": 197485472,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409078
    },
    {
        "content": "<p>where do dependent pis come from?</p>",
        "id": 197485498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409098
    },
    {
        "content": "<p>Actually I've also got points 2 and 4, (and 5 in a branch)</p>",
        "id": 197485538,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409113
    },
    {
        "content": "<p>I'd need to check my understanding of dependent pi but I have local cartesian closure</p>",
        "id": 197485622,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409145
    },
    {
        "content": "<p>I have this: <a href=\"https://ncatlab.org/nlab/show/dependent+product#in_toposes\">https://ncatlab.org/nlab/show/dependent+product#in_toposes</a></p>",
        "id": 197485693,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409192
    },
    {
        "content": "<p>I'm not sure if the 'preserve' properties underneath are easy to get right now but I haven't thought about it</p>",
        "id": 197485746,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409235
    },
    {
        "content": "<p>I guess the main new widget in HoTT models is infinity cats</p>",
        "id": 197485814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409257
    },
    {
        "content": "<p>To the best of my knowledge that's nowhere in lean</p>",
        "id": 197485837,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409274
    },
    {
        "content": "<p>although you might still be able to use a regular cat as a model</p>",
        "id": 197485839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409275
    },
    {
        "content": "<p>does univalence imply that it is necessarily non-strict at all h-levels?</p>",
        "id": 197485879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409304
    },
    {
        "content": "<p>Well technically I think the terminal/contractible (infinity-)category qualifies as a model <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197485944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409359
    },
    {
        "content": "<p>the empty perfectoid space of HoTT</p>",
        "id": 197486007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409383
    },
    {
        "content": "<p>perfect</p>",
        "id": 197486012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409388
    },
    {
        "content": "<p>obviously that's the right way to interpret <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mn>1</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\pi(S^1)=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span></p>",
        "id": 197486049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409431
    },
    {
        "content": "<p>Otherwise it should, yes</p>",
        "id": 197486076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409457
    },
    {
        "content": "<p>Oh, well hmm. If you don't have HITs and only one universe, then I'm not sure.</p>",
        "id": 197486124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409482
    },
    {
        "content": "<p>I think there are still some tricky bits in the 1-categorical / extensional MLTT case that haven't been mentioned yet</p>",
        "id": 197486222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409569
    },
    {
        "content": "<p>we're supposed to associate to each thing in the syntax some kind of thing in the model</p>",
        "id": 197486237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409595
    },
    {
        "content": "<p>to each context, we're supposed to associate an object</p>",
        "id": 197486282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409604
    },
    {
        "content": "<p>and I'm pretty sure that definitionally equal contexts are supposed to get <em>equal</em> objects of the topos</p>",
        "id": 197486303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409627
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 197486315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409640
    },
    {
        "content": "<p>and this means that certain constructions have to be strictified in some ways that otherwise wouldn't be natural</p>",
        "id": 197486322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409652
    },
    {
        "content": "<p>I think the example is that substitution is modelled by a pullback</p>",
        "id": 197486337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409668
    },
    {
        "content": "<p>oh, I think I see the issue</p>",
        "id": 197486368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409710
    },
    {
        "content": "<p>and so you need to choose for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma' \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> a specific pullback <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A' \\to \\Gamma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 197486413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409727
    },
    {
        "content": "<p>do you have to take a quotient of the objects or something?</p>",
        "id": 197486417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486413\">said</a>:</p>\n<blockquote>\n<p>and so you need to choose for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma' \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> a specific pullback <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A' \\to \\Gamma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>I'm probably missing something but isn't this exactly what <code>has_pullbacks</code> encodes?</p>",
        "id": 197486434,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409755
    },
    {
        "content": "<p>such that if you pull back again over another <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>→</mo><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Gamma'' \\to \\Gamma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> you get the <strong>same</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A'' \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> whether you did it in one step or two</p>",
        "id": 197486444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409767
    },
    {
        "content": "<p>but it's not just any choice of pullbacks, it needs to commute with something</p>",
        "id": 197486464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409780
    },
    {
        "content": "<p>Right, it also has to commute with basically everything in sight</p>",
        "id": 197486488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409796
    },
    {
        "content": "<p>Fair, my second question then is, do you need equal objects or equal <em>sub</em>objects?</p>",
        "id": 197486513,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409827
    },
    {
        "content": "<p>Like if you have a type former <code>sum A B</code> and you model it by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⨿</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\amalg B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⨿</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, then the chosen pullbacks also have to commute with the chosen <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⨿</mo></mrow><annotation encoding=\"application/x-tex\">\\amalg</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">⨿</span></span></span></span> s</p>",
        "id": 197486516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409830
    },
    {
        "content": "<p>They aren't subobjects. I guess if you were just doing propositional logic, then you would be fine because you have only \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>A</mi><mtext> </mtext><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\vdash A\\,\\mathrm{prop}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">p</span></span></span></span></span>\" and this is modelled by a subobject</p>",
        "id": 197486594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409876
    },
    {
        "content": "<p>In the logic case formulae are interpreted as subobjects of the object which represents the \"space\" of their free-variables</p>",
        "id": 197486599,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589409879
    },
    {
        "content": "<p>Anyways, there's various type theory/category theory gadgets which solve these coherence issues but I haven't learned about them.</p>",
        "id": 197486736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589409973
    },
    {
        "content": "<p>Forgive my naivete, but shouldn't it be the work of an hour or something to write down \"here is a category with sums and products and pullbacks and this commutes with that and ....\" and get everything that an MLTT category needs?</p>",
        "id": 197486758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589409997
    },
    {
        "content": "<p>Usually one thinks of these as somehow \"intermediate\" between the MLTT syntax and the semantic object (like a topos)</p>",
        "id": 197486772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589410013
    },
    {
        "content": "<p>Maybe, I don't know exactly what the list is. Probably it depends too on how much stuff is in your type theory.</p>",
        "id": 197486806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589410043
    },
    {
        "content": "<p>true, but hopefully the work is easily adapted to variations on the type theory</p>",
        "id": 197486835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410073
    },
    {
        "content": "<p>so it would be reasonable to target something simple but representative to start, like MLTT</p>",
        "id": 197486904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486594\">said</a>:</p>\n<blockquote>\n<p>They aren't subobjects. I guess if you were just doing propositional logic, then you would be fine because you have only \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>A</mi><mtext> </mtext><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\vdash A\\,\\mathrm{prop}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">p</span></span></span></span></span>\" and this is modelled by a subobject</p>\n</blockquote>\n<p>I'm skimming D4 in the elephant and he seems to be saying that it's fine for higher order logic</p>",
        "id": 197486959,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589410165
    },
    {
        "content": "<p>But this isn't something they teach in school and I have no idea where the type theorists start</p>",
        "id": 197487042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410204
    },
    {
        "content": "<p>does the elephant cover dependent type theory?</p>",
        "id": 197487069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410226
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Elephant#d4_higherorder_logic\">https://ncatlab.org/nlab/show/Elephant#d4_higherorder_logic</a> I don't think so</p>",
        "id": 197487106,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589410280
    },
    {
        "content": "<p>It does talk about MLTT though in D4.4</p>",
        "id": 197487235,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589410372
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/relation+between+type+theory+and+category+theory\">https://ncatlab.org/nlab/show/relation+between+type+theory+and+category+theory</a></p>",
        "id": 197487399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410489
    },
    {
        "content": "<p>the ncatlab page makes a big deal about extensional vs intensional MLTT. I guess in the extensional version you don't need \"on the nose\" commutation of type formers and substitution</p>",
        "id": 197487523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410574
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/relation+between+type+theory+and+category+theory#DependentTypeTheory\">https://ncatlab.org/nlab/show/relation+between+type+theory+and+category+theory#DependentTypeTheory</a> and things linking from it seem to have a lot of discussion about the coherence issues</p>",
        "id": 197487625,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589410646
    },
    {
        "content": "<p>Extensional basically just means you are in the 1-categorical setting I think.</p>",
        "id": 197487942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589410802
    },
    {
        "content": "<p>If you want to model things using objects of a category, you still have an issue with coherence: whether two objects produced in different ways that the syntax thinks are the same are actually equal.</p>",
        "id": 197488015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589410851
    },
    {
        "content": "<p>If you have a universe, though, then you can model a type as a map (since in general terms are going to be represented as certain maps, and now a type is also a term) and that makes things easier because maps are just equal or not equal.</p>",
        "id": 197488128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589410949
    },
    {
        "content": "<p>At least in the 1-categorical setting. In a higher categorical setting now you would have a new kind of coherence problem I think.</p>",
        "id": 197488161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589411000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197487069\">said</a>:</p>\n<blockquote>\n<p>does the elephant cover dependent type theory?</p>\n</blockquote>\n<p>Sorry it does!</p>",
        "id": 197488954,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411587
    },
    {
        "content": "<p>From what I'm reading here it does seem like I could interpret MLTT...</p>",
        "id": 197489115,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486303\">said</a>:</p>\n<blockquote>\n<p>and I'm pretty sure that definitionally equal contexts are supposed to get <em>equal</em> objects of the topos</p>\n</blockquote>\n<p>Ah the disparity is here I think - PTJ seems to consider contexts which are permutations of one another as not defeq</p>",
        "id": 197489305,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411814
    },
    {
        "content": "<p>in MLTT you can't even permute contexts, so this isn't a problem</p>",
        "id": 197489358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411875
    },
    {
        "content": "<p>I mean two contexts which you can permute</p>",
        "id": 197489422,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411894
    },
    {
        "content": "<p>I think</p>",
        "id": 197489438,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411907
    },
    {
        "content": "<p>but you can perform substitution and this has to commute with everything</p>",
        "id": 197489443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411911
    },
    {
        "content": "<p>This is probably incredibly basic but <a href=\"/user_uploads/3121/W-VOqcGhIxOQ1yloeOikB9Za/image.png\">here's how it interprets substitution</a>, in this language could someone describe the categorical property that we need?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/W-VOqcGhIxOQ1yloeOikB9Za/image.png\" title=\"here's how it interprets substitution\"><img src=\"/user_uploads/3121/W-VOqcGhIxOQ1yloeOikB9Za/image.png\"></a></div>",
        "id": 197489516,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589411991
    },
    {
        "content": "<p>What does the substitution of a type look like in that setting?</p>",
        "id": 197489636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412089
    },
    {
        "content": "<p>for example <code>sum (A[t/y]) (B[t/y]) = (sum A B)[t/y]</code></p>",
        "id": 197489718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412125
    },
    {
        "content": "<p>Right, there is no problem for terms but there is for types.</p>",
        "id": 197489815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589412211
    },
    {
        "content": "<p>What even are types in this type theory? Is it <code>Gamma |- A type</code> or <code>Gamma |- A : U</code> where <code>U</code> is some special object?</p>",
        "id": 197489939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197489939\">said</a>:</p>\n<blockquote>\n<p>What even are types in this type theory? Is it <code>Gamma |- A type</code> or <code>Gamma |- A : U</code> where <code>U</code> is some special object?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/ob3B3_STdjaGiige4tD8c3V1/image.png\">image.png</a> I think this answers your question?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ob3B3_STdjaGiige4tD8c3V1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ob3B3_STdjaGiige4tD8c3V1/image.png\"></a></div>",
        "id": 197490009,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412337
    },
    {
        "content": "<p>I don't have a good answer for the earlier one though, I'm not seeing anything about equality of types right now</p>",
        "id": 197490029,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412354
    },
    {
        "content": "<p>Oh hang on you're substituting a term inside a type</p>",
        "id": 197490103,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412399
    },
    {
        "content": "<p>I don't think I have satisfying answers for you I'm reading this stuff for the first time</p>",
        "id": 197490161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412463
    },
    {
        "content": "<p>So what is the interpretation of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>A</mi><mo>∈</mo><mi mathvariant=\"normal\">Σ</mi><mo>−</mo><mi>T</mi><mi>y</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\vdash A \\in \\Sigma-Typ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">p</span></span></span></span> judgment in the category? In the earlier quote it mentions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>t</mi><mo>:</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\vdash t:B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> getting interpreted as a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi>M</mi><mi mathvariant=\"normal\">Γ</mi><mo>→</mo><mi>M</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">t:M\\Gamma\\to MB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, but this suggests that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">MB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is an object independent of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span></p>",
        "id": 197490484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412704
    },
    {
        "content": "<p>no mbox <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 197490552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589412736
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-UteEAqO1VgCtgHpuBW0_cKd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-UteEAqO1VgCtgHpuBW0_cKd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-UteEAqO1VgCtgHpuBW0_cKd/image.png\"></a></div>",
        "id": 197490553,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412736
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/zJ_VRiipnoZzUxv9dVXIk4QT/image.png\">image.png</a> this precedes Def 4.4.3</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zJ_VRiipnoZzUxv9dVXIk4QT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zJ_VRiipnoZzUxv9dVXIk4QT/image.png\"></a></div>",
        "id": 197490582,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589412765
    },
    {
        "content": "<p>Oh I see, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">MB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is actually abuse of notation</p>",
        "id": 197490767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589412922
    },
    {
        "content": "<p>Now that I think about it, I'm pretty sure there was a talk at the HoTT conference in August which formalized the construction of an interpretation for some theory in Agda</p>",
        "id": 197492114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589413905
    },
    {
        "content": "<p><a href=\"https://hott.github.io/HoTT-2019//conf-slides/Brunerie.pdf\">https://hott.github.io/HoTT-2019//conf-slides/Brunerie.pdf</a></p>",
        "id": 197492233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589413984
    },
    {
        "content": "<p>Looks like they do take a quotient of the objects (slide 15)</p>",
        "id": 197492674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414328
    },
    {
        "content": "<p>I like the last line of the conclusion</p>",
        "id": 197492675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414328
    },
    {
        "content": "<p>Well there's a quotient of the objects in the term model, which is why mapping out of it requires sending defeq contexts to equal objects</p>",
        "id": 197492778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414419
    },
    {
        "content": "<p>There's still a separate question of how, given a locally cartesian closed category, one would cook up one of these contextual categories that satisfies all the required equations</p>",
        "id": 197492820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414470
    },
    {
        "content": "<p>and they also use the partiality monad for defining the interpretation recursion mutual on everything in sight</p>",
        "id": 197492834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414495
    },
    {
        "content": "<p>also, they're basically using Lean without axioms but apparently actually using Lean would be too easy so they implemented that in Agda instead</p>",
        "id": 197492902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414544
    },
    {
        "content": "<p>agda users do seem to like to build everything from scratch</p>",
        "id": 197492941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414582
    },
    {
        "content": "<p>ok they don't have large elimination for <code>eq</code> I guess</p>",
        "id": 197492948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414588
    },
    {
        "content": "<p><a href=\"https://github.com/guillaumebrunerie/initiality/blob/reflection/contextualcat.agda\">https://github.com/guillaumebrunerie/initiality/blob/reflection/contextualcat.agda</a></p>",
        "id": 197493073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414665
    },
    {
        "content": "<p>oh, <code>ft</code> stands for father</p>",
        "id": 197493096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414688
    },
    {
        "content": "<p>oh that makes more sense than \"foot\"</p>",
        "id": 197493114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414706
    },
    {
        "content": "<p>does anyone want to try transcribing <code>CCat</code> in lean?</p>",
        "id": 197493222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414792
    },
    {
        "content": "<p>no</p>",
        "id": 197493353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414931
    },
    {
        "content": "<p>Looking at it I don't <em>think</em> there is anything problematic in there</p>",
        "id": 197493378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589414970
    },
    {
        "content": "<p>It's just ... really long</p>",
        "id": 197493386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589414991
    },
    {
        "content": "<p>although the arrows are all jumbled up in one type per \"grade\" rather than sorted by dom/cod like in lean's categories</p>",
        "id": 197493442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589415017
    },
    {
        "content": "<p>at least a third of it just looks like category axioms</p>",
        "id": 197493460,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589415041
    },
    {
        "content": "<p>It is like category axioms, but not quite because it's graded</p>",
        "id": 197493482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589415063
    },
    {
        "content": "<p>ah</p>",
        "id": 197493497,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589415078
    },
    {
        "content": "<p>you would have to define these axioms and then construct a standard category on top</p>",
        "id": 197493502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589415087
    },
    {
        "content": "<p>So I think if you start with the category of sets, which is locally cartesian closed</p>",
        "id": 197494200,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589415697
    },
    {
        "content": "<p>then the associated contextual category has</p>\n<ul>\n<li>as objects, for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, strings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>n</mi></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>X</mi><mn>1</mn></msub><mo>→</mo><msub><mi>X</mi><mn>0</mn></msub><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">X_n \\to \\cdots \\to X_1 \\to X_0 = *</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span></li>\n<li>as morphisms from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>n</mi></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>X</mi><mn>1</mn></msub><mo>→</mo><msub><mi>X</mi><mn>0</mn></msub><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">X_n \\to \\cdots \\to X_1 \\to X_0 = *</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mi>m</mi></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>Y</mi><mn>1</mn></msub><mo>→</mo><msub><mi>Y</mi><mn>0</mn></msub><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">Y_m \\to \\cdots \\to Y_1 \\to Y_0 = *</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span>, just maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>n</mi></msub><mo>→</mo><msub><mi>Y</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_n \\to Y_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>",
        "id": 197494274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589415761
    },
    {
        "content": "<p><code>star</code> takes a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>n</mi></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>X</mi><mn>1</mn></msub><mo>→</mo><msub><mi>X</mi><mn>0</mn></msub><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">X_n \\to \\cdots \\to X_1 \\to X_0 = *</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mi>m</mi></msub><mo>→</mo><mo>⋯</mo><mo>→</mo><msub><mi>Y</mi><mn>1</mn></msub><mo>→</mo><msub><mi>Y</mi><mn>0</mn></msub><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">Y_m \\to \\cdots \\to Y_1 \\to Y_0 = *</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span> and an extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>→</mo><msub><mi>Y</mi><mi>m</mi></msub><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">Y_{m+1} \\to Y_m \\to \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> to an extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>→</mo><msub><mi>X</mi><mi>n</mi></msub><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">X_{n+1} \\to X_n \\to \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> which is equipped with a map to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>→</mo><msub><mi>Y</mi><mi>m</mi></msub><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">Y_{m+1} \\to Y_m \\to \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>, which I'm assuming is supposed to be some choice of pullback</p>",
        "id": 197494486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589415960
    },
    {
        "content": "<p>and then there is</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"nf\">star-comp</span> <span class=\"ow\">:</span> <span class=\"o\">{</span>m n k <span class=\"ow\">:</span> ℕ<span class=\"o\">}</span> <span class=\"o\">{</span>g <span class=\"ow\">:</span> Mor m k<span class=\"o\">}</span> <span class=\"o\">{</span>f <span class=\"ow\">:</span> Mor n m<span class=\"o\">}</span> <span class=\"o\">{</span>Y <span class=\"ow\">:</span> Ob m<span class=\"o\">}</span> <span class=\"o\">{</span>f₁ <span class=\"ow\">:</span> ∂₁ f ≡ Y<span class=\"o\">}</span> <span class=\"o\">{</span>g₀ <span class=\"ow\">:</span> ∂₀ g ≡ Y<span class=\"o\">}</span>\n      <span class=\"o\">{</span>X <span class=\"ow\">:</span> Ob <span class=\"o\">(</span>suc k<span class=\"o\">)}</span> <span class=\"o\">{</span>Z <span class=\"ow\">:</span> Ob k<span class=\"o\">}</span> <span class=\"o\">{</span>p <span class=\"ow\">:</span> ft X ≡ Z<span class=\"o\">}</span> <span class=\"o\">{</span>g₁ <span class=\"ow\">:</span> ∂₁ g ≡ Z<span class=\"o\">}</span> <span class=\"ow\">→</span>\n      star <span class=\"o\">(</span>comp g f g₀ f₁<span class=\"o\">)</span> X p <span class=\"o\">(</span>comp₁ ∙ g₁<span class=\"o\">)</span> ≡ star f <span class=\"o\">(</span>star g X p g₁<span class=\"o\">)</span> <span class=\"o\">(</span>ft-star ∙ g₀<span class=\"o\">)</span> f₁\n</code></pre></div>",
        "id": 197494561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416004
    },
    {
        "content": "<p>and I think this expresses<br>\n<span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486444\">said</a>:</p>\n<blockquote>\n<p>such that if you pull back again over another <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>→</mo><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Gamma'' \\to \\Gamma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> you get the <strong>same</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A'' \\to \\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> whether you did it in one step or two</p>\n</blockquote>",
        "id": 197494659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416084
    },
    {
        "content": "<p>where:</p>\n<ul>\n<li><code>X</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span></li>\n<li><code>Z</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span></li>\n<li><code>Y</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Gamma'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>the unnamed source of <code>f</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Gamma''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>",
        "id": 197494711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416150
    },
    {
        "content": "<p>So, in order to write down the contextual category which corresponds to Set you first need to solve this coherence problem.</p>",
        "id": 197494740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416186
    },
    {
        "content": "<p>then you'll need to repeat this feat for all the type formers you're interested in, for example</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"nf\">SumStrNat&#39;</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>g <span class=\"ow\">:</span> MorC n m<span class=\"o\">)</span> <span class=\"o\">(</span>Δ <span class=\"ow\">:</span> Ob n<span class=\"o\">)</span> <span class=\"o\">(</span>g₀ <span class=\"ow\">:</span> ∂₀ g ≡ Δ<span class=\"o\">)</span> <span class=\"o\">(</span>Γ <span class=\"ow\">:</span> Ob m<span class=\"o\">)</span>\n      <span class=\"o\">(</span>A <span class=\"ow\">:</span> Ob <span class=\"o\">(</span>suc m<span class=\"o\">))</span> <span class=\"o\">(</span>A= <span class=\"ow\">:</span> ft A ≡ Γ<span class=\"o\">)</span> <span class=\"o\">(</span>B <span class=\"ow\">:</span> Ob <span class=\"o\">(</span>suc m<span class=\"o\">))</span> <span class=\"o\">(</span>B= <span class=\"ow\">:</span> ft B ≡ Γ<span class=\"o\">)</span> <span class=\"o\">(</span>g₁ <span class=\"ow\">:</span> ∂₁ g ≡ Γ<span class=\"o\">)</span> <span class=\"ow\">→</span>\n      star g <span class=\"o\">(</span>SumStr Γ A A= B B=<span class=\"o\">)</span> SumStr= g₁ ≡\n        SumStr Δ <span class=\"o\">(</span>star g A A= g₁<span class=\"o\">)</span> <span class=\"o\">(</span>ft-star ∙ g₀<span class=\"o\">)</span> <span class=\"o\">(</span>star g B B= g₁<span class=\"o\">)</span> <span class=\"o\">(</span>ft-star ∙ g₀<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197494936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416363
    },
    {
        "content": "<p>Is this what they called \"naturality\" in the slides?</p>",
        "id": 197494976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589416397
    },
    {
        "content": "<p>It seems to be, though I would not otherwise have guessed that meaning</p>",
        "id": 197495066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416478
    },
    {
        "content": "<p>I'm guessing they chose this approach because their notion of a contextual category (with XYZ...) is literally a model of a certain essentially algebraic theory (which, ironically, I think means they could basically have automated large parts of their formalization with suitable tactics?)</p>",
        "id": 197495262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589416673
    },
    {
        "content": "<p>It looks pretty similar to <a href=\"https://ncatlab.org/nlab/show/categorical+model+of+dependent+types#contextual_categories_or_csystems\">https://ncatlab.org/nlab/show/categorical+model+of+dependent+types#contextual_categories_or_csystems</a></p>",
        "id": 197495356,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589416758
    },
    {
        "content": "<p>Anyways, I think the sheer length of that nlab page indicates that bridging the gap between MLTT and a locally cartesian closed category is not a simple problem</p>",
        "id": 197495583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589417008
    },
    {
        "content": "<p>is this stuff actually usable? I guess the application of such a construction would be something like proving that pi(S^1) = Z in HoTT implies that pi(S^1) = Z in sets, but the translation overhead seems pretty ridiculous</p>",
        "id": 197495724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589417151
    },
    {
        "content": "<p>like what are the \"unit tests\" for this interpretation?</p>",
        "id": 197495776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589417181
    },
    {
        "content": "<p>I was thinking it would be funny to just interpret a proof about types back into <code>Type</code> and see how bad it gets.</p>",
        "id": 197495860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589417281
    },
    {
        "content": "<p>Another thing which is not perhaps obvious from that page but I think is true is that a fairly large amount of the work to bridge the gap doesn't depend on whether the thing on the other side is a 1-topos or an infinity-topos.</p>",
        "id": 197495923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589417331
    },
    {
        "content": "<p>For example from an infinity-topos (or more precisely from some choice of model category which models it, together with some choice of solution to the strictification problems) you also get out a contextual category, not some \"contextual infinity-category\".</p>",
        "id": 197496009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589417414
    },
    {
        "content": "<p>The page suggests Hofmann, \"Syntax and semantics of dependent types\" as a general reference</p>",
        "id": 197496046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589417457
    },
    {
        "content": "<p>The definition of a contextual category in ncatlab is a strict category, while I think Brunerie's is not</p>",
        "id": 197496163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589417572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486758\">said</a>:</p>\n<blockquote>\n<p>Forgive my naivete, but shouldn't it be the work of an hour or something to write down \"here is a category with sums and products and pullbacks and this commutes with that and ....\" and get everything that an MLTT category needs?</p>\n</blockquote>\n<p>The problem in defining models of HoTT is not so much to interpret Pi and Sigma. After you've gone through the coherence theorems, the real problem is to construct univalent universes that are closed under all the type theoretic operations, preferably including higher inductive types.</p>",
        "id": 197530803,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589449699
    },
    {
        "content": "<p>This was a major advance by Mike Shulman. You can read about it <a href=\"https://arxiv.org/abs/1904.07004\">here</a>.</p>",
        "id": 197530962,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589449802
    },
    {
        "content": "<p>right, but this is more of a mathematical problem. I'm thinking more about the CS-y, fiddly bits that go into formalizing all this</p>",
        "id": 197531041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449841
    },
    {
        "content": "<p>I'm assuming that the mathematical problems have all been solved at this point</p>",
        "id": 197531083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449863
    },
    {
        "content": "<p>at least, for the basics of \"there exists a nontrivial model of HoTT\"</p>",
        "id": 197531121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449898
    },
    {
        "content": "<p>\"We begin with some 2-categorical observations. A morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X→Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in a 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is an internal fibration if each induced functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><mi>Z</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>Z</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(Z,X)→K(Z,Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> is a Grothendieck fibration.\" This clearly isn't going to be intelligible to me</p>",
        "id": 197531452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450102
    },
    {
        "content": "<p>To really have a theorem like that, you first have to define in Lean the syntax of HoTT. Do you have any theories in Lean, formulated syntactically?</p>",
        "id": 197531471,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589450122
    },
    {
        "content": "<p>sure, we've done it before, not for MLTT and extensions though</p>",
        "id": 197531517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450151
    },
    {
        "content": "<p>Floris and Jesse wrote the syntax of FOL and ZFC in lean and proved soundness and completeness for FOL</p>",
        "id": 197531609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450193
    },
    {
        "content": "<p>A better starting point would be <a href=\"https://arxiv.org/abs/1211.2851\">https://arxiv.org/abs/1211.2851</a></p>",
        "id": 197531627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589450208
    },
    {
        "content": "<p>Ok, then I assume that you have all you need</p>",
        "id": 197531643,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589450217
    },
    {
        "content": "<p>Sounds like a nice exercise for your students in that 2 week course (-;</p>",
        "id": 197531688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589450243
    },
    {
        "content": "<p>in the technical sense yes, but we need a type theorist who knows the terrain, and that's not me</p>",
        "id": 197531701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450258
    },
    {
        "content": "<p>possibly reid or bhavik can fill that role</p>",
        "id": 197531724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450272
    },
    {
        "content": "<p>Certainly you can, if you are willing</p>",
        "id": 197531807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450323
    },
    {
        "content": "<p>Appendix B of <a href=\"https://arxiv.org/abs/1211.2851\">https://arxiv.org/abs/1211.2851</a> looks promising</p>",
        "id": 197532284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450577
    },
    {
        "content": "<p>Wouldn't Floris be the right man for this job? He knows HoTT, he knows Lean, he knows basically everything and he's fast</p>",
        "id": 197532718,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589450877
    },
    {
        "content": "<p>That's a good question. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ? My impression was that his work is primarily \"internal HoTT\" and yours is \"external HoTT\", but correct me if not</p>",
        "id": 197532880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589450990
    },
    {
        "content": "<p>I'm doing mainly synthetic homotopy theory, so similar to Floris. But my flaw is that I really struggle with Lean.</p>",
        "id": 197533040,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589451104
    },
    {
        "content": "<p>I think the introduction to <a href=\"https://arxiv.org/abs/1411.1736\">https://arxiv.org/abs/1411.1736</a> has explained to me what is going on in <a href=\"https://arxiv.org/abs/1406.3219v4\">https://arxiv.org/abs/1406.3219v4</a></p>",
        "id": 197533171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451191
    },
    {
        "content": "<p>I've been pushing for informal mathematicians to contribute to formalization more in the area of \"formal roadmaps\", where things are laid out precisely and at a fairly low sophistication, but not formally, with others picking up the remainder</p>",
        "id": 197533172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589451192
    },
    {
        "content": "<p>that seems to me to be a good division of labor</p>",
        "id": 197533206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589451219
    },
    {
        "content": "<p>I'll be back in an hour or two</p>",
        "id": 197533360,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589451314
    },
    {
        "content": "<p>Do we have the syntax of MLTT formalized somewhere?</p>",
        "id": 197533416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451351
    },
    {
        "content": "<p>Possibly not in Lean?</p>",
        "id": 197533418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451354
    },
    {
        "content": "<p>do PTSs count?</p>",
        "id": 197533527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589451406
    },
    {
        "content": "<p>I don't know. Something that has contexts, types and terms at least.</p>",
        "id": 197533731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451535
    },
    {
        "content": "<p>I guess that Agda formalization from earlier must.</p>",
        "id": 197533905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451634
    },
    {
        "content": "<p><a href=\"https://github.com/guillaumebrunerie/initiality/blob/reflection/typetheory.agda\">https://github.com/guillaumebrunerie/initiality/blob/reflection/typetheory.agda</a><br>\n<a href=\"https://github.com/guillaumebrunerie/initiality/blob/reflection/syntx.agda\">https://github.com/guillaumebrunerie/initiality/blob/reflection/syntx.agda</a></p>",
        "id": 197534135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451749
    },
    {
        "content": "<p>oh, and<br>\n<a href=\"https://github.com/guillaumebrunerie/initiality/blob/reflection/rules.agda\">https://github.com/guillaumebrunerie/initiality/blob/reflection/rules.agda</a></p>",
        "id": 197534454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589451920
    },
    {
        "content": "<p>does this look like a good starting point, if we removed all the formers we don't want to handle?</p>",
        "id": 197534639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589452037
    },
    {
        "content": "<p>Here's a sketch:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pf_kind</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">pf_kind</span>\n<span class=\"bp\">|</span> <span class=\"n\">defeq</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">pf_kind</span>\n<span class=\"kn\">open</span> <span class=\"n\">pf_kind</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_type</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">pf_kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"err\">Γ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">e</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">e</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"err\">↑</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">A</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">defeq</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">e</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">e</span> <span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod_eq</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">sum_eq</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam_eq</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"err\">↑</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi_eq</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">beta</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">is_type</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e₁</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">pf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">defeq</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">A</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">e₂</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 197536017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589453050
    },
    {
        "content": "<p>I kind of came late to the party but have you considered using a thing like Orton and Pitts' axioms for Cubical Type Theory ( <a href=\"https://arxiv.org/abs/1712.04864\">https://arxiv.org/abs/1712.04864</a> ) to get an axiomatic HoTT in a theory that may have axiom K? (Because as Jannis Limperg rightly said this is the issue with Lean and axiomatic HoTT.) I did that in a previous intership to get a model of HoTT inside a MLTT with extensional identity and do weird HoTT stuff with it. I guess this is what is done in Coq in <a href=\"https://gitlab.inria.fr/sboulier/thesis-formalizations/-/tree/master/InternalCubical-Coq\">https://gitlab.inria.fr/sboulier/thesis-formalizations/-/tree/master/InternalCubical-Coq</a> . From a theoretical point of view I think (even it I haven't saw any paper about it) it makes your meta-theory into a 2 level type theory with both univalent identities and universes and \"regular\" (with axiom K) identities and universes. I think that those doing Synthetic Homotopy Theory like this because it's them that introduces this kind of notions ... (It's even Voevodsky who introduces first 2-level TT according to n-lab.)</p>",
        "id": 197539108,
        "sender_full_name": "Sarah Reboullet",
        "timestamp": 1589455344
    },
    {
        "content": "<p>well, the hope here is to have a completely non-univalent/classical metatheory consistent with standard mathematical practice, rather than a two level metatheory (which requires special features in the kernel)</p>",
        "id": 197539266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589455495
    },
    {
        "content": "<p>Yes, I agree. Orton and Pitts' method doesn't require a change in kernel (that's the point of their method), but only the adding of axioms (or a typeclass for the axioms). As such you still have a classical with-K metatheory as is Lean. But I understand if this isn't satisfactory. I just wondered.</p>",
        "id": 197539738,
        "sender_full_name": "Sarah Reboullet",
        "timestamp": 1589455857
    },
    {
        "content": "<p>Maybe we should move this discussion about models of MLTT to another topic.</p>",
        "id": 197540612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589456546
    },
    {
        "content": "<p>I haven't read the whole discussion, but some comments:</p>\n<ul>\n<li>I believe a big reason that people doing HoTT want their models constructive is so that they can replay the proof in a topos. For example, if you make a model internal to a realizability topos, you can get a model of HoTT with an impredicative univalent universe (i.e. a universe that is closed under <code>Pi (x : A), B x</code> where <code>A</code> might live in a larger universe). See for example <a href=\"http://www.mat.uc.pt/~ct2017/slides/frey_j.pdf\">http://www.mat.uc.pt/~ct2017/slides/frey_j.pdf</a> </li>\n<li>I also think that the fact that the cubical model is constructive is used for writing down explicitly the rules for cubical type theory, the reduction rules for the composition operator are based on the equalities in the model. I don't know the details here.</li>\n<li>\"Formalizing HoTT\" is an open-ended problem: what type-formers do you have? Pi and Sigma probably, but inductive types? which higher inductive types? Also, there are many different models, so there are many choices there, too</li>\n<li>It is an interesting project, but I believe I have seen projects on Github trying to already do exactly this in other proof assistants. I cannot find them now though, and I don't remember much more (I think it was in Coq?)</li>\n<li>Also interesting might be the Initiality Project, a non-formal but detailed crowsourced project with the aim to prove that the syntactic model is initial is some precise sense. It doesn't look very alive though: <a href=\"https://ncatlab.org/nlab/show/Initiality+Project\">https://ncatlab.org/nlab/show/Initiality+Project</a></li>\n</ul>",
        "id": 197607381,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589485238
    },
    {
        "content": "<p>I think this is the repository I was looking for: <a href=\"https://github.com/guillaumebrunerie/initiality\">https://github.com/guillaumebrunerie/initiality</a><br>\nThis is formalizing the initiality conjecture, which in particular requires formalizing categorical models of the type theory. It is not completely clear to me if this is HoTT or MLTT...</p>",
        "id": 197623194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589493195
    },
    {
        "content": "<p>Yes, we discussed this repository some in the other thread. I think the framework they use (contextual categories) applies to both intensional and extensional MLTT.</p>",
        "id": 197748443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589574406
    },
    {
        "content": "<p>However, they don't actually construct any examples of contextual categories (besides the initial one, the term model) and this actually seems like quite a lot of work, and one still has to solve a coherence problem somehow</p>",
        "id": 197748561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589574467
    },
    {
        "content": "<p>For instance it would be nice to prove that <code>Type</code> is a model of MLTT at least.</p>",
        "id": 197748626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589574490
    },
    {
        "content": "<p>Regarding constructivity: there seems to be a considerable amount of work needed on the type theory side, which does not depend on the particular model, and which is presumably constructive. So it could make sense to first construct a model classically, and then when the rest of the system is in place, upgrade it to one built constructively.</p>",
        "id": 197795699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589635597
    },
    {
        "content": "<p>Regarding which type formers (and rules) to include: I would say start small, but to claim to be a model of HoTT, one should at least be able to state the univalence axiom (and then check that it is true in the model).</p>",
        "id": 197795731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589635672
    },
    {
        "content": "<p>I'm not sure the model theory of higher inductive types has even been worked out mathematically yet, so I would exclude those to start for sure.</p>",
        "id": 197795779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589635696
    },
    {
        "content": "<p>(By the \"model theory\" I mean specifically the problem of constructing a model with all the necessary structure)</p>",
        "id": 197795789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589635744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197795779\">said</a>:</p>\n<blockquote>\n<p>I'm not sure the model theory of higher inductive types has even been worked out mathematically yet, so I would exclude those to start for sure.</p>\n</blockquote>\n<p>I think the best we have is <a href=\"https://arxiv.org/abs/1705.07088\">https://arxiv.org/abs/1705.07088</a>, which gives a large class of models of a large class of HITs.</p>",
        "id": 197795932,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589635999
    },
    {
        "content": "<p>Thanks. So near the end of the introduction, they write that their method does not yield universes that are closed under the construction of higher inductive types. That would be a problem for interpreting something like book HoTT, right? Do you know whether this is still an open problem?</p>",
        "id": 197812493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589659614
    },
    {
        "content": "<p>I don't know. Better ask on the HoTT chat.</p>",
        "id": 197814968,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589662789
    }
]