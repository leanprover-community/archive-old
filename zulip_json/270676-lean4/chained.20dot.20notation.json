[
    {
        "content": "<p>Hi, curious if there's a way to write this expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">toString</span>\n</code></pre></div>\n<p>in this style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">toString</span>\n</code></pre></div>\n<p>(to mimic chained dot notation in OO languages)</p>",
        "id": 288219859,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1656706913
    },
    {
        "content": "<p>Not exactly but very close: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n        <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">toString</span>\n</code></pre></div>",
        "id": 288220314,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656707158
    },
    {
        "content": "<p>In general after a <code>some expression |&gt;</code> you can always use <code>.foo</code> (note that there must not be a blank before the dot here, if there is it has a completely different semantic) to mimick <code>(some epxression).foo</code></p>",
        "id": 288220491,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656707255
    },
    {
        "content": "<p>ah, pretty cool!</p>",
        "id": 288220597,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1656707304
    },
    {
        "content": "<p>If you want to know what an alone standing <code>.foo</code> would mean, basically if Lean expects a function that results in a type <code>a</code> at this point it will look up the name <code>foo</code> in namespace <code>a</code> so writing e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"mi\">12</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will make Lean use <code>Nat.add</code> here, you can also use this in pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 288220886,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656707470
    },
    {
        "content": "<p>yes, I love that feature</p>",
        "id": 288221129,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1656707618
    }
]