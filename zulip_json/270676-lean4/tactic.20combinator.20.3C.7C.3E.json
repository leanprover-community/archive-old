[
    {
        "content": "<p>What is Lean4's analogue of the tactic combinator <code>&lt;|&gt;</code>? E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 316378579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671232954
    },
    {
        "content": "<p>This works, but seems way too verbose?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 316379966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671233748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 316383037,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671235669
    },
    {
        "content": "<p>See: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#tactic-combinators\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#tactic-combinators</a></p>",
        "id": 316383098,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671235695
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 316383271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671235816
    }
]