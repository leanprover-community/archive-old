[
    {
        "content": "<p>In the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>... Lean complains on the last line about <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Even adding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l.mem</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>... doesn't resolve the issue. But changing basically anything about the definition of <code>B</code> resolves the issue.</p>\n<p>Is this intended?</p>",
        "id": 271641754,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644615678
    },
    {
        "content": "<p>Where is a <code>Mem</code> from? I remember it not being in core Lean 4 but only defined in mathlib 4</p>",
        "id": 271646206,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644617927
    },
    {
        "content": "<p>At least the error I get is simply <code>expected token</code> at <code>∈</code></p>",
        "id": 271646251,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644617961
    },
    {
        "content": "<p>Ah, I do have Mathlib4 imported (commit from 2022-02-08).</p>",
        "id": 271646275,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644617977
    },
    {
        "content": "<p>what are your imports? Even if mathlib4 is a dependency this code would still not work</p>",
        "id": 271656210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644624863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Mem.20synthesis.20fails/near/271656210\">said</a>:</p>\n<blockquote>\n<p>what are your imports? Even if mathlib4 is a dependency this code would still not work</p>\n</blockquote>\n<p>Only mathlib. Here's a full setup that reproduces the issue: <a href=\"https://github.com/marcusrossel/mwe/tree/mem-synthesis-fails\">https://github.com/marcusrossel/mwe/tree/mem-synthesis-fails</a></p>",
        "id": 271677112,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644653928
    },
    {
        "content": "<p>And here's a version without any imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mem.mem</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mem</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 271677618,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644654614
    },
    {
        "content": "<p>The issue is due to universe contraints. Note that <code>A</code> and <code>B</code> have two universe parameters: one for each <code>X</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">A</span>\n<span class=\"k\">#print</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>You did not specify these universe parameters in your example. The following works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Another option is to simplify your mutual definition and make sure both <code>X</code>s are using the same universe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271695849,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644682273
    },
    {
        "content": "<p>Without specifying the universes in your original example, type class resolution fails when trying to solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.1701</span> <span class=\"bp\">?</span><span class=\"n\">u.1700</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.1706</span> <span class=\"bp\">?</span><span class=\"n\">u.1705</span>\n</code></pre></div>\n<p>Lean 4 does not approximate the solution using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">u.1701</span>  <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.1706</span>\n<span class=\"bp\">?</span><span class=\"n\">u.1700</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.1705</span>\n</code></pre></div>",
        "id": 271696059,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644682596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Mem.20synthesis.20fails/near/271695849\">said</a>:</p>\n<blockquote>\n<p>The issue is due to universe contraints. Note that <code>A</code> and <code>B</code> have two universe parameters: one for each <code>X</code>.</p>\n</blockquote>\n<p>I don't understand why each <code>X</code> has its own universe parameter.<br>\nIs this somehow related to the fact that <code>X</code> is declared as a constant?</p>\n<p>Or perhaps as a related question: How could it happen that I use <code>X</code>s from different universes in the same definition? And are there any other types where this is a thing?</p>",
        "id": 271733061,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644737936
    },
    {
        "content": "<p>But thanks, this helped solve my issue!</p>",
        "id": 271733442,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644738631
    },
    {
        "content": "<p>I don't think it's related to <code>constant X : Type _</code>, the same happens if you replace it with some universe polymorphic def, like <code>def X := Type _</code></p>",
        "id": 271733828,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644739207
    },
    {
        "content": "<p>I guess each <code>X</code> is getting its own parameter because Lean tries to be as polymorphic as possible, so each occurrence of the same (modulo universe) term is universe independent from the other? Like  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">p</span>\n<span class=\"c1\">-- @p.{u_1, u_2} : {α : Type u_1} → {β : Type u_2} → Prod.{u_1, u_2} (α → α) (β → β)</span>\n</code></pre></div>",
        "id": 271733955,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644739367
    },
    {
        "content": "<p>Wouldn't the analogous definition be <code>def X : Type _ := &lt;something&gt;</code> though?</p>",
        "id": 271735173,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644741407
    },
    {
        "content": "<p>Well yeah, it's <code>def x : Type _ := Type _</code> :)</p>",
        "id": 271735727,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644742295
    }
]