[
    {
        "content": "<p>Have searched the Zulip on this, but not gotten a terribly clear answer.</p>\n<p>I have a port in progress that's failing on a single error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rec.constant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PLift.rec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n        <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PLift.casesOn</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">PLift.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">down</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>Fails with <code>failed to elaborate eliminator, expected type is not available</code> on <code>PLift.rec (fun a' =&gt; b) { down := a }</code> &amp; I'm frankly not clear on where <code>rec</code> and <code>casesOn</code> come from here, despite crawling source.</p>",
        "id": 310747157,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668745823
    },
    {
        "content": "<p>Working through <a href=\"#narrow/stream/270676-lean4/topic/.22Failed.20to.20elaborate.20eliminator.22/near/297811146\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.22Failed.20to.20elaborate.20eliminator.22/near/297811146</a></p>\n<p>&amp; switching to <code>@Plift.rec</code> gets me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">rec</span> <span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"n\">argument</span>\n<span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.3111</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.3110</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.3108</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.3108</span>\n</code></pre></div>\n<p>Which I think leads me a bit along the path?</p>",
        "id": 310747588,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668746193
    },
    {
        "content": "<p>The issue (I think) is that Lean is failing to compute the motive properly. A few things:</p>\n<ol>\n<li><code>PLift.rec</code> and <code>PLift.casesOn</code> are autogenerated definitions created when you declare an <code>inductive</code>, in this case, <code>PLift</code></li>\n<li>You may want to follow the advice in the thread you linked and mark <code>Plift.rec</code> with the <code>elabAsElim</code> attribute. Normally you would just add this with <code>@[elabAsEim]</code> immediately prior to the declaration, but since this is autogenerated you can't do that. Instead, you can add it manually by adding the line <code>attribute [elabAsElim] PLift.rec</code>.</li>\n<li>If that doesn't fix your problems (or if for some reason it is the wrong approach), then you'll need to provide the motive to Lean manually (or give it some extra information somehow to help it out). To do this, it helps to have the mathlib3 version of the file open so that you can inspect the motive in the tactic state.</li>\n</ol>",
        "id": 310750802,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668748565
    },
    {
        "content": "<p>(by the way, a <code>structure</code> is just an <code>inductive</code> with a single constructor with some extra special tooling, so it also gets the <code>.rec</code> and <code>.casesOn</code>)</p>",
        "id": 310750915,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668748639
    },
    {
        "content": "<p>I think it's <code>elab_as_elim</code> now, but can't get either attribute to stick. Perhaps a missing import...</p>",
        "id": 310753501,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668750652
    },
    {
        "content": "<p>What error do you get?</p>",
        "id": 310754086,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668751065
    },
    {
        "content": "<p>for <code>elabAsElim</code>, <code>unknown attribute</code>; for <code>elab_as_elim</code>, <code>invalid attribute, declaration is in an imported module</code>, which maybe means that since the definition is upstream, I can't modify the attribute?</p>",
        "id": 310757827,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668753762
    },
    {
        "content": "<p>you can't apply <code>elab_as_elim</code> (or most attributes) to a declaration in another file</p>",
        "id": 310758016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668753866
    },
    {
        "content": "<p>but you can make a copy of the definition and tag that</p>",
        "id": 310758031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668753879
    },
    {
        "content": "<p>by the way, this works for the original proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rec.constant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PLift.rec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n        <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PLift.casesOn</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 310758182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668753977
    },
    {
        "content": "<p>or even just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">rec.constant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PLift.rec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 310758232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668754020
    },
    {
        "content": "<p>Lean 4 seemed generally worse than lean 3 at guessing motives. I've been setting pp.all true in lean 3 and looking at the motive and then supplying it explicitly. I opened <a href=\"https://github.com/leanprover/lean4/pull/1841\">lean4#1841</a> about this and Leo fixed it yesterday. Does updating lean solve the problem here?</p>",
        "id": 310761699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668756292
    },
    {
        "content": "<p>I haven't tested the code but from reading the commit that fixed <a href=\"https://github.com/leanprover/lean4/pull/1841\">lean4#1841</a> I think we should expect <code>elab_as_elim</code> to act basically the same as it does in lean 3 now</p>",
        "id": 310762557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668756821
    },
    {
        "content": "<p>meaning that this issue should be fixed, assuming the relevant constants are in fact marked <code>elab_as_elim</code></p>",
        "id": 310762743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668756912
    }
]