[
    {
        "content": "<p>So far I've seen two ways to do syntax stuff in Lean one is with: <code>syntax name := parser</code> and the other is by <code>syntax parser : syntax_cat</code>. When should I prefer to use the first or the second one? It seems to me that they are about equally powerful? But I see code for example here: <a href=\"https://github.com/tydeu/lean4-alloy/blob/master/Alloy/C/Syntax.lean\">https://github.com/tydeu/lean4-alloy/blob/master/Alloy/C/Syntax.lean</a> that mixes both declaring several syntax categories and layering within each other as well as this direct name syntax.</p>",
        "id": 273552726,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1646081912
    },
    {
        "content": "<p>The first kind of syntax creates a closed class, you list exactly what is valid syntax in the class after the <code>:=</code>. The other form is an open class: you can extend it later in later files or even in downstream user code.</p>",
        "id": 273568286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646090015
    },
    {
        "content": "<p>The syntax class approach also works a little different in the parser: syntax can have priorities, and they are all tried. By contrast, the <code>&lt;|&gt;</code> alternation you get in regular parsers does not try later alternatives if at least one token matches (unless you use <code>atomic</code>), so if you have complicated overlap between patterns you might need to use the syntax class approach</p>",
        "id": 273568530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646090180
    },
    {
        "content": "<p>You need to use a syntax definition when multiple atoms are parsed in a parser combinator like <code>(a b c)*</code>  or <code>(a b c) &lt;|&gt; (d e)</code> (i.e. it should be rewritten as <code>syntax abc := a b c</code> and then use <code>abc*</code>). This introduces a node named <code>abc</code> into the generated syntax tree which is necessary for the parser and delaborator to work</p>",
        "id": 273568727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646090339
    },
    {
        "content": "<p>I generally prefer to use syntax definitions if possible, that is, if there are one or a few alternatives and they don't overlap too much, and it isn't supposed to be extended later. If it is an extension point, or there is large fanout, then use a syntax class</p>",
        "id": 273569002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646090559
    }
]