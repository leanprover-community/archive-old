[
    {
        "content": "<p>Could <code>repeat'</code> in <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/Basic.lean#L95\">https://github.com/leanprover/std4/blob/main/Std/Tactic/Basic.lean#L95</a> be defined instead as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"repeat'' \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">repeat''</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">all_goals</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span> <span class=\"n\">repeat''</span> <span class=\"bp\">$</span><span class=\"n\">seq</span> <span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>rather than having the <code>repeat'Aux</code> declaration?</p>",
        "id": 298900803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663217073
    },
    {
        "content": "<p>(<code>first | tac | skip</code> can be replaced by <code>try tac</code> btw)</p>",
        "id": 298901019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663217353
    },
    {
        "content": "<p>I believe the execution order is not exactly the same; <code>repeat'Aux</code> does a BFS order traversal and yours does DFS</p>",
        "id": 298901101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663217436
    },
    {
        "content": "<p>but the main reason I would prefer not to is because I don't like to use macros for control flow, it incurs the cost of running the tactic parser framework on every loop iteration</p>",
        "id": 298901166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663217511
    },
    {
        "content": "<p>Great, I like the main reason. :-)</p>",
        "id": 298901353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663217690
    },
    {
        "content": "<blockquote>\n<p>running the tactic parser framework on every loop iteration</p>\n</blockquote>\n<p>This is not what happens at all.  The parser is run only once.  All the macro expansion happens on the <code>Syntax</code> level.  Obviously don't use it for it tight loops, though I'd say the bigger issue there is term elaboration (<code>repeat apply foo x</code> is problematic not because <code>repeat</code> is implemented as a macro, but because <code>foo x</code> is elaborated in every iteration).</p>",
        "id": 298952788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663242865
    },
    {
        "content": "<p>I think that macros are great for high-level control flow (where you could write the expanded tactics manually instead, just with more typing).  Low-level control flow (like proof search etc.) should be done in <code>MetaM</code>.</p>",
        "id": 298953236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663243061
    },
    {
        "content": "<p>I'm fairly sure you could write <code>tac</code> such that <code>repeat' tac</code> calls a different version of <code>repeat'</code> on every iteration because <code>tac</code> is redefining it</p>",
        "id": 298953416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663243133
    },
    {
        "content": "<p>the parsing is only done once but the interpretation of the syntax object happens every time</p>",
        "id": 298953584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663243201
    },
    {
        "content": "<p>I would love it if tactics could be \"partially evaluated\" where given the syntax it produces an execution plan as a closure which is then applied to the tactic state</p>",
        "id": 298953727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663243240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I left a comment on your <code>repeat'</code> commit to <code>Std</code>; probably easier to discuss here than on github.</p>",
        "id": 299078819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663293548
    },
    {
        "content": "<p>I'd like to change <code>repeat'</code> so that if we hit the <code>maxIters</code> limit, all the remaining goals that haven't been tried yet are returned.</p>",
        "id": 299078938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663293586
    },
    {
        "content": "<p>Without this it seems we'll lose goals (and this was happening to me in <code>apply_rules</code> when I switched to using <code>repeat'</code>).</p>",
        "id": 299079206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663293622
    },
    {
        "content": "<p>pushed a fix</p>",
        "id": 299080769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663293987
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 299082715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663294524
    },
    {
        "content": "<p>What is the correct method to bump <code>Std</code> (from mathlib4), given that our lakefile just points to the <code>main</code> branch?</p>",
        "id": 299082824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663294556
    },
    {
        "content": "<p>I initially tried just removing <code>lean_package</code> and building again, but discovered that <code>lean_package/manifest.json</code> is actually checked into the repository, which surprised me.</p>",
        "id": 299082950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663294587
    },
    {
        "content": "<p><code>lake update</code> updates the manifest</p>",
        "id": 299083159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663294847
    }
]