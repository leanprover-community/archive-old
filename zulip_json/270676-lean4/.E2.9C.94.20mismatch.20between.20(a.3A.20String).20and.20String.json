[
    {
        "content": "<p>I'm trying to run this code but I'm having two odd problems:</p>\n<ul>\n<li>(a : String) is different from String</li>\n<li>(F \"a\") does not reduces to Int.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">-- (\"a\", 2)</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">-- String × ?m.25 : Type ?u.20</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">-- (α : String) × F α : Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285733523,
        "sender_full_name": "Felipe GS",
        "timestamp": 1654895822
    },
    {
        "content": "<p>more specifically, it is a difference between <code>(x : A) × B</code> which is notation for <code>Sigma A (fun x =&gt; B)</code> and <code>A × B</code> which is notation for <code>Prod A B</code></p>",
        "id": 285733736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654895954
    },
    {
        "content": "<p>only the latter gets the <code>(x, y)</code> notation</p>",
        "id": 285733753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654895967
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 285734011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654896118
    },
    {
        "content": "<p>the second issue is that definitions do not normally inherit typeclasses, you have to redefine the typeclasses for the new definition or make it reducible</p>",
        "id": 285734162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654896188
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 285734176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654896202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481858\">Felipe GS</span> has marked this topic as resolved.</p>",
        "id": 285734300,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654896250
    }
]