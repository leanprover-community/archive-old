[
    {
        "content": "<p>I'm just starting to learn how the parsing infrastructure works (mainly via the metaprogramming tutorial book) -- is there a standard way to include the structure-like binder syntax in a syntax declaration?</p>\n<p>Looking to parse commands of this form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extensible</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span>\n</code></pre></div>",
        "id": 294564699,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661101277
    },
    {
        "content": "<p>Also, is there somewhere in the compiler code base where the standard syntax is defined? (defs, structures, etc)</p>\n<p>I'd find it helpful to learn from how the built-in syntax works</p>",
        "id": 294564859,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661101383
    },
    {
        "content": "<p>There is lots of locations where syntax is defined, notably:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean</a></li>\n</ul>\n<p>in <code>Init</code> and more spread throughout the compiler, notably here:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean</a></li>\n</ul>\n<p>but also in a couple of other locations, the specific elaborator for structure is here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Structure.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Structure.lean</a><br>\nand its syntax here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean#L112\">https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean#L112</a></p>",
        "id": 294575477,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1661108618
    },
    {
        "content": "<p>Ah, thank you greatly</p>",
        "id": 294596629,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661133321
    },
    {
        "content": "<p>Also, syntax elements are linked (go to definition) in VSCode after <code>import Lean</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Then Ctrl+click on <code>structure</code> token will open this <a href=\"https://github.com/leanprover/lean4/blob/f8c7de5a64fc7944825e43cded59701d01ff7a53/src/Lean/Elab/Declaration.lean#L202\">elaborator definition</a>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinCommandElab declaration]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabDeclaration</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>and clicking <code>declaration</code> name in <code>@[builtinCommandElab declaration]</code> will open this <a href=\"https://github.com/leanprover/lean4/blob/f8c7de5a64fc7944825e43cded59701d01ff7a53/src/Lean/Parser/Command.lean#L116-L117\">parser definition</a>.</p>",
        "id": 294606430,
        "sender_full_name": "pcpthm",
        "timestamp": 1661145420
    },
    {
        "content": "<p>Oh, this is very helpful to know :D</p>",
        "id": 294634520,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661159597
    }
]