[
    {
        "content": "<p>I'm trying to define data structure for trees with fixed branching factor. With the help of this <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20requiring.20proofs.20on.20inductive.20constructors\">question</a> I have managed to get it compile, but I'm confused why I have to use <code>Vector</code> and can't use <code>NArray</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NArray</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">u.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Node</span> <span class=\"o\">(</span><span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span>  <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span>  <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>With <code>(children : NArray (Node Data n) n)</code> it produces an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">Node.node'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>Or another attempt <code>| node  (children : Array (Node Data n)) (h : children.size = n) : Node Data n</code> produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">nested</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span> <span class=\"bp\">'</span><span class=\"n\">Eq'</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatypes</span> <span class=\"kd\">parameters</span> <span class=\"n\">cannot</span> <span class=\"n\">contain</span> <span class=\"kn\">local</span> <span class=\"kd\">variables</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I would much rather deal with <code>Array</code> then with <code>Vector</code>. Also from performance perspective, I'm expecting  <code>Array</code> to be faster.</p>",
        "id": 277544654,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648924715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Mario answered this question for Lists here <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20requiring.20proofs.20on.20inductive.20constructors/near/277021847\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20requiring.20proofs.20on.20inductive.20constructors/near/277021847</a><br>\nIt is the same thing here but with <code>Array</code> instead of <code>List</code>.</p>",
        "id": 277545021,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648925217
    },
    {
        "content": "<p>I must have completely misunderstand the answer, I will read it again properly.</p>",
        "id": 277545080,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648925300
    },
    {
        "content": "<p>Note that <code>Array</code>s are defined in Lean as a wrapper around <code>List</code>, and the runtime has special support for their basic operations.<br>\nIn the future, we can do the same for <code>NArray</code> and <code>Vector</code>.</p>",
        "id": 277545170,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648925405
    },
    {
        "content": "<p>Is there a need for writing special runtime support for <code>NArray</code>? As it is just a pair of <code>Array</code> and a proof, the proof get eliminated in runtime so <code>NArray</code> is effectively just <code>Array</code>. In general, it would be nice if runtime performace of <code>Subtype P</code>, <code>P : α → Prop</code>, is the same as for <code>α</code>.</p>",
        "id": 277545407,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648925712
    },
    {
        "content": "<p>The problem is your <code>Node</code> example above. The <code>NArray</code> defined as a subtype prevents us from using it in a type like <code>Node</code>.</p>",
        "id": 277545475,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648925773
    },
    {
        "content": "<p>If we define <code>NArray</code> as a simple wrapper around <code>Vector</code>like <code>Array</code> is a wrapper around <code>List</code>, then <code>Node</code> works, but to get the runtime behavior we want, we need support in the runtime.</p>",
        "id": 277545600,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648925975
    },
    {
        "content": "<p>Right, I think I see the problem. Still do not understand why <code>NArray</code> as subtype is causing problem in the definition of <code>Node</code>, but that is due to my lack of type theory knowledge <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 277545836,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648926163
    },
    {
        "content": "<p>We should probably write documentation for this. This is a recurrent question.</p>",
        "id": 277546032,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648926415
    },
    {
        "content": "<p>I believe <code>unsafe inductive</code> is always an option if you really want a certain runtime representation. I think it will allow some crazy dependencies in this case</p>",
        "id": 277546271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648926641
    },
    {
        "content": "<p>it is unfortunate that there is no equivalent of <code>partial</code> for inductives - the fact that <code>unsafe</code> is viral really makes this approach inconvenient to work with</p>",
        "id": 277546355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648926731
    },
    {
        "content": "<p>I'm considering working with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Node</span> <span class=\"o\">(</span><span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span>  <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">Data</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span>  <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Node.FixedBranching</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">children.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">children.get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FixedBranching</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MNode</span> <span class=\"o\">(</span><span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span>\n  <span class=\"n\">fix_branching</span> <span class=\"o\">:</span> <span class=\"n\">node.FixedBranching</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>Not sure how to show termination though. I should learn the new termination syntax.</p>",
        "id": 277546481,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648926957
    },
    {
        "content": "<p>I often find inductive predicates more convenient to use than definitions such <code>FixedBranching</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Node.FixedBranching</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">Data</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">FixedBranching</span> <span class=\"n\">n</span> <span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">FixedBranching</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">Data</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">cs.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">FixedBranching</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cs.get</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">FixedBranching</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277547223,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648927903
    },
    {
        "content": "<p>Nice! probably easier to deal with in proofs and does not have a problem with termination.</p>",
        "id": 277547388,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648928137
    }
]