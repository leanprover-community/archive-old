[
    {
        "content": "<p>So, i have this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_forall</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exists_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_exists</span>\n</code></pre></div>\n<p>The first theorem work, but not the second one, does someone have an idea of why, and how to make it work</p>",
        "id": 271684973,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644666374
    },
    {
        "content": "<p>Independent of the question, are you sure you want to be talking about equality of propositions? Equality of types is a pretty hairy notion in type theory. What's wrong with <code>↔</code>?</p>",
        "id": 271686097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644668076
    },
    {
        "content": "<p>Normally when eq.subst fails it's just a matter of giving things more type ascriptions. The elaborator has a hard time solving these questions because higher order unification is undecidable and intermediate problems may have multiple solutions. But I'm not at lean right now and haven't tried to fix the code</p>",
        "id": 271686182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644668230
    },
    {
        "content": "<p>For the use i have of it, yeah i'm pretty sure i need equality, because i'm relying heavily on Eq.congr , and i don't think there is an equivalent for Iff ?</p>",
        "id": 271686822,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644669190
    },
    {
        "content": "<p>The <code>rw</code> tactic works fine with iff</p>",
        "id": 271687114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644669618
    },
    {
        "content": "<p>But i don't use <code>rw</code> actually</p>",
        "id": 271687369,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644670055
    },
    {
        "content": "<p>Yeah I can't get <code>rw</code> to work in tactic mode either -- in Lean 3 this wouldn't work either -- <code>rw</code> can't see under binders. In Lean 3 we use <code>simp only</code> and the same trick works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_exists_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">not_exists</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>To be quite frank I'm more surprised that your first proof works than the second one fails :-) (eq.subst really seems to be rewriting under a binder). But I spend my life in tactic mode, I don't know the subtleties of eq.subst (although if you search for \"stupid triangle\" here I'm sure you'll find plenty of examples of me moaning about it). </p>\n<p>What is Eq.congr? I still have this nagging worry that you shouldn't be doing things like this. Prop is not bool, it's a level higher; equality of terms is fine, but equality of types is not a good concept somehow.</p>",
        "id": 271692800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644678248
    },
    {
        "content": "<p>congr is this : <code>theorem congr {α : Sort u} {β : Sort v} {f₁ f₂ : α → β} {a₁ a₂ : α} (h₁ : Eq f₁ f₂) (h₂ : Eq a₁ a₂) : Eq (f₁ a₁) (f₂ a₂)</code></p>",
        "id": 271693212,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644678779
    },
    {
        "content": "<p>Oh in Lean 3 it's just the same, both in term mode and tactic mode. I would expect all four proofs to fail, and certainly the tactic proof of <code>not_forall_eq</code> because everyone knows that <code>rw</code> won't rewrite under a binder.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_forall</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exists_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_exists</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_eq'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"c1\">-- `rw` rewriting under a binder</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exists_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"c1\">-- `rw` fails, as expected, because we all know it can't rewrite under binders</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271693218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644678786
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271693295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644678878
    },
    {
        "content": "<p>Yeah, i figured out<br>\nSo i just <code>#print</code> your proof via tactic to see if I can somehow make a clean expression</p>",
        "id": 271693337,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644678959
    },
    {
        "content": "<p>And of course i can, so here it is : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_forall_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_forall</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exists_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">forall_congr</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">propext</span> <span class=\"n\">not_exists</span>\n</code></pre></div>",
        "id": 271693470,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644679111
    },
    {
        "content": "<p>Nice! And thanks for your explanation on the thread in #general (I started it because many Lean 3 people don't read this stream, I should have just asked you here!). As for congr, what does iff.congr say? Whatever it says, can't you just prove it using propext?</p>",
        "id": 271694267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644680182
    },
    {
        "content": "<p>Thanks to you too, because i figured that rewriting under binder was not a good thing</p>",
        "id": 271695670,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644681981
    },
    {
        "content": "<p>This is regarded as a \"known limitation of rw\" in Lean 3; the <code>simp_rw</code> command is basically (I think) a wrapper for <code>simp only</code> which will rewrite under binders (because <code>simp</code> will and <code>rw</code> won't). I had not understood before that it's also a limitation of <code>eq.subst</code>, I guess this is the reason why we can't rewrite under binders. Is there a type-theoretic reason for this behaviour I wonder or is it just because someone had to write a unifier for Lean at some point and because there's some theorem of logic saying there's no algorithm for higher order unification they had to instead write an algorithm which sometimes fails and they chose it to fail here.</p>",
        "id": 271706718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644695619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20substitution/near/271692800\">said</a>:</p>\n<blockquote>\n<p><code>rw</code> can't see under binders</p>\n</blockquote>\n<p>This is commonly stated, but it turns out not to be true. What <code>rw</code> can't do is rewrite subexpressions containing bound variables.</p>\n<p>This is <code>rw</code> rewriting under binders in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271706941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644695940
    },
    {
        "content": "<p>My understanding of this is that <code>rw</code> needs to do a \"global\" rewrite of the entire term, and if a subexpression to be rewritten contains a bound variable, you can't lift it outside that binder to do the global rewrite.</p>",
        "id": 271707081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644696063
    },
    {
        "content": "<p>Here's an example of <code>rw</code> failing to rewrite under binders since it would need to refer to <code>f (n + 1) 1</code> outside the binder for <code>n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails (and simp_rw [h] succeeds)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271707241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644696271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20substitution/near/271706718\">said</a>:</p>\n<blockquote>\n<p>This is regarded as a \"known limitation of rw\" in Lean 3; the <code>simp_rw</code> command is basically (I think) a wrapper for <code>simp only</code> which will rewrite under binders (because <code>simp</code> will and <code>rw</code> won't). I had not understood before that it's also a limitation of <code>eq.subst</code>, I guess this is the reason why we can't rewrite under binders. Is there a type-theoretic reason for this behaviour I wonder or is it just because someone had to write a unifier for Lean at some point and because there's some theorem of logic saying there's no algorithm for higher order unification they had to instead write an algorithm which sometimes fails and they chose it to fail here.</p>\n</blockquote>\n<p>This is a fundamental limitation of <code>eq.subst</code>. It accepts <em>an</em> equality as input, that is, the assertion that two particular things are equal. If I know that <code>?x + ?y = ?y + ?x</code> for some particular (to be determined) values <code>?x</code> and <code>?y</code>, there is no way I can prove <code>(∀ n, P (x + n)) -&gt; (∀ n, P (n + x))</code></p>",
        "id": 271713592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644705692
    },
    {
        "content": "<p>In the example the equality it had was <code>fun a, f a = fun a, g a</code> and in that situation you could imagine it working somehow</p>",
        "id": 271718419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644713040
    },
    {
        "content": "<p>Which example?</p>",
        "id": 271718677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644713486
    },
    {
        "content": "<p>There is a difference between <code>fun a, f a = fun a, g a</code> and <code>forall a, f a = g a</code></p>",
        "id": 271718744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644713547
    },
    {
        "content": "<p>In the example at the top we have <code>funext h ▸ ...</code></p>",
        "id": 271718762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644713597
    },
    {
        "content": "<p>So the type of <code>funext h</code> is something like <code>(fun x =&gt; neg (s x)) = s'</code>, and the LHS of that doesn't look like anything in <code>not_exists</code></p>",
        "id": 271718943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644713885
    },
    {
        "content": "<p>ah, trying to rewrite the RHS of <code>not_exists</code>?</p>",
        "id": 271719103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644714042
    },
    {
        "content": "<p>I guess in that case it probably could work with an explicitly provided motive</p>",
        "id": 271719180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644714162
    },
    {
        "content": "<p>and the first one works because the RHS is really notation for <code>Exists (fun x =&gt; neg (s x))</code> already</p>",
        "id": 271719185,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644714185
    }
]