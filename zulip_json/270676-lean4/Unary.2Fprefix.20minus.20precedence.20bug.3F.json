[
    {
        "content": "<p>I discovered that trying to pass an argument with the unary minus <code>-</code>  prefix operator applied to it results in  the expression being mistaken for subtraction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Add</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add</span> <span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"mi\">4</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  failed to synthesize instance</span>\n<span class=\"cm\">    Sub (?m.631 → ?m.631 → ?m.631)</span>\n<span class=\"cm\">  function expected at</span>\n<span class=\"cm\">    3</span>\n<span class=\"cm\">  term has type</span>\n<span class=\"cm\">    ?m.965</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is this a bug? Or is there some parser ambiguity problem with two different mixfix syntaxes that makes this not work in Lean?</p>",
        "id": 244098078,
        "sender_full_name": "Mac",
        "timestamp": 1624849801
    },
    {
        "content": "<p>Works if you put parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">Int.add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"c1\">-- Int.negSucc 6</span>\n</code></pre></div>",
        "id": 244099344,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1624852074
    },
    {
        "content": "<p>I think lean 3 is like this as well</p>",
        "id": 244106663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624862487
    },
    {
        "content": "<p>As well as Haskell</p>",
        "id": 244109324,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624864833
    },
    {
        "content": "<p>It looks to me like you're assuming that the lack of whitespace after <code>-</code> is significant to lean, but it isn't</p>",
        "id": 244115050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624868845
    },
    {
        "content": "<p><code>f -a</code> is parsed identically to <code>f - a</code></p>",
        "id": 244115081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624868873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Unary.2Fprefix.20minus.20precedence.20bug.3F/near/244115050\">said</a>:</p>\n<blockquote>\n<p>It looks to me like you're assuming that the lack of whitespace after <code>-</code> is significant to lean, but it isn't</p>\n</blockquote>\n<p>Why not though? Differentiating between prefix/postfix and infix operators by whitespace is pretty common in programming languages and Lean's  notation certainly supports this possibility. It seems like this would be a major advantage of Lean's syntax over things like Haskell that cannot perform such disambiguation.</p>",
        "id": 244167965,
        "sender_full_name": "Mac",
        "timestamp": 1624896451
    },
    {
        "content": "<p>what if you want a prefix notation which has a space between it and the symbol?</p>",
        "id": 244172425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624898628
    },
    {
        "content": "<p>for example most prefix notations that consist of alphabetic characters will probably want this</p>",
        "id": 244172538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624898662
    },
    {
        "content": "<p>plus even <code>-</code> wants it if you want to write <code>neg_neg</code> without starting a comment</p>",
        "id": 244172567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624898682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Unary.2Fprefix.20minus.20precedence.20bug.3F/near/244172425\">said</a>:</p>\n<blockquote>\n<p>what if you want a prefix notation which has a space between it and the symbol?</p>\n</blockquote>\n<p>My solution would be to define two notations for each prefix/postfix operator, one with no space and one with space. That way the absence of space can be used to disambiguate when useful while still allowing for the current behavior when that is useful.</p>",
        "id": 244198174,
        "sender_full_name": "Mac",
        "timestamp": 1624911035
    },
    {
        "content": "<p>My mind wander back to this and I managed to get a working example for how I would make this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">infixSub</span><span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"n\">_sym</span><span class=\"o\">:</span><span class=\"n\">orelse</span><span class=\"o\">(</span><span class=\"n\">ws</span> <span class=\"s2\">\"-%\"</span> <span class=\"n\">ws</span><span class=\"o\">,</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"-%\"</span> <span class=\"n\">noWs</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Sub.sub</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">prefixSub</span><span class=\"o\">)</span>\n<span class=\"n\">_sym</span><span class=\"o\">:</span><span class=\"s2\">\"-%\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Neg.neg</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">8</span><span class=\"bp\">-%</span><span class=\"mi\">4</span>    <span class=\"c1\">-- 4</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">5</span> <span class=\"bp\">-%</span> <span class=\"mi\">3</span>  <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">id</span> <span class=\"bp\">-%</span><span class=\"mi\">3</span>  <span class=\"c1\">-- -3</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-%</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"c1\">-- -2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">id</span><span class=\"bp\">-%</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- errors</span>\n</code></pre></div>\n<p>The last expression <code>id-% 2</code> would then be usable for postfix operations like the following contrived example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">postfixSub</span><span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"-%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Nat.pred</span> <span class=\"bp\">∘</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">id</span><span class=\"bp\">-%</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 244993525,
        "sender_full_name": "Mac",
        "timestamp": 1625544066
    }
]