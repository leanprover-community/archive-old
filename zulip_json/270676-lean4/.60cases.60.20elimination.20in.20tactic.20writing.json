[
    {
        "content": "<p>I'm following the book Metaprogramming in Lean 4 to play around with making my own tactics. While my tactic is running, it produces expressions of type <code>p ∨ q</code>, and it needs to produce a goal for each of the possible cases, with appropriate hypotheses. I can't find anything like this in the metaprogramming book, and the examples in the Lean source code are too complex for me. Here's a simplified example which demonstrates what I want, although in a separate context for how I intend to apply it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"or_cases\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">type</span>\n    <span class=\"n\">unless</span> <span class=\"n\">type.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"mi\">2</span> <span class=\"k\">do</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Failed\"</span>\n    <span class=\"c1\">-- What now?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">or_cases</span> <span class=\"n\">hpq</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any help would be much appreciated!</p>",
        "id": 294593707,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1661129270
    },
    {
        "content": "<p>This seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 294599779,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1661137697
    },
    {
        "content": "<p>I was aware of <code>evalTactic</code>, the whole thing in the example could be a macro, but I don't have the syntax for the term t in the actual context I'm working in, sorry I should have specified that.</p>",
        "id": 294643980,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1661163273
    },
    {
        "content": "<p>I only have an Expr which I constructed as an application of another theorem using mkAppM</p>",
        "id": 294644275,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1661163392
    },
    {
        "content": "<p>The next steps, to get the two arguments, will be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">e.appFn</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e.appArg</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>Now these have to be set as the goals. The cleanest way in my view is to use <code>liftMetaTactic</code>and to return a list consisting of <code>x</code> and <code>y</code>.</p>",
        "id": 294649604,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1661165560
    },
    {
        "content": "<p>You can use <code>Lean.Meta.cases</code>, which is the <code>MetaM</code> function underlying the <code>cases</code> tactic. That'll do everything for you. If you want to do more yourself, you'll have to produce an application of <code>Or.elim</code> to <code>hpq</code>, use that expression to solve the original goal and report the resulting two metavariables. You can use <code>Lean.Meta.apply</code> for this or, again, re-implement some of its functionality for practice.</p>",
        "id": 294652740,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1661166776
    },
    {
        "content": "<p>Alastair's problem is caused by the fact that he doesn't have the Syntax for his Expression.  Here's another solution to the problem, based on a suggestion that Gabriel Ebner made in a different discussion topic.  (Any mistakes in my implementation of the suggestion are my fault, not Gabriel's.)  First, define this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exprToTerm</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Core.mkFreshUserName</span> <span class=\"bp\">`</span><span class=\"n\">m</span>\n  <span class=\"k\">let</span> <span class=\"n\">mv</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.mkFreshExprSyntheticOpaqueMVar</span> <span class=\"n\">type</span> <span class=\"n\">m</span>\n  <span class=\"n\">Lean.MVarId.assign</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span> <span class=\"n\">val</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>This function takes expressions <code>val</code> and <code>type</code>, where <code>type</code> is the type of <code>val</code>, and produces a metavariable whose type is <code>type</code> and whose value is <code>val</code>.  Then it returns a term for the metavariable.  That term can now be used in Syntax to refer to <code>val</code>.  So, in Alastair's case, if <code>e</code> is the expression <code>p ∨ q</code> and <code>pf</code> is an expression that is a proof of <code>e</code>, then the cases Alastair wants can be created like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">exprToTerm</span> <span class=\"n\">pf</span> <span class=\"n\">e</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 294775526,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1661206893
    }
]