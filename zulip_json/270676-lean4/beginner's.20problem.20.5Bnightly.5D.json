[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"c1\">-- def exunique (p : α → Prop) := ∃ (x : α), (p x ∧ ∀ y, p y → x = y)</span>\n\n<span class=\"c1\">-- syntax \"∃!\" term \",\" term: term</span>\n<span class=\"c1\">-- macro_rules</span>\n<span class=\"c1\">-- | `(∃! $t:term, $p:term) =&gt; `(exunique (fun $t =&gt; $p))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span><span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩:=</span> <span class=\"n\">hex</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- apply Classical.byContradiction; intro hanb</span>\n<span class=\"n\">refine</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">hanb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hanb</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span><span class=\"n\">ham</span><span class=\"o\">⟩:=</span><span class=\"n\">ha</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hbl</span><span class=\"o\">,</span><span class=\"n\">hbm</span><span class=\"o\">⟩:=</span><span class=\"n\">hb</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hanb</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx1</span><span class=\"o\">,</span><span class=\"n\">hx2</span><span class=\"o\">⟩:=</span><span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hl'</span><span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span><span class=\"n\">hbl</span><span class=\"o\">⟩</span>\n<span class=\"k\">have</span> <span class=\"n\">hm'</span><span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">ham</span><span class=\"o\">,</span><span class=\"n\">hbm</span><span class=\"o\">⟩</span>\n<span class=\"k\">have</span> <span class=\"n\">hlm</span><span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">hl'</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">hm'</span><span class=\"o\">)</span>\n<span class=\"c1\">-- hlm hlnm</span>\n<span class=\"n\">contradiction</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">hpnq</span><span class=\"o\">,</span><span class=\"n\">hqnr</span><span class=\"o\">,</span><span class=\"n\">hpnr</span><span class=\"o\">,</span><span class=\"n\">hncol</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i.three</span>\n<span class=\"k\">have</span> <span class=\"n\">hnl</span><span class=\"o\">:=</span> <span class=\"n\">hncol</span> <span class=\"n\">l</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">intro</span> <span class=\"n\">hallinc</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n<span class=\"c1\">-- have hpqrinc:= And.intro (And.intro (hallinc p) (hallinc q)) (hallinc r)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">46</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">¬¬?</span><span class=\"n\">m.1516</span>\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">point</span>\n<span class=\"n\">hpnq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span>\n<span class=\"n\">hqnr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">r</span>\n<span class=\"n\">hpnr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">r</span>\n<span class=\"n\">hncol</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"n\">hnl</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"n\">hallinc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">inc</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 285744988,
        "sender_full_name": "Aron",
        "timestamp": 1654905088
    },
    {
        "content": "<p>See the last line, not_not is not matching its pattern.</p>",
        "id": 285745006,
        "sender_full_name": "Aron",
        "timestamp": 1654905124
    },
    {
        "content": "<p>It isn't matching <code>¬¬something</code> in <code>hallinc : ∀ (x : point), ¬¬inc x l</code>.</p>",
        "id": 285745073,
        "sender_full_name": "Aron",
        "timestamp": 1654905171
    },
    {
        "content": "<p>I believe <code>rewrite</code> will not work inside a <code>∀</code>. Here is one way to achieve what you want (replacing the last line).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n<span class=\"k\">have</span> <span class=\"n\">halinc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">inc</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">intro</span> <span class=\"n\">x</span>\n   <span class=\"k\">let</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">hallinc</span> <span class=\"n\">x</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n   <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>Somebody more skilled than me at tactics will probably suggest a shorter way.</p>",
        "id": 285752732,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654915162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/beginner's.20problem.20.5Bnightly.5D/near/285752732\">said</a>:</p>\n<blockquote>\n<p>I believe <code>rewrite</code> will not work inside a <code>∀</code>. Here is one way to achieve what you want (replacing the last line).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n<span class=\"k\">have</span> <span class=\"n\">halinc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">inc</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">intro</span> <span class=\"n\">x</span>\n   <span class=\"k\">let</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">hallinc</span> <span class=\"n\">x</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n   <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>Somebody more skilled than me at tactics will probably suggest a shorter way.</p>\n</blockquote>\n<p>Why doesn't the nightly build automatically collapse not_not?</p>",
        "id": 285754275,
        "sender_full_name": "Aron",
        "timestamp": 1654917183
    },
    {
        "content": "<p>What do you mean by \"collapse not_not\"?</p>",
        "id": 285754365,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654917288
    },
    {
        "content": "<p>It seemed like the stable build of lean4 would automatically simplify not not p into p.</p>",
        "id": 285754504,
        "sender_full_name": "Aron",
        "timestamp": 1654917473
    },
    {
        "content": "<p>I don't expect <code>¬¬something</code> is _definitionally equal_ to <code>something</code>.</p>",
        "id": 285754505,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654917478
    },
    {
        "content": "<p>If <code>p</code> is a literal boolean that will happen. Did it happen with boolean expressions?</p>",
        "id": 285754630,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654917610
    },
    {
        "content": "<p>I don't see how one could have reflexive equality of <code>not not p</code> and <code>p</code> for arbitrary boolean expressions. The definition of <code>not</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>which, due to _inline_, will expand for literals and so simplify. But for expressions it should just inline to a nested match.</p>",
        "id": 285754732,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654917785
    },
    {
        "content": "<p>I guess my lean3 examples had not_not as a simplification tactic because they were working classically.</p>",
        "id": 285754910,
        "sender_full_name": "Aron",
        "timestamp": 1654917966
    },
    {
        "content": "<p>That makes sense. Simplification will do all this expansion.</p>",
        "id": 285754924,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654918002
    },
    {
        "content": "<p>i thought \"automatically\" meant definitional equality.</p>",
        "id": 285754930,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654918034
    },
    {
        "content": "<p>I just checked: <code>simp</code> does work within functions, so you could simply replace your last lines with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n</code></pre></div>",
        "id": 285755007,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654918141
    },
    {
        "content": "<p>Better still, <code>simp [not_exists, not_not] at hallinc</code> does the job.</p>",
        "id": 285755029,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654918191
    },
    {
        "content": "<p>Alright, now I'm having trouble getting And.assoc to work the way it advertises.</p>",
        "id": 285755427,
        "sender_full_name": "Aron",
        "timestamp": 1654918650
    },
    {
        "content": "<p>Apparently it works fine in <code>rw</code>, but not as a direct application.</p>",
        "id": 285755498,
        "sender_full_name": "Aron",
        "timestamp": 1654918727
    },
    {
        "content": "<p>Ignore that, the problem got solved so I don't mind.</p>",
        "id": 285755862,
        "sender_full_name": "Aron",
        "timestamp": 1654919238
    },
    {
        "content": "<p>Alright, I've got another.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"c1\">-- def exunique (p : α → Prop) := ∃ (x : α), (p x ∧ ∀ y, p y → x = y)</span>\n\n<span class=\"c1\">-- syntax \"∃!\" term \",\" term: term</span>\n<span class=\"c1\">-- macro_rules</span>\n<span class=\"c1\">-- | `(∃! $t:term, $p:term) =&gt; `(exunique (fun $t =&gt; $p))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span><span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩:=</span> <span class=\"n\">hex</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- apply Classical.byContradiction; intro hanb</span>\n<span class=\"n\">refine</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">hanb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hanb</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span><span class=\"n\">ham</span><span class=\"o\">⟩:=</span><span class=\"n\">ha</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hbl</span><span class=\"o\">,</span><span class=\"n\">hbm</span><span class=\"o\">⟩:=</span><span class=\"n\">hb</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hanb</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx1</span><span class=\"o\">,</span><span class=\"n\">hx2</span><span class=\"o\">⟩:=</span><span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hl'</span><span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span><span class=\"n\">hbl</span><span class=\"o\">⟩</span>\n<span class=\"k\">have</span> <span class=\"n\">hm'</span><span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">ham</span><span class=\"o\">,</span><span class=\"n\">hbm</span><span class=\"o\">⟩</span>\n<span class=\"k\">have</span> <span class=\"n\">hlm</span><span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">hl'</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">hm'</span><span class=\"o\">)</span>\n<span class=\"c1\">-- hlm hlnm</span>\n<span class=\"n\">contradiction</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">hpnq</span><span class=\"o\">,</span><span class=\"n\">hpnr</span><span class=\"o\">,</span><span class=\"n\">hqnr</span><span class=\"o\">,</span><span class=\"n\">hncol</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i.three</span>\n<span class=\"k\">have</span> <span class=\"n\">hnl</span><span class=\"o\">:=</span> <span class=\"n\">hncol</span> <span class=\"n\">l</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">intro</span> <span class=\"n\">hallinc</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hallinc</span>\n<span class=\"k\">have</span> <span class=\"n\">hl</span><span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">hallinc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hallinc</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hallinc</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"c1\">-- exact hnl (And.assoc hl)</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">And.assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n<span class=\"n\">contradiction</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">another_point</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"o\">:=</span><span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hanb</span><span class=\"o\">,</span><span class=\"n\">hanc</span><span class=\"o\">,</span><span class=\"n\">hbnc</span><span class=\"o\">,</span><span class=\"n\">habc</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.three</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span><span class=\"n\">ne_eq</span><span class=\"o\">]</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- exact hab (Eq.trans (eq_comm.mp (h a)) (h b))</span>\n<span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"k\">have</span> <span class=\"n\">hb</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n<span class=\"k\">have</span> <span class=\"n\">hab</span><span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n<span class=\"n\">exact</span> <span class=\"n\">hanb</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span> <span class=\"n\">another_point</span> <span class=\"n\">p</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">another_point</span> <span class=\"n\">p</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">53</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">point</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">sorryAx</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">sorryAx</span> <span class=\"kt\">Type</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>I'm trying to apply <code>another_point</code> at the bottom line, but it's not typechecking.<br>\nIt's also saying the type involves sorryAx - not sure what that is.</p>",
        "id": 285795889,
        "sender_full_name": "Aron",
        "timestamp": 1654978394
    },
    {
        "content": "<p>If you hover over <code>another_point</code>, it'll show you the type of the theorem.</p>",
        "id": 285797324,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1654980817
    },
    {
        "content": "<p>Yes, it's <code>∀ (line : Type) (inc : sorryAx Type → line → Prop) [i : incidence (sorryAx Type) line inc] (p : sorryAx Type),\n  ∃ q, p ≠ q</code>.</p>",
        "id": 285797721,
        "sender_full_name": "Aron",
        "timestamp": 1654981400
    },
    {
        "content": "<p>So it's expecting a term of type Type and you gave it a term of type point</p>",
        "id": 285797762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654981445
    },
    {
        "content": "<p>Which is exactly what the error says</p>",
        "id": 285797768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654981471
    },
    {
        "content": "<p>Why would it be expecting a term of type <code>Type</code> when I defined the theorem with a term of type <code>point</code>?</p>",
        "id": 285797848,
        "sender_full_name": "Aron",
        "timestamp": 1654981610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">another_point</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"o\">:=</span><span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hanb</span><span class=\"o\">,</span><span class=\"n\">hanc</span><span class=\"o\">,</span><span class=\"n\">hbnc</span><span class=\"o\">,</span><span class=\"n\">habc</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.three</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span><span class=\"n\">ne_eq</span><span class=\"o\">]</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- exact hab (Eq.trans (eq_comm.mp (h a)) (h b))</span>\n<span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"k\">have</span> <span class=\"n\">hb</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n<span class=\"k\">have</span> <span class=\"n\">hab</span><span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n<span class=\"n\">exact</span> <span class=\"n\">hanb</span> <span class=\"n\">hab</span>\n</code></pre></div>",
        "id": 285797852,
        "sender_full_name": "Aron",
        "timestamp": 1654981623
    },
    {
        "content": "<p>These are your <code>variable</code> definitions - the theorem implicitly uses them, so they have been included as parameters. The theorem uses them in the proof; see how you mention <code>i.three</code>.</p>\n<p>If you change your <code>variable</code> declarations to use braces, the parameters will be made implicit and automatically inferred, resulting in the behavior that you expect - if inference succeeds.</p>",
        "id": 285797958,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1654981801
    },
    {
        "content": "<p>Oh, so if I were to keep the variables as is, I would have had to define <code>point</code>, <code>line</code>, and <code>inc</code> in the call to <code>another_point</code>. Makes sense.</p>",
        "id": 285798037,
        "sender_full_name": "Aron",
        "timestamp": 1654981909
    },
    {
        "content": "<p>Tried changing to braces, everything's exploding.</p>",
        "id": 285798093,
        "sender_full_name": "Aron",
        "timestamp": 1654981977
    },
    {
        "content": "<p>Figured out something that works without braces, but I'm not sure how I'd go about condensing it to get the definitions out of the way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">another_point</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"o\">:=</span><span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hanb</span><span class=\"o\">,</span><span class=\"n\">hanc</span><span class=\"o\">,</span><span class=\"n\">hbnc</span><span class=\"o\">,</span><span class=\"n\">habc</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.three</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span><span class=\"n\">ne_eq</span><span class=\"o\">]</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- exact hab (Eq.trans (eq_comm.mp (h a)) (h b))</span>\n<span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"k\">have</span> <span class=\"n\">hb</span><span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n<span class=\"k\">have</span> <span class=\"n\">hab</span><span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">eq_comm.mp</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span>\n<span class=\"n\">exact</span> <span class=\"n\">hanb</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span> <span class=\"n\">another_point</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 285798261,
        "sender_full_name": "Aron",
        "timestamp": 1654982199
    },
    {
        "content": "<p>Yes precisely. I'm not too surprised it's exploding, in my experience changing binder types is always tricky. It helps to get them right on the first try when you already know what you will be able to infer. It's also a limitation of <code>variable</code> that every theorem gets the same binder type.</p>",
        "id": 285798262,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1654982208
    },
    {
        "content": "<p>The rule of thumb is that something can be inferred if it appears in the type of a later argument.<br>\nApplying this rule to your example, we can declare <code>variable {point line : Type}</code> implicit, but leave <code>inc</code> explicit. Then you can use <code>another_point inc p</code> and your file typechecks without issues.</p>",
        "id": 285800125,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1654985167
    },
    {
        "content": "<p>In Lean 3 you can change the binder type of a variable after it's been declared with a line such as <code>variable {line}</code></p>",
        "id": 285800129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654985185
    },
    {
        "content": "<p>that also works in lean 4</p>",
        "id": 285829306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655022623
    }
]