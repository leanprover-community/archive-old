[
    {
        "content": "<p>I don't know if this is the best place to ask this, but I know Lean uses the Perceus algorithm for implementing \"functional-but-in-place\". Perceus, however, is full refcounting, and no tracing. Refcounting has the issue of memory fragmentation and less locality. I wonder if instead, a one-bit refcounting Perceus is possible (the set bit means \"we know this has unique reference\"), to get all the benefit of FBIP with minimum overhead, and rely on a copying GC for the garbage that is not able to be freed by the refcounter, with the added benefit of compactification</p>",
        "id": 298040315,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1662751719
    },
    {
        "content": "<p>The one-bit counter could be pointer tagged I think</p>",
        "id": 298040973,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1662752007
    },
    {
        "content": "<blockquote>\n<p>Refcounting has the issue of memory fragmentation and less locality.  </p>\n</blockquote>\n<p>We have a special allocator too which uses free list sharding. <a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2019/06/mimalloc-tr-v1.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2019/06/mimalloc-tr-v1.pdf</a><br>\nWe believe it addresses these issues.</p>",
        "id": 298041704,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662752309
    },
    {
        "content": "<p>Thanks! I'm gonna read this and see if I understand it</p>",
        "id": 298044908,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1662753702
    },
    {
        "content": "<p>I noticed too that in Perceus mutations can only happen for (saturated) constructors of the same size. Could it be extended to allow mutation of smaller values inside a bigger space? Say, when you pop an array. This would introduce what the GHC people call \"slop\", but I don't know if this would mess up the deallocator</p>",
        "id": 298045865,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1662754064
    },
    {
        "content": "<p>I'm not sure if that makes much sense for constant-sized types. But the Lean runtime does that for arrays, which have a size and capacity.</p>",
        "id": 298047304,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662754680
    },
    {
        "content": "<p>The idea would be to immediately reclaim a memory space, but this, of course, introduces fragmentation, or slop. This might be an overoptimization though, it might be better to just allocate a new space for the new value</p>",
        "id": 298047705,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1662754856
    }
]