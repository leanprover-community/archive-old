[
    {
        "content": "<p>I'd like to reason with infinite program traces in the style of <a href=\"https://github.com/DeepSpec/InteractionTrees/find/master\">interaction trees</a>. I see that we have a <code>coinductive</code> keyword, but I'm not sure how to actually declare a coinductive type :)</p>",
        "id": 274618996,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646779693
    },
    {
        "content": "<p>Lean does not support coinduction natively. It has to be defined as a library which is something I've been working on</p>",
        "id": 274639857,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1646796902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and I wrote a paper about it so we know what we want as a foundation but the implementation has taken longer than expected</p>",
        "id": 274640074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1646797184
    },
    {
        "content": "<p>Jeremy tells me that a student of <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> is working on this</p>",
        "id": 274640257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646797342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> has marked this topic as resolved.</p>",
        "id": 274647199,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646806050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> has marked this topic as unresolved.</p>",
        "id": 274647248,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646806084
    },
    {
        "content": "<p>I have an MSc student who has started looking into developing a package based on QPFs -- we just had our first meeting with Jeremy on Monday. Here's a very good student, but I doubt he will have the time to finish anything by the time he has to hand in his MSc thesis, so it's more a long-term project if anything.</p>",
        "id": 274653972,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1646813110
    },
    {
        "content": "<p>What's QPF?</p>",
        "id": 274682186,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646830235
    },
    {
        "content": "<p><a href=\"https://www.andrew.cmu.edu/user/avigad/Talks/qpf.pdf\">https://www.andrew.cmu.edu/user/avigad/Talks/qpf.pdf</a> presumably</p>",
        "id": 274682483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646830414
    },
    {
        "content": "<p>Conference paper here: <a href=\"https://drops.dagstuhl.de/opus/volltexte/2019/11061/\">https://drops.dagstuhl.de/opus/volltexte/2019/11061/</a>. Isabelle has an excellent datatype package that uses a different though more-or-less equivalent construction; see here and references: <a href=\"https://arxiv.org/pdf/2104.05348.pdf\">https://arxiv.org/pdf/2104.05348.pdf</a>.</p>",
        "id": 274698054,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1646837470
    },
    {
        "content": "<p>I was under the impression that quotients in lean are not computable, and hence any coinductive code written using QPFs would not be extractable into programs? or am I mistaken? :)</p>",
        "id": 274811090,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646905431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> That is false on both counts: Quotients in lean are computable, but the code generated for QPFs would not be making use of this anyway and would use a different reduction mechanism than the one the kernel implements (which would inspect the QPF construction itself which is not what we want).</p>",
        "id": 274862275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646930853
    },
    {
        "content": "<p>Thanks! I didn't know either of those facts</p>",
        "id": 274870636,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646934449
    },
    {
        "content": "<p>I'm interested in defining coinductive types too ! Technically, I'd like to work with a variant of <code>streams</code><br>\nIs there a wip implementation of <a href=\"https://drops.dagstuhl.de/opus/volltexte/2019/11061/pdf/LIPIcs-ITP-2019-6.pdf\">https://drops.dagstuhl.de/opus/volltexte/2019/11061/pdf/LIPIcs-ITP-2019-6.pdf</a> publicly available ? (I'd understand if people were working on this but not willing to release their work for now)<br>\nWould it be possible to define some inductive datatypes \"by hand\", as a workaround for the lack of meta engineering while waiting for a proper implementation of the paper ? I mean, is it reasonably feasible, or the cost of manipulating low-level data is so high that I might as well spend this time writing an implementation ?</p>\n<p>By the way, I have some time to spend on lean4, and I'm willing to help with defining coinductive data types :)</p>",
        "id": 277722266,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1649074861
    },
    {
        "content": "<p>There is a working example with a simpler model (infinite sequence of agreeing finite structures) here: <a href=\"https://github.com/leanprover/lean/wiki/Coinductive-Types\">https://github.com/leanprover/lean/wiki/Coinductive-Types</a><br>\n(But my understanding is that QPF was considered after that and superseded it)</p>",
        "id": 277723694,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649075626
    },
    {
        "content": "<p>This page is very interesting, thanks !<br>\nIt seems to answer one of my questions: it is possible to define coinductive data types \"by hand\", but it's a lot of work, all the more since I actually need reflexive coinductive types...</p>",
        "id": 277726082,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1649076800
    },
    {
        "content": "<p>I'm the student Jasmin mentioned! My work so far can be seen at <a href=\"https://github.com/alexkeizer/qpf4\">https://github.com/alexkeizer/qpf4</a>. It is very WIP, I'm still working on porting the formalizations of QPFs to lean4 so you cannot write stuff by hand using it.</p>",
        "id": 277726288,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649076897
    },
    {
        "content": "<p>I believe that goal was always to have coinductive definitions compile down to a construction like this or QPF. The Lean4 kernel is purposefully kept small so you won't have native support like in Coq.</p>",
        "id": 277726322,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649076916
    },
    {
        "content": "<p>Ah, I misremembered. I've actually gotten most of it to compile, so you could hand-write stuff now, but it uses <code>sorry</code> very liberally, so probably wouldn't recommend doing so. If anyone wants to contribute, feel free to try to provide proofs for some of those sorrys!</p>",
        "id": 277727428,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649077379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385405\">Julien Marquet</span> <a href=\"#narrow/stream/270676-lean4/topic/Coinduction.3F/near/277722266\">said</a>:</p>\n<blockquote>\n<p>Technically, I'd like to work with a variant of <code>streams</code>.</p>\n</blockquote>\n<p>If you only need streams, <code>stream A</code> is isomorphic to <code>Nat -&gt; A</code>. Coinductive types only become interesting once you have a non-degenerate tree structure.</p>",
        "id": 277858876,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1649156170
    }
]