[
    {
        "content": "<p>I was surprised to find <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Algebra.2EGroup.2EExt/near/313868751\">while helping with a mathlib port PR</a> that <code>(_)</code> no longer seems to mean the same thing as <code>_</code> when used in places where typeclass arguments are expected. I assume this is intentional; but it's hard to search for! Can someone point me to the relevant documentation if any exists?</p>",
        "id": 313936557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670237815
    },
    {
        "content": "<p>I don't think it's an intentional feature for this specific use case but a combination of other aspects. Do you have an MWE?</p>",
        "id": 313942730,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670239928
    },
    {
        "content": "<p>Sure, here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying function -/</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>  <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">id</span>  <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">id</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 313946801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670241450
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 313946838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670241467
    },
    {
        "content": "<p>Oh my, ambiguous instances in the context? But yes, inside <code>@...</code> there is a syntactic distinction between instance arguments that are given as <code>_</code>, which are inferred by typeclass resolution, and any other term including <code>(_)</code>, which are synthesized by regular elaboration, in this case unification <a href=\"https://github.com/leanprover/lean4/blob/5286c2b5aa30403cbf75f9e67d406edbfca12b67/src/Lean/Elab/App.lean#L622-L630\">https://github.com/leanprover/lean4/blob/5286c2b5aa30403cbf75f9e67d406edbfca12b67/src/Lean/Elab/App.lean#L622-L630</a></p>",
        "id": 313948468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670242063
    },
    {
        "content": "<p>Could that syntactic distinction be represented in the hover text?</p>",
        "id": 313948575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670242088
    },
    {
        "content": "<p>Right now hovering over the <code>_</code> says \"A placeholder term, to be synthesized by unification.\"; but it sounds like that's wrong in this case, and it's actually inferred by TC search?</p>",
        "id": 313948691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670242131
    },
    {
        "content": "<p>Relatedly; the <code>{toFun := </code> spelling works fine in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>  <span class=\"c1\">-- ok (fails in Lean 4, ???)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">id</span>  <span class=\"c1\">-- fails in both</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">id</span>  <span class=\"c1\">-- fails (ok in Lean 4, answered above)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">id</span>  <span class=\"c1\">-- ok in both</span>\n</code></pre></div>\n<p>Is <code>{ toFun := id }</code> no longer working a deliberate choice?</p>",
        "id": 313949033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670242257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/313948691\">said</a>:</p>\n<blockquote>\n<p>Right now hovering over the <code>_</code> says \"A placeholder term, to be synthesized by unification.\"; but it sounds like that's wrong in this case, and it's actually inferred by TC search?</p>\n</blockquote>\n<p>Ah, that's true. It comes back to the discussion between <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and me whether the hover text should be taken from the parser or the elaborator, haha. Indeed only the parenthesized <code>_</code> has an elaborator attached.</p>",
        "id": 313949564,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670242348
    },
    {
        "content": "<p>Not your question, but one difference I can explain: Lean 3 was literally unable to differentiate between <code>(_)</code> and <code>_</code> because it worked on an AST. In Lean 4 we could implement either semantics.</p>",
        "id": 313949922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670242475
    },
    {
        "content": "<p>as to <code>{...}</code>, I would say it makes it more consistent with regular application. I don't think it was a conscious breakage choice though.</p>",
        "id": 313950876,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670242831
    },
    {
        "content": "<p>I think the key difference is that <code>{...}</code> (almost?) always knows the destination type in advance, so there will almost never be a situation where unification can't make progress and TC search is needed</p>",
        "id": 313951470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670243062
    },
    {
        "content": "<p>It's particularly bad for nested types like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom\">docs#ring_hom</a> with complicated inheritance heirarchies which can't be written as <code>@RingHom.mk R R (id _) _ id _ _ _ _</code> like they can in Lean3 with old structures, but have to be written as lots of painful nested applications of <code>MonoidHom.mk</code>, <code>OneHom.mk</code>, etc</p>",
        "id": 313951663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670243128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/313951470\">said</a>:</p>\n<blockquote>\n<p>I think the key difference is that <code>{...}</code> (almost?) always knows the destination type in advance</p>\n</blockquote>\n<p>Right, but there can still be constructor instance arguments that cannot be inferred from the expected type. Lean 4 does not differentiate between those cases.</p>",
        "id": 313952899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670243550
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has thought more about unification vs. TC inference, we should probably wait for him</p>",
        "id": 313952985,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670243598
    },
    {
        "content": "<p>Any thoughts, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>?</p>",
        "id": 314577074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670455089
    },
    {
        "content": "<p>Are we really doing this a lot?  (I assume this is what the thread is about.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MyHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Having different instances for the same type is going to break a lot.  This is not the only place where we assume that we can just resynthesize them.</p>",
        "id": 314579429,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670456451
    },
    {
        "content": "<p>My guess is that this might come up in topology or measure theory, where we switch between having a canonical measure / topological space found via typeclass search, and having two different such objects on the same type</p>",
        "id": 314581194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670457600
    },
    {
        "content": "<p>Right now we're seeing it in things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.ext\">docs#monoid.ext</a> which are certainly the exception and not the rule</p>",
        "id": 314581270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670457620
    },
    {
        "content": "<p>I think any declaration you want to make that has two competing typeclasses, you should expect to have to write <code>@</code> on every single function, and give every implicit by hand. Perhaps we should even have a linter for that. :-)</p>",
        "id": 314583235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670458889
    },
    {
        "content": "<p>Can we come up with a case to justify the new behavior that fails in Lean 3 but succeeds in Lean 4?</p>",
        "id": 314583743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670459236
    },
    {
        "content": "<blockquote>\n<p>I think any declaration you want to make that has two competing typeclasses, you should expect to have to write @ on every single function</p>\n</blockquote>\n<p>In this case though you already said \"I'm going to construct a term of this weird <code>@MyHom M M m₁ m₂</code> type\". It's very annoying that lean complains \"oh it looks like you used <code>@MyHom.mk M M m₁ m₂</code>, but I found <code>@MyHom.mk M M m₂ m₂</code> even though that doesn't typecheck here, so I'm going to error\"</p>",
        "id": 314584041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670459418
    },
    {
        "content": "<p>I think my claim is that typeclass arguments in constructor indices should be allowed to unify even if that disagrees with the result due to typeclass search, because there's no actual ambiguity present. I'd be happy to be proven wrong about that.</p>",
        "id": 314584150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670459465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/314583235\">said</a>:</p>\n<blockquote>\n<p>I think any declaration you want to make that has two competing typeclasses, you should expect to have to write <code>@</code> on every single function, and give every implicit by hand. Perhaps we should even have a linter for that. :-)</p>\n</blockquote>\n<p>This might be painful for e.g. <code>OrderDual</code>, <code>MulOpposite</code>.</p>",
        "id": 314586601,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670461228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/314583235\">said</a>:</p>\n<blockquote>\n<p>I think any declaration you want to make that has two competing typeclasses, you should expect to have to write <code>@</code> on every single function, and give every implicit by hand. Perhaps we should even have a linter for that. :-)</p>\n</blockquote>\n<p>Actually, what would really be nice is if there were a way to refer to typeclass arguments by name in the same way that you can provide values of implicit arguments without <code>@</code> by using their names. The only question would be: what is the name?</p>",
        "id": 314702469,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670513651
    },
    {
        "content": "<p>I've previously suggested <code>toString (‹ToString _› := ...)</code>, though I don't know how to find that conversation...</p>",
        "id": 314703237,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670513887
    },
    {
        "content": "<p>I suggested a mechanism for this: instance implicits should, instead of getting the default name of hygienic \"inst\", get an unhygienic name which is the class name with initial downcase</p>",
        "id": 314703269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513897
    },
    {
        "content": "<p>but that name should only be usable after the function is closed, not while it's in the local context</p>",
        "id": 314703451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513960
    },
    {
        "content": "<p>That wouldn't help much in my example since I'm not calling a function in the first place, but trying to use <code>{ field := val }</code> notation</p>",
        "id": 314703542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670513995
    },
    {
        "content": "<p>It also seems like it might be of limited (but non-zero) value. For example, it may frequently be the case that there are two <code>topology</code> instances in the declaration (e.g., for a continuous function between two topological spaces), then how would either proposal allow you to change one but not the other? Perhaps the answer is: \"then you have to use <code>@</code>\", which is understandable, but it would be convenient if there were another way.</p>",
        "id": 314704263,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670514192
    },
    {
        "content": "<p>well this is only the default, you can always name them manually</p>",
        "id": 314704538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514267
    },
    {
        "content": "<p>the real thing it's trying to battle is the many many functions that use unnamed typeclass args (they are even linted against if you use names!) which make later attempts to use <code>(a := _)</code> notation impossible</p>",
        "id": 314704683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514316
    },
    {
        "content": "<p>Right, but when you're calling declarations you wouldn't be able to name the variables (and likely you wouldn't want to in the original declaration).</p>",
        "id": 314704712,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670514323
    },
    {
        "content": "<p>You can though?</p>",
        "id": 314704773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>parameter names are observable in lean 4</p>",
        "id": 314704964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514392
    },
    {
        "content": "<p>That's not what I mean, one moment.</p>",
        "id": 314705033,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670514417
    },
    {
        "content": "<p>Actually, I think you said it already \"the many many functions that use unnamed typeclass args\"</p>",
        "id": 314705354,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670514509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"c1\">-- this should remain an error</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bar1</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar2</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- I want this to work too</span>\n</code></pre></div>",
        "id": 314705427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514528
    },
    {
        "content": "<p>Yes, making <code>bar2</code> work is exactly what I mean. Perhaps I wasn't clear before.</p>",
        "id": 314705624,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670514587
    },
    {
        "content": "<p>It's also possible for names to be disambiguated, e.g. <code>topology</code> and <code>topology_1</code>, although I don't love it and would probably start naming stuff explicitly if it came up</p>",
        "id": 314705913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514681
    },
    {
        "content": "<p>This would also be nice for <code>Ord</code> and <code>BEq</code> and such, where you occasionally want to override the default order.</p>",
        "id": 314706372,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670514806
    },
    {
        "content": "<p>Right. If we don't do something like this, I think we will need to change the recommended practice for libraries like Std to use named instances everywhere and it seems like boilerplate</p>",
        "id": 314706890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/314704263\">said</a>:</p>\n<blockquote>\n<p>For example, it may frequently be the case that there are two <code>topology</code> instances in the declaration (e.g., for a continuous function between two topological spaces), then how would either proposal allow you to change one but not the other?</p>\n</blockquote>\n<p>If the two instances differ in their types, you can put those inside the <code>‹_›</code>. The lookup logic is supposed to be the same as for the term syntax.</p>",
        "id": 314710424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670515865
    },
    {
        "content": "<p>Can we maybe have a compromise here where <code>@!MyHom.mk id</code> is short for <code>@MyHom.mk (_) (_) (_) (_) id</code>, that is \"invoke using unification to solve typeclass arguments\"</p>",
        "id": 314919783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670599681
    },
    {
        "content": "<p>This came up again in a different context <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314917223\">here</a></p>",
        "id": 314919912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670599716
    }
]