[
    {
        "content": "<p>The following code produces an error on the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_field</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_row</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">map_field</span><span class=\"bp\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span> <span class=\"c1\">-- invalid parser 'map_row_', invalid empty symbol</span>\n</code></pre></div>\n<p>Without the <code>\"\\n\"</code> it doesn't produce an error.<br>\nI'm trying to define the parser in such a way that it parses one or more instances of a map field followed by a newline.<br>\nIs there some named parser for newlines, or how can I achieve this behaviour?</p>",
        "id": 264917426,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639512270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">map_field</span><span class=\"bp\">+</span> <span class=\"n\">linebreak</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n</code></pre></div>",
        "id": 264943209,
        "sender_full_name": "Mac",
        "timestamp": 1639524021
    },
    {
        "content": "<p>Is there a list of these kinds of general purpose parsers somewhere? I've seen things like <code>colGt</code> before and just have no clue what they are <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 264976909,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639556375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Ctrl+F/grep in the lean4 repo is your friend <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> There is also a big list of the registered parser aliases in [<code>Lean.Parser</code>(<a href=\"https://github.com/leanprover/lean4/blob/efa2ded2249ed53ac8b96d3a70cf5e8329d53a45/src/Lean/Parser.lean#L21-L43\">https://github.com/leanprover/lean4/blob/efa2ded2249ed53ac8b96d3a70cf5e8329d53a45/src/Lean/Parser.lean#L21-L43</a>) and you can look in folder itself for the listings of all the various parsers the Lean core uses.</p>\n<p>I don't think there is currently any pretty documentation of this kind of stuff, though.</p>",
        "id": 265020460,
        "sender_full_name": "Mac",
        "timestamp": 1639579896
    },
    {
        "content": "<p>Does <code>colGt</code> stand for \"column greater than\"? My guess is that it's used for indentation based syntax, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myIntro</span><span class=\"o\">)</span> <span class=\"s2\">\"myIntro \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">myIntro</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myIntro</span>\n    <span class=\"n\">h</span>\n</code></pre></div>\n<p>But this gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myIntro</span>\n <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 265021379,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639580364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  Thanks! I'm guessing I'd have to grep for <code>declare_syntax_cat</code> right?</p>",
        "id": 265026014,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639582199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> no, I was suggesting you to grep for specific parsers (like <code>colGt</code>). If you just want to find what parsers are available, you should just read through the <code>Lean/Parser</code> folder. Every file in there defines tons of different parsers (the most basic ones being defined in <code>Lean.Parser.Basic</code>).</p>",
        "id": 265026448,
        "sender_full_name": "Mac",
        "timestamp": 1639582335
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266275399,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640711372
    }
]