[
    {
        "content": "<p>I'm fiddling around with typeclasses in Lean 4, and recently (via <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/koenig22masterarbeit.pdf\">Lars König's very cool MS thesis</a> learned about Lean 4's support for universal quantification in typeclass constraints. I'm fiddling with this, and I've found a case where I suspect there's a way to make something work, but I'm not having any luck getting it to work.</p>\n<p>As a simple example, consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">class</span> <span class=\"n\">isNum</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">odd</span> <span class=\"n\">i</span>\n  <span class=\"kd\">class</span> <span class=\"n\">hasP</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">hasNum</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isNum</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">hasP</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">odd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span>\n            <span class=\"n\">apply</span> <span class=\"n\">isNum.p</span>\n</code></pre></div>\n<p>Here the universal version of <code>isNum</code> is automatically found and instantiated in tactic mode when using <code>isNum.p</code>.  But this seems to only work because the <code>i</code> from the the type of <code>hasP.p</code> is in the tactic context explicitly. If I try a slight variation on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">class</span> <span class=\"n\">proveUniv</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">hasUniv</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isNum</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">proveUniv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">odd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">isNum.p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:=</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"c1\">-- &lt;-- Doesn't check</span>\n</code></pre></div>\n<p>I cannot get anything I've tried for this last instance body to work. Because the universal typeclass constraint is after the colon, I can't name it and refer back to it (I can name it, but I can't use the name in the term given for <code>hasUniv.p</code>). Moving it before the colon (i.e., <code>instance hasUniv [inst:∀ i, isNum i] : provUniv ...</code>) results in a complaint that there is no forward dependency on <code>i</code>. Attempting to stick a <code>by</code> tactic block inside the <code>∀ (y:Nat), ...</code> body doesn't seem to get anything working.</p>\n<p>It seems the issue is trying to use this universal instance under a new binder introduced in the typeclass member definition. Is this expected to work via some means I have yet to figure out? Or is there a reason this shouldn't/can't work (either an engineering reason or a theoretical reason)?</p>",
        "id": 303854934,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1665672679
    },
    {
        "content": "<p>Do you have a self-contained version? <code>even</code> and <code>odd</code> are missing, and if I add them I get \"type expected\" at the last instance, which makes sense because <code>isNum.p</code> is a proof, while a <code>Type</code> is expected at that position. I can't reproduce the forward dependency error either.</p>",
        "id": 303864011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665675221
    },
    {
        "content": "<p>oops, sorry, I had forgotten I'd defined these rather than importing them</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 303867763,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1665676285
    },
    {
        "content": "<p>I had forgotten I'd hit this with booleans, but this variant that sticks to <code>Prop</code> has the same symptoms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">fakeEven</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n  <span class=\"kd\">def</span> <span class=\"n\">fakeOdd</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">False</span>\n  <span class=\"kd\">class</span> <span class=\"n\">isNum</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fakeEven</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">fakeOdd</span> <span class=\"n\">i</span>\n  <span class=\"kd\">class</span> <span class=\"n\">hasP</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">hasNum</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isNum</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">hasP</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fakeEven</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">fakeOdd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span>\n            <span class=\"n\">apply</span> <span class=\"n\">isNum.p</span> <span class=\"c1\">-- &lt;-- works</span>\n  <span class=\"kd\">class</span> <span class=\"n\">proveUniv</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">hasUniv</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isNum</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">proveUniv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fakeEven</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">fakeOdd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">isNum.p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:=</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"c1\">-- &lt;-- fails</span>\n</code></pre></div>",
        "id": 303868482,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1665676475
    },
    {
        "content": "<p>...and curiously I can no longer reproduce the complaint about no forward dependencies either</p>",
        "id": 303868918,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1665676607
    },
    {
        "content": "<p>I still get only \"type expected\" with that. I suspect you meant <code>p : Prop</code> in <code>proveUniv</code>, but even then <code>isNum.p</code> still isn't a <code>Prop</code> regardless of typeclass resolution.</p>",
        "id": 303871424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665677237
    },
    {
        "content": "<p>ah, you're right, that's the heart of the issue here... I may have mis-distilled my minimal example</p>",
        "id": 303884290,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1665680882
    }
]