[
    {
        "content": "<p>Sorry I don't have an MWE for this, because the small examples I tried worked.<br>\nHopefully the goal state is enough to explain my problem.</p>\n<p>I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">hσ</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">p₁.toRaw</span> <span class=\"n\">p₂.toRaw</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">p₁.toRaw</span> <span class=\"bp\">=</span> <span class=\"n\">p.toRaw</span> <span class=\"bp\">→</span> <span class=\"n\">p₁</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'm trying to use hypothesis <code>hi</code> with <code>p₂</code>. <br>\nBy <code>h</code> I know that <code>p₁.toRaw = p₂.toRaw</code> should hold in some sense, but I don't know how to obtain a proof of that.</p>\n<hr>\n<p>Plainly using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_heq</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_of_heq</span> <span class=\"n\">h</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"n\">p₁.toRaw</span> <span class=\"n\">p₂.toRaw</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.23467</span> <span class=\"bp\">?</span><span class=\"n\">m.23468</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<hr>\n<p>Rewriting <code>hσ</code> on <code>p₂</code> produces this goal state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">p₂</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">hσ</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">p₁.toRaw</span> <span class=\"bp\">=</span> <span class=\"n\">p.toRaw</span> <span class=\"bp\">→</span> <span class=\"n\">p₁</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">p₁.toRaw</span> <span class=\"n\">p₂</span><span class=\"bp\">✝.</span><span class=\"n\">toRaw</span>\n</code></pre></div>\n<p>Thus, I can't use <code>h</code> anymore, as it is about <code>p₂✝</code> instead of <code>p₂</code>.</p>\n<hr>\n<p>Am I doing something stupid / missing something obvious here?<br>\nI feel like the information is there, but I can't use it.</p>",
        "id": 260507277,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1636196995
    },
    {
        "content": "<p>I think the common consensus is to avoid het equality wherever possible. Though, does <code>cases hσ</code> help anything in this case?</p>",
        "id": 260507729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636197702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/HEq/near/260507729\">said</a>:</p>\n<blockquote>\n<p>I think the common consensus is to avoid het equality wherever possible. Though, does <code>cases hσ</code> help anything in this case?</p>\n</blockquote>\n<p>Yeah, the <code>HEq</code> arose from using <code>simp [toRaw]</code> on <code>IDPath.toRaw &lt;path 1&gt; = IDPath.toRaw &lt;path 2&gt;</code>.<br>\nThe <code>cases hσ</code> doesn't work.<br>\nI'll try to change the definition of <code>IDPath</code>.</p>",
        "id": 260509783,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1636200602
    },
    {
        "content": "<p>What are <code>σ₁</code> and <code>σ₂</code>? Variables?</p>",
        "id": 260605155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636332226
    },
    {
        "content": "<p>If neither is a variable then you can still do this by generalizing but it is just kicking the can down the road... since you will only be able to deduce <code>HEq p₁ p₂</code></p>",
        "id": 260605287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636332379
    },
    {
        "content": "<p>But yeah, usually better to find another approach even if it is technically possible to plow ahead</p>",
        "id": 260605643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636332924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/HEq/near/260605155\">said</a>:</p>\n<blockquote>\n<p>What are <code>σ₁</code> and <code>σ₂</code>? Variables?</p>\n</blockquote>\n<p>I'm not exactly sure how to answer that, so perhaps for some context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cmp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rtr</span> <span class=\"bp\">|</span> <span class=\"n\">rcn</span> <span class=\"bp\">|</span> <span class=\"n\">prt</span> <span class=\"bp\">|</span> <span class=\"n\">stv</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Raw.Reactor</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Reactor</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">...</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Raw.IDPath</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Cmp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rtr</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ.nest</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.rtr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rcn</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ.rcns</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.rcn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prt</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.ports.ids</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.prt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stv</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.state.ids</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.stv</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nest</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">σ'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">IDPath</span> <span class=\"n\">σ'</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">σ.nest</span> <span class=\"n\">i'</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IDPath</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Cmp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rtr</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.nest.ids</span>  <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.rtr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rcn</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.rcns.ids</span>  <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.rcn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prt</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.ports.ids</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.prt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stv</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">σ.state.ids</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">Cmp.stv</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nest</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">IDPath</span> <span class=\"n\">σ'</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">σ.nest</span> <span class=\"n\">i'</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">IDPath.toRaw</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">cmp</span> <span class=\"o\">:</span> <span class=\"n\">Cmp</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Raw.IDPath</span> <span class=\"n\">σ.raw</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cmp.prt</span><span class=\"o\">,</span> <span class=\"n\">IDPath.prt</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Raw.IDPath.prt</span> <span class=\"n\">σ.raw</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cmp.stv</span><span class=\"o\">,</span> <span class=\"n\">IDPath.stv</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Raw.IDPath.stv</span> <span class=\"n\">σ.raw</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cmp.rcn</span><span class=\"o\">,</span> <span class=\"n\">IDPath.rcn</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Raw.IDPath.rcn</span> <span class=\"n\">σ.raw</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"o\">((</span><span class=\"n\">rcns_rawEquiv</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eqIDs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cmp.rtr</span><span class=\"o\">,</span> <span class=\"n\">IDPath.rtr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Raw.IDPath.rtr</span> <span class=\"n\">σ.raw</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"o\">((</span><span class=\"n\">nest_rawEquiv</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eqIDs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cmp</span><span class=\"o\">,</span> <span class=\"n\">IDPath.nest</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i'</span> <span class=\"n\">p</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Raw.IDPath.nest</span> <span class=\"n\">σ.raw</span> <span class=\"n\">cmp</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">toRaw</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nest_rawEquiv'</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">IDPath.eq_if_toRaw_eq</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">cmp</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">IDPath</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">cmp</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p₁.toRaw</span> <span class=\"bp\">=</span> <span class=\"n\">p₂.toRaw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">=</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p₁</span>\n  <span class=\"n\">case</span> <span class=\"n\">nest</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">cmp</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">p</span> <span class=\"n\">hn</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p₂</span>\n    <span class=\"n\">case</span> <span class=\"n\">nest</span> <span class=\"n\">σ'</span> <span class=\"n\">i'</span> <span class=\"n\">hn'</span> <span class=\"n\">p'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">cmp</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toRaw</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"n\">hσ</span> <span class=\"o\">:</span> <span class=\"n\">σ₂</span> <span class=\"bp\">=</span> <span class=\"n\">σ'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h.left</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toRaw</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">p₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toRaw</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n</code></pre></div>\n<hr>\n<p>So <code>HEq p₁ p₂</code> would be perfect, as it would allow me to finish the proof.</p>",
        "id": 260660479,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1636380319
    },
    {
        "content": "<p>Well it looks like they are variables. In Lean 3 I would use <code>subst hσ</code>, maybe it will work the same way in Lean 4?</p>",
        "id": 260663662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636381780
    }
]