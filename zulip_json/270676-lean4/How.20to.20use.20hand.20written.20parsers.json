[
    {
        "content": "<p>Could someone explain how I should finish this example? I get errors about missing formatters and pretty printers but I haven't figured out what to write to fix the error. I'm fine with stubbing that stuff out, I just want a custom parser for now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evenNumLit</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">initStackSz</span> <span class=\"o\">:=</span> <span class=\"n\">s.stackSize</span>\n    <span class=\"k\">let</span> <span class=\"n\">iniPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">numLitFn</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n    <span class=\"k\">if</span> <span class=\"n\">s.hasError</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n      <span class=\"k\">match</span> <span class=\"n\">s.stxStack.back.isNatLit</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n    <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s.mkErrorAt</span> <span class=\"s2\">\"even numeral\"</span> <span class=\"n\">iniPos</span> <span class=\"n\">initStackSz</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">numLit.info</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">evenTerm</span><span class=\"o\">)</span> <span class=\"s2\">\"even \"</span> <span class=\"n\">evenNumLit</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span> <span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 245757617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626128380
    },
    {
        "content": "<p>The following between <code>def</code> and <code>syntax</code> should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"c1\">-- fully qualified names because the attribute forgets to check namespaces I guess</span>\n<span class=\"kd\">@[combinatorFormatter Lean.Parser.evenNumLit]</span> <span class=\"kd\">def</span> <span class=\"n\">evenNumLit.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinatorParenthesizer Lean.Parser.evenNumLit]</span> <span class=\"kd\">def</span> <span class=\"n\">evenNumLit.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 245758393,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626128951
    },
    {
        "content": "<p>Yay, a calc parser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">calcLHS</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">symbolFn</span> <span class=\"s2\">\"...\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n    <span class=\"k\">if</span> <span class=\"n\">s.hasError</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">tables</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getCategory</span> <span class=\"o\">(</span><span class=\"n\">parserExtension.getState</span> <span class=\"n\">c.env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">categories</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">tables</span>\n    <span class=\"n\">trailingLoop</span> <span class=\"n\">tables</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"...\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">info</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Elab.Term</span>\n\n<span class=\"kd\">@[combinatorFormatter Lean.Parser.calcLHS]</span> <span class=\"kd\">def</span> <span class=\"n\">calcLHS.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinatorParenthesizer Lean.Parser.calcLHS]</span> <span class=\"kd\">def</span> <span class=\"n\">calcLHS.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">calcTerm</span><span class=\"o\">)</span> <span class=\"s2\">\"calc \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">calcLHS</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[macro Lean.Parser.calcTerm]</span> <span class=\"kd\">def</span> <span class=\"n\">expandCalc</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">calc</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 245760023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626130285
    },
    {
        "content": "<p>Now I wonder if it would be more Lean 4-y to replace <code>...</code> with whitespace sensitivity <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> ...</p>",
        "id": 245786021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626159973
    },
    {
        "content": "<p>I thought about it but that is going to cause some strange indentation, I think</p>",
        "id": 245889824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626210806
    },
    {
        "content": "<p>calc blocks are hard to align because you usually want the binops to line up, which means you have to either indent a lot or put the first line LHS on another line</p>",
        "id": 245890240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626210966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245890240\">said</a>:</p>\n<blockquote>\n<p>put the first line LHS on another line</p>\n</blockquote>\n<p>Yeah, my preferred style for this has always been</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span>\n  <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>i.e. indent the binops on the next line</p>",
        "id": 245906012,
        "sender_full_name": "Mac",
        "timestamp": 1626222125
    },
    {
        "content": "<p>The use of colon here is also weird. Maybe <code>=&gt;</code> is more lean 4-ish?</p>",
        "id": 245907956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626224257
    },
    {
        "content": "<p>But I think that actually implementing this via whitespace sensitivity will hit the same issue that the <code>- tac</code> block notation had: binops currently don't check indentation, and this particular situation in calc is bad because we're putting a <code>= term</code> immediately after an ambiguously ended <code>term \\n</code></p>",
        "id": 245908133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626224422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245907956\">said</a>:</p>\n<blockquote>\n<p>The use of colon here is also weird. Maybe <code>=&gt;</code> is more lean 4-ish?</p>\n</blockquote>\n<p>Other reasonable options would be <code>:=</code> or <code>from</code> or <code>by</code> (in analogy to <code>have</code>).</p>",
        "id": 245930464,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626249782
    },
    {
        "content": "<p>I hope this was a joke by Mario. What's the issue with <code>:</code>?</p>",
        "id": 245930503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626249813
    },
    {
        "content": "<p>By the way, didn't we have an agreement that the <code>=&gt;</code> was only for programming and we would replace it in the math parts of mathlib?</p>",
        "id": 245930580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626249862
    },
    {
        "content": "<p>Lean usually uses <code>:</code> to mean that the type of the left side is the right side, but in <code>calc</code> the meaning is flipped: the right side is a proof of the type which is written on the left</p>",
        "id": 245930621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626249913
    },
    {
        "content": "<p>I don't think there is any risk of confusion here. But using <code>by</code> or <code>from</code> would be ok as well.</p>",
        "id": 245930768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250012
    },
    {
        "content": "<p>Re: less <code>=&gt;</code>, I still don't know what to do about the style guide for lambdas in proofs. <code>λ x =&gt; pf</code> just looks weird to me</p>",
        "id": 245930794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250035
    },
    {
        "content": "<p>I think almost everything would look good compared to using <code>=&gt;</code> to mean anything but <code>implies</code>.</p>",
        "id": 245930800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250040
    },
    {
        "content": "<p>in mathlib4 I've been using <code>fun x =&gt; pf</code> but I'm not super happy about it</p>",
        "id": 245930828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250063
    },
    {
        "content": "<p>In the math part of mathlib I think there is a huge consensus that we simply don't want to use <code>=&gt;</code> at all.</p>",
        "id": 245930893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250099
    },
    {
        "content": "<p>It also shows up in <code>match</code>, <code>induction</code> , <code>cases</code>, ...</p>",
        "id": 245930925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250131
    },
    {
        "content": "<p>We could use a weird symbol if computer scientists really can't stand seeing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>, but not something that is clearly the ascii-art version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span>.</p>",
        "id": 245930949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250161
    },
    {
        "content": "<p>I can't imagine not seeing it on a majority of lines even in the math part of mathlib the way lean 4 syntax is currently designed</p>",
        "id": 245930967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245930925\">said</a>:</p>\n<blockquote>\n<p>It also shows up in <code>match</code>, <code>induction</code> , <code>cases</code>, ...</p>\n</blockquote>\n<p>But this is core Lean. In mathlib 4 we can change that, right?</p>",
        "id": 245930988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250194
    },
    {
        "content": "<p>sure, propose away</p>",
        "id": 245931012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250203
    },
    {
        "content": "<p>I don't know what mathlib 4 style is yet</p>",
        "id": 245931060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245930464\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245907956\">said</a>:</p>\n<blockquote>\n<p>The use of colon here is also weird. Maybe <code>=&gt;</code> is more lean 4-ish?</p>\n</blockquote>\n<p>Other reasonable options would be <code>:=</code> or <code>from</code> or <code>by</code> (in analogy to <code>have</code>).</p>\n</blockquote>\n<p>Does <code>by</code> actually work here? I would think that <code>expr by expr</code> would be parsed as an expression, an application <code>expr (by expr)</code></p>",
        "id": 245931186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250338
    },
    {
        "content": "<p>Really, any weird symbol you can't recognize in the unicode table would be better than using a symbol which is well-known to have a different meaning. But of course the obvious candidate is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span></p>",
        "id": 245931188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250339
    },
    {
        "content": "<p>I considered using <code>⇒</code> as a unicode alternative for <code>=&gt;</code>, but I think the category theory folks have that one reserved (and almost all other similar arrows as well)</p>",
        "id": 245931263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250425
    },
    {
        "content": "<p><code>\\mapsto</code> could work, even without a leader, similar to the dependent arrow being used for pi now</p>",
        "id": 245931386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250501
    },
    {
        "content": "<p>@Mario Carneiro <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20hand.20written.20parsers/near/245931263\">said</a>:</p>\n<blockquote>\n<p>I considered using <code>⇒</code> as a unicode alternative for <code>=&gt;</code>, but I think the category theory folks have that one reserved (and almost all other similar arrows as well)</p>\n</blockquote>\n<p>That would be even more confusing.</p>",
        "id": 245931417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250539
    },
    {
        "content": "<p>but one thing I don't like about the dependent arrow is that you can't write <code>(a : A) (b : B) -&gt; C</code>, you have to write <code>(a : A) -&gt; (b : B) -&gt; C</code>, and I would guess a similar restriction would appear for iterated lambda</p>",
        "id": 245931521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250629
    },
    {
        "content": "<p>That would be bad.</p>",
        "id": 245931541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250655
    },
    {
        "content": "<p>we could just try to make <code>a b c |-&gt; d</code> work, it would mean we don't get the nice no-paren syntax of <code>fun a b c =&gt; d</code> but that seems tolerable given that in lean 3 you need parens or <code>$</code> before <code>\\lam</code> if it is a function argument</p>",
        "id": 245931684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250798
    },
    {
        "content": "<blockquote>\n<p>Does <code>by</code> actually work here? I would think that <code>expr by expr</code> would be parsed as an expression, an application <code>expr (by expr)</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">calcTerm</span><span class=\"o\">)</span> <span class=\"s2\">\"calc\"</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\"by\"</span> <span class=\"n\">tactic</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[macro Lean.Parser.calcTerm]</span> <span class=\"kd\">def</span> <span class=\"n\">expandCalc</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"bp\">|</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"kd\">by</span> <span class=\"n\">skip</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_c</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>The last one is parsed as <code>[(«term_≤_» (Term.hole \"_\") \"≤\" `c) \"by\" (Tactic.tacticTrivial \"trivial\")]</code>.</p>",
        "id": 245933133,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626251950
    },
    {
        "content": "<p>Yes, <code>by</code>'s precedence is lower than e.g. <code>fun</code>'s, otherwise show-by etc. wouldn't work either</p>",
        "id": 245933400,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626252183
    },
    {
        "content": "<p>so I guess that's also why <code>foo $ by ...</code> needs the <code>$</code> even though <code>fun</code> lost it?</p>",
        "id": 245933499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252255
    },
    {
        "content": "<p>Note that we've recently unified have-from/by to a <a href=\"https://github.com/leanprover/lean4/pull/479\">single, simpler syntax</a>, though we still have it in other places because <code>show ... :=</code> would look really weird (to me)...</p>",
        "id": 245933548,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626252310
    },
    {
        "content": "<p>I could get used to <code>show ty := expr</code>, it would finally get rid of the useless <code>from</code> keyword</p>",
        "id": 245933648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252394
    },
    {
        "content": "<p>also a big +1 on that new have syntax</p>",
        "id": 245933708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252462
    },
    {
        "content": "<p>I like the <code>from</code> keyword, it reads nicely.</p>",
        "id": 245933791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626252503
    },
    {
        "content": "<p>what about <code>show ty; expr</code> or <code>show ty \\n expr</code>, similar to <code>let</code> parsing? That would line up more with the tactic</p>",
        "id": 245933845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252553
    },
    {
        "content": "<p>That also means that you can use <code>show ty; by tactic</code> without needing show-by to be a special grammar production, which in turn means that <code>by</code> can get a higher precedence and <code>foo $ by tactic</code> can lose the <code>$</code></p>",
        "id": 245934450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626253020
    }
]