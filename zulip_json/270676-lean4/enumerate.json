[
    {
        "content": "<p>What's the Lean4 idiomatic way to enumerate in a for loop (I'm thinking specifically of python's enumerate)? <br>\nThe following feels too hacky!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">a.size</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">a.toList</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 302501559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664988933
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">elem</span> <span class=\"k\">in</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">elem</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 302502534,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664989243
    },
    {
        "content": "<p>What's the semantics of the second form if the two collections don't have the same size? Stop once the shorter one is exhausted?</p>",
        "id": 302503185,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664989408
    },
    {
        "content": "<p>Aha! I didn't know </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">elem</span> <span class=\"k\">in</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">elem</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>was possible!</p>",
        "id": 302503233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664989421
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>stops at <code>(c,2)</code></p>",
        "id": 302503494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664989494
    },
    {
        "content": "<p>BTW, it seems that the two approaches that Gabriel mentioned cannot be combined!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 302503833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664989616
    },
    {
        "content": "<p>That gives an error at <code>h</code>.</p>",
        "id": 302503856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664989627
    },
    {
        "content": "<p>You can do <code>for h : j in [:a.size], elem in a do</code>.</p>",
        "id": 302504422,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664989846
    },
    {
        "content": "<p>huh, that's a strange <code>h</code> you get there though, I would have expected it to be the same <code>h</code> that you need for <code>a[i]</code> there, as in something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span>  <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span>\n</code></pre></div>",
        "id": 302544089,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665003718
    },
    {
        "content": "<p>but there seems to be a new <code>col :  Std.range</code> being created and no relation to <code>a.size</code></p>",
        "id": 302544287,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665003786
    },
    {
        "content": "<p>what's the use of that <code>h : i ∈ col</code>?</p>",
        "id": 302544345,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665003808
    },
    {
        "content": "<p>I'm getting a weird parse error there BTW, <code>expected ':' or ']'</code> at the <code>i</code> in <code>a[i]'h</code>. It seems to be a precedence issue, <code>IO.println (a[i]'h)</code> works</p>",
        "id": 302544868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004024
    },
    {
        "content": "<p>Note that <code>col</code> in this example is actually a let binding, if you wrap the term in <code>by exact</code> you can see the value of the binding</p>",
        "id": 302545047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span>  The <code>h</code> here has type <code>0 ≤ i ∧ i &lt; a.size</code> (because <code>[:a.size]</code> means <code>[0:a.size]</code>).</p>",
        "id": 302545162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665004144
    },
    {
        "content": "<p>(I'm not a big fan of this pretty printing trick of making let bindings look like regular bindings. Having <code>:= ...</code> would be better)</p>",
        "id": 302545166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/enumerate/near/302545047\">said</a>:</p>\n<blockquote>\n<p>Note that <code>col</code> in this example is actually a let binding, if you wrap the term in <code>by exact</code> you can see the value of the binding</p>\n</blockquote>\n<p>I'm not sure I follow, where would I wrap it in a <code>by exact</code>?</p>",
        "id": 302546233,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665004674
    },
    {
        "content": "<p>like <code>by exact IO.println (a[i]'h)</code></p>",
        "id": 302546315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/enumerate/near/302545162\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span>  The <code>h</code> here has type <code>0 ≤ i ∧ i &lt; a.size</code> (because <code>[:a.size]</code> means <code>[0:a.size]</code>).</p>\n</blockquote>\n<p>interesting, so this seems to work then from that type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h.2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>definitely not the most intuitive tbh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 302546375,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665004732
    },
    {
        "content": "<p>the reason this makes a difference is that the tactic mode uses a different pretty printing setting that shows let binding values</p>",
        "id": 302546378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004733
    },
    {
        "content": "<p>Yes, proofs and do blocks don't play well together ATM. It needs some design work but I don't think it is a high priority right now</p>",
        "id": 302546672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/enumerate/near/302546378\">said</a>:</p>\n<blockquote>\n<p>the reason this makes a difference is that the tactic mode uses a different pretty printing setting that shows let binding values</p>\n</blockquote>\n<p>Ahh, I see, that's interesting!</p>",
        "id": 302546759,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665004854
    },
    {
        "content": "<p>you don't actually need the <code>by exact</code> for it to typecheck</p>",
        "id": 302546822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004893
    },
    {
        "content": "<p>just if you want to see that <code>col</code> is actually a let binding</p>",
        "id": 302546852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665004908
    },
    {
        "content": "<p>I guess you still need to know the <code>instance : Membership Nat Range</code> to know what <code>h</code> actually means, or chase it down with a bunch of unfolds, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">unfold</span> <span class=\"n\">Membership.mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">inferInstance</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Std.instMembershipNatRange</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>or is there a more idiomatic way to do this?</p>",
        "id": 302550488,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665006327
    },
    {
        "content": "<p>you can use <code>conv at h =&gt; whnf</code> if you wanted to see that it is an <code>/\\</code> of something</p>",
        "id": 302550757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665006450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/enumerate/near/302550757\">said</a>:</p>\n<blockquote>\n<p>you can use <code>conv at h =&gt; whnf</code> if you wanted to see that it is an <code>/\\</code> of something</p>\n</blockquote>\n<p>huh, that's some pretty cool black magic there <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 302552014,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665007074
    },
    {
        "content": "<p>thx for that one!</p>",
        "id": 302552079,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1665007089
    }
]