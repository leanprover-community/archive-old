[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkArray'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"n\">l</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 314355788,
        "sender_full_name": "ðŸ‘€ï¼Ÿ",
        "timestamp": 1670373424
    },
    {
        "content": "<p>Is this a bug?</p>",
        "id": 314355956,
        "sender_full_name": "ðŸ‘€ï¼Ÿ",
        "timestamp": 1670373525
    },
    {
        "content": "<p>The error is not reported until it is evaluated</p>",
        "id": 314356183,
        "sender_full_name": "ðŸ‘€ï¼Ÿ",
        "timestamp": 1670373653
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.get!#doc\">docs4#Array.get!</a> with the <code>!</code>gives a runtime error.  Logically it evaluates to a default value if out of bounds for the sake of theorem proving.  That is why the type must be inhabited.</p>",
        "id": 314356947,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670374171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>  <span class=\"c1\">-- 3  (Index is in `Fin (l.length)`, not `Nat`.)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)]</span>     <span class=\"c1\">-- 3  (Short hand for l.get)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">e</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>     <span class=\"c1\">-- Fails to compile.  Fin 0 is empty.</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">l.get</span><span class=\"bp\">?</span> <span class=\"mi\">2</span>   <span class=\"c1\">-- some 3  (Answer is an Option.)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span>      <span class=\"c1\">-- some 3  (Answer is an Option.)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span>      <span class=\"c1\">-- none    (Answer is an Option.)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">l.get</span><span class=\"bp\">!</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span>     <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span>     <span class=\"c1\">-- 0  (If run in `#eval`, gives default value for `Nat`, which is 0)</span>\n                <span class=\"c1\">--     If run inside `main : IO unit`, gives runtime error.)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">l.getD</span> <span class=\"mi\">2</span> <span class=\"mi\">100</span>  <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">e.getD</span> <span class=\"mi\">2</span> <span class=\"mi\">100</span>  <span class=\"c1\">-- 100  (We supplied a default value.)</span>\n</code></pre></div>",
        "id": 314357080,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670374239
    },
    {
        "content": "<p>(Code copied from a PA.SE answer of mine.)</p>",
        "id": 314357168,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670374308
    },
    {
        "content": "<p>While proving that the index is in bounds or using an <code>Option</code> are the safest, sometimes it is most expedient to use the version with the runtime error if you know your code wonâ€™t make an out of bounds access.  IMHO <code>get!</code> is better than <code>getD</code>, since you know when your code is broken, whereas <code>getD</code> will just silently return garbage.</p>",
        "id": 314357691,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670374642
    },
    {
        "content": "<p>Sorry, you are referring to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.set!#doc\">docs4#Array.set!</a> (not <code>get!</code>).</p>",
        "id": 314358948,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670375293
    },
    {
        "content": "<p>Mathematically, it is the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=setD#doc\">docs4#setD</a> which is a no-op if the index is out of bounds.</p>",
        "id": 314359180,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670375467
    }
]