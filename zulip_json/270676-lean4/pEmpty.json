[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">pEmpty</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid universe polymorphic type, the resultant universe is not Prop (i.e., 0),</span>\n<span class=\"cm\">  but it may be Prop for some parameter values (solution: use 'u+1' or 'max 1 u'</span>\n<span class=\"cm\">  u</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Works fine in Lean 3. This <code>inductive pEmpty : Type u</code> works fine in Lean 4 but is there a way of leaving Prop open as a possibility?</p>",
        "id": 243093376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623968876
    },
    {
        "content": "<p>FYI there is a similar restriction in Lean3 but apparently only for structures:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid universe polymorphic structure declaration,</span>\n<span class=\"cm\">the resultant universe is not Prop (i.e., 0),</span>\n<span class=\"cm\">but it may be Prop for some parameter values (solution: use 'l+1' or 'max 1 l')</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 243098672,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623972539
    },
    {
        "content": "<p>FYI there is also a 5-year-old TODO to generate two recursors for such inductives: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.cpp#L321-L322\">https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.cpp#L321-L322</a></p>",
        "id": 243099652,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623973401
    },
    {
        "content": "<p>Because this is a large-eliminating type, it would actually be fine to have a <code>Sort u</code> inductive here. The kernel will accept the type and produce the right result, but the elaborator has the wrong heuristic and is rejecting the type</p>",
        "id": 243100021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973788
    },
    {
        "content": "<p>Yes, I think the elaborator check is unnecessarily aggressive in this case. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I suggest you create an issue for this.</p>",
        "id": 243100128,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623973850
    },
    {
        "content": "<p>The same comment applies to <code>Sort u</code> structures</p>",
        "id": 243100160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973876
    },
    {
        "content": "<p>as long as the inductive specification is large-eliminating, you can do the obvious thing to construct the projections</p>",
        "id": 243100188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973914
    },
    {
        "content": "<p>(concretely, that means that a <code>structure</code> with no fields or with only <code>Prop</code> fields can live in <code>Sort u</code>)</p>",
        "id": 243100292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623974006
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/537\">lean4#537</a></p>",
        "id": 243127097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624003006
    },
    {
        "content": "<p>You could also take a leaf out of the core Lean book and disable the check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">bootstrap.inductiveCheckResultingUniverse</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">PUnit</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span>\n</code></pre></div>",
        "id": 243127253,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624003111
    }
]