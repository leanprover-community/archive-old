[
    {
        "content": "<p>How can I debug evaluation in Lean4? To be specific, after I defined a function <code>f</code>,  I executed <code>#eval (f arg)</code> and the result <code>res</code> is incorrect. To find out what's wrong, I wanted to follow the evaluation of <code>f arg</code> step-by-step. How to do that?</p>\n<p>I tried this: First, I declared a theorem <code>f arg = res</code> and entered tactic mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Then, I used the tactic <code>rw</code> to reduce <code>f arg</code> step-by-step.  However, the reduction often stucks, for example at expressions like <code>&lt;typeclass-object&gt;.&lt;field-notation&gt;</code>. What can I do?</p>",
        "id": 294397384,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660975720
    },
    {
        "content": "<p>The simple answer right now is: You do not do that. You do not follow execution step by step, what you can do though is add little fragments of <code>dbg_trace s!\"Fooo {myvar}\"</code> into even pure code to see what is going on.</p>",
        "id": 294397500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660975869
    },
    {
        "content": "<p>Can you further explain how to use the \"dbg_trace\" command? I'm new to lean and don't know how to use it.</p>",
        "id": 294398082,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660976190
    },
    {
        "content": "<p>Is there any documentation which explains it?</p>",
        "id": 294398105,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660976212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{x}\"</span>\n  <span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 294398111,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660976215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> <a href=\"#narrow/stream/270676-lean4/topic/Debuggin.20Evaluation/near/294398105\">said</a>:</p>\n<blockquote>\n<p>Is there any documentation which explains it?</p>\n</blockquote>\n<p>Not to my knowledge</p>",
        "id": 294398152,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660976250
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html\">https://leanprover.github.io/lean4/doc/dev/debugging.html</a>, additions are welcome</p>",
        "id": 294418559,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660989985
    },
    {
        "content": "<p>Thanks. This is very helpful.</p>",
        "id": 294432075,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660996988
    }
]