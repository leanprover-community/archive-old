[
    {
        "content": "<p>Hi, I'm writing a macro that takes input like this: <code>[[1,2,3],[4,5,6]]</code><br>\nI've tried writing  <code>\"[\" sepBy(\"[\" sepBy(num, \", \") \"]\", \", \") \"]\"</code> for the syntax this macro uses, but when I give it the input I desire it gives me the error  <code>expected ]</code> on the second <code>[</code></p>",
        "id": 230816328,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616046072
    },
    {
        "content": "<p>It looks like you are using C-style function syntax, I don't think lean uses that anywhere</p>",
        "id": 230816376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616046133
    },
    {
        "content": "<p>I'm writing this the same way as in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Array/Basic.lean#L507\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Array/Basic.lean#L507</a></p>",
        "id": 230816424,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616046233
    },
    {
        "content": "<p>hm, you're right. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 230816625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616046422
    },
    {
        "content": "<p>I'm currently using vectors, but I'll change it up so it uses arrays for one</p>",
        "id": 230816670,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616046472
    },
    {
        "content": "<p>Ok so this is what I'm doing (and it should work on its own) I can try to make this more minimal but I thought you might want to know my use case too. So the first macro generates a random multidimensional array and the second macro generates multiple terms that are all multidimensional arrays</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">numArr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"rand_multi_dim_arr_const%\"</span> <span class=\"n\">numArr</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rand_multi_dim_arr_const</span><span class=\"bp\">%</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nums</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">s1</span> <span class=\"bp\">$</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">nums</span>\n      <span class=\"k\">if</span> <span class=\"n\">nums.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span>  <span class=\"n\">StdGen</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randNat</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span> <span class=\"mi\">0</span> <span class=\"n\">UInt64.size</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">val</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"o\">(⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩,⟨</span><span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"n\">s4</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">stdSplit</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span>\n        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n        <span class=\"k\">match</span> <span class=\"n\">n.toNat</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[])</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">rand_multi_dim_arr_const</span><span class=\"bp\">%</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">nums.set</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">n</span><span class=\"o\">)),</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">push</span>\n            <span class=\"o\">(</span><span class=\"n\">rand_multi_dim_arr_const</span><span class=\"bp\">%</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]),</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s4</span><span class=\"o\">)))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Helper syntax for defining a bunch of random vecs. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_rand_arrs%\"</span> <span class=\"n\">ident</span> <span class=\"n\">num</span> <span class=\"n\">numArr</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`gen_rand_arrs id [a,b,c] s` creates three random Vecs of dimension `a`, `b` and `c` respectively with</span>\n<span class=\"cm\">names `id_1`, `id_2` and `id_3` with random seed `s`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">numArrArr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">numArr</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_rand_arrs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">s1</span> <span class=\"bp\">$</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"c1\">--set_option trace.Meta.debug true in</span>\n      <span class=\"k\">let</span> <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">elems</span>\n      <span class=\"k\">if</span> <span class=\"n\">elems.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"o\">(⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩,⟨</span><span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"n\">s4</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">stdSplit</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span>\n        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n.toNat</span>\n        <span class=\"k\">let</span> <span class=\"n\">currId</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.appendIndexAfter</span> <span class=\"n\">n</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">currId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rand_multi_dim_arr_const</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s2</span><span class=\"o\">)</span>\n          <span class=\"n\">gen_rand_vecs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]),</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s4</span><span class=\"o\">))</span>\n\n<span class=\"n\">gen_rand_arrs</span><span class=\"bp\">%</span> <span class=\"n\">zobrist</span> <span class=\"mi\">1</span> <span class=\"o\">[[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 230816958,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616046788
    },
    {
        "content": "<p>oooh wait I may have found my bug. In the meantime, any idea why <code>sepBy</code> has that syntax?</p>",
        "id": 230817226,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616047107
    },
    {
        "content": "<p>I think <code>numArrArr</code> is not used in your code, you want this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_rand_arrs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">:</span><span class=\"n\">numArr</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">s1</span> <span class=\"bp\">$</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"c1\">--set_option trace.Meta.debug true in</span>\n      <span class=\"k\">let</span> <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">elems</span>\n      <span class=\"k\">if</span> <span class=\"n\">elems.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"o\">(⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩,⟨</span><span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"n\">s4</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">stdSplit</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span>\n        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n.toNat</span>\n        <span class=\"k\">let</span> <span class=\"n\">currId</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.appendIndexAfter</span> <span class=\"n\">n</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">currId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rand_multi_dim_arr_const</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s2</span><span class=\"o\">)</span>\n          <span class=\"n\">gen_rand_vecs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]),</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s4</span><span class=\"o\">))</span>\n\n<span class=\"n\">gen_rand_arrs</span><span class=\"bp\">%</span> <span class=\"n\">zobrist</span> <span class=\"mi\">1</span> <span class=\"o\">[[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 230817392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047309
    },
    {
        "content": "<p>yes indeed, I had it used in my macro but not its helper....<br>\nI can't believe I only realized after sending it to the chat <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 230817456,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616047364
    },
    {
        "content": "<p>If you want <code>numArrArr</code> to populate a global syntax class like <code>term</code>, you should write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">numArrArr</span><span class=\"o\">)</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">numArr</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>(I think)</p>",
        "id": 230817458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047374
    },
    {
        "content": "<p>I don't think that's so necessary because I only need it to generate two large arrays of hashes, nice trick though</p>",
        "id": 230817503,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616047421
    },
    {
        "content": "<p>I suspect you don't even need to declare a custom syntax for this, you can just use a regular <code>term</code> and evaluate it as a <code>List (List Nat)</code></p>",
        "id": 230817582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047481
    },
    {
        "content": "<p>Really? I was trying to do something like parse syntax as a list in my code, but I wasn't able to do it since there isn't a <code>toList</code> like there is a <code>toNat</code>. The only option seemed to be \"make everything <code>SepArray</code>s\"</p>",
        "id": 230817622,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616047533
    },
    {
        "content": "<p>in lean 3 there is <code>eval_expr</code> that will evaluate an <code>expr</code> into any type with a <code>has_reflect</code> instance</p>",
        "id": 230817682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047568
    },
    {
        "content": "<p>It's basically equivalent to using <code>#eval</code> on the expression and passing the result to the tactic</p>",
        "id": 230817707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047606
    },
    {
        "content": "<p>There is also <code>Lean.Elab.Term.evalExpr</code> but it is both <code>unsafe</code> and in <code>TermElabM</code> so it might be hard to use in a macro</p>",
        "id": 230817841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616047753
    },
    {
        "content": "<p>If you expect the <code>term</code> input of your macro to <em>syntactically</em> be a list of lists, you can just match against that syntax inside the macro</p>",
        "id": 230832559,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616058875
    }
]