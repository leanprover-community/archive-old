[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"c1\">-- field of type `Nat` with default value `10`</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"c1\">-- field of type `Nat` with default value `foobar` ... ?</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Foo.mk</span>\n<span class=\"c1\">-- constructor Foo.mk : (x : Nat) → ({x : Type} → {foobar : Nat} → Nat) → Foo</span>\n</code></pre></div>",
        "id": 290013883,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173431
    },
    {
        "content": "<p>^ I'm trying to understand what's happening here.</p>",
        "id": 290013966,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173466
    },
    {
        "content": "<p>I expect the structure declaration to cause an error, because <code>foobar</code> is an undeclared variable.</p>",
        "id": 290014014,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173493
    },
    {
        "content": "<p>Instead, it succeeds and apparently creates a field of type <code>({x : Type} → {foobar : Nat} → Nat)</code></p>",
        "id": 290014059,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173522
    },
    {
        "content": "<p>I think it is doing implicit argument placement</p>",
        "id": 290014097,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658173554
    },
    {
        "content": "<p>First things first style wise we'd do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span>\n</code></pre></div>\n<p>in Lean 4, the <code>foobar</code> is being treated as an implicit argument as Yakov suggested, and in order to accommodate that implicit variable Lean ends up creating quite an interesting type that you can see here. The eagerness of auto implicit has been subject to discussion before and there are some ideas around on how we could turn it down.</p>",
        "id": 290014262,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658173659
    },
    {
        "content": "<p>I was also wondering about the difference between <code>where</code> and <code>:=</code></p>",
        "id": 290014342,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173689
    },
    {
        "content": "<p>No semantic difference</p>",
        "id": 290014368,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658173705
    },
    {
        "content": "<p>Maybe we should get rid off <code>:=</code> for structures and classes at some point then to enforce the generally accepted style guide easier?</p>",
        "id": 290014432,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658173746
    },
    {
        "content": "<p>I can maybe understand that <code>foobar</code> is added as an autoimplicit, but what about the added <code>{x : Type}</code> implicit parameter?</p>",
        "id": 290014471,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658173777
    },
    {
        "content": "<p>I'm not quite sure where it is pulling that one from either but its most likely a cause of the autoImplicit feature trying to do its job.</p>",
        "id": 290014659,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658173889
    },
    {
        "content": "<p>Huh, that's strange</p>",
        "id": 290014698,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658173920
    },
    {
        "content": "<p>In any case, I can't think of any reason to allow auto implicits in default values</p>",
        "id": 290014778,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658173949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/structure.20with.20unassigned.20variable.20as.20default.20variable/near/290014432\">said</a>:</p>\n<blockquote>\n<p>Maybe we should get rid off <code>:=</code> for structures and classes at some point then to enforce the generally accepted style guide easier?</p>\n</blockquote>\n<p>One use case of the <code>:=</code> is in macros where constructing such a structure can be easier, but I am doubtful that would be a good enough reason to keep the alternative syntax around.</p>",
        "id": 290015022,
        "sender_full_name": "Mac",
        "timestamp": 1658174092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/structure.20with.20unassigned.20variable.20as.20default.20variable/near/290014471\">said</a>:</p>\n<blockquote>\n<p>about the added <code>{x : Type}</code> implicit parameter?</p>\n</blockquote>\n<p>I imagine that is a by product of the interaction between auto implicits and the way default values for structures work. That is, the default value of a each field has invisible arguments corresponding to the values of the previous fields (e.g., <code>x</code>) and I think the auto implicit mechanic has accidently lifted this invisible argument into a type while lifting <code>foobar</code> (likely because the elimination procedure for <code>x</code> failed because <code>foobar</code> is a metavariable so it can not be sure if <code>x</code> was used in <code>foobar</code> until later when auto-implicits come in).</p>",
        "id": 290015499,
        "sender_full_name": "Mac",
        "timestamp": 1658174341
    },
    {
        "content": "<p>It is not the <code>x</code> from the first parameter, if you name the first one different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">lalala</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Foo.mk</span>\n</code></pre></div>\n<p>you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Foo.mk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>and it also happens if there is only a single field.</p>",
        "id": 290015759,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658174472
    },
    {
        "content": "<p>Ah, probably should have checked  before commenting.</p>",
        "id": 290015918,
        "sender_full_name": "Mac",
        "timestamp": 1658174553
    },
    {
        "content": "<p>Interesting, the type is always one universe higher than that of the param:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Baz</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Baz.mk</span>\n<span class=\"c1\">-- constructor Baz.mk : ({x : Type 3} → {foobar : Type 2} → Type 2) → Baz</span>\n</code></pre></div>",
        "id": 290016254,
        "sender_full_name": "Mac",
        "timestamp": 1658174747
    },
    {
        "content": "<p>Maybe it is the polymorphic type of <code>foobar</code> before Lean narrows it to the type of the param?</p>",
        "id": 290016411,
        "sender_full_name": "Mac",
        "timestamp": 1658174835
    },
    {
        "content": "<p>Yep:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">foobar</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Bar.mk</span>\n<span class=\"c1\">-- constructor Bar.mk.{u_1} : ({x : Sort u_1} → {foobar : x} → Nat) → Bar</span>\n</code></pre></div>",
        "id": 290016447,
        "sender_full_name": "Mac",
        "timestamp": 1658174859
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1320\">https://github.com/leanprover/lean4/pull/1320</a></p>",
        "id": 290024683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658179293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/structure.20with.20unassigned.20variable.20as.20default.20variable/near/290015022\">said</a>:</p>\n<blockquote>\n<p>One use case of the <code>:=</code> is in macros where constructing such a structure can be easier, but I am doubtful that would be a good enough reason to keep the alternative syntax around.</p>\n</blockquote>\n<p>I use it in enough places in my codebase that it would be very annoying if we got rid of it. In particular I have a pattern like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyLargeClass</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">field1</span> <span class=\"o\">:</span> <span class=\"n\">type1</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">fieldn</span> <span class=\"o\">:</span> <span class=\"n\">typen</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OtherClass</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">MyLargeClass</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">field1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n    <span class=\"bp\">...</span>\n    <span class=\"n\">fieldn</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"o\">}</span>\n\n<span class=\"c1\">-- In some other file</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MyLargeClass</span> <span class=\"n\">MyType</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">default</span> <span class=\"k\">with</span>\n  <span class=\"n\">field23</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>that is pretty nice, and only possible with the := syntax</p>",
        "id": 290035596,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658186336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> I think the suggestion was just to remove <code>:=</code> in <code>structure</code> /  <code>class</code> definitions, not elsewhere (e.g., in <code>instance</code>). Thus, I should note that you did not use <code>:=</code> in your <code>class MyLargeClass</code> signature.  ;)</p>",
        "id": 290040359,
        "sender_full_name": "Mac",
        "timestamp": 1658190524
    },
    {
        "content": "<p>Oh, oh, I see now. Reading is hard :)</p>",
        "id": 290040501,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658190682
    }
]