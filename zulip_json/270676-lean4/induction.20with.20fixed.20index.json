[
    {
        "content": "<p>What is the recommended way to do induction on a hypothesis that's an inductive Prop with an index fixed/not a variable? This seems to be a hard error in lean 4 (<code>index in target's type is not a variable (consider using the </code>cases<code> tactic instead)</code>). </p>\n<p>Right now I'm doing this to keep the (c = ..) lemma out of the signature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bigStepWhileDiverges</span>\n  <span class=\"o\">{</span><span class=\"n\">body</span> <span class=\"n\">s0</span> <span class=\"n\">s1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">while</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">s0</span> <span class=\"n\">s1</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n<span class=\"n\">generalize</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">while</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n<span class=\"n\">induction</span> <span class=\"n\">h0</span> <span class=\"k\">with</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>where BigStep is all indices: <code>inductive BigStep : Stmt -&gt; State -&gt; State -&gt; Prop</code></p>",
        "id": 250781090,
        "sender_full_name": "Chris B",
        "timestamp": 1629988272
    },
    {
        "content": "<p>The standard way to work around this in lean 3 is to generalize the fixed index and add an equality hypothesis. This can be done by <code>generalize</code> in lean 3, which I believe also exists in lean 4, but if it doesn't work you can also use <code>suffices</code> and do it manually</p>",
        "id": 250839479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630011619
    },
    {
        "content": "<p>your code suggests you already know this trick, which would be only improved by incorporating the improved <code>generalize_hyp</code> mathlib tactic (which is a straight generalization of <code>generalize</code> to allow generalizing at hypotheses too)</p>",
        "id": 250839778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630011757
    }
]