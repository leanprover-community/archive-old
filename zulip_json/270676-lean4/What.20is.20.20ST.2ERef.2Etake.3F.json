[
    {
        "content": "<p>Just a question out of curiosity, what is <code>ST.Ref.take</code> (or <code>ST.Prim.ref.take</code>)?<br>\nI was trying to understand <code>ST.Ref</code>. I guess that <code>ST.Ref.get</code> is similar to Haskell <code>readSTRef</code> (but also lifts from <code>ST</code> to other monads), <code>ST.Ref.set</code> is similar to Haskell <code>writeSTRef</code> and <code>ST.Ref.swap (a:Î±)</code> swaps the value in the <code>ST.Ref</code> with <code>a</code>. However, I have no idea what is <code>ST.Prim.take</code>.</p>",
        "id": 302601819,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1665043905
    },
    {
        "content": "<p><code>take</code> moves the value out of the ref, leaving the ref in a temporarily invalid state (so don't <code>get</code> it in that state). You can it being used in <code>modifyUnsafe</code> to make sure that the value is being used linearly.</p>",
        "id": 302603672,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665044833
    },
    {
        "content": "<p>Thanks for the explanation. I can see that Lean crashes if I first <code>take</code> then <code>get</code> or <code>take</code>. But I can't understand what \"being used linearly\" stands for.</p>",
        "id": 302605913,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1665045616
    },
    {
        "content": "<p>If the ref has a unique reference to the contained value, you want to pass that reference uniquely to <code>f</code> as well in order to enable destructive updates (see \"Counting Immutable Beans\")</p>",
        "id": 302606478,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665045829
    },
    {
        "content": "<blockquote>\n<p>leaving the ref in a temporarily invalid state</p>\n</blockquote>\n<p>Just fyi, if you call <code>get</code> in this temporary state after <code>take</code>, then it will busy-wait until you call <code>set</code> again.</p>",
        "id": 302757867,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665098637
    },
    {
        "content": "<p>That's what I assumed as well from memory, but it's not actually true in the single-threaded case (in which case waiting wouldn't make much sense either of course)! Which I guess is the reason it's <code>unsafe</code>.</p>",
        "id": 302802126,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665131411
    },
    {
        "content": "<p>what does it do?</p>",
        "id": 302802293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665131473
    },
    {
        "content": "<p>It gives you back an actual <code>nullptr</code>, which will probably break something else down the line (or immediately on <code>inc(nullptr)</code>)</p>",
        "id": 302802381,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665131512
    },
    {
        "content": "<p>oh yikes</p>",
        "id": 302802442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665131525
    },
    {
        "content": "<p>It would probably be better to just hard-panic (which is already the case in a debug build) and remove the <code>unsafe</code></p>",
        "id": 302802510,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665131555
    }
]