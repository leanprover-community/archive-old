[
    {
        "content": "<p>I've been reading Theorem Proving in Lean4 for several weeks, I feel I can generate Java and Python's data structures of my work from Lean4 Inductive type. I know there exists such tool but I I use Lean4, it would be finally possible to define, detect or prove some kind of consistency of data definition. To try this, <br>\nany clue or hints to reading Inductive type from Lean4 are appreciated.</p>",
        "id": 275880333,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1647652033
    },
    {
        "content": "<p>Can you elaborate a little bit on what exactly you'd like to accomplish? It sounds like you have an inductive type in Lean 4, and you want to export it to another language (java/python). When you say consistency, is the goal to prove that the extraction/translation is faithful?</p>",
        "id": 275895810,
        "sender_full_name": "Chris B",
        "timestamp": 1647675080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20Inductive.20definition.20in.20Lean4/near/275895810\">said</a>:</p>\n<blockquote>\n<p>Can you elaborate a little bit on what exactly you'd like to accomplish? It sounds like you have an inductive type in Lean 4, and you want to export it to another language (java/python). When you say consistency, is the goal to prove that the extraction/translation is faithful?</p>\n</blockquote>\n<p>I just imagine some possiblity of Lean4 usage and I do not consider very deeply. But I explain what I thought.</p>\n<p>I have custom tool that can generate Java nad python data type, whose data format is proto<br>\n<a href=\"https://github.com/protocolbuffers/protobuf\">https://github.com/protocolbuffers/protobuf</a>. <br>\nCurrently, it just generate data type.<br>\nIf we define the data type in Lean4, I thought I could specify the restriction or relation between data.</p>\n<p>What I hope to try finally is a mixture of functional domain modeling<br>\n<a href=\"https://fsharpforfunandprofit.com/ddd/\">https://fsharpforfunandprofit.com/ddd/</a>, proof and code generation.</p>\n<p>As compared to F#, Lean4 or dependent type can describe more detailed specificationof data or domain. <br>\nI think it is possible to prove some propert of domain model, that makes domain model more robust.</p>\n<p>If we prove some properties about domain model, the generated data type can be more robust than just using proto.</p>\n<p>This is a long story but I'd like to try to implement to generating ex Java class from Lean4 data type.</p>",
        "id": 275897805,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1647678391
    },
    {
        "content": "<p>You can do lean code generation just the same as java / python code generation. But if you want the lean type to be richer with invariants and so on then this will have to be represented in the input somehow, and I don't think protobuf has anything in particular for this</p>",
        "id": 275898665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647679611
    },
    {
        "content": "<p>You can add the proofy stuff to the Lean code post-hoc if you're sure the types you're reasoning about are accurate representations of the ones used in the language you're targeting.</p>",
        "id": 275899023,
        "sender_full_name": "Chris B",
        "timestamp": 1647680179
    },
    {
        "content": "<p>Looking at some of the <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Elab/Deriving\">derive handlers</a> might be helpful if generating source code from Lean declarations is a goal.</p>",
        "id": 275899562,
        "sender_full_name": "Chris B",
        "timestamp": 1647680968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>  <span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <br>\nThank you for the information. I'll investigate deriving feature.</p>",
        "id": 275905422,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1647689345
    }
]