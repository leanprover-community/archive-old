[
    {
        "content": "<p>Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>In the tactic state, the goal is listed as <code>∀ (x : ℕ), x ≥ 0</code>.  That makes sense; Lean has inferred that <code>x</code> must have type <code>Nat</code>.  But now change the example to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Now the goal is just <code>∃ x, x ≥ 0</code>.  Even if I write the example this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>the goal is still just listed as <code>∃ x, x ≥ 0</code>.  Or consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>The goal in the tactic state is <code>∃ x, x = x</code>.  But if I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>I get an error message.  So Lean is displaying the goal in a form that it would not accept as input.</p>\n<p>Shouldn't the pretty printer for existential quantifiers use the same style as universal quantifiers?  Note that if the pretty printing of <code>∃</code> is changed, I assume the pretty printing of <code>∃!</code> should also be changed.</p>",
        "id": 302111956,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1664818375
    },
    {
        "content": "<p>Lean knows to expect a natural number when you write <code>0</code>, but if you just write <code>example : ∃ x, x = x := by</code>, then Lean has no way to know what type <code>x</code> should have</p>",
        "id": 302112439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664818555
    },
    {
        "content": "<p>And Lean will actually tell you this!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">?</span><span class=\"n\">m.6717</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.6715</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n<span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">binder</span> <span class=\"n\">type</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n<span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"bp\">?</span><span class=\"n\">m.6717</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.6717</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.6715</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>",
        "id": 302112774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664818675
    },
    {
        "content": "<p>Or maybe I misunderstood. I guess the question is really about the pretty printer.</p>",
        "id": 302113304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664818869
    },
    {
        "content": "<p>It seems that in Lean3, the type of <code>x</code> is displayed in the existential.</p>",
        "id": 302113890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664819068
    },
    {
        "content": "<p>Yes, that's right, my question is about the pretty printer.  Shouldn't Lean display the type of <code>x</code>, as it does for the universal?</p>",
        "id": 302118062,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1664820311
    },
    {
        "content": "<p>The answer is \"yes\" if one wants to mimic the behavior from Lean3.</p>",
        "id": 302118125,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664820340
    },
    {
        "content": "<p>I think it's not just a matter of mimicking the behavior of Lean 3.  It seems bizarre to me that Lean would display the formula <code>∃ x, x = x</code> even though it would not accept that formula as input, since it can't infer the type of <code>x</code>.</p>",
        "id": 302131591,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1664824608
    },
    {
        "content": "<p>Well, there are other (albeit more complicated) situations I've encountered (in Lean3) where the pretty-printed thing needs to be modified to be accepted as input, so I personally don't necessarily expect to be able to copy-and-paste stuff directly from the info-view.</p>",
        "id": 302132577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664824977
    },
    {
        "content": "<p>Any non-default implicit arguments aren't going to be reproduced in the pretty print, as well as proofs and a bunch of other things</p>",
        "id": 302133785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664825442
    },
    {
        "content": "<p>if you actually want copy-and-pastability you should use <code>pp.all</code> for best results</p>",
        "id": 302133868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664825482
    },
    {
        "content": "<p>OK, maybe copy-and-pastability wasn't the best way to make my point.  But I still think that the pretty printing of existential and universal quantifiers should work the same way--if the type of the quantified variable is displayed for universals, it should be displayed for existentials as well.</p>",
        "id": 302135629,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1664826129
    },
    {
        "content": "<p>I took a look at the code and it's not very simple to do so. The issue is that the exists notation is unexpanded from <code>Exists fun x =&gt; p x</code> -&gt; <code>∃ x, p x</code>, and the former expression generally won't use the type because <code>Exists</code> takes its type argument implicitly and function arrows usually don't need types because the context supplies them</p>",
        "id": 302135888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664826237
    },
    {
        "content": "<p>an expression of the form <code>Exists fun (x : A) =&gt; p x</code> does unexpand to <code>∃ (x : A), p x</code> as you would expect</p>",
        "id": 302136075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664826304
    },
    {
        "content": "<p>although, <code>Sigma</code> seems to have a similar issue but it does print with the type so there might be more going on</p>",
        "id": 302136481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664826485
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 302136488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664826488
    },
    {
        "content": "<p>It works correctly with <code>pp.analyze</code></p>",
        "id": 302139431,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664827602
    },
    {
        "content": "<p>Yes, <code>pp.analyze</code> fixes it.  But it causes other problems.  With <code>pp.analyze</code>, <code>1 ∈ {x : Nat | x &gt; 0}</code> gets displayed in the tactic state as <code>Membership.mem (γ := Set ℕ) 1 { x | x &gt; 0 }</code>.  Without <code>pp.analyze</code>, it's displayed as <code>1 ∈ { x | x &gt; 0 }</code>.</p>\n<p>The fact that the existential quantifiers are displayed correctly with <code>pp.analyze</code> shows that it can be done.  So can it be made the default, so we don't need <code>pp.analyze</code>?</p>",
        "id": 305912088,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666644812
    },
    {
        "content": "<p>I think I finally figured out how to get existential statements to display the type of the variable in the tactic state.  The option to use is <code>pp.funBinderTypes</code>.  As I understand it, this causes the delaborator to include the type of the variable when it delaborates a lambda expression.  Then the type info is available to the unexpander for <code>Exists</code>, so the type gets included in the display.<br>\nIs that right?  And is there a downside to using <code>pp.funBinderTypes</code> that I haven't thought of?</p>",
        "id": 322062091,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674051170
    }
]