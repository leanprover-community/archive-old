[
    {
        "content": "<p>Is there an equivalent to <code>case tag =&gt;</code> inside the <code>conv</code> tactic language?</p>",
        "id": 275977547,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647796443
    },
    {
        "content": "<p>I would guess it should be <code>case tag =&gt;</code></p>",
        "id": 275977911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796927
    },
    {
        "content": "<p>it probably doesn't exist but you can make one yourself</p>",
        "id": 275977916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796943
    },
    {
        "content": "<p>although I don't know how to make tags in a conv block in the first place</p>",
        "id": 275977931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796965
    },
    {
        "content": "<p>I'm looking at the elaborators for <code>conv</code> tactics and they seem to just exist inside the <code>TacticM</code> monad. <code>case</code> should have a very similar implementation inside <code>conv</code> and inside <code>tactic</code></p>",
        "id": 275978023,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647797082
    },
    {
        "content": "<p>Update: copy pasting the <code>case</code> elaborator works for <code>conv</code> (with a few replacements like <code>evalTactic</code> -&gt; <code>evalConvSeq</code> and <code>tacticSeq</code> -&gt; <code>convSeq</code>)</p>",
        "id": 275981323,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647801467
    }
]