[
    {
        "content": "<p>I'm trying to <code>lake build</code> a project containing this code (using lean nightly-2021-12-28)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lake.leanVersionString</span>\n</code></pre></div>\n<p>but I'm getting  a link error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">initialize_Lake</span>\n</code></pre></div>\n<p>My <code>.elan\\toolchains\\leanprover--lean4---nightly-2021-12-28\\lib\\lean</code> folder contains Lake.olean and a Lake folder full of more .oleans, are these not found automatically?  How does one add them as a dependency in a Lake package file?</p>",
        "id": 266750541,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1641253250
    },
    {
        "content": "<p>We do not ship with native static or shared libraries for Lake yet (we would probably want both, so there <em>is</em> a non-negligble space overhead in doing so). Do you actually want to create an executable from it, given that you do not have a <code>main</code> function? Lake change the default build action compared to Leanpkg from building .oleans to building executables, though I feel like this might not be the most sensible choice given the expected average Lean 4 project.</p>",
        "id": 266780894,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641284928
    },
    {
        "content": "<p>Right I meant to include a main function in my sample, but I see that .oleans are not enough, one has to also provide the .a libraries...  I guess we can't yet jit the .a libraries from .olean files... given that we now ship clang, could we jit them instead of shipping them?  Might be able to get better performing libraries if they are jitted on the user's CPU...</p>",
        "id": 266880290,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1641340079
    },
    {
        "content": "<p>That should technically be possible, but <code>lean</code> does not currently allow for generating .c directly from .olean files.</p>\n<blockquote>\n<p>Might be able to get better performing libraries if they are jitted on the user's CPU...</p>\n</blockquote>\n<p>That should always be opt-in since generated binaries should be distributable by default.</p>",
        "id": 266911047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641372859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Adding.20Lake.20itself.20as.20a.20dependency.3F/near/266911047\">said</a>:</p>\n<blockquote>\n<p>That should technically be possible, but <code>lean</code> does not currently allow for generating .c directly from .olean files.</p>\n</blockquote>\n<p>Having learned a bit more since the last time we discussed this, it seems to me like this would not be that difficult to support. One could just import the olean and then running the C code emitter, right? The C code emitter just works of the IR and I believe the environment details necessary for the getting the IR are preserved in the <code>.olean</code>, correct?</p>",
        "id": 267017483,
        "sender_full_name": "Mac",
        "timestamp": 1641434342
    }
]