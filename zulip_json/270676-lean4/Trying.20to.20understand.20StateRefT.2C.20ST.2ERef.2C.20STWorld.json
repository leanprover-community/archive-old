[
    {
        "content": "<p>For a new comer to Lean 4 (like me) , the monad structure of Lean 4 seems rather intimidating (though elegant). <br>\nIn reading the source code, I see that many of the monads are defined using StateRefT. I learned that <br>\nthis is a macro defined like this (in Parser/Term.lean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinTermParser]</span> <span class=\"kd\">def</span> <span class=\"n\">stateRefT</span>   <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"StateRefT\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">macroArg</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">macroLastArg</span>\n</code></pre></div>\n<p>This is then elaborated (in Elab/BuiltinNotation.lean) like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinTermElab stateRefT]</span> <span class=\"kd\">def</span> <span class=\"n\">elabStateRefT</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">σ</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mStx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"k\">if</span> <span class=\"n\">mStx.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Term.macroDollarArg</span> <span class=\"k\">then</span>\n    <span class=\"n\">mStx</span> <span class=\"o\">:=</span> <span class=\"n\">mStx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">mStx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">ω</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stWorld</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">STWorld</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkInstMVar</span> <span class=\"n\">stWorld</span>\n  <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">StateRefT'</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So a <code>StateRefT σ m</code> expands into a <code>StateRefT' ω σ m</code>.<br>\nHere, STWorld is used to infer ω, based on previous instantiations of STWorld? STWorld and some instances are given<br>\nin ST.lean as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Auxiliary class for inferring the \"state\" of `EST` and `ST` monads</span>\n<span class=\"kd\">class</span> <span class=\"n\">STWorld</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">STWorld</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">STWorld</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">STWorld</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">EST</span> <span class=\"n\">ε</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>StateRefT' is defined like this (in Init/Control/StateRef.lean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">StateRefT'</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">ST.Ref</span> <span class=\"n\">ω</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I understand that ReaderT adds a context that can be accessed with <code>&lt;- read</code>. So it seems this <br>\nis adding a context that is an ST.Ref. These are defined in Init/System/ST.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ref</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">RefPointed.type</span>\n  <span class=\"n\">h</span>   <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>One of my questions is why there is the <code>(σ : Type)</code> type variable in this definition since it is not used? In looking at generated code I learned that an ST.Ref is implemented (in C) as an </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typedef</span> <span class=\"n\">struct</span> <span class=\"o\">{</span>\n    <span class=\"n\">lean_object</span>   <span class=\"n\">m_header</span><span class=\"bp\">;</span>\n    <span class=\"n\">lean_object</span> <span class=\"bp\">*</span> <span class=\"n\">m_value</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span> <span class=\"n\">lean_ref_object</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>So it is effectively a pointer to something of type <code>α</code>.<br>\nOperations on these ST.Refs are defined in stages. First (e.g.) ST.Prim.Ref.get is defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_st_ref_get\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Ref.get</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Ref</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inhabitedFromRef</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I asked myself, why is <code>σ</code> involved here, and why does it have an <code>ST σ α</code> result, since the C that implements it does not use any state?<br>\nIs it because you want to use it from other functions in the ST monad?<br>\nFinally, outside the Prim namespace we have these \"lifted\" definitions, that define ST.Ref.get, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">Ref.get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Ref</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Prim.Ref.get</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>So is the purpose of this lifting so that the ST.Ref functions can be used as actions in any monad?</p>\n<p>A final question: It seems that the implementation mutates the ST.Ref's in place so their use seems to violate the purity of functional paradigm. Is that because we know these are only being used once so it is OK? </p>\n<p>Sorry to be so long-winded. I just thought if I wrote something like this it might clarify my own thinking, and hopefully someone will be able to answer some of these questions.</p>",
        "id": 274985267,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1647010443
    },
    {
        "content": "<p>These are very good questions. If you're comfortable with Haskell, it's probably best to read an explanation of their corresponding <code>ST</code> monad, e.g. <a href=\"https://stackoverflow.com/a/12468757/161659\">https://stackoverflow.com/a/12468757/161659</a>. Their <code>s</code> is our <code>σ</code>.</p>",
        "id": 274987210,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647011190
    },
    {
        "content": "<p>There are different questions here. The design of <code>Ref</code> and <code>ST</code> is based on a similar approach used in Haskell. Haskell docs will explain in great detail the purpose of <code>σ</code>. The <code>PointedType</code> and <code>Nonempty</code> in the Lean version are used to make sure we are not compromising soundness. For example, we use them to justify that <code>ST σ (Ref σ α)</code> is not an empty type when we declare <code>mkRef</code>.<br>\nThe <code>StateRefT</code> macro is not really needed, we added it just to improve the compilation times in the past. Not sure we even need it anymore. To understand the design you can pretend <code>StateRefT'</code> is being used instead.</p>",
        "id": 274987627,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647011385
    }
]