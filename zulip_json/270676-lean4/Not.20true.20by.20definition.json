[
    {
        "content": "<p>I'm not understanding why the last example isn't true by definition (rfl):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sub_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg_succ</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sub_nat</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">sub_nat</span> <span class=\"mi\">9</span> <span class=\"mi\">0</span> <span class=\"c1\">-- pos 9</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sub_nat</span> <span class=\"mi\">0</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span> <span class=\"n\">neg_succ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sub_nat</span> <span class=\"n\">j.succ</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span> <span class=\"n\">sub_nat</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sub_nat</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">pos</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 245585961,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625975233
    },
    {
        "content": "<p>You have to case on <code>j</code>.</p>",
        "id": 245587044,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625977097
    },
    {
        "content": "<p>Does the match definition do the same thing as the eq compiler in lean4 now? I'm not sure. But what's going on is that in your current def, the <code>n, zero</code> case is being broken down into the two inductive cases.</p>",
        "id": 245587067,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625977158
    },
    {
        "content": "<p>Thanks, yeah I figured out I can prove it by cases, but it just seems like it should be true by definition since it exactly matches one of my definitional match cases. But oh well</p>",
        "id": 245587395,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625977773
    },
    {
        "content": "<p>In lean 3 you could not guarantee that the equation compiler wouldn't break up your definition some more and it looks like the same is going on here.</p>",
        "id": 245592129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625986357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/Not.20true.20by.20definition/near/245587067\">said</a>:</p>\n<blockquote>\n<p>Does the match definition do the same thing as the eq compiler in lean4 now? I'm not sure.</p>\n</blockquote>\n<p>Yes, there is no longer a difference between top level match and a regular match expression with a recursive call inside</p>",
        "id": 245593589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625988575
    },
    {
        "content": "<p>the former macro expands to the latter</p>",
        "id": 245593642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625988620
    },
    {
        "content": "<p>As for the example, my guess is that it will work if you swap the arguments to <code>sub_nat</code></p>",
        "id": 245593653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625988675
    },
    {
        "content": "<p>or you use two matches</p>",
        "id": 245593654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625988683
    },
    {
        "content": "<p>By trial and error, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sub_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg_succ</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sub_nat</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n    <span class=\"n\">ih</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 245593837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625989029
    }
]