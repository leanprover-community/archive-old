[
    {
        "content": "<p>Lean gives me a <code>Stack overflow detected. Aborting.</code> error when I try to load the unicode data file into a <code>HashMap</code> at compile time.</p>\n<p>The data file has following semicolon separated syntax, with 34626 lines in all.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">001</span><span class=\"n\">F</span><span class=\"bp\">;&lt;</span><span class=\"n\">control</span><span class=\"bp\">&gt;;</span><span class=\"n\">Cc</span><span class=\"bp\">;</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"n\">S</span><span class=\"bp\">;;;;;</span><span class=\"n\">N</span><span class=\"bp\">;</span><span class=\"n\">INFORMATION</span> <span class=\"n\">SEPARATOR</span> <span class=\"n\">ONE</span><span class=\"bp\">;;;;</span>\n<span class=\"mi\">0020</span><span class=\"bp\">;</span><span class=\"n\">SPACE</span><span class=\"bp\">;</span><span class=\"n\">Zs</span><span class=\"bp\">;</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"n\">WS</span><span class=\"bp\">;;;;;</span><span class=\"n\">N</span><span class=\"bp\">;;;;;</span>\n<span class=\"mi\">0021</span><span class=\"bp\">;</span><span class=\"n\">EXCLAMATION</span> <span class=\"n\">MARK</span><span class=\"bp\">;</span><span class=\"n\">Po</span><span class=\"bp\">;</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"n\">ON</span><span class=\"bp\">;;;;;</span><span class=\"n\">N</span><span class=\"bp\">;;;;;</span>\n</code></pre></div>\n<p>I use the following code to parse it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">includeDataFile</span><span class=\"o\">)</span> <span class=\"s2\">\"include_data_file\"</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[termElab includeDataFile]</span> <span class=\"kd\">def</span> <span class=\"n\">includeDataFileImp</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isStrLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"n\">str</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.pathExists</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.isDir</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{str} is a directory\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.HashMap.empty</span><span class=\"o\">)</span>\n        <span class=\"n\">for</span> <span class=\"n\">line</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">FS.lines</span> <span class=\"n\">path</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">splits</span> <span class=\"o\">:=</span> <span class=\"n\">line.splitOn</span> <span class=\"s2\">\";\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">String.trim</span>\n          <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Syntax.mkStrLit</span> <span class=\"o\">(</span><span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"o\">((</span><span class=\"n\">Syntax.mkStrLit</span> <span class=\"o\">(</span><span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">2</span><span class=\"o\">))))</span>\n        <span class=\"n\">elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{str}</span><span class=\"se\">\\\"</span><span class=\"s2\"> does not exist as a file\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">50000</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">generalCategoryMap</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">include_data_file</span> <span class=\"s2\">\"./UCD/UnicodeData.txt\"</span>\n</code></pre></div>",
        "id": 272497297,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645251487
    },
    {
        "content": "<p>The code builds successfully when I provide a smaller file, and the error comes from <code>elabTerm</code>. Are there any hacks that can work round the stack overflow?</p>",
        "id": 272497427,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645251691
    },
    {
        "content": "<p>I assume you already recognize that the term you are constructing is linear depth, since it has the form <code>empty |&gt;.insert k v |&gt;.insert k v |&gt;.insert k v ...</code></p>",
        "id": 272498936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645253658
    },
    {
        "content": "<p>Instead, you should use <code>[(k, v), ..., (k', v')].foldl (fun m (k, v) =&gt; m.insert k v) empty</code>, since the <code>[a, ..., z]</code> syntax already elaborates into a nice balanced tree for logarithmic depth</p>",
        "id": 272499026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645253787
    },
    {
        "content": "<p>It partially works, but now it produces another error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Expr.mkData</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">:</span><span class=\"mi\">136</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span> <span class=\"n\">bound</span> <span class=\"kd\">variable</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">big</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Expr.mkData</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">:</span><span class=\"mi\">136</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span> <span class=\"n\">bound</span> <span class=\"kd\">variable</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">big</span>\n\n<span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"n\">detected.</span> <span class=\"n\">Aborting.</span>\n</code></pre></div>",
        "id": 272502387,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645258260
    },
    {
        "content": "<p>Postponing parsing to run time may be a good workaround for me now.</p>",
        "id": 272502490,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645258371
    },
    {
        "content": "<p>Oh, now I'm curious what the bound variable index limit is (apparently <code>2^16-1</code> = 65535)</p>",
        "id": 272502863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645258814
    },
    {
        "content": "<p>You can also make your own balanced tree of operators (I think the one for lists uses <code>let</code> which introduces bound variables)</p>",
        "id": 272502901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645258879
    },
    {
        "content": "<p><a href=\"https://github.com/xubaiw/Unicode.lean/tree/compile-time\">https://github.com/xubaiw/Unicode.lean/tree/compile-time</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Compile-time.20large.20data/near/272502901\">said</a>:</p>\n<blockquote>\n<p>You can also make your own balanced tree of operators (I think the one for lists uses <code>let</code> which introduces bound variables)</p>\n</blockquote>\n<p>I'll try that when I learn more about lean metaprogramming.</p>",
        "id": 272504203,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645260366
    },
    {
        "content": "<p>This seems to work okay, but it's now hitting a timeout in <code>isDefEq</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">includeDataFile</span><span class=\"o\">)</span> <span class=\"s2\">\"include_data_file\"</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span>\n<span class=\"kd\">def</span> <span class=\"n\">map₁</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m₂</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"n\">Std.HashMap.empty</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkTree</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">mid</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"n\">f</span> <span class=\"n\">mid</span> <span class=\"n\">j</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map₁</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Syntax.mkStrLit</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Syntax.mkStrLit</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[termElab includeDataFile]</span> <span class=\"kd\">def</span> <span class=\"n\">includeDataFileImp</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isStrLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"n\">str</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.pathExists</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.isDir</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{str} is a directory\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">FS.lines</span> <span class=\"n\">path</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n          <span class=\"k\">let</span> <span class=\"n\">splits</span> <span class=\"o\">:=</span> <span class=\"n\">line.splitOn</span> <span class=\"s2\">\";\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">String.trim</span>\n          <span class=\"o\">(</span><span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n          <span class=\"mi\">0</span> <span class=\"n\">arr.size</span>\n        <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{str}</span><span class=\"se\">\\\"</span><span class=\"s2\"> does not exist as a file\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generalCategoryMap</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">include_data_file</span> <span class=\"s2\">\"./UCD/UnicodeData.txt\"</span>\n</code></pre></div>",
        "id": 272505136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645261505
    },
    {
        "content": "<p>making it a structure works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Diff</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span>\n<span class=\"kd\">def</span> <span class=\"n\">map₁</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m₂.1</span> <span class=\"o\">(</span><span class=\"n\">m₁.1</span> <span class=\"n\">m</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">d.1</span> <span class=\"n\">Std.HashMap.empty</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">generalCategoryMap</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">include_data_file</span> <span class=\"s2\">\"./UCD/UnicodeData.txt\"</span>\n</code></pre></div>",
        "id": 272505333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645261743
    },
    {
        "content": "<p>Actually, this can be sped up significantly by generating an <code>Expr</code> directly instead of building a syntax to pass to <code>ElabTerm</code>. Note the <code>maxHeartbeats</code> is gone now and it is visibly much faster</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">includeDataFile</span><span class=\"o\">)</span> <span class=\"s2\">\"include_data_file\"</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Diff</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span>\n<span class=\"kd\">def</span> <span class=\"n\">map₁</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m₂.1</span> <span class=\"o\">(</span><span class=\"n\">m₁.1</span> <span class=\"n\">m</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">d.1</span> <span class=\"n\">Std.HashMap.empty</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkTree</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"n\">mkTree</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">mid</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">mkTree</span> <span class=\"n\">f</span> <span class=\"n\">mid</span> <span class=\"n\">j</span>\n    <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">append</span><span class=\"o\">)</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n    <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">map₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkStrLit</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkStrLit</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[termElab includeDataFile]</span> <span class=\"kd\">def</span> <span class=\"n\">includeDataFileImp</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isStrLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"n\">str</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.pathExists</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.isDir</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{str} is a directory\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">FS.lines</span> <span class=\"n\">path</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n        <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">mk</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkTree</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n          <span class=\"k\">let</span> <span class=\"n\">splits</span> <span class=\"o\">:=</span> <span class=\"n\">line.splitOn</span> <span class=\"s2\">\";\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">String.trim</span>\n          <span class=\"o\">(</span><span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">splits.get</span><span class=\"bp\">!</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n          <span class=\"mi\">0</span> <span class=\"n\">arr.size</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{str}</span><span class=\"se\">\\\"</span><span class=\"s2\"> does not exist as a file\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generalCategoryMap</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">include_data_file</span> <span class=\"s2\">\"./UCD/UnicodeData.txt\"</span>\n</code></pre></div>",
        "id": 272505721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645262252
    },
    {
        "content": "<p>Thanks very much!! although it's still stack overflow on my machine. I'll try to optimize it later.</p>",
        "id": 272506828,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645263491
    },
    {
        "content": "<p>where is the stack overflow occurring? Does it produce C code?</p>",
        "id": 272509079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645266170
    },
    {
        "content": "<p>No. Both <code>build/ir</code> and <code>build/lib</code> are empty, and it produces error very quickly (about 3 seconds).</p>",
        "id": 272509519,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645266684
    },
    {
        "content": "<p>Oh, it looks like my synthetic benchmark had too much duplication in it, leading to fewer distinct subexpressions than expected. When I use the real data it times out</p>",
        "id": 272509610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645266782
    },
    {
        "content": "<p>or at least it's taking a while, it hasn't crashed yet on my machine</p>",
        "id": 272509692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645266877
    },
    {
        "content": "<p>I do hope we can find a better story for big compile time data. I think it should at least be possible to use an extern function</p>",
        "id": 272509812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645267029
    },
    {
        "content": "<p>Yes. Also I think runtime parsing and <code>Thunk</code> may be a better solution now as lean builds the whole package. Compiling all the data file will lead to unacceptably long build time.</p>",
        "id": 272510102,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645267356
    }
]