[
    {
        "content": "<p>Is there an option to get <code>simp [(h0 : e = e')]</code> to rewrite a match statement that has a witness (as in<code>match h : e with</code>)? It seems that <code>rw</code> works, but inquiring minds would like to know about simp. Mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">i_isSome</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- succeeds using `rw [h]`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"sc\">'a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i_isSome</span> <span class=\"n\">elems</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">i_isSome</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- fails with `simp [h]`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">elems</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"sc\">'a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i_isSome</span> <span class=\"n\">elems</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">i_isSome</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ (match h : elems[i]? with</span>\n<span class=\"cm\">  | none =&gt; false</span>\n<span class=\"cm\">  | some val =&gt; true) =</span>\n<span class=\"cm\">  true</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 323302459,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1674579082
    },
    {
        "content": "<p>That's because the automatically generated congruence lemmas are too weak.  If you set <code>set_option pp.match false</code>, then you'll see that the match is implemented as a function.  And the types of the match arms depend on the <code>Array Char</code> argument, therefore if you want to rewrite there you need to modify the arguments as well so that the match still type checks.</p>",
        "id": 323333020,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587458
    },
    {
        "content": "<p>Here's a toy repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 323333058,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587469
    },
    {
        "content": "<p>To rewrite <code>0 + x</code> to <code>x</code> we need to change the (proof in the) second argument.  But simp doesn't know how to do that.</p>",
        "id": 323333189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587511
    },
    {
        "content": "<p>Thanks for the explanation and example. I looked at the <code>pp.all true</code> output but wasn't sure whether there was a magic simp flag or anything.</p>",
        "id": 323356284,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1674595396
    }
]