[
    {
        "content": "<p>Found an example that causes unfold to fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">LazyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">delayed</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"o\">(</span><span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LazyList</span>\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>        <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">as</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">length</span> <span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">delayed</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">length</span> <span class=\"n\">as.get</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">delayed</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">force</span> <span class=\"n\">as.get</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">as</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toList</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>        <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">toList</span> <span class=\"n\">as</span>\n<span class=\"bp\">|</span> <span class=\"n\">delayed</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toList</span> <span class=\"n\">as.get</span>\n<span class=\"kd\">end</span> <span class=\"n\">LazyList</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RTQueue</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">τ</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">τ</span>\n  <span class=\"n\">h_lens</span> <span class=\"o\">:</span> <span class=\"n\">F.length</span> <span class=\"bp\">=</span> <span class=\"n\">R.length</span> <span class=\"bp\">+</span> <span class=\"n\">S.length</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">RTQueue</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">RTQueue</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">LazyList.nil</span><span class=\"o\">,</span>\n    <span class=\"n\">List.nil</span><span class=\"o\">,</span>\n    <span class=\"n\">LazyList.nil</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">rotate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">r.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LazyList.delayed</span> <span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">h_r</span><span class=\"o\">:</span><span class=\"n\">r</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">List.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">r'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">h_f</span><span class=\"o\">:</span><span class=\"n\">f.force</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LazyList.cons</span> <span class=\"n\">y</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LazyList.cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"n\">f'</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">LazyList.cons</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rotate_inv</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"bp\">=</span> <span class=\"n\">F.toList</span> <span class=\"bp\">++</span> <span class=\"n\">R.reverse</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">F</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">rotate</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The issue goes away if <code>rotate</code> doesn't take the <code>h</code> parameter, OR if there is only one match instead of two. So I'm not sure how to cut down this MWE more.</p>",
        "id": 274813994,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646906921
    },
    {
        "content": "<p>And a minor error-message complaint, I originally wrote <code>rotate_inv</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rotate_inv</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"bp\">=</span> <span class=\"n\">F.toList</span> <span class=\"bp\">++</span> <span class=\"n\">R.reverse</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">F</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with the <code>h</code> as a parameter, and got a nebulous <code>tactic 'introN' failed, insufficient number of binders</code> at <code>induction F</code>. Unsure if that is an issue or if the error message is just too generic.</p>",
        "id": 274814456,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646907187
    }
]