[
    {
        "content": "<p>Hi, the Lean 4 language looks amazing and it would be awesome to use as an application language (currently I use Scala and Rust, but would prefer a pure FP language with dependent types). How viable is it to use as a general application development language currently (I believe that's at least a minor goal)? I use Scala.js a lot, which is great, and I don't believe Lean 4 has a JS backend. How much effort would it be to create a JS (or WASM) backend?</p>",
        "id": 291544730,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659342423
    },
    {
        "content": "<p>There have been talks about making a WASM backend, but in the short term that would probably only be compiling the generated C code to WASM</p>",
        "id": 291545276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659342800
    },
    {
        "content": "<p>which is what we already do for the in-browser version of lean</p>",
        "id": 291545296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659342819
    },
    {
        "content": "<p>And there's not much wrong with that, I believe</p>",
        "id": 291545335,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659342842
    },
    {
        "content": "<p>Prior discussion: <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20and.20WASM/near/242384891\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Lean.204.20and.20WASM/near/242384891</a></p>",
        "id": 291545378,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659342865
    },
    {
        "content": "<p>Would it be wise to make a WASM backend that directly emits WASM? I think it might be useful because if we emit WASM directly, we can emit a much smaller file.</p>",
        "id": 291545561,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659342977
    },
    {
        "content": "<p>I'm just asking. I'm not demanding anything, I swear!</p>",
        "id": 291545588,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659342996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> was looking into that as a possible project</p>",
        "id": 291545599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659343011
    },
    {
        "content": "<p>but also, keep in mind that if you directly emit WASM then you aren't getting any e.g. LLVM optimizations</p>",
        "id": 291545746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659343105
    },
    {
        "content": "<p>I'm not sure why a direct backend would generate smaller code than, say, LLVM optimizing for size; what makes you believe that? And as Mario said, you may still want some optimizations for <em>speed</em>. I don't know if anyone's profiled the costs and benefits of AOT optimization regarding the different WASM JITs yet.</p>",
        "id": 291545938,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659343241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ok, that's possible of course, but maybe not the fastest turn around during development as LLVM is quite slow. With Scala.js the re-compilation is basically instant for small projects.</p>",
        "id": 291546749,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659343829
    },
    {
        "content": "<p>Okay, but writing a good optimizing compiler is a tremendously huge project so it would be reasonable to expect that any homebrew solution will be much worse than an off-the-shelf compiler framework</p>",
        "id": 291546923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659343939
    },
    {
        "content": "<p>For lean, you can run things on the spot as interpreted, but the compiler takes a bit longer</p>",
        "id": 291547032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm thinking more of a development build for quick iteration, and then use LLVM for final release build. This is basically what Scala.js does (but compiles to JavaScript instead)</p>",
        "id": 291547146,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20as.20an.20application.20language/near/291547032\">said</a>:</p>\n<blockquote>\n<p>For lean, you can run things on the spot as interpreted, but the compiler takes a bit longer</p>\n</blockquote>\n<p>Hmm, but that doesn't work if you call from JS or use browser API's right?</p>",
        "id": 291547196,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344123
    },
    {
        "content": "<p>During development, you get live response in the editor. That's as quick iteration as you could ever ask for</p>",
        "id": 291547198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344124
    },
    {
        "content": "<p>You can even run JS code on the spot in the widget view</p>",
        "id": 291547228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344156
    },
    {
        "content": "<p>I don't know that much about scala.js but I don't think lean is trying to be a direct competitor</p>",
        "id": 291547372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20as.20an.20application.20language/near/291547198\">said</a>:</p>\n<blockquote>\n<p>During development, you get live response in the editor. That's as quick iteration as you could ever ask for</p>\n</blockquote>\n<p>Ok, where is this online editor?</p>",
        "id": 291547481,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20as.20an.20application.20language/near/291547372\">said</a>:</p>\n<blockquote>\n<p>I don't know that much about scala.js but I don't think lean is trying to be a direct competitor</p>\n</blockquote>\n<p>It's just compiling Scala code to JS, with libraries providing access to JS API's (basically FFI). It uses the JS GC though.</p>",
        "id": 291547576,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344400
    },
    {
        "content": "<p>The editor is VSCode, which is an electron app so it integrates with a node.js backend IIUC</p>",
        "id": 291547657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344433
    },
    {
        "content": "<p>I wouldn't recommend the online editor for serious application development</p>",
        "id": 291547699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344466
    },
    {
        "content": "<p>But let's say I want to call a Lean 4 function from JS and then render stuff in a HTML canvas, then I would have to compile to WASM using LLVM?</p>",
        "id": 291547812,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344537
    },
    {
        "content": "<p>I'm saying you can literally do this in the editor, it shows up on the right side panel</p>",
        "id": 291547829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344558
    },
    {
        "content": "<p>Hmm, in VS Code? Where would my canvas be rendered?</p>",
        "id": 291547990,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344684
    },
    {
        "content": "<p>It's a little outdated, but here's an example of a widget application: <a href=\"https://github.com/TwoFX/sudoku\">https://github.com/TwoFX/sudoku</a></p>",
        "id": 291548145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659344767
    },
    {
        "content": "<p>Here's another one (Lean 3): <a href=\"https://github.com/kendfrey/rubiks-cube-group\">https://github.com/kendfrey/rubiks-cube-group</a></p>",
        "id": 291548207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659344807
    },
    {
        "content": "<p>Oh, that's really cool! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 291548307,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344861
    },
    {
        "content": "<p>So, you can also add user interaction, timers etc. on the page and re-evaluate Lean functions?</p>",
        "id": 291548511,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659344980
    },
    {
        "content": "<p>The whole lean document is kept up to date, it's not like python worksheets where you have to run them in order. So re-evaluation happens transparently: if you edit the code you see the changes immediately</p>",
        "id": 291548944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659345268
    },
    {
        "content": "<p>and yes, you can put user interface elements in the page to interact with the widget</p>",
        "id": 291549014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659345326
    },
    {
        "content": "<p>I think one of those puzzle game examples allowed you to click on the puzzle and it would add the corresponding move to the source code</p>",
        "id": 291549092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659345370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can't seem to find that. How would I call/eval a Lean function from a JS function?</p>",
        "id": 291550102,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659345932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> and <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> are the ones to ask about Lean/JS integration</p>",
        "id": 291550218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659345982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369607\">Jesper Nordenberg</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20as.20an.20application.20language/near/291550102\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Can't seem to find that. How would I call/eval a Lean function from a JS function?</p>\n</blockquote>\n<p>Wow good timing, I am literally writing a tutorial on this now (for Lean 4) :) I can ping you when it's done.</p>",
        "id": 291551753,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659346979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> That would be awesome! I'm considering using it for simple game development, like updating game state based on user input and re-drawing a canvas or WebGL (similar to Elm examples).</p>",
        "id": 291552226,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659347328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369607\">Jesper Nordenberg</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20as.20an.20application.20language/near/291552226\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> That would be awesome! I'm considering using it for simple game development, like updating game state based on user input and re-drawing a canvas or WebGL (similar to Elm examples).</p>\n</blockquote>\n<p>Then the Lean/JS interface will probably not be of much help to you, unfortunately. In this case \"calling Lean from JS\" means \"making a remote procedure call\", with JS running in a browser (or VSCode, which is a browser) and Lean running in the Lean language server. This is useful for accessing objects such as <code>Environment</code>s and <code>Expr</code>s which live in the server, but not so much for general-purpose \"I would rather write this function in Lean\" programming. Anything low-latency has to be written in JS. As others noted above, it would also be possible to <em>compile</em> Lean to JS/WASM so that it can run in the client, but afaik noone has gotten that to work so far.</p>",
        "id": 291553427,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659348043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Yes, I realize that. I don't care much about performance during the initial development phase (it doesn't have to be realtime). And for later release build I would definitely compile to WASM using LLVM. But maybe I'm too early adopter of Lean 4 for such an application :)</p>",
        "id": 291554167,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659348510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369607\">@Jesper Nordenberg</span> another way to put it is that we currently have a way to invoke a remote Lean server from JS, but no way to invoke Lean code within the same execution environment that the JS is running in. So it's not just a question of performance but also ABI - to make RPC calls to remote Lean you need to encode data in various ways whereas a local call could pass it around directly. Additionally when the remote server is <em>actually</em> remote (i.e. on a separate machine rather than a different process on the same machine), the latency can be up in hundreds of ms which means you can really only make such calls sparingly.</p>",
        "id": 291555072,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659349102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Ok, I suppose the only viable way is to compile to WASM then for testing</p>",
        "id": 291556000,
        "sender_full_name": "Jesper Nordenberg",
        "timestamp": 1659349732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> is your method of calling a Lean function from JS different from the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">User Widgets</a>? I'm investigating this right now because I want to talk between Lean code and infoview for code improvement suggestions, but it seems that one of your latests point on having to encode all data to the Lean server complicates the use of TacticM, because all MVars and contexts are likely difficult to communicate, currently widgets seem to build on top of TermElabM.</p>",
        "id": 292396403,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1659962697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"507443\">@Reinier van der Gronden</span> no, it is exactly the method described there. <a href=\"https://github.com/leanprover/lean4/blob/860d726d726ebd30a95ff95d192bb8a2fe55e30c/src/Lean/Widget/Basic.lean#L18\">Here</a> is an example of how we can send a tactic context to and from the infoview. I suppose we should also have a section about this in the User Widgets tutorial.</p>",
        "id": 292399195,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659964246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Thanks for that pointer, I'll take a look!</p>",
        "id": 292548924,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1660038716
    }
]