[
    {
        "content": "<p>is there a way in lean 4 to write proof and code together? I am trying to prove the correctness of a digit DP algorithm and so far in my Lean 3 code the algorithm part and the proof part are somewhat separated, somewhat disconnected</p>\n<p>most dp algorithms can be proven correct using a simple induction argument, and i feel that integrating the proof and the algorithm together is more in line with the spirit of dp (dp is recursion, and induction is also recursion-ish?)</p>\n<p>let's consider the TSP problem for example, let dp(vertex, visited_vertices) be the min cost of visiting every vertex from <code>vertex</code> then:<br>\nbase case: if every vertex is visited then the cost is 0<br>\ninduction: the min cost equals something like this</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">inf</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">adjacent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">adjacent</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">adjacent</span><span class=\"o\">++</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">visited_vertices</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">adjacent</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">vertex</span><span class=\"p\">][</span><span class=\"n\">adjacent</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">adjacent</span><span class=\"p\">,</span> <span class=\"n\">visited_vertices</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">adjacent</span><span class=\"p\">)));</span>\n</code></pre></div>\n<p>as you can see the algorithm kind of justifies itself but in lean you have to write a separate induction proof that quite frankly looks a lot like the original algorithm</p>",
        "id": 223654804,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611328882
    },
    {
        "content": "<p>dp is short for dynamic programming by the way</p>",
        "id": 223655145,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611329021
    },
    {
        "content": "<p>When you say \"kind of justifies\" itself, it's exactly turning the \"kind of\" into truly, which is the building of the proof term.</p>",
        "id": 223656705,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611329665
    },
    {
        "content": "<p>You could write meta code that is able to introspect the definition to help in the mechanical conversion of the definition into a proof term.</p>",
        "id": 223656947,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611329800
    },
    {
        "content": "<p>You can define your function to return the subtype <code>{x : T // property_you_care_about x}</code></p>",
        "id": 223657364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611329965
    }
]