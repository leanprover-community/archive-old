[
    {
        "content": "<p>I'm playing with Lean syntax and I was wondering whether you can define your own <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns\">'active patterns' like in F#</a>.</p>\n<p>There are a few variants, but essentially an active pattern is a function <code>myPattern : A → Option Nat</code> (with some special attribute or syntax to say that this should be treated as a pattern). Then in your match statements you can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFunc</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">myPattern</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which gets compiled to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFunc'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">myPattern</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This came up because I was playing with rolling my own json <code>syntax</code> and I wanted to implement some fancy 'spread' patterns like in raw javascript:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getlemon</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"bp\">→</span> <span class=\"n\">Json</span>\n  <span class=\"bp\">|</span>  <span class=\"n\">jsonPattern</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"orange\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"juicy\"</span><span class=\"o\">,</span> <span class=\"s2\">\"lemon\"</span> <span class=\"o\">:</span>  <span class=\"n\">lemon</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"n\">rest</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lemon</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"bad fruits\"</span>\n</code></pre></div>\n<p>Perhaps there is a <code>pattern</code> syntax category that I can override and also some hooks in the equation compiler to do this?</p>",
        "id": 278872020,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649875512
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[matchPattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.myAdd</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.myAdd</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>like this for example? (notice the matchpattern attribute) However I don't know how far you can go with just this</p>",
        "id": 278872602,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649875748
    },
    {
        "content": "<p>No an active pattern runs a user-defined function on the data being matched against first.</p>",
        "id": 278874126,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649876189
    },
    {
        "content": "<p>Hmmm, I think considering that we don't even support pattern guards right now it is rather unlikely you'll be able to get this active pattern thing to work either :/ but I might very well be wrong on that.</p>",
        "id": 278875391,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649876661
    },
    {
        "content": "<p>As far as I know this is not possible without replacing the equation compiler itself and any syntaxes that call into it</p>",
        "id": 278876468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649877176
    },
    {
        "content": "<p>I think it would be nice to have an extension point like this: most likely it would be an <code>elab</code> for terms in pattern position, although I don't know what interface the equation compiler would present to such an elab</p>",
        "id": 278876694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649877271
    },
    {
        "content": "<p>This would make exhaustivity checking quite hard though right?</p>",
        "id": 278877009,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649877416
    },
    {
        "content": "<p>that depends on the interface. It could always be some kind of struct that has functions to answer all the questions that the equation compiler needs to ask about the notation, including exhaustiveness</p>",
        "id": 278877281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649877577
    },
    {
        "content": "<p>or it could be limited to things that either bind everything or act like pattern guards (i.e. have no effect on exhaustiveness checking), with anything that has to interact directly with exhaustiveness being handled by macro expansion to constructors</p>",
        "id": 278877501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649877679
    },
    {
        "content": "<p>I think exhaustivity checking is ok, since an active pattern on <code>a : α</code> is always equivalent to a non-active <code>match f a with ...</code> for some <code>f : α → β</code></p>",
        "id": 278877503,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649877681
    },
    {
        "content": "<p>(at least for total active patterns in the F# spec). You also have partial active patterns where <code>f : α → Option β</code> which seems ok too because it could be translated to a series of nested matches on options.</p>",
        "id": 278877712,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649877816
    },
    {
        "content": "<p>I'm thinking a bit more generically than just active patterns; you could implement active patterns using <code>elab</code> stuff but this would also allow \"tactics\" in pattern position</p>",
        "id": 278878089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649878012
    },
    {
        "content": "<p>which allows things that can't be expressed as plain functions of the type system</p>",
        "id": 278878187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649878065
    }
]