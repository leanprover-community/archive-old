[
    {
        "content": "<p>I'll just start with an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">canonicalToList</span> <span class=\"o\">(</span><span class=\"n\">fold</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">View.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">View</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ'</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">foldF</span> <span class=\"n\">foldAcc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldF</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">foldAcc</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">View</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">canonicalToList_map</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">canonicalToList</span> <span class=\"o\">((</span><span class=\"n\">v.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">canonicalToList</span> <span class=\"n\">v.fold</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">canonicalToList</span> <span class=\"n\">v.fold</span> <span class=\"bp\">=</span> <span class=\"n\">list</span>\n<span class=\"c1\">-- function expected</span>\n<span class=\"c1\">--   v</span>\n</code></pre></div>\n<p>Originally, <code>View</code> was a structure with a single field, but I was having universe problems, and there was no real reason for it to be a structure, so I made it a def. But I still want dot notation, so I made the def irreducible, and then ran into this <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n<p>Two questions<br>\n1) Does this seem like a reasonable way to have a type definition that also has dot notation magic?<br>\n2) What does this error message mean, and how do I work around it?</p>\n<p>I did try out a few other tactics, but the same error message came up from both <code>rw</code> and <code>simp</code> so I figured it is something I do not understand going wrong :)</p>",
        "id": 292856174,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660181698
    },
    {
        "content": "<p>It seems like it's being raised here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/InferType.lean#L69\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/InferType.lean#L69</a></p>",
        "id": 292856619,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660182238
    },
    {
        "content": "<p>it seems like <code>View τ</code> is being expanded to a function type at the definition of <code>fold</code> and then is still expected to be a function type at <code>v.fold</code>? But I don't necessarily understand why</p>",
        "id": 292857303,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660182957
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">v</span>\n<span class=\"c1\">-- (?m → τ → ?m) → ?m → ?m</span>\n<span class=\"c1\">-- it is equivalent to</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">v</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- instead of</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">v</span>\n<span class=\"c1\">-- View Nat</span>\n</code></pre></div>\n<p>There are two ways to proceed: strict implicit binder notation <code>{{β : Type u}}</code>, or define <code>View</code> as a structure. I prefer the latter.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">canonicalToList</span> <span class=\"o\">(</span><span class=\"n\">fold</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">View.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">View</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">v.f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">foldF</span> <span class=\"n\">foldAcc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v.f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldF</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">foldAcc</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">canonicalToList_map</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">View</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">canonicalToList</span> <span class=\"o\">((</span><span class=\"n\">v.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">canonicalToList</span> <span class=\"n\">v.fold</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">canonicalToList</span> <span class=\"n\">v.fold</span> <span class=\"bp\">=</span> <span class=\"n\">list</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 292857692,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1660183315
    },
    {
        "content": "<p>Ahhh, it's filling in the implicit there, I see. It might be helpful for more error messages like that to suggest turning on <code>pp.all</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 292860551,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660186005
    }
]