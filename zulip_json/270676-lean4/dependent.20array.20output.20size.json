[
    {
        "content": "<p>I'm trying to add type safety to a hasher output</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Ideally I want to guarantee the correct output size</span>\n<span class=\"cm\"> def Blake3Hash : Type := { r : Array UInt8 // r.size = BLAKE3_OUT_LEN }</span>\n<span class=\"cm\">But for now this seems to work</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">UInt8</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"bp\">←</span> <span class=\"n\">initHasher</span>\n  <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"bp\">←</span> <span class=\"n\">hasherUpdate</span> <span class=\"n\">hasher</span> <span class=\"n\">input</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">input.size</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"bp\">←</span> <span class=\"n\">hasherFinalize</span> <span class=\"n\">hasher</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">BLAKE3_OUT_LEN</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">output.data</span>\n</code></pre></div>\n<p>How do I prove / assert that output data has length <code>BLAKE3_OUT_LEN</code>? In the lean source I see several places that a constrined type like <code> { r : Array UInt8 // r.size = BLAKE3_OUT_LEN } </code> can be filled by a tuple of the value and a tactic.</p>\n<p>Something like:<br>\n<code>return (output.data, by erw [Array.size]; apply data.property)</code><br>\nBut this (unsprisingly) leads to a hole:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">output.data</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m.806</span><span class=\"o\">)</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">argument</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"o\">(</span><span class=\"n\">output.data</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m.806</span><span class=\"o\">)</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"n\">Array</span> <span class=\"n\">UInt8</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.805</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.802</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"n\">Nat</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Blake3Hasher</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.805</span>\n</code></pre></div>",
        "id": 257210063,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634048201
    },
    {
        "content": "<p>Why does <code>hash</code> have <code>IO _</code> as its return type? Shouldn't it be a pure function?</p>",
        "id": 257210437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634048337
    },
    {
        "content": "<p>I think it will be hard to prove something once you've wrapped yourself in the IO monad.</p>",
        "id": 257210659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634048417
    },
    {
        "content": "<blockquote>\n<p><code>return (output.data, by erw [Array.size]; apply data.property)</code></p>\n</blockquote>\n<p>You're also using the wrong parentheses: <code>( )</code> is for products only, you need <code>⟨ ⟩</code> here.</p>",
        "id": 257211476,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634048716
    },
    {
        "content": "<blockquote>\n<p><code>def Blake3Hash : Type := Array UInt8</code></p>\n</blockquote>\n<p>Note that <code>Array UInt8</code> has a different runtime representation than <code>ByteArray</code> (which is more efficient).</p>",
        "id": 257211855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634048866
    },
    {
        "content": "<p>I'm guessing the hash function is implemented via FFI. In this case you can do a runtime check that the output size is correct using something like <code>if h : output.size = BLAKE3_OUT_LEN then ... else ...</code> with a panic in the <code>else</code> case.</p>",
        "id": 257212786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634049207
    },
    {
        "content": "<p>In the <code>then</code> case, you get the \"proof\" <code>h</code> that you need to build something of type <code>{ r : Array UInt8 // r.size = BLAKE3_OUT_LEN }</code>.</p>",
        "id": 257213350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634049399
    },
    {
        "content": "<p>Thanks. I were hoping it would be possible to do it purely.<br>\nIt's not easy to tell the difference between <code>( )</code> and <code>⟨ ⟩</code></p>",
        "id": 257213761,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634049539
    },
    {
        "content": "<p>How do I go from the IO FFI monad stuff to the pure data? This is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"bp\">←</span> <span class=\"n\">initHasher</span>\n    <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"bp\">←</span> <span class=\"n\">hasherUpdate</span> <span class=\"n\">hasher</span> <span class=\"n\">input</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">input.size</span><span class=\"o\">)</span>\n    <span class=\"n\">hasherFinalize</span> <span class=\"n\">hasher</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">BLAKE3_OUT_LEN</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">output.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span>\n  <span class=\"k\">then</span> <span class=\"n\">output.data</span>\n  <span class=\"k\">else</span> <span class=\"n\">panic</span> <span class=\"s2\">\"Incorrect output size\"</span>\n</code></pre></div>",
        "id": 257214776,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634049933
    },
    {
        "content": "<p>You need to return <code>IO Blake3Hash</code> if you are using IO functions</p>",
        "id": 257220004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634051854
    },
    {
        "content": "<p>Possibly you can cheat and make some non-IO extern functions if you have reason to believe they are pure</p>",
        "id": 257220121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634051892
    },
    {
        "content": "<p>You can also cheat even more and assume the FFI already returns the subtype with the proof, though this specific runtime check doesn't exactly look costly</p>",
        "id": 257220580,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634052092
    },
    {
        "content": "<p>How do I do that? These functions are in essence pure, but somewhat stateful on the hasher. They don't do any real IO operations.</p>",
        "id": 257222773,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634052884
    },
    {
        "content": "<p>Can I remove the IO monad from the FFI calls? That lead to errors previously.</p>",
        "id": 257223106,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634052998
    },
    {
        "content": "<p><code>IO</code> enforces ordering and exactly-once execution. It looks like this API is using the hasher linearly, so that might not be an issue and you can drop the <code>IO</code>. You need to adjust the called functions of course.</p>",
        "id": 257223377,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634053092
    },
    {
        "content": "<p>Removing IO leads to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"bp\">&gt;</span>   <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hasher</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hasher</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hasher</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n</code></pre></div>",
        "id": 257377380,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634136152
    },
    {
        "content": "<p>Is this because I'm using a constant? How can I ensure the foreign type is Inhabited?</p>",
        "id": 257377555,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634136205
    },
    {
        "content": "<p>You can use <code>PointedType</code> for that, see e.g. <a href=\"https://github.com/leanprover/lean4/blob/66fcfcce3716774dacbd35e1ea0f5c75356df311/tests/compiler/foreign/main.lean#L1-L3\">https://github.com/leanprover/lean4/blob/66fcfcce3716774dacbd35e1ea0f5c75356df311/tests/compiler/foreign/main.lean#L1-L3</a></p>",
        "id": 257378101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634136414
    },
    {
        "content": "<p>That helped. Now I get another error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">71</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">output</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">ByteArray</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">73</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n       <span class=\"bp\">&gt;</span>   <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hash</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt8</span> <span class=\"bp\">//</span> <span class=\"n\">r.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Do I need to declare an Inhabited instance?</p>",
        "id": 257381638,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634137597
    },
    {
        "content": "<p>Yes. There is no trivial Inhabited instance for Subtype since you need to prove something about the element.</p>",
        "id": 257382187,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634137800
    },
    {
        "content": "<p>Btw, do you solely compile on the cmdline :) ? Not in an editor?</p>",
        "id": 257382315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634137841
    },
    {
        "content": "<p>I just use the cmdline for ease.</p>",
        "id": 257406668,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634146769
    },
    {
        "content": "<p>How do I create an Inhabited instance?<br>\nI've tried so far to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">//</span> <span class=\"n\">r.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hash</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">List.replicate</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toByteArray</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I see that Subtype just needs a theorem proving the property of the ByteArray size. What is the simplest way and what is \"the most explicit\" way (For better understanding)?</p>",
        "id": 257459411,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634170790
    },
    {
        "content": "<p>The proof will be rfl, or if not, rely on a theorem that the size of a toBytes of a replicate is what you expect.</p>",
        "id": 257461118,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634171976
    },
    {
        "content": "<p>Presumably you want to fill in the <code>sorry</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.to_ByteArray_size</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L.toByteArray.size</span> <span class=\"bp\">=</span> <span class=\"n\">L.length</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">//</span> <span class=\"n\">r.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hash</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">List.replicate</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toByteArray</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 257461369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634172134
    },
    {
        "content": "<p>The API for <code>ByteArray</code> is missing essentially everything for proving things about it, as it hasn't been needed much yet. But the missing pieces are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ByteArray.size_empty</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray.empty.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ByteArray.size_push</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B.push</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">B.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">B</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ByteArray.push</span><span class=\"o\">,</span> <span class=\"n\">ByteArray.size</span><span class=\"o\">,</span> <span class=\"n\">Array.size_push</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.to_ByteArray_size</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L.toByteArray.size</span> <span class=\"bp\">=</span> <span class=\"n\">L.length</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.toByteArray</span><span class=\"o\">,</span> <span class=\"n\">to_ByteArray_loop_size</span><span class=\"o\">]</span>\n<span class=\"n\">where</span> <span class=\"n\">to_ByteArray_loop_size</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List.toByteArray.loop</span> <span class=\"n\">L</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">L.length</span> <span class=\"bp\">+</span> <span class=\"n\">B.size</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.toByteArray.loop</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.toByteArray.loop</span><span class=\"o\">,</span> <span class=\"n\">to_ByteArray_loop_size</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">//</span> <span class=\"n\">r.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Blake3Hash</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">List.replicate</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toByteArray</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 257462832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634173218
    },
    {
        "content": "<p>(The proof of any obvious fact that conceivably could be proved by <code>simp</code> should be proved by <code>simp</code>, and if <code>simp</code> doesn't do it, you should add the missing <code>@[simp]</code> lemmas! :-)</p>",
        "id": 257462898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634173258
    },
    {
        "content": "<p>I would guess that <code>(List.replicate BLAKE3_OUT_LEN 0).toByteArray</code> is not a good way to initialize an array. Is there an <code>Array.mk</code>?</p>",
        "id": 257465276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634175032
    },
    {
        "content": "<p>Unfortunately <code>lean_alloc_sarray</code> is not exposed to lean</p>",
        "id": 257465704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634175386
    },
    {
        "content": "<p>The best function I can write with the current API is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ByteArray.fromElem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"n\">empty</span>\n</code></pre></div>",
        "id": 257466549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634175886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> there is <code>Array.mkEmpty</code> if you want to pre-allocate an array of a given size.</p>",
        "id": 257473688,
        "sender_full_name": "Mac",
        "timestamp": 1634181919
    },
    {
        "content": "<p>That's not a scalar array though; you have to reallocate and copy everything over to turn it into a <code>ByteArray</code></p>",
        "id": 257473767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634181965
    },
    {
        "content": "<p><code>ByteArray.mkEmpty</code> then :) ?</p>",
        "id": 257484071,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634191328
    },
    {
        "content": "<p><code>mkWithCapacity</code> would also be nice</p>",
        "id": 257484107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634191376
    },
    {
        "content": "<p>I'm not sure there are good use cases for <code>ByteArray.mk</code> in general. As you said, one should stick with scalar arrays from the beginning instead of converting to and from boxed arrays.</p>",
        "id": 257484509,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634191700
    },
    {
        "content": "<p>I think <code>ByteArray.mk</code> is fine, like <code>toByteArray</code>; it's a conversion function in case you have an <code>Array UInt8</code> and need a <code>ByteArray</code></p>",
        "id": 257489583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195355
    },
    {
        "content": "<p>it's just not the first function you should reach for</p>",
        "id": 257489607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195370
    },
    {
        "content": "<p>How do I use the hypothesis <code>h</code> in the <code>then</code> branch to ensure that this type checks?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"o\">:=</span> <span class=\"n\">initHasher</span>\n  <span class=\"k\">let</span> <span class=\"n\">hasher</span> <span class=\"o\">:=</span> <span class=\"n\">hasherUpdate</span> <span class=\"n\">hasher</span> <span class=\"n\">input</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">input.size</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"o\">:=</span> <span class=\"n\">hasherFinalize</span> <span class=\"n\">hasher</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNat</span> <span class=\"n\">BLAKE3_OUT_LEN</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">output.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"k\">then</span>\n    <span class=\"n\">output</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">panic</span> <span class=\"s2\">\"Incorrect output size\"</span>\n</code></pre></div>",
        "id": 257520876,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634211897
    },
    {
        "content": "<p>If you e.g. use a <code>_</code> placeholder or open a tactic block in the then branch, you should see that <code>h</code> is in the context with the expected type. I <em>highly</em> recommend using an editor extension to incrementally and interactively develop Lean code :) .</p>",
        "id": 257525276,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634214237
    }
]