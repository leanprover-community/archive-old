[
    {
        "content": "<p>I have some data that I want to verify that has certain property before it can be compiled.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">user_data</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">()</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TTT</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">user_data</span> <span class=\"bp\">=</span> <span class=\"n\">Option.none</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">TTT</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TTT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span>\n  <span class=\"bp\">?</span><span class=\"n\">how</span>\n  <span class=\"c1\">-- sym rfl</span>\n\n<span class=\"c1\">-- example : decide $ ¬ (user_data = Option.none) := true</span>\n\n\n<span class=\"c1\">-- #synth Not (DecidableEq user_data Option.none)</span>\n</code></pre></div>",
        "id": 291021593,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658921977
    },
    {
        "content": "<p>Is that possible?</p>",
        "id": 291021611,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658921991
    },
    {
        "content": "<p>I think there is a generated function called like <code>Option.decidablexxxxx</code> for every inductive type</p>",
        "id": 291021919,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922222
    },
    {
        "content": "<p>I only need to deal with trivial case, where running the code will get the proof.</p>",
        "id": 291022095,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922362
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TTT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 291022161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658922407
    },
    {
        "content": "<p>thanks!</p>",
        "id": 291022323,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922511
    },
    {
        "content": "<p>How do I learn all tactics</p>",
        "id": 291022341,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as resolved.</p>",
        "id": 291022429,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658922592
    },
    {
        "content": "<p>I think the best approximation to a list of all tactics we have right now is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html\">https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html</a></p>",
        "id": 291022575,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658922679
    },
    {
        "content": "<p><code>decide</code> is not on that list</p>",
        "id": 291022611,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922716
    },
    {
        "content": "<p>Right, I think only it, <code>native_decide</code>, and <code>match</code> are missing</p>",
        "id": 291022770,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658922817
    },
    {
        "content": "<p>what's the difference?</p>",
        "id": 291022937,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658922911
    },
    {
        "content": "<p><code>decide</code> uses kernel reduction, <code>native_decide</code> code generation. Thus the latter can be much faster, but comes with a much larger Trusted Code Base.</p>",
        "id": 291023172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658923051
    },
    {
        "content": "<p>Trusted Code Base is... including the code generation?</p>",
        "id": 291023304,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658923122
    },
    {
        "content": "<p>The compiler in general if you use native_decide yeah.</p>",
        "id": 291023607,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658923293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20How.20to.20assert.20at.20compile-time/near/291022770\">said</a>:</p>\n<blockquote>\n<p>Right, I think only it, <code>native_decide</code>, and <code>match</code> are missing</p>\n</blockquote>\n<p><code>conv</code> appears to be missing as well.</p>",
        "id": 291129771,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658970449
    },
    {
        "content": "<p><code>conv</code> has its own page <a href=\"https://leanprover-community.github.io/mathlib4_docs//Init/Conv.html\">https://leanprover-community.github.io/mathlib4_docs//Init/Conv.html</a></p>",
        "id": 291130192,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658970952
    }
]