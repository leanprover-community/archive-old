[
    {
        "content": "<p>What would be a good way to define tensor product notation that would allow for <code>x ⊗ y</code> for a tensor product between two elements and <code>X ⊗ Y</code> for a tensor product between two vector spaces?</p>",
        "id": 321310728,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673681880
    },
    {
        "content": "<p>Approach 1 - using <code>infix</code> notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">TensorProduct.instVec</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"c1\">-- × has priority 35, we want X × Y ⊗ Z to bracket as X × (Y ⊗ Z)</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">36</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"c1\">-- * has priority 70, we want c * x ⊗ y to bracket as c * (x ⊗ y)</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TensorProduct.tprod</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"c1\">-- error: ambiguous, possible interpretations</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This has problem that pure <code>X ⊗ Y</code> causes ambiguity. It would probably cause problems all over the place.</p>",
        "id": 321310851,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673681982
    },
    {
        "content": "<p>Approach 2 - using <code>elab</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">TensorProduct.instVec</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"⊗\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xval</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">yval</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">`</span><span class=\"n\">TensorProduct</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xval</span><span class=\"o\">,</span><span class=\"n\">yval</span><span class=\"o\">,</span><span class=\"n\">none</span><span class=\"o\">,</span><span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">TensorProduct.tprod</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xval</span><span class=\"o\">,</span><span class=\"n\">yval</span><span class=\"o\">]</span>\n  <span class=\"n\">pure</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>Is there a way to have priority of 71 for <code>x ⊗ y</code> and priority 36 for <code>X ⊗ Y</code>? I expect that it is not possible, because at the moment of parsing you do not know if you do product between elements or types.</p>",
        "id": 321311074,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673682133
    },
    {
        "content": "<p>Approach 3 - attempt at using class <code>OTimes</code> similar to <code>HAdd</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">TensorProduct.instVec</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OTimes</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OTimes.otimes</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- hack</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- hack</span>\n    <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">⊗</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"c1\">-- mismatch</span>\n</code></pre></div>\n<p>This seems to fail on many levels and I have no clue how to remedy it.</p>",
        "id": 321311211,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673682261
    },
    {
        "content": "<p>I would claim that this is a bad idea for the same reason that unifying <code>A × B</code> and <code>(a, b)</code> is a bad idea</p>",
        "id": 321312494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673683264
    },
    {
        "content": "<p>But why is it a bad idea? On paper people do it all the time. At least for <code>⊗</code> not for <code>×</code>.</p>",
        "id": 321312706,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673683406
    },
    {
        "content": "<p>On paper parsing can rely on the variable name. Lower case letters are values and upper case letters are types. But telling a computer to rely on that is a bad idea (I'm talking about you, Haskell).</p>",
        "id": 321312827,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673683502
    },
    {
        "content": "<p>And Haskell uses (a,b) for both tuples and the product type.</p>",
        "id": 321312868,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673683538
    },
    {
        "content": "<p>For <code>×</code> you might get into a trouble that you do not know if <code>A × B</code> means <code>A × B : Type</code> or <code>A × B : Type × Type</code>, this can't happen for <code>⊗</code> as <code>Type ⊗ Type</code> does not make sense.</p>",
        "id": 321312875,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673683542
    },
    {
        "content": "<p>If you define <code>[Vec Type]</code> it would, right? Not saying that it is a good thing to do though</p>",
        "id": 321312985,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673683591
    },
    {
        "content": "<p>Can you actually define <code>[Vec Type]</code>? As I mentioned, on paper <code>x ⊗ y</code> and <code>X ⊗ Y</code> are both used and I never got confused by it, so I do not see why a computer should get confused by it.</p>",
        "id": 321313159,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673683718
    },
    {
        "content": "<p>So parsing would have to rely on what typeclass there is in the context? That's a really courageous decision. I think there is a miraculous chance that you can make everything work out, but pragmatically it causes trouble.</p>",
        "id": 321313169,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673683723
    },
    {
        "content": "<blockquote>\n<p>So parsing would have to rely on what typeclass there is in the context?</p>\n</blockquote>\n<p>Is that the case in approach 1 &amp; 2? I do not see that.</p>",
        "id": 321313265,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673683802
    },
    {
        "content": "<p>The case where I can see this being problematic is where <code>x</code> has a <code>CoeSort</code> instance associated with it</p>",
        "id": 321313326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673683831
    },
    {
        "content": "<p>Admittedly I can't think of any case where such an <code>x</code> is also a vector space, but the <code>CoeSort</code> is enough to get annoying error messages when Lean guesses wrong</p>",
        "id": 321313409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673683892
    },
    {
        "content": "<p>Isn't this sort of the same as <code> α × β</code> vs <code>s ×ˢ t</code>? The latter certainly could be <code>s × t</code>, even considering <code>CoeSort</code></p>",
        "id": 321317327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673686237
    },
    {
        "content": "<p>The fact that this is commonplace in the human literature and that lean can't do it is pretty depressing</p>",
        "id": 321318263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673686810
    },
    {
        "content": "<p>I don't think this sort of thing is impossible to do in lean 4 with enough elbow grease. I think it's not advisable though</p>",
        "id": 321318835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673687158
    },
    {
        "content": "<p>you already get a decent approximation out of the box using overloaded notation, you just have to make sure that the vector space assumptions or whatever aren't available on <code>Type</code></p>",
        "id": 321319020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673687235
    },
    {
        "content": "<p>I will keep using the approach 2 and let's see what kind of problems I get myself into.</p>",
        "id": 321323378,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673689369
    },
    {
        "content": "<p>I think the amount of work required to make it work well should be enough to fill a master thesis.</p>",
        "id": 321333966,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673693940
    },
    {
        "content": "<p>Coq already has something like this</p>",
        "id": 321348005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673698965
    },
    {
        "content": "<p>I forget exactly how it works, but you can define notation that only applies when Coq is expecting a certain type of thing</p>",
        "id": 321348253,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673699062
    },
    {
        "content": "<p>I think it's vaguely similar to Lean 4's syntactic categories</p>",
        "id": 321348280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673699081
    },
    {
        "content": "<p><a href=\"https://coq.inria.fr/refman/user-extensions/syntax-extensions.html#notation-scopes\">https://coq.inria.fr/refman/user-extensions/syntax-extensions.html#notation-scopes</a></p>",
        "id": 321349402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673699551
    },
    {
        "content": "<p>I've seen it used to write e.g. <code>C -&gt; D</code> for functors from <code>C</code> to <code>D</code></p>",
        "id": 321349448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673699575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.8A.97.20notation.20for.20types.20and.20elements/near/321333966\">said</a>:</p>\n<blockquote>\n<p>I think the amount of work required to make it work well should be enough to fill a master thesis.</p>\n</blockquote>\n<p>Do you have an example where my second approach fails? I'm having a hard time seeing why is the problem so hard.</p>",
        "id": 321353466,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1673701310
    },
    {
        "content": "<p>A very simple example is when you are talking about monoidal structure on 2-categories.</p>",
        "id": 321356216,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673702587
    },
    {
        "content": "<p>Of course you can just say we're not gonna use the tensor notation there. But similarly we can just avoid using tensor notation on elements here.</p>",
        "id": 321356289,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673702627
    },
    {
        "content": "<p>Here's a version that mixes aspects of methods 2 and 3 to avoid inserting a typeclass function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OTimes</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"⊗\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">OTimes</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">)))</span>\n  <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.tprod</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"c1\">-- TensorProduct X Y : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span> <span class=\"c1\">-- TensorProduct.tprod x y : TensorProduct X Y</span>\n</code></pre></div>",
        "id": 321358639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673703668
    },
    {
        "content": "<p>OOC, is there a reason not to do something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">TensorProduct.instVec</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"n\">opaque</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OTimes</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OTimes.otimes</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:=</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">OTimes</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">⊗</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">otimes</span> <span class=\"o\">:=</span> <span class=\"n\">TensorProduct.tprod</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"c1\">-- TensorProduct X Y : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span> <span class=\"c1\">-- TensorProduct.tprod x y : TensorProduct X Y</span>\n</code></pre></div>",
        "id": 321379948,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673713037
    },
    {
        "content": "<p>well your gloss on the <code>#check</code>s aren't quite correct, it actually says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"c1\">-- X ⊗ Y : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span> <span class=\"c1\">-- x ⊗ y : X ⊗ Y</span>\n</code></pre></div>\n<p>and if we turn off notation that is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span> <span class=\"c1\">-- OTimes.otimes X Y : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">⊗</span> <span class=\"n\">y</span> <span class=\"c1\">-- OTimes.otimes x y : OTimes.otimes X Y</span>\n</code></pre></div>",
        "id": 321385279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673715531
    },
    {
        "content": "<p>so the difference is that your version introduces an <code>otimes</code> function, while mine leaves no trace of the otimes machinery and unfolds directly to <code>TensorProduct</code> or <code>TensorProduct.tprod</code>, kind of like how coercion works</p>",
        "id": 321385479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673715615
    },
    {
        "content": "<p>right, so it's awkward to retrofit a new notation type class onto the existing tensor product API</p>",
        "id": 321385802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673715762
    },
    {
        "content": "<p>hm. so even though it is definitionally equal to to the TensorProduct/tprod, you'd have to go back and use the otimes notation in the API so that everything has a nice simp-normal form? or is there a different concern with the notation class</p>",
        "id": 321386110,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673715919
    },
    {
        "content": "<p>Yes, or just to rewrite with existing lemmas</p>",
        "id": 321402949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673725814
    }
]