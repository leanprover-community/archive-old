[
    {
        "content": "<p>What does the purple subscript uparrow mean?  (Apparently it's <code>\\textdied</code> in Lean input mode...)<br>\n<a href=\"/user_uploads/3121/m4qBwshTmNY2iUyNUWjpZ4l6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/m4qBwshTmNY2iUyNUWjpZ4l6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/m4qBwshTmNY2iUyNUWjpZ4l6/image.png\"></a></div>",
        "id": 229036250,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614983849
    },
    {
        "content": "<p>It's a cross: <span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>️. Those indicate names which are inaccessible by the user. See e.g. <a href=\"#narrow/stream/113488-general/topic/Come.20on/near/226307180\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Come.20on/near/226307180</a></p>",
        "id": 229036672,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614984071
    },
    {
        "content": "<p>Thanks.  The name isn't inaccessible to the user, though, it just doesn't exist in the context where Lean is performing unification, I think...</p>",
        "id": 229037269,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614984389
    },
    {
        "content": "<p>The binding of the motive Gamma was inserted implicitly and is therefore inaccessible. Not sure about the unification error itself, it's too late for that here...</p>",
        "id": 229038341,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614985014
    },
    {
        "content": "<p>I'm having a similar issue with the cross, trying to prove the following (MWE):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">int.norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">int.succ</span> <span class=\"o\">(</span><span class=\"n\">int.pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">int.pred</span> <span class=\"o\">(</span><span class=\"n\">int.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">int.succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.succ</span> <span class=\"o\">(</span><span class=\"n\">int.norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">int.pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.pred</span> <span class=\"o\">(</span><span class=\"n\">int.norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">int.zero</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">int.succ</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">int.pred</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">int.succ</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">int.pred</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">int.norm</span>\n<span class=\"kd\">def</span> <span class=\"n\">intn</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">int.norm</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">):</span> <span class=\"n\">int.norm</span> <span class=\"o\">(</span><span class=\"n\">int.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int.norm</span> <span class=\"o\">(</span><span class=\"n\">int.norm</span> <span class=\"o\">(</span><span class=\"n\">int.succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic State:</span>\n<span class=\"cm\">case succ</span>\n<span class=\"cm\">a✝ : int</span>\n<span class=\"cm\">v_0✝ : int.norm (int.succ a✝) = int.norm (int.norm (int.succ a✝))</span>\n<span class=\"cm\">⊢ int.norm (int.succ (int.succ a✝)) = int.norm (int.norm (int.succ (int.succ a✝)))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>How I am supposed to prove this without having the variables accessible?</p>",
        "id": 237426206,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620177208
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237427365,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620178067
    },
    {
        "content": "<p>See <a href=\"https://raw.githubusercontent.com/IPDSnelting/tba-2021/master/slides/lecture4.pdf#page=26\">https://raw.githubusercontent.com/IPDSnelting/tba-2021/master/slides/lecture4.pdf#page=26</a>, last slide and preceding slides. You can name them using either induction-with or <code>case</code> (recent nightly).</p>",
        "id": 237447244,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620196397
    },
    {
        "content": "<p>The alternative we did <em>not</em> mention in the course is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">tactic.hygienic</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>as well as the <code>unhygienic</code> tactic combinator</p>",
        "id": 237447315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620196450
    }
]