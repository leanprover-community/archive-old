[
    {
        "content": "<p>I just did a proof on the well foundedness of merge sort with a match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">zs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">split</span> <span class=\"n\">zs</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">split_wf_match</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">spl</span> <span class=\"o\">:=</span> <span class=\"n\">split</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">zs</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">spl.fst.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">spl.snd.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">zs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">split</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">split</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">helper</span> <span class=\"o\">:=</span> <span class=\"n\">split_wf_match</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">cs</span>\n      <span class=\"n\">simp_all_arith</span><span class=\"o\">[</span><span class=\"n\">split</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">helper.left</span>\n      <span class=\"n\">simp_arith</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">helper.right</span>\n      <span class=\"n\">simp_arith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mergeSort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ls</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">lss</span> <span class=\"o\">:=</span> <span class=\"n\">split</span> <span class=\"n\">ls</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"n\">ls</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">zs</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">helper</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">split_wf_match</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">zs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n      <span class=\"n\">simp_all</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"n\">ls</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">zs</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">helper</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">split_wf_match</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">zs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n      <span class=\"n\">simp_all</span>\n    <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergeSort</span> <span class=\"n\">lss.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mergeSort</span> <span class=\"n\">lss.snd</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">mergeSort</span> <span class=\"n\">ls</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ls.length</span>\n</code></pre></div>\n<p>I'm a little unhappy in how the inductive case of split_wf_match is presented, it's so unstructured but that's fine.</p>\n<p>However the thing that bothers me more is, that I was struggling quite a lot to proof this theorem in tactic mode because I wasn't quite able to get an induction hypothesis that seemed sensible to me, can someone show how this would be done properly in tactic mode?</p>",
        "id": 279647255,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650527630
    },
    {
        "content": "<p>You'd probably want to define your \"even elements\" induction method explicitly so you can use it with <code>induction ... using</code>, similarly to <a href=\"https://github.com/leanprover/lean4/blob/e1fbfb677eea4088e38a22a8e136b11d9b1f8498/src/Init/Data/AC.lean#L107-L119\">https://github.com/leanprover/lean4/blob/e1fbfb677eea4088e38a22a8e136b11d9b1f8498/src/Init/Data/AC.lean#L107-L119</a></p>",
        "id": 279648019,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650528114
    },
    {
        "content": "<p>Eventually we want to have support for synthesizing an induction method from a recursive definition, so that when you want to prove something about a recursive function <code>foo</code>, <code>induction ... using foo.induct</code> is almost always the right call (like in Isabelle).</p>",
        "id": 279648135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650528197
    },
    {
        "content": "<p>Ah so it wasn't my incapability to use induction that's good to hear^^, thanks!</p>",
        "id": 279648311,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650528349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 279648379,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650528369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Tactic.20mode.20for.20mergesort/near/279648135\">said</a>:</p>\n<blockquote>\n<p>Eventually we want to have support for synthesizing an induction method from a recursive definition, so that when you want to prove something about a recursive function <code>foo</code>, <code>induction ... using foo.induct</code> is almost always the right call (like in Isabelle).</p>\n</blockquote>\n<p>I was wondering about doing a case split on the equations of a definition -- is that possible yet, or would it need to wait until this feature is implemented?</p>",
        "id": 280757889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651355183
    },
    {
        "content": "<p>I've done this in other proofs of cpdt with the <code>split</code> tactic though leo mentioned in some other thread today that he is currently reworking match stuff so maybe its not working right now. For example in this theorem: <a href=\"https://github.com/hargoniX/cpdt-lean/blob/266a8506ca9c856d0051177ff2d72eee68ee5d73/Cpdt/Chapter5/Typechecker.lean#L60-L81\">https://github.com/hargoniX/cpdt-lean/blob/266a8506ca9c856d0051177ff2d72eee68ee5d73/Cpdt/Chapter5/Typechecker.lean#L60-L81</a> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 280758818,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651356541
    },
    {
        "content": "<p>Oh, I see, I had guessed <code>split</code> could be used but didn't know how to invoke it for this, but if you <code>unfold</code> the definition first you can then <code>split</code> the match expression. Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 280759011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651356814
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 280759409,
        "sender_full_name": "Denis Stoyanov",
        "timestamp": 1651357429
    }
]