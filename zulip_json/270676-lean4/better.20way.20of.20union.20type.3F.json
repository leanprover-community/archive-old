[
    {
        "content": "<p>Is there a better way of doing this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ValT</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">ValT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">ValT</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">RPN</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ValT</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n</code></pre></div>\n<p>to have <code>val</code> be a constructor that takes in an <code>Int</code> or <code>Float</code> without a second inductive?</p>",
        "id": 280891743,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506470
    },
    {
        "content": "<p>Your <code>ValT</code> is essentially a sum type, so it's the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RPN</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">⊕</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n</code></pre></div>",
        "id": 280892172,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1651506641
    },
    {
        "content": "<p>Thanks</p>",
        "id": 280892508,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506795
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"329243\">@Horatiu Cheval</span> is right. <br>\nNote that, <code>Int ⊕ Float</code> is a notation for <code>Sum Int Float</code>. <br>\nThat being said, I often prefer the version using <code>ValT</code>, the constructor names and type names often make the code easier to maintain.</p>",
        "id": 280892510,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651506795
    },
    {
        "content": "<p>You are probably right</p>",
        "id": 280892562,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506818
    },
    {
        "content": "<p>I also have a small metaprogramming error. I was following the <code>Arith</code> tutorial, and this is my code so far,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ValT</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">ValT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">ValT</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">RPN</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ValT</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[rpn| \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">RPN.val</span> <span class=\"o\">(</span><span class=\"n\">ValT.int</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(im making my own variation)<br>\nbut in the first tule of the <code>macro_rules</code>, im getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">num'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">rpn'</span> <span class=\"n\">or</span> <span class=\"n\">numeral</span>\n</code></pre></div>",
        "id": 280892731,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506882
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 280892737,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892510\">said</a>:</p>\n<blockquote>\n<p>Yes, <span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> is right. <br>\nNote that, <code>Int ⊕ Float</code> is a notation for <code>Sum Int Float</code>. <br>\nThat being said, I often prefer the version using <code>ValT</code>, the constructor names and type names often make the code easier to maintain.</p>\n</blockquote>\n<p>In what situations would you prefer <code>Sum</code> over custom <code>inductive</code>s?</p>",
        "id": 280892759,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651506897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892737\">said</a>:</p>\n<blockquote>\n<p>Any ideas?</p>\n</blockquote>\n<p>the <code>numLit</code> parser is now also called <code>num</code></p>",
        "id": 280892817,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651506923
    },
    {
        "content": "<p>oh</p>",
        "id": 280892834,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506934
    },
    {
        "content": "<p>Then the tutorial needs to be updated</p>",
        "id": 280892862,
        "sender_full_name": "Joseph O",
        "timestamp": 1651506953
    },
    {
        "content": "<p>Using <code>Sum</code>, would this be valid?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RPN</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">⊕</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[rpn| \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">RPN.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280893004,
        "sender_full_name": "Joseph O",
        "timestamp": 1651507008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892759\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892510\">said</a>:</p>\n<blockquote>\n<p>Yes, <span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> is right. <br>\nNote that, <code>Int ⊕ Float</code> is a notation for <code>Sum Int Float</code>. <br>\nThat being said, I often prefer the version using <code>ValT</code>, the constructor names and type names often make the code easier to maintain.</p>\n</blockquote>\n<p>In what situations would you prefer <code>Sum</code> over custom <code>inductive</code>s?</p>\n</blockquote>\n<p>I rarely use <code>Sum</code>. I just checked the Lean 4 codebase, and we used it in very few places. One problem is that if we have more than two cases,  the patterns are inconvenient to write and the code looks cryptic. Example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">⊕</span> <span class=\"n\">Int</span> <span class=\"bp\">⊕</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"nat\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"int\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bool\"</span>\n</code></pre></div>\n<p>I think better notation could address this issue, and the decision would be similar to the <code>Prod</code> vs. custom structure. I often regret using <code>Prod</code> for bigger tuples instead of a structure when maintaining the code later :)<br>\nOne place where we found <code>Sum</code> (actually <code>PSum</code>) very useful is for auto-generated code. If you print mutual definitions where we show termination using well-founded recursion, you will find the <code>PSum</code>s we use in our encoding.</p>",
        "id": 280894588,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651507633
    },
    {
        "content": "<p>for some reason when i uncomment the commented line here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"c1\">-- syntax rpn+ : rpn</span>\n</code></pre></div>\n<p>it crashes the server</p>",
        "id": 280894924,
        "sender_full_name": "Joseph O",
        "timestamp": 1651507802
    },
    {
        "content": "<p>I want to handle things like <code>%rpn( 1 2 3 4 )</code></p>",
        "id": 280895586,
        "sender_full_name": "Joseph O",
        "timestamp": 1651507953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280894924\">said</a>:</p>\n<blockquote>\n<p>for some reason when i uncomment the commented line here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"c1\">-- syntax rpn+ : rpn</span>\n</code></pre></div>\n<p>it crashes the server</p>\n</blockquote>\n<p>Could you please try with the latest nightly build? I didn't manage to reproduce the crash.</p>",
        "id": 280895805,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651508024
    },
    {
        "content": "<p>I am using <code>leanprover/lean4:nightly-2022-04-28</code></p>",
        "id": 280895985,
        "sender_full_name": "Joseph O",
        "timestamp": 1651508111
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_OM1aU2KnN3eoPt-2-pWB_Zk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_OM1aU2KnN3eoPt-2-pWB_Zk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_OM1aU2KnN3eoPt-2-pWB_Zk/image.png\"></a></div>",
        "id": 280896021,
        "sender_full_name": "Joseph O",
        "timestamp": 1651508136
    },
    {
        "content": "<p>Ok, your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is not just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n</code></pre></div>",
        "id": 280896116,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651508176
    },
    {
        "content": "<p>Ok here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RPN</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">RPN</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"%rpn( \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">RPN.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">RPN.add</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">RPN.mul</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280896156,
        "sender_full_name": "Joseph O",
        "timestamp": 1651508207
    },
    {
        "content": "<p>It is a stack overflow when parsing <code>#check %rpn(1 2 3 4 5)</code>. The problem is the command <code>syntax rpn+ : rpn</code>. We should produce an error message in this case since this kind of parser will always produce a stack overflow.</p>",
        "id": 280897658,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651508973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> I faced this same issue and Mario helped me with <a href=\"https://github.com/arthurpaulino/FxyLang/blob/afcd0db77d320438d625bac9cb8cf55413c47e52/FxyLang/Implementation/Syntax.lean#L35\">this solution</a></p>\n<p>The idea is to create a syntax category specifically for sequences of syntax items of the same structure</p>",
        "id": 280901704,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651510799
    },
    {
        "content": "<p>There are many ways to encode this kind of example in Lean. Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Atom</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RPN</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Atom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">RPN</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>          <span class=\"n\">vs</span>             <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">vs</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">val</span>         <span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">rpn</span><span class=\"o\">,</span> <span class=\"n\">vs</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">rpn</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">::</span> <span class=\"n\">rpn</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"o\">::</span> <span class=\"n\">v₂</span> <span class=\"o\">::</span> <span class=\"n\">vs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">rpn</span> <span class=\"o\">((</span><span class=\"n\">v₁</span><span class=\"bp\">+</span><span class=\"n\">v₂</span><span class=\"o\">)::</span><span class=\"n\">vs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">::</span> <span class=\"n\">rpn</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"o\">::</span> <span class=\"n\">v₂</span> <span class=\"o\">::</span> <span class=\"n\">vs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">rpn</span> <span class=\"o\">((</span><span class=\"n\">v₁</span><span class=\"bp\">*</span><span class=\"n\">v₂</span><span class=\"o\">)::</span><span class=\"n\">vs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>           <span class=\"n\">_</span>              <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"insufficient args\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"%rpn( \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">))</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.add</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.mul</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">))</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280901951,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651510876
    },
    {
        "content": "<p>Wow thanks</p>",
        "id": 280902221,
        "sender_full_name": "Joseph O",
        "timestamp": 1651511004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892862\">said</a>:</p>\n<blockquote>\n<p>Then the tutorial needs to be updated</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>  Go ahead and make a brief pull request!</p>",
        "id": 281016837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651586404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/281016837\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/280892862\">said</a>:</p>\n<blockquote>\n<p>Then the tutorial needs to be updated</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span>  Go ahead and make a brief pull request!</p>\n</blockquote>\n<p>Done :)</p>",
        "id": 281038034,
        "sender_full_name": "Joseph O",
        "timestamp": 1651594715
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I added a small thing to the syntax to embed terms, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"%rpn( \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">))</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"o\">))</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">e</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.add</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.mul</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">))</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>yet </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">e</span><span class=\"bp\">✝'</span>\n\n<span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"n\">code</span> <span class=\"n\">because</span> <span class=\"bp\">'</span><span class=\"n\">_eval._lambda_1'</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">contains</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>Why is this happening?</p>",
        "id": 281038555,
        "sender_full_name": "Joseph O",
        "timestamp": 1651594950
    },
    {
        "content": "<p>It looks like you forgot a <code>$</code> in front of <code>e</code> in <code> `([e]) </code></p>",
        "id": 281040135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651595573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/281040135\">said</a>:</p>\n<blockquote>\n<p>It looks like you forgot a <code>$</code> in front of <code>e</code> in <code> `([e]) </code></p>\n</blockquote>\n<p>Oh my bad. Then I assume the guide forgot one too</p>",
        "id": 281040501,
        "sender_full_name": "Joseph O",
        "timestamp": 1651595728
    },
    {
        "content": "<p>Nevermind</p>",
        "id": 281040722,
        "sender_full_name": "Joseph O",
        "timestamp": 1651595817
    },
    {
        "content": "<p>Thanks</p>",
        "id": 281040723,
        "sender_full_name": "Joseph O",
        "timestamp": 1651595820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 281040738,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651595823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 281045073,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651597594
    },
    {
        "content": "<p>Just one small thing, using the exact same code from above, it doesn't let me have an embedded term in the middle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"sc\">')'</span>\n</code></pre></div>\n<p>any ideas?</p>",
        "id": 281045167,
        "sender_full_name": "Joseph O",
        "timestamp": 1651597642
    },
    {
        "content": "<p>How does the notation accept multiple numbers? If that part is clear to you, you should be able to solve this issue by yourself.</p>",
        "id": 281046667,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651598287
    },
    {
        "content": "<p>I dont know. The syntaxes for both look almost identical:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n</code></pre></div>",
        "id": 281046768,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598344
    },
    {
        "content": "<p>even in the macro_rules</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">))</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"o\">))</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 281046793,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598361
    },
    {
        "content": "<p>Oh wait</p>",
        "id": 281046830,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598380
    },
    {
        "content": "<p>Nevermind, I see it now</p>",
        "id": 281046844,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598385
    },
    {
        "content": "<p>actually implementing the rule produces the same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 281047043,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"sc\">')'</span>\n</code></pre></div>",
        "id": 281047296,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598568
    },
    {
        "content": "<p>Yes, the rule is one part, but it doesn't by itself change what syntax the parser accepts. There is another requisite part.</p>",
        "id": 281047521,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651598661
    },
    {
        "content": "<p>I found it</p>",
        "id": 281047582,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598697
    },
    {
        "content": "<p>Yup I fixed it, Thanks</p>",
        "id": 281047628,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598732
    },
    {
        "content": "<p>Do we have a function in lean 4 that take a list of strings and converts and joins it with a seperator?</p>",
        "id": 281047734,
        "sender_full_name": "Joseph O",
        "timestamp": 1651598771
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/String/Basic.html#String.intercalate\">String.intercalate</a>?</p>",
        "id": 281047938,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1651598870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> feel free to copy it:<br>\n<a href=\"https://github.com/arthurpaulino/FxyLang/blob/afcd0db77d320438d625bac9cb8cf55413c47e52/FxyLang/Implementation/Parser.lean#L93\">Link</a></p>",
        "id": 281049381,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651599473
    },
    {
        "content": "<p>Oh, that seems to be <code>String.intercalate</code>!</p>",
        "id": 281049652,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651599589
    },
    {
        "content": "<p>And the one in stdlib is even tail recursive \\o/</p>",
        "id": 281049738,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651599603
    },
    {
        "content": "<p>yet intercalate doesnt work for <code>#eval List.intercalate \" \" [\"h\", \"i\"]</code></p>",
        "id": 281050766,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600004
    },
    {
        "content": "<p>Of course not, after all you want the string and not the list variant.</p>",
        "id": 281051271,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651600206
    },
    {
        "content": "<p>Oh right</p>",
        "id": 281051297,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600220
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 281051309,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600224
    },
    {
        "content": "<p>There we go</p>",
        "id": 281051346,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600243
    },
    {
        "content": "<p>Wait no way <code>List.get</code> uses <code>Fin</code> now</p>",
        "id": 281051900,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600471
    },
    {
        "content": "<p>I wonder if the change was because of my Soup project...</p>",
        "id": 281051966,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600499
    },
    {
        "content": "<p>Suggestion on how to make this less repetitive?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"s2\">\"+\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"s2\">\"*\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"%rpn( \"</span> <span class=\"n\">rpn</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">))</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"o\">))</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.add</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">Atom.mul</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">Atom.add</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">Atom.mul</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">))</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">rpn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Atom.val</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 281052532,
        "sender_full_name": "Joseph O",
        "timestamp": 1651600718
    },
    {
        "content": "<p>Anyone?</p>",
        "id": 281067338,
        "sender_full_name": "Joseph O",
        "timestamp": 1651607466
    },
    {
        "content": "<p>Then I guess there is no way (though I doubt that)</p>",
        "id": 281067421,
        "sender_full_name": "Joseph O",
        "timestamp": 1651607505
    },
    {
        "content": "<p>It's possible but you need to rethink your syntax structure to be more general</p>",
        "id": 281067690,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651607628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20of.20union.20type.3F/near/281067690\">said</a>:</p>\n<blockquote>\n<p>It's possible but you need to rethink your syntax structure to be more general</p>\n</blockquote>\n<p>Im pretty new to macros, so I don't know what structure to use. Do you have one in mind?</p>",
        "id": 281068137,
        "sender_full_name": "Joseph O",
        "timestamp": 1651607859
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean\">this file</a> contains some examples with more flexible syntaxes. Check the ones with interrogation marks</p>",
        "id": 281068283,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651607918
    },
    {
        "content": "<p>For example, \"+\" and \"*\" can be grouped in a syntax category \"operator\". And it is optional in your term</p>",
        "id": 281069462,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651608450
    },
    {
        "content": "<p>But I wouldn't bother too much about learning these details at the moment. I heard Sebastian is working on something that might cause some shake up on Lean 4 <code>syntax</code></p>",
        "id": 281069813,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651608609
    },
    {
        "content": "<p>There is no planned change to <code>syntax</code> itself</p>",
        "id": 281069917,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651608665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> can you explain what will be changed? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>🏼</p>",
        "id": 281070109,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651608764
    },
    {
        "content": "<p>It's about making macro programming more type-safe by annotating a <code>Syntax</code> wrapper with the carried syntax kind</p>",
        "id": 281075170,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651610943
    },
    {
        "content": "<p>Ah, then we shouldn't notice too much difference except for those errors that happened when we didn't explicitly say the syntax kind?</p>\n<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> can you show the definition of <code>Atom</code> and <code>++</code> as well?</p>",
        "id": 281075614,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651611165
    },
    {
        "content": "<p>Here's a disastrously longer code that might serve the purpose of teaching about elaboration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Atom</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">declare_syntax_cat</span>    <span class=\"n\">rpn_item</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">rpn_item</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span>          <span class=\"o\">:</span> <span class=\"n\">rpn_item</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rpn_op</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" + \"</span>     <span class=\"o\">:</span> <span class=\"n\">rpn_op</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" * \"</span>     <span class=\"o\">:</span> <span class=\"n\">rpn_op</span>\n\n<span class=\"n\">declare_syntax_cat</span>              <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn_item</span>               <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rpn</span> <span class=\"n\">rpn_item</span> <span class=\"o\">(</span><span class=\"n\">rpn_op</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">rpn</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabItem</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_item</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.val</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Int.ofNat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkNatLit</span> <span class=\"n\">num.toNat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_item</span><span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabOp</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_op</span><span class=\"bp\">|</span> <span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.add</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_op</span><span class=\"bp\">|</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.mul</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elabRPN</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">rpn_item</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">rpn_item</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">o</span><span class=\"o\">:</span><span class=\"n\">rpn_op</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">elabOp</span> <span class=\"n\">o</span><span class=\"o\">]</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.append</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">elabRPN</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.append</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">elabRPN</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"%rpn(\"</span> <span class=\"n\">rpn</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabRPN</span> <span class=\"n\">rpn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">8</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">%</span><span class=\"n\">rpn</span><span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"c1\">-- [Atom.val 8, Atom.val 1, Atom.val 2, Atom.mul]</span>\n</code></pre></div>",
        "id": 281082562,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651614927
    },
    {
        "content": "<p>I think I might stick with mine...</p>",
        "id": 281088042,
        "sender_full_name": "Joseph O",
        "timestamp": 1651617736
    },
    {
        "content": "<p>Like these I dont understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabItem</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_item</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.val</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Int.ofNat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkNatLit</span> <span class=\"n\">num.toNat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_item</span><span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabOp</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_op</span><span class=\"bp\">|</span> <span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.add</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn_op</span><span class=\"bp\">|</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom.mul</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elabRPN</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">rpn_item</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rpn</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">rpn</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">rpn_item</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">o</span><span class=\"o\">:</span><span class=\"n\">rpn_op</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">elabOp</span> <span class=\"n\">o</span><span class=\"o\">]</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.append</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">elabRPN</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">elabItem</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.append</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">elabRPN</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 281088109,
        "sender_full_name": "Joseph O",
        "timestamp": 1651617783
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> your version fails at <code>#eval %rpn([1+2] 3 +)</code></p>",
        "id": 281088924,
        "sender_full_name": "Joseph O",
        "timestamp": 1651618269
    },
    {
        "content": "<p>Alright, not worth debugging at the moment</p>",
        "id": 281089394,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651618544
    }
]