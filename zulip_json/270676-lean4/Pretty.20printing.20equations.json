[
    {
        "content": "<p>Hi. I'm currently working on listing the equations of definitions for doc-gen4, my very naive approach to this was :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Array.insertionSort.swapLoop</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">eqs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqs.mapM</span> <span class=\"o\">(</span><span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">·</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">inferType</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>And this approach does seem to work quite nicely but  once it arrives at <code>Array.insertionSort.swapLoop</code> defined over here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/InsertionSort.html#Array.insertionSort.swapLoop\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/InsertionSort.html#Array.insertionSort.swapLoop</a> it complains about the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">generalize'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">Array.insertionSort.swapLoop</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_1</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">let_fun</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n          <span class=\"n\">Array.insertionSort.swapLoop</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">Array.swap</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">})</span> <span class=\"n\">j'</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.swap</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">}))</span>\n        <span class=\"k\">else</span> <span class=\"n\">a</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.insertionSort.swapLoop</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n    <span class=\"k\">match</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n        <span class=\"n\">Array.insertionSort.swapLoop</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">Array.swap</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">})</span> <span class=\"n\">j'</span>\n          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">Array.swap</span> <span class=\"n\">a</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"o\">}))</span>\n      <span class=\"k\">else</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>And I looked at the code and am entirely confused by this error message because neither in the code for swap loop nor in the entire insertion sort file can I ever see the generalize tactic getting mentioned. Can someone enlighten me on what's going on?</p>",
        "id": 270357076,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643794883
    },
    {
        "content": "<p>The error is not from the definition of <code>Array.insertionSort.swapLoop</code>, it's from the code that generates the equational lemmas.</p>",
        "id": 270359935,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643796269
    },
    {
        "content": "<p>In contrast to Lean 3, equational lemmas are not automatically created when you add a definition but only when they are first used.</p>",
        "id": 270359965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643796294
    },
    {
        "content": "<p>Does <code>attribute [simp] Array.insertionSort.swapLoop</code> also fail with this error?</p>",
        "id": 270360029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643796340
    },
    {
        "content": "<p>You can report that as an issue on the lean 4 bugtracker.</p>",
        "id": 270360118,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643796374
    },
    {
        "content": "<p>Yup it doesnt like that either with the same error.</p>",
        "id": 270360133,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643796383
    },
    {
        "content": "<p>Aight</p>",
        "id": 270360144,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643796390
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/986\">https://github.com/leanprover/lean4/issues/986</a></p>",
        "id": 270360588,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643796631
    },
    {
        "content": "<p>Got another one with todays nightly! xd</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Elab.Term.resolveLocalName.loop</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">eqs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqs.mapM</span> <span class=\"o\">(</span><span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">·</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">inferType</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> shall I open another issue? Should I blacklist this and continue trying to generate so I can catch all that dont work right now?</p>",
        "id": 270597882,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643913959
    },
    {
        "content": "<p>I would turn it into a warning for now (and have the docs say that the equations could not be generated for that definition).  Then we'll have a better idea of how many errors there are.</p>",
        "id": 270601414,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643915322
    },
    {
        "content": "<p>It might also be better to make one issue with all failing declarations.  Generating equation lemmas for definitions in Lean.* is not high priority though since nobody is going to use them with simp.</p>",
        "id": 270601814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643915479
    },
    {
        "content": "<p>Yeah that was my idea with the blacklisting and trying again, I'm seeing  another thing I'm a bit confused after doing this though.... I'm getting a maximum number of heartbeats reached at 100000 despite setting it to a much much higher value here <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Load.lean#L49\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Load.lean#L49</a>. did I missunderstand how exactly heartbeats work?</p>",
        "id": 270602462,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643915758
    },
    {
        "content": "<p>I'm not sure what your model of heartbeats was.  The number you given is for the whole documentation generation, I would try to set it per-file or per-declaration.</p>\n<p>There are also several places which set a lower limit, that's what you're probably seeing.</p>",
        "id": 270604323,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643916598
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/tb8qhCSps88RmWi9E-bIpuGQ/image.png\">image.png</a>  progress <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>, I'll post a list of functions that fail to compute their equational lemmata to the issue tracker tomorrow.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tb8qhCSps88RmWi9E-bIpuGQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tb8qhCSps88RmWi9E-bIpuGQ/image.png\"></a></div>",
        "id": 270632437,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643929622
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/re-nlkWmDleEmCqJZ6_0QH1R/image.png\">image.png</a>  also ehhh...kiiiinda works for bigger stuff but Idk if we want that xd</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/re-nlkWmDleEmCqJZ6_0QH1R/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/re-nlkWmDleEmCqJZ6_0QH1R/image.png\"></a></div>",
        "id": 270632654,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643929717
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/998\">https://github.com/leanprover/lean4/issues/998</a> This is all I could find with reasonably high heartbeat per declaration values, it might be possible that there are hidden some more behind timeouts right now but either way these error expressions are already pretty wild.</p>",
        "id": 270770703,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644007787
    },
    {
        "content": "<p>Also now where I'm done with the equation implementation I'm noticing many functions dont even have equation lemmata at all? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">id</span>\n</code></pre></div>\n<p>Simply returns none, is this expected? Do functions that are defined without case distinction just not get an equation lemma (which would basically be the definition anyways) at all? And if that is the case, should I just print the definition without binders if I get back a <code>none</code> from <code>getEqnsFor?</code>or is there some other case I have to be aware of?</p>",
        "id": 270777298,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644011156
    },
    {
        "content": "<p>Yes, it is expected. Lean only creates equations for definitions where structural or well-founded recursion was used. </p>\n<blockquote>\n<p>And if that is the case, should I just print the definition without binders if I get back a none from getEqnsFor?</p>\n</blockquote>\n<p>Yes. For example, if <code>getEnqnsFor?</code> for <code>foo</code> returns <code>none</code>, then <code>simp [foo]</code> just uses the actual definition.</p>\n<blockquote>\n<p>or is there some other case I have to be aware of?</p>\n</blockquote>\n<p><code>partial</code> definitions should be treated as opaque constants.</p>",
        "id": 270778241,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644011761
    }
]