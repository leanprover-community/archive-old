[
    {
        "content": "<p>The Lean3 analogue of this would have worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- Typeclass for expressing that a type `M` with multiplication and a one satisfies</span>\n<span class=\"sd\">`1 * a = a` and `a * 1 = a` for all `a : M`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MulOneClass.ext</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">⦄,</span> <span class=\"n\">m₁.mul</span> <span class=\"bp\">=</span> <span class=\"n\">m₂.mul</span> <span class=\"bp\">→</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">one₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">mul₁</span><span class=\"o\">⟩,</span> <span class=\"n\">one_mul₁</span><span class=\"o\">,</span> <span class=\"n\">mul_one₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">one₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">mul₂</span><span class=\"o\">⟩,</span> <span class=\"n\">one_mul₂</span><span class=\"o\">,</span> <span class=\"n\">mul_one₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">congr</span> <span class=\"c1\">-- Does nothing!</span>\n  <span class=\"c1\">-- So this fails:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">one_mul₂</span> <span class=\"n\">one₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">mul_one₁</span> <span class=\"n\">one₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any tips for getting similar behaviour in Lean4?</p>",
        "id": 303196042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665377211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could you please create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> without <code>import</code>s and add an issue? Thanks.</p>",
        "id": 303196595,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665377758
    },
    {
        "content": "<p>I was worried you wouldn't like the <code>rintro</code>. :-) I'll work out how to fake it.</p>",
        "id": 303196687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665377810
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1711\">https://github.com/leanprover/lean4/issues/1711</a></p>",
        "id": 303197661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665378638
    }
]