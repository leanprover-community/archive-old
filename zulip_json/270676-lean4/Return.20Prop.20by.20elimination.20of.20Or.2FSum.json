[
    {
        "content": "<p>The following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">d.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>results in the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.165</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.184</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.200</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.165</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I understand what it is saying, but I can't work out why.</p>\n<p>If the above is invalid, what is it about the following that makes it ok?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⊕</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 302378073,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1664937396
    },
    {
        "content": "<p><code>Or.elim</code> gives you a way to obtain proofs of propositions, not propositions themselves.</p>",
        "id": 302381489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664940812
    },
    {
        "content": "<p>On the other hand, a sum type is just a disjoint union, so you can construct maps from the sum to any other type by giving a map on each component. One way to think about why this doesn't make sense for <code>Or.elim</code>, at least in a naive way, is to consider the case where both <code>A</code> and <code>B</code> are true. If <code>a</code> is a proof of <code>A</code> and <code>b</code> a proof of <code>B</code>, then in the code you suggest, <code>Or.inl a</code> wants to evaluate to <code>True</code> while <code>Or.inr b</code> wants to evaluate to <code>False</code>, but <code>Or.inl a = Or.inr b</code> as they're both a proof of some proposition.</p>",
        "id": 302381669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664940969
    },
    {
        "content": "<p>Thanks for the explanation. Makes sense to me now. Looking at the type of <code>Or.elim</code> it now seems obvious. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Or.elim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>The result has to be some <code>x : c</code> where <code>c : Prop</code>, but <code>True</code> and <code>False</code> are already <code>Prop</code>s.</p>",
        "id": 302402690,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1664955791
    }
]