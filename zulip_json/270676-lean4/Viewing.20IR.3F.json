[
    {
        "content": "<p>What's the simplest way to see a function's compiler intermediate representation? I'm trying to figure out why my function isn't getting tail call optimized.</p>",
        "id": 231414316,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616466928
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 231414562,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616467125
    },
    {
        "content": "<p>Thanks! I found that trace class in the code and tried to turn it on  but I can't see any obvious output. How should it appear? As stdout  during compilation-to-c?</p>",
        "id": 231414720,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616467245
    },
    {
        "content": "<p>It should appear as stdout when lean processes the commands, i.e.:</p>\n<ul>\n<li>fib.lean:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>\n<ul>\n<li>command line: <code>lean fib.lean</code> (produces detailed output)</li>\n</ul>",
        "id": 231414927,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616467476
    },
    {
        "content": "<p>Thanks, got it to work</p>",
        "id": 231415053,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616467572
    },
    {
        "content": "<p>(This is because the trace is emitted in the part of the compiler still written in C++)</p>",
        "id": 231432711,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616485901
    }
]