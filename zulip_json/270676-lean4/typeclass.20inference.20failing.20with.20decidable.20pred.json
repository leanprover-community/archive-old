[
    {
        "content": "<p>I am surprised that the second example below fails. Is there a way to make it work without explicitly supplying the instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">Classical.DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.find</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.find</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">Nat.find</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Classical.DecidablePred</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hr</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 241454600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622754662
    },
    {
        "content": "<p>Because <code>DecidablePred</code> is an abbreviation, lean isn't looking for or considering your <code>Classical.DecidablePred</code> instance. Instead, you need to make <code>Classical.propDecidable</code> available as an instance, and since it is a scoped instance <code>open Classical</code> suffices (although unfortunately <code>open Classical.propDecidable</code> or <code>open Classical (propDecidable)</code> don't work).</p>",
        "id": 241505449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622795571
    },
    {
        "content": "<p>In which case I'm surprised the N=N example works!</p>",
        "id": 241507063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622796641
    },
    {
        "content": "<p>Yes I understand my error now, <code>DecidablePred</code> isn't a class so this should never be working. Thanks!</p>",
        "id": 241520775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622805291
    },
    {
        "content": "<p><code>N = N</code> is decidable because nat has decidable eq</p>",
        "id": 241521906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622806044
    }
]