[
    {
        "content": "<p>I just wrote this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instantiateMVarsInMVarType</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarDecl</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n  <span class=\"n\">setMVarType</span> <span class=\"n\">mvarId</span> <span class=\"n\">type</span>\n  <span class=\"n\">return</span> <span class=\"n\">type</span>\n</code></pre></div>\n<p>I was wondering why this isn't defined in the stdlib (or maybe I just didn't find it). Isn't it a good idea to replace an expression with its mvar-instantiated counterpart whenever possible?</p>",
        "id": 249971953,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629372491
    },
    {
        "content": "<p>We have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instantiateMVarDeclMVars</span> <span class=\"o\">(</span><span class=\"n\">mctx</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which instantiates all assigned metavariables in the <code>MetavarDecl</code> for <code>mvarId</code>. <br>\nIt is not just the type, but the local context too. <br>\nWe used this function in the <code>by tac</code> implementation. It is executed at the beginning. I can see it may be useful for tactics like the one you are building.</p>",
        "id": 250144415,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1629478825
    },
    {
        "content": "<p>Ah nice, thanks! I'll continue to do this sort of caching then.</p>",
        "id": 250146748,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629480010
    }
]