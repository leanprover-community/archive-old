[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Parenthesizer</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadQuotation</span> <span class=\"n\">Id</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRef</span>              <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">Syntax.missing</span>\n  <span class=\"n\">withRef</span>             <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n  <span class=\"n\">getCurrMacroScope</span>   <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n  <span class=\"n\">getMainModule</span>       <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">_fakeMod</span>\n  <span class=\"n\">withFreshMacroScope</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"_\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"s2\">\" | \"</span> <span class=\"n\">foo</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">parenthesize</span> <span class=\"o\">(</span><span class=\"n\">categoryParser.parenthesizer</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">stx</span>\n</code></pre></div>\n<p>There seems to be an issue with parenthesizing the <code>(\" | \" foo)*</code> part of the notation. (The desired result is for this to do nothing to the syntax btw.)</p>",
        "id": 250065740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629420087
    },
    {
        "content": "<p>If you inspect the output of your eval function you will get the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">parenthesize</span> <span class=\"o\">(</span><span class=\"n\">categoryParser.parenthesizer</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">stx</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">ex</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def ex : CoreM Syntax :=</span>\n<span class=\"cm\">let stx : Syntax :=</span>\n<span class=\"cm\">  do</span>\n<span class=\"cm\">    let info ← MonadRef.mkInfoFromRefPos</span>\n<span class=\"cm\">    let _ ← getCurrMacroScope</span>\n<span class=\"cm\">    let _ ← getMainModule</span>\n<span class=\"cm\">    pure</span>\n<span class=\"cm\">        (Syntax.node `«foo(_|_)»</span>\n<span class=\"cm\">          #[Syntax.atom info \"(\", Syntax.node `foo_ #[Syntax.atom info \"_\"],</span>\n<span class=\"cm\">            Syntax.node `null #[Syntax.node `null #[Syntax.atom info \"|\", Syntax.node `foo_ #[Syntax.atom info \"_\"]]],</span>\n<span class=\"cm\">            Syntax.atom info \")\"]);</span>\n<span class=\"cm\">parenthesize (categoryParser.parenthesizer `foo 0) stx</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 250072130,
        "sender_full_name": "Mac",
        "timestamp": 1629428043
    },
    {
        "content": "<p>The problem here is that there is no parenthesizer for the <code> `null </code> nodes (as <code>null</code> is not a real syntax kind).</p>",
        "id": 250072171,
        "sender_full_name": "Mac",
        "timestamp": 1629428100
    },
    {
        "content": "<p>From experience, I would heavily advise against using parentheticals in <code>syntax</code> (like <code>(\" | \" foo)</code>) and instead create a separate syntax for such elements. After all, parentheticals are just null nodes instead of named nodes.</p>",
        "id": 250072414,
        "sender_full_name": "Mac",
        "timestamp": 1629428326
    },
    {
        "content": "<p>Also, is there any particular reason why you are not using <code>sepBy1</code>? For example, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"_\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"s2\">\"|\"</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">parenthesize</span> <span class=\"o\">(</span><span class=\"n\">categoryParser.parenthesizer</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">stx</span>\n</code></pre></div>",
        "id": 250072712,
        "sender_full_name": "Mac",
        "timestamp": 1629428557
    },
    {
        "content": "<p>I wasn't able to figure out the syntax for <code>sepBy1</code>; I'm using that now. Regarding overuse of null nodes, what are the rules for when the parenthesizer / formatter works on them? Shouldn't the parenthesizer for <code>«foo(_|_)»</code> decompose the null nodes directly, rather than dispatching to a (nonexistent) <code>null</code> parenthesizer?</p>",
        "id": 250075973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629432157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250075973\">said</a>:</p>\n<blockquote>\n<p>I'm using that now. Regarding overuse of null nodes, what are the rules for when the parenthesizer / formatter works on them? Shouldn't the parenthesizer for «foo(_|_)» decompose the null nodes directly, rather than dispatching to a (nonexistent) null parenthesizer?</p>\n</blockquote>\n<p>I believe the answer to the form is never (unless the parent node parenthesizer special cases it). The problem is that there is no \"right\" behavior --  in some cases a null node should be parenthesized in other cases they shouldn't be. </p>\n<p>I think it erroring out is intended to be a middle ground, which says essentially: \"I give up, there is no well-defined way to parenthesized this expression\". This is because, unless I am mistaken, the parenthesizer erroring out its not a fatal condition for the pretty printer. I assume it has some default for cases where parenthesizing fails. However, this is all just speculation -- I have not really delved into the parenthesizer code. Honestly, you probably know more than me about how it works considered you wrote this example.</p>",
        "id": 250078539,
        "sender_full_name": "Mac",
        "timestamp": 1629435748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250075973\">said</a>:</p>\n<blockquote>\n<p>I wasn't able to figure out the syntax for <code>sepBy1</code></p>\n</blockquote>\n<p><del>Did you try go-to-declaration on it? ;)</del> EDIT: Apparently that goes to <code>syntax</code> rather than <code>sepBy1</code>. :(</p>",
        "id": 250078564,
        "sender_full_name": "Mac",
        "timestamp": 1629435819
    },
    {
        "content": "<p>I tend to go directly to the parser source code. Which, as <code>sepBy1</code> is Syntax its definition is in <a href=\"https://github.com/leanprover/lean4/blob/49520aa2ee6d39be24e4e50242c241dd098af98a/src/Lean/Parser/Syntax.lean#L37\">Lean.Parser.Syntax</a>.</p>",
        "id": 250078751,
        "sender_full_name": "Mac",
        "timestamp": 1629436072
    },
    {
        "content": "<blockquote>\n<p>I think it erroring out is intended to be a middle ground, which says essentially: \"I give up, there is no well-defined way to parenthesized this expression\". This is because, unless I am mistaken, the parenthesizer erroring out its not a fatal condition for the pretty printer. I assume it has some default for cases where parenthesizing fails. However, this is all just speculation -- I have not really delved into the parenthesizer code. Honestly, you probably know more than me about how it works considered you wrote this example.</p>\n</blockquote>\n<p>I'm not sure whether the official conduits handle this better, but if the parenthesizer fails then my entire program halts (or rather, I recover very far away and lose a lot of output quality), so that's not an option. If the parenthesizer fails inside a subterm, it will cause the entire term to not be parenthesized because the parenthesizer itself has no error recovery for this condition.</p>\n<blockquote>\n<p>I believe the answer to the form is never (unless the parent node parenthesizer special cases it). The problem is that there is no \"right\" behavior -- in some cases a null node should be parenthesized in other cases they shouldn't be.</p>\n</blockquote>\n<p>The reason I find this argument suspicious is that if I add an extra named node there, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"_\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This is not adding any additional information that would change the task of parenthesizing. Of course having a named node there helps with looking up what to do at a <code>bar</code> node, but the <code>bar</code> parenthesizer could also just be inlined into the <code>foo</code> parenthesizer, and the observable effect would be the same. And with the <code>bar</code> parenthesizer inlined, you no longer need the node to be named, because you have the context to use the correct parenthesizer now rather than looking one up.</p>",
        "id": 250080966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629438929
    },
    {
        "content": "<p>I think I found the bug. The <code>many</code> combinator interacts a bit strangely with <code>andthen</code> in syntax declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"k\">#eval</span> <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"s2\">\"{(`(foo| a b a b) : Id _)}\"</span>\n<span class=\"c1\">-- (Lean.Elab.Term.fooAB [[\"a\" \"b\"] [\"a\" \"b\"]])</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"s2\">\"c\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"k\">#eval</span> <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"s2\">\"{(`(foo| c c) : Id _)}\"</span>\n<span class=\"c1\">-- (Lean.Elab.Term.fooC [\"c\" \"c\"])</span>\n</code></pre></div>\n<p>Note that it creates an extra <code>nullKind</code> level in the first case but not the second. This makes sense from a conserving-nodes perspective, there is no point in a null node with only one child, but it means that <code>manyNoAntiquot.parenthesizer</code> is incorrect for the case where the nested parser is an <code>andthen</code> of stuff because it needs an extra layer of <code>visitArgs</code> to traverse the extra layer of nodes.</p>",
        "id": 250086220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629444162
    },
    {
        "content": "<p>Yes :( . Any combinator that uses <code>many stx</code> should put the result in a new group if there is more than one parser. This is not done consistently yet.</p>",
        "id": 250087153,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629445055
    },
    {
        "content": "<p>I feel like it should be possible to fix the syntax traversal to be able to handle this correctly. An arbitrary <code>ParserDescr</code> could either be describing a parser that returns a <code>Syntax</code> or a parser that returns an <code>Array Syntax</code>, and it seems to conflate the two at some points. I think, in the present case, you could address the problem by having <code>many.parenthesizer</code> set a flag in the parenthesizer state saying \"we are expecting a node parser, not an array parser\", and then if the flag is set you call <code>visitArgs</code> and reset the flag in any combinator that is supposed to produce more than one node (like <code>andthen</code>)</p>",
        "id": 250087663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629445441
    },
    {
        "content": "<p>No, that <code>many</code> even accepts a parser of arity &gt; 1 was a <a href=\"https://github.com/leanprover/lean4/commit/54405c4543dab3d3c537d0c26965e186e9ce42c4\">hack</a> that should be reverted. We should not conflate <code>andthen</code> with any other combinators.</p>",
        "id": 250088140,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629445904
    },
    {
        "content": "<p>What's the proposed alternative? Is the arity of a parser even a static quantity (since orelse makes things complicated)?</p>",
        "id": 250088551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446252
    },
    {
        "content": "<p>Really what we should ideally do is to track the \"arity\" (# of returned nodes) of a <code>ParserDescr</code> in its type. I've already tried this before with <code>Parser</code>, but it breaks the coercion from <code>String</code>.</p>",
        "id": 250088565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250087153\">said</a>:</p>\n<blockquote>\n<p>Any combinator that uses <code>many stx</code> should put the result in a new group if there is more than one parser.</p>\n</blockquote>\n<p>This is the simple solution</p>",
        "id": 250088627,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446306
    },
    {
        "content": "<p>Would it help if there was an explicit <code>node</code> combinator?</p>",
        "id": 250088668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446354
    },
    {
        "content": "<p>The two sides of an orelse should definitely have the same arity. We had to fix that in our grammar before.</p>",
        "id": 250088678,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446365
    },
    {
        "content": "<p>i.e. <code>(node \"a\" \"b\")*</code></p>",
        "id": 250088679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446366
    },
    {
        "content": "<p>If that produces an anonymous node, is there an advantage over doing so implicitly?</p>",
        "id": 250088854,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446464
    },
    {
        "content": "<p>unclear</p>",
        "id": 250088883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446493
    },
    {
        "content": "<p>it might solve some coercion issues</p>",
        "id": 250088902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446513
    },
    {
        "content": "<p>Btw, wrapping each <code>many stx</code> in a <em>unique</em> kind would solve the orelse issue I mentioned on GH</p>",
        "id": 250088905,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446516
    },
    {
        "content": "<p>As long as you have the design such that it can support compile time known arities, you don't necessarily need it to be part of the type, it can be a function on <code>ParserDescr</code> with some compile time validation for things like orelse</p>",
        "id": 250089022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446597
    },
    {
        "content": "<p>Yes, that would be nice to have for <code>Parser</code>. For <code>ParserDescr</code> I don't see an issue with tracking it in the type.</p>",
        "id": 250089166,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629446729
    },
    {
        "content": "<p>do you care about the exact arity or just 0, 1, 2+?</p>",
        "id": 250089293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446844
    },
    {
        "content": "<p>I just found this code in my syntax specification, is this violating the arity requirement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">notation3Item</span> <span class=\"o\">:=</span> <span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bindersItem</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">identScope</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250089369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629446905
    },
    {
        "content": "<p>Should be fine since the parentheses induce a node?</p>",
        "id": 250089621,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629447131
    },
    {
        "content": "<p>On top of arity (0,1,2+ might be fine, not sure if it's necessary though), we'd also like to statically know the possible returned kind(s) in case of arity=1. orelse should not be allowed to be used if the sides' kinds are not disjoint. This would eliminate the terrible backtracking the pretty printer has to do for each orelse.</p>",
        "id": 250089817,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629447303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250089621\">said</a>:</p>\n<blockquote>\n<p>Should be fine since the parentheses induce a node?</p>\n</blockquote>\n<p>They don't? At least <code>((\"a\" \"b\") (\"c\" \"d\"))</code> produces a flat parse <code>[\"a\" \"b\" \"c\" \"d\"]</code></p>",
        "id": 250090048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447488
    },
    {
        "content": "<p>not the reaction I expected from the author of the syntax system :P</p>",
        "id": 250090126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447583
    },
    {
        "content": "<p>I might not have written that exact part <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 250090218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629447648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250089817\">said</a>:</p>\n<blockquote>\n<p>On top of arity (0,1,2+ might be fine, not sure if it's necessary though), we'd also like to statically know the possible returned kind(s) in case of arity=1. orelse should not be allowed to be used if the sides' kinds are not disjoint. This would eliminate the terrible backtracking the pretty printer has to do for each orelse.</p>\n</blockquote>\n<p>That sounds tough to put in the type system</p>",
        "id": 250090252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447691
    },
    {
        "content": "<p>I mean you could but I would feel bad for the poor kernel</p>",
        "id": 250090320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447731
    },
    {
        "content": "<p>While <code>Parser</code> is pretty low-level, for <code>stx</code> we really want to make sure that there is no way to misuse it. I think this is only achievable if, on top of grouping every <code>many stx</code>, we also give each of them a unique kind as mentioned above. That would introduce a few unnecessary kinds, but I don't think that would be an issue in practice.</p>",
        "id": 250090414,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629447837
    },
    {
        "content": "<p>What I mean is, you can do some of this as post hoc validation rather than dependent types</p>",
        "id": 250090540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447933
    },
    {
        "content": "<p>sure</p>",
        "id": 250090611,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629447966
    },
    {
        "content": "<p>for example you can do the checking in the <code>syntax</code> command while it's constructing the <code>ParserDescr</code></p>",
        "id": 250090612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629447967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.20error.3A.20unknown.20constant.20'null'/near/250088668\">said</a>:</p>\n<blockquote>\n<p>Would it help if there was an explicit <code>node</code> combinator?</p>\n</blockquote>\n<p>There is <code>group(\"a\" \"b\")</code> btw</p>",
        "id": 250138278,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629475652
    }
]