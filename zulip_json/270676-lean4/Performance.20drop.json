[
    {
        "content": "<p>Hi! Was there some change that could impact the performance of the execution compiled binaries?<br>\nWe have a codebase whose execution performance has dropped by half. On <code>leanprover/lean4:nightly-2022-09-11</code> our CI runs lasted around 7 minutes and then after updating to <code>10-27</code> it went up to 12 minutes and beyond. And in the most recent toolchain it's reaching 15 minutes.</p>\n<p>This is the codebase: <a href=\"https://github.com/yatima-inc/yatima-lang\">https://github.com/yatima-inc/yatima-lang</a></p>",
        "id": 310289352,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668545402
    },
    {
        "content": "<p>I'm asking in the spirit of providing help if needed <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 310290144,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668545653
    },
    {
        "content": "<p>Could you run <code>perf</code> on both versions and see whether the hot functions have changed?</p>",
        "id": 310290840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668545904
    },
    {
        "content": "<p>if you can minimize the issue that would be super helpful for the benchmark suite</p>",
        "id": 310290945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668545946
    },
    {
        "content": "<p>Any particular version I should get?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>λ perf\nComando 'perf' não encontrado, mas poder ser instalado com:\nsudo apt install linux-intel-iotg-tools-common  # version 5.15.0-1017.22, or\nsudo apt install linux-nvidia-tools-common      # version 5.15.0-1007.7\nsudo apt install linux-tools-common             # version 5.15.0-52.58\n</code></pre></div>",
        "id": 310291350,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668546064
    },
    {
        "content": "<p>I'm not an expert but I think <code>sudo apt install linux-tools-common</code> will work?</p>",
        "id": 310291682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668546179
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/velcom/repo-detail/bab50d33-13a1-40c4-85a0-fda5f93f8b22?zoomXStart=1657339200000&amp;zoomXEnd=1661227200000&amp;dimensions=rbmap_10%3Atask-clock%3A%3Arbmap_fbip%3Atask-clock%3A%3Aderiv%3Atask-clock%3A%3Arbmap_library%3Atask-clock%3A%3AworkspaceSymbols%3Atask-clock%3A%3Arbmap_1%3Atask-clock%3A%3Aliasolver%3Atask-clock%3A%3Aqsort%3Atask-clock%3A%3Aunionfind%3Atask-clock%3A%3Aconst_fold%3Atask-clock%3A%3Atests%2Fbench%2F%20interpreted%3Atask-clock%3A%3Anew%20parser%20Core.lean%3Atask-clock%3A%3Arbmap%3Atask-clock%3A%3Astdlib%3Atask-clock%3A%3Abinarytrees%3Atask-clock&amp;dayEquidistant=true\">Here's the relevant graph</a> for changes in execution time on a bunch of benchmarks, I don't see any that got much worse on those days</p>",
        "id": 310291808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668546228
    },
    {
        "content": "<p>How do I run <code>perf</code> in a meaningful way for us?</p>",
        "id": 310292251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668546387
    },
    {
        "content": "<p>I'm hoping someone who knows more will swoop  in here, but <a href=\"https://www.brendangregg.com/perf.html\">this page</a> has some example commands, and I think one that is relevant is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>perf record --call-graph dwarf my_command\nperf report --stdio\n</code></pre></div>",
        "id": 310293198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668546720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> this <a href=\"#narrow/stream/270676-lean4/topic/Stack.20trace.20profiling\">thread</a> helped me getting <code>perf</code> to work.</p>",
        "id": 310293512,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668546826
    },
    {
        "content": "<p>Also <a href=\"https://github.com/leanprover/lean4/blob/master/doc/perf.md\">https://github.com/leanprover/lean4/blob/master/doc/perf.md</a></p>",
        "id": 310293634,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668546861
    },
    {
        "content": "<p>And the <a href=\"https://profiler.firefox.com/\">FF Profiler</a> is a great web UI for <code>perf</code> traces</p>",
        "id": 310293680,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668546881
    },
    {
        "content": "<p>These are the top lines from <code>perf diff old.data new.data</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code># Baseline  Delta Abs  Shared Object         Symbol\n# ........  .........  ....................  ..........................................\n#\n     0.19%    +66.82%  yatima                [.] 0x00000000035d69a0\n               +5.28%  yatima                [.] lean::for_each_fn::apply\n               +3.75%  yatima                [.] l_Yatima_Typechecker_printExpr\n               +3.34%  yatima                [.] l_List_mapM___at_Yatima_Transpiler_mkIndLiteral___spec__1\n     4.57%     -2.44%  [unknown]             [k] 0xffffffffa76063a5\n               +2.13%  yatima                [.] l_IO_eprintln___at_compileRun___spec__3\n               +1.26%  yatima                [.] lean::add_inductive_fn::mk_rec_infos\n               +0.95%  yatima                [.] l_Yatima_Typechecker_toCtorIfLit\n     2.13%     -0.84%  libleanshared.so      [.] lean_uint64_mix_hash\n     0.92%     -0.80%  libleanshared.so      [.] lean_mark_mt\n               +0.66%  yatima                [.] l_Yatima_Typechecker_eval\n               +0.57%  yatima                [.] lean::replace\n     0.00%     +0.51%  yatima                [.] lean::elim_dead_let_fn::visit_lambda\n</code></pre></div>",
        "id": 310298154,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668548565
    },
    {
        "content": "<p><code>0x00000000035d69a0</code> is clearly guilty. Any other question?</p>",
        "id": 310298289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548607
    },
    {
        "content": "<p>Is that the output we want from <code>perf</code>?</p>",
        "id": 310298459,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668548662
    },
    {
        "content": "<p>i find it easier to look at perf data in a different format, like a flamegraph, for example with this tool: <a href=\"https://github.com/brendangregg/FlameGraph\">https://github.com/brendangregg/FlameGraph</a></p>",
        "id": 310298568,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1668548705
    },
    {
        "content": "<p>Try dwarf,60000 that should get us a better suspect.</p>",
        "id": 310300351,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668549402
    },
    {
        "content": "<p>I downloaded <code>hotspot</code> and it seems to show better data. Anyone up for a quick jitsi call?</p>",
        "id": 310300699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668549535
    },
    {
        "content": "<p>I can share my screen</p>",
        "id": 310300730,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668549551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310300351\">said</a>:</p>\n<blockquote>\n<p>Try dwarf,60000 that should get us a better suspect.</p>\n</blockquote>\n<p>Running that</p>",
        "id": 310301467,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668549838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    32.30%    -32.07%  yatima                [.] 0x0000000000a183d1\n              +22.17%  yatima                [.] lean_dec_ref_cold\n               +9.72%  yatima                [.] lean_alloc_small\n               +8.14%  yatima                [.] lean_free_small\n               +5.16%  yatima                [.] l_Lean_AssocList_foldlM___at_Lean_ConstMap_childrenOfWith___spec__2___rarg\n               +4.86%  yatima                [.] lean::alloc\n               +3.56%  yatima                [.] lean_byte_array_push\n               +3.43%  yatima                [.] l_List_compareAux___at_ByteArray_instOrdByteArray___spec__1\n               +3.19%  yatima                [.] lean_array_to_list\n               +3.18%  yatima                [.] lean_name_eq\n     4.77%     -3.08%  [unknown]             [k] 0xffffffffa76060d0\n               +2.65%  yatima                [.] lean_byte_array_copy_slice\n               +2.26%  yatima                [.] lean::dealloc\n               +2.18%  yatima                [.] l_Array_zipWithAux___at_Keccak_rho___spec__1\n               +2.07%  yatima                [.] l_UnsignedVarInt_toVarIntCore\n               +1.73%  yatima                [.] l_List_toByteArray_loop\n               +1.36%  yatima                [.] lean_byte_array_data\n               +1.28%  yatima                [.] l_ByteArray_append\n               +1.12%  yatima                [.] l_Multihash_toBytes\n               +1.08%  yatima                [.] l_Array_mapIdxM_map___at_Keccak_chi___spec__1\n     2.00%     -1.00%  libleanshared.so      [.] lean_uint64_mix_hash\n     0.97%     -0.90%  libleanshared.so      [.] lean_mark_mt\n               +0.87%  yatima                [.] lean_array_push\n     0.00%     +0.80%  yatima                [.] l_Std_RBNode_ins___at_Yatima_Compiler_addToStore___spec__19\n               +0.79%  yatima                [.] l_Std_RBNode_find_x3f___at_Yatima_Compiler_getExprIpld___spec__1\n               +0.65%  yatima                [.] l_Std_RBNode_insert___at_Yatima_Compiler_getUnivIpld___spec__2___at_Yatima_Compiler_getUnivIpld___spec__6___lambda__1___boxed\n               +0.65%  yatima                [.] l_Cid_toBytes\n               +0.60%  yatima                [.] l_Array_foldlMUnsafe_fold___at_Keccak_theta___spec__3\n               +0.60%  yatima                [.] l_Std_RBNode_ins___at_Yatima_Compiler_addToStore___spec__14\n               +0.50%  yatima                [.] l_Array_foldlMUnsafe_fold___at_Lean_ConstMap_childrenOfWith___spec__5___rarg\n     0.63%     +0.46%  libc.so.6             [.] __memmove_avx_unaligned_erms\n     0.54%     -0.45%  libleanshared.so      [.] lean_name_eq\n</code></pre></div>",
        "id": 310302991,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668550473
    },
    {
        "content": "<p><code>lean_dec_ref_cold</code>, <code>lean_alloc_small</code>, <code>lean_free_small</code>, <code>lean::alloc</code> and <code>lean_byte_array_push</code> seem to be the biggest aggressors</p>",
        "id": 310303601,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668550759
    },
    {
        "content": "<p>Was there some big change on the logic behind memory allocation after <code>2022-9-11</code>?</p>",
        "id": 310304732,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668551280
    },
    {
        "content": "<p>Because another issue I had involved a stack overflow when running a piece of code that worked just fine before</p>",
        "id": 310305072,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668551420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310303601\">said</a>:</p>\n<blockquote>\n<p><code>lean_dec_ref_cold</code>, <code>lean_alloc_small</code>, <code>lean_free_small</code>, <code>lean::alloc</code> and <code>lean_byte_array_push</code> seem to be the biggest aggressors</p>\n</blockquote>\n<p>Those are always likely to be the hottest bits of code. The question is more whether something moved to the front after <code>2022-9-11</code></p>",
        "id": 310307937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668552703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> you might or might not be missing some symbol names. What does the first page of <code>perf report | less</code> output look like?</p>",
        "id": 310307952,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668552710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310307952\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> you might or might not be missing some symbol names. What does the first page of <code>perf report | less</code> output look like?</p>\n</blockquote>\n<p>It just shows a black terminal screen to me</p>",
        "id": 310308913,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668553146
    },
    {
        "content": "<p>Uh, <code>perf report --stdio</code>?</p>",
        "id": 310309288,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668553321
    },
    {
        "content": "<p>The first lines of <code>perf report</code> on a call that results on a stack overflow:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Samples: 20K of event 'cycles', Event count (approx.): 20390088657\n  Children      Self  Command  Shared Object         Symbol\n+    9,44%     9,41%  lake     libleanshared.so      [.] lean_uint64_mix_hash                                                                                                                                     ◆\n+    7,01%     6,69%  yatima   yatima                [.] lean_byte_array_push                                                                                                                                     ▒\n+    6,31%     6,04%  yatima   yatima                [.] lean_dec_ref_cold                                                                                                                                        ▒\n+    4,48%     4,38%  yatima   yatima                [.] lean_alloc_small                                                                                                                                         ▒\n+    4,30%     4,22%  yatima   yatima                [.] lean_free_small                                                                                                                                          ▒\n+    3,97%     0,03%  lake     libleanshared.so      [.] lean_byte_array_copy_slice                                                                                                                               ▒\n+    3,94%     0,00%  lake     libc.so.6             [.] __memcpy_avx_unaligned_erms (inlined)                                                                                                                    ▒\n+    3,92%     0,00%  lake     [unknown]             [.] 0xffffffffa8400099                                                                                                                                       ▒\n+    3,91%     3,32%  lake     libleanshared.so      [.] lean_dec_ref_cold                                                                                                                                        ▒\n+    3,67%     0,00%  lake     [unknown]             [.] 0xffffffffa839821c                                                                                                                                       ▒\n+    3,47%     3,42%  yatima   yatima                [.] l_List_toByteArray_loop                                                                                                                                  ▒\n+    2,78%     0,29%  yatima   yatima                [.] lean_byte_array_copy_slice                                                                                                                               ▒\n+    2,75%     0,00%  lake     [unknown]             [.] 0xffffffffa8400b66                                                                                                                                       ▒\n+    2,74%     0,00%  yatima   libc.so.6             [.] __GI___libc_free (inlined)                                                                                                                               ▒\n+    2,67%     0,00%  lake     [unknown]             [.] 0xffffffffa839c0d7                                                                                                                                       ▒\n+    2,53%     0,00%  yatima   libc.so.6             [.] __memcpy_avx_unaligned_erms (inlined)                                                                                                                    ▒\n+    2,50%     0,00%  lake     [unknown]             [.] 0xffffffffa769ea69                                                                                                                                       ▒\n+    2,42%     0,01%  lake     [unknown]             [.] 0xffffffffa78fbd88                                                                                                                                       ▒\n+    2,39%     2,36%  yatima   yatima                [.] l_List_reverseAux___rarg                                                                                                                                 ▒\n+    2,37%     0,00%  yatima   [unknown]             [.] 0xffffffffa8400b66                                                                                                                                       ▒\n+    2,31%     0,00%  lake     [unknown]             [.] 0xffffffffa78fb977                                                                                                                                       ▒\n+    2,25%     0,00%  yatima   [unknown]             [.] 0xffffffffa839c0d7                                                                                                                                       ▒\n+    2,11%     2,04%  yatima   yatima                [.] l_ByteArray_toList_loop                                                                                                                                  ▒\n+    2,08%     0,00%  yatima   [unknown]             [.] 0xffffffffa769ea69                                                                                                                                       ▒\n+    2,03%     0,00%  lake     [unknown]             [.] 0xffffffffa78f9a1a                                                                                                                                       ▒\n+    1,98%     0,38%  yatima   yatima                [.] __gmp_default_allocate                                                                                                                                   ▒\n+    1,98%     1,95%  lake     lake                  [.] l_Lake_computeFileHash                                                                                                                                   ▒\n+    1,96%     0,00%  yatima   [unknown]             [.] 0xffffffffa78fbd88                                                                                                                                       ▒\n+    1,90%     0,18%  yatima   yatima                [.] __gmp_default_reallocate                                                                                                                                 ▒\n+    1,84%     0,00%  lake     libc.so.6             [.] __GI__IO_file_xsgetn (inlined)                                                                                                                           ▒\n+    1,84%     0,00%  yatima   [unknown]             [.] 0xffffffffa78fb977                                                                                                                                       ▒\n+    1,81%     0,02%  lake     libleanshared.so      [.] lean_io_prim_handle_read                                                                                                                                 ▒\n+    1,80%     0,00%  lake     libc.so.6             [.] __GI__IO_fread (inlined)                                                                                                                                 ▒\n+    1,79%     0,00%  yatima   [unknown]             [.] 0xffffffffa78f9a1a                                                                                                                                       ▒\n+    1,78%     1,75%  yatima   yatima                [.] lean::alloc                                                                                                                                              ▒\n+    1,74%     1,74%  lake     libc.so.6             [.] __memmove_avx_unaligned_erms                                                                                                                             ▒\n+    1,74%     0,00%  lake     libc.so.6             [.] _IO_new_file_underflow (inlined)                                                                                                                         ▒\n+    1,74%     0,07%  yatima   yatima                [.] lean::mpz::~mpz                                                                                                                                          ▒\n+    1,72%     1,69%  yatima   libc.so.6             [.] _int_free                                                                                                                                                ▒\n+    1,71%     0,00%  yatima   libc.so.6             [.] __GI___libc_realloc (inlined)                                                                                                                            ▒\n+    1,71%     0,00%  lake     libc.so.6             [.] __GI___libc_read (inlined)                                                                                                                               ▒\n+    1,58%     0,00%  yatima   libc.so.6             [.] __GI___libc_malloc (inlined)                                                                                                                             ▒\n+    1,57%     1,57%  lake     libleanshared.so      [.] lean_alloc_small                                                                                                                                         ▒\n+    1,55%     1,55%  yatima   libc.so.6             [.] malloc\n</code></pre></div>",
        "id": 310309934,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668553641
    },
    {
        "content": "<p>why are there so many things from <code>lake</code> in this list? Is lake calling yatima or vice versa?</p>",
        "id": 310310552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668553954
    },
    {
        "content": "<p>It's also definitely missing stack traces, so we don't know what function calls what. Did you build the application you are tracing with <code>moreLeancArgs := #[\"-UNDEBUG\", \"-Og\", \"-ggdb\", \"-g3\", \"-fno-omit-frame-pointer\"]</code>?</p>",
        "id": 310310672,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668554020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310310552\">said</a>:</p>\n<blockquote>\n<p>why are there so many things from <code>lake</code> in this list? Is lake calling yatima or vice versa?</p>\n</blockquote>\n<p>I run with <code>lake exe yatima ...</code></p>",
        "id": 310311422,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668554341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310310672\">said</a>:</p>\n<blockquote>\n<p>It's also definitely missing stack traces, so we don't know what function calls what. Did you build the application you are tracing with <code>moreLeancArgs := #[\"-UNDEBUG\", \"-Og\", \"-ggdb\", \"-g3\", \"-fno-omit-frame-pointer\"]</code>?</p>\n</blockquote>\n<p>Nope. Let me do that</p>",
        "id": 310311459,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668554363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310311422\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310310552\">said</a>:</p>\n<blockquote>\n<p>why are there so many things from <code>lake</code> in this list? Is lake calling yatima or vice versa?</p>\n</blockquote>\n<p>I run with <code>lake exe yatima ...</code></p>\n</blockquote>\n<p>I think running <code>perf record (...) build/bin/yatima</code> will give you a cleaner perf report.</p>",
        "id": 310311731,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668554491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">+</span>   <span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"mi\">21</span><span class=\"bp\">%</span>    <span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">91</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_dec_ref_cold</span>\n<span class=\"bp\">+</span>   <span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">42</span><span class=\"bp\">%</span>    <span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_byte_array_push</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">79</span><span class=\"bp\">%</span>     <span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">78</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_alloc_small</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">91</span><span class=\"bp\">%</span>     <span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">87</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_free_small</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">92</span><span class=\"bp\">%</span>     <span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">91</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_List_toByteArray_loop</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">72</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">44</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_byte_array_copy_slice</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">68</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI___libc_free</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">35</span><span class=\"bp\">%</span>     <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">34</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_List_reverseAux___rarg</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">34</span><span class=\"bp\">%</span>     <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">32</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_ByteArray_toList_loop</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">31</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__memcpy_avx_unaligned_erms</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">88</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa8400b66</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">75</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa839c0d7</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">57</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">73</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__gmp_default_allocate</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">52</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa769ea69</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">45</span><span class=\"bp\">%</span>     <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">43</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">alloc</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">39</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">27</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">::</span><span class=\"bp\">~</span><span class=\"n\">mpz</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">30</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa78fbd88</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa78fb977</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">04</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa8400099</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">04</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">32</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__gmp_default_reallocate</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">98</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa78f9a1a</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">86</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI___libc_malloc</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">84</span><span class=\"bp\">%</span>     <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">84</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">malloc</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">73</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI___libc_realloc</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">55</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI__IO_file_xsgetn</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">53</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa839821c</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">51</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">_IO_new_file_underflow</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">49</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">02</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_io_prim_handle_read</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">48</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI___libc_read</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">48</span><span class=\"bp\">%</span>     <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">45</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">_int_free</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">47</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__GI__IO_fread</span> <span class=\"o\">(</span><span class=\"n\">inlined</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">33</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa791f27e</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">23</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa798d439</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">22</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa798d397</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa78f5632</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">06</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa798a913</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">03</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa7989f60</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">01</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa7a732cb</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">01</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa78b3575</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">99</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa7940fad</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">96</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa791e02d</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">95</span><span class=\"bp\">%</span>     <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">95</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span>         <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"mi\">0xffffffffa7c9e5a7</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">89</span><span class=\"bp\">%</span>     <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">89</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">cfree</span><span class=\"bp\">@</span><span class=\"n\">GLIBC_2.2.5</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">78</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">51</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">::</span><span class=\"n\">mpz</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">74</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">08</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__memset_avx2_unaligned_erms</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">73</span><span class=\"bp\">%</span>     <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">73</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_UnsignedVarInt_fromVarIntCore</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">70</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">08</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">lean_alloc_small_cold</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">52</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">78</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">yatima</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_DagCbor_repeatFor___rarg</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">50</span><span class=\"bp\">%</span>     <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">50</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">realloc</span>\n<span class=\"bp\">+</span>    <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">42</span><span class=\"bp\">%</span>     <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">42</span><span class=\"bp\">%</span>  <span class=\"n\">yatima</span>   <span class=\"n\">libc.so.6</span>         <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">__memmove_avx_unaligned_erms</span>\n</code></pre></div>",
        "id": 310312183,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668554703
    },
    {
        "content": "<p>Hm that still doesn't look right. I can give it a go, is it just the version that's in the repo? What command are you benchmarking?</p>",
        "id": 310312658,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668554969
    },
    {
        "content": "<p>All these ByteArray&lt;-&gt;List conversions look super fishy.</p>",
        "id": 310312986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668555098
    },
    {
        "content": "<p><a href=\"https://github.com/yatima-inc/Ipld.lean/blob/fceb5347c88f122961902e38764bc4010aafd3c1/Ipld/UnsignedVarInt.lean\">https://github.com/yatima-inc/Ipld.lean/blob/fceb5347c88f122961902e38764bc4010aafd3c1/Ipld/UnsignedVarInt.lean</a></p>",
        "id": 310312999,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668555108
    },
    {
        "content": "<p>This should construct a <code>ByteArray</code> directly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromVarIntCore</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310313073,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668555130
    },
    {
        "content": "<p>I'm kind of surprised that we don't have a <code>DecidableEq ByteArray</code> instance yet.  This one allocates two new arrays, which are 8x as large as the byte arrays btw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">ByteArray</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a.data</span> <span class=\"bp\">==</span> <span class=\"n\">b.data</span>\n</code></pre></div>",
        "id": 310313448,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668555331
    },
    {
        "content": "<p>Yes, this instance looks fishy to me as well -- shouldn't this be exported to some C function?</p>",
        "id": 310313674,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1668555466
    },
    {
        "content": "<p>yeah, this looks like a good place to drop in <code>memcmp</code></p>",
        "id": 310313760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668555499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> here is roughly what a perf recording with correct symbol information should look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">l_typecheckRun</span>\n<span class=\"bp\">|</span>\n<span class=\"bp\">|</span><span class=\"c1\">--32.44%--l_Yatima_Typechecker_typecheck</span>\n<span class=\"bp\">|</span>          <span class=\"n\">l_Yatima_Converter_extractPureStore</span>\n<span class=\"bp\">|</span>          <span class=\"n\">l_Yatima_Converter_ConvertM_run___rarg</span>\n<span class=\"bp\">|</span>          <span class=\"n\">lean_apply_2</span>\n<span class=\"bp\">|</span>          <span class=\"n\">lean_apply_3</span>\n<span class=\"bp\">|</span>          <span class=\"n\">l_Yatima_Converter_convertStore___lambda__1</span>\n<span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>           <span class=\"c1\">--31.92%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span><span class=\"c1\">--31.30%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--26.74%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--18.33%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--13.97%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>                     <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--7.57%--l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</span>\n</code></pre></div>\n<p>I got this with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">moreLeancArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-UNDEBUG\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-Og\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-ggdb\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-g3\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-fno-omit-frame-pointer\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"-fuse-ld=ld\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"-L/home/$THEUSER/.elan/toolchains/leanprover--lean4---nightly-2022-10-27/lib\"</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>(some of these flags are likely unnecessary but I don't remember which, so I just include all :) )</p>",
        "id": 310314372,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668555812
    },
    {
        "content": "<p>(arthur has to go so I'll be looking at this now. but also I'm on WSL2 so <code>perf</code> doesn't really work)</p>",
        "id": 310314495,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1668555869
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, how should I read this output? It looks like we're spending a lot of time in <code>l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</code>?</p>",
        "id": 310315060,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1668556178
    },
    {
        "content": "<blockquote>\n<p>but also I'm on WSL2 so perf doesn't really work</p>\n</blockquote>\n<p><code>perf</code> should work well enough on WSL2 (only the performance counters are broken).  You just need to install the tools for the wrong linux version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sudo</span> <span class=\"n\">apt</span> <span class=\"n\">install</span> <span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">tools</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">53</span><span class=\"bp\">-</span><span class=\"n\">generic</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">tools</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">53</span><span class=\"bp\">-</span><span class=\"n\">generic</span><span class=\"bp\">/</span><span class=\"n\">perf</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 310315413,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668556389
    },
    {
        "content": "<p>There are some clear improvements we can make on our side, but I still don't understand the performance drop.<br>\n<span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> to reproduce the issue, you can <code>lake exe yatima compile Fixtures/Transpilation/Demo.lean</code> (but you need to open it on VSCode first so it generates the olean file). This command will generate an <code>output.ir</code>. This call, alone, used to take 20s on my machine and now it takes 50s.</p>\n<p>To reproduce the overflow (which might not happen on your machine if you have too much memory available), do <code>lake exe yatima typecheck output.ir</code></p>",
        "id": 310318168,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668557948
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 310318529,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1668558204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20drop/near/310315060\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span>, how should I read this output? It looks like we're spending a lot of time in <code>l_Std_RBNode_forM___at_Yatima_Converter_convertStore___spec__10</code>?</p>\n</blockquote>\n<p>I didn't make it very clear, sorry. The only point of including that example output was to demonstrate that it has indents where <code>typecheck</code> calls <code>convertStore</code> calls .. , whereas the output Arthur seems to have been getting was entirely flat. If you get the flatness, it usually means the recording is missing symbol information so you don't know which function in your code is calling <code>lean_dec_ref_cold</code> a lot and (perhaps!) resulting in the slowdown.</p>",
        "id": 310319132,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1668558568
    },
    {
        "content": "<p>Thanks everyone for the pointers!<br>\nApparently the root cause for the slowdown was the expansion for the RBMap API, which contains less partial functions and whose compilation will trigger the compilation of many other constants.</p>\n<p>I will work on other improvements mentioned above <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>🏼</p>",
        "id": 310353216,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668584520
    },
    {
        "content": "<p>I'm unclear on the issue here. Is it a regression in the Std RBMap API relative to before / to lean?</p>",
        "id": 310355691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668585812
    },
    {
        "content": "<p>I don't see why fewer <code>partial</code> functions would affect anything other than compile time</p>",
        "id": 310355780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668585853
    },
    {
        "content": "<p>We are compiling the lean environment into a Yatima one, so since RBMap depended on more constants our process was expectedly slower</p>",
        "id": 310356895,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1668586402
    },
    {
        "content": "<p>oh I see, it's like the lean self-test benchmark where compile time <em>is</em> the test</p>",
        "id": 310357648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668586734
    },
    {
        "content": "<p>Sorry, I wasn't clear enough when I said \"compile\"</p>",
        "id": 310359364,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668587480
    }
]