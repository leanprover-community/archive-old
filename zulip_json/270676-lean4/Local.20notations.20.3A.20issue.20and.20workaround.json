[
    {
        "content": "<p>I'm interested in defining local notations, to have for instance fancy group laws, custom symbols for orders, etc.</p>\n<p>It looks like I'm not the only one interested in this (there are already issues <a href=\"https://github.com/leanprover/lean4/issues/435\">#435</a> and <a href=\"https://github.com/leanprover/lean4/issues/358\">#358</a> that are close to my point), so I'll write here</p>\n<ul>\n<li>A minimal example of the problem</li>\n<li>A (not fully satisfying) workaround</li>\n<li>The tracks that I've found to solve this issue (and that I couldn't follow on my own :/)</li>\n</ul>\n<p>[ This is a lengthy post because I just summarize what I have found. I would have loved to have simply fixed the issue, PR'd Lean 4 and just announced the feature without making too much noise but this is out of my reach :/ ]</p>\n<hr>\n<p>The problem arises in scenarios like this one :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck.allowSectionVars</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ◃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rel</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"c\">/-</span><span class=\"cm\"> Goal is `∀ (x y : O), rel x y` :'( -/</span> <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>So here's a workaround if you want fancy notation and pretty printing !</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck.allowSectionVars</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ◃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">rel</span>\n<span class=\"kd\">@[appUnexpander id]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandAppRel</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">rel</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"c\">/-</span><span class=\"cm\"> Goal is `∀ (x y : O), x ◃ y` !! -/</span> <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>The Unexpander just finds all the instances of <code>app rel x y</code> and displays them as <code>x ◃ y</code>.<br>\nThis pattern works well in more compex cases. Here is an example that demonstrates this, and by the way I give examples of what does _not_ work :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck.allowSectionVars</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">rel'</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"n\">O</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ◃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">rel</span> <span class=\"c1\">-- Notice we can directly use `infixl`</span>\n<span class=\"kd\">@[appUnexpander id]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandAppRel</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">rel</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- This one does _not_ work (explained just after)</span>\n<span class=\"kd\">@[appUnexpander rel]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandRel</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span> <span class=\"bp\">◃</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">-- Goal is : ∀ (x y z : O), x ◃ y ◃ z = rel x y</span>\n  <span class=\"gr\">admit</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- Prints correctly \"x ◃ y ◃ z\" but still prints \"rel\" on the right</span>\n</code></pre></div>\n<p>Up to my understanding, the original problem arises from <a href=\"https://github.com/leanprover/lean4/blob/89373bd64fb5c69126f325407de1a4f609decce6/src/Lean/Elab/Syntax.lean#L450-L453\"><code>mkSimpleDelab</code></a> :</p>\n<ul>\n<li>It only accepts right hand side expressions that are just a function (no function applications, because functions and function applications are _not_ the same syntactically), which rules out the <code>app rel</code> rhs;</li>\n<li>And the function that is given <a href=\"https://github.com/leanprover/lean4/blob/89373bd64fb5c69126f325407de1a4f609decce6/src/Lean/Elab/Syntax.lean#L456\">must be global</a>, which makes having <code>rel</code> in the rhs impossible because <code>rel</code> was introduced by <code>variable</code>.</li>\n</ul>\n<p>And apparently it isn't possible to use a local name as a parameter to <code>appUnexpander</code> (or I didn't understand how to do that).</p>",
        "id": 238690460,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1620944859
    },
    {
        "content": "<p>actually, this is something I find quite useful myself and have been playing around with a lot</p>",
        "id": 238692742,
        "sender_full_name": "Mac",
        "timestamp": 1620946196
    },
    {
        "content": "<p>first thing to note is that you could use the builtin <code>id</code> instead of having to use define your own <code>app</code></p>",
        "id": 238693613,
        "sender_full_name": "Mac",
        "timestamp": 1620946779
    },
    {
        "content": "<p>also, the idea of using <code>app</code>/<code>id</code>  this way in order to able to write an <code>appUnexpander</code> is genius! I never would have thought of that!</p>",
        "id": 238693758,
        "sender_full_name": "Mac",
        "timestamp": 1620946841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Local.20notations.20.3A.20issue.20and.20workaround/near/238693613\">said</a>:</p>\n<blockquote>\n<p>first thing to note is that you could use the builtin <code>id</code> instead of having to use define your own <code>app</code></p>\n</blockquote>\n<p>This is indeed better with <code>id</code>, thanks ! I updated my original message.</p>",
        "id": 238694059,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1620947001
    },
    {
        "content": "<p>I opened an issue on lean4 : <a href=\"https://github.com/leanprover/lean4/issues/465\">#465</a></p>",
        "id": 238694098,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1620947035
    },
    {
        "content": "<p>Fyi, I had a related discussion a while back: <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234451179\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234451179</a> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> (a Lean 4 developer) suggested some ways local notation may be addressed in the future</p>",
        "id": 238700088,
        "sender_full_name": "Mac",
        "timestamp": 1620951460
    }
]