[
    {
        "content": "<p>I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">96</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">function</span> <span class=\"n\">expected</span>\n  <span class=\"n\">tm</span><span class=\"bp\">✝¹</span> <span class=\"n\">_x_13</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">110</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">low</span> <span class=\"n\">level</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">SetModel.interpTmStep'</span>\n</code></pre></div>\n<p>Does getting a message from the kernel roughly analogous to getting an anomaly from Coq or an internal error from gcc?</p>",
        "id": 229676120,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615388772
    },
    {
        "content": "<p>Here's an unminimized example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">snoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">CtxSyntaxLayer</span>\n<span class=\"kd\">end</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">GAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">getCtxStep</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.top</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.bot</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n<span class=\"kd\">end</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EGrfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">GAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Actx</span> <span class=\"o\">:</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Bctx</span> <span class=\"o\">:</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n        <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">)</span>\n        <span class=\"bp\">→</span> <span class=\"n\">ET</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Actx</span> <span class=\"n\">Bctx</span><span class=\"o\">))</span>\n        <span class=\"bp\">→</span> <span class=\"n\">ET</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n        <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n  <span class=\"c1\">-- set options for debugging \"(kernel) declaration has metavariables\" errors</span>\n  <span class=\"c1\">--set_option trace.Elab.definition true</span>\n  <span class=\"c1\">--set_option pp.explicit true</span>\n  <span class=\"kd\">def</span> <span class=\"n\">getTyStep</span> <span class=\"o\">:</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">Tm</span> <span class=\"n\">EG</span> <span class=\"n\">ET</span> <span class=\"n\">getCtx</span> <span class=\"n\">getTy</span> <span class=\"n\">TAlgebra</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.tt</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.top</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.zero</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.succ</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)))</span> <span class=\"n\">EGrfl</span> <span class=\"n\">EGrfl</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.app</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:=</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SyntaxModel</span> <span class=\"n\">where</span>\n  <span class=\"n\">Ctx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"n\">EC</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ETy</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span>\n  <span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"n\">interpCStep</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">EC</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span>\n  <span class=\"n\">interpTyStep</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">EC</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"n\">interpTmStep</span> <span class=\"o\">:</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">Tm</span> <span class=\"n\">EC</span> <span class=\"n\">ETy</span> <span class=\"n\">getCtx</span> <span class=\"n\">getTy</span> <span class=\"n\">interpTyStep</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SetModel</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Ctx</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n    <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span>\n    <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">Tm</span> <span class=\"n\">where</span>\n    <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n    <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">ty.ty</span> <span class=\"bp\">Γ</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">ECtx</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"bp\">$</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"kd\">def</span> <span class=\"n\">ETy</span>  <span class=\"o\">:</span> <span class=\"n\">Ty</span>  <span class=\"bp\">→</span> <span class=\"n\">Ty</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"bp\">$</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"kd\">def</span> <span class=\"n\">ETm</span>  <span class=\"o\">:</span> <span class=\"n\">Tm</span>  <span class=\"bp\">→</span> <span class=\"n\">Tm</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"bp\">$</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">interpCStep</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">ECtx</span> <span class=\"n\">Ty.ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span>\n    <span class=\"bp\">|</span> <span class=\"n\">CtxSyntaxLayer.emp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">CtxSyntaxLayer.snoc</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">T.ty</span> <span class=\"n\">γ</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.mk</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Ty.Unit</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">_root_.Unit</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Ty.Empty</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">_root_.Empty</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Ty.Nat</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">_root_.Nat</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Tm.inj</span> <span class=\"bp\">Γ</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Tm.mk</span> <span class=\"o\">(</span><span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">interpTyStep</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">ECtx</span> <span class=\"n\">Ty.ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.top</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.Unit</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.bot</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.Empty</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.Nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">Actx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">Bctx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.mk</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">γ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A.ty</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">Actx</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B.ty</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">Bctx</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">interpTmStep</span> <span class=\"o\">:</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">Ctx</span> <span class=\"n\">Ty</span> <span class=\"n\">Tm</span> <span class=\"n\">ECtx</span> <span class=\"n\">ETy</span> <span class=\"n\">Ty.ctx</span> <span class=\"n\">Tm.ty</span> <span class=\"n\">interpTyStep</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.tt</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tm.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">Unit.unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.zero</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tm.inj</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.succ</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tm.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">Nat.succ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.app</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">Actx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">Bctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm.mk</span> <span class=\"n\">fty</span> <span class=\"n\">ftm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm.mk</span> <span class=\"o\">(</span><span class=\"n\">Ty.mk</span> <span class=\"n\">xctx</span> <span class=\"n\">xty</span><span class=\"o\">)</span> <span class=\"n\">xtm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">fTy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">xTy</span><span class=\"o\">)</span>\n        <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">B</span>\n           <span class=\"o\">,</span> <span class=\"n\">tm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n                     <span class=\"o\">(</span><span class=\"kd\">by</span>\n                       <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">fTy</span> <span class=\"n\">xTy</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">fTy</span> <span class=\"n\">xTy</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">Actx</span> <span class=\"n\">Bctx</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">Actx</span> <span class=\"n\">Bctx</span>\n                       <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">interpTyStep</span><span class=\"o\">,</span> <span class=\"n\">cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n                       <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ftm</span> <span class=\"n\">xtm</span><span class=\"o\">)</span>\n                     <span class=\"o\">)</span>\n               <span class=\"o\">}</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Model</span> <span class=\"o\">:</span> <span class=\"n\">SyntaxModel</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">Ctx</span> <span class=\"o\">:=</span> <span class=\"n\">Ctx</span>\n    <span class=\"o\">,</span> <span class=\"n\">Ty</span> <span class=\"o\">:=</span> <span class=\"n\">Ty</span>\n    <span class=\"o\">,</span> <span class=\"n\">Tm</span> <span class=\"o\">:=</span> <span class=\"n\">Tm</span>\n    <span class=\"o\">,</span> <span class=\"n\">EC</span> <span class=\"o\">:=</span> <span class=\"n\">ECtx</span>\n    <span class=\"o\">,</span> <span class=\"n\">ETy</span> <span class=\"o\">:=</span> <span class=\"n\">ETy</span>\n    <span class=\"o\">,</span> <span class=\"n\">ETm</span> <span class=\"o\">:=</span> <span class=\"n\">ETm</span>\n    <span class=\"o\">,</span> <span class=\"n\">getCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.ctx</span>\n    <span class=\"o\">,</span> <span class=\"n\">getTy</span> <span class=\"o\">:=</span> <span class=\"n\">Tm.ty</span>\n    <span class=\"o\">,</span> <span class=\"n\">interpCStep</span> <span class=\"o\">:=</span> <span class=\"n\">interpCStep</span>\n    <span class=\"o\">,</span> <span class=\"n\">interpTyStep</span> <span class=\"o\">:=</span> <span class=\"n\">interpTyStep</span>\n    <span class=\"o\">,</span> <span class=\"n\">interpTmStep</span> <span class=\"o\">:=</span> <span class=\"n\">interpTmStep</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">SetModel</span>\n</code></pre></div>\n<p>using the latest Lean nightly</p>",
        "id": 229676423,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615388885
    },
    {
        "content": "<p>Reported as <a href=\"https://github.com/leanprover/lean4/issues/341\">https://github.com/leanprover/lean4/issues/341</a></p>",
        "id": 229678571,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615389513
    },
    {
        "content": "<p>This is a known bug in the code generator. It is in an old part that is still written in C/C++. We need to infer types in the compiler, and we reused the kernel type checker for this. However, the compiler performs transformations that may produce type incorrect terms. This happens in code that makes heavy use of dependent types (like yours). I will check if there is some \"band-aid\" to workaround this particular instance of the problem.<br>\nThe definitive solution will only happen when we replace this part of the compiler with Lean code, and implement a custom <code>inferType</code> method for the compiler.</p>\n<blockquote>\n<p>Does getting a message from the kernel roughly analogous to getting an anomaly from Coq or an internal error from gcc?</p>\n</blockquote>\n<p>Yes, a message with the <code>(kernel)</code> prefix usually indicates there is a bug in the frontend or code generator.</p>",
        "id": 229679966,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615389909
    }
]