[
    {
        "content": "<p>i need a termination by but i dont really know how they work. i need it for this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xss</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"n\">xss</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">yss</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">yss</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272062195,
        "sender_full_name": "Joseph O",
        "timestamp": 1644974173
    },
    {
        "content": "<p>I think this is actually kind of an advanced example because it's not on one argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xss</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xss</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">yss</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">yss.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">yss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">yss</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n</code></pre></div>",
        "id": 272063025,
        "sender_full_name": "Chris B",
        "timestamp": 1644974919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272063025\">said</a>:</p>\n<blockquote>\n<p>I think this is actually kind of an advanced example because it's not on one argument:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xss</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xss</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">yss</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">yss.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">yss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">yss</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>how is the termination by working there? and why are the <code>have</code>s nessacery?</p>",
        "id": 272063326,
        "sender_full_name": "Joseph O",
        "timestamp": 1644975215
    },
    {
        "content": "<p>They're not strictly necessary, the syntax for termination hints allows for a <code>decreasing_by &lt;tactic proof&gt;</code>clause to discharge the proof obligations, but I think <code>decreasing_by</code> has issues when more than one branch produces a unique obligation. But in any case you have to show that something being passed as an argument is strictly decreasing with each recursive call, where decreasing is defined in terms of some instance of <code>WellFoundedRelation</code>.</p>",
        "id": 272063531,
        "sender_full_name": "Chris B",
        "timestamp": 1644975384
    },
    {
        "content": "<p>For each branch I think it looks in the local assumptions for a proof first, which is why the <code>have</code> thing works.</p>",
        "id": 272063560,
        "sender_full_name": "Chris B",
        "timestamp": 1644975438
    },
    {
        "content": "<p>ah yes</p>",
        "id": 272063745,
        "sender_full_name": "Joseph O",
        "timestamp": 1644975654
    },
    {
        "content": "<p>how does the <code>by simp</code> thing work?</p>",
        "id": 272063753,
        "sender_full_name": "Joseph O",
        "timestamp": 1644975674
    },
    {
        "content": "<p>also, what is <code>hx:xs</code> and <code>hy:ys</code>?</p>",
        "id": 272063830,
        "sender_full_name": "Joseph O",
        "timestamp": 1644975735
    },
    {
        "content": "<p><code>hx</code> and <code>hy</code> are hypotheses. The <code>by simp</code> parts are tactic proofs, <code>simp</code> is a tactic that applies lemmas; it's applying the stuff in the brackets.</p>",
        "id": 272064127,
        "sender_full_name": "Chris B",
        "timestamp": 1644976030
    },
    {
        "content": "<p>Well I guess more accurately it's like syntax for a match that preserves the hypotheses in the match arms. So like in the first case you need a witness that <code>hy = []</code>.</p>",
        "id": 272064521,
        "sender_full_name": "Chris B",
        "timestamp": 1644976462
    },
    {
        "content": "<p>how can i debug print values in the middle of a function?</p>",
        "id": 272064706,
        "sender_full_name": "Joseph O",
        "timestamp": 1644976638
    },
    {
        "content": "<p>Nevermind, i found it</p>",
        "id": 272064961,
        "sender_full_name": "Joseph O",
        "timestamp": 1644976870
    },
    {
        "content": "<p>i do have a question about my function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum.reverse</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>lets say i input <code>['a', 'b'] [1, 2, 3] []</code>. Here is how the iterations should go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"c1\">-- this is what it should turn into, because it matches at the second case, but for some reason this is not happening</span>\n<span class=\"c1\">-- same process</span>\n</code></pre></div>\n<p>this is the output: <code>[(\"a\", 1), (\"a\", 2), (\"a\", 3)]</code></p>\n<p>i wish there was a way i could debug and print the values</p>",
        "id": 272065486,
        "sender_full_name": "Joseph O",
        "timestamp": 1644977367
    },
    {
        "content": "<p>do you have an idea why this could be happening <span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> ?</p>",
        "id": 272065570,
        "sender_full_name": "Joseph O",
        "timestamp": 1644977447
    },
    {
        "content": "<p>Because the version you just posted is now explicitly reversing the list in the nil/nil case.</p>",
        "id": 272065989,
        "sender_full_name": "Chris B",
        "timestamp": 1644977910
    },
    {
        "content": "<p>What do you expect <code>allPairsAux ['a', 'b'] [] [('a', 3), ('a', 2), ('a', 1)]</code> to be?</p>",
        "id": 272066330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644978255
    },
    {
        "content": "<p>well it shouldn't return accum.reverse since it doesnt match the [] [] case</p>",
        "id": 272067049,
        "sender_full_name": "Joseph O",
        "timestamp": 1644979059
    },
    {
        "content": "<p>why is it matching on that then <span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span></p>",
        "id": 272067301,
        "sender_full_name": "Joseph O",
        "timestamp": 1644979331
    },
    {
        "content": "<p>It isn't matching the [] [] case.</p>",
        "id": 272067944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644980046
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xss</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xss</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">yss</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">yss.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">yss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">yss</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n\n<span class=\"c1\">-- [('a', 3), ('a', 2), ('a', 1)]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum.reverse</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xss</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xss</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">yss</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">yss.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">yss.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">yss</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n\n<span class=\"c1\">-- [('a', 1), ('a', 2), ('a', 3)]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 272068337,
        "sender_full_name": "Chris B",
        "timestamp": 1644980512
    },
    {
        "content": "<p>The only thing I changed is the <code>accum.reverse</code> in the nil/nil case.</p>",
        "id": 272068413,
        "sender_full_name": "Chris B",
        "timestamp": 1644980578
    },
    {
        "content": "<p>Yes, but that is not the output i am looking for</p>",
        "id": 272069034,
        "sender_full_name": "Joseph O",
        "timestamp": 1644981338
    },
    {
        "content": "<p>What i meant here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"sc\">'b'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"c1\">-- this is what it should turn into, because it matches at the second case, but for some reason this is not happening</span>\n<span class=\"c1\">-- same process</span>\n</code></pre></div>\n<p>Is not the output, but it what allPairsAux should be taking as its arguments on its next iteration</p>",
        "id": 272069095,
        "sender_full_name": "Joseph O",
        "timestamp": 1644981396
    },
    {
        "content": "<p>The output should actually be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[(</span><span class=\"bp\">“</span><span class=\"n\">a</span><span class=\"bp\">”</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"n\">a</span><span class=\"bp\">”</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"n\">a</span><span class=\"bp\">”</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"n\">b</span><span class=\"bp\">”</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"n\">b</span><span class=\"bp\">”</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"n\">b</span><span class=\"bp\">”</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>Sorry for not making myself clear</p>",
        "id": 272069137,
        "sender_full_name": "Joseph O",
        "timestamp": 1644981464
    },
    {
        "content": "<p>That's just not the function you wrote, I don't know what to tell you.  In the case that <code>ys</code> is empty and <code>xs</code> is not, you're calling the function recursively with the tail of <code>xs</code> and the empty list.</p>",
        "id": 272070015,
        "sender_full_name": "Chris B",
        "timestamp": 1644982463
    },
    {
        "content": "<p>But you seem to expect <code>ys</code> to become <code>[1, 2, 3]</code> again.</p>",
        "id": 272070026,
        "sender_full_name": "Chris B",
        "timestamp": 1644982486
    },
    {
        "content": "<p>I think it's easier if you write an auxiliary function that receives <code>a : α</code> and <code>l : List β</code> and then returns something of type <code>List (α × β)</code>. Such that the return of <code>2</code> and <code>[\"a\", \"b\", \"c\"]</code> is <code>[(2, \"a\"), (2, \"b\"), (2, \"c\")]</code>.</p>\n<p>Then you can do a <code>foldl</code> on a <code>List α</code> using your function</p>",
        "id": 272070280,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644982847
    },
    {
        "content": "<p>Unless, of course, you want to go through the exercise of building a standalone function. Then you can ignore my idea</p>",
        "id": 272070628,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644983344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272070280\">said</a>:</p>\n<blockquote>\n<p>I think it's easier if you write an auxiliary function that receives <code>a : α</code> and <code>l : List β</code> and then returns something of type <code>List (α × β)</code>. Such that the return of <code>2</code> and <code>[\"a\", \"b\", \"c\"]</code> is <code>[(2, \"a\"), (2, \"b\"), (2, \"c\")]</code>.</p>\n<p>Then you can do a <code>foldl</code> on a <code>List α</code> using your function</p>\n</blockquote>\n<p>An auxiliary function for my auxiliary function?</p>",
        "id": 272109465,
        "sender_full_name": "Joseph O",
        "timestamp": 1645014814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272070015\">said</a>:</p>\n<blockquote>\n<p>That's just not the function you wrote, I don't know what to tell you.  In the case that <code>ys</code> is empty and <code>xs</code> is not, you're calling the function recursively with the tail of <code>xs</code> and the empty list.</p>\n</blockquote>\n<p>I wanted it to reset to the original ys</p>",
        "id": 272109562,
        "sender_full_name": "Joseph O",
        "timestamp": 1645014853
    },
    {
        "content": "<p>that would solve the whole problem</p>",
        "id": 272109612,
        "sender_full_name": "Joseph O",
        "timestamp": 1645014892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272070280\">said</a>:</p>\n<blockquote>\n<p>I think it's easier if you write an auxiliary function that receives <code>a : α</code> and <code>l : List β</code> and then returns something of type <code>List (α × β)</code>. Such that the return of <code>2</code> and <code>[\"a\", \"b\", \"c\"]</code> is <code>[(2, \"a\"), (2, \"b\"), (2, \"c\")]</code>.</p>\n<p>Then you can do a <code>foldl</code> on a <code>List α</code> using your function</p>\n</blockquote>\n<p>Why would I want to use fold? Doesn’t fold turn a sequence into a value</p>",
        "id": 272109684,
        "sender_full_name": "Joseph O",
        "timestamp": 1645014946
    },
    {
        "content": "<p>if I could hold the original values somewhere</p>",
        "id": 272109808,
        "sender_full_name": "Joseph O",
        "timestamp": 1645015011
    },
    {
        "content": "<p>That \"value\" can be another sequence.</p>",
        "id": 272111497,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645016023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272111497\">said</a>:</p>\n<blockquote>\n<p>That \"value\" can be another sequence.</p>\n</blockquote>\n<p>And that sequence holds the original two lists?</p>",
        "id": 272112017,
        "sender_full_name": "Joseph O",
        "timestamp": 1645016372
    },
    {
        "content": "<p>You can build up a tuple as an aux function, and use prod.snd to get your final value. Check out accumulators in Haskell too.</p>",
        "id": 272112800,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645016829
    },
    {
        "content": "<p>i tried using a Product, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">origs</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">origs.2</span><span class=\"o\">)</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">origs.1</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span> <span class=\"n\">origs</span>\n</code></pre></div>\n<p>but i get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">failed</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">xs</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n<span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">origs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">xs</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"n\">List.length</span> <span class=\"n\">ys</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"n\">origs.snd</span> <span class=\"bp\">+</span> <span class=\"n\">List.length</span> <span class=\"n\">accum</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">accum</span>\n</code></pre></div>\n<p>its pretty weird in my opinion</p>",
        "id": 272112811,
        "sender_full_name": "Joseph O",
        "timestamp": 1645016836
    },
    {
        "content": "<p>What could have cuased the assumption to fail?</p>",
        "id": 272113338,
        "sender_full_name": "Joseph O",
        "timestamp": 1645017140
    },
    {
        "content": "<p>well, it's definitely <em>not</em> true that <code>List.length origs.snd + List.length accum &lt; List.length accum</code>, right?</p>",
        "id": 272116269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645018738
    },
    {
        "content": "<p>I suggest you start out with a <code>partial def</code> so you can make sure the definition is correct first without worrying about termination</p>",
        "id": 272116419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645018812
    },
    {
        "content": "<p>I have to prove that too?</p>",
        "id": 272116428,
        "sender_full_name": "Joseph O",
        "timestamp": 1645018817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272116419\">said</a>:</p>\n<blockquote>\n<p>I suggest you start out with a <code>partial def</code> so you can make sure the definition is correct first without worrying about termination</p>\n</blockquote>\n<p>ok</p>",
        "id": 272116437,
        "sender_full_name": "Joseph O",
        "timestamp": 1645018826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272116269\">said</a>:</p>\n<blockquote>\n<p>well, it's definitely <em>not</em> true that <code>List.length origs.snd + List.length accum &lt; List.length accum</code>, right?</p>\n</blockquote>\n<p>where can i use that?</p>",
        "id": 272116498,
        "sender_full_name": "Joseph O",
        "timestamp": 1645018877
    },
    {
        "content": "<p>Any ideas???</p>",
        "id": 272119884,
        "sender_full_name": "Joseph O",
        "timestamp": 1645020442
    },
    {
        "content": "<p>The last version you posted does not terminate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">origs</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">origs.2</span><span class=\"o\">)</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">origs.1</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span> <span class=\"n\">origs</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">],[</span><span class=\"mi\">1</span><span class=\"o\">])</span>  <span class=\"c1\">-- Does not terminate.</span>\n</code></pre></div>\n<p>Reid is right. Try to add <code>partial</code> like I did here and test the function using <code>#eval</code> until it does what you want it to do. Then you can attempt to prove termination.</p>",
        "id": 272123002,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645021874
    },
    {
        "content": "<p>i tried this but its the same thign</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">origs</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">origs.snd</span><span class=\"o\">)</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">]</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">origs.fst</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span> <span class=\"n\">origs</span>\n\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">accum</span> <span class=\"n\">origs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">origs.snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">accum.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">accum.length</span>\n</code></pre></div>",
        "id": 272126669,
        "sender_full_name": "Joseph O",
        "timestamp": 1645023544
    },
    {
        "content": "<p>EDIT: fixed</p>",
        "id": 272126748,
        "sender_full_name": "Joseph O",
        "timestamp": 1645023579
    },
    {
        "content": "<p>Isn't your server dead? CTRL+SHIFT+X sometimes brings it back to life</p>",
        "id": 272127076,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645023696
    },
    {
        "content": "<p>It was because I was evalutating a function that didnt terminate</p>",
        "id": 272127154,
        "sender_full_name": "Joseph O",
        "timestamp": 1645023723
    },
    {
        "content": "<p>something keeps crashing vscode though</p>",
        "id": 272127252,
        "sender_full_name": "Joseph O",
        "timestamp": 1645023773
    },
    {
        "content": "<p>and I really dont know how to fix the termination. Im going to admit it</p>",
        "id": 272127326,
        "sender_full_name": "Joseph O",
        "timestamp": 1645023815
    },
    {
        "content": "<p>Here's my attempt at it (at least of what I think you are trying to define):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairs</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.bind</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 272127471,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645023882
    },
    {
        "content": "<p>Ah you used map. My goal was ultimately to use functions like map and fold as little as possible. But you know, its much esier. Also, what does xs.bind do?</p>",
        "id": 272129332,
        "sender_full_name": "Joseph O",
        "timestamp": 1645024748
    },
    {
        "content": "<p>I have no idea how the code you wrote works</p>",
        "id": 272129641,
        "sender_full_name": "Joseph O",
        "timestamp": 1645024901
    },
    {
        "content": "<p><code>l.bind f</code> is <code>(l.map f).join</code>, where <code>join</code> flattens a list of lists</p>",
        "id": 272130951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645025494
    },
    {
        "content": "<p>that is, you apply the function to each element of the list, and then concatenate all the resulting lists (the function returns a list for each element)</p>",
        "id": 272131089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645025544
    },
    {
        "content": "<p>Maybe it's easier to understand if I write it using two auxiliary definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">attach</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ys.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">attach</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [(2, \"a\"), (2, \"b\"), (2, \"c\")]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">attach</span> <span class=\"n\">x</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [[(1, \"a\"), (1, \"b\"), (1, \"c\")], [(2, \"a\"), (2, \"b\"), (2, \"c\")], [(3, \"a\"), (3, \"b\"), (3, \"c\")]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">allPairs</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">allPairs</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [(1, \"a\"), (1, \"b\"), (1, \"c\"), (2, \"a\"), (2, \"b\"), (2, \"c\"), (3, \"a\"), (3, \"b\"), (3, \"c\")]</span>\n</code></pre></div>",
        "id": 272132030,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645025930
    },
    {
        "content": "<p>Here's a version using only primitive operations on list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairs</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">r</span>\n    <span class=\"n\">aux₂</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 272132098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645025954
    },
    {
        "content": "<p>Here's another version that should work but causes a kernel type check error (cc: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairs</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">r</span>\n    <span class=\"n\">aux₂</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">free</span> <span class=\"kd\">variables</span> <span class=\"bp\">'</span><span class=\"n\">allPairs.aux'</span>\n</code></pre></div>",
        "id": 272132285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645026034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272132285\">said</a>:</p>\n<blockquote>\n<p>Here's another version that should work but causes a kernel type check error (cc: <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairs</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">r</span>\n    <span class=\"n\">aux₂</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">aux</span> <span class=\"n\">xs</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">free</span> <span class=\"kd\">variables</span> <span class=\"bp\">'</span><span class=\"n\">allPairs.aux'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for reporting the issue. I will take a look.</p>",
        "id": 272132605,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645026181
    },
    {
        "content": "<p>I love it when bugs are found by casually playing with a system</p>",
        "id": 272132801,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645026269
    },
    {
        "content": "<p>I think they call it \"<a href=\"https://en.wikipedia.org/wiki/Monkey_testing\">monkey testing</a>\"</p>",
        "id": 272132924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645026326
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1020\">https://github.com/leanprover/lean4/issues/1020</a></p>",
        "id": 272133257,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645026464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/termination.20by/near/272132924\">said</a>:</p>\n<blockquote>\n<p>I think they call it \"<a href=\"https://en.wikipedia.org/wiki/Monkey_testing\">monkey testing</a>\"</p>\n</blockquote>\n<p>I knew that terminology for random tests equipped with brutally fast inputs (easily applicable for testing apps with GUIs). Which makes me wonder if it's possible to apply this technique to attack the Lean kernel in various ways in search for bugs like this</p>",
        "id": 272133727,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645026640
    },
    {
        "content": "<p>that sounds more like fuzz testing (which would probably work fairly well against the lean kernel)</p>",
        "id": 272133977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645026756
    },
    {
        "content": "<p>Thanks everyone</p>",
        "id": 272142681,
        "sender_full_name": "Joseph O",
        "timestamp": 1645030254
    }
]