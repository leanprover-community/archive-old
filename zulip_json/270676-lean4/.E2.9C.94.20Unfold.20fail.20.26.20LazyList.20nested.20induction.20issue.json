[
    {
        "content": "<p>Pushed a fix for this issue.<br>\nBTW, the <code>induction</code> tactic is not effective for types such as <code>LazyList</code>. <code>LazyList</code> is a nested inductive type because of the <code>Thunk</code>. Thus, the <code>LazyList.rec</code> recursor (used by the induction tactic) has two motives. See</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">LazyList.rec</span>\n</code></pre></div>\n<p>I will modify <code>induction</code> to generate an error message in this kind of situation. <br>\nYou can use well-founded recursion to prove the theorem. We have recently added an example in \"Theorem Proving in Lean 4\" <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#mutual-recursion\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#mutual-recursion</a>.  It is much easier than in Lean 3. It is the <code>theorem numConsts_replaceConst</code> example.<br>\nYou can also add a custom induction theorem for <code>LazyList</code> which makes things much more convenient to use. Here is the example:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/lazyListRotateUnfoldProof.lean#L33-L48\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/lazyListRotateUnfoldProof.lean#L33-L48</a></p>",
        "id": 275043291,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647037743
    },
    {
        "content": "<p>Oh awesome, will give it a read!</p>",
        "id": 275043585,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647037922
    },
    {
        "content": "<p>Okay, this makes sense. For some nested inductions you may want the motive to be different, in which case you can use the mutual definitions.</p>\n<p>But for LazyList since we never actually want the motives to differ we just define an induction technique that has the same motive for both.</p>",
        "id": 275044433,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647038489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> has marked this topic as resolved.</p>",
        "id": 275044438,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647038496
    }
]