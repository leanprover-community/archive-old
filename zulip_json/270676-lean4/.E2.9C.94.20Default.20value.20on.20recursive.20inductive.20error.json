[
    {
        "content": "<p>I think this is because Lean generates auxiliary mutually recursive types for the internal representation of nested inductive types.</p>\n<p>So here, Lean is generating a type isomorphic to <code>Option (Value × Value)</code> which is not equal to <code>Option (Value × Value)</code>. So your default value has the \"wrong\" type relative to the internal representation</p>\n<p>I don't think the internal representation is intended to ever leak out, so this seems like a compiler bug</p>",
        "id": 293962673,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660765008
    },
    {
        "content": "<p>you can always do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span>\n  <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Value</span> <span class=\"bp\">×</span> <span class=\"n\">Value</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">grad</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Value.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Option</span>\n  <span class=\"o\">(</span><span class=\"n\">Value</span> <span class=\"bp\">×</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">grad</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">data</span> <span class=\"n\">prev</span> <span class=\"n\">op</span> <span class=\"n\">label</span> <span class=\"n\">grad</span>\n</code></pre></div>",
        "id": 293965276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660765924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Default.20value.20on.20recursive.20inductive.20error/near/293962673\">said</a>:</p>\n<blockquote>\n<p>So here, Lean is generating a type isomorphic to <code>Option (Value × Value)</code> which is not equal to <code>Option (Value × Value)</code>. So your default value has the \"wrong\" type relative to the internal representation</p>\n</blockquote>\n<p>Should the compiler also generate an isomorphic default value based on the one provided (i.e. .none)?</p>",
        "id": 293965876,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660766168
    },
    {
        "content": "<p>Yeah; that's why I think it's a compiler bug. I'd expect it to automatically apply the conversion to the specialized internal representation.</p>",
        "id": 293966387,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660766366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Default.20value.20on.20recursive.20inductive.20error/near/293966387\">said</a>:</p>\n<blockquote>\n<p>Yeah; that's why I think it's a compiler bug. I'd expect it to automatically apply the conversion to the specialized internal representation.</p>\n</blockquote>\n<p>I see. I assumed you were referring to the error message bubbling up internal verbiage.</p>",
        "id": 293966870,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660766530
    },
    {
        "content": "<p>Should I create an issue in the lean4 repo?</p>",
        "id": 293966945,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660766563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> <a href=\"#narrow/stream/270676-lean4/topic/Default.20value.20on.20recursive.20inductive.20error/near/293966870\">said</a>:</p>\n<blockquote>\n<p>I see. I assumed you were referring to the error message bubbling up internal verbiage.</p>\n</blockquote>\n<p>My impression is it should also never be visible in error messages, so you're right about that too :) and I think a github issue is fine, seems to be what Leo does when he sees bug reports here</p>",
        "id": 293967341,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660766722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 293967522,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660766782
    },
    {
        "content": "<p>While it is unfortunate that the message leaks implementation details like this, the core issue is that we can't support dependencies on values in that position. While the inductive is being constructed we cannot treat it like the real <code>Option</code> type and use <code>Option</code> functions or constructors like <code>.none</code></p>",
        "id": 293994270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660778837
    },
    {
        "content": "<p>possibly <code>:= by exact .none</code> would work though, since that delays typechecking to time of use</p>",
        "id": 293994362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660778893
    },
    {
        "content": "<p>hm, <code>by exact none</code> gives the error <code>invalid auto tactic, identifier is not allowed</code>, but you can work around it with an auxiliary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"exact_none\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Value</span> <span class=\"bp\">×</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">grad</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 293994657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660779129
    }
]