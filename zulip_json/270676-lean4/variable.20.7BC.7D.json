[
    {
        "content": "<p>Here's a change from Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  Inhabited C</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>If I change the default binder for <code>C</code> then I lose the type class <code>[Inhabited C]</code>. Is this expected behaviour?</p>\n<p>[Back story: I'm manually porting some category theory to Lean 4 and initially I thought we were back in the 2019 hell of having to <code>include ùíû </code> when universes got hairy, made even worse here by the fact that <code>include</code> might not have made it to Lean 4 yet (?). I then realised that in fact<br>\nsomething far simpler was going on :D . In fact Lean 4 universes seem to be working fine in category theory so far.]</p>",
        "id": 243066278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623956060
    },
    {
        "content": "<p>You didn't really change the default binder, you declared a new <code>C</code>, right?<br>\nE.g. in the first example <code>C : Type</code> and in the second one <code>C : Sort u</code>.</p>",
        "id": 243066729,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1623956289
    },
    {
        "content": "<p>FYI this was added to Lean3 @ <a href=\"https://github.com/leanprover-community/lean/commit/dc93603b4af3f0ed4559d48fe3d55e4e68ffbdfb\">https://github.com/leanprover-community/lean/commit/dc93603b4af3f0ed4559d48fe3d55e4e68ffbdfb</a></p>",
        "id": 243067142,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623956482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> this is my point -- in Lean 3 this works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>and this idiom is used quite a bit in mathlib -- you develop some theory about groups with <code>(G : Type*) [group G]</code> and then you want to develop some stuff involving <code>(g : G)</code> so you write <code>variable {G}</code> and now <code>G</code> is still a group but it's implicit in the lemmas where it's included from that point on. So I thought I did change the default binder. I don't understand Daniel's link -- C or C++ or whatever it is is all greek to me.</p>",
        "id": 243068669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623957103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243068669\">said</a>:</p>\n<blockquote>\n<p>I don't understand Daniel's link -- C or C++ or whatever it is is all greek to me. Update: aah! I understand the tests though :-)</p>\n</blockquote>\n<p>Sorry for the curt response above :) -- In addition to the tests, the commit message links to the original GitHub issue that motivated the feature (<a href=\"https://github.com/leanprover/lean/issues/532\">https://github.com/leanprover/lean/issues/532</a>).</p>",
        "id": 243069478,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623957420
    },
    {
        "content": "<p>I recommend creating a Lean4 issue for the feature.</p>",
        "id": 243070309,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623957767
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/536\">lean4#536</a></p>",
        "id": 243072481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623958654
    },
    {
        "content": "<p>Does anyone else find that this topic keeps getting removed from the <code>#lean4</code> stream list? It looks like a bug in Zulip, probably triggered by the braces in the topic name.</p>",
        "id": 243072610,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623958693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243072481\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/issues/536\">lean4#536</a></p>\n</blockquote>\n<p>Note: the syntax highlighting isn't working in your issue for some reason.</p>",
        "id": 243073252,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623958977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243068669\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> this is my point -- in Lean 3 this works fine</p>\n</blockquote>\n<p>Ah, sorry :) I wasn't sure if you had already noticed that it's unrelated to the type class.</p>",
        "id": 243073318,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1623959011
    },
    {
        "content": "<p>Another weird thing: I _did_ click on the \"<a href=\"https://github.com/leanprover-community/mathlib/issues/532\">#532</a>\" link on github (the one which Daniel pointed out in his second post), but when I did it, it took me to  <a href=\"https://github.com/leanprover-community/lean/pull/532\">https://github.com/leanprover-community/lean/pull/532</a> (the fork) which is unrelated, and this was what caused my \"I don't understand anything\" outburst.</p>",
        "id": 243094955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623969890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243073252\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243072481\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/issues/536\">lean4#536</a></p>\n</blockquote>\n<p>Note: the syntax highlighting isn't working in your issue for some reason.</p>\n</blockquote>\n<p>On Zulip <code> ``` </code> is enough, but on github I need <code> ```lean </code>. I fixed it.</p>",
        "id": 243095913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623970530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/variable.20.7BC.7D/near/243094955\">said</a>:</p>\n<blockquote>\n<p>Another weird thing: I _did_ click on the \"<a href=\"https://github.com/leanprover-community/mathlib/issues/532\">#532</a>\" link on github (the one which Daniel pointed out in his second post), but when I did it, it took me to  <a href=\"https://github.com/leanprover-community/lean/pull/532\">https://github.com/leanprover-community/lean/pull/532</a> (the fork) which is unrelated, and this was what caused my \"I don't understand anything\" outburst.</p>\n</blockquote>\n<p>That was my fault -- I should have originally linked to the commit from the <code>leanprover</code> repo instead of the <code>leanprover-community</code> repo so that the issue link would work.</p>",
        "id": 243107402,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623980002
    }
]