[
    {
        "content": "<p>I am trying to implement white-space sensitive syntax, but can't get the delaboration to work. Here's an MWE for the error I am getting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n<span class=\"kn\">open</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[termParser]</span>\n<span class=\"kd\">def</span> <span class=\"n\">listParser</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"List!\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">manyIndent</span> <span class=\"o\">(</span><span class=\"n\">ppLine</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">checkColGe</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[delab app]</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">delabMinimization</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppFn.isConstOf</span> <span class=\"bp\">``</span><span class=\"n\">List.cons</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">!</span>\n                <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span>\n                <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"mi\">1</span>\n                <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">failure</span>\n\n<span class=\"k\">#check</span>\n  <span class=\"o\">[(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"c\"</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"c1\">-- [error when printing message: parenthesize: uncaught backtrack exception]</span>\n</code></pre></div>\n<p>My actual application uses a custom datatype instead of <code>List</code> and I have an actual implementation of the delaborator instead of this dummy.</p>",
        "id": 280762188,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1651361798
    },
    {
        "content": "<p>The function throwing the error contains some debug output: <code>trace[PrettyPrinter.parenthesize.input] \"{format stx}\"</code>, but I can't enable it. The option <code>trace.PrettyPrinter.parenthesize.input</code> does not seem to exist.</p>",
        "id": 280762265,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1651361950
    },
    {
        "content": "<p>You can just set <code>trace.PrettyPrinter.parenthesize</code>, it will include the lower levels</p>",
        "id": 280763180,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651363343
    },
    {
        "content": "<p>I see, actually I don't get any debug output from within the delaborator.</p>",
        "id": 280763340,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1651363607
    },
    {
        "content": "<p>Most combinators like <code>manyIndent</code> expect the nested parser to produce exactly one syntax tree</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listParser</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"List!\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">manyIndent</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">ppLine</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">checkColGe</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 280785228,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651398277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/parenthesize.3A.20uncaught.20backtrack.20exception/near/280763340\">said</a>:</p>\n<blockquote>\n<p>I see, actually I don't get any debug output from within the delaborator.</p>\n</blockquote>\n<p>Yes, because of dependency cycles, traces from the pretty printer are currently lost unless you invoke it directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.PrettyPrinter.parenthesize</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">([(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"b\"</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"c\"</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">)])</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">PrettyPrinter.ppExpr</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>But the output is not terribly helpful in this case</p>",
        "id": 280785610,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651398848
    }
]