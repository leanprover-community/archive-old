[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/mutually.20recursive.20syntax/near/285047130\">said</a>:</p>\n<blockquote>\n<p>That is, what extension did you want to write to solve it? I am having a hard time imagining what such a solution would look like.</p>\n</blockquote>\n<p>The problem answering this is that in a sense this is the question I was asking myself, if that makes any sense. To give a satisfactory answer I would have to understand the parser and its extensibility thoroughly. I'll try to sketch more or less what I imagined though, but this might just be silly due to my misunderstanding of the parser <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>I thought that instead of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n<span class=\"n\">syntax</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>We could have written something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">guardedMutual</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>or something like that, where we define ourselves that function <code>guardedMutual</code>, in a similar spirit to other functions there <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Basic.lean#L641\">like <code>sepBy</code></a> that returns a special type of <code>ParserFn</code> (or <code>Parser</code>, I'm not quite sure I understand the difference yet), such that when the Pratt parser chooses that custom parser, it will break the recursion (i.e. call the parser for foo explicitly and not call itself back from within it or something like that)</p>\n<p>I don't know if this makes sense within the context of Lean4's parser extensions, but in principle I don't see why it shouldn't be possible. Sorry if this is pretty naive though</p>",
        "id": 285491477,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1654756169
    },
    {
        "content": "<p>If you have <code>syntax foo : bar</code> and <code>syntax bar : foo</code> then aren't the two syntax classes the same? Since every bar is a foo and vice versa</p>",
        "id": 285492987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654757337
    },
    {
        "content": "<p>I see Sebastien already mentioned this. It's true in general that you can refactor the grammar to avoid this</p>",
        "id": 285493179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654757523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mutually.20recursive.20syntax/near/285493179\">said</a>:</p>\n<blockquote>\n<p>I see Sebastien already mentioned this. It's true in general that you can refactor the grammar to avoid this</p>\n</blockquote>\n<p>ah nice, it's true in general? can you briefly comment why?</p>",
        "id": 285493453,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1654757747
    },
    {
        "content": "<p>like I said, if <code>A \\sub B</code>  and <code>B \\sub A</code> then <code>A = B</code>, i.e. the two nonterminals represent the same class of strings</p>",
        "id": 285493592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654757867
    },
    {
        "content": "<p>Oh dang, that's embarrassingly obvious in hindsight. For some reason I thought there being other derivations on each made a difference, but it doesn't, I could still always just join both...</p>",
        "id": 285494666,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1654758733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 285494688,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654758750
    },
    {
        "content": "<p>If you had different elaboration rules then the path of implicit conversions could actually result in different terms being built. Fortunately, not with the proposed approach. ^^</p>",
        "id": 285495376,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1654759242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mutually.20recursive.20syntax/near/285493592\">said</a>:</p>\n<blockquote>\n<p>like I said, if <code>A \\sub B</code>  and <code>B \\sub A</code> then <code>A = B</code>, i.e. the two nonterminals represent the same class of strings</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mutually.20recursive.20syntax/near/285493453\">said</a>:</p>\n<blockquote>\n<p>ah nice, it's true in general? can you briefly comment why?</p>\n</blockquote>\n<p>There is a possible caveat here depending on the parser design. If the parser short circuits on the first successful match, the order of the parsers could result in <code>A =/= B</code>.  Lean categories take the longest match and error in the case of ambiguity, though, so I think the <code>A = B</code> does hold generally in its design.</p>",
        "id": 285562819,
        "sender_full_name": "Mac",
        "timestamp": 1654792922
    }
]