[
    {
        "content": "<p>I find myself either forgetting to add a <code>#</code> before [] (sure, will improve over time) or having to change it when the representation changes from Array to List or List to Array.</p>\n<p>This begs the question: why not have a single notation? One less thing to learn, one less thing to get wrong.</p>",
        "id": 298984850,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663252989
    },
    {
        "content": "<p>This is a possibility, but we would need to use the expected type, which is not always available.<br>\nSome suggested we fall back to a default type (e.g., <code>List</code>) when the expected type is not available. However, it is not that simple. When the expected type is not immediately available, we postpone elaboration and try it again later. Moreover, some notation imposes rigid \"checkpoints\", that is, they cannot proceed until all pending elaboration sub-problems have been resolved. So, the \"fallback\" case would have to be applied at these checkpoints. <br>\nNote that we use expected-type-guided elaboration for numerals, but from time to time we hit examples where the behavior produced by the elaborator is counterintuitive, and it makes us wonder whether we should revert this decision.<br>\nThus, for very important types such as <code>List</code>, <code>Array</code>, and <code>Prod</code>, we have notations (<code>[]</code>, <code>#[]</code>, <code>()</code>) that do not depend on the expected type. Their behavior is very predictable. <br>\nIt would be interesting to try a large-scale experiment to evaluate the impact of changing these notations to expected-type-guided ones. This kind of experiment is very time-consuming but could benefit the whole community. For example, it could suggest new ways of improving the reliability of expected-type-guided elaborators.</p>",
        "id": 298989516,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663254219
    },
    {
        "content": "<p>Was an <code>OfList</code> typeclass considered for the <code>#[]</code> notation?. List having a dedicated notation makes sense given how uniquely important they are in functional code, but <code>OfList</code> would generalize nicely beyond arrays.</p>",
        "id": 299021762,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663264363
    },
    {
        "content": "<p>I would not say that lists are more uniquely important than arrays in Lean, certainly not so in Lean programming</p>",
        "id": 299021983,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663264442
    },
    {
        "content": "<p>Fwiw, I like the distinction. Lists and arrays have very different uses and performance characteristics and this makes it immediately clear which one is being used.</p>",
        "id": 299024685,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1663265371
    },
    {
        "content": "<p>A not-too-serious suggestion for notation uniformity: we could have <code>#List[1,2,3]</code>, <code>#Array[1,2,3]</code>, and so on, with the convention that notation starting with <code>#</code> should be for data literals, then we have the shorthand <code>[1,2,3]</code> for <code>#List[1,2,3]</code> and <code>#[1,2,3]</code> for <code>#Array[1,2,3]</code>. In practice this changes nothing except for (1) introducing <code>#List[...]</code> and <code>#Array[...]</code> as synonyms and (2) suggesting how to name other data literal notations. This rhymes with using <code>#</code> for commands.</p>",
        "id": 299032832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663268263
    }
]