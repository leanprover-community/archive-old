[
    {
        "content": "<p>I am currently trying to formalize STLC in Lean 4. One of the first theorems I would like to prove is that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊢</mo><mi>λ</mi><mi>x</mi><mo>:</mo><mi>A</mi><mi mathvariant=\"normal\">.</mi><mtext> </mtext><mi>x</mi><mtext> </mtext><mi>x</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> \\vdash \\lambda x : A.\\ x \\ x : A \\rightarrow B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">.</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not derivable for any types <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> A </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.  Here is a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">STLC</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Var</span> <span class=\"o\">:=</span> <span class=\"n\">Char</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span>  <span class=\"o\">:</span> <span class=\"n\">type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span> <span class=\"n\">term</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">typing</span> <span class=\"o\">:</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"n\">typing</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"c1\">-- simplified</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arri</span> <span class=\"o\">:</span> <span class=\"n\">typing</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">typing</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">x</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arre</span> <span class=\"o\">:</span> <span class=\"n\">typing</span> <span class=\"bp\">Γ</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typing</span> <span class=\"bp\">Γ</span> <span class=\"n\">N</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">typing</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span> <span class=\"n\">term</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">no_δ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">typing</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">x</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">B</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">typing.arri</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">typing.arre</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">typing.var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h₁</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">STLC</span>\n</code></pre></div>\n<p>In the last line, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\"> h_1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has type <code>typing ((x, A) :: nil) (var x) (arrow A B)</code> which should not be derivable from the <code>typing</code> rules. However, it looks like I am missing something as Lean complains about my use of <code>nomatch</code> and says that I did not account for the <code>typing.var</code> case. But that rule should not be applicable because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo mathvariant=\"normal\">≠</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A \\ne A \\rightarrow B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. Can someone tell me what I am doing wrong?</p>",
        "id": 272347165,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1645146411
    },
    {
        "content": "<p>Thanks for reporting the problem. I created an issue: <a href=\"https://github.com/leanprover/lean4/issues/1022\">https://github.com/leanprover/lean4/issues/1022</a><br>\nThe occurs check test is missing in our dependent eliminator, we will add it as soon as possible.</p>",
        "id": 272350504,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645149500
    },
    {
        "content": "<p>By the way, even without the occurs check, you can manually prove that by recursing on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 272367292,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1645167520
    },
    {
        "content": "<p>By \"manually prove that by recursing on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> A </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>\", do you mean <code>no_δ</code> or <code>A ≠ arrow A B</code>? If you're talking about the latter, then yes. It's possible to manually prove it. But how does that help me prove <code>no_δ</code>? I don't have an assumption of the form <code>A = arrow A B</code> in my context there...</p>",
        "id": 272416084,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1645198519
    },
    {
        "content": "<p>I mean the latter. But then you <em>can</em> get that assumption by requiring Lean to generate an equation (which I honestly don't know how in Lean 4). Even if Lean can't do it, you can still generate it manually by strengthening the induction hypothesis, by a technique called Fording.</p>",
        "id": 272431306,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1645205530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Understanding.20.60nomatch.60/near/272350504\">said</a>:</p>\n<blockquote>\n<p>Thanks for reporting the problem. I created an issue: <a href=\"https://github.com/leanprover/lean4/issues/1022\">https://github.com/leanprover/lean4/issues/1022</a><br>\nThe occurs check test is missing in our dependent eliminator, we will add it as soon as possible.</p>\n</blockquote>\n<p>Pushed a fix for this.</p>",
        "id": 273416937,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645985095
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/c5fdd54cd8ad04fe00726ad8f23545cfa276146a\">https://github.com/leanprover/lean4/commit/c5fdd54cd8ad04fe00726ad8f23545cfa276146a</a></p>",
        "id": 273416948,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645985119
    }
]