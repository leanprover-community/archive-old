[
    {
        "content": "<p>Is <code>BinderInfo</code> used for reductions of expressions?</p>",
        "id": 282321792,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652487476
    },
    {
        "content": "<p>Yes and no.  In most cases they're ignored.  Even alpha-equality does not care about the binder info:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mkLambda</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">BinderInfo.default</span>  <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n   <span class=\"bp\">==</span> <span class=\"n\">mkLambda</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">BinderInfo.implicit</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 282341240,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652517476
    },
    {
        "content": "<p>There is one corner case, namely that the binder info in definitions can determine how hard Lean tries to reduce arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat'</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">Nat</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">Nat'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 282341377,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652517637
    },
    {
        "content": "<p>The only difference between the two examples is the binder info of the first argument of f/g.  The <code>with_reducible</code> tells Lean to only unfold definitions that are marked <code>reducible</code>.  But if the argument is implicit, then Lean tries harder and unfolds non-reducible definitions (Nat') as well.</p>",
        "id": 282341408,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652517719
    }
]