[
    {
        "content": "<p>I couldn't find these lemmas in lean4, are there somewhere ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 238910940,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1621097856
    },
    {
        "content": "<p><code>congrArg</code>/<code>congrFun</code></p>",
        "id": 238911047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621097960
    },
    {
        "content": "<p>(Oh, I understand why I didn't find them, I was expecting a <code>f a = f b</code> notation but they are written with <code>Eq</code>. Thanks !)</p>",
        "id": 238911335,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1621098149
    },
    {
        "content": "<p>A lot of lean 4 core stuff is written without notation. Is there a reason for this?</p>",
        "id": 238918290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621105084
    },
    {
        "content": "<p>I presume it is a staging issue -- defining the notations (e.g. in <code>Init/Notation.Lean</code>) depends on many things from <code>Init/Prelude.lean</code>. AFAICT only <code>Prelude.lean</code> cannot use the notations defined in <code>Notation.lean</code>.</p>",
        "id": 238918564,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621105353
    },
    {
        "content": "<p>By the way, is there a theorem for beta reduction ?<br>\n(I noticed that <code>simp only []</code> already does beta reductions)</p>",
        "id": 238920051,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1621106986
    },
    {
        "content": "<p>(I sometimes want to rewrite in expressions like <code>(fun x =&gt; a * x) y</code>, but I have to beta-reduce first)</p>",
        "id": 238920254,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1621107133
    },
    {
        "content": "<p>beta reduction is builtin to the logic of Lean, and <code>simp</code> beta-reduces automatically without needing justification (since the result is def-eq to the original term).</p>",
        "id": 238920442,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621107306
    },
    {
        "content": "<p>you can disable this though, if you don't want <code>simp</code> to beta-reduce</p>",
        "id": 238920537,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621107406
    },
    {
        "content": "<p>These are the <code>simp</code> flags: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Meta.lean#L870-L880\">https://github.com/leanprover/lean4/blob/master/src/Init/Meta.lean#L870-L880</a></p>",
        "id": 238920616,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621107491
    },
    {
        "content": "<p>By looking further where you pointed I also found more useful features of <code>simp</code> so thanks ! :)</p>",
        "id": 238921959,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1621109065
    },
    {
        "content": "<p>There is also a brief, non-exhaustive list of <code>simp</code> features at <a href=\"https://raw.githubusercontent.com/IPDSnelting/tba-2021/master/slides/lecture4.pdf?page=12\">https://raw.githubusercontent.com/IPDSnelting/tba-2021/master/slides/lecture4.pdf?page=12</a>, pages 12 ff</p>",
        "id": 238957247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621150152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Lemmas.20for.20functions/near/238918564\">said</a>:</p>\n<blockquote>\n<p>I presume it is a staging issue -- defining the notations (e.g. in <code>Init/Notation.Lean</code>) depends on many things from <code>Init/Prelude.lean</code>. AFAICT only <code>Prelude.lean</code> cannot use the notations defined in <code>Notation.lean</code>.</p>\n</blockquote>\n<p>I thought it was a remnant of earlier versions of lean 4 without the stage0 stuff. With it, I don't see why notations can't be introduced immediately after the definition itself, similar to how it is done in lean 3</p>",
        "id": 238966741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621160771
    },
    {
        "content": "<p>These notations are <em>not</em> built-in, so they are taken from the current stage, so they can be defined only after <code>ParserDescr/Macro</code>.</p>",
        "id": 238966892,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621160947
    },
    {
        "content": "<p>Does writing <code>infixl \"foo\" =&gt; bar</code> require <code>ParserDescr</code> to exist in the current stage? It doesn't directly reference this constant and doesn't require <code>import Lean</code> so I'm not sure how that happens</p>",
        "id": 238967962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621162078
    },
    {
        "content": "<p>It does elaborate to a <code>ParserDescr</code> (which is defined in <code>Prelude</code>)</p>",
        "id": 238975886,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621170243
    }
]