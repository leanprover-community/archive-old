[
    {
        "content": "<p>Although (think) I understand why, it is still a bit disappointing that we can't automatically derive <code>Repr</code> when a type has function parameters, for instance.</p>\n<p>Unless <code>Repr</code> is supposed to also support reading/parsing the generated representation, could the default deriving generate a dummy <code>#function</code> of something along these lines? At least we wouldnt throw the baby with the bath water.</p>\n<p>Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Value</span> <span class=\"c\">/-</span><span class=\"cm\"> := .none -/</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Op</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">grad</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">backward</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">())</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>And the error:</p>\n<blockquote>\n<p>failed to synthesize instance<br>\n Repr (Unit â†’ Unit)</p>\n</blockquote>",
        "id": 293980700,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660772620
    },
    {
        "content": "<p>Nevermind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"#function\"</span>\n</code></pre></div>\n<p>In any case, the question about making it a default still holds, no?</p>",
        "id": 293982011,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660773319
    },
    {
        "content": "<p>I would suggest <code>_ : F -&gt; G</code> with some macro magic to print the types out, but +1 to adding it as a default instance to <code>Std</code></p>",
        "id": 295107589,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661367560
    }
]