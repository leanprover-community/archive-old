[
    {
        "content": "<p>I'm getting a strange error on <a href=\"https://github.com/arthurpaulino/FxyLang/blob/23e369fdae15d5220cad8516bd772b14950c8476/FxyLang/Reasoning/Definitions.lean#L76\">this theorem</a> when commenting out the theorem above it (<code>State.skipStep</code>). Even simply replacing the proof of <code>State.skipStep</code> by a <code>sorry</code> causes the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">equality</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"k\">match</span><span class=\"bp\">`</span> <span class=\"n\">expression</span>\n<span class=\"n\">case</span> <span class=\"n\">lam.mk</span>\n<span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Value.lam</span> <span class=\"o\">(</span><span class=\"n\">Lambda.mk</span> <span class=\"n\">ns</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">v</span>\n<span class=\"n\">l</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span>\n<span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">l</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Program</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">),</span>\n  <span class=\"n\">Value.lam</span> <span class=\"o\">(</span><span class=\"n\">Lambda.mk</span> <span class=\"n\">l</span><span class=\"bp\">✝</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Value.lam</span> <span class=\"o\">(</span><span class=\"n\">Lambda.mk</span> <span class=\"n\">ns</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">h_1</span> <span class=\"n\">l</span><span class=\"bp\">✝</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">h_2</span> <span class=\"o\">(</span><span class=\"n\">Value.lam</span> <span class=\"o\">(</span><span class=\"n\">Lambda.mk</span> <span class=\"n\">l</span><span class=\"bp\">✝</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 279468169,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650402176
    },
    {
        "content": "<p>Forgot to mention: I'm using <code>leanprover/lean4:nightly-2022-04-19</code></p>",
        "id": 279468866,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650402563
    },
    {
        "content": "<p>Could you please create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for this issue?</p>",
        "id": 279545776,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650462708
    },
    {
        "content": "<p>I tried to but I couldn't :(<br>\nIt seems to rely on the pile of definitions from my repo</p>",
        "id": 279546232,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650462884
    },
    {
        "content": "<p>The error seems to happen when Lean tries to create the equation theorems for <code>stepN</code> or <code>step</code>. Could you confirm which one triggers the problem by using the command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">stepN</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">step</span>\n</code></pre></div>\n<p><code>stepN</code>  looks very simple. So, I am betting the problem is on <code>step</code>, but I did not find its definition yet.<br>\nThe next step would be to keep reducing the complexity of <code>step</code> while the bug is still triggered.<br>\nWe would be very grateful if you could go over this minimization problem. It would save us a lot of time.</p>",
        "id": 279547047,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650463253
    },
    {
        "content": "<p>Both of the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">stepN</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">step</span>\n</code></pre></div>\n<p>The definition of <a href=\"https://github.com/arthurpaulino/FxyLang/blob/8cc9cea05bd6f3b75b9b4f9f35062afba37fe368/FxyLang/Implementation/Execution.lean#L121\"><code>step</code></a> is indeed involved. I'll try to minimize the problem but since the problem arises in a theorem when commenting out another (apparently unrelated) theorem, I am not very optimistic about it</p>",
        "id": 279547693,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650463605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> here's a gist with a piece of self-contained Lean code:<br>\n<a href=\"https://gist.github.com/arthurpaulino/410aeaedba79282402127183d8d6f863\">https://gist.github.com/arthurpaulino/410aeaedba79282402127183d8d6f863</a></p>",
        "id": 279562455,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650469898
    },
    {
        "content": "<p>The code is shorter because I only took the necessary definitions but I wasn't able to find a smaller instance of the issue</p>",
        "id": 279562867,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650470063
    },
    {
        "content": "<p>FWIW, I wanted to give it a try so I installed <code>leanprover/lean4:nightly-2022-04-19</code> but the server keeps crashing on my computer.</p>",
        "id": 279564437,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1650470651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/strange.20error.20with.20unrelated.20theorem/near/279562455\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> here's a gist with a piece of self-contained Lean code:<br>\n<a href=\"https://gist.github.com/arthurpaulino/410aeaedba79282402127183d8d6f863\">https://gist.github.com/arthurpaulino/410aeaedba79282402127183d8d6f863</a></p>\n</blockquote>\n<p>Thanks! I managed to reproduce the problem. I am investigating.</p>",
        "id": 279565978,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650471336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Pushed a fix for this <a href=\"https://github.com/leanprover/lean4/commit/73076b855c94eaa1a380e05411b60ca19df191f6\">https://github.com/leanprover/lean4/commit/73076b855c94eaa1a380e05411b60ca19df191f6</a></p>",
        "id": 279579260,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650476976
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 279579536,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650477070
    }
]