[
    {
        "content": "<p>I'm working with vectors of things, implemented as maps from a finite index typed, i.e., </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An alternate definition of `fin n` defined as an inductive type instead of a subtype of `Nat`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Fin2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"sd\">/-- `0` as a member of `fin (succ n)` (`fin 0` is empty) -/</span>\n  <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sd\">/-- `n` as a member of `fin (succ n)` -/</span>\n  <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin2</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TypeVec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I want to require that all elements of such a vector implement a typeclass, say <code>Inhabited</code> for a vector of types. Since there are finitely many element in any vector, I want this assumption to be inferred.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The compiler accepts a quantified type class</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, I cannot seem to provide instances for such a quantified statement. <br>\nThe instances are accepted just fine, but inference does not find them</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"n\">abbrev</span> <span class=\"n\">VecClass'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">VecInhabited_nil'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">i</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">VecClass_succ'</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n                              <span class=\"o\">[</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">.</span><span class=\"n\">fz</span><span class=\"o\">)]</span>\n                              <span class=\"o\">[</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">VecClass'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"n\">i</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n                          <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero</span><span class=\"bp\">;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">succ</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The vector `![Nat, Int]` -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fz</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"bp\">.</span><span class=\"n\">fz</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n\n<span class=\"c1\">-- This fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">VecClass'</span> <span class=\"n\">v₂</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>If I take the same idea, but instead box <code>∀ i, Inhabited (v i)</code> in a new type class, everything works as expected.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"sd\">/-- A custom type class to express that all elements of `v` implement `Inhabited` -/</span>\n  <span class=\"kd\">class</span> <span class=\"n\">VecClass</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">instance</span> <span class=\"n\">VecClass_nil</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">VecClass</span> <span class=\"n\">v</span>\n    <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">VecClass_succ</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n                              <span class=\"o\">[</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">.</span><span class=\"n\">fz</span><span class=\"o\">)]</span>\n                              <span class=\"o\">[</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">VecClass</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">i.fs</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n                          <span class=\"n\">VecClass</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero</span><span class=\"bp\">;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">succ.prop</span>\n    <span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">VecClass</span> <span class=\"n\">v₂</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Oddly enough, I can provide an instance for the abbrev version if I defer directly to the boxed version.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">instUnbox</span> <span class=\"o\">[</span><span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">VecClass</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">VecClass'</span> <span class=\"n\">v</span>\n   <span class=\"o\">:=</span> <span class=\"n\">box.prop</span>\n\n  <span class=\"c1\">-- Now it works for the abbreviation as well</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">VecClass'</span> <span class=\"n\">v₂</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So my direct issue is solved, but I am quite surprised that I need the boxed version. Does anybody have an idea as to what is going on?</p>",
        "id": 287204988,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655997322
    }
]