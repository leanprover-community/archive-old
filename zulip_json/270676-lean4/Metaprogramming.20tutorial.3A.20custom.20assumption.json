[
    {
        "content": "<p>I was trying to follow the tactic chapter when I ran across this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"myAssump\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalDecl</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.getMVarDecl</span> <span class=\"n\">goal</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"o\">:=</span> <span class=\"n\">goalDecl.type</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span> <span class=\"c1\">-- get the local context.</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyp</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.findDeclM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">declExpr</span> <span class=\"o\">:=</span> <span class=\"n\">decl.toExpr</span>\n      <span class=\"k\">let</span> <span class=\"n\">declType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">declExpr</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.isExprDefEq</span> <span class=\"n\">declType</span> <span class=\"n\">goalType</span>\n        <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">declExpr</span>\n        <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">match</span> <span class=\"n\">hyp</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.closeMainGoal</span> <span class=\"n\">expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Lean.Meta.throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">assump</span> <span class=\"n\">goal</span>\n        <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unable to find matching hypothesis of type ({goalType})\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myAssump</span>\n</code></pre></div>\n<p>It throws an error saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">foo</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n</code></pre></div>",
        "id": 289405788,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657675266
    },
    {
        "content": "<p>Why is structural recursion showing up? I also don't really know how I'm approach debugging in the tactic framework yet. What are the trace options that would give me the information to debug these kinds of errors?</p>\n<p>Thanks!</p>",
        "id": 289405934,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657675459
    },
    {
        "content": "<p>You can insert <code>trace[Elab.debug] \"{declExpr}\"</code> above the <code>if</code> in your code. And you'll need to set <code>set_option trace.Elab.debug true</code> above the <code>def</code> to see the debug output. Then you'll see that <code>foo</code> itself is in the list of local declarations, which can be used for recursion.</p>",
        "id": 289416575,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657689206
    },
    {
        "content": "<p>You can exclude this recursive declaration by checking <code>decl.isAuxDecl</code>.</p>",
        "id": 289416652,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657689317
    },
    {
        "content": "<p>Oh I see now! Adding <code>decl.isAuxDecl</code> fixes it indeed. Thanks for the trace tips as well!</p>",
        "id": 289418363,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657691788
    }
]