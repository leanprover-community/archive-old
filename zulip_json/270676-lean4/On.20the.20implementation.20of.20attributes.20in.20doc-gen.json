[
    {
        "content": "<p>After reading through <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Attributes.html\">https://leanprover-community.github.io/mathlib4_docs/Lean/Attributes.html</a> (yay I can use my own tool for something useful by now \\o/) and the corresponding code it seems to me that implementing these pure tag based attributes is a triviality really but the ones that attach information won't be possible to do generically? After all there is never a constriant on the associated value to have a representation or to string.</p>\n<p>Hence my question: Which non tag based attributes should doc-gen look for per default? The only one that comes to mind from the top of my head would be the <code>implementedBy</code> one.</p>",
        "id": 271464962,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644514156
    },
    {
        "content": "<p>This is a great question.</p>",
        "id": 271466456,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644514791
    },
    {
        "content": "<p>To explain the status quo: in Lean 4 there are attributes, and then there's environment extensions.  Attributes are not persisted, they are similar to commands like <code>#eval</code>, they are triggered when a definition is elaborated but they are responsible to save any needed information.  After an attribute is elaborated, there is no record of its existence.</p>\n<p>Environment extensions are an API to store whatever data you want in the environment.  There is no way to inspect this data in a generic way.</p>",
        "id": 271466930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644515017
    },
    {
        "content": "<p>Practically, what you can do today is gather all the attributes that we care about and query the corresponding environment extensions about relevant information.  Hopefully this information can be translated back to a nice <code>@[simp]</code>.</p>",
        "id": 271467170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644515118
    },
    {
        "content": "<p>While this separation is bad to inspect attributes, it's actually a much better fit for some of the attributes we have in mathlib.  Attributes like <code>@[ext]</code>, <code>@[simps]</code>, <code>@[toAdditive]</code> are mostly used for their <em>side effects</em> (generating extensionality lemmas, projection lemmas, additive versions of definitions, resp.).  In Lean 3 we usually had to use two attributes, e.g. <code>ext</code> which triggered the side effect, and <code>_ext_core</code> which recorded the data in the environment.</p>",
        "id": 271467616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644515295
    },
    {
        "content": "<p>Should we have a generic interface for attributes that want to be visible on inspection? Perhaps attributes can register a <code>#print</code>-callback which queries their internal state and prints some additional information to be added to the report</p>",
        "id": 271470416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644516361
    },
    {
        "content": "<p>I'm not sure if you're mixing up attributes and env extensions.  Printing the internal state makes sense for environment extensions (and I think that would be a great idea, it only requires recording a Format/ToMessageData instance in the extension registration.)</p>\n<p>It would also be very useful (but much less clearly defined) to dump the state of the environment as attributes (i.e., syntax objects in the attr category).</p>",
        "id": 271471549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644516808
    },
    {
        "content": "<p>I meant attribute in the organizational sense. A single attribute might correspond to one or more environment extensions, but from the user perspective it's probably the attribute that is naming the file, for instance</p>",
        "id": 271472143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644517040
    },
    {
        "content": "<p>Actually, one such logical unit could correspond to many attributes and one env extension, or one attribute and many env extensions, and print-extensions would be another axis along which these components interact</p>",
        "id": 271472424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644517157
    },
    {
        "content": "<p>Re: attribute syntax, I think both options are reasonable. Perhaps a print-extension returns an object that can be printed either as a message data or as a syntax (with possibility for failure / opt out). I doubt we can \"round trip\" very effectively in general though</p>",
        "id": 271472857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644517338
    },
    {
        "content": "<p>There is also already functions like <code>registerTagAttribute</code> that add both the syntax and environment extension at the same time. Such functions could also register some other piece of information that could be used by doc-gen to retag definitions.</p>",
        "id": 271562159,
        "sender_full_name": "Mac",
        "timestamp": 1644578386
    },
    {
        "content": "<p>AFAICT <code>registerTagAttribute</code> does not store the syntax anywhere.  (Though it's trivial to get back an equivalent attribute syntax since there's no parameters and the environment extension is essentially a list of declaration names.)</p>",
        "id": 271562539,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644578602
    },
    {
        "content": "<p>I came up with this implementation for now <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Attributes.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Attributes.lean</a> ...I guess it is possible to generalize the special snowflake simp to a tag attribute and the tag attribute also to a ValueAttr with a bit more abstraction but I think it's fine like this for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>It also felt both amazing (as in that this works) but also hacky to abstract it this way, is this actually reasonable code or did I come up with a complete monstrosity?</p>",
        "id": 271722658,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644719862
    },
    {
        "content": "<p>At least it works <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html</a> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 271722775,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644720015
    },
    {
        "content": "<p>I bumped in to this too when implementing to_additive. In mathlib3 to_additive will copy over all of the attributes (from a fixed list) to the new additive definition, but you can't do this in Lean 4 because the attributes for a given declaration are not stored anywhere. Any ideas on how to implement a to_additive that copies over attributes?</p>",
        "id": 280217743,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1650983283
    },
    {
        "content": "<p>I think that's part of the reason a fixed list is used in Lean 3 too, there isn't a way to get all attributes for a given decl, but only a way to check if the declaration has an explicitly named attribute IIRC.<br>\nThe fact that there are a lot of random attributes that are used internally too that we didn't want to copy, but it sounds like it should be similar in 4?</p>",
        "id": 280218708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650983648
    },
    {
        "content": "<p>Me and Johan had to do something similar for the import optimizing tool we wrote, where we began with the full list of used attributes in mathlib and pruned it down: see<br>\n<a href=\"https://github.com/alexjbest/dag-tools/blob/master/src/import_optimizer.lean#L67\">https://github.com/alexjbest/dag-tools/blob/master/src/import_optimizer.lean#L67</a></p>",
        "id": 280218904,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650983748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/270676-lean4/topic/On.20the.20implementation.20of.20attributes.20in.20doc-gen/near/280217743\">said</a>:</p>\n<blockquote>\n<p>I bumped in to this too when implementing to_additive. In mathlib3 to_additive will copy over all of the attributes (from a fixed list) to the new additive definition, but you can't do this in Lean 4 because the attributes for a given declaration are not stored anywhere. Any ideas on how to implement a to_additive that copies over attributes?</p>\n</blockquote>\n<p>In fact just straight up doing this might be something you do not want to do because there are attributes like <code>export</code> which would cause the same name to appear twice in the resulting c binary</p>",
        "id": 280219808,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650984121
    },
    {
        "content": "<p>I have a list of attributes that to_additive cares about so I'm not too worried about getting other attributes like <code>export</code>. The main problem is getting the attributes for a decl at all since they are not stored anywhere. I was thinking that it might be possible to implement an ad-hoc 'hasAttribute' for each of the attributes in my list.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">reducible</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_refl_lemma</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">trans</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">no_rsimp</span><span class=\"o\">,</span>\n<span class=\"bp\">`</span><span class=\"n\">continuity</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">ematch</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">measurability</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">alias</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_ext_core</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_ext_lemma_core</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nolint</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"kn\">protected</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 280226435,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1650986685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> We will try to add APIs for retrieving all attributes associated with a declaration.</p>",
        "id": 280226594,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650986755
    },
    {
        "content": "<p>Note that the main use case with <code>to_additive</code> is to support <code>@[simp, to_additive]</code> (or was it <code>@[to_additive, simp]</code>?).  One option could be to have the <code>to_additive</code> attribute accept a list of attributes that are applied to both the additive and multiplicative definition.  Something like <code>@[to_additive [simp, norm_cast]]</code>.  This would also clarify the order in which the two attributes must be written.</p>",
        "id": 280229562,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1650988175
    },
    {
        "content": "<p>I'm talking about this, without ever having used Lean4, so I feel that whatever I say might be out of place.  There has been a few times where something \"like\" <code>to_additive</code>, but for other pairs of operations/relations.  The ones that appeared were</p>\n<ul>\n<li>proving a lemma about semigroups for the \"opposite semigroup\",</li>\n<li>proving a lemma about orders for the \"dual order\".</li>\n</ul>",
        "id": 280233584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650989822
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/13461\">#13461</a> as well for some more discussion on possible <code>to_*</code> analogues.</p>",
        "id": 280234806,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1650990423
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13461\">#13461</a> is an issue about this for mathlib.</p>",
        "id": 280234813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650990427
    },
    {
        "content": "<p>Btw, I have been recently introduced to the (Lean3) <code>meta</code>-world by Arthur Paulino, so have <em>very</em> limited experience, but found the experience really rewarding.</p>\n<p>I would be happy to collaborate on helping with these issues, but I do not feel at all qualified to take them on alone.</p>",
        "id": 280235154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650990601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/On.20the.20implementation.20of.20attributes.20in.20doc-gen/near/280229562\">said</a>:</p>\n<blockquote>\n<p>Note that the main use case with <code>to_additive</code> is to support <code>@[simp, to_additive]</code> (or was it <code>@[to_additive, simp]</code>?).  One option could be to have the <code>to_additive</code> attribute accept a list of attributes that are applied to both the additive and multiplicative definition.  Something like <code>@[to_additive [simp, norm_cast]]</code>.  This would also clarify the order in which the two attributes must be written.</p>\n</blockquote>\n<p>Right I'll implement it for <code>simp</code> for now, then it should be ready for review</p>",
        "id": 280275906,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1651009178
    }
]