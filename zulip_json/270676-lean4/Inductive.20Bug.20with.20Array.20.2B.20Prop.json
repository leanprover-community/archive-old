[
    {
        "content": "<p>I have an <code>Array2</code> type derived from an <code>Array</code> that restricts its length to <code>&gt;= 2</code> and am attempting to use it in in an <code>inductive</code>. However, I am getting a weird error I don't understand. Can anyone explain what is going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Array2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">size_ge_2</span> <span class=\"o\">:</span> <span class=\"n\">toArray.size</span>  <span class=\"bp\">≥</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuple</span> <span class=\"o\">:</span> <span class=\"n\">Array2</span> <span class=\"n\">Data</span> <span class=\"bp\">→</span> <span class=\"n\">Data</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Array.size toArray</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  _nested.Array_2</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  Array Data → Nat</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 265742236,
        "sender_full_name": "Mac",
        "timestamp": 1640125778
    },
    {
        "content": "<p>I don't think nested inductives support dependent types like that. I don't know how the desugaring to the core calculus would work, I think you would get an inductive-recursive type</p>",
        "id": 265742935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640126248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> does that mean it is impossible to have a inductive data type that includes collections of itself that satisfy certain prosperities? That seems very limiting.</p>",
        "id": 265749658,
        "sender_full_name": "Mac",
        "timestamp": 1640131268
    },
    {
        "content": "<p>There are often ways to write around it with other constructions, in particular not using nested inductives</p>",
        "id": 265749696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131313
    },
    {
        "content": "<p>I think if you make it an <code>unsafe inductive</code> lean will get off your back as well</p>",
        "id": 265749770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131351
    },
    {
        "content": "<p>Also, it's not that you can't have properties in a nested inductive, it's that the properties can't make reference to <code>Array</code> functions when <code>Array</code> is one of the things involved in the nested inductive</p>",
        "id": 265749919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131473
    },
    {
        "content": "<p>In this case, one way to get the structure you want is to separate the inductive from the property and put them back together with a subtype</p>",
        "id": 265750022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131543
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RawData</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuple</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">RawData</span> <span class=\"bp\">→</span> <span class=\"n\">RawData</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">RawData.ok</span> <span class=\"o\">:</span> <span class=\"n\">RawData</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">arr</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr.size</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">arr.get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ok</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">RawData</span> <span class=\"bp\">//</span> <span class=\"n\">d.ok</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265750574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131712
    },
    {
        "content": "<p>(you wouldn't use a <code>partial def</code> in reality, you can prove this is decreasing)</p>",
        "id": 265750680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131737
    },
    {
        "content": "<p>and if you are okay with an isomorphic type instead of <code>Array</code>, you can also write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuple</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Data</span>\n</code></pre></div>",
        "id": 265750902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131818
    },
    {
        "content": "<p>this one is not even a nested inductive, so it plays well with <code>induction</code> and such</p>",
        "id": 265750939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640131863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think the Raw+Subtype approach is generalizable to a syntactic sugar? That is, could it be possible to extend Lean in such a way that it compiles such an inductive type into a raw type and a corresponding subtype (and them exposes an appropriate API on the subtype, so the user doesnt notice what's going on under the hood)?<br>\nI've been using this approach too, and it feels like something generalizable.</p>",
        "id": 265773601,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640158248
    },
    {
        "content": "<p>Yes in principle, but it's a quagmire of heuristics and I don't think it would yield a reliable mechanism. This is not too far from what lean 3 did to handle nested inductives, and it was kind of a mess</p>",
        "id": 265773655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158315
    },
    {
        "content": "<p>Do you happen to know if other theorem provers do this well?</p>",
        "id": 265773732,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640158372
    },
    {
        "content": "<p>The problem is that inductive types are connected to <em>everything</em> in lean, so you have to be aware of these sugar mechanisms in all other tactics, which is a huge complexity cost</p>",
        "id": 265773767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158419
    },
    {
        "content": "<blockquote>\n<p>you have to be aware of these sugar mechanisms in all other tactics</p>\n</blockquote>\n<p>...because the tactics can see behind the sugar (by virtue or using things like <code>Syntax</code> and <code>Expr</code>)?</p>",
        "id": 265773871,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640158545
    },
    {
        "content": "<p>No other theorem prover handles inductive types quite like lean. Coq and Agda axiomatize everything, so there is nothing to prove but the resulting metatheory is shaky. Isabelle and HOL generate inductives with proofs under the hood, but simple types limit the kinds of constructions you can express enough that these issues largely don't arise.</p>",
        "id": 265773930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158580
    },
    {
        "content": "<p>and of course regular programming languages shoot first and ask questions later</p>",
        "id": 265773958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265773871\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>have to be aware of these sugar mechanisms in all other tactics</p>\n</blockquote>\n<p>...because the tactics can see behind the sugar (by virtue or using things like <code>Syntax</code> and <code>Expr</code>)?</p>\n</blockquote>\n<p>Because users expect the sugar to act just like an inductive type, even though technically it's not one, so every tactic is responsible for \"upholding the fiction\"</p>",
        "id": 265774050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158702
    },
    {
        "content": "<p>Is there some documentation or paper on how exactly inductive types are handled in Lean?</p>",
        "id": 265774082,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640158732
    },
    {
        "content": "<p>Probably the closest thing is my thesis <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">https://github.com/digama0/lean-type-theory/releases/tag/v1.0</a></p>",
        "id": 265774109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158763
    },
    {
        "content": "<p>I feel like we need some shortcut like #ttol for your thesis at some point :D</p>",
        "id": 265774192,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640158807
    },
    {
        "content": "<p>sure, why not? <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a></p>",
        "id": 265774244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640158897
    },
    {
        "content": "<p>The paper is a bit out of date now though, since lean 4 made some kernel changes that are relevant to the theory</p>",
        "id": 265774353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159020
    },
    {
        "content": "<p>The biggest new thing being kernel nested inductives</p>",
        "id": 265774418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159046
    },
    {
        "content": "<p>and understanding how they work is key to this particular issue</p>",
        "id": 265774440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159069
    },
    {
        "content": "<p>also eta for structures</p>",
        "id": 265774474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159108
    },
    {
        "content": "<p>Wait, so the kernel can understand a certain class of nested inductives natively?!</p>",
        "id": 265774483,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640159118
    },
    {
        "content": "<p>Yes, all nested inductives that lean 4 accepts are accepted \"natively\" now</p>",
        "id": 265774502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159145
    },
    {
        "content": "<p>no more complicated sugar</p>",
        "id": 265774516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159157
    },
    {
        "content": "<p>instead we have a complicated metatheory</p>",
        "id": 265774590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159207
    },
    {
        "content": "<p>However, my understanding is that it is still essentially the same justification as the lean 3 simulation, just now being performed by the kernel, so I'm fairly confident that the theory still holds up</p>",
        "id": 265774648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159272
    },
    {
        "content": "<p>But one of the dangers of adding this stuff to the kernel is that it makes it attractive to make feature suggestions to extend the kernel acceptance criterion by epsilon through issues just like this one, which is basically how Coq / Agda ended up the way they are now</p>",
        "id": 265774779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159371
    },
    {
        "content": "<p>Just to make sure I understand: the only nice way of doing raw+subtype inductives would be to not do them at all and instead shove them into the kernel and hence the metatheory and that's undesirable?</p>",
        "id": 265774870,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640159429
    },
    {
        "content": "<p>Right. I would be very uncomfortable with such a change without updating the consistency proof first</p>",
        "id": 265774919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159483
    },
    {
        "content": "<p>Sound like we need you to do another MSc then <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span><span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 265774999,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640159534
    },
    {
        "content": "<p>As I mentioned, I think that allowing constructions like this in general is equivalent in power to inductive-recursive types, which are known to be strictly axiomatically stronger than the current \"ZFC + omega inaccessibles\"</p>",
        "id": 265775070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159615
    },
    {
        "content": "<p>It's probably more like \"ZFC + omega Mahlo cardinals\" instead</p>",
        "id": 265775085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640159635
    },
    {
        "content": "<p><a href=\"http://www.cse.chalmers.se/~peterd/papers/Finite_IR.pdf\">http://www.cse.chalmers.se/~peterd/papers/Finite_IR.pdf</a> validates my guess that type theory universes in an inductive-recursive world correspond to <a href=\"https://en.wikipedia.org/wiki/Mahlo_cardinal\">Mahlo cardinals</a></p>",
        "id": 265776161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640160507
    },
    {
        "content": "<p>I suspect some type theorists consider this a feature rather than a bug. I'm pretty sure there are some simple restrictions to avoid adding the extra logical power. For example, one which I'm pretty sure works is to only allow the recursive function to take values in a type which is smaller than the universe containing the inductive type being defined.</p>",
        "id": 265821679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640189297
    },
    {
        "content": "<p>So a potential solution could be making this raw data + (nested) properties construction into a library that does not create the illusion of being a 'normal' inductive type thus making the user reason more explicitly about it, but still helping with all the boilerplate?<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265774050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265773871\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>have to be aware of these sugar mechanisms in all other tactics</p>\n</blockquote>\n<p>...because the tactics can see behind the sugar (by virtue or using things like <code>Syntax</code> and <code>Expr</code>)?</p>\n</blockquote>\n<p>Because users expect the sugar to act just like an inductive type, even though technically it's not one, so every tactic is responsible for \"upholding the fiction\"</p>\n</blockquote>",
        "id": 265888904,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1640242664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265821679\">said</a>:</p>\n<blockquote>\n<p>I suspect some type theorists consider this a feature rather than a bug.</p>\n</blockquote>\n<p>Fair enoguh! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> However, even if this is true (which, deferring to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s expertise on the topic, it seems to be), there is still, in my view, a bug here. Namely, that the error message doesn't tell you this. It just produces an error about so mismatch in its internal representation (which, in many other cases, has meant there was a bug). The error message here should inform the user about what conceptually type theoretic mistake they made (like it does with universe issues and other inductive restrictions).</p>",
        "id": 265890692,
        "sender_full_name": "Mac",
        "timestamp": 1640244787
    },
    {
        "content": "<p>I can explain a little bit of what the error is actually saying. Somewhere internally, we have to swap out the type <code>Array Data</code> for a local variable <code>Array_Data : Type</code> (about which we know nothing, because it is part of a mutual block of inductive definitions). This causes a type error when you try to use a function like <code>Array.size</code> on it, because the input is not an array anymore. If you used a function that did not care about the type like <code>id</code> I think it would still typecheck.</p>",
        "id": 265890868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640245009
    },
    {
        "content": "<p>It is hard for lean to determine in advance whether such an error is likely to occur without actually writing down the term and checking it for well formedness; but once you have done that the quality of error messages already goes down quite a bit because lots of things can go wrong when you type check a term</p>",
        "id": 265890954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640245109
    },
    {
        "content": "<p>It would not be difficult to paper over this error with another vaguer error, but I don't know how targeted that error can be.</p>",
        "id": 265890986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640245195
    },
    {
        "content": "<p>This error is roughly analogous to the infamous <code>motive is not type correct</code> error in <code>rw</code>. Is that what we want here?</p>",
        "id": 265891065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640245278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265891065\">said</a>:</p>\n<blockquote>\n<p>This error is roughly analogous to the infamous <code>motive is not type correct</code> error in <code>rw</code>. Is that what we want here?</p>\n</blockquote>\n<p>While I certainly would like a more detailed error. I do think even that would be better. The current is simply not clear on whether the error is with the user or with Lean. In fact, the exposure of internal tricks makes it appear more like the later.</p>",
        "id": 265893027,
        "sender_full_name": "Mac",
        "timestamp": 1640247414
    }
]