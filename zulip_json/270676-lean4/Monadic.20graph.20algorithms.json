[
    {
        "content": "<p>The folks working on the Yatima language provide an interesting source of Lean4 programming patterns. Their monadic formulation of strongly-connected components for directed graphs caught my attention. Since their algorithm is currently tied to Lean4's symbols as vertices, I decided it would be a fun exercise to parameterize this nifty library. The result is described in this ticket: <a href=\"https://github.com/yatima-inc/yatima-lang/issues/88\">https://github.com/yatima-inc/yatima-lang/issues/88</a> </p>\n<p>The refactored code is here: <a href=\"https://github.com/NicolasRouquette/YatimaGraphLib\">https://github.com/NicolasRouquette/YatimaGraphLib</a></p>\n<p>I hope that the WIP <a href=\"https://github.com/leanprover/functional_programming_in_lean\">https://github.com/leanprover/functional_programming_in_lean</a> will eventually explain the Lean4 programming wizardry involved in this code. Even though I don't understand it completely, this refactoring exercise was really fun with the help of the vscode support and the lean toolchain (lake).</p>\n<p>Independently of whether this parameterization makes sense for Yatima or not, I would like to find out how to improve the code.<br>\nFor example, several definitions require different constraints on the type parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dfsState</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">Bool</span> <span class=\"n\">compare</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getInfo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sccM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">NodeInfo</span> <span class=\"o\">:=</span>  <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">scc</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"bp\">$</span> <span class=\"n\">List</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is there a way to reduce the duplication of such constraints?</p>\n<ul>\n<li>Nicolas.</li>\n</ul>",
        "id": 288344217,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1656877923
    },
    {
        "content": "<p>One thing is that you don't need <code>{α}</code> since Lean automatically includes one-variable names as implicit arguments. You can also use the <code>variable [Ord α]</code> command, so then every time you make reference to <code>α</code> in the arguments of a function the <code>Ord</code> argument will be included too.</p>",
        "id": 288344426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656878205
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ! I've applied your suggestions!</p>",
        "id": 288347700,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1656882621
    },
    {
        "content": "<blockquote>\n<p>since Lean automatically includes one-variable names as implicit arguments</p>\n</blockquote>\n<p>BTW, this was changed recently to be more general.  Feel free to use more informative names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getInfo</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">Alpha</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Alpha</span> <span class=\"bp\">→</span> <span class=\"n\">Alpha</span> <span class=\"bp\">→</span> <span class=\"n\">Ordering</span> <span class=\"o\">:=</span> <span class=\"n\">compare</span>\n</code></pre></div>",
        "id": 288413357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656943425
    }
]