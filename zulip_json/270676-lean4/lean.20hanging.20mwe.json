[
    {
        "content": "<p>Weird mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cached</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Hashed</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">Cached</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">30</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Causes lean to hang on 4.0.0-nightly-2022-09-22</p>",
        "id": 300296966,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663915634
    },
    {
        "content": "<p>What happens if you start reducing the 30?</p>",
        "id": 300299002,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663916708
    },
    {
        "content": "<p>Oh that's bizarre -- 0 finishes instantly, and then by 4 it takes 20 seconds</p>",
        "id": 300306715,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663920141
    },
    {
        "content": "<p>For some reason for large enough values it doesn't even report the timeout, just hangs</p>",
        "id": 300306846,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663920192
    },
    {
        "content": "<p>You don't even need the subtype, embedding it in the struct also causes slowdown:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">finishHash</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^^^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">30</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0xbf58476d1ce4e5b9</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^^^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">27</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0x94d049bb133111eb</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^^^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">31</span><span class=\"o\">)</span>\n  <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Hashed</span> <span class=\"o\">(</span><span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">κ</span>\n  <span class=\"n\">hashk</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">h_hash</span> <span class=\"o\">:</span> <span class=\"n\">hashk</span> <span class=\"bp\">=</span> <span class=\"n\">finishHash</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it's noticeably faster than the subtype version (thus the larger hash function, which is impossibly slow with the subtype)</p>",
        "id": 300310007,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663921191
    },
    {
        "content": "<p>And of course making <code>finishHash</code> opaque works fine</p>",
        "id": 300311177,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663921606
    },
    {
        "content": "<p>I'm guessing its trying to do some reduction operations on the &gt;&gt;&gt; which causes it to hang for big numbers then</p>",
        "id": 300366572,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663941236
    },
    {
        "content": "<p>Making it irreducible doesn't prevent the hanging, but I'm not really sure what <code>@[irreducible]</code> controls</p>",
        "id": 300414481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663953535
    }
]