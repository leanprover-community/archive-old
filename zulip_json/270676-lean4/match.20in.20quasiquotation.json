[
    {
        "content": "<p>I'm trying to build the syntax tree for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Here is the code I wrote for that (based on the Lean 4 code base):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span>\n<span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">none</span> <span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">br1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">br2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">brs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">br1</span><span class=\"o\">,</span> <span class=\"n\">br2</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">discr</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">brs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It fails to elaborate. He is what happens when I print it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">_discr</span> <span class=\"o\">:=</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">sorryAx</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>What am I missing?</p>",
        "id": 267527623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641866120
    },
    {
        "content": "<p>Actually the following is closer to what I've seen in the Lean 4 code base but it has the same effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span>\n<span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">discr</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">none</span> <span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p1</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p2</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">br1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">p1</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">br2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">p2</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">brs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">br1</span><span class=\"o\">,</span> <span class=\"n\">br2</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">discr</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">brs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 267527956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641866410
    },
    {
        "content": "<p>My first thought would be that the <code>x</code> in <code> `( some x ) </code> is likely not the same as the <code>x</code> in <code> `(matchAltExpr| | $p2 =&gt; x) </code> due to hygiene.</p>",
        "id": 267535558,
        "sender_full_name": "Mac",
        "timestamp": 1641875518
    },
    {
        "content": "<p>replacing that <code>x</code> with <code>2</code> doesn't help</p>",
        "id": 267535933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641876102
    },
    {
        "content": "<p>the easy way to fix that is to do <code>let x &lt;- `(x)</code> and then use <code>$x</code> in its occurrences</p>",
        "id": 267535979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876133
    },
    {
        "content": "<p>Could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 267535994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876178
    },
    {
        "content": "<p>I get <code>unknown parser matchAltExpr</code> when parsing <code>test</code> and <code>test'</code></p>",
        "id": 267536092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876349
    },
    {
        "content": "<p>Here's an MWE of your first example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">none</span> <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">br1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">br2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">brs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">br1</span><span class=\"o\">,</span> <span class=\"n\">br2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">discr</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">brs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test'</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">TermElabM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">none</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"bp\">?</span><span class=\"n\">m.60</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.59</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"bp\">?</span><span class=\"n\">m.47</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.46</span>\n\n<span class=\"k\">let</span> <span class=\"n\">_discr._</span><span class=\"bp\">@.</span><span class=\"n\">Test._hyg.3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.46</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List.get</span><span class=\"bp\">?.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"o\">(</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.12</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.20</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.20</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"mi\">2</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.25</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.33</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.33</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span> <span class=\"mi\">3</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.38</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.nil.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.46</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.47</span><span class=\"o\">))))</span><span class=\"bp\">;</span> <span class=\"n\">sorryAx.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Bool.true</span>\n</code></pre></div>\n<p>The latter part matches the expression you claim (although printed less clearly), but this also comes with an error message that indicates more of the problem</p>",
        "id": 267536320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876683
    },
    {
        "content": "<p>Note that you get the same error even without any of the syntax construction stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span>\n  <span class=\"k\">match</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">none</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"bp\">?</span><span class=\"n\">m.2251</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2250</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 267536482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876890
    },
    {
        "content": "<p>the problem being that <code>List.get? [1,2,3]</code> is an unapplied function, you need to get a specific index before it will yield an option</p>",
        "id": 267536510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641876939
    },
    {
        "content": "<p>Fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">none</span> <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">some</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">br1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">br2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">brs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">br1</span><span class=\"o\">,</span> <span class=\"n\">br2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">discr</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">brs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withDeclName</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"n\">test'</span>\n  <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">e</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">_discr</span> <span class=\"o\">:=</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"k\">match</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Not sure what's up with the dead <code>let</code> expression. It seems like a bug in match elaboration</p>",
        "id": 267537013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641877445
    },
    {
        "content": "<p>Thank you! </p>\n<p>It seems that <code>let x ← `(x)</code> can be dropped and it still works</p>",
        "id": 267537629,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641878253
    },
    {
        "content": "<p>What remains is:</p>\n<ol>\n<li><code>List.get? [1, 2, 3] -&gt; List.get? [1, 2, 3] 0</code> so that we pattern match on <code>Option Nat</code> instead of <code>Nat -&gt; Option Nat</code></li>\n<li>Run the elaborator from within a call to <code>withDeclName</code>.</li>\n</ol>\n<p>Item <code>2.</code> I'm not sure why it matters. Can you explain?</p>",
        "id": 267537739,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641878383
    },
    {
        "content": "<p>You can try it without and see the error message</p>",
        "id": 267538534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879339
    },
    {
        "content": "<p><code>match</code> generates auxiliary definitions, and it needs a base declaration name to do that. When using this as part of a tactic that will not be a problem, but in testing code such as this (in the scope of an <code>#eval</code>) there is no declaration name so we have to give it a dummy name</p>",
        "id": 267538594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879396
    },
    {
        "content": "<p>I wasn't getting an error message without it. The elaboration would only be incomplete</p>",
        "id": 267538602,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641879404
    },
    {
        "content": "<p>I see! Thanks for the explanation!</p>",
        "id": 267538619,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641879442
    },
    {
        "content": "<p>are you using the same MWE as me? when I remove the <code>withDeclName</code> I get an error</p>",
        "id": 267538631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">TermElabM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">created</span> <span class=\"n\">when</span> <span class=\"n\">declaration</span> <span class=\"n\">name</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>",
        "id": 267538634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879476
    },
    {
        "content": "<p>certainly I wouldn't have added that part otherwise</p>",
        "id": 267538673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879485
    },
    {
        "content": "<p>If you are testing it in the real context and don't get that error, that's fine and you don't need it</p>",
        "id": 267538684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879529
    },
    {
        "content": "<p>although the error seems to be reported through a side channel, there is no red squiggle on the <code>#eval</code> and it just evaluates to something containing a <code>sorryAx nat</code></p>",
        "id": 267538755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641879608
    },
    {
        "content": "<p>Yes I see. I was calling it from within <code>MetaM</code> and the error seems to get discarded. If I eval the <code>TermElabM</code>, I see the error. That's going to make things easier</p>",
        "id": 267538873,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641879782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/match.20in.20quasiquotation/near/267535558\">said</a>:</p>\n<blockquote>\n<p>My first thought would be that the <code>x</code> in <code> `( some x ) </code> is likely not the same as the <code>x</code> in <code> `(matchAltExpr| | $p2 =&gt; x) </code> due to hygiene.</p>\n</blockquote>\n<p>It is exactly the same <code>x</code>.  You only get a new <code>x</code> if you're inside a <code>withFreshMacroScope</code>.</p>",
        "id": 267553803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641891875
    },
    {
        "content": "<p>Thanks for the clarification!</p>",
        "id": 267613389,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641921096
    }
]