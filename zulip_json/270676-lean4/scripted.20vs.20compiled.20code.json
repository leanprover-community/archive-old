[
    {
        "content": "<p>Running tests with compiled binary files like <a href=\"#narrow/stream/270676-lean4/topic/building.20multiple.20binaries/near/282375395\">this</a> allowed us to find a bug in the <code>String.toUTF8</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"</span><span class=\"se\">\\x00</span><span class=\"s2\">yes mani !\"</span><span class=\"bp\">.</span><span class=\"n\">toUTF8</span>\n</code></pre></div>\n<p>The code above, if run with <code>lean --run â‹¯</code> outputs <code>[0, 121, 101, 115, 32, 109, 97, 110, 105, 32, 33]</code>, which is expected. However, if you compile it and then run the binary, it outputs <code>[]</code>.</p>\n<p>I found it on a previous Lean 4 version but it still happens on <code>leanprover/lean4:nightly-2022-05-14</code></p>",
        "id": 282412689,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652626114
    },
    {
        "content": "<p>There might be extra costs to fixing this bug (by not mapping Lean strings to C-style null-terminated strings), especially if the compile code doesn't already store the string size separately</p>",
        "id": 282415335,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1652630114
    },
    {
        "content": "<p>More on this: the issue seems to be prior to running <code>toUTF8</code>. Somehow, <code>\"\\x00yes mani !\"</code> gets parsed as an empty string in the compiled code</p>",
        "id": 282440698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652665671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1153\">https://github.com/leanprover/lean4/pull/1153</a></p>",
        "id": 282481426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652700306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> sorry to ask, but how confident can we be that if the code gets parsed properly then there should be no difference in semantics between scripted and compiled code? And why? Thanks in advance!</p>",
        "id": 282483529,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652701703
    },
    {
        "content": "<p>I don't know how to answer that. Any divergence is a clear bug, of which we have found very few so far</p>",
        "id": 282484069,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652702063
    },
    {
        "content": "<p>I'm asking this because I thought about it while implementing Fxy. In my current solution it's actually an interpreter, so Fxy code is parsed and then run as a Lean program. And when I considered compiling Fxy code, I thought about translating it into C and then building it. So it would open up many windows for bugs.</p>\n<p>Is this different from Lean 4's take on compiled/scripted code? My guess is that it's different because, in my intuition, even scripted Lean 4 code runs code transpiled to C (same C code that would run if the Lean code were compiled). But I could be wrong so that's why I'm asking</p>",
        "id": 282485940,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652703196
    },
    {
        "content": "<p>Uh, no, we did not implement a C interpreter :) . The interpreter works on the intermediate representation level, there's a bit of documentation at <a href=\"https://github.com/leanprover/lean4/blob/master/src/library/compiler/ir_interpreter.cpp\">https://github.com/leanprover/lean4/blob/master/src/library/compiler/ir_interpreter.cpp</a>.</p>",
        "id": 282494386,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652707595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/scripted.20vs.20compiled.20code/near/282483529\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> sorry to ask, but how confident can we be that if the code gets parsed properly then there should be no difference in semantics between scripted and compiled code? And why? Thanks in advance!</p>\n</blockquote>\n<p>(I think \"certifying the Lean compiler\" basically involves showing the semantics are the same between the IR interpreter and the compiled C code, so in a few years maybe we'll have a proof that they're the same? :D)</p>",
        "id": 282697843,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1652817271
    }
]