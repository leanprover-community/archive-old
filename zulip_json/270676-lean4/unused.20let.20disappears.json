[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pro</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">pro</span>\n<span class=\"c1\">-- def pro : Bool :=</span>\n<span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>Why does the <code>let</code> disappear when I don't use it? Can I prevent this somehow?</p>",
        "id": 257528105,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634215591
    },
    {
        "content": "<p>Ok, I think I found the answer: I should use <code>let_fun</code> if I want that behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pro</span> <span class=\"o\">:=</span> <span class=\"n\">let_fun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">pro</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def pro : Bool :=</span>\n<span class=\"cm\">let_fun x : Nat := @OfNat.ofNat.{0} Nat 42 (instOfNatNat 42);</span>\n<span class=\"cm\">false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 257529918,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634216317
    },
    {
        "content": "<p>However, it would be nicer if I could produce an actual <code>let</code> expression that doesn't disappear...</p>",
        "id": 257535301,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634218370
    },
    {
        "content": "<p>You can write your own elaborator to do that.</p>",
        "id": 257536843,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634218950
    },
    {
        "content": "<p>Hmm, apparently this doesn't work.  For some reason <code>def</code> removes the let binding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"n\">false</span> <span class=\"c1\">-- contains let</span>\n</code></pre></div>",
        "id": 257538322,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634219491
    },
    {
        "content": "<p>Yes, I'm not sure this is intentional. The binding is still there after elaboration of the body has completed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.definition.body</span><span class=\"o\">]</span> <span class=\"n\">pro</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span>\n<span class=\"n\">false</span>\n</code></pre></div>",
        "id": 257539180,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634219784
    },
    {
        "content": "<p>I guess it's this line that removes it? <a href=\"https://github.com/leanprover/lean4/blob/5a8f4fd946c38441910b780003dce3f7d577bb20/stage0/src/Lean/Elab/MutualDef.lean#L633\">https://github.com/leanprover/lean4/blob/5a8f4fd946c38441910b780003dce3f7d577bb20/stage0/src/Lean/Elab/MutualDef.lean#L633</a></p>",
        "id": 257545663,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634222099
    },
    {
        "content": "<p>No, that step is before the above trace</p>",
        "id": 257547024,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634222582
    },
    {
        "content": "<p>Pushed a fix for this.</p>",
        "id": 258124221,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634604121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> has marked this topic as unresolved.</p>",
        "id": 258157444,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634631240
    },
    {
        "content": "<p>Ok :-)</p>",
        "id": 258157489,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634631247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What is the proper way of adding a link to a Zulip thread?<br>\nBTW, I was originally linking to the thread, but I linked to a particular message in recent commits. However, it seems the link breaks in both cases when we mark the topic as resolved.</p>",
        "id": 258187692,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634647561
    },
    {
        "content": "<p>You're doing everything right, Leo.  It's the resolve feature that's broken.</p>",
        "id": 258187801,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634647595
    },
    {
        "content": "<p>Resolving a thread literally changes the thread title.</p>",
        "id": 258187828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634647606
    },
    {
        "content": "<p>And the links refer to the thread title.</p>",
        "id": 258187848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634647614
    },
    {
        "content": "<p>Resurrecting this old thread, <em>what</em> is the purpose of <code>let_fun</code>? I can see that <code>let_delayed</code> is used in <code>do</code>-notation elaboration to enforce some elaboration order, but I can't tell why <code>let_fun</code> is needed. The difference to plain <code>let x := v; t</code> is that we do not get <code>x == v</code> as a definitional equality when checking <code>t</code>.</p>",
        "id": 289007767,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657326127
    },
    {
        "content": "<p><code>let_fun</code> produces simpler hypotheses in our proof goals. They are of the form <code>x : type</code> instead of <code>x : type := v</code>. We use it to implement macros such as <code>show</code>, <code>have</code>, and <code>have</code> with patterns. I guess users will find new uses for it too. It is semantically equivalent to <code>(fun x =&gt; t) v</code> but the elaboration order is different.</p>",
        "id": 289008949,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657327616
    },
    {
        "content": "<p>Another potential use is representing programs with many <code>let</code>-decls. Most of them are probably equivalent to <code>(fun x =&gt; t) v</code>. Thus, eagerly converting them to <code>let_fun</code> may be useful, because <code>simp</code> can handle it more efficiently. We have seen some Coq libraries that define macros like <code>let_fun</code> for this reason.</p>",
        "id": 289009153,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657327828
    },
    {
        "content": "<p>Interesting, thank you! Using these as a kind of opaque let sounds useful.</p>",
        "id": 289009495,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657328354
    }
]