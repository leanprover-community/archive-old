[
    {
        "content": "<p>I know very little of Lean's tactics (4 or 3). I tried searching for the <code>inversion</code> tactic in both lean4 and lean3, but I couldn't find <code>inversion</code>  in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\">theorem proving in Lean</a>,  <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">programming in Lean</a>. For reference, here's the <a href=\"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.inversion\"><code>coq</code> manual link to <code>inversion</code></a>. I'm trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">op</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">op</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">op</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span><span class=\"o\">:</span> <span class=\"n\">op</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_done</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">is_done_done</span><span class=\"o\">:</span> <span class=\"n\">is_done</span> <span class=\"n\">op.done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">is_done_add</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_done</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_done</span> <span class=\"o\">(</span><span class=\"n\">op.add</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_done_add_bwd_agda</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PRF</span><span class=\"o\">:</span> <span class=\"n\">is_done</span> <span class=\"o\">(</span><span class=\"n\">op.add</span> <span class=\"n\">s</span> <span class=\"n\">o</span><span class=\"o\">)):</span> <span class=\"n\">is_done</span> <span class=\"n\">o</span>  <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">PRF</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">is_done.is_done_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">prf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prf</span>\n\n<span class=\"c1\">-- TODO: how do I use `inversion`?</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_done_add_bwd_coq</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PRF</span><span class=\"o\">:</span> <span class=\"n\">is_done</span> <span class=\"o\">(</span><span class=\"n\">op.add</span> <span class=\"n\">s</span> <span class=\"n\">o</span><span class=\"o\">)):</span>\n     <span class=\"n\">is_done</span> <span class=\"n\">o</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n     <span class=\"n\">inversion</span> <span class=\"n\">PRF</span><span class=\"bp\">;</span>\n     <span class=\"c1\">-- inversion =&gt;  is_done o</span>\n     <span class=\"n\">assumption</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there an <code>inversion</code> tactic (or something similar) to immediately dispatch <code>is_done_add_bwd_coq</code>?</p>",
        "id": 257345089,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1634122237
    },
    {
        "content": "<p>I don't know the coq tactic, but according to <a href=\"https://github.com/jldodds/coq-lean-cheatsheet\">https://github.com/jldodds/coq-lean-cheatsheet</a> the answer is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases\">tactic#cases</a></p>",
        "id": 257345811,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634122695
    },
    {
        "content": "<p>Interesting. I imagined Lean's <code>cases</code> was like coq's <code>destruct</code>, less like <code>inversion</code>. Let me play around with this, thanks!</p>",
        "id": 257346088,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1634122845
    },
    {
        "content": "<p>[Also, the pointer to the mathlib docs is much appreciated. It's well written!]</p>",
        "id": 257346126,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1634122874
    },
    {
        "content": "<p>Ah nice, further along, the same document says about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#destruct\"><code>destruct</code></a></p>\n<blockquote>\n<p>In contrast to cases, the local context is unchanged, i.e. no elements are reverted or introduced.</p>\n</blockquote>\n<p>Thank you for the help!</p>",
        "id": 257346229,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1634122937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 257346234,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634122941
    },
    {
        "content": "<p>Well, in a sense <code>inversion</code> and <code>destruct</code> are very similar in Coq as well, the difference is only that <code>inversion</code> does a little bit more \"cleanup\" (e.g. close inconsistent goals directly, etc), but both go by <code>cases</code>over the inductive definition, so I guess it makes sense they both correspond to Lean's <code>cases</code>.</p>",
        "id": 257367705,
        "sender_full_name": "Andr√©s Goens",
        "timestamp": 1634132800
    },
    {
        "content": "<p>One shortcoming of <code>cases</code> on an inductive predicate is that it needs the goal to be propositional as well. I wrote a tactic that circumvents this <a href=\"https://github.com/javra/iit/blob/main/IIT/PropInversion.lean\">here</a></p>",
        "id": 257502550,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1634202142
    }
]