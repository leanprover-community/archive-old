[
    {
        "content": "<p>I notice in Lean/Expr.lean there are functions like  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export lean_expr_mk_app]</span> <span class=\"kd\">def</span> <span class=\"n\">mkAppEx</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span>\n</code></pre></div>\n<p>for each Expr constructor. It seems like it is being used to define native lean application like in racket but I am not sure. What is this line doing, and how would I find this out for myself?</p>",
        "id": 233698945,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1617904379
    },
    {
        "content": "<p>I don't know what \"native lean application\" means. This function is used by the C++ code, which you can find out by grepping for the name after <code>export</code>.</p>",
        "id": 233700030,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617904700
    },
    {
        "content": "<p>ok, I see </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">object</span> <span class=\"bp\">*</span> <span class=\"n\">lean_expr_mk_app</span><span class=\"o\">(</span><span class=\"n\">obj_arg</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">obj_arg</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">expr</span> <span class=\"n\">mk_app</span><span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">return</span> <span class=\"n\">expr</span><span class=\"o\">(</span><span class=\"n\">lean_expr_mk_app</span><span class=\"o\">(</span><span class=\"n\">f.to_obj_arg</span><span class=\"o\">(),</span> <span class=\"n\">a.to_obj_arg</span><span class=\"o\">()))</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233700930,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1617904977
    }
]