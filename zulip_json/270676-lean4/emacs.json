[
    {
        "content": "<p>Just for future reference, here's the link to the emacs lean4 package<br>\n<a href=\"https://github.com/leanprover/lean4/tree/master/lean4-mode\">https://github.com/leanprover/lean4/tree/master/lean4-mode</a></p>\n<p>Will this be on melpa at some point soon?</p>",
        "id": 221657870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609859918
    },
    {
        "content": "<p>Probably, when it (and the language server) is more stable</p>",
        "id": 221658107,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609860016
    },
    {
        "content": "<p>Just in case it helps anyone else, the following code in <code>packages.el</code> seems to work for <code>doom emacs</code></p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">dash</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">flycheck</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">dash-functional</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">f</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">s</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">lsp-mode</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nv\">package!</span> <span class=\"nv\">lean4-mode</span> <span class=\"nb\">:recipe</span>\n  <span class=\"p\">(</span><span class=\"nb\">:host</span> <span class=\"nv\">github</span>\n   <span class=\"nb\">:repo</span> <span class=\"s\">\"leanprover/lean4\"</span>\n   <span class=\"nb\">:files</span> <span class=\"p\">(</span><span class=\"s\">\"lean4-mode/*.el\"</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 221670854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609865597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> thank you!</p>",
        "id": 221676100,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1609867968
    },
    {
        "content": "<p>Looks like <code>(require 'lean4-mode)</code> is problematic if you have both <code>lean4-mode</code> and <code>lean-mode</code> installed. And without it you have to manually activate <code>lean4-mode</code> with e.g. <code>M-x</code>. Is there a way to have it automatically activate <code>lean4-mode</code> in a <code>lean4</code> project?</p>",
        "id": 221676278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609868051
    },
    {
        "content": "<p>maybe <a href=\"https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html\">https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html</a></p>",
        "id": 221677370,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609868553
    },
    {
        "content": "<p>Yeah that's a good workaround.</p>",
        "id": 221677524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609868625
    },
    {
        "content": "<p>I just (re)installed <code>lean4-mode</code> (I had a version from before it was based on LSP). I have a weird situation where I'm having <code>status: starting</code> for a very long time</p>",
        "id": 221698776,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609879308
    },
    {
        "content": "<p>Are you using the Nix setup?</p>",
        "id": 221698925,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609879411
    },
    {
        "content": "<p>To install Lean4 yes but not to install the emacs mode. Does the nix setup help also with emacs?</p>",
        "id": 221699271,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609879622
    },
    {
        "content": "<blockquote>\n<p>There is preliminary integration of the Nix-based build system into editors started as above, which automatically builds dependencies when opening or invalidating a file. There is no progress report yet, and build errors from dependencies will crash the language server; see the stderr logs for the build error in that case.</p>\n</blockquote>",
        "id": 221699690,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609879812
    },
    {
        "content": "<p>The language server starting for a long time can mean Nix compiling dependencies in the background, but that shouldn't happen if you pointed <code>lean4-mode</code> manually at the result of <code>nix build</code>.</p>",
        "id": 221699822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609879885
    },
    {
        "content": "<p>Do refer to setting <code>lean4-rootdir</code> manually?</p>",
        "id": 221700348,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609880162
    },
    {
        "content": "<p>Yes, whatever you did to set it up</p>",
        "id": 221700440,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609880193
    },
    {
        "content": "<p>Ok thanks! I'll need to get back to it a bit later. I'll let you know how it goes</p>",
        "id": 221700769,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609880385
    },
    {
        "content": "<p>Btw, given my part of the talk yesterday I probably don't have to mention that I will have only limited patience dealing with manual setups not using Nix (completely) from now on <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 221701381,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609880653
    },
    {
        "content": "<p>That's understandable</p>",
        "id": 221726917,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609899674
    },
    {
        "content": "<p>For emacs, what is the nix way of doing things?</p>",
        "id": 221727221,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609900062
    },
    {
        "content": "<p>I really like what you did with the documentation btw. I especially like the button that copies code snippets. For shell code, it also copies <code>$</code> however</p>",
        "id": 221727520,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609900418
    },
    {
        "content": "<p>I just saw the following line in the instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>nix run .#emacs-dev MyPackage.lean  <span class=\"c1\"># arguments can be passed as well, e.g. the file to open</span>\n</code></pre></div>\n<p>Is this what you refer to as the nix emacs setup? It kind of looks like I'd need a different instance of emacs for each project. That's not very practical</p>",
        "id": 221728754,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609902050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> did you ever get <code>emacs</code> to behave with <code>nix</code>? If so, could you give some hints on how you set it up?</p>",
        "id": 222090203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610122080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/emacs/near/221728754\">said</a>:</p>\n<blockquote>\n<p>It kind of looks like I'd need a different instance of emacs for each project. That's not very practical</p>\n</blockquote>\n<p>FWIW, I use a separate instance per workspace, so that's not really an issue for me. But if you don't want that, the nix-env-selector solution mentioned in the \"using nix\" topic sounds like the next-best thing.</p>",
        "id": 222091877,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610122746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I see. I kind of use emacs as an operating system where I do a whole bunch of stuff until I'm forced to interact with OSX again</p>",
        "id": 222093018,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610123313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Sorry I haven't made progress yet. I'm going to try again tonight</p>",
        "id": 222093067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610123345
    },
    {
        "content": "<p><code>nix-env-selector</code> is a vs-code thing right?</p>",
        "id": 222093202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610123412
    },
    {
        "content": "<p>Whoops, yeah. I use <code>direnv</code> in Emacs (for things that are not Lean), though that needs one more setup step per project...</p>",
        "id": 222093536,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610123595
    },
    {
        "content": "<p>Isn't there a way to make this <code>nix build .#lean-dev -o ./lean-dev</code> step happen automatically when opening the nix-shell using a <code>shell.nix</code> file? I think it's also possible to ask nix-shell to set up a link + update the path variable so that <code>lean</code> is symlinked to <code>./lean-dev</code>. I guess what I'm going for is to have it automatically set up the links + path stuff when I run <code>nix-shell</code> so that emacs is happy when I run <code>emacs</code> from within the <code>nix-shell</code>.</p>",
        "id": 222093936,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610123789
    },
    {
        "content": "<p>I'll take a look at <code>direnv</code>. Thanks!</p>",
        "id": 222093990,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610123822
    },
    {
        "content": "<p>If you're running Emacs from within a nix-shell anyway, why not use <code>.#emacs-dev</code>?</p>",
        "id": 222094015,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610123845
    },
    {
        "content": "<p>Does this not create a whole new installation of emacs?</p>",
        "id": 222094048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610123874
    },
    {
        "content": "<p>Yes, it does download \"a bit\" of stuff. But it will use your <code>.emacs.d</code>.</p>",
        "id": 222094231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610123977
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 222094306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124006
    },
    {
        "content": "<p>\"a bit\" ~= 1G</p>",
        "id": 222094629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124199
    },
    {
        "content": "<p>If you wish to build a Lean program from scratch, you must first invent the universe. -- Carl Sagan</p>",
        "id": 222094910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610124345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/emacs/near/222093936\">said</a>:</p>\n<blockquote>\n<p>Isn't there a way to make this <code>nix build .#lean-dev -o ./lean-dev</code> step happen automatically when opening the nix-shell using a <code>shell.nix</code> file?</p>\n</blockquote>\n<p>If you use <code>nix shell .#lean-dev</code> instead, it will put the correct <code>lean</code> binary in your path, which should be sufficient if you've already installed <code>lean4-mode</code> another way.</p>",
        "id": 222095060,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610124414
    },
    {
        "content": "<p>Hmm... what's the actual command?</p>",
        "id": 222095359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124579
    },
    {
        "content": "<p>I've been using <code>nix-shell https://github.com/leanprover/lean4/archive/master.tar.gz -A nix</code> to start the nix shell with the custom nix</p>",
        "id": 222095384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124597
    },
    {
        "content": "<p>Ah I see. You mean run <code>nix shell .#lean-dev</code> in the nix-shell.</p>",
        "id": 222095957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124846
    },
    {
        "content": "<p>Yes, this works</p>",
        "id": 222095969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610124852
    },
    {
        "content": "<p>Is there an example of emacs setup that works both for lean3 and lean4? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 289746916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657900871
    },
    {
        "content": "<p>BTW, why not put <code>lean4-mode</code> to <code>melpa</code>?</p>",
        "id": 289746965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657900889
    },
    {
        "content": "<p><a href=\"https://github.com/melpa/melpa/pull/8106\">https://github.com/melpa/melpa/pull/8106</a></p>",
        "id": 289747290,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657901025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/emacs/near/289746916\">said</a>:</p>\n<blockquote>\n<p>Is there an example of emacs setup that works both for lean3 and lean4? <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span></p>\n</blockquote>\n<p>Sorry, I don't use Lean 3 anymore</p>",
        "id": 289747310,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657901035
    },
    {
        "content": "<p>I guess, I'll have to use different editors for Lean 3 and Lean 4 (or different instances of emacs).</p>",
        "id": 289748217,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657901465
    },
    {
        "content": "<p>At some point I had both working. I have lean-mode installed through melpa and lean4-mode with straight. The only annoying thing is that for every lean3 file I have to manually switch to lean-mode.</p>\n<p>If I remember correctly, I set elan default toolchain to lean3 as all my lean4 code live in lake projects and there Lean version is determined by toolchain file.</p>",
        "id": 289749654,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657902174
    },
    {
        "content": "<p>Requiring <code>lean-mode</code> and <code>lean4-mode</code> and doing <code>(setq lean4-autodetect-lean3 t)</code> works for me (or at least worked at some point).</p>",
        "id": 289848095,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658006203
    },
    {
        "content": "<p>I'll try later tonight.</p>",
        "id": 289851644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658012021
    },
    {
        "content": "<p>After many years of divergence and manual sync, lean4-mode now uses the same abbreviations.json as vscode-lean4: <a href=\"https://github.com/leanprover/lean4-mode/pull/23\">https://github.com/leanprover/lean4-mode/pull/23</a></p>",
        "id": 314921161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670600068
    }
]