[
    {
        "content": "<p>For this source code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Ipld.UnsignedVarint</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Multihash</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Multibase</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Cid</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Ipld</span>\n<span class=\"kn\">import</span> <span class=\"n\">Blake3</span> <span class=\"c1\">-- removing this fixes the error</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Hello, world!\"</span>\n</code></pre></div>\n<p>Leanc fails to link the symbols from <code>libBinaryTools.a</code> in this call</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>mkdir -p <span class=\"nv\">$out</span>/bin\nleanc /nix/store/zh2lk0sc0r8gv6bgpmlzsdp1zhh8g4fj-Ipld-lib/* /nix/store/mdrqr6204ni9gqn4438y2wv06zmvq2hm-BinaryTools-lib/*.a /nix/store/7ngnwn99zxmzzc3ga89dglgx5shmdhgb-Blake3-lib/*.a /nix/store/zj7l3salqgxlbz1fvg2gnzngxn8yra3v-Init-lib/*.a /nix/store/pqzkmj46czc9fhphbj2rsfgdcan1wb92-Lean-lib/*.a /nix/store/173d6zazfdz3bh2pd0ig0lq519ax2caa-Leanpkg-lib/*.a /nix/store/r3n8byk5k8mfj4dm6qvxp4bwnzr142yb-Neptune-lib/*.a /nix/store/ndd7wpbfczakimdlnrzzzm0wdr18smhj-Std-lib/*.a  -o <span class=\"nv\">$out</span>/bin/ipld  -L/nix/store/sk2ha5f6q0djgpxgd54cq96mqphd5als-libleanblake3.so -lleanblake3 -L/nix/store/kwr3pqmqkapccggqrfb3ij19ynbsrcg4-libblake3.so -lblake3\n/nix/store/fp2h123793bxln4cjxy0mz08sf4nx2m3-binutils-2.35.1/bin/ld: /nix/store/kxwymh6h7s2625xfx99s03sq4qlwjinw-Blake3-cc/Blake3.o: <span class=\"k\">in</span> <span class=\"k\">function</span> <span class=\"sb\">`</span>l_Std_Range_forIn_loop___at_Blake3_instIntoStringBlake3Hash___spec__2<span class=\"s1\">':</span>\n<span class=\"s1\">src.c:(.text+0x3f4): undefined reference to `l_Alphabet_base64'</span>\n/nix/store/fp2h123793bxln4cjxy0mz08sf4nx2m3-binutils-2.35.1/bin/ld: /nix/store/kxwymh6h7s2625xfx99s03sq4qlwjinw-Blake3-cc/Blake3.o: <span class=\"k\">in</span> <span class=\"k\">function</span> <span class=\"sb\">`</span>initialize_Blake3<span class=\"s1\">':</span>\n<span class=\"s1\">src.c:(.text+0x1525): undefined reference to `initialize_BinaryTools'</span>\nclang-13: error: linker <span class=\"nb\">command</span> failed with <span class=\"nb\">exit</span> code <span class=\"m\">1</span> <span class=\"o\">(</span>use -v to see invocation<span class=\"o\">)</span>\n</code></pre></div>\n<p>This however works fine when changing the lean source code to include a function call in <code>Blake3</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Ipld.UnsignedVarint</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Multihash</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Multibase</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Cid</span>\n<span class=\"kn\">import</span> <span class=\"n\">Ipld.Ipld</span>\n<span class=\"kn\">import</span> <span class=\"n\">Blake3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Hello, world! {Blake3.hash \"</span><span class=\"n\">hello</span><span class=\"s2\">\"}\"</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"436006\">@Gabriel Barreto</span><br>\nI suspect some over eager optimization that ignores some symbols if they are not mentioned at the top level file? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 262481239,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1637686033
    },
    {
        "content": "<p>Linking is not done by Lean, so this is likely not a Lean issue. The cmdline is a bit too long to verify at a glance, but I suspect wrong linker flag order, which is significant.</p>",
        "id": 262481710,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637686280
    },
    {
        "content": "<p>I didn't know the liker flag order was significant. But that can't be the issue because the error does not appear in the latter case and it has the same order.</p>",
        "id": 262486185,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1637688203
    },
    {
        "content": "<p>If you have <code>ld a.o b.a c.o</code>, it will work iff all object files in <code>b.a</code> needed by <code>c.o</code> have been included by the linker when searching for symbols referenced by <code>a.o</code>. So an independent file can very much change whether a later file succeeds to link. The correct solution is to always put dependencies behind dependents in the cmdline.</p>",
        "id": 262487242,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637688639
    },
    {
        "content": "<p>...I think. It's a bit of black magic.</p>",
        "id": 262487358,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637688676
    },
    {
        "content": "<p>there's also <code>--start-group</code>/<code>--end-group</code> if you don't know/don't care to figure out the correct order and don't mind longer link times</p>",
        "id": 262489407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637689478
    },
    {
        "content": "<p>Yes, we use those for <code>-lleancpp -lLean</code> etc.. Which is a cyclic dependency <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> .</p>",
        "id": 262489623,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637689569
    },
    {
        "content": "<p>Adding <code>-Wl,--start-group</code> fixed it</p>",
        "id": 262512528,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1637700986
    }
]