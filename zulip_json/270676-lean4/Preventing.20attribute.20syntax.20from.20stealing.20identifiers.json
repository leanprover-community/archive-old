[
    {
        "content": "<p>I'm working on a tactic that will require a somewhat complicated attribute grammar. E.g. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[aesop (builder tactic) (priority 50) safe]</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>Lean 4 allows me to cleanly define this syntax using <code>syntax</code> declarations (which is awesome), but then <code>builder</code>, <code>tactic</code>, <code>priority</code>, <code>safe</code> etc.  become reserved words. Can I somehow tell the parser to treat them as keywords only in attributes? I guess the usual answer to questions like this is scoping, but that would be cumbersome here.</p>",
        "id": 243379663,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1624281261
    },
    {
        "content": "<p>You can match against literal identifiers without making them keywords: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/nonReserved.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/nonReserved.lean</a></p>",
        "id": 243379954,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624281406
    },
    {
        "content": "<p>Is there some kind of cheatsheet for the various syntax notations?</p>",
        "id": 243380191,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624281499
    },
    {
        "content": "<p>This is the first time I've seen this &amp;.  I wonder how much else I've been missing out on.</p>",
        "id": 243380236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624281524
    },
    {
        "content": "<p>Not that I know of, but they should be at either <a href=\"https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Init/Notation.lean#L41-L61\">https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Init/Notation.lean#L41-L61</a> or <a href=\"https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Lean/Parser/Syntax.lean#L32-L39\">https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Lean/Parser/Syntax.lean#L32-L39</a>. A nice table summarizing them sounds like a great contribution to the manual :) .</p>",
        "id": 243380884,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624281815
    },
    {
        "content": "<p>Nice! That's exactly what I was hoping for.</p>",
        "id": 243381442,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1624282036
    },
    {
        "content": "<p>The underlying initial parser encoding is at <a href=\"https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Init/Prelude.lean#L1848-L1860\">https://github.com/leanprover/lean4/blob/e68d09704d3a6494974de8b921d5b1b5cd1473df/src/Init/Prelude.lean#L1848-L1860</a>. The available <code>Name</code>s in there are more scattered though, via <code>registerAlias</code>/<code>register_parser_alias</code> calls</p>",
        "id": 243382429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624282478
    }
]