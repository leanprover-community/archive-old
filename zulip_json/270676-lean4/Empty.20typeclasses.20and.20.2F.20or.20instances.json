[
    {
        "content": "<p>Hi. Sometimes I just want to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bijection</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>But Lean 4 says no. So I have to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bijection</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n  <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>But ok. Then I would like to at least be able to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Iterable</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bijection</span> <span class=\"n\">β</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>But I have to still</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Iterable</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bijection</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 291907949,
        "sender_full_name": "cognivore",
        "timestamp": 1659554743
    },
    {
        "content": "<p>one could make an argument here that your typeclass isn't exactly what you want, realistically speaking just knowing that beta and alpha have bijections via type class inference is useless, anyone can declare an instance for this (like you are doing above) without proof and without even providing the bijectin itself in the first place which might also be an interesting thing to do depending on your application. </p>\n<p>Regarding defining instances that can be completely filled via default fields you can just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bijection</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>and Lean will be happy</p>",
        "id": 291908442,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659554982
    },
    {
        "content": "<p>The empty class works fine for me here (with or without <code>where</code>)</p>",
        "id": 291909899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659555667
    },
    {
        "content": "<p>I would support an RFC to make all of these <code>where</code> lists 0+ instead of 1+</p>",
        "id": 291930540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659566864
    }
]