[
    {
        "content": "<p>Hey, I thought I'd do some simple benchmark-type testing to poke around with Lean 4, compare to c++, and share the results. Basically just converting integers to strings and inserting into a hash table ten million times. Lean 4 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert_n</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">map.insert</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashMap.empty</span>\n  <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">insert_n</span> <span class=\"n\">map</span> <span class=\"n\">n</span>\n  <span class=\"n\">IO.print</span> <span class=\"s2\">\"ran \"</span>\n  <span class=\"n\">IO.print</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">map.size</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.print</span> <span class=\"s2\">\" map inserts</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>C++ code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">iostream</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">string</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">unordered_map</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unordered_map</span><span class=\"bp\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">&gt;</span> <span class=\"n\">map</span><span class=\"bp\">;</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10000000</span><span class=\"bp\">;</span> <span class=\"n\">i</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"s2\">\"ran \"</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">map.size</span><span class=\"o\">()</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"s2\">\" map inserts</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>C++ version about 5x faster on my machine, this is the first Lean 4 I've written so I could be doing something non-optimal here, but really within 5x of C++ on a benchmark like this might be pretty good. Code at <a href=\"https://github.com/lacker/lean4perf\">https://github.com/lacker/lean4perf</a> if people are curious to tweak it</p>",
        "id": 221834384,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609973425
    },
    {
        "content": "<p>Compiled or interpreted?</p>",
        "id": 221834572,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609973567
    },
    {
        "content": "<p>Your README suggests interpreted</p>",
        "id": 221834580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609973573
    },
    {
        "content": "<p>what's a better command to run here</p>",
        "id": 221834605,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609973609
    },
    {
        "content": "<p>I think the slides from the other day show the <code>lean &gt; olean &gt; .c &gt; .o</code> workflow</p>",
        "id": 221834769,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609973699
    },
    {
        "content": "<p>hmm, there is a flag in lean to create a .c file, but it doesn't look like it's independently usable, it requires a <code>lean/lean.h</code>import</p>",
        "id": 221835146,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609973892
    },
    {
        "content": "<p>Use <code>leanmake bin</code></p>",
        "id": 221835407,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609974026
    },
    {
        "content": "<p>Are you compiling the C++ code without optimizations??</p>",
        "id": 221835466,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609974065
    },
    {
        "content": "<p>plain old g++, the exact command lines are in that repo</p>",
        "id": 221835504,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974100
    },
    {
        "content": "<p><code>leanmake bin</code> doesn't work for me, a bunch of errors like <code>/nix/store/08fwy6y1fjp8pa68kq3bffif1xjya3j1-ccache-3.4.1/bin/ccache: No such file or directory</code>. does leanmake only work when you use lean4 with nix?</p>",
        "id": 221835587,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974150
    },
    {
        "content": "<p>I tried out the different g++ optimization flags, they do make a bit of difference, -O3 makes the c++ version about 25% faster</p>",
        "id": 221836202,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974548
    },
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in\">https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in</a></p>",
        "id": 221836247,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974589
    },
    {
        "content": "<p>so, <code>lean -O3 -DNDEBUG -o benchmark.olean --c=benchmark.c benchmark.lean</code> I think?</p>",
        "id": 221836361,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974655
    },
    {
        "content": "<p><code>invalid option -- 'O'</code></p>",
        "id": 221836480,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974726
    },
    {
        "content": "<p><code>leanc</code></p>",
        "id": 221836518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974754
    },
    {
        "content": "<p>Nope, misread the file, one sec</p>",
        "id": 221836572,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974787
    },
    {
        "content": "<p>hmm more nix errors when I run leanc. <code>line 36: /nix/store/08fwy6y1fjp8pa68kq3bffif1xjya3j1-ccache-3.4.1/bin/ccache: No such file or directory</code></p>",
        "id": 221836594,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974799
    },
    {
        "content": "<p>which line are you looking at <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> ?</p>",
        "id": 221836611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974811
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in\">https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in</a></p>",
        "id": 221836618,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974820
    },
    {
        "content": "<p>i'm not running nix at all, I tried to keep this lean4 installation minimalist and only did an elan install</p>",
        "id": 221836625,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974824
    },
    {
        "content": "<p>try it without any <code>-O3 -DNDEBUG</code></p>",
        "id": 221836641,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974835
    },
    {
        "content": "<p>line</p>",
        "id": 221836642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974836
    },
    {
        "content": "<p>I get the same <code>/nix</code> error when running <code>leanc</code> without those flags</p>",
        "id": 221836703,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974866
    },
    {
        "content": "<p>there are like 6 lean invocation lines in that script</p>",
        "id": 221836706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974868
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in#L59\">https://github.com/leanprover/lean4/blob/eba3983658faef2d41b7ad00fc2c2e540a1e43e6/stage0/src/lean.mk.in#L59</a></p>",
        "id": 221836711,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974872
    },
    {
        "content": "<p><code>lean -o benchmark.olean --c=benchmark.c benchmark.lean</code></p>",
        "id": 221836734,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974895
    },
    {
        "content": "<p>i'm trying to find what <code>LEAN_EXTRA_MAKE_OPTS</code> they pass at any point</p>",
        "id": 221836750,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974911
    },
    {
        "content": "<p>I think it comes from an environment variable</p>",
        "id": 221836793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974944
    },
    {
        "content": "<p>so probably empty</p>",
        "id": 221836797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609974947
    },
    {
        "content": "<p>that works but now benchmark.c includes a <code>lean/lean.h</code></p>",
        "id": 221836840,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609974962
    },
    {
        "content": "<p>Or things passed in via <code>lean --make</code></p>",
        "id": 221836849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609974969
    },
    {
        "content": "<p>Oh, the released <code>leanc</code> looks broken... that path should not be there</p>",
        "id": 221836878,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609974994
    },
    {
        "content": "<p>well, it's in <code>include/lean/lean.h</code> if you want to try Kevin</p>",
        "id": 221836930,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609975037
    },
    {
        "content": "<p>does it work if you just call <code>leanc</code> on the file anyway?</p>",
        "id": 221836966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609975057
    },
    {
        "content": "<p>what is <code>leanc</code> anyway? If it's reading c files then it must be a wrapper around <code>gcc</code> or something?</p>",
        "id": 221837070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609975112
    },
    {
        "content": "<p>i tried <code>gcc -I /home/lacker/.elan/toolchains/leanprover-lean4-4.0.0-m1/include/ benchmark.c</code> but then I am getting a ton of errors like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">ccLduRU9.o</span><span class=\"o\">:</span> <span class=\"n\">In</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_alloc_small_object'</span><span class=\"o\">:</span>\n<span class=\"n\">benchmark.c</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x14f</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_alloc_small'</span>\n<span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">ccLduRU9.o</span><span class=\"o\">:</span> <span class=\"n\">In</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_alloc_ctor_memory'</span><span class=\"o\">:</span>\n<span class=\"n\">benchmark.c</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x1b3</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_alloc_small'</span>\n<span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">ccLduRU9.o</span><span class=\"o\">:</span> <span class=\"n\">In</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_dec_ref'</span><span class=\"o\">:</span>\n<span class=\"n\">benchmark.c</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x34f</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_del'</span>\n</code></pre></div>\n<p>and I feel like this rabbit hole keeps going a ways</p>",
        "id": 221837258,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609975247
    },
    {
        "content": "<p>even <code>leanc --help</code> is failing for me with some \"/nix/blahblahblah not found\" so perhaps some bug is in the leanc release and I should patiently wait for it to be magically fixed</p>",
        "id": 221837524,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609975440
    },
    {
        "content": "<p>Yeah, look forward to a nightly soon. But not today/tomorrow.</p>",
        "id": 221837786,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609975591
    },
    {
        "content": "<p>is it helpful to file github issues or report bugs in some formal way, or nah</p>",
        "id": 221837976,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609975711
    },
    {
        "content": "<p>We're still figuring out some guidelines on that</p>",
        "id": 221838137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609975824
    },
    {
        "content": "<p>Btw, if you don't want to wait, feel free to just remove those paths from your installed <code>leanc</code> manually. <code>elan</code> shouldn't mind.</p>",
        "id": 221838182,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609975867
    },
    {
        "content": "<p>I don't mind waiting, my goal was really to poke around and see if I discovered anything interesting and I judge that goal to be a success. but my installed leanc appears to be some opaque binary, anyway, not an editable script</p>",
        "id": 221838468,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609976093
    },
    {
        "content": "<p>The one in <code>.elan/toolchains</code></p>",
        "id": 221838531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609976147
    },
    {
        "content": "<p>ok. it looks like it needs to run a binary called <code>ccache</code> in that nix directory? ... i'm inclined to just wait</p>",
        "id": 221838822,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609976370
    },
    {
        "content": "<p>You could try a version of the incantation <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/218501228\">here</a> with the <code>-I</code> and <code>-L</code> paths adjusted to your installation</p>",
        "id": 221840568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609977635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> using the Nix shell, the following works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ nix-shell -A nix <span class=\"c1\"># Or nix-shell https://github.com/leanprover/lean4/archive/master.tar.gz -A nix</span>\n$ nix build .#stage1 <span class=\"c1\"># Populates the result/ directory</span>\n$ <span class=\"nb\">cd</span> klbench/ <span class=\"c1\"># I put the benchmarks here</span>\n$ g++ main.cpp -O3 -o main_cpp\n$ <span class=\"nb\">exit</span> <span class=\"c1\"># Exit the Nix shell, otherwise linking fails on my system</span>\n$ <span class=\"nb\">cd</span> klbench/\n$ ../result/bin/leanmake bin <span class=\"nv\">PKG</span><span class=\"o\">=</span>main <span class=\"c1\"># Builds main.lean</span>\n$ <span class=\"nb\">time</span> ./build/bin/main\nran <span class=\"m\">10000000</span> map inserts\n\nreal    0m10.745s\nuser    0m10.450s\nsys 0m0.283s\n\n$ <span class=\"nb\">time</span> ./main_cpp\nran <span class=\"m\">10000000</span> map inserts\n\nreal    0m7.472s\nuser    0m7.199s\nsys 0m0.264s\n</code></pre></div>\n<p>Note this is on a custom build of Lean with my own changes, so <em>massive</em> disclaimer -- performance not representative of anything.</p>",
        "id": 221842021,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1609978684
    },
    {
        "content": "<p>sweet, that seems promising.</p>",
        "id": 221842534,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609979138
    },
    {
        "content": "<p>i know it's a pretty small/artificial benchmark, but this makes me think that we will want a way to compile tactics for mathlib even if the \"math\" parts of the library are interpreted</p>",
        "id": 221970616,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1610039560
    },
    {
        "content": "<p>this got about 5x faster, if tactics also could be about 5x faster then it would be worth some build weirdness</p>",
        "id": 221970667,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1610039591
    },
    {
        "content": "<p>For any comparison between the interpreter and compiler you'll want to use <code>-Dinterpreter.prefer_native=false</code> with <code>--run</code> or anything in the stdlib will not be interpreted. Also note that the Lean 4 interpreter is (quite?) a bit faster than the Lean 3 one IIRC.</p>",
        "id": 222164521,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610187950
    },
    {
        "content": "<p>I made the following changes to <code>leanc</code> locally:</p>\n<ul>\n<li>remove the <code>ccache</code> usage, so the line starts <code>$LEAN_CXX</code> (I guess you could try using a system <code>ccache</code>, I don't really know what it does);</li>\n<li>add <code>-no-pie</code> to <code>ldflags_ext</code> (apparently Ubuntu wants to build PIE by default but the Lean binary distribution has non-PIE libraries);</li>\n<li>remove the nix path from the for loop;</li>\n<li>add <code>&gt; /dev/null</code> to the two <code>command -v</code> invocations to make the build a little more quiet</li>\n</ul>",
        "id": 222177694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610210218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks for checking, should now be covered by <a href=\"https://github.com/leanprover/lean4/pull/256\">https://github.com/leanprover/lean4/pull/256</a></p>",
        "id": 222189625,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610226066
    }
]