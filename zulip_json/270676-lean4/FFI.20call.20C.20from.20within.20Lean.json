[
    {
        "content": "<p>When reading the <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html\">FFI chapter</a> of the Lean 4 manual, I get the impression that it is (at the moment) only possible to call Lean functions from C and not call external C-functions from Lean. Is that correct or is there some way to make use of external libraries from a Lean program?</p>",
        "id": 318752434,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1672500201
    },
    {
        "content": "<p>I think that's backwards. We use the C FFI to call C implementations from Lean</p>",
        "id": 318752709,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672500332
    },
    {
        "content": "<blockquote>\n<p>I think that's backwards. We use the C FFI to call C implementations from Lean</p>\n</blockquote>\n<p>Do you have some example of that? A link to a source file on github would be fine.</p>",
        "id": 318755483,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1672501828
    },
    {
        "content": "<p>Yes, you can find some examples here: <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean\">https://github.com/yatima-inc/YatimaStdLib.lean</a></p>\n<p>This is the setup to make it work: <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/lakefile.lean\">https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/lakefile.lean</a></p>\n<p>This is the C code that has some fast implementations: <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/FFI/ffi.c\">https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/FFI/ffi.c</a></p>\n<p>And this is how you can refer to them in Lean: <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/FFI/UIntByteArray.lean\">https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/FFI/UIntByteArray.lean</a> (with the <code>extern</code> tag)</p>",
        "id": 318756266,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672502101
    },
    {
        "content": "<p>I defined them as <code>opaque</code> but that's not needed. You may also have regular definitions if you want to prove properties about them. When compiled, it will use your C code instead. But the responsibility for maintaining semantics is on you</p>",
        "id": 318756568,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672502217
    },
    {
        "content": "<p>Example: <code>ByteArray.copySlice</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  Copy the slice at `[srcOff, srcOff + len)` in `src` to `[destOff, destOff + len)` in `dest`, growing `dest` if necessary.</span>\n<span class=\"sd\">  If `exact` is `false`, the capacity will be doubled when grown. -/</span>\n<span class=\"kd\">@[extern \"lean_byte_array_copy_slice\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">copySlice</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">srcOff</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dest</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">destOff</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">dest.data.extract</span> <span class=\"mi\">0</span> <span class=\"n\">destOff</span> <span class=\"bp\">++</span> <span class=\"n\">src.data.extract</span> <span class=\"n\">srcOff</span> <span class=\"o\">(</span><span class=\"n\">srcOff</span> <span class=\"bp\">+</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">dest.data.extract</span> <span class=\"o\">(</span><span class=\"n\">destOff</span> <span class=\"bp\">+</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"n\">dest.data.size</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 318756980,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672502409
    }
]