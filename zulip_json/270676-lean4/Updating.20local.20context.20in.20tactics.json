[
    {
        "content": "<p>I was trying to add a <code>let</code> declaration from within a tactic. Below I create a new local context, but then just discard it (as expected it does not work as a <code>let</code>). Can someone help me with what is the missing statement to update the local context (or am I getting the idiom wrong). I have been trying to copy the code of the <code>intro</code>tactic but could not see where the updating takes place.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">dupllet</span><span class=\"o\">)</span> <span class=\"s2\">\"assign\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"::\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"as\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic dupllet]</span> <span class=\"kd\">def</span> <span class=\"n\">assignImpl</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">assign</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">::</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"n\">as</span>  <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n        <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">n.getId</span>\n        <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span> <span class=\"n\">true</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n        <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">lctx.mkLetDecl</span> <span class=\"n\">fvarId</span> <span class=\"n\">name</span> <span class=\"n\">typ</span> <span class=\"n\">value</span>\n        <span class=\"k\">let</span> <span class=\"n\">fvar</span>   <span class=\"o\">:=</span> <span class=\"n\">mkFVar</span> <span class=\"n\">fvarId</span>\n        <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwIllFormedSyntax</span>\n</code></pre></div>",
        "id": 255701533,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1633073060
    },
    {
        "content": "<p>I tried an alternative approach, which also did not work, i.e., the new let statement did not appear. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">dupllet</span><span class=\"o\">)</span> <span class=\"s2\">\"assign\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"::\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"as\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic dupllet]</span> <span class=\"kd\">def</span> <span class=\"n\">assignImpl</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">assign</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">::</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"n\">as</span>  <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n        <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">n.getId</span>\n        <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span> <span class=\"n\">true</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n        <span class=\"n\">withMVarContext</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">mvar2</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarType</span> <span class=\"n\">mvar</span><span class=\"o\">)</span>\n          <span class=\"k\">let</span> <span class=\"n\">mvarId2</span> <span class=\"o\">:=</span> <span class=\"n\">mvar2.mvarId</span><span class=\"bp\">!</span>\n          <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">mvarId2</span><span class=\"o\">]</span>\n          <span class=\"n\">withLetDecl</span>  <span class=\"n\">name</span>  <span class=\"n\">typ</span> <span class=\"n\">value</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">do</span>\n            <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkLetFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">mvar2</span><span class=\"o\">)</span>\n            <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwIllFormedSyntax</span>\n</code></pre></div>",
        "id": 255706797,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1633076056
    },
    {
        "content": "<p><strong>Update:</strong> I managed to make a tactic with the correct result using <code>apply</code> and <code>intro</code> at the <code>Meta</code> level and <code>liftMetaTactic</code>. </p>\n<p>For the sake of my understanding, I would be grateful for tips on doing this in a more self-contained way.</p>\n<p>Thanks.</p>",
        "id": 255715527,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1633080634
    }
]