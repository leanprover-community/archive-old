[
    {
        "content": "<p>So when I'm trying to do a large induction with e.g. 30 cases; I get really really bad performance, especially if I have a large automated branch at the end handling say 25 of the cases: every time I modify one of the upper 5 cases, I need to wait for 2 minutes before the infoview updates and I can think about what to write next. Would it be possible to somehow cache work so this is not the case (the cases of the induction should be completely independent of each other no?)</p>",
        "id": 278570389,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1649690589
    },
    {
        "content": "<p>We have a new <code>checkpoint</code> tactic. It is an experimental stage right now, but it was added for this kind of scenario.<br>\nCould you try the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">checkpoint</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"n\">tactic</span> <span class=\"n\">that</span> <span class=\"n\">takes</span> <span class=\"n\">care</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"mi\">25</span> <span class=\"n\">cases</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"bp\">&lt;</span><span class=\"n\">remainin</span><span class=\"bp\">-</span><span class=\"n\">case</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">case</span> <span class=\"bp\">&lt;</span><span class=\"n\">remainin</span><span class=\"bp\">-</span><span class=\"n\">case</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">f_eq_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">f_eq_2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"bp\">|</span> <span class=\"n\">c4</span> <span class=\"bp\">|</span> <span class=\"n\">c5</span> <span class=\"bp\">|</span> <span class=\"n\">c6</span> <span class=\"bp\">|</span> <span class=\"n\">c7</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c7</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"mi\">1000</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">100000</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">checkpoint</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">c7</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 278572041,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649691230
    },
    {
        "content": "<p>Another trick is to temporarily use the <code>stop</code> tactic to disable parts of your proof. <br>\nWe could also write the example above as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c7</span> <span class=\"bp\">=&gt;</span> <span class=\"c\">/-</span><span class=\"cm\"> we can now comfortably work on this branch without delay -/</span> <span class=\"n\">done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stop</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"c\">/-</span><span class=\"cm\"> stop disabled the else branch. -/</span>\n</code></pre></div>",
        "id": 278611808,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649708730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggested other tricks in the following thread <a href=\"#narrow/stream/270676-lean4/topic/Partial.20evaluation.20of.20a.20file\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Partial.20evaluation.20of.20a.20file</a></p>",
        "id": 278611928,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649708786
    },
    {
        "content": "<p>the <code>stop</code> tactic is called <code>sorry { ... }</code> in current lean 3</p>",
        "id": 278612009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649708831
    },
    {
        "content": "<p>We have added the <code>save</code> tactic yesterday. It is often more convenient to use than <code>checkpoint</code>.<br>\nSee <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a> for additional details.</p>",
        "id": 279307771,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650301421
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"expensive_tactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sleep</span> <span class=\"mi\">5000</span><span class=\"o\">)</span> <span class=\"c1\">-- sleeps for 5 seconds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">expensive_tactic</span>\n  <span class=\"n\">save</span>\n  <span class=\"c1\">-- We can comfortably  make changes after the `save`</span>\n  <span class=\"c1\">-- and get quick feedback from the editor.</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h₁.symm</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h₂.symm</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"hello world\"</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this.trans</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">›</span>\n</code></pre></div>",
        "id": 279307988,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650301539
    },
    {
        "content": "<p>Would it be possible to automatically detect that branches of an induction are independent , rather than depending on a certain order? For example, the expensive tactic which solves the 25 cases is in the last branch.</p>",
        "id": 279616452,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497286
    },
    {
        "content": "<p>Or are they not actually independent in the case of induction ... generalizing ... with | ...</p>",
        "id": 279616480,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497308
    },
    {
        "content": "<p>On a related note, why is <code>simp</code> on anything defined via a large <code>match</code> expression so slow?</p>",
        "id": 279617200,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497837
    },
    {
        "content": "<p>My proofs all become super slow whenever I do <code>simp only [big_match]</code> for an expression like <code>big_match (constructor_14 a) (constructor_3 b)</code></p>",
        "id": 279617237,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497881
    },
    {
        "content": "<p>Even though as far as I can tell it should be fast as it's just a simple rewrite; and similar rewrites using theorems are very fast</p>",
        "id": 279617293,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497902
    },
    {
        "content": "<p>Should I prove a theorem for each case of the match?</p>",
        "id": 279617328,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497937
    },
    {
        "content": "<p>Seems hard to automate, and harder to put into <code>simp</code> in the case of the automated cases</p>",
        "id": 279617363,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497957
    },
    {
        "content": "<p>Is there a better way to do such \"obvious\" reductions?</p>",
        "id": 279617369,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650497966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617200\">said</a>:</p>\n<blockquote>\n<p>On a related note, why is <code>simp</code> on anything defined via a large <code>match</code> expression so slow?</p>\n</blockquote>\n<p>It is hard to tell without seeing the actual example, but I suspect the problem is not <code>simp</code>, but the generation of equality theorems for the <code>match</code> expression. I have seen some massive proofs when the <code>match</code> expression has many overlapping patterns.<br>\nLean 4 generates these theorems on demand when they are first needed.</p>",
        "id": 279765563,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650590133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617237\">said</a>:</p>\n<blockquote>\n<p>My proofs all become super slow whenever I do <code>simp only [big_match]</code> for an expression like <code>big_match (constructor_14 a) (constructor_3 b)</code></p>\n</blockquote>\n<p>If you copy and paste the <code>theorem</code> as an <code>example</code> after the <code>theorem</code> is the <code>example</code> also slow?</p>",
        "id": 279765682,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650590243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617328\">said</a>:</p>\n<blockquote>\n<p>Should I prove a theorem for each case of the match?</p>\n</blockquote>\n<p>You should not need to. Have you tried the new <code>save</code> and <code>stop</code> tactics?</p>",
        "id": 279765763,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650590309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617369\">said</a>:</p>\n<blockquote>\n<p>Is there a better way to do such \"obvious\" reductions?</p>\n</blockquote>\n<p>If the reductions are definitional, then we can add an option that skips the match equality theorem generation and relies only on definitional reduction for <code>match</code> expressions.</p>",
        "id": 279765887,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650590441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279616452\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to automatically detect that branches of an induction are independent , rather than depending on a certain order? For example, the expensive tactic which solves the 25 cases is in the last branch.</p>\n</blockquote>\n<p>It is not clear to me what you are asking and/or proposing.</p>",
        "id": 279765923,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650590491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279765682\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617237\">said</a>:</p>\n<blockquote>\n<p>My proofs all become super slow whenever I do <code>simp only [big_match]</code> for an expression like <code>big_match (constructor_14 a) (constructor_3 b)</code></p>\n</blockquote>\n<p>If you copy and paste the <code>theorem</code> as an <code>example</code> after the <code>theorem</code> is the <code>example</code> also slow?</p>\n</blockquote>\n<p>No it's actually instant. I even made sure it wasn't parallelism by commenting it out, letting everything run, and then uncommenting it</p>",
        "id": 279937461,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650735991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279765763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617328\">said</a>:</p>\n<blockquote>\n<p>Should I prove a theorem for each case of the match?</p>\n</blockquote>\n<p>You should not need to. Have you tried the new <code>save</code> and <code>stop</code> tactics?</p>\n</blockquote>\n<p>These don't seem to be working for me; editing below a <code>save</code> still causes the whole thing to start again for some reason and takes forever (even when there's nothing or very little under the <code>save</code>, and when replacing other tactics with <code>stop</code> does seem to speed things up)</p>",
        "id": 279937476,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650736043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279765923\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279616452\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to automatically detect that branches of an induction are independent , rather than depending on a certain order? For example, the expensive tactic which solves the 25 cases is in the last branch.</p>\n</blockquote>\n<p>It is not clear to me what you are asking and/or proposing.</p>\n</blockquote>\n<p>Well as far as I understand, say we do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">label1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">label2</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">label3</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>As far as I understand, those branches are totally independent, so why not save them individually as checkpoints so editing one branch does not affect the others?</p>",
        "id": 279937556,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650736120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279765563\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279617200\">said</a>:</p>\n<blockquote>\n<p>On a related note, why is <code>simp</code> on anything defined via a large <code>match</code> expression so slow?</p>\n</blockquote>\n<p>It is hard to tell without seeing the actual example, but I suspect the problem is not <code>simp</code>, but the generation of equality theorems for the <code>match</code> expression. I have seen some massive proofs when the <code>match</code> expression has many overlapping patterns.<br>\nLean 4 generates these theorems on demand when they are first needed.</p>\n</blockquote>\n<p>This is weird because I have a lot of thoerems using <code>simp</code> to handle the same match statemement, and they're all <em>very very slow</em>. Like it's not just one slow one. But, as I said, copying the exact <em>same</em> theorem was indeed fast.</p>",
        "id": 279937600,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650736180
    },
    {
        "content": "<p>Thanks so much for your help btw, I really appreciate the responsiveness!</p>",
        "id": 279937610,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650736197
    },
    {
        "content": "<p>Also btw I've managed to get by a little using the <code>reduce</code> tactic before rewriting, but apparently that's for debugging purposes only. Much faster, though...</p>",
        "id": 279938826,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650737916
    },
    {
        "content": "<p>Since I am basically using <code>simp</code> to do reduction; <em>is</em> there a better way to do this?</p>",
        "id": 279938835,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650737939
    },
    {
        "content": "<p>maybe <code>dsimp</code> ? It performs simp using definitional equality only</p>",
        "id": 279938942,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650738100
    },
    {
        "content": "<blockquote>\n<p>These don't seem to be working for me; editing below a save still causes the whole thing to start again for some reason and takes forever (even when there's nothing or very little under the save)</p>\n</blockquote>\n<p>This is the expected behavior. There is no cache yet when you are typing <code>save</code>, and the whole tactic will be executed from the beginning. Our plan is to add in the future an option <code>set_option tactic.cache true</code> that will introduce <code>save</code> automatically for us for potentially expensive tactics such as <code>simp</code>. We also want to allow the user to register their own tactics as \"expensive\".</p>\n<blockquote>\n<p>As far as I understand, those branches are totally independent, so why not save them individually as checkpoints so editing one branch does not affect the others?</p>\n</blockquote>\n<p>It is not that simple. As you are typing in one of the branches, you are introducing syntax errors. The syntax errors temporarily disable branches. Try the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">|</span> <span class=\"n\">c3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">case</span> <span class=\"c1\">-- You are tying here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- Note that `simp` is not highlighted because it was not even parsed, let alone elaborated</span>\n<span class=\"c1\">--^ parsing error here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p><em>EDIT</em>: this is not the only obstacle, but it is the simplest to explain.</p>\n<blockquote>\n<p>This is weird because I have a lot of thoerems using simp to handle the same match statemement, and they're all very very slow. Like it's not just one slow one. But, as I said, copying the exact same theorem was indeed fast.</p>\n</blockquote>\n<p>We may have a bug in our cache, and may be recomputing things. A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help us a lot.</p>\n<blockquote>\n<p>Also btw I've managed to get by a little using the reduce tactic before rewriting, but apparently that's for debugging purposes only. Much faster, though...</p>\n</blockquote>\n<p>It makes sense. <code>reduce</code> performs only definitional reductions and will never try to generate equation theorems for a <code>match</code> expression.</p>",
        "id": 279939261,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650738593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/279938835\">said</a>:</p>\n<blockquote>\n<p>Since I am basically using <code>simp</code> to do reduction; <em>is</em> there a better way to do this?</p>\n</blockquote>\n<p><code>simp</code> is the way to go. We should work together to fix the performance problem and avoid unnecessary workarounds.</p>",
        "id": 279939339,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650738699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> sounds good! I can get started on an MWE probably tonight; that said, do you know when a definitional-match-only simp could be available, as it's getting to the point where it's stalling all my progress as theorems just become unworkable?</p>",
        "id": 279939637,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650739150
    },
    {
        "content": "<p>Yes, we have support for definitional and non-definitional <code>match</code> simplifications. <code>simp</code> by default tries both. I am hopeful we will be able to fix the performance issue. If it cannot be fixed, we can add a flag to <code>simp</code> to disable non-definitional match simplifications.</p>",
        "id": 279939782,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650739341
    },
    {
        "content": "<p>Would it be possible to add the flag now as a stopgap so I can get on with my proofs haha?</p>",
        "id": 279940308,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650740226
    },
    {
        "content": "<p>Or is there some kind of dsimp-like tactic I can use?</p>",
        "id": 279940312,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650740238
    },
    {
        "content": "<p>I will add a <code>dsimp</code>-like tactic.</p>",
        "id": 279941149,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650741465
    },
    {
        "content": "<p>We have <code>dsimp</code> and <code>dsimp!</code> tactics in the nightly build <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-24\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-24</a></p>",
        "id": 279981396,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650806811
    },
    {
        "content": "<p>Unfortunately, even using <code>dsimp</code>, it's still about the same speed</p>",
        "id": 280146686,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650931945
    },
    {
        "content": "<p>The test program,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanExperiments.Dependencies</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Term.stlc_wknth_true</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Sparsity</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t.wknth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stlc</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">wknth</span> <span class=\"n\">n</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t.stlc</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wknth</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">ix</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stlc_var</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.stlc</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">Γ.</span><span class=\"n\">dep</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span>\n        <span class=\"n\">assumption</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_ix_true'</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Stlc.wknth</span><span class=\"o\">,</span> <span class=\"n\">Stlc.wk</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Wk.wknth_var</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.lift_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.liftn_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">wknth_def</span><span class=\"o\">]</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">TermKind</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">AnnotSort</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">stlc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_merge</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Term.stlc_ty_wknth</span><span class=\"o\">]</span>\n      <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>still takes 29 seconds to typecheck; and even simply just writing <code>dsimp [stlc]</code> takes a few seconds each time</p>",
        "id": 280146711,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650931976
    },
    {
        "content": "<p>Now this match isn't that huge, only about 20 branches, so I'm confused</p>",
        "id": 280146723,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650931988
    },
    {
        "content": "<p>I can probably work towards an MWE tomorrow, but any idea what gives?</p>",
        "id": 280146737,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932003
    },
    {
        "content": "<p>This does seem to be quite <code>simp</code>-specific since <code>rw</code> and <code>reduce</code> are both so fast I can't even tell I'm waiting for anything</p>",
        "id": 280146839,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932087
    },
    {
        "content": "<p>The <code>split</code> tactic will (indirectly) generate the equality theorems for the <code>match</code>-expression.</p>",
        "id": 280146856,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650932103
    },
    {
        "content": "<p>On the other hand intuition tells me this kind of simple unfolding should be faster than <code>reduce</code>, so why isn't it?</p>",
        "id": 280146859,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> ah but even my other programs without <code>split</code> are still slow</p>",
        "id": 280146878,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932125
    },
    {
        "content": "<p>Lemme give another example</p>",
        "id": 280146886,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/Abysmal.20performance.20when.20.20doing.20large.20inductions/near/280146859\">said</a>:</p>\n<blockquote>\n<p>On the other hand intuition tells me this kind of simple unfolding should be faster than <code>reduce</code>, so why isn't it?</p>\n</blockquote>\n<p>We need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to be able to answer this question.</p>",
        "id": 280146892,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650932148
    },
    {
        "content": "<p>Makes sense will get to it</p>",
        "id": 280146907,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932158
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 280146949,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650932166
    },
    {
        "content": "<p>Np, sorry for putting it off, just had a hectic week, barely time to even work on the proofs themselves haha!</p>",
        "id": 280146962,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932188
    },
    {
        "content": "<p>Thanks for all the support, really appreciate it!</p>",
        "id": 280146969,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650932197
    },
    {
        "content": "<p>Actually decided to stop procrastinating and made an MWE</p>",
        "id": 280148190,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650933468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  the program</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Level1</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span>\n<span class=\"bp\">|</span> <span class=\"n\">three</span>\n<span class=\"bp\">|</span> <span class=\"n\">four</span>\n<span class=\"bp\">|</span> <span class=\"n\">five</span>\n<span class=\"bp\">|</span> <span class=\"n\">six</span>\n<span class=\"bp\">|</span> <span class=\"n\">seven</span>\n<span class=\"bp\">|</span> <span class=\"n\">eight</span>\n<span class=\"bp\">|</span> <span class=\"n\">nine</span>\n<span class=\"bp\">|</span> <span class=\"n\">ten</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Level2</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">emp</span>\n<span class=\"bp\">|</span> <span class=\"n\">yi</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">er</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">san</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">si</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">wu</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">liu</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">qi</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ba</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">jiu</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">shi</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Level1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Level2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Level1</span>\n<span class=\"kn\">open</span> <span class=\"n\">Level2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Level1.make_sentence</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Level1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Level2</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">emp</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">yi</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">er</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">three</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">san</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">four</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">si</span> <span class=\"n\">four</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">five</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wu</span> <span class=\"n\">five</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">six</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liu</span> <span class=\"n\">six</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">seven</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">qi</span> <span class=\"n\">seven</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">eight</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ba</span> <span class=\"n\">eight</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nine</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">jiu</span> <span class=\"n\">nine</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ten</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">shi</span> <span class=\"n\">ten</span> <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Level2.is_translation</span><span class=\"o\">:</span> <span class=\"n\">Level2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">yi</span> <span class=\"n\">one</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">er</span> <span class=\"n\">two</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">san</span> <span class=\"n\">three</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">si</span> <span class=\"n\">four</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">wu</span> <span class=\"n\">five</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">liu</span> <span class=\"n\">six</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">qi</span> <span class=\"n\">seven</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">ba</span> <span class=\"n\">eight</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">jiu</span> <span class=\"n\">nine</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">shi</span> <span class=\"n\">ten</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.is_translation</span>\n<span class=\"bp\">|</span> <span class=\"n\">emp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Level1.sentence_is_translation'</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Level1</span><span class=\"o\">}:</span>\n  <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_translation</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">l</span> <span class=\"n\">xs</span> <span class=\"n\">I</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">lhs</span>\n      <span class=\"n\">reduce</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Level1.sentence_is_translation</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Level1</span><span class=\"o\">}:</span>\n  <span class=\"o\">(</span><span class=\"n\">make_sentence</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_translation</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">l</span> <span class=\"n\">xs</span> <span class=\"n\">I</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">make_sentence</span><span class=\"o\">,</span> <span class=\"n\">is_translation</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">I</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 280148241,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650933485
    },
    {
        "content": "<p>Could probably be made slightly smaller but illustrates the point</p>",
        "id": 280148257,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650933498
    },
    {
        "content": "<p>sentence_is_translation' typechecks instantaneously</p>",
        "id": 280148268,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650933506
    },
    {
        "content": "<p>sentence_is_translation takes a couple of seconds</p>",
        "id": 280148279,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650933516
    },
    {
        "content": "<p>Thanks for creating the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. I will work on it.</p>",
        "id": 280148684,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650933944
    },
    {
        "content": "<p>Pushed the following fix: <a href=\"https://github.com/leanprover/lean4/commit/3cf642688bcf12356292590822a8a372fbe04630\">https://github.com/leanprover/lean4/commit/3cf642688bcf12356292590822a8a372fbe04630</a><br>\n<code>Level1.sentence_is_translation</code> should be very fast now. <br>\nThe bottle neck is the equation theorem generation as we suspected. I will try to improve it tomorrow.</p>",
        "id": 280150349,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650935664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> works great now, thanks!</p>",
        "id": 280233743,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650989887
    },
    {
        "content": "<p>Any chance we could get <code>dsimp</code> support in <code>conv</code> though?</p>",
        "id": 280233774,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650989904
    }
]