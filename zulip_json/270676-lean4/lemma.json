[
    {
        "content": "<p>How do I make a macro to let <code>lemma</code> mean <code>theorem</code>?</p>",
        "id": 221705911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609883093
    },
    {
        "content": "<p>A slight modification of the <code>defthunk</code> example from <a href=\"https://arxiv.org/abs/2001.10490\">the \"Beyond Notations\" paper</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"lemma\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">proof</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 221708337,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609884462
    },
    {
        "content": "<p>thanks!</p>",
        "id": 221708436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609884517
    },
    {
        "content": "<p>so now we can have <code>conjecture foo : bar quux</code> and it means <code>theorem foo : bar quux := sorry</code> (-;</p>",
        "id": 221735889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609911691
    },
    {
        "content": "<p>Can we maybe take the opportunity to banish <code>lemma</code> in lean 4? This is a meaningless choice that is confusing in light of all the other choices that are not meaningless</p>",
        "id": 221748664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609926096
    },
    {
        "content": "<p>can we have <code>thm</code>?</p>",
        "id": 221748772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609926185
    },
    {
        "content": "<p>Calling everything a theorem sounds more ridiculous to me than calling everything a lemma.</p>",
        "id": 221748795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609926208
    },
    {
        "content": "<p>we could have a linter that requires that <code>theorem</code> has a docstring</p>",
        "id": 221748856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609926245
    },
    {
        "content": "<p>I noticed that, among the many influence of Lean on my real world mathematics practice and especially teaching, I've started to call almost everything lemma in my teaching...</p>",
        "id": 221748859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609926254
    },
    {
        "content": "<p>that would make the meaningless choice a bit less meaningless</p>",
        "id": 221748866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609926262
    },
    {
        "content": "<p>Note how great it is that Leo doesn't need to care about this discussion! If I understand correctly we can add or remove such commands in mathlib at any time.</p>",
        "id": 221748908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609926318
    },
    {
        "content": "<p>I actually banished <code>lemma</code> in an early commit in mathlib (it was like commit number 4) but it didn't make it into the style guide and ultimately didn't stick</p>",
        "id": 221749729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927054
    },
    {
        "content": "<p>I think that using a smaller lexicon for what to call \"true/proven things\" is just a good idea, I don't personally care what word we use but I think \"theorem\" is the technically/logically correct one</p>",
        "id": 221749817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927128
    },
    {
        "content": "<p>There are lots of other ways in which mathematical lexicon is boiled down to simpler terms to get encoded in lean. I'm not sure why this is a point of contention</p>",
        "id": 221749977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927259
    },
    {
        "content": "<p>Another example of meaningless syntax variation: <code>variables</code> vs. <code>variable</code></p>",
        "id": 221750092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927333
    },
    {
        "content": "<p>Having more keywords is generally a bad thing, unless the new keywords have new meanings</p>",
        "id": 221750167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927393
    },
    {
        "content": "<p>I agree with you on <code>variable</code>/<code>variables</code>. But there is too much emotional baggage in the <code>theorem</code> vs <code>lemma</code> distinction. I wouldn't pick that battle (-;</p>",
        "id": 221750170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221750167\">said</a>:</p>\n<blockquote>\n<p>Having more keywords is generally a bad thing, unless the new keywords have new meanings</p>\n</blockquote>\n<p>Right, so I propose to make docstrings required for <code>theorem</code>s</p>",
        "id": 221750194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927420
    },
    {
        "content": "<p>But to this day I don't think we have a clear style guide on what to call a theorem in mathlib</p>",
        "id": 221750202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927427
    },
    {
        "content": "<p>It's not only about emotion, it's also about navigating the library. We need some way to quickly highlight the most significant results.</p>",
        "id": 221750249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609927444
    },
    {
        "content": "<p>Okay, that's something</p>",
        "id": 221750259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927457
    },
    {
        "content": "<p>Does most significant have a technical meaning?</p>",
        "id": 221750273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221750202\">said</a>:</p>\n<blockquote>\n<p>But to this day I don't think we have a clear style guide on what to call a theorem in mathlib</p>\n</blockquote>\n<p>That's mainly because at some point during prehistory, someone decided to call everything a theorem and it messed up everything.</p>",
        "id": 221750275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609927480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221750273\">said</a>:</p>\n<blockquote>\n<p>Does most significant have a technical meaning?</p>\n</blockquote>\n<p>nope, it's historical/psychological, as far as I can see.</p>",
        "id": 221750291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927501
    },
    {
        "content": "<p>But it's the stuff that is considered a milestone, that get's mentioned in the module docs, and that deserves a decent docstring</p>",
        "id": 221750308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927530
    },
    {
        "content": "<p>This discussion reminds me of the dark ages when every type was named by a Greek letter.</p>",
        "id": 221750312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609927533
    },
    {
        "content": "<p>The thing is, even when we have \"named\" theorems we often have several variations, it's not a 1-1 match with literature anyway</p>",
        "id": 221750324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927550
    },
    {
        "content": "<p>So you're saying we need to add <code>corollary</code> as well... <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 221750417,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609927615
    },
    {
        "content": "<p>There are some theorems that are clearly Theorems, some things that are simp lemmas, and MANY things in between</p>",
        "id": 221750447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927634
    },
    {
        "content": "<p>right... but many parts of the style guide leave room for flexibility</p>",
        "id": 221750493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927681
    },
    {
        "content": "<p>I myself am very conservative with using <code>theorem</code></p>",
        "id": 221750546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927694
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"theorem\"</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/*.</span><span class=\"n\">lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">structure_polynomial.lean</span>\n<span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"n\">In</span> <span class=\"n\">this</span> <span class=\"n\">file</span> <span class=\"n\">we</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">main</span> <span class=\"kd\">theorem</span> <span class=\"n\">that</span> <span class=\"n\">makes</span> <span class=\"n\">the</span> <span class=\"n\">whole</span> <span class=\"n\">theory</span> <span class=\"n\">of</span> <span class=\"n\">Witt</span> <span class=\"n\">vectors</span> <span class=\"n\">work.</span>\n<span class=\"mi\">126</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">witt_structure_rat_prop</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">136</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">witt_structure_rat_exists_unique</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">288</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">witt_structure_int_prop</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">315</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">witt_structure_int_exists_unique</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">320</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">witt_structure_prop</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n</code></pre></div>",
        "id": 221750578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927736
    },
    {
        "content": "<p>that's all the theorems in Witt vector stuff. Of course the \"theorem\" that <code>Witt (zmod p)</code> is <code>Z_p</code> is actually a <code>def</code>, etc...</p>",
        "id": 221750626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927786
    },
    {
        "content": "<p>but you get the point</p>",
        "id": 221750632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609927790
    },
    {
        "content": "<p>I just don't want to have to think about this distinction</p>",
        "id": 221750633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927790
    },
    {
        "content": "<p>We'll handle that.</p>",
        "id": 221750687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609927812
    },
    {
        "content": "<p>Is there any theorem in list.basic? finset.basic? bigops? Where are theorems?</p>",
        "id": 221750784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927911
    },
    {
        "content": "<p>and don't say one of the 100 theorems</p>",
        "id": 221750834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927925
    },
    {
        "content": "<p>I mean in the day to day theorems, what constitutes a theorem?</p>",
        "id": 221750857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609927947
    },
    {
        "content": "<p>is the binomial theorem a theorem?</p>",
        "id": 221750955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609928028
    },
    {
        "content": "<p>additivity of integrals?</p>",
        "id": 221751013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609928045
    },
    {
        "content": "<p>Its completely subjective of course, but people here are just saying that despite it being an imperfect measure they still prefer to have some demarcation of say 5% (also a subjective number) of results in mathlib that are most mathematically interesting.</p>",
        "id": 221751020,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609928055
    },
    {
        "content": "<p>I would still like to have some criterion that we can put in the style guide</p>",
        "id": 221751069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609928092
    },
    {
        "content": "<p>is it theorems that are referred to externally? Theorems with documentation seems like a good idea but it doesn't sound like a sufficient condition</p>",
        "id": 221751107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609928128
    },
    {
        "content": "<p>I just have no conception of what this metric is at all</p>",
        "id": 221751194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609928170
    },
    {
        "content": "<p>That's not a problem Mario. Don't worry, we'll handle this.</p>",
        "id": 221751464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609928378
    },
    {
        "content": "<p>Euclid uses Πόρισμα (corollary) &lt;29 times,  Λῆμμα (lemma) &lt;26 times, and all the propositions in his book are just numbered but are referred to as θεώρημα (theorem)</p>",
        "id": 221751699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609928530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I'm sure you know of the great vowel shift...</p>",
        "id": 221753146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609929507
    },
    {
        "content": "<p>I guess what I said is just meant to be some sort of weak connection to the past. Maybe we should look up some famous math paper written in the 21st century then.</p>",
        "id": 221753231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609929598
    },
    {
        "content": "<p>what does Stacks do?</p>",
        "id": 221753463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609929766
    },
    {
        "content": "<p>Lemma: &lt; 53260 times<br>\nRemark: &lt; 3051 times<br>\nTheorem: &lt; 2001 times<br>\nProposition: &lt; 1976 times<br>\nCorollary: 0 times</p>",
        "id": 221754089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609930254
    },
    {
        "content": "<blockquote>\n<p>~/tmp/stacks-project$ for t in lemma proposition theorem proof example exercise equation history reference remark remarks situation; do echo -en \"$t\\t\"; rg begin\\\\\\{$t | wc -l; done<br>\nlemma   11743<br>\nproposition     303<br>\ntheorem 206<br>\nproof   12296<br>\nexample 420<br>\nexercise        366<br>\nequation        667<br>\nhistory 3<br>\nreference       242<br>\nremark  937<br>\nremarks 5<br>\nsituation       116</p>\n</blockquote>",
        "id": 221754169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609930332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221751194\">said</a>:</p>\n<blockquote>\n<p>I just have no conception of what this metric is at all</p>\n</blockquote>\n<p>It is a judgement which is partly aesthetic and partly pragmatic -- stuff which is either important or beautiful or in some sense the \"main result in the area\" might be called a theorem. There is a difference in meaning, but it is not something which one can quantify. The fundamental theorem of Galois theory is a theorem because it's what you just spent 3 lectures proving technical lemmas working up to. You then never apply the technical lemmas again but you use the theorem all the time. It's perhaps something to do with results which guide the human learner. Lean does not need to know the distinction but it is an important organisational principle for humans. You don't get an overview of a maths topic by being told 100 true Props but you do get one if you're told the key definitions and the key theorems, of which there will be far fewer.</p>",
        "id": 221758023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609933314
    },
    {
        "content": "<p>Bourbaki has probably &gt; 50% Propositions, and the rest Theorems, Corollaries, and a few Lemmas which are even typeset a bit differently.</p>",
        "id": 221758366,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609933546
    },
    {
        "content": "<p>Yes, Proposition is somewhere between a lemma and a theorem, but apparently the CS people use it to mean something else :-/ (they can have false ones! Can you believe it!)</p>",
        "id": 221759229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609934210
    },
    {
        "content": "<p>Although irrelevant, I can't resist quoting the (very much cited) snake Lemma (nobody would call it the snake Theorem) or Shapiro's Lemma. My favorite one is yet the \"Ugly Lemma\" by Tate (and/or Serre) in Cassels&amp;Frohlich, whose adjective was, I guess, meant to make it forgotten resulting in it being unforgettable. Then there is the fundamental Fundamental Lemma... What a nightmare!</p>",
        "id": 221771055,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1609942469
    },
    {
        "content": "<p>Of course I know that there are dozens of different names mathematicians use for proved things. But I'm not convinced that this is a distinction which is meaningful in a formal development outside of comments. It quite clearly has all the mess of natural language in it, just like the difference between properties that are adjectives vs properties that are nouns</p>",
        "id": 221781815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609947653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221759229\">said</a>:</p>\n<blockquote>\n<p>Yes, Proposition is somewhere between a lemma and a theorem, but apparently the CS people use it to mean something else :-/ (they can have false ones! Can you believe it!)</p>\n</blockquote>\n<p>\"the CS people\" -&gt; philosophers, but I guess this works in the definition of CS = everything other than mathematics</p>",
        "id": 221782174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609947839
    },
    {
        "content": "<p>and logicians (which are again not mathematicians under kevin's worldview)</p>",
        "id": 221782343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609947903
    },
    {
        "content": "<p>But how would we actually mark the distinction with comments?</p>",
        "id": 221785875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609949531
    },
    {
        "content": "<p>Isn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> lemma -/</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"c\">/-</span><span class=\"cm\"> theorem -/</span> <span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>strictly worse than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 221785915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609949559
    },
    {
        "content": "<p>I fully grant that, in agreement with Wadler's Law, this discussion is about the lexical syntax of comments</p>",
        "id": 221790353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609951640
    },
    {
        "content": "<p><em>obviously</em> the solution is instead <code>lemma foo :</code> and <code>lemma bar_theorem :</code></p>",
        "id": 221801215,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609956585
    },
    {
        "content": "<p>(4% serious)</p>",
        "id": 221801224,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609956589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma/near/221785875\">said</a>:</p>\n<blockquote>\n<p>But how would we actually mark the distinction with comments?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The binomial theorem -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_pow_eq_sum</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"sd\">/-- The fundamental lemma -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fundamental_lemma</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 221802674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609957275
    },
    {
        "content": "<p>The fundamental lemma is a historical artefact. The Langlands poeple thought it would be a combinatorial triviality in the 70s but it turned out to be extremely deep (Ngô Bảo Châu got a Fields Medal for proving it).</p>",
        "id": 221805245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609958442
    },
    {
        "content": "<p><code>@[significant]</code> would be an alternative to a keyword or comments. Whatever the choice, I can only see it being useful if we also train doc-gen to show these theorems specially.</p>",
        "id": 221821735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609966287
    },
    {
        "content": "<p>I added an attribute that I called <code>main_declaration</code> already so that I can detect the dead code in a file. I think that's very closely related</p>",
        "id": 221823182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609966955
    },
    {
        "content": "<p>These distinctions might help with code navigation as well.  I could see, for example, configuring the VSCode outline to show \"theorems\" but not \"lemmas\".</p>",
        "id": 221833002,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1609972667
    },
    {
        "content": "<p>For anybody else who didn't notice it: the <code>lemma</code> keyword is gone from Lean 4 core.</p>",
        "id": 224451945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611915554
    }
]