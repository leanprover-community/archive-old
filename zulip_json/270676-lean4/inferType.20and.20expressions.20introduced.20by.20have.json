[
    {
        "content": "<p>Hello! I would like to understand why <code>inferType</code> gives me this output when used in an expression introduced by a <code>have</code> without specifying it's type. I am writting a tactic that produces several intermediate terms using <code>have</code> and I would like to not have to specify their type, but this behavior of <code>inferType</code> is causing some trouble. Is there a way around it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"s2\">\"tac\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic tac]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTac</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">tac</span> <span class=\"n\">h</span> <span class=\"c1\">-- A ∨ B</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">tac</span> <span class=\"n\">h2</span> <span class=\"c1\">-- ?m655</span>\n  <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>",
        "id": 304546179,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1666036450
    },
    {
        "content": "<p>I'm not an expert, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instantiateMVars#doc\">docs4#Lean.instantiateMVars</a> might be required.</p>",
        "id": 304548042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666037075
    },
    {
        "content": "<p>At least the following seems to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[tactic tac]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTac</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 304548090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666037096
    },
    {
        "content": "<p>that works, thanks!</p>",
        "id": 304567210,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1666044171
    }
]