[
    {
        "content": "<p>I'm currently working the autogenerated <code>FromJson</code>, <code>ToJson</code> instances to dump some info to a JSON file and read it in in another part of doc-gen, the input can be parsed as JSON just fine but the autogenerated <code>ToJson</code> instance gives me some \"String expected\" error so it apparently doesn't like the format the <code>ToJson</code> generated? At least when viewing the file I can validate that it has the correct format:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">JsonDeclaration</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">doc</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">docLink</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">sourceLink</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">JsonInstance</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">className</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">JsonModule</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">declarations</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">JsonDeclaration</span>\n  <span class=\"n\">instances</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">JsonInstance</span>\n  <span class=\"n\">imports</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n</code></pre></div>\n<p>(The List and Array stuff are there for a reason)<br>\nOn an value of <code>JsonModule</code> toJson produces a file like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Init.NotationExtra\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"instances\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Lean.instForInLoopUnit\"</span><span class=\"o\">,</span><span class=\"s2\">\"className\"</span><span class=\"o\">:</span><span class=\"s2\">\"ForIn\"</span><span class=\"o\">}],</span>\n  <span class=\"s2\">\"imports\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Init.Meta\"</span><span class=\"o\">,</span><span class=\"s2\">\"Init.Data.Array.Subarray\"</span><span class=\"o\">,</span><span class=\"s2\">\"Init.Data.ToString\"</span><span class=\"o\">],</span>\n  <span class=\"s2\">\"declarations\"</span><span class=\"o\">:[</span>\n    <span class=\"o\">{</span><span class=\"s2\">\"sourceLink\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/leanprover/lean4/blob/3846dd60fd5bbb7901b432066234037c35b872a0/src/Init/NotationExtra.lean#L275-L275\"</span><span class=\"o\">,</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Lean.«term_Matches_|»\"</span><span class=\"o\">,</span><span class=\"s2\">\"docLink\"</span><span class=\"o\">:</span><span class=\"s2\">\"./Init/NotationExtra.html#Lean.«term_Matches_|»\"</span><span class=\"o\">,</span><span class=\"s2\">\"doc\"</span><span class=\"o\">:</span><span class=\"s2\">\"\"</span><span class=\"o\">},</span>\n  <span class=\"bp\">......</span>\n   <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and the <code>fromJson?</code> throws its \"String expected\" error.</p>\n<p>How would I go about debugging this?</p>",
        "id": 290495761,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658490807
    },
    {
        "content": "<p>Minimizing further it doesn't even like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Init.NotationExtra\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"instances\"</span><span class=\"o\">:[],</span>\n  <span class=\"s2\">\"imports\"</span><span class=\"o\">:[],</span>\n  <span class=\"s2\">\"declarations\"</span><span class=\"o\">:[]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 290496156,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491078
    },
    {
        "content": "<p>How are you calling the JSON parser?</p>",
        "id": 290496496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491254
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">(</span><span class=\"n\">System.FilePath.mk</span> <span class=\"s2\">\".\"</span><span class=\"bp\">/</span> <span class=\"s2\">\"DocGen4\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Output\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"mytest.json\"</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">foo</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">_</span> <span class=\"n\">JsonModule</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">foo.name</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">err</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">err</span>\n</code></pre></div>\n<p>is my test case right now</p>",
        "id": 290496531,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491278
    },
    {
        "content": "<p>I fear there might be a certain coercion from <code>String</code> to <code>Json</code> that you're using here.</p>",
        "id": 290496575,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491303
    },
    {
        "content": "<p>On a tangent: presumably at some point I should bring <a href=\"https://leanprover-community.github.io/mathlib_docs/find/json_serializable\">docs#json_serializable</a> in line with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ToJson#doc\">docs4#ToJson</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FromJson#doc\">docs4#FromJson</a>?</p>",
        "id": 290496703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658491375
    },
    {
        "content": "<p>Or maybe the other way around?  I never liked the separation of <code>FromJson</code> and <code>ToJson</code>.</p>",
        "id": 290496742,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Json.20ser-deser/near/290496575\">said</a>:</p>\n<blockquote>\n<p>I fear there might be a certain coercion from <code>String</code> to <code>Json</code> that you're using here.</p>\n</blockquote>\n<p>Can you elaborate?</p>",
        "id": 290496907,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491521
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polyrith.poly.non_null_json_serializable\">docs#polyrith.poly.non_null_json_serializable</a> has a dummy function for serialization, so I think the split might make sense</p>",
        "id": 290496921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658491530
    },
    {
        "content": "<p>Either that, or we should have <code>toJson : α → except String Lean.Json</code> to permit sometimes-serializable objects</p>",
        "id": 290497004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658491577
    },
    {
        "content": "<blockquote>\n<p>Can you elaborate?</p>\n</blockquote>\n<p><code>fromJson?</code> takes a <code>Json</code> argument.  In your example, <code>foo</code> is a string.  So <code>fromJson? foo</code> means <code>fromJson? (.str foo)</code>.</p>",
        "id": 290497013,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491586
    },
    {
        "content": "<p>ohhhhhh</p>",
        "id": 290497039,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491612
    },
    {
        "content": "<p>so fromJson? (Json.parse foo) instead</p>",
        "id": 290497056,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491624
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polyrith.poly.non_null_json_serializable\">docs#polyrith.poly.non_null_json_serializable</a> has a dummy function for serialization, so I think the split might make sense</p>\n</blockquote>\n<p>Ideally sage would just return JSON in the schema expected by <code>deriving JsonSerializable for Poly</code>.</p>",
        "id": 290497281,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491785
    },
    {
        "content": "<p>Alright working now, thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 290497442,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658491867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Json.20ser-deser/near/290497281\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polyrith.poly.non_null_json_serializable\">docs#polyrith.poly.non_null_json_serializable</a> has a dummy function for serialization, so I think the split might make sense</p>\n</blockquote>\n<p>Ideally sage would just return JSON in the schema expected by <code>deriving JsonSerializable for Poly</code>.</p>\n</blockquote>\n<p>In this case we send send the <code>poly</code>s to sage in a completely different format to the format we receive them; which is obviously messy.</p>",
        "id": 290501947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658494430
    }
]