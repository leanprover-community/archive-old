[
    {
        "content": "<p>So I've been working on a lean development where I wanted to rewrite using a lemma of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hei</span> <span class=\"o\">:</span> <span class=\"n\">Stlc.HasType.interp</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Context.stlc</span> <span class=\"bp\">Γ⊧</span><span class=\"n\">Term.stlc</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Context.sparsity</span> <span class=\"bp\">Γ</span><span class=\"o\">):</span><span class=\"n\">Ty.coprod</span> <span class=\"o\">(</span><span class=\"n\">Term.stlc_ty</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.stlc_ty</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Stlc.Context.interp.downgrade</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">ei</span>\n</code></pre></div>\n<p>Alas,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hei</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ie'</span>\n</code></pre></div>\n<p>doesn't work, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Stlc.HasType.interp_irrel</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ie'</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hei</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Ie'</span>\n</code></pre></div>\n<p>does, where we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Stlc.HasType.interp_irrel</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊧</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H'</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊧</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">H.interp</span> <span class=\"bp\">=</span> <span class=\"n\">H'.interp</span>\n  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I realized this was probably an issue, since propositional irrelevance usually holds, but trying to minimize the issue, all I could come up with, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SquashBool</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">truthy</span>\n<span class=\"bp\">|</span> <span class=\"n\">falsy</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">not'</span><span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">SquashBool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not'_irrel</span><span class=\"o\">:</span> <span class=\"n\">not'</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">not'</span> <span class=\"n\">b</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not'_not'</span><span class=\"o\">:</span> <span class=\"n\">not'</span> <span class=\"o\">(</span><span class=\"n\">not'</span> <span class=\"n\">b</span> <span class=\"n\">falsy</span><span class=\"o\">)</span> <span class=\"n\">truthy</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not'_not''</span><span class=\"o\">:</span> <span class=\"n\">not'</span> <span class=\"o\">(</span><span class=\"n\">not'</span> <span class=\"n\">b</span> <span class=\"n\">truthy</span><span class=\"o\">)</span> <span class=\"n\">falsy</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not'_not'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NonZero</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span><span class=\"o\">:</span> <span class=\"n\">NonZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ'</span><span class=\"o\">:</span> <span class=\"n\">NonZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonzero_mk</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">NonZero</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">safe_pred</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">NonZero</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">safe_pred_irrel</span><span class=\"o\">:</span> <span class=\"n\">safe_pred</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">safe_pred</span> <span class=\"n\">n</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">safe_pred_succ</span>\n <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n <span class=\"o\">(</span><span class=\"n\">safe_pred</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nonzero_mk</span> <span class=\"n\">H</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n   <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n   <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n <span class=\"o\">}</span>\n\n <span class=\"kd\">theorem</span> <span class=\"n\">safe_pred_succ'</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">safe_pred</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">safe_pred_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>works just fine, and so I'm confused as to how to even go about minimizing this. I'm pretty confident it's a bug though, but who knows.</p>",
        "id": 282048218,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1652318263
    }
]