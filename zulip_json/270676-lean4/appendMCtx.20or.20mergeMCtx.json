[
    {
        "content": "<p>Is there a function that takes to local contexts and merges them together?</p>\n<p>Probably #XY problem, I have a <code>mctx : MetavarContext</code> and I want to add it to the current context. The only function that I found is <code>withMCtx</code> that completely replaces the current metavariable context.</p>\n<p>Even more #XY, I have two expressions <code>x y : Expr</code>living in two different metavariable contexts and I want to know if they are defeq. I want to merge those contexts and call <code>isDefEq x y</code>.</p>",
        "id": 308463256,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667851211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> what if <code>x</code> is <code>?m_1</code> coming from mvar context A and <code>y</code> is <code>?n_1</code> coming from mvar context B? In general, the question of defeq doesn't seem to make sense unless both terms live in the same context.</p>",
        "id": 308478730,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1667857314
    },
    {
        "content": "<p>Asking it in the union of A and B should make sense, no?</p>",
        "id": 308479143,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667857495
    },
    {
        "content": "<p>Of course, the union of A and B does not have to be always well formed. (or well typed, I do not know the exact terminology used here)</p>",
        "id": 308479235,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667857540
    },
    {
        "content": "<p>The general answer is: you don't.  Another thing that could go wrong, which you didn't mention yet, is that the two metavariable contexts might have different assignments for the metavariables.</p>",
        "id": 308479613,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857699
    },
    {
        "content": "<p>What do you <em>actually</em> want to do?</p>",
        "id": 308479630,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857707
    },
    {
        "content": "<p>Sometimes, a reasonable substitute is to turn a term like <code>f ?m_1 ?m_2</code> into a lambda-abstraction like <code>fun x y =&gt; f x y</code> to transport it to the other metavariable context (and then create new metavariables there and instantiate the lambda-abstraction).</p>",
        "id": 308479798,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857783
    },
    {
        "content": "<p>I'm parsing a <code>term</code> from a custom parametric attribute, see <a href=\"#narrow/stream/270676-lean4/topic/simp.20guard\">simp guard thread</a>. </p>\n<p>In the case of <code>@[simp_guard g (λ x =&gt; x)]</code> the term I get from the elaborator is <code>(λ x : ?m =&gt; x)</code>.  At some point I want to test if another expression is equal to <code>(λ x : ?m =&gt; x)</code>, so I need to somehow carry around the created metavariable and use it correctly.</p>",
        "id": 308480797,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667858219
    },
    {
        "content": "<p>As you suggested, turning those metavariables to bound variables and then assigning fresh metavariables at the equality check would work.</p>",
        "id": 308481075,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667858350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/appendMCtx.20or.20mergeMCtx/near/308479798\">said</a>:</p>\n<blockquote>\n<p>turn a term like <code>f ?m_1 ?m_2</code> into a lambda-abstraction like <code>fun x y =&gt; f x y</code> t</p>\n</blockquote>\n<p>What is the easy/clean way of doing this?</p>",
        "id": 308526924,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667889869
    }
]