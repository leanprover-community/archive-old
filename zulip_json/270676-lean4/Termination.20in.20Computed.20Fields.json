[
    {
        "content": "<p>Is there a way to show termination for a computed_field function? A simple example for the depth of a tree:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NatTree</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NatTree</span>\n    <span class=\"bp\">|</span> <span class=\"n\">parent</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">NatTree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NatTree</span>\n<span class=\"k\">with</span>\n    <span class=\"kd\">@[computed_field]</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">NatTree</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">parent</span> <span class=\"n\">_</span> <span class=\"o\">[]</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n      <span class=\"c1\">-- | .parent a (ch::chs) =&gt; 1 + max (depth ch) (depth $ NatTree.parent a chs)</span>\n      <span class=\"c1\">-- computed field NatTree.depth does not reduce for constructor NatTree.parent</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">parent</span> <span class=\"n\">a</span> <span class=\"n\">ch</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ch.map</span> <span class=\"n\">depth</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maximum</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n        <span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n      <span class=\"c1\">--^ expected command</span>\n</code></pre></div>\n<p>The first option would go through with structural recursion but won't work (I imagine that's the same as the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/ComputedFields.lean#L56\">TODO</a> for patterns like <code>.app (.app a b) c</code>), whereas the second option won't go through without termination and it seems I can't add some termination to that.</p>",
        "id": 313299884,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669906928
    }
]