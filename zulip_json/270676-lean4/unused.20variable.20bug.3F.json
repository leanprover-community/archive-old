[
    {
        "content": "<p><code>variable (f) [∀ i, Mul (f i)]</code> gives an \"unused variable <code>i</code>\" linting message—but it's clearly used, right? Is this a bug?</p>",
        "id": 316386681,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238237
    },
    {
        "content": "<p>Or, wait—I think I get what's happening. We're enforcing an auto-implicit style where possible.</p>",
        "id": 316386779,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238318
    },
    {
        "content": "<p>Though, as it happens, in the file I'm porting, it <em>isn't</em> possible, as <code>i</code> is declared as a variable earlier! So, I guess that's the bug: saying it's unused when actually it's necessary, since an auto-implicit couldn't be used in that case.</p>",
        "id": 316387038,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238484
    },
    {
        "content": "<p>Actually, that isn't quite why—it's due to how <code>f</code> is declared as a variable earlier.</p>",
        "id": 316387394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238726
    },
    {
        "content": "<p>MWE:</p>",
        "id": 316387400,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238730
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"c1\">-- unused variable `i` [linter.unusedVariables]</span>\n<span class=\"c1\">-- replacing i with _ causes the following:</span>\n<span class=\"c1\">-- invalid parametric local instance, parameter with type ?m.44 does not have forward dependencies, type class resolution cannot use this kind of local instance because it will not be able to infer a value for this parameter.</span>\n</code></pre></div>",
        "id": 316387405,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671238738
    },
    {
        "content": "<p>If you replace <code>i</code> with <code>j</code> in the third line does it work?</p>",
        "id": 316390775,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671241814
    },
    {
        "content": "<p>Also, it's weird to declare <code>f</code> as implicit and then immediately change it to explicit.</p>",
        "id": 316390806,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671241850
    },
    {
        "content": "<p>No, it doesn't seem to work even then...</p>\n<p>In the original file, it doesn't immediately change it; there are many lines of code in between. This is just an mwe.</p>",
        "id": 316401405,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671251838
    },
    {
        "content": "<p>Ok, I worked around this by using <code>[(i : I) → f i]</code> instead. Are these 100% equivalent in this context? I'd expect them to be, but at one point it was mentioned that <code>∀</code> gets elaborated slightly differently than <code>→</code>. Can't find the message, though, and it might have just been for the non-dependent case.</p>",
        "id": 316498831,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671303263
    },
    {
        "content": "<p>Still, I'd bet this is a linter bug...<code>[∀ _, Mul (f i)]</code>, <code>[∀ _, Mul (f j)]</code> both give actual errors, and <code>[∀ (i : I), Mul (f i)]</code>, <code>[∀ (j: I), Mul (f j)]</code>, <code>[∀ j, Mul (f j)]</code> all give the same linter error.</p>",
        "id": 316499240,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671303509
    },
    {
        "content": "<p>terms inside <code>variable</code> are a bit weird, because elaboration is delayed until the variable is used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- no problem</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"c1\">-- this tactic is never executed [linter.unreachableTactic]</span>\n</code></pre></div>",
        "id": 316502676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671305795
    },
    {
        "content": "<p>I'm thinking this causes the linter warning. Note that <code>f</code> and <code>i</code> are not variable-colored in your example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n      <span class=\"c1\">--  ^     ^ variable-color</span>\n                    <span class=\"c1\">--  ^ ^ not variable-color</span>\n</code></pre></div>",
        "id": 316502902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671305901
    },
    {
        "content": "<p>you can always suppress the unused variable linter by using a variable name with an initial underscore</p>",
        "id": 316502940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671305942
    },
    {
        "content": "<p>I see! Interesting!</p>\n<p>Not a very important question, but: why is there a difference in the linter between <code>∀</code> and <code>→</code> in this case? I would have naively expected them to be treated the same</p>",
        "id": 316516949,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671316007
    },
    {
        "content": "<p>I believe the unused variable linter has a blacklist for variables named in <code>(i : I) → ...</code> dependent functions, because these are often used to give the function's parameter names, which are accessible from user code using the <code>(i := ...)</code> syntax and hence can cause false positives if you really need the name to not have an underscore in it but the function type isn't actually dependent. The blacklist doesn't cover <code>\\all</code> probably because it's weird to have a proposition with an unused variable in the statement, and indeed in this case <code>Mul</code> is not a proposition so <code>\\all</code> isn't the preferred spelling</p>",
        "id": 316523604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671321189
    }
]