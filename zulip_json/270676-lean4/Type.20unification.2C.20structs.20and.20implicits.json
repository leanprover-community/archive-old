[
    {
        "content": "<p>Dear all, I'm writing a generic stream library to power a generic megaparsec clone.</p>\n<p>My path of dropping the openness ambition took me from multiparameter typeclasses with associated types and associated instances all the way down to having a really closed system where I just offer one stream iterator type per taxonomy of streams and stream-like things, which is highly polymorphic. I don't want to sacrifice polymorphism for a number of reasons, not least of which is that I want to have the same user code to be able to be launched against real world and against some testing monads. So yes, I want my stuff to be polymorphic, but I'm okay for my stuff to be closed, i.e. non-extendable by the user.</p>\n<p>However, even my least ambitious attempt failed the moment I've started introducing constraints. Here is a clean, representative example of what I mean: <a href=\"https://github.com/yatima-inc/straume/blob/cognivore/generic-programming-in-lean-is-pain/Straume/WonkyConstraint.lean#L24\">https://github.com/yatima-inc/straume/blob/cognivore/generic-programming-in-lean-is-pain/Straume/WonkyConstraint.lean#L24</a></p>",
        "id": 289588967,
        "sender_full_name": "cognivore",
        "timestamp": 1657803914
    },
    {
        "content": "<p>Ideally, I would like to be able to just say <code>def flipTakeN := fun n x =&gt; takeN x n</code> and <code>def take1 := flipTakeN 1</code> or <code>def take1 := fun x =&gt; takeN x 1</code>.</p>\n<p>Note that <code>takeN</code> implementation is replaced by a dummy implementation, just to be sure that there is an implementation for that type.</p>",
        "id": 289589169,
        "sender_full_name": "cognivore",
        "timestamp": 1657804036
    },
    {
        "content": "<p>Note: the link above takes you to a self-contained code, ready to be copied and pasted to a clean Lean file</p>",
        "id": 289589823,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657804428
    },
    {
        "content": "<p>I made it even shorter!</p>",
        "id": 289590326,
        "sender_full_name": "cognivore",
        "timestamp": 1657804673
    },
    {
        "content": "<p>You say that you don't want to sacrifice polymorphism, but do you definitely need <em>universe</em> polymorphism as well? It's always easier to assume everything is in <code>Type</code> if that works for all your use cases.</p>",
        "id": 289590406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657804701
    },
    {
        "content": "<p>That's a tough one! While working on Megaparsec, I sacrificed universe polymorphism, and then there was a higher universe object that I couldn't work into the system without bringing it back. Sadly I don't remember particular details, but I think it was some associated type port.</p>",
        "id": 289590523,
        "sender_full_name": "cognivore",
        "timestamp": 1657804788
    },
    {
        "content": "<p>I was considering sacrificing it yesterday, when I hit this block, but after that experience, I'm kind of scared :)</p>",
        "id": 289590595,
        "sender_full_name": "cognivore",
        "timestamp": 1657804814
    },
    {
        "content": "<p>Thanks for encouraging to explore it, I'll try and see if it helps.</p>",
        "id": 289590628,
        "sender_full_name": "cognivore",
        "timestamp": 1657804845
    },
    {
        "content": "<p>The current <code>bind</code> constrains you to a single universe anyway, though see also the concurrent thread <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a></p>",
        "id": 289591191,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657805149
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 289591384,
        "sender_full_name": "cognivore",
        "timestamp": 1657805253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> thanks for \"un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ing\" the question, kinda! However I think the original question still holds: why doesn't <span class=\"user-mention\" data-user-id=\"507516\">@cognivore</span>'s example typecheck?</p>",
        "id": 289591833,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657805454
    },
    {
        "content": "<p>Sorry I was thanking you for your answers but I didn't mean to ask that question directly to you. Anyone's insights are welcome <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 289592634,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657805820
    }
]