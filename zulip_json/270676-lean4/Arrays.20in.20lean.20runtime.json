[
    {
        "content": "<p>I was wondering if arrays in the lean4 runtime are all boxed or if they used an optimal layout based on the argument type?</p>",
        "id": 286159002,
        "sender_full_name": "Callan McGill",
        "timestamp": 1655261809
    },
    {
        "content": "<p>scalar arrays (e.g. <code>Array Byte</code>, <code>Array Float</code>, ...) have specialized array impls, but everything else is an array of <code>lean_object*</code>s. so if you have a generic function operating on generic arrays, everything will end up in a <code>lean_object*</code> box which may not be the optimal layout</p>",
        "id": 286159275,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655262110
    },
    {
        "content": "<p>so just to check, if I used a something like <code>Array.sequenceMap</code> over a scalar array, that is going to produce reasonable code?</p>",
        "id": 286159462,
        "sender_full_name": "Callan McGill",
        "timestamp": 1655262332
    },
    {
        "content": "<p>I have no clue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> a lot of things can get in the way of producing optimized bytecode. From what I've heard, getting leanc to produce a very optimized binary can be hard</p>",
        "id": 286159616,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655262499
    },
    {
        "content": "<p>I don't think <code>Array Byte</code> has a specialized layout. (Instead there is a separate type <code>ByteArray</code>)</p>",
        "id": 286159730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655262663
    },
    {
        "content": "<p><code>Array A</code> always has boxed cells</p>",
        "id": 286159743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655262679
    },
    {
        "content": "<p>Many array functions are <code>@[specialize]</code>d to the types they get used at though, so it's not always generic code</p>",
        "id": 286159844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655262774
    },
    {
        "content": "<p>the best way to find out is to just compile it and inspect the generated C code (which isn't too hard to follow once you get used to it)</p>",
        "id": 286159868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655262831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Arrays.20in.20lean.20runtime/near/286159730\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>Array Byte</code> has a specialized layout. (Instead there is a separate type <code>ByteArray</code>)</p>\n</blockquote>\n<p>Ahh, I thought the type constructor itself was specialized. Sorry for the misinformation <span class=\"user-mention\" data-user-id=\"225901\">@Callan McGill</span></p>",
        "id": 286159885,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655262843
    },
    {
        "content": "<p>No worries, it was otherwise useful info.</p>",
        "id": 286160012,
        "sender_full_name": "Callan McGill",
        "timestamp": 1655262966
    },
    {
        "content": "<p>There are separate <code>ByteArray</code> and <code>FloatArray</code> types if you need unboxed arrays.</p>",
        "id": 286177391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655280122
    }
]