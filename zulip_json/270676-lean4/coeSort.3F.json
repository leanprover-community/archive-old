[
    {
        "content": "<p>What are the cases where I should have to insert <code>coeSort</code> manually?  (I thought Lean was supposed to automatically insert coercions to sort?)</p>",
        "id": 230046117,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615562443
    },
    {
        "content": "<p>You shouldn't... is there a specific case that came up where you did?</p>",
        "id": 230046589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562611
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"n\">ff</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  g ff</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  ff</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  foo : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Sort ?u.35 : Type ?u.35</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 230048345,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615563229
    },
    {
        "content": "<p>Should I report this as a bug?  (I assume the issue is that sort coercion search get triggered in places known statically to contain a sort, but at locations where type inference results in the sort constraint, instead non-sort coercion search gets triggered only if there are no metavars.)</p>",
        "id": 230048671,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615563334
    },
    {
        "content": "<p>Ah, well that's a <code>Coe</code> to <code>Sort</code>, not a <code>CoeSort</code> ;)</p>",
        "id": 230049773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563727
    },
    {
        "content": "<p>I think <code>CoeSort</code> is used only when you use a term where a type is expected, like <code>fun a : x =&gt; ..</code> where  <code>x : T</code></p>",
        "id": 230049907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563781
    },
    {
        "content": "<p>If it's just a regular coercion then <code>Coe</code> gets invoked instead, whether the target is <code>Sort</code> or any other <code>T'</code></p>",
        "id": 230050004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563824
    },
    {
        "content": "<p>IIRC there is a typeclass instance turning <code>has_coe_to_sort A</code> instances into <code>has_coe A Sort*</code> instances in lean 3, not sure if that is still happening in lean 4</p>",
        "id": 230050203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563898
    }
]