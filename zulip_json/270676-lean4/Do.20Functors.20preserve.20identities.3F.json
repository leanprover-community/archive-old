[
    {
        "content": "<p>I was reading through <a href=\"https://leanprover.github.io/lean4/doc/monads/functors.lean.html\">the Lean 4 manual entry for <code>Functor</code></a> (which is very nice, by the way!), and noticed that it doesn’t seem to be required that <code>Functor</code>s preserve the identity function. Or is it? If so, where do we provide a proof of that? If not, shouldn’t this be required somehow? Or are <code>Functor</code>s not really functors (though it seems to say so in the docs)?</p>",
        "id": 302331165,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664911348
    },
    {
        "content": "<p>The additional axioms are in the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulFunctor#doc\">docs4#LawfulFunctor</a> typeclass. I think the idea is that it separates the concerns of programs and proofs -- while a program might depend on the axioms of a Functor to be correct, I think it's rare that you need to use the axioms of a functor in the middle of a program.</p>",
        "id": 302331757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664911582
    },
    {
        "content": "<p>This means that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Functor#doc\">docs4#Functor</a> is something more general than a functor, but you're meant to only use it for actual functors.</p>",
        "id": 302331863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664911632
    },
    {
        "content": "<p>Hmm, ok…is that a more typical definition for functional programmers? That would make sense…it is a bit of a gotcha coming from the math side, though! I might want to suggest a parenthetical be thrown into the part of the lean manual that says it’s the same as a categorical functor, like “(with the exception that a <code>Functor</code> in this context is not required to preserve identities)” or something.</p>",
        "id": 302332919,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664912037
    },
    {
        "content": "<p>(Oh wait, is the manual contributable-to? It’s a minor change but maybe I could PR it…)</p>",
        "id": 302333194,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664912155
    },
    {
        "content": "<p>Lean 3's mathlib has both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor\">docs#functor</a> (with its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_functor\">docs#is_lawful_functor</a>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor\">docs#category_theory.functor</a></p>\n<p>The first isn't really used in math as far as I am aware</p>",
        "id": 302333412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664912249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Do.20Functors.20preserve.20identities.3F/near/302333194\">said</a>:</p>\n<blockquote>\n<p>(Oh wait, is the manual contributable-to? It’s a minor change but maybe I could PR it…)</p>\n</blockquote>\n<p>My understanding is that you can contribute to it! <a href=\"https://github.com/leanprover/lean4/blob/master/doc/monads/functors.lean\">https://github.com/leanprover/lean4/blob/master/doc/monads/functors.lean</a> (I believe <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> wrote these sections)</p>",
        "id": 302333833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664912411
    },
    {
        "content": "<p>Anyway, it’s neat to know that <code>LawfulFunctor</code> is there if I need it, so thanks!</p>\n<p>Practically, if I define something as an instance of <code>LawfulFunctor</code>, can I feed it to everything that requires a <code>Functor</code>? (Still learning how classes work…part of me would expect to see an <code>extends</code> somewhere in the source, but since I don’t, I’m not really sure.)</p>",
        "id": 302335080,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664912886
    },
    {
        "content": "<p>The <code>LawfulFunctor</code> class is using a pattern where it takes the <code>[Functor F]</code> as an additional argument. That way the data of the functor is not actually part of the class, and it's free to be a <code>Prop</code>. A tradeoff is that to define a lawful functor you have to first define the <code>Functor</code> instance and then follow up with the <code>LawfulFunctor</code> instance.</p>",
        "id": 302338641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664914206
    },
    {
        "content": "<p>Oh, I see…I would have thought it would be called <code>isLawfulFunctor</code> or something! Are there conventions in Lean for naming <code>Prop</code>s? Might it make sense to instead have <code>LawfulFunctor</code> be a typeclass that extends <code>Functor</code> with an inhabitant of <code>isLawfulFunctor</code>? Or is that bad/unnecessary/unconventional in Lean for some reason?</p>",
        "id": 302341104,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664915260
    },
    {
        "content": "<p>I totally agree that these prop classes should all be called <code>is_...</code>. This is apparently what's done in Isabelle and it's a very easy way to avoid confusion.</p>",
        "id": 302341903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664915535
    },
    {
        "content": "<p>Convention <code>Prop</code>osal: natural-language-named prop classes should start with a present-tense third person singular verb, such as <code>Is</code>, <code>Has</code>, or a more specific one suited to the context. Linguistically, this means the type is read as a statement, and therefore interpreted as a proposition-as-type which can only sensibly be inhabited by (a proof of its own) truth—instead of a noun phrase, which we expect to be inhabited by data which <em>is</em> that noun phrase.</p>",
        "id": 302346367,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664917257
    }
]