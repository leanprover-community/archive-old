[
    {
        "content": "<p>In Lake, I am trying to take the hash of a binary file  -- in particular, the lean executable (for <a href=\"https://github.com/leanprover/lake/issues/23\">#23</a>) -- but this appears infeasible as there is no <code>Hashable ByteArray</code> instance. As such, I cannot <code>hash</code> the result of <code>IO.FS.readBinFile</code>. Is there some better approach I am missing?</p>",
        "id": 258047233,
        "sender_full_name": "Mac",
        "timestamp": 1634570903
    },
    {
        "content": "<p>My current workaround is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">computeByteHash</span> <span class=\"o\">(</span><span class=\"n\">bytes</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"n\">bytes.toList.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"mi\">1723</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mixHash</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">b.toNat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I imagine this is quite inefficient</p>",
        "id": 258049451,
        "sender_full_name": "Mac",
        "timestamp": 1634571738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I will try to improve the <code>ByteArray</code> primitives.</p>",
        "id": 258070297,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634579341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I pushed new primitives for <code>ByteArray</code> and other goodies.<br>\nNow, the main loop of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">computeByteHash</span> <span class=\"o\">(</span><span class=\"n\">bytes</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"n\">bytes.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"mi\">1723</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mixHash</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">b.toNat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is implemented by the following IR</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ByteArray.foldlMUnsafe.fold._at.computeByteHash._spec_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">USize.decEq</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.uget</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"bp\">◾;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">UInt8.toNat</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.ofNat</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">mixHash</span> <span class=\"n\">x_4</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.add</span> <span class=\"n\">x_2</span> <span class=\"n\">x_10</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.foldlMUnsafe.fold._at.computeByteHash._spec_1</span> <span class=\"n\">x_1</span> <span class=\"n\">x_11</span> <span class=\"n\">x_3</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_12</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n</code></pre></div>\n<p>If the performance is not good enough, I see two options for improving it:<br>\n1- We add primitives for reading <code>UInt64</code> (and <code>UInt32</code>, <code>UInt16</code>) from a <code>ByteArray</code><br>\n2- We implement the hash function for ByteArray in C.</p>\n<p>Option 1 is my preferred choice right now.</p>",
        "id": 258120894,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634601679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> cool! </p>\n<p>The one thing that appears missing to me in that solution is a  <code>Hashable</code> instance for<code>UInt8</code> (and <code>UInt16</code>, <code>UInt31</code>, etc.) so that the byte isn't converted to/from a <code>Nat</code> for hashing.</p>\n<p>Otherwise, the performance is fine and, as this hashing approach is just a stop-gap solution until we have a proper cryptographic hash function for Lean, it may not be worth it to spend much time on this (though I imagine these improvements will also be useful elsewhere).</p>",
        "id": 258122027,
        "sender_full_name": "Mac",
        "timestamp": 1634602455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I will add the missing instances.</p>",
        "id": 258122134,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634602530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Pushed it.</p>",
        "id": 258122734,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634602967
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ByteArray.foldlMUnsafe.fold._at.computeByteHash._spec_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">USize.decEq</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.uget</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"bp\">◾;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">UInt8.toUInt64</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">mixHash</span> <span class=\"n\">x_4</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.add</span> <span class=\"n\">x_2</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.foldlMUnsafe.fold._at.computeByteHash._spec_1</span> <span class=\"n\">x_1</span> <span class=\"n\">x_10</span> <span class=\"n\">x_3</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_11</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n</code></pre></div>",
        "id": 258122739,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634602972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> cool, thanks!</p>",
        "id": 258123045,
        "sender_full_name": "Mac",
        "timestamp": 1634603193
    }
]