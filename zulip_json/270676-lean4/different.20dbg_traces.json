[
    {
        "content": "<p>Dear All,</p>\n<p>I am slowly learning my way around Lean 4 and was wondering about the different options that <code>dbg_trace</code> has.  I could not tell the difference between them.  Below is an example where they give the same output.  What are the difference between them?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"traces\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"with f:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"with s:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"neither f nor s:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trace</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">traces</span>\n<span class=\"c\">/-</span><span class=\"cm\">  The three traces produce the same outputs:</span>\n<span class=\"cm\">with f:</span>\n<span class=\"cm\">Eq.{1} Nat _uniq.588 (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))</span>\n<span class=\"cm\">with s:</span>\n<span class=\"cm\">Eq.{1} Nat _uniq.588 (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))</span>\n<span class=\"cm\">neither f nor s:</span>\n<span class=\"cm\">Eq.{1} Nat _uniq.588 (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 284707276,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153465
    },
    {
        "content": "<p>Those aren't options of <code>dbg_trace</code></p>",
        "id": 284707394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153572
    },
    {
        "content": "<p>Ok, but with those, <code>dbg_trace</code> does not complain, with any other single character it does.</p>",
        "id": 284707442,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153615
    },
    {
        "content": "<p><code>dbg_trace</code> takes a format string, or an expression that implements <code>ToString</code></p>",
        "id": 284707448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153618
    },
    {
        "content": "<p><code>f!\"fmt_string\"</code> is the latter</p>",
        "id": 284707461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153633
    },
    {
        "content": "<p>My guess is that the latter two are equivalent</p>",
        "id": 284707483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153657
    },
    {
        "content": "<p>Ah, are you saying that the <code>f!</code> or <code>s!</code> are attached to the stuff in quotations and have nothing to do with <code>dbg_trace</code>?  So, <code>dbg_trace</code> simply prints out the outcome of <code>f!\"...\"</code> or <code>s!\"...\"</code>?</p>",
        "id": 284707593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153737
    },
    {
        "content": "<p>yes</p>",
        "id": 284707604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153743
    },
    {
        "content": "<p>Ok, so is there a difference between <code>s!\"...\"</code> and <code>f!\"...\"</code>?</p>",
        "id": 284707645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153784
    },
    {
        "content": "<p>the same is also true for <code>m!</code>, but <code>MessageData</code> doesn't implement <code>ToString</code> so it doesn't work</p>",
        "id": 284707652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153790
    },
    {
        "content": "<p>or is this what you answered when you said \"My guess is that the latter two are equivalent\"?</p>",
        "id": 284707701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153805
    },
    {
        "content": "<p><code>f!</code> uses <code>ToFormat</code> instead of <code>ToString</code> and produces a <code>Format</code></p>",
        "id": 284707714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153817
    },
    {
        "content": "<p>I think <code>dbg_trace s!\"str\"</code> and <code>dbg_trace \"str\"</code> are exactly equivalent in terms of the functions that get called</p>",
        "id": 284707750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153848
    },
    {
        "content": "<p><code>dbg_trace f!\"str\"</code> is a bit different since it is being formatted using the <code>ToFormat</code> implementation and then the format is converted to a string</p>",
        "id": 284707781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153876
    },
    {
        "content": "<p>Ok, so in my situation above, <code>ToFormat</code> and <code>ToString</code> produce the same output and <code>dbg_trace</code> traces the same thing on either one of them and also on the plain <code>\"...\"</code>, right?</p>",
        "id": 284707807,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153896
    },
    {
        "content": "<p>But most likely it won't be noticeably different in most cases</p>",
        "id": 284707815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153899
    },
    {
        "content": "<p>right</p>",
        "id": 284707822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153904
    },
    {
        "content": "<p>It's possible that the f! version might result in better looking output when the data is large enough to appear on multiple lines ...?</p>",
        "id": 284707888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153945
    },
    {
        "content": "<p>assuming the type's <code>ToString</code> implementation isn't just defined as <code> x.toFormat.toString</code></p>",
        "id": 284707919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654153977
    },
    {
        "content": "<p>I'll write a longet goal and see if it prints differently.</p>",
        "id": 284707922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654153979
    },
    {
        "content": "<p>I would guess that <code>Expr</code> has a pretty solid formatter implementation so you aren't likely to see a difference there</p>",
        "id": 284707949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154006
    },
    {
        "content": "<p>I'm thinking something like <code>ToString</code> on a <code>List (String x String)</code> or so</p>",
        "id": 284707965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154023
    },
    {
        "content": "<p>indeed, take a look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"traces\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">20</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"with f:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"with s:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"neither f nor s:</span><span class=\"se\">\\n</span><span class=\"s2\">{tgt}\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trace</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">traces</span>\n<span class=\"c1\">-- with f:</span>\n<span class=\"c1\">-- [(0, 0),</span>\n<span class=\"c1\">--  (1, 1),</span>\n<span class=\"c1\">--  (2, 2),</span>\n<span class=\"c1\">--  (3, 3),</span>\n<span class=\"c1\">--  (4, 4),</span>\n<span class=\"c1\">--  (5, 5),</span>\n<span class=\"c1\">--  (6, 6),</span>\n<span class=\"c1\">--  (7, 7),</span>\n<span class=\"c1\">--  (8, 8),</span>\n<span class=\"c1\">--  (9, 9),</span>\n<span class=\"c1\">--  (10, 10),</span>\n<span class=\"c1\">--  (11, 11),</span>\n<span class=\"c1\">--  (12, 12),</span>\n<span class=\"c1\">--  (13, 13),</span>\n<span class=\"c1\">--  (14, 14),</span>\n<span class=\"c1\">--  (15, 15),</span>\n<span class=\"c1\">--  (16, 16),</span>\n<span class=\"c1\">--  (17, 17),</span>\n<span class=\"c1\">--  (18, 18),</span>\n<span class=\"c1\">--  (19, 19)]</span>\n<span class=\"c1\">-- with s:</span>\n<span class=\"c1\">-- [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19)]</span>\n<span class=\"c1\">-- neither f nor s:</span>\n<span class=\"c1\">-- [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19)]</span>\n</code></pre></div>",
        "id": 284708101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154120
    },
    {
        "content": "<p>Ah, thanks!  I was fiddling with strings and did not get anywhere!</p>",
        "id": 284708201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654154191
    },
    {
        "content": "<p>The reason for this is that the <code>ToString (List A)</code> instance doesn't really have enough information to do line wrapping correctly</p>",
        "id": 284708206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154197
    },
    {
        "content": "<p>but if it's <code>ToFormat</code> then it can delay the wrapping decisions to the <code>ToString Format</code> instance</p>",
        "id": 284708223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154221
    },
    {
        "content": "<p>Mario, do you mind if a variation of this goes into the metaprogramming in lean 4 book?</p>",
        "id": 284708240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654154234
    },
    {
        "content": "<p>of course not, please go ahead</p>",
        "id": 284708258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154253
    },
    {
        "content": "<p>Turns out, 15 iterations are sufficient for wrapping!</p>",
        "id": 284708377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654154349
    },
    {
        "content": "<p>you could also do something like <code>List.replicate 5 (List.range 8)</code> which probably looks a bit more tidy</p>",
        "id": 284708589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654154507
    },
    {
        "content": "<p>That's great, thanks!</p>",
        "id": 284708777,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654154631
    },
    {
        "content": "<p>One final detail, then.  Is it possible to observe a difference between <code>s!</code> and <code>neither f nor s</code>?</p>",
        "id": 284708877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654154668
    },
    {
        "content": "<p>No, because <a href=\"https://github.com/leanprover/lean4/blob/32db3161666325b704ef9d4876f9ee9718e03bb2/src/Lean/Elab/BuiltinNotation.lean#L163\">it macro expands to the same thing</a></p>",
        "id": 284709705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654155269
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 284709861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654155375
    },
    {
        "content": "<p>So, just to make sure that I understand.</p>\n<ul>\n<li><code>f!\"...\"</code> produces a Format out of <code>...</code> which then <code>dbg_trace</code> prints, thanks for a <code>Format.toString</code> instance.</li>\n<li><code>s!\"...\"</code> produces a String out of <code>...</code> which then <code>dbg_trace</code> prints.</li>\n<li><code>\"...\"</code> produces a String out of <code>...</code> which then <code>dbg_trace</code> prints <em>passing it via <code>s!</code> first</em>, since this is how <code>dbg_trace</code> is implemented.</li>\n</ul>\n<p>Is this correct?</p>",
        "id": 284711135,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654156416
    },
    {
        "content": "<p>That is, at a minimum, the string passed to <code>dbg_trace</code> gets an <code>s!</code> applied, unless you specify that you want something else?</p>",
        "id": 284711218,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654156473
    },
    {
        "content": "<p><a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/pull/26/files\">#26</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 284714612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654158713
    },
    {
        "content": "<p>The only function of <code>s!</code> is to transform <code>s!\"bla {x} bla\"</code> to <code>(\"bla \" ++ toString x ++ \" bla\")</code></p>",
        "id": 284717318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654160411
    },
    {
        "content": "<p><code>f!</code> does the same thing but with <code>toFormat</code> instead of <code>toString</code> and the append instance on <code>Format</code></p>",
        "id": 284717391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654160451
    },
    {
        "content": "<p>That is, these macros are all just to make it easier to use interpolated strings where possible, since otherwise <code>dbg_trace \"foo {x}\"</code> would actually print <code>\"foo {x}\"</code> which isn't what we want</p>",
        "id": 284717545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654160528
    },
    {
        "content": "<p>Ok, thanks for the explanation!</p>\n<p>I feel very unsure about these things and cannot always understand the source code, so I value and appreciate very much these confirmations and corrections!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 284718874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654161381
    }
]