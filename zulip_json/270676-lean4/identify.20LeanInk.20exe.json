[
    {
        "content": "<p>I'm trying to use <a href=\"https://github.com/leanprover/LeanInk\">LeanInk</a>.  I think I must be using the wrong <code>leanInk</code>.  When I try to use leanInk on one of the <a href=\"https://github.com/leanprover/LeanInk/tree/main/test/playground\">tests provided</a>, either with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">leanInk</span> <span class=\"n\">a</span> <span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">Simple.lean</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span> <span class=\"n\">a</span> <span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">Simple.lean</span>\n</code></pre></div>\n<p>I get almost nothing out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">Simple.lean.leanInk</span>\n<span class=\"o\">[{</span><span class=\"s2\">\"contents\"</span><span class=\"o\">:</span><span class=\"s2\">\"def add (x y : Nat) := x + y\"</span><span class=\"o\">,</span><span class=\"s2\">\"_type\"</span><span class=\"o\">:</span><span class=\"s2\">\"text\"</span><span class=\"o\">}]</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>But the test script passes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">script</span> <span class=\"n\">run</span> <span class=\"n\">tests</span>\n<span class=\"n\">Running</span> <span class=\"n\">diff</span> <span class=\"n\">tests</span> <span class=\"n\">for</span> <span class=\"n\">leanInk</span>\n<span class=\"n\">Running</span> <span class=\"n\">test</span> <span class=\"bp\">./</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">bench</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">using</span> <span class=\"n\">lake...</span>\n  <span class=\"n\">SUCCESS</span>\n<span class=\"n\">Running</span> <span class=\"n\">test</span> <span class=\"bp\">./</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">playground_2.lean...</span>\n  <span class=\"n\">SUCCESS</span>\n<span class=\"n\">Running</span> <span class=\"n\">test</span> <span class=\"bp\">./</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">infoTree.lean...</span>\n  <span class=\"n\">SUCCESS</span>\n<span class=\"n\">Running</span> <span class=\"n\">test</span> <span class=\"bp\">./</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">playground_3.lean...</span>\n  <span class=\"n\">SUCCESS</span>\n<span class=\"n\">Running</span> <span class=\"n\">test</span> <span class=\"bp\">./</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">Simple.lean...</span>\n  <span class=\"n\">SUCCESS</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>and after running the test script the <code>Simple.lean.leanInk</code> file also looks correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">playground</span><span class=\"bp\">/</span><span class=\"n\">Simple.lean.leanInk</span>\n<span class=\"o\">[{</span><span class=\"s2\">\"contents\"</span><span class=\"o\">:</span>\n  <span class=\"o\">[{</span><span class=\"s2\">\"typeinfo\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"semanticType\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Keyword\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"raw\"</span><span class=\"o\">:</span> <span class=\"s2\">\"def\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"link\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"docstring\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"_type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"token\"</span><span class=\"o\">},</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"typeinfo\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"semanticType\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"raw\"</span><span class=\"o\">:</span> <span class=\"s2\">\" \"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"link\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"docstring\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"_type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"token\"</span><span class=\"o\">},</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"typeinfo\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Nat → Nat → Nat\"</span><span class=\"o\">,</span> <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"_type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"typeinfo\"</span><span class=\"o\">},</span>\n    <span class=\"s2\">\"semanticType\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Name.Variable\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"raw\"</span><span class=\"o\">:</span> <span class=\"s2\">\"add\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"link\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"docstring\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"_type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"token\"</span><span class=\"o\">},</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"typeinfo\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"semanticType\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 306561597,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666916463
    },
    {
        "content": "<p>Could someone help me figure out from the <a href=\"https://github.com/leanprover/LeanInk/blob/main/lakefile.lean\">test script</a> where it is finding its good <code>leanInk</code>, so that I can also use that one?</p>",
        "id": 306561701,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666916535
    },
    {
        "content": "<p>Not sure if this helps you for what you are doing or not if you are just experimenting, but I literally just set up <code>doc-gen4</code> (which builds leanInk files by default) on a project and it was fairly straightforward following <a href=\"https://github.com/leanprover/doc-gen4\">https://github.com/leanprover/doc-gen4</a>:<br>\nIn the <code>lakefile.lean</code> I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- dev is so not everyone has to build it</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>then ran</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">build</span> <span class=\"n\">MyPackageName</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n</code></pre></div>\n<p>and in <code>build/doc</code> I have a nice copy of dec-gen4 with links to the leanInk version of all my files</p>",
        "id": 306562367,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666917103
    },
    {
        "content": "<p>The <code>master</code> LeanInk supports tactic  infos only. doc-gen4 and the Lean docs use a fork that adds term information.</p>",
        "id": 306570554,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666920171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, thanks for the reply.  Since the tests seem to be working correctly, are you saying that somehow the tests are obtaining and running a fork of LeanInk?</p>",
        "id": 306570655,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666920283
    },
    {
        "content": "<p>Oh I completely missed that you were running the same file twice. In that case you're just missing command line arguments enabling the extra term info: <a href=\"https://github.com/leanprover/LeanInk/blob/main/lakefile.lean#L26\">https://github.com/leanprover/LeanInk/blob/main/lakefile.lean#L26</a></p>",
        "id": 306570896,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666920540
    },
    {
        "content": "<p>My comments above were also wrong: it's Alectryon we use a fork of for displaying term info, not LeanInk. I shouldn't answer question from my phone on vacation!</p>",
        "id": 306571054,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666920625
    },
    {
        "content": "<p>Aha!  Indeed,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>% leanInk a test/playground/Simple.lean --x-enable-type-info --x-enable-docStrings --x-enable-semantic-token --prettify-output\n</code></pre></div>\n<p>gives exactly the same output as the <code>expected</code> file records.  Thanks!</p>",
        "id": 306571328,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666920868
    }
]