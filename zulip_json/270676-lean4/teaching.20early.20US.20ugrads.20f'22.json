[
    {
        "content": "<p>I am teaching an intro to proofs for math majors this fall (2022). This is my second time. The previous time I incorporated Lean 3 following <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> 's course at CMU <a href=\"https://leanprover.github.io/logic_and_proof/\">Logic and proof</a>. I wanted to get a communal sense of moving to Lean 4 for this. (Perhaps mainly for those already familiar with Logic and Proof) What are the main gaps I would need to fill in at the moment?</p>",
        "id": 292050942,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659637802
    },
    {
        "content": "<p>I don't see what could be missing. If I remember correctly this book doesn't use mathlib at all. However you probably won't gain much by switching to Lean 4. Students won't have to remember to use commas but they will fail because of whitespace sensitivity.</p>",
        "id": 292054344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659639557
    },
    {
        "content": "<p>There is a lot of <code>have</code>, <code>assume</code>, <code>suffices</code>, <code>show</code> <code>from</code>. Are these implemented?</p>",
        "id": 292054520,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659639646
    },
    {
        "content": "<p>Of course!</p>",
        "id": 292054614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659639681
    },
    {
        "content": "<p>Why are you following this book for math majors? It's really targetting computer science people.</p>",
        "id": 292054828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659639750
    },
    {
        "content": "<p>Really? I didn't get that feeling.</p>",
        "id": 292054922,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659639805
    },
    {
        "content": "<p>The student population for this course probably does not exist in Europe. These are usually fresh from high school who really only have seen calculus as math.</p>",
        "id": 292055094,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659639890
    },
    {
        "content": "<p>It puts a lot of emphasis on pure logic.</p>",
        "id": 292055130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659639904
    },
    {
        "content": "<p>That being said, the majority of enrollment is from students that are doing CS for their major and math for a double or minor</p>",
        "id": 292055180,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659639922
    },
    {
        "content": "<p>In France the first 10 chapters would never be taught in any form to a math student.</p>",
        "id": 292055370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659639995
    },
    {
        "content": "<p>The first 10 chapters form the \"standard\" for an intro to the major course in the US.</p>",
        "id": 292055477,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640045
    },
    {
        "content": "<p>What you do after that is gravy</p>",
        "id": 292055520,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640062
    },
    {
        "content": "<p>We get some very talented students but the baseline for knowledge is much lower than elsewhere</p>",
        "id": 292055702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640173
    },
    {
        "content": "<p>The other text I supplemented with was <a href=\"https://infinitedescent.xyz/dl/infdesc.pdf\">Infinite descent</a> which follows a similar structure with less emphasis on natural deduction</p>",
        "id": 292055841,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640244
    },
    {
        "content": "<p>It's not a baseline issue. Math students in France never learn this at all, from birth to death.</p>",
        "id": 292056732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659640732
    },
    {
        "content": "<p>Sure but they are exposed it to before they meet you, right?</p>",
        "id": 292056782,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640766
    },
    {
        "content": "<p>You mean before being born? No.</p>",
        "id": 292056995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659640869
    },
    {
        "content": "<p>Before I started using Lean I had never heard \"natural deduction\". I may have heard \"first order logic\" logic but I'm not sure. I never heard \"semantic\" in any math-related context.</p>",
        "id": 292057236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659640990
    },
    {
        "content": "<p>I guess I need to kick the tires a bit.</p>",
        "id": 292060571,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659642473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, just for reference, I teach in the US (and did undergraduate and graduate school here), and I agree with Patrick. The first 10 chapters are full of a bunch of things that are not frequently taught to math undergraduates. For example, most students (nay, I would argue most mathematicians I know) don't understand the distinction between natural deduction and classical reasoning (although they may have some idea that there is a thing called constructivism and maybe they have heard of intuitionist logic). Most students never hear about soundness and completeness (except perhaps in the context of Gödel's theorem, but even then, they probably can't explain what \"completeness\" means here).</p>\n<p>That being said, most intro to proof courses I have seen in the US do spend a few weeks at the beginning of the semester covering the basics of propositional and first-order logic.</p>",
        "id": 292064786,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659644474
    },
    {
        "content": "<p>I should have been more precise. From my experience, the core of such a course is </p>\n<ul>\n<li>propositional and predicate logic</li>\n<li>sets </li>\n<li>functions </li>\n<li>relations</li>\n</ul>\n<p>Natural deduction is less common I agree. Classical reasoning vs other logics is generally a comment in passing as is soundness and completeness.</p>",
        "id": 292065189,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659644673
    },
    {
        "content": "<p>Is this fair?</p>",
        "id": 292065449,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659644786
    },
    {
        "content": "<p>I certainly teach sets, functions and relations to students part of their intro to proof course which they do the moment they walk through the doors. But, like Patrick, I've never learnt or taught natural deduction, and I only heard about the concept of 1st order logic and the word \"semantic\" because I did the optional 3rd year logic and set theory course.</p>",
        "id": 292066050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659645060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292065189\">said</a>:</p>\n<blockquote>\n<p>I should have been more precise. From my experience, the core of such a course is </p>\n<ul>\n<li>propositional and predicate logic</li>\n<li>sets </li>\n<li>functions </li>\n<li>relations</li>\n</ul>\n<p>Natural deduction is less common I agree. Classical reasoning vs other logics is generally a comment in passing as is soundness and completeness.</p>\n</blockquote>\n<p>Only the first item is part of the first 10 chapters of Logic and proofs I was talking about.</p>",
        "id": 292069277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659646779
    },
    {
        "content": "<p>Of course the last three items (sets, functions and relations) are taught in math departments in France and UK.</p>",
        "id": 292069361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659646814
    },
    {
        "content": "<p>But this comes after Chapter 10 in that book, hence my initial remark.</p>",
        "id": 292069418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659646839
    },
    {
        "content": "<p>About propositional and predicate logic, my experience is that an abstract treatment of these don't help students at all because it is very hard to transfer to practice in everyday mathematics.</p>",
        "id": 292069500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659646887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> </p>\n<blockquote>\n<p>distinction between natural deduction and classical reasoning </p>\n</blockquote>\n<p>What distinction do you mean? Classical reasoning makes perfect sense for natural deduction -  see 5.1 in <a href=\"https://leanprover.github.io/logic_and_proof/classical_reasoning.html#proof-by-contradiction\">Logic and Proof</a>. Natural deduction can be both classical or intuitionistic, the difference is including or excluding one rule.</p>\n<p>I think I know what you mean though. Nevertheless, proof-by-contradiction is a standard topic in intro-to-proofs courses in the US. As a backbone, many such courses use (slightly disguised) forms of natural deduction or variants, and very few use Hilbert style proofs.</p>",
        "id": 292069551,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1659646918
    },
    {
        "content": "<p>In my course I remove abstract logic exercises every year (not sure about next year: maybe I don't have any of them left to remove)</p>",
        "id": 292069619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659646942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Have you looked at Dan Velleman's <em>How to prove it?</em></p>",
        "id": 292069751,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1659647037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292069551\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> </p>\n<blockquote>\n<p>distinction between natural deduction and classical reasoning <br>\n</p>\n</blockquote>\n</blockquote>\n<p>I think this is <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> but you almost convinced me it was me :)</p>",
        "id": 292069848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659647084
    },
    {
        "content": "<p>I think I did but I don't remember what I thought about it. However I've looked at many such books and I couldn't find anything that helped for my course.</p>",
        "id": 292069860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659647090
    },
    {
        "content": "<p>And now I should go to bed.</p>",
        "id": 292069898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659647111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> This fall, I'll be focused on working on two other textbooks -- <em>Logic and Mechanized Reasoning</em> and <em>Mathematics in Lean</em>, but I'd love to see <em>Logic and Proof</em> ported to Lean 4 and updated to be more useful for teaching. </p>\n<p>My co-authors (<span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>) might have other views, but I am not wedded to the prominence of logic. I think seeing some logic is generally helpful: if helps students understand formalism and what is going on under the hood, it helps them think about the way the form of the hypotheses and goal structure a proof, and it is generally useful for applications to CS -- programming and using database queries and so on. But I would not be sorry to see natural deduction go or the focus of logic cut back. It's no fun grading natural deduction proofs, and Lean does a better job at teaching formal deduction. </p>\n<p>In any case, whatever the role of logic, Rob and Floris and I (and <span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>) have come to the conclusion that it would be more useful to move from term mode to tactic mode, because (1) the latter are easier to learn, (2) it's easier to build more advanced proofs on that, and (3) it's the norm for mathlib. I don't think it would make a huge difference to the exposition -- instead of telling students to write <code>or.elim h ...</code> we'd tell them to write <code>cases h</code> and instead of writing <code>or.inl</code> they would write <code>left</code>, etc.</p>\n<p>One issue that arises is that it was really helpful in the past that students didn't have to install Lean to do the homework assignments, since they could use the browser version of Lean. There currently is no version of Lean 4 that runs in the browser, though we have had success in having students use Lean using Gitpod.</p>\n<p>Anyhow, I'll be free from teaching in the spring and I can invest effort in porting L&amp;P to Lean 4 then. If there is anything I can do in the meanwhile that would be helpful, let me know.</p>",
        "id": 292069950,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1659647142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>  Yes, you're right! Sorry about the confusion!</p>",
        "id": 292070036,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1659647172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292069950\">said</a>:</p>\n<blockquote>\n<p>In any case, whatever the role of logic, Rob and Floris and I (and <span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span>) have come to the conclusion that it would be more useful to move from term mode to tactic mode, because (1) the latter are easier to learn, (2) it's easier to build more advanced proofs on that, and (3) it's the norm for mathlib. I don't think it would make a huge difference to the exposition -- instead of telling students to write <code>or.elim h ...</code> we'd tell them to write <code>cases h</code> and instead of writing <code>or.inl</code> they would write <code>left</code>, etc.</p>\n</blockquote>\n<p>Interesting. To my eye, sugaring the syntax to resemble natural language would have the most benefit at this level.</p>",
        "id": 292070696,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659647566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Dan's book is great and much closer to what I've seen in your course notes than you might think. Another important difference is that <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> is very strongly interested in Lean and can be found here on Zulip from time to time. (Sorry for putting you on the spot Dan!)</p>",
        "id": 292070842,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1659647648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292069950\">said</a>:</p>\n<blockquote>\n<p>One issue that arises is that it was really helpful in the past that students didn't have to install Lean to do the homework assignments, since they could use the browser version of Lean. There currently is no version of Lean 4 that runs in the browser, though we have had success in having students use Lean using Gitpod.</p>\n</blockquote>\n<p>Yes I cannot assume that students have acquired great technical sophistication. The in-browser version of Lean is almost perfect for the level of use in the course. This is the main hold up in my mind right now</p>",
        "id": 292070897,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659647691
    },
    {
        "content": "<p>In my experience natural language syntax is slightly harder to learn but much better to transfer to paper. You know about lean-verbose right?</p>",
        "id": 292070952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659647729
    },
    {
        "content": "<p>Yes and <span aria-label=\"in love\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"in love\">:in_love:</span></p>",
        "id": 292071062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659647797
    },
    {
        "content": "<p>About installing Lean: do you really expect such young students to work at home? If they work only in a computer room in your university then everything becomes simpler.</p>",
        "id": 292071285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659647959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> yes, sorry, I mixed up the terminology myself! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 292071406,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659648032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> If you're still interested in using <em>Logic and Proof</em>, my plan is to have updated the first 10 chapters to Lean 4 by early October. And once the update process gets going, subsequent chapter may not take too long.</p>",
        "id": 292071428,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1659648048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Awesome! My semester starts in two weeks though. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 292071602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659648155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292071285\">said</a>:</p>\n<blockquote>\n<p>About installing Lean: do you really expect such young students to work at home? If they work only in a computer room in your university then everything becomes simpler.</p>\n</blockquote>\n<p>The plan is for group work in class with them finishing outside of the course if necessary.</p>",
        "id": 292071802,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659648265
    },
    {
        "content": "<p>I am fortunate to have a small course.</p>",
        "id": 292071869,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659648303
    },
    {
        "content": "<blockquote>\n<p>To my eye, sugaring the syntax to resemble natural language would have the most benefit at this level.</p>\n</blockquote>\n<p>Well, <code>cases</code> is reasonably close to \"There are two cases to consider. Case one: ... Case two: ...\" In general, you want to overall structure of a formal proof to be similar to the structure of an informal proof, and it's not clear to me that it is any harder to approximate it with a tactic proof than with a term proof.</p>\n<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Thanks for doing this! What type of online textbook format would be most useful, given that there is no web-browser version of Lean 4 yet?</p>",
        "id": 292072827,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1659648827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/270676-lean4/topic/teaching.20early.20US.20ugrads.20f'22/near/292072827\">said</a>:</p>\n<blockquote>\n<p>What type of online textbook format would be most useful, given that there is no web-browser version of Lean 4 yet?</p>\n</blockquote>\n<p>I was just going to go for the <a href=\"https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html\">readthedocs sphinx template</a> that you've mentioned before. I'll be using the book for a computer science course, so I'll just tell the students to install Lean.</p>",
        "id": 292074195,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1659649758
    },
    {
        "content": "<p>What is the challenge for making Gitpod work with Lean4?</p>",
        "id": 292079938,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659653311
    },
    {
        "content": "<p>There is no challenge, it worked for us without issues for two years in a row <a href=\"https://github.com/IPDSnelting/tba-2022\">https://github.com/IPDSnelting/tba-2022</a></p>",
        "id": 292122492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659687959
    },
    {
        "content": "<p>I just want to summarize my understanding to make it easier to locate in the future. </p>\n<p>From this dicussion, it seems that if </p>\n<ol>\n<li>you are willing to teach your students git /assume they know it and </li>\n<li>you won't go over 50 hours/month (most likely accidentally)</li>\n</ol>\n<p>then there are really no technical obstructions to using Lean 4 in an intro to proofs course for undergrads.</p>",
        "id": 292150301,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659704493
    },
    {
        "content": "<p>(and that you don't want to teach with/about mathlib)</p>",
        "id": 292150826,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1659704734
    },
    {
        "content": "<p>Everything I needed last time I ran this course with Lean 3 were in core.</p>",
        "id": 292152357,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659705516
    },
    {
        "content": "<p>I don't understand the link between your summary and the previous conversation.</p>",
        "id": 292152958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659705841
    },
    {
        "content": "<p>Are you talking about gitpod? GitPod doesn't require Git and can use any library. Or are you commenting on the absence of mathlib in Lean4?</p>",
        "id": 292153121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659705921
    },
    {
        "content": "<p>Fair. This was in my mind but was not emphasized. I want to control the environment , as much as possible, students are using so I don't have to deal with setup issues. The web browser version only requires a modern browser to use Lean. </p>\n<p>Without it the best option seems to currently be Gitpod. I guess students don't need to know basic git to use it but at this point I would want to tie into a workflow for automatically grading the assignment. For that they need git.</p>",
        "id": 292153485,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659706120
    },
    {
        "content": "<p>I can confirm that Gitpod is easy with any flavor of Lean. Students get 50 hours free each month, which should be more than enough.</p>",
        "id": 292153812,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1659706304
    },
    {
        "content": "<p>The student developer pack on Github also provides 6 months free of the personal plan (100 hr/month).</p>",
        "id": 292155866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659707239
    },
    {
        "content": "<p>Can you do elementary set theory in Lean 4?  It looks to me like the definitions from Lean 3 in core/init.data.set are not there in Lean 4.  Or am I missing something?  I would think you'd want to do some basic set theory in a proofs course.</p>",
        "id": 292193629,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1659725189
    },
    {
        "content": "<p>They are not there but implementing basic set theory in Lean is quite straight fowrard (and translating the Lean 3 file to Lean 4 by hand would be easy as well)</p>\n<p>Basically the only non trivial thing about is is, what is a set and the answer to that is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and from here you can build everything, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set.inter</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and so on, you of course may want to define additional notation stuff etc. for this as well and also basic API lemmas etc. but all of that is doable right now and doesn't have any dependencies really. Hence we also already have lots of this stuff in mathlib4, specifically here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs4#Set</a></p>",
        "id": 292194321,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659725544
    },
    {
        "content": "<p>For my class, I took a quick run at assembling an autograding setup for my class. The purpose is not so much to catch/deter anything but rather have something I can look at quickly. The output of lean on the file below gets compared with an allowed set of axioms. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Hw</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Print</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collectAxiomsOf</span> <span class=\"o\">(</span><span class=\"n\">constName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">CollectAxioms.collect</span> <span class=\"n\">constName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">s.axioms.toList.map</span> <span class=\"n\">toString</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">collectAxiomsOf</span> <span class=\"bp\">``</span><span class=\"n\">problem1</span>\n</code></pre></div>\n<p>Where <code>Hw.lean</code> contains <code>problem1</code>.</p>",
        "id": 298850384,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1663189162
    },
    {
        "content": "<p>Since GitHub classroom autograding is done purely over stdout, this is enough for me (for this week). But for something like gradescope you want to generate  a json and write that.</p>\n<p>I can also imagine it being done via a lake script or using lspec. </p>\n<p>I welcome people's thoughts.</p>",
        "id": 298851053,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1663189388
    },
    {
        "content": "<p>In IO, you don't have access to the environment, and a default-created one isn't going to have anything in it, which makes it impossible to find axioms or indeed your student's proof. If you want to run this at compile time, then the <code>#eval</code> approach you have now is fine, but if you want to do it at run time (producing a binary) then you need to call the lean frontend to parse your student's file and query the resulting environment.</p>",
        "id": 298893585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663209817
    }
]