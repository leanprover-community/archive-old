[
    {
        "content": "<p>I'm  curious about the <code>deprecated</code> tag. I thought that Lean 4 was still at a stage where deprecated stuff just get removed without warning. Do we have any documentation about that tag?</p>",
        "id": 290735376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658740474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I added a new bullet to the release notes: <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a></p>\n<p>I added <code>[deprecated]</code> yesterday. I added it to make the transition to <a href=\"https://github.com/leanprover/lean4/issues/1346\">https://github.com/leanprover/lean4/issues/1346</a> smooth. <br>\nLast week, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggested we make methods such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.getMVarDecl</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MetavarDecl</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>more \"discoverable\" by making them dot-notation frieldly. That is, we would now use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">Lean.MVarId.getDecl</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MetavarDecl</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>We think this is a good modification. We also want to avoid having duplicate APIs, but we also want to avoid breaking all meta-programs written by the community last week. The <code>[deprecated]</code> attribute is quite convenient for making the transition smooth. Whenever users use a deprecated function, they get a warning message saying how to \"fix\" their code. They may also decide to ignore the message for now.<br>\nI think this is important because it makes sure packages such as Aesop and Quote4 (that were demoed last week) can still be used without modifications.</p>",
        "id": 290790016,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658769010
    },
    {
        "content": "<p>I think it is fine to have aliases in some places without deprecation; dot-notation syntax in particular is one thing that we use the <code>alias</code> command for in mathlib even though we generally avoid aliases. Even though I would probably use <code>MVarId.getDecl</code> more often, I don't think we need to say that <code>getMVarDecl</code> is \"wrong\"; the only annoying bit is having to duplicate the docstring but a command like <code>alias</code> could do that automatically to prevent divergence.</p>",
        "id": 290816090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658782010
    },
    {
        "content": "<p>(For example, <code>le_trans</code> is aliased to <code>has_le.le.trans</code> but it would be pretty weird/nitpicky to require use of the latter)</p>",
        "id": 290816204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658782068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> All functions marked as <code>[deprecated]</code> are dead code in the main repo. They are there (marked as deprecated) just to make sure we have a smooth transition.</p>",
        "id": 290816651,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658782304
    },
    {
        "content": "<p>That said I think a deprecation linter is an essential part of easing migration pains so I'm happy to see it. Deciding when to use it, and how long to keep deprecated things around, is a tricky question, though.</p>",
        "id": 290816660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658782308
    },
    {
        "content": "<p>Not sure how long we will keep them there. The first approximation is to keep them there until all key projects have moved to the new API.</p>",
        "id": 290817076,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658782503
    },
    {
        "content": "<p>It would be great to have an index of Lean4 projects like what the Scala center does with scaladex: <a href=\"https://index.scala-lang.org/\">https://index.scala-lang.org/</a> Then we could have CI to analyze the potential impact of deprecating or changing an API across all indexed Lean4 projects.</p>",
        "id": 290825630,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1658787126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362579\">@Nicolas Rouquette</span> Yes, it would be awesome.</p>",
        "id": 290826367,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658787626
    },
    {
        "content": "<p>Could we get an option to make the <code>deprecated</code> warning an error instead? Imo this would be more convenient than hunting for warnings. (Also, I like this API change!)</p>",
        "id": 290873256,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1658831262
    },
    {
        "content": "<p>I think I've mentioned it before regarding linters, but the simplest option would be one for turning warnings into errors in general</p>",
        "id": 290873924,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658831701
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/d6f0880d1194b304200777cc1a6ef0e5e49a06df\">https://github.com/leanprover/lean4/commit/d6f0880d1194b304200777cc1a6ef0e5e49a06df</a></p>",
        "id": 290886863,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658840368
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 290887668,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1658840783
    }
]