[
    {
        "content": "<p>A small library to help build command line interfaces in Lean 4: <a href=\"https://github.com/mhuisi/lean4-cli\">https://github.com/mhuisi/lean4-cli</a></p>\n<p>I hope that this helps with improving the tooling.</p>",
        "id": 227355925,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1614035769
    },
    {
        "content": "<p>This lib is amazing. Thank you very much for the work <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\nAn idea I just had is to provide a <code>NOOP</code> as syntax sugar for <code>VIA fun _ =&gt; pure 0</code> when you want a command to only have sub-commands and do nothing by itself</p>",
        "id": 288598808,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657059579
    },
    {
        "content": "<p>Another idea... maybe <a href=\"https://github.com/mhuisi/lean4-cli/blob/600d53006a8ba7fb4b225e7f6799fdd392f6e438/Cli/Basic.lean#L936\">this line</a> should use <code>IO.eprintln</code> instead</p>",
        "id": 288606394,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657065662
    },
    {
        "content": "<p>Thanks! These are both good suggestions. I'll push them to the nightly branch soon.</p>",
        "id": 288725225,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1657138850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> We're running into a weird bug </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Cli.Flag.mk</span> <span class=\"s2\">\"p\"</span>\n<span class=\"n\">argument</span>\n  <span class=\"s2\">\"p\"</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I don't believe it's an error on <code>cli</code>'s part, but something strange going on with the typeclass search that is failing to find the <code>A -&gt; Option A</code> coe. The context is too complicated to replicate, so I won't show the code here, but it will work/not work depending randomly (?) on what imports we have. </p>\n<p>Anyways, would it be possible to add a tiny fix making this <code>Option</code> coe explicit? Literally just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expandIdentLiterally</span> <span class=\"n\">flag</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"c1\">-- fix</span>\n<span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">expandIdentLiterally</span> <span class=\"n\">flag</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>in <code>expandFlag</code>.</p>",
        "id": 291975094,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659598785
    },
    {
        "content": "<p>I'll take a closer look later, but at first sight this seems like a reasonable fix (the macro shouldn't generate coercions anyways, I must have missed that one)</p>",
        "id": 291975389,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1659598988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> This should be fixed now. Please let me know if the issue persists.</p>",
        "id": 292041995,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1659633622
    },
    {
        "content": "<p>Thank you! I'll let you know how it goes</p>",
        "id": 292042074,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659633660
    }
]