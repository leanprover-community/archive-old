[
    {
        "content": "<p>One nice thing about the rust <code>panic!</code> macro (and other macros like it) is that it will report the file position of the macro call itself along with the panic message. I'm wondering what it would take to do something like this in lean 4. Here's my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"throw!\"</span><span class=\"bp\">%</span><span class=\"n\">tk</span> <span class=\"n\">interpStr</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkStrLit</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">tk.getPos</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"[?]: \"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"[{x}]: \"</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">interpStr.expandInterpolatedStr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">throwError</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"bp\">$</span><span class=\"n\">str</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">throw</span><span class=\"bp\">!</span><span class=\"s2\">\"nope\"</span>\n                           <span class=\"c1\">-- ^ this is character 343</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- [343]: nope</span>\n</code></pre></div>\n<p>This is okay, but I would much rather get a line number than a byte position in the file, and I'm not sure how to get that info out of <code>MacroM</code></p>",
        "id": 245901525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626217964
    },
    {
        "content": "<p>(it's also not clear to me why the position I get is the beginning of the string instead of the <code>throw!</code> token)</p>",
        "id": 245901596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626218038
    },
    {
        "content": "<p>I wanna say this is currently impossible because <code>MacroM</code> does not contain a <code>FileMap</code>. Probably a way to turn <code>String.Pos</code> into a position could be added to <a href=\"https://github.com/leanprover/lean4/blob/93a3fd14ad6275c49b362d16781a9be082921ebc/src/Init/Prelude.lean#L2126\"><code>Methods</code></a>, but why not use a custom elaborator like <a href=\"https://github.com/leanprover/lean4/blob/93a3fd14ad6275c49b362d16781a9be082921ebc/src/Lean/Elab/BuiltinNotation.lean#L110\"><code>panic!</code></a>?</p>",
        "id": 245905379,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626221510
    },
    {
        "content": "<p>To elaborate on <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  point. The <code>fileMap</code> of a source file is available through an <code>InputContext</code>. Said <code>fileMap</code> has a method <code>toPosition</code> that converts a <code>String.Pos</code> to a <code>Position</code> that consists of a line and column number. An example of this being used in Parsers can be seen here: in <a href=\"https://github.com/leanprover/lean4/blob/93a3fd14ad6275c49b362d16781a9be082921ebc/src/Lean/Parser/Basic.lean#L213-L218\"><code>toErrorMsg</code></a>. Unfortunately, neither the <code>InputContext</code> nor an alternative method of producing <code>Position</code> from <code>String.Pos</code> is available to macros.</p>",
        "id": 245907349,
        "sender_full_name": "Mac",
        "timestamp": 1626223555
    },
    {
        "content": "<p>Okay, this is slightly improved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"throw!\"</span> <span class=\"n\">interpStr</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.getRefPosition</span>\n  <span class=\"k\">let</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkStrLit</span> <span class=\"bp\">$</span> <span class=\"n\">mkErrorStringWithPos</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fileName</span> <span class=\"n\">pos</span> <span class=\"s2\">\"\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">interpStr.expandInterpolatedStr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"o\">))</span>\n  <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">throwError</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"bp\">$</span><span class=\"n\">str</span><span class=\"o\">)))</span> <span class=\"n\">ty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">throw</span><span class=\"bp\">!</span><span class=\"s2\">\"nope\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- &lt;input&gt;:10:24: nope</span>\n</code></pre></div>\n<p>Unfortunately it seems the provided file name is a dummy</p>",
        "id": 245910599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626227218
    },
    {
        "content": "<p>Try running that from the command line :) <code>&lt;input&gt;</code> is used by the LSP server. I guess we can use the real URI there, although sometimes it is a weird virtual one.</p>",
        "id": 245910786,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626227438
    }
]