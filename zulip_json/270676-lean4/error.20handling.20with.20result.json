[
    {
        "content": "<p>I want to have a function that returns a result, instead of panicking,  yet after looking through the mathlib4 docs and the lean4 repo, I couldn't find much use with it. Would someone mind giving an example of using the <code>Result</code> type?</p>",
        "id": 272634708,
        "sender_full_name": "Joseph O",
        "timestamp": 1645411972
    },
    {
        "content": "<p>Do you mean <code>EStateM.Result</code> ? The basic approach is through pattern matching, as they are just plain inductive. You can also use the <code>try ... catch e =&gt;</code> and <code>throw</code> syntax sugar in <code>do</code> blocks (try searching for <code>try</code> in lean source) , which is implemented using the type class <code>MonadExceptOf</code>.</p>\n<p>All three of <code>Result.ok a</code>, <code>pure a</code>, <code>return a</code> will turn <code>a : A</code> into a <code>Result A</code>. And since <code>IO</code> is just a special case of <code>EStateM</code>, any of the IO functions can be an example.</p>",
        "id": 272655813,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645432274
    },
    {
        "content": "<p>Also note that there is top level<code>Except</code> in Lean, which plays the same role as <code>Result</code> in rust.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/EStateM.Result\">docs4#EStateM.Result</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/MonadExceptOf\">docs4#MonadExceptOf</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Except\">docs4#Except</a></p>",
        "id": 272655970,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645432359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20handling.20with.20result/near/272655970\">said</a>:</p>\n<blockquote>\n<p>Also note that there is top level<code>Except</code> in Lean, which plays the same role as <code>Result</code> in rust.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/EStateM.Result\">docs4#EStateM.Result</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/MonadExceptOf\">docs4#MonadExceptOf</a> <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Except\">docs4#Except</a></p>\n</blockquote>\n<p>I think except is what I am looking for. I didn’t plan on using monads for this.</p>",
        "id": 272683200,
        "sender_full_name": "Joseph O",
        "timestamp": 1645447426
    },
    {
        "content": "<p>How could I use except as a function return type? How do I return the error?</p>",
        "id": 272687181,
        "sender_full_name": "Joseph O",
        "timestamp": 1645449707
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.ok</span> <span class=\"n\">n</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Except.error</span> <span class=\"s2\">\"n must be positive\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">pure</span> <span class=\"n\">n</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"n must be positive\"</span>\n</code></pre></div>\n<p>where <code>pure</code> and <code>throw</code> are type class function rather than keywords.</p>",
        "id": 272690684,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645451519
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 272697116,
        "sender_full_name": "Joseph O",
        "timestamp": 1645454697
    },
    {
        "content": "<p>Which should I use? the first or the second?</p>",
        "id": 272697179,
        "sender_full_name": "Joseph O",
        "timestamp": 1645454733
    },
    {
        "content": "<p>Whichever you like. They are actually the same.  As there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Except.pure</span> <span class=\"c1\">-- which is Except.ok</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Except.bind</span>\n  <span class=\"n\">map</span>  <span class=\"o\">:=</span> <span class=\"n\">Except.map</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MonadExceptOf</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">throw</span>    <span class=\"o\">:=</span> <span class=\"n\">Except.error</span>\n  <span class=\"n\">tryCatch</span> <span class=\"o\">:=</span> <span class=\"n\">Except.tryCatch</span>\n</code></pre></div>",
        "id": 272698120,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645455227
    }
]