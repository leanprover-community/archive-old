[
    {
        "content": "<p>I am trying to judge whether two instances are constructed in the same way. The following code works, but is there a better way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AV</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AV_eq</span> <span class=\"o\">(</span><span class=\"n\">av1</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">av2</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">av1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AV.x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">av2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">AV.x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AV.y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">av2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">AV.y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 291470178,
        "sender_full_name": "Yingte Xu",
        "timestamp": 1659243725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518552\">Yingte Xu</span> has marked this topic as resolved.</p>",
        "id": 291470374,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659243988
    },
    {
        "content": "<p>Maybe something like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">AV_eq</span><span class=\"o\">:</span> <span class=\"n\">AV</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AV</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 291471455,
        "sender_full_name": "Tom",
        "timestamp": 1659245546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515083\">Tom</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Judging.20for.20the.20same.20constructor/near/291471455\">said</a>:</p>\n<blockquote>\n<p>Maybe something like this? </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">AV_eq</span><span class=\"o\">:</span> <span class=\"n\">AV</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AV</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Well thanks, that's much more concise. But actually I am wondering whether we can iterate through all the constructors automatically.</p>",
        "id": 291472384,
        "sender_full_name": "Yingte Xu",
        "timestamp": 1659246908
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AV</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AV_eq</span> <span class=\"o\">(</span><span class=\"n\">av1</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">av2</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">av1</span> <span class=\"bp\">==</span> <span class=\"n\">av2</span> <span class=\"c1\">-- or av1 = av2</span>\n</code></pre></div>",
        "id": 291472923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659247476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Judging.20for.20the.20same.20constructor/near/291472923\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AV</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AV_eq</span> <span class=\"o\">(</span><span class=\"n\">av1</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">av2</span> <span class=\"o\">:</span> <span class=\"n\">AV</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">av1</span> <span class=\"bp\">==</span> <span class=\"n\">av2</span> <span class=\"c1\">-- or av1 = av2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That works! Thanks a lot.</p>",
        "id": 291473192,
        "sender_full_name": "Yingte Xu",
        "timestamp": 1659247839
    }
]