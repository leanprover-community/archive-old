[
    {
        "content": "<p>It's not the first time that I needed something like this so I wrote this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapFromList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.insert</span> <span class=\"n\">t.fst</span> <span class=\"n\">t.snd</span><span class=\"o\">)</span> <span class=\"n\">Std.HashMap.empty</span>\n</code></pre></div>\n<p>It allows us to say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">mapFromList</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"one\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"two\"</span><span class=\"o\">)]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">find</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"c1\">-- \"one\"</span>\n</code></pre></div>\n<p>Python has <code>dict(...)</code> and Scala has a <code>Map(bla -&gt; ble, ...)</code> and I'm sure JavaScript has something just as practical.</p>\n<p>Do you guys think it's worth it having a function like that in mathlib4 or maybe in <code>Std</code>?</p>",
        "id": 267786491,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642021706
    },
    {
        "content": "<p>As long as you document what happens when the <code>l.map prod.fst</code> is not <code>nodup</code>.</p>",
        "id": 267787257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642022117
    },
    {
        "content": "<p>Right... eating up a <code>List</code> is a rather rudimentary approach. How could we have a more sophisticated interface in Lean 4? (maybe something that screams in the presence of duplicated keys right away)</p>",
        "id": 267787432,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642022220
    },
    {
        "content": "<p>I think an <code>Std</code> function that overwrites old values at seen keys with new values is worth it, as long as it documents it. You can have another function that ignores new values too. And then a proof that given <code>nodup (l.map prod.fst)</code> the two are the same.</p>",
        "id": 267787657,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642022338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> is there a definition of \"nodup\" in Lean 4 repo? I can't find it</p>",
        "id": 267798686,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642028125
    },
    {
        "content": "<p>I don't know, I haven't seen it. In mathlib3, it's written in a particular way so that it doesn't require decidable equality on the type of element. I guess that doesn't matter for a concrete HashMap, but if you want a <code>list.nodup</code> in full generality, you might want that.</p>",
        "id": 267798858,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642028232
    },
    {
        "content": "<p>Haskell people would probably expect the behavior provided by Data.Map.fromList (<a href=\"https://hackage.haskell.org/package/containers-0.4.0.0/docs/src/Data-Map.html#fromList\">https://hackage.haskell.org/package/containers-0.4.0.0/docs/src/Data-Map.html#fromList</a>), namely to retain the last value in case of duplicate keys.</p>",
        "id": 267799252,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1642028450
    },
    {
        "content": "<p>(Another nice lemma might be that <code>mapFromList_keepFirst l.reverse = mapFromList_keepLast l</code>)</p>",
        "id": 267801461,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642029603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/easy.20HashMap.20instantiation/near/267801461\">said</a>:</p>\n<blockquote>\n<p>(Another nice lemma might be that <code>mapFromList_keepFirst l.reverse = mapFromList_keepLast l</code>)</p>\n</blockquote>\n<p>Yeah that's exactly what I thought. In fact, I thought about implementing the alternative behavior using the reversed list</p>",
        "id": 267806043,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642032174
    },
    {
        "content": "<p>Another design is having <code>keepLast</code> as a boolean auto parameter set as <code>true</code></p>",
        "id": 267806305,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642032329
    },
    {
        "content": "<p>Alright, since the discussion seems to be motivated enough, I created this issue:<br>\n<a href=\"https://github.com/leanprover/lean4/issues/947\">https://github.com/leanprover/lean4/issues/947</a></p>",
        "id": 267809018,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642034168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> I added your suggestion to the issue description <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 267812810,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642037538
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/950\">https://github.com/leanprover/lean4/pull/950</a></p>",
        "id": 267883717,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642087301
    }
]