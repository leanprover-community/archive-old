[
    {
        "content": "<p>I know that in Lean 4, the idea is to use synthetic metavariables so that you can select them by name using <code>case</code> in structured proofs.  And that exact should not produce any new unnamed goals.  However it seems that many tactics fail if the goal contains named/synthetic metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- don't know how to synthesize implicit argument</span>\n  <span class=\"n\">case</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>(I would expect that rfl succeeds here since it doesn't produce any new goals.  This example is of course a bit constructed, but I hope it is plausible that you sometimes want to fill in complicated witnesses using unification.)</p>\n<p>Using refine instead of rfl succeeds, but the result is surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">refine</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- moves ?n *inside* the ?h goal!?</span>\n    <span class=\"n\">case</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>(I would expect that the <code>case h</code> goal is finished after rfl, and that <code>case n</code> works on the same indentation.)</p>\n<p>The issue also appears if you use nested tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- don't know how to synthesize implicit argument</span>\n  <span class=\"n\">case</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>(I would expect that the rfl succeeds since it does not produce any new goals.)</p>",
        "id": 240212860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621959533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Synthetic.20metavariables.20in.20exact/near/240212860\">said</a>:</p>\n<blockquote>\n<p>Using refine instead of rfl succeeds, but the result is surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">refine</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- moves ?n *inside* the ?h goal!?</span>\n    <span class=\"n\">case</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>(I would expect that the <code>case h</code> goal is finished after rfl, and that <code>case n</code> works on the same indentation.)</p>\n</blockquote>\n<p>If I'm not mistaken, the reason <code>refine rfl</code> succeeds is because it can produce new unnamed goals and <em>is doing so here</em>. It just so happens that the goal it produces is the same as <code>?n</code> so it unifies it with that and thus they both get folded into the current proof. Since <code>exact rfl</code> cannot introduce said unnamed goal, it fails.</p>",
        "id": 240217741,
        "sender_full_name": "Mac",
        "timestamp": 1621961618
    },
    {
        "content": "<p>I think the issue is that <code>refine</code> and <code>exact</code> work on all mvars of the term, while Gabriel would expect them to regard only <em>newly</em> introduced mvars</p>",
        "id": 240219532,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621962441
    },
    {
        "content": "<p>Yes, I would expect the check for unassigned metavariables (that exact, rfl, etc. use) to ignore already existing metavariables.</p>",
        "id": 240219984,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621962667
    },
    {
        "content": "<p>Interestingly the existing mvars are actually nonassignable during elaboration of the nested term. That would make it simple to distinguish them, except I don't think it is intended that e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>doesn't work.</p>",
        "id": 240221433,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621963340
    },
    {
        "content": "<p>You're missing a <code>case h =&gt;</code> before the exact, but you're right, I would like the <code>?n</code> to be assignable.</p>",
        "id": 240221796,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621963511
    },
    {
        "content": "<p>Feel free to open issues I'd say :)</p>",
        "id": 240222381,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621963771
    },
    {
        "content": "<p>There are some issues I have found with lean 3 proofs using things like <code>have := bla _; rwa [lem] at this</code> where the first <code>have</code> leaves a lot of metavariables that are unified by the <code>rw</code> and <code>assumption</code>, that may be related to this issue</p>",
        "id": 240222587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621963852
    },
    {
        "content": "<p>lean 4 likes to give errors up front for that kind of proof</p>",
        "id": 240222678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621963888
    },
    {
        "content": "<p>I think I like the lean 4 behavior on this: this kind of obfuscation is maybe good for writing quick proofs, but it doesn't fare too well on readability.</p>",
        "id": 240222886,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1621963965
    },
    {
        "content": "<p>I'm okay with using <code>?_</code> for explicitness here, but it should still be possible to write those proofs</p>",
        "id": 240223023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621964022
    },
    {
        "content": "<p>If we say that some variety of proof just isn't okay anymore this will kill the port, because restructuring a big proof in an area you don't know too well is a huge undertaking</p>",
        "id": 240223221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621964091
    },
    {
        "content": "<p>In particular <code>have</code> statements that have metavariables in them, sometimes hidden in implicit args, that appear briefly and are unified in the next line happen <em>all the time</em> in mathlib</p>",
        "id": 240223515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621964231
    },
    {
        "content": "<p>Currently the default is to use <code>_</code> instead of <code>?_</code> for implicit args, so this will usually stop a lean 4 proof in its tracks</p>",
        "id": 240223657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621964285
    },
    {
        "content": "<p>What about allowing these goals to arise but giving them inaccessible case names? (Is that even a thing?)</p>",
        "id": 240223850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621964383
    }
]