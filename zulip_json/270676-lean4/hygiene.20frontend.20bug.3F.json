[
    {
        "content": "<p>I'm not sure if this is a bug in core or in the infoview, but I found this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">-- P Q : Prop</span>\n<span class=\"c1\">-- hp ​: P →</span>\n<span class=\"c1\">-- p : P</span>\n<span class=\"c1\">-- ⊢ True</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span> <span class=\"n\">p</span>\n<span class=\"c1\">-- P Q : Prop</span>\n<span class=\"c1\">--  : P → Q               should be `hp† : P → Q` ?</span>\n<span class=\"c1\">-- p : P</span>\n<span class=\"c1\">-- hp : Q</span>\n<span class=\"c1\">-- ⊢ True</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>It's no biggie, but I just wanted to bring it to awareness. LMK if I should open an issue (and in which repo)</p>",
        "id": 278154404,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649333744
    },
    {
        "content": "<p>No this is an intentional feature I saw in one of the recent nightlies, shadowed names are not shown on purpose anymore since it confuses the user less.</p>\n<p>Now you being used to them are of course more confused than before :P</p>",
        "id": 278154717,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649333888
    },
    {
        "content": "<p>I'm using <code>leanprover/lean4:nightly-2022-04-06</code> and the <code>lean4</code> extension <code>v0.0.70</code></p>",
        "id": 278154726,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649333893
    },
    {
        "content": "<p>This nightly did it <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-03\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-03</a></p>",
        "id": 278154847,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649333968
    },
    {
        "content": "<p>I'm not sure this is the best way to approach this tho. My current context is full of variables and then I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⋯</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span>\n <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n  <span class=\"n\">consume</span> <span class=\"n\">p'</span> <span class=\"n\">ns</span> <span class=\"o\">(</span><span class=\"n\">NEList.cons</span> <span class=\"n\">e</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">NEList.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NEList.noDup</span> <span class=\"o\">(</span><span class=\"n\">NEList.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⋯</span>\n</code></pre></div>\n<p>My first reaction was to think it was related to <code>xs</code> because of the indentation. Maybe it should show at least a dagger (†) before the <code>:</code></p>",
        "id": 278155257,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649334175
    },
    {
        "content": "<p>I would suggest <code>_</code> for this purpose</p>",
        "id": 278157230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649335082
    },
    {
        "content": "<p>Either would be nice, just to keep the pattern <code>bla : ble</code></p>",
        "id": 278157910,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649335422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Please keep in mind that you are using Lean 4 as we change its behavior. This kind of confusion is inevitable as developers change the behavior of something you are used to. Please give it a try and see how you feel about it in a few days.</p>",
        "id": 278170135,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649340960
    },
    {
        "content": "<p>It's just a piece of feedback. The example shown in the <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-03\">changelog</a> might not look so pretty if the order is arbitrary like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">key</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">BinTree</span> <span class=\"n\">β</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n<span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">β</span>\n<span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n <span class=\"o\">:</span> <span class=\"n\">BST</span> <span class=\"n\">left</span>\n<span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n <span class=\"o\">:</span> <span class=\"n\">ForallTree</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"n\">left</span>\n<span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">β</span>\n <span class=\"o\">:</span> <span class=\"n\">BST</span> <span class=\"n\">right</span>\n<span class=\"n\">ihl</span> <span class=\"o\">:</span> <span class=\"n\">BST</span> <span class=\"n\">left</span> <span class=\"bp\">→</span> <span class=\"n\">Tree.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Tree.insert</span> <span class=\"n\">left</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n <span class=\"o\">:</span> <span class=\"n\">ForallTree</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">key</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">right</span>\n<span class=\"n\">ihr</span> <span class=\"o\">:</span> <span class=\"n\">BST</span> <span class=\"n\">right</span> <span class=\"bp\">→</span> <span class=\"n\">Tree.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Tree.insert</span> <span class=\"n\">right</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">BST</span> <span class=\"n\">left</span>\n</code></pre></div>",
        "id": 278178720,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649344293
    },
    {
        "content": "<p>I still think that <code>_</code> makes the most sense here, since this is already what we use in binders to indicate that the value is in scope but the name is not accessible</p>",
        "id": 278187615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649347547
    },
    {
        "content": "<p>it makes copy-paste editing to do a manual <code>extract_goal</code> easier too (although you still have to add the parens, since whitespace sensitivity isn't a thing for binder groups AFAIK)</p>",
        "id": 278187908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649347679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/hygiene.20frontend.20bug.3F/near/278187615\">said</a>:</p>\n<blockquote>\n<p>I still think that <code>_</code> makes the most sense here, since this is already what we use in binders to indicate that the value is in scope but the name is not accessible</p>\n</blockquote>\n<p>Thanks for the feedback. We will keep observing how other users react to this change.</p>",
        "id": 278194435,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649350582
    },
    {
        "content": "<p>My 2 cents is that I actually prefer the new look quite a bit haha</p>",
        "id": 278490506,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1649625779
    }
]