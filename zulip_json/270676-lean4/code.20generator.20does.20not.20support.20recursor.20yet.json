[
    {
        "content": "<p>I am trying to learn Lean and I have written this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_to_mynat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">MyNat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">MyNat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I get the error message \"code generator does not support recursor 'Nat.rec' yet, consider using 'match ... with' and/or structural recursion\" on <code>nat_to_mynat</code>. Why?<br>\nI am using version 4.0.0-nightly-2022-10-18, commit faa612e7b79a<br>\nPlease forgive me if I am missing something obvious here</p>",
        "id": 319751373,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673000090
    },
    {
        "content": "<p>Can you update to a version that's 3 months newer?</p>",
        "id": 319752530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673000571
    },
    {
        "content": "<p>I'll try <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> just a moment...</p>",
        "id": 319752633,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673000620
    },
    {
        "content": "<p>So I just ran <code>elan update</code> and now I have version 4.0.0-nightly-2023-01-06. Still the same error message <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 319753120,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673000852
    },
    {
        "content": "<p>This hasn't changed yet. You can use <code>noncomputable</code>, or use the equation compiler/<code>match</code>.</p>",
        "id": 319753138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673000863
    },
    {
        "content": "<p>We mostly don't use tactics to write definitions (as opposed to proofs)</p>",
        "id": 319753251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673000925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20generator.20does.20not.20support.20recursor.20yet/near/319753251\">said</a>:</p>\n<blockquote>\n<p>We mostly don't use tactics to write definitions (as opposed to proofs)</p>\n</blockquote>\n<p>I see, thanks for the tip!</p>",
        "id": 319753946,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673001202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20generator.20does.20not.20support.20recursor.20yet/near/319753138\">said</a>:</p>\n<blockquote>\n<p>This hasn't changed yet. You can use <code>noncomputable</code>, or use the equation compiler/<code>match</code>.</p>\n</blockquote>\n<p>Now I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat_to_mynat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat_to_mynat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and it works <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> Thanks for the newbie help!</p>",
        "id": 319754074,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673001245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20generator.20does.20not.20support.20recursor.20yet/near/319753138\">said</a>:</p>\n<blockquote>\n<p>This hasn't changed yet. You can use <code>noncomputable</code>, or use the equation compiler/<code>match</code>.</p>\n</blockquote>\n<p>There is someone who very ocasionally visits the compiler meetings that wants to work on this but apart from that there is no plans to change it at all in the close future.</p>",
        "id": 319763989,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673005079
    }
]