[
    {
        "content": "<p>Is there a way to force C code generation to return unboxed <code>USize</code>?  I'm writing a <a href=\"https://github.com/lecopivo/EigenLean\">wrapper for Eigen</a> and I would like to minimize fiddling with reference counting as much as possible.</p>\n<p>In the following example, a function <code>tripletsGetRow</code> returns <code>USize</code> but the generated C code returns <code>lean_object *</code> i.e. boxed <code>size_t</code>. Why is it happening?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Idx</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">USize</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Triplet</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"n\">n</span>\n  <span class=\"n\">col</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"n\">m</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">@[export triplets_get_row]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tripletsGetRow</span> <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Triplet</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">i.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">entries.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">entries.uget</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">row.1</span>\n\n<span class=\"kd\">@[extern \"eigenlean_sparse_matrix_mk_from_triplets\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">SparseMatrix.mk</span> <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Triplet</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">SparseMatrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>The declaration of <code>eigenlean_triplets_get_row</code> is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">eigenlean_triplets_get_row</span><span class=\"o\">(</span><span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>It can be prevented by changing the definition of <code>Triplet</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Triplet</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">USize</span>\n  <span class=\"n\">col</span> <span class=\"o\">:</span> <span class=\"n\">USize</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">h_row</span> <span class=\"o\">:</span> <span class=\"n\">row</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n  <span class=\"n\">h_col</span> <span class=\"o\">:</span> <span class=\"n\">col</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Then <code>eigenlean_triplets_get_row</code> returns <code>size_t</code>  as desired:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">size_t</span> <span class=\"n\">eigenlean_triplets_get_row</span><span class=\"o\">(</span><span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">size_t</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>What is going on?</p>",
        "id": 279993270,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650824896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> This looks like some compiler confusion about whether <code>Idx</code> is unboxed or not</p>",
        "id": 279994333,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650826602
    },
    {
        "content": "<p>Also would it be possible to force the generated C code to accept <code>entries</code> as a reference?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export eigenlean_triplets_get_row]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tripletsGetRow</span> <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Triplet</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">i.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">entries.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">entries.uget</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">row.1</span>\n</code></pre></div>\n<p>The generated code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">size_t</span> <span class=\"n\">eigenlean_triplets_get_row</span><span class=\"o\">(</span><span class=\"n\">size_t</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_3</span><span class=\"o\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">x_4</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_5</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">{</span>\n<span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span> <span class=\"n\">size_t</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n<span class=\"n\">x_6</span> <span class=\"bp\">=</span> <span class=\"n\">lean_array_uget</span><span class=\"o\">(</span><span class=\"n\">x_3</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">x_3</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_7</span> <span class=\"bp\">=</span> <span class=\"n\">lean_ctor_get_usize</span><span class=\"o\">(</span><span class=\"n\">x_6</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">x_6</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">return</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>lean_dec(x_3)</code> indicates that the ref counter of <code>entries</code> is decreased.</p>",
        "id": 279994966,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650827512
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/538\">https://github.com/leanprover/lean4/issues/538</a></p>",
        "id": 279995423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650828234
    }
]