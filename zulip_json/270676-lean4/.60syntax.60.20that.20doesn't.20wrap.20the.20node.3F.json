[
    {
        "content": "<p>Is there a way to write something like <code>syntax foo := \"a\" &lt;|&gt; \"b\" &lt;|&gt; \"c\"</code> which does not create a <code>foo</code> node around the parsed atoms? In core lean syntax, this is written with plain <code>def</code>, but that defines a <code>Parser</code> not a <code>ParserDescr</code>, and I don't know if it does all the right parser voodoo like the <code>syntax</code> command</p>",
        "id": 249907636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629318686
    },
    {
        "content": "<p>No, there isn't with <code>syntax</code></p>",
        "id": 249912068,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629321000
    },
    {
        "content": "<p>currently I'm writing it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simpArg</span> <span class=\"o\">:=</span> <span class=\"n\">simpStar.binary</span> <span class=\"bp\">`</span><span class=\"n\">orelse</span> <span class=\"o\">(</span><span class=\"n\">simpErase.binary</span> <span class=\"bp\">`</span><span class=\"n\">orelse</span> <span class=\"n\">simpLemma</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>do you have any better suggestions?</p>",
        "id": 249913737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629321790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60syntax.60.20that.20doesn't.20wrap.20the.20node.3F/near/249907636\">said</a>:</p>\n<blockquote>\n<p><code>Parser</code> not a <code>ParserDescr</code>, and I don't know if it does all the right parser voodoo like the <code>syntax</code> command</p>\n</blockquote>\n<p>All the voodoo that is done with <code>syntax</code> is based on it created a new syntax kind. Without such a kind, most of the voodoo wouldn't work (i.e., you can create formatters/parenthesizers/unexpanders for alt def). So it doesn't make much sense for it to support it.</p>",
        "id": 249916052,
        "sender_full_name": "Mac",
        "timestamp": 1629323264
    },
    {
        "content": "<p>Also, if you are doing complex syntax shenanigan,  I would recommend writing  the parsers directly. This is because <code>syntax</code> definitions can't be used in parsers, but parsers can be used in <code>syntax</code> definitions. So if you end up needing to write a parser (because what you want to do isn't supported at the <code>syntax</code> level), you will not be able to use any of the <code>syntax</code> definitions you created in the defining that parser. At least, that is my understanding.</p>",
        "id": 249916423,
        "sender_full_name": "Mac",
        "timestamp": 1629323487
    },
    {
        "content": "<p>Yes, I'm acutely aware of this</p>",
        "id": 249916452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323512
    },
    {
        "content": "<p>but I think the solution to that is to fix <code>syntax</code></p>",
        "id": 249916512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323532
    },
    {
        "content": "<p>er, actually I'm talking about the issues with <code>syntax</code> in quotations</p>",
        "id": 249916589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323600
    },
    {
        "content": "<p>for syntax in parsers, I assume there is some function like <code>parserOfDesc</code> to call to make that work</p>",
        "id": 249916631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323628
    },
    {
        "content": "<p>in fact, if that function was a coercion things might Just Work (TM)</p>",
        "id": 249916721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323675
    },
    {
        "content": "<p>sadly, I don't think such a function currently exists</p>",
        "id": 249917308,
        "sender_full_name": "Mac",
        "timestamp": 1629324025
    },
    {
        "content": "<p>surely they have to be turned into parsers at some point?</p>",
        "id": 249917568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629324189
    },
    {
        "content": "<p>Yes, that, I believe, is done through <a href=\"https://github.com/leanprover/lean4/blob/aa177dacc3ce3f0d98cd5caf70081680e28d3b99/src/Lean/Parser/Extension.lean#L268\"><code>compileParserDescr</code></a>, but that operates in a different monadic context with different information.</p>",
        "id": 249917689,
        "sender_full_name": "Mac",
        "timestamp": 1629324259
    },
    {
        "content": "<p>In fact, that is impure (it is based on <code>IO</code>), while Parsers are pure (they are not based on <code>IO</code>).</p>",
        "id": 249917821,
        "sender_full_name": "Mac",
        "timestamp": 1629324352
    },
    {
        "content": "<p>All those <code>get*Alias</code> methods can't be called within a <code>ParserFn</code>.</p>",
        "id": 249918182,
        "sender_full_name": "Mac",
        "timestamp": 1629324602
    },
    {
        "content": "<p>In that case, it sounds like <code>syntax</code> should get some more voodoo to create an auxiliary of type <code>Parser</code></p>",
        "id": 249918486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629324799
    },
    {
        "content": "<p>Yeah, that would be nice (it could be the a <code>.parser</code> subdef).</p>",
        "id": 249918528,
        "sender_full_name": "Mac",
        "timestamp": 1629324839
    },
    {
        "content": "<p>it would still be nice if you don't have to specify it in sugary contexts like the <code>leading_parser</code> macro</p>",
        "id": 249918590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629324863
    },
    {
        "content": "<p>What do mean \"specify it\" -- what is \"it\"?</p>",
        "id": 249918659,
        "sender_full_name": "Mac",
        "timestamp": 1629324936
    },
    {
        "content": "<p>i.e. you can just use a <code>ParserDesc</code> reference directly and the macro will put <code>.parser</code> if needed</p>",
        "id": 249918751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629324994
    },
    {
        "content": "<p>It is worth noting the that the <code>leading_parser</code> macro doesn't really create a sugary context. The term after <em>is</em> the parser term -- it just wraps it in an antiquote and uses the ident from the <code>def</code> signature to determine the kind.</p>",
        "id": 249918791,
        "sender_full_name": "Mac",
        "timestamp": 1629325038
    },
    {
        "content": "<p>that way you can refer to <code>syntax foo := ...</code> or <code>def foo := leading_parser ...</code> or <code>def foo : Parser := ...</code> equally without worrying</p>",
        "id": 249918796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629325044
    },
    {
        "content": "<p>hm, that's too bad</p>",
        "id": 249918887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629325099
    },
    {
        "content": "<p>I personally would like <code>def foo := leading_parser ...</code> to become <code>leading_parser foo := ...</code> because <code>leading_parser</code> is essentially a new command that wraps a <code>def</code>.</p>",
        "id": 249918899,
        "sender_full_name": "Mac",
        "timestamp": 1629325117
    },
    {
        "content": "<p>When I first came across it my mind parsed it all wrong</p>",
        "id": 249918921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629325144
    },
    {
        "content": "<p>it has weird precedence for a function-like macro</p>",
        "id": 249918940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629325170
    },
    {
        "content": "<p>That's because it is not really a function-like macro. It is more like an attribute of the <code>def</code> that is written after <code>:=</code> for some reason.</p>",
        "id": 249919030,
        "sender_full_name": "Mac",
        "timestamp": 1629325216
    },
    {
        "content": "<p>That is why I would suggest it just be a new command (same for <code>trailing_parser</code>).</p>",
        "id": 249919152,
        "sender_full_name": "Mac",
        "timestamp": 1629325323
    },
    {
        "content": "<p>It would, imo, be a lot more intuitive (and would likely prevent people from accidently forgetting it when defining a parser.</p>",
        "id": 249919328,
        "sender_full_name": "Mac",
        "timestamp": 1629325448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60syntax.60.20that.20doesn't.20wrap.20the.20node.3F/near/249918486\">said</a>:</p>\n<blockquote>\n<p>In that case, it sounds like <code>syntax</code> should get some more voodoo to create an auxiliary of type <code>Parser</code></p>\n</blockquote>\n<p>One problem here is that the point of <code>ParserDescr</code> is to define parsers without importing <code>Lean.Parser</code>. Thus, the <code>.parser</code> auxiliary <code>def</code> could not be defined in modules that define a <code>syntax</code> but do not import <code>Lean.Parser</code>. However,  its <code>.parser</code> generation could be limited to modules that import  <code>Lean.Parser</code> or there could be an alternate command to generate it on request (so kind of the opposite of alias registration).</p>",
        "id": 249920188,
        "sender_full_name": "Mac",
        "timestamp": 1629326053
    },
    {
        "content": "<p>the on demand approach would work if there was a macro to replace the coercion I suggested earlier</p>",
        "id": 249921981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629327592
    }
]