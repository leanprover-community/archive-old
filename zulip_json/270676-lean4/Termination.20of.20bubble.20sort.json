[
    {
        "content": "<p>The thread on ackermann got me thinking how do I show termination of bubble sort?</p>\n<p>Here is my unfinished attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.sort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n      <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span>\n<span class=\"n\">termination_by'</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"n\">a.1</span> <span class=\"bp\">=</span> <span class=\"n\">b.1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">List.lt</span> <span class=\"n\">_</span> <span class=\"n\">a.2.1</span> <span class=\"n\">a.2.2.2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">b.2.2.2</span><span class=\"o\">)</span>  <span class=\"c1\">-- I need graded lexicographical ordering</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I think the default inequality on <code>List</code> is not sufficient, as the bubble sort is decreasing first in length and then in lexicographical order. By default <code>[5] &lt; [1,2]</code> is false but I need it to be true.</p>\n<p>Also, what I'm confused about is that <code>termination_by</code> wants a relation between lists with different types and a ordering. Is it ok to declare Lists with different types or ordering as incomparable? How do I define such relation? I invoked classical reasoning, but I'm expecting that is not necessary as I'm eliminating to Prop.</p>",
        "id": 267846036,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642067729
    },
    {
        "content": "<p>I don't think lexicographic ordering will save you here, you know nothing about the <code>ys</code> returned by the recursive <code>sort</code>-call.</p>",
        "id": 267850002,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642070081
    },
    {
        "content": "<p>The easiest way is probably to bundle the invariant into a subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bubblesort</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">ys.length</span> <span class=\"bp\">=</span> <span class=\"n\">xs.length</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">termination_by</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.size</span>\n</code></pre></div>\n<p>(all of the recursive calls are on lists of smaller length)</p>",
        "id": 267850169,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642070173
    },
    {
        "content": "<p>With the new <code>termination_by</code> (new syntax as of today) you only need to specify a decreasing value (in some type that has WellFoundedRelation instance).  No need to construct a well-founded relation explicitly, or to unbundle the function arguments.</p>",
        "id": 267850370,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642070295
    },
    {
        "content": "<p>So this should work with tomorrow nightly build? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.bubblesort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨[],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">bubblesort</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨[],</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">done</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">bubblesort</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n       <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n          <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">bubblesort</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">done</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">done</span><span class=\"o\">⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>",
        "id": 267855428,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642073112
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/1620987b6ce40c98aaca78393e1ef15b261e6400\">https://github.com/leanprover/lean4/commit/1620987b6ce40c98aaca78393e1ef15b261e6400</a></p>",
        "id": 267906714,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1642096761
    }
]