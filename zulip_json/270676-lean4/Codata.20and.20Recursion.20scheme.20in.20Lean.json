[
    {
        "content": "<p>Hi, I am a newbie for lean language. I have some question to which i cannot find answer simply by google. Hopefully someone can help me.<br>\nFirst, recursion scheme and codata: A common pattern for functional language is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">co</span><span class=\"o\">)</span><span class=\"kd\">inductive</span> <span class=\"n\">Fix</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Fix</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which define how a data can be constructed (the maximum fixpoint in term of domain theory).<br>\nIf we use inductive in the above definiton, the lean would correctly reject the program, as pattern matching on such data structure cannot assure termination.<br>\nSo, how shall i apply codata pattern in term of programming in lean? Shall i just define a typeclass describing how data can be destructed?</p>",
        "id": 305391221,
        "sender_full_name": "Erika Su",
        "timestamp": 1666368142
    },
    {
        "content": "<p>as far as I'm aware there's not good support yet for co-inductive types :/ I believe someone was working on porting <a href=\"https://github.com/avigad/qpf\">QPF</a> to Lean 4, but I don't think it's ready for general use yet</p>\n<p>relevant: <a href=\"#narrow/stream/270676-lean4/topic/Coinduction.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Coinduction.3F</a></p>",
        "id": 305915132,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666646174
    }
]