[
    {
        "content": "<p>Sorry for the late reply, I don't check Zulip often. <br>\nI tried the <code>show</code> tactic, but I couldn't get it working for some reason. I've looked up the LEAN3 syntax of this tactic, but I haven't been able to figure out a way to translate it to the corresponding LEAN4 syntax without the commas.</p>\n<p>Thank you for the explanation about the kernel reduction. I'll keep that in mind.</p>",
        "id": 247871385,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627843184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing what you tried?</p>",
        "id": 247871444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627843249
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/h4lcidTWtiPNkqmrvkxPJP31/mwe.lean\">mwe.lean</a></p>",
        "id": 247871738,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627843720
    },
    {
        "content": "<p>I have created one now</p>",
        "id": 247871743,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627843731
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- LEAN4 version : nightly-2021-07-17</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n  <span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x.a</span> <span class=\"bp\">≤</span> <span class=\"n\">y.a</span>\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">test.le</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.a</span> <span class=\"bp\">≤</span> <span class=\"n\">y.a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This does not work for me</span>\n<span class=\"cm\">instance (x y : test) : Decidable (x ≤ y) := by</span>\n<span class=\"cm\">  show ((x ≤ y) = (x.a ≤ y.a))</span>\n<span class=\"cm\">  exact inferInstance</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 247871755,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627843759
    },
    {
        "content": "<p>That <code>show</code> doesn't work because your goal is not defeq to <code>(x ≤ y) = (x.a ≤ y.a)</code></p>",
        "id": 247871814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627843808
    },
    {
        "content": "<p><code>show</code> is for changing the goal to something defeq</p>",
        "id": 247871817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627843828
    },
    {
        "content": "<p>Instead, you would write <code>show Decidable (x.a ≤ y.a)</code></p>",
        "id": 247871820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627843850
    },
    {
        "content": "<p>By the way, there is a shortcut version of <code>inferInstance</code> just for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x.a</span> <span class=\"bp\">≤</span> <span class=\"n\">y.a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 247871837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627843898
    },
    {
        "content": "<p>Oh, I see. Thank you very much for this. It looks like I was understanding the tactic completely wrong.</p>",
        "id": 247871910,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627844000
    },
    {
        "content": "<p>The one-line version is really convenient. Thank you!</p>",
        "id": 247871975,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627844124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> has marked this topic as resolved.</p>",
        "id": 247871980,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627844137
    }
]