[
    {
        "content": "<p>In this example, I expect that <code>match</code> will rewrite <code>correct</code> signature to change argument by <code>A.pair a b :: q</code>, but it didn't, is that expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"bp\">|</span> <span class=\"n\">Access</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Grab</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Push</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuation</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineClosure</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KrivineEnv</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.max</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depthUnsafe</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.max</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">depthUnsafe</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">codegen</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[implementedBy KrivineClosure.depthUnsafe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">closure</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">closure</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"n\">depth_env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">depth_env</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.max</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">closure</span> <span class=\"o\">::</span> <span class=\"n\">closures</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.depth</span> <span class=\"n\">closure</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">closures</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth_spec₁</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">),</span>\n  <span class=\"n\">measure</span> <span class=\"n\">depth</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">admit</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth_spec₂</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">),</span>\n  <span class=\"n\">measure</span> <span class=\"n\">depth</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">admit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth_rel</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">measure</span> <span class=\"n\">depth</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth_wf</span><span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measureWf</span> <span class=\"n\">depth</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">correct</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fix</span> <span class=\"n\">depth_wf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">correct</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">admit</span> <span class=\"c1\">-- here, how can I recover this proposition, or how can I ensure that correct sig is correct?</span>\n    <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">e₀</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">depth_spec₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">depth_spec₁</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">KrivineEnv</span>\n</code></pre></div>\n<p>The context under <code>by admit</code> for the <code>e</code> equality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"n\">correct</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">measure</span> <span class=\"n\">depth</span> <span class=\"n\">y</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"n\">e₀</span> <span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 237497544,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620222496
    },
    {
        "content": "<p>It looks like a bug, as this <code>correct</code> version works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">correct</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fix</span> <span class=\"n\">depth_wf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">correct</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">e₀</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">depth_spec₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">depth_spec₁</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure what is going on, as I would expect introducing <code>e, correct</code> at the same time and then matching over <code>e</code> should rewrite the local context, including <code>correct</code> signature?</p>",
        "id": 237811777,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620389483
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/commit/157ef80c5aa1fb1e3974f75dd9d948c9f803a07f#diff-ab25ed83c2ea2848f158b341863db96230c15bc28f09930a28095b0e2c4d1b15R905-R906\">https://github.com/leanprover/lean4/commit/157ef80c5aa1fb1e3974f75dd9d948c9f803a07f#diff-ab25ed83c2ea2848f158b341863db96230c15bc28f09930a28095b0e2c4d1b15R905-R906</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n</code></pre></div>",
        "id": 237812515,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620389853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/match.20don't.20rewrite.20context/near/237812515\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/leanprover/lean4/commit/157ef80c5aa1fb1e3974f75dd9d948c9f803a07f#diff-ab25ed83c2ea2848f158b341863db96230c15bc28f09930a28095b0e2c4d1b15R905-R906\">https://github.com/leanprover/lean4/commit/157ef80c5aa1fb1e3974f75dd9d948c9f803a07f#diff-ab25ed83c2ea2848f158b341863db96230c15bc28f09930a28095b0e2c4d1b15R905-R906</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><em>Ah</em></p>",
        "id": 237816838,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620391868
    }
]