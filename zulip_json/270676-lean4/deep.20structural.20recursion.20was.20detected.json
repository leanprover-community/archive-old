[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Using List as carrier of `children`: works</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">recurseM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">children</span> <span class=\"bp\">←</span> <span class=\"n\">action</span> <span class=\"n\">curr</span>\n  <span class=\"n\">children.forM</span> <span class=\"o\">(</span><span class=\"n\">recurseM</span> <span class=\"bp\">·</span> <span class=\"n\">action</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">specificTraverseList</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">recurseM</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">[])</span>\n\n\n<span class=\"c1\">-- Using Array as carrier of `children`:</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">recurseM2</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">curr</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">children</span> <span class=\"bp\">←</span> <span class=\"n\">action</span> <span class=\"n\">curr</span>\n  <span class=\"n\">children.forM</span> <span class=\"o\">(</span><span class=\"n\">recurseM2</span> <span class=\"bp\">·</span> <span class=\"n\">action</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- When compiling definition below:</span>\n<span class=\"c1\">-- `deep recursion was detected at 'replace' (potential solution: increase stack space in your system)`</span>\n<span class=\"kd\">def</span> <span class=\"n\">specificTraverseArray</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">recurseM2</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>Possibly a bug? I tried setting the thread stack size to huge values and it didn't help.</p>",
        "id": 230438000,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1615851306
    },
    {
        "content": "<p>Pushed a fix <a href=\"https://github.com/leanprover/lean4/commits/master\">https://github.com/leanprover/lean4/commits/master</a></p>",
        "id": 230450432,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615861195
    }
]