[
    {
        "content": "<p>I am toying with Aesop, hoping it will find a proof term for me if I let it run long enough.<br>\nUnfortunately, simply beefing up Aesop's <code>maxRuleApplications</code> isn't enough as I then run into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And when I increase that, I run into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"k\">with</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">throwable</span><span class=\"o\">:</span> <span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">interpreter'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can I increase the stack space somehow?</p>",
        "id": 288396060,
        "sender_full_name": "Asta Halkjær From",
        "timestamp": 1656933132
    },
    {
        "content": "<p>On linux you would use <code>ulimit</code>, specifically <code>ulimit -s $SIZE</code> to increase the system stack space as suggestion by the exception.</p>",
        "id": 288396229,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656933269
    },
    {
        "content": "<p>Thanks. How does this work with running Lean inside vscode?</p>",
        "id": 288396892,
        "sender_full_name": "Asta Halkjær From",
        "timestamp": 1656933740
    },
    {
        "content": "<p>Using the new <code>precompileSubmodules</code> package option in Aesop's lakefile.lean should also fix this, and speed up Aesop quite a bit as documented in the other thread /cc <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 288396929,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656933769
    },
    {
        "content": "<p>Has this <code>precompile</code> stuff landed yet? I can't find it in today's nightly. I'll take it as soon as possible of course!</p>",
        "id": 288429433,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1656953068
    },
    {
        "content": "<p>Yes, it should be <a href=\"https://github.com/leanprover/lake/releases/tag/v3.2.0\">https://github.com/leanprover/lake/releases/tag/v3.2.0</a></p>",
        "id": 288431000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656954246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457079\">Asta Halkjær From</span> <a href=\"#narrow/stream/270676-lean4/topic/Increase.20stack.20space.20.28for.20Aesop.29/near/288396060\">said</a>:</p>\n<blockquote>\n<p>Can I increase the stack space somehow?</p>\n</blockquote>\n<p>Way back when i used to build lean with <code>leanmake LEANC_OPTS=\"-fsplit-stack -O3 -DNDEBUG\" bin</code> which would use a special gcc option to give unlimited stack space using linked stacks.<br>\nim pretty sure you could do the same thing with <code>leancArgs</code> in lake</p>",
        "id": 288441435,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1656961712
    },
    {
        "content": "<p>I've now enabled <code>precompileModules</code> for Aesop. Thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> for fixing the remaining issues, and of course for implementing this amazing feature in the first place!</p>",
        "id": 288662829,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1657110770
    },
    {
        "content": "<p>Great! Aesop is noticeably faster now and it takes way longer before I run out of stack space.</p>",
        "id": 288675464,
        "sender_full_name": "Asta Halkjær From",
        "timestamp": 1657116329
    }
]