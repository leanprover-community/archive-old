[
    {
        "content": "<p>When the goal depends on a hypothesis which we simplify, the old unsimplified version stays in the context and the goal still depends on the old version. Is that the desired behaviour?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 237476550,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1620212799
    },
    {
        "content": "<p>lean 3 does the same thing. This is unavoidable, given the way that simp works. <code>dsimp</code> should avoid this behavior</p>",
        "id": 237476765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620212923
    },
    {
        "content": "<p>We don't have <code>dsimp</code> yet, do we?</p>",
        "id": 237477001,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1620213067
    },
    {
        "content": "<p>ah, well then</p>",
        "id": 237477064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620213115
    },
    {
        "content": "<p>a simple version of <code>dsimp</code> would be to call <code>simp</code>, then throw away the proof and <code>change</code> the hypothesis using revert/intro</p>",
        "id": 237477259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620213226
    },
    {
        "content": "<p>We don't have <code>change</code> yet, either ^^</p>",
        "id": 237477374,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1620213272
    },
    {
        "content": "<p>it's called <code>show</code> now</p>",
        "id": 237477399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620213291
    },
    {
        "content": "<p>Yes, and the Meta backend of it is trivial anyway</p>",
        "id": 237477444,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1620213318
    },
    {
        "content": "<p>Hi lean devs, can you make <code>mkSimpContext, elabSimpLemmas, addSimpLemma, addDeclToUnfoldOrLemma</code> in <code>Lean.Elab.Tactic.Simp</code> not private?</p>",
        "id": 237478595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620213956
    }
]