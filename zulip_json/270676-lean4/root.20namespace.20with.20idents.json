[
    {
        "content": "<p>Consider the following code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"n\">s.getString</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"s2\">\"_root_\"</span> <span class=\"bp\">++</span> <span class=\"n\">s.getString</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">blah</span>\n\n<span class=\"n\">foo</span> <span class=\"s2\">\"test\"</span>\n<span class=\"n\">bar</span> <span class=\"s2\">\"baz\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">blah</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">blah.test</span>\n<span class=\"k\">#check</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>This works. What I'm wondering about is how to accomplish the behavior of \"bar\" similarly to \"foo\" (i.e. without resorting to manipulating strings with \"_root_\"). Any pointers?</p>",
        "id": 302752208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665095381
    },
    {
        "content": "<p>Are you looking for <code> `_root_ ++ s.getString </code> or <code>.str (.str .anonymous \"_root_\") s.getString</code>?</p>",
        "id": 302757459,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665098422
    },
    {
        "content": "<p>I'm not sure what I'm looking for. I guess at the end of the day I'm wondering if there is a way to get to the root namespace without using \"_root_\" (or `_root_)</p>",
        "id": 302764897,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665103576
    },
    {
        "content": "<p>not if you are constrained to generate an identifier that goes into <code>def</code></p>",
        "id": 302764937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665103627
    },
    {
        "content": "<p>you could just call the underlying API, in which case you can name it whatever you want</p>",
        "id": 302764953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665103649
    },
    {
        "content": "<p>Fair enough. Thanks. Where can I find the underlying API for making defs, structures, etc.?</p>",
        "id": 302765272,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665103861
    },
    {
        "content": "<p>I usually just follow the trail starting at the syntax, to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabDeclaration#src\">src4#Lean.Elab.Command.elabDeclaration</a>, to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.addPreDefinitions#src\">src4#Lean.Elab.addPreDefinitions</a>, and finally to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addDecl#src\">src4#Lean.addDecl</a>, depending on how much of the def stuff you want to do</p>",
        "id": 302765664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665104188
    },
    {
        "content": "<p><code>addDecl</code> is the kernel interface; in particular it doesn't compile the definition (you need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addAndCompile#src\">src4#Lean.addAndCompile</a> for that)</p>",
        "id": 302765740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665104277
    },
    {
        "content": "<p>Sorry... I'm a bit slow. What should I do to \"follow the trail\"?</p>",
        "id": 302765927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665104424
    },
    {
        "content": "<p>My first instinct would be to do something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I don't see any of the functions you mentioned by doing this.</p>",
        "id": 302766120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665104590
    },
    {
        "content": "<p>Let's say we want to know what <code>def</code> does.</p>\n<ul>\n<li>My first step is to search the codebase for <code>\"def</code>, <code>\"def </code> or <code>\"def\"</code>, which usually takes me to the declaration of the syntax, in this case <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Command.def#src\">src4#Lean.Parser.Command.def</a></li>\n<li>This isn't actually a command parser (you can tell because it doesn't have a<code>@[builtinCommandParser]</code> attribute), but if you look for uses in the same file you find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Command.declaration#src\">src4#Lean.Parser.Command.declaration</a> is the actual command, which has <code>«def»</code> as one of its cases.</li>\n<li>The next step is to find the elab or macro corresponding to this syntax. There are a few ways to do this; I'm still mostly using the old school method of searching for <code>declaration]</code> or <code>«declaration»]</code> looking for the <code>builtinCommandElab</code> for it, but you can also use \"Find References\" on <code>declaration</code> to get to it. That takes us to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabDeclaration#src\">src4#Lean.Elab.Command.elabDeclaration</a></li>\n<li>From there, we just go forward along the function calls looking for where the \"real work\" is. Declarations are one of the more complicated lean commands, so there is a lot of stuff, but if you imagine you are parsing a def you will try <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabMutualDef#src\">src4#Lean.Elab.Command.elabMutualDef</a>, which calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabMutualDef#src\">src4#Lean.Elab.Term.elabMutualDef</a>, which calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.addPreDefinitions#src\">src4#Lean.Elab.addPreDefinitions</a>, which calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.addAndCompileNonRec#src\">src4#Lean.Elab.addAndCompileNonRec</a>, which calls a private function that calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addDecl#src\">src4#Lean.addDecl</a>.</li>\n</ul>",
        "id": 302766731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665105098
    },
    {
        "content": "<p>Thanks Mario! That's very helpful!</p>",
        "id": 302766875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665105220
    },
    {
        "content": "<p>Actually we can even keep going:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addDecl#src\">src4#Lean.addDecl</a> calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.addDecl#src\">src4#Lean.Environment.addDecl</a>, which has an <code>extern \"lean_add_decl\"</code>, so if we want to keep digging we're going to end up in the C++ code.</li>\n<li>Searching for <code>lean_add_decl(</code> yields <a href=\"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/kernel/environment.cpp#L248-L252\"><code>lean_add_decl</code></a>, which calls <a href=\"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/kernel/environment.cpp#L235-L246\"><code>environment::add</code></a>, which calls <a href=\"https://github.com/digama0/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/kernel/environment.cpp#L141-L172\"><code>environment::add_definition</code></a>, which calls <a href=\"https://github.com/digama0/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/kernel/environment.cpp#L130-L132\"><code>environment::add</code></a> (this is a different overload), which calls an extern function <a href=\"https://github.com/digama0/lean4/blob/b172ba8a34e765fc56d62b2690204bd8a75d18e7/src/kernel/environment.cpp#L20\"><code>lean_environment_add</code></a>.</li>\n<li>Searching for <code>lean_environment_add</code> leads us <em>back into lean</em> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.add#src\">src4#Lean.Environment.add</a>, because it has an <code>export lean_environment_add</code> declaration on it so that C++ code can call it. That calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.addAux#src\">src4#Lean.Environment.addAux</a> which inserts into the constants hashmap and now we're really done. (In case you were wondering, the actual kernel typechecker runs in the <a href=\"https://github.com/digama0/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/kernel/environment.cpp#L141-L172\"><code>environment::add_definition</code></a> step.)</li>\n</ul>",
        "id": 302767522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665105756
    }
]