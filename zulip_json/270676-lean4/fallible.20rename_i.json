[
    {
        "content": "<p>Right now, when I call <code>rename_i I</code>, it either gives an error if there are no more inaccessible variables, <em>or</em> binds the inaccessible variable to the name <code>I</code>. I can't do <code>try rename_i I</code> if there are no inaccessible variables, which is making my automation quite difficult. Is there a version where this is possible, or even better, a version which <em>either</em> binds <code>I</code> to the first inaccessible variable <em>or</em> does something else and/or binds <code>I</code> to something else?</p>",
        "id": 272877787,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645570189
    },
    {
        "content": "<p>Here's a tactic idea: <code>access a b</code> renames all inaccessible variables that are variants of <code>a</code> or <code>b</code> to have accessible names with subscripts if necessary. <code>access *</code> does the same but for all inaccessible variables. <code>access * =&gt; A B C</code> names the variables <code>A</code>, <code>B</code>, <code>C</code> in order of occurrence in the local context</p>",
        "id": 272878822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645570765
    },
    {
        "content": "<p>it never fails; excess names are ignored, and <code>_</code> or missing names in the <code>=&gt;</code> list use the default \"subscript the variable\" naming convention</p>",
        "id": 272879068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645570861
    },
    {
        "content": "<p>What if you provide a name that's already in use?</p>",
        "id": 272894889,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645581447
    },
    {
        "content": "<p>I think this tactic is nice but I also think people would end up needing it due to some sort of \"accident\". So maybe it's worth taking a few steps back and rewriting the proofs in a way that the variables references aren't lost</p>",
        "id": 272895493,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645581877
    },
    {
        "content": "<p>The reason why I need it is because I want to uniformly handle each case of an induction which has different numbers of inductive hypotheses.</p>",
        "id": 272975725,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645634924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/fallible.20rename_i/near/272894889\">said</a>:</p>\n<blockquote>\n<p>What if you provide a name that's already in use?</p>\n</blockquote>\n<p>In the proposed <code>access</code> tactic, if you give a name that is already in use the newly renamed variable will shadow the old one. I don't see any other reasonable behavior.</p>",
        "id": 272977267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645635556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/fallible.20rename_i/near/272895493\">said</a>:</p>\n<blockquote>\n<p>I think this tactic is nice but I also think people would end up needing it due to some sort of \"accident\", such that it would be worth taking a few steps back and rewriting the proof in a way that the variables references by name aren't lost</p>\n</blockquote>\n<p>Sure, but this happens sometimes. Especially if you are using the same tactic script on 10 very slightly different goals, you want tactics that can handle a little sloppiness.</p>",
        "id": 272977678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645635652
    }
]