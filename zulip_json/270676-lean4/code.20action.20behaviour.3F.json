[
    {
        "content": "<p>I was experimenting with the (low level) code actions. This is very nice, especially that lazy actions are supported.</p>\n<p>But there was one piece of unexpected behaviour and a related question regarding the examples in the <code>codeaction.lean</code> test file.</p>\n<ul>\n<li>I would have guessed that the code actions would <em>replace</em> the selected token with \"Hello!!!\" or the directory, as it seemed the range should be for the syntax object and this should be replaced by the new text. Instead they are inserted.</li>\n<li>And the question: in a real case, the inserted text will depend on the text in the range. How do I access this?</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> are there some examples I should look at?</p>",
        "id": 310777722,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668763566
    },
    {
        "content": "<p>Hello! There is an example of usage in <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/interactive/codeaction.lean\">the tests</a> which it sounds like you found. You can get it to replace text by setting the <code>range</code> field in the <code>TextEdit</code> object. To determine the range of text that needs to be replaced you need to get the Syntax node of the text.</p>",
        "id": 310778613,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668763907
    },
    {
        "content": "<p>With <code>Lean.Syntax.getRange?</code></p>",
        "id": 310778734,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668763953
    },
    {
        "content": "<p>Recovering an expression or piece of syntax from a document position can be a little involved, but the way to do it is to find a snapshot for a given position and then search the InfoTree to find what you are looking for. There are lots of examples of this in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean\">RequestHandling.lean</a></p>",
        "id": 310779809,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668764391
    },
    {
        "content": "<p>Also <code>Lean.Syntax.getRange?</code> will give you a Lean range, but this needs to be converted to an LSP range using <a href=\"https://github.com/leanprover/lean4/blob/ce78c17f2d0602bcf8201181938a97a048e3bcf7/stage0/src/Lean/Data/Lsp/Utf16.lean#L78\"><code>leanPosToLspPos</code></a></p>",
        "id": 310780317,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668764563
    },
    {
        "content": "<p>I take it that the starting point should be to use <code>params.range</code> to get an LSP range and convert this to a Lean range. Is that correct?</p>",
        "id": 310781969,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668765158
    },
    {
        "content": "<p>yes</p>",
        "id": 310782321,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668765287
    },
    {
        "content": "<p>Thanks. Will experiment and ask again for any questions.</p>",
        "id": 310782601,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668765401
    },
    {
        "content": "<p>Been digging through the source code but am asking as there may be an easy answer: how do I get the contents of the current file?</p>",
        "id": 310835256,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668782091
    },
    {
        "content": "<p>With position as above which can be converted.</p>",
        "id": 310835370,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668782126
    },
    {
        "content": "<p>I do see a function <code>readDoc</code>. However this involves a request context. Can I call it when defining a code-action?</p>",
        "id": 310835769,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668782259
    },
    {
        "content": "<p>I think you can retrieve the request context in the eager part</p>",
        "id": 310836919,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668782630
    },
    {
        "content": "<p>I see many ways to get a DocumentUri. Is there a function that gets the actual document from this?</p>",
        "id": 310837979,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668782960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">readDoc</span>\n<span class=\"n\">doc.meta.uri</span>\n</code></pre></div>",
        "id": 310838358,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668783080
    },
    {
        "content": "<p><code>doc.meta.text</code> has the actual sourcetext somewhere</p>",
        "id": 310838873,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668783222
    },
    {
        "content": "<p>I mean the other way. <code>CodeActionParams</code> has the uri and the identifiers. I need the new text as a function of the current file.</p>",
        "id": 310839222,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668783321
    },
    {
        "content": "<p>In an IO context <code>readDoc</code> does not work.</p>",
        "id": 310839318,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668783350
    },
    {
        "content": "<p>I’d also like to use <code>readDoc</code>, but in the Elaborator monad (maybe with a piece of <code>Syntax</code> to locate the doc), so a suggestion here is welcome :-)</p>",
        "id": 310842789,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1668784239
    },
    {
        "content": "<p>You can pass in the RequestContext as a closure</p>",
        "id": 310842998,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668784307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20action.20behaviour.3F/near/310842998\">said</a>:</p>\n<blockquote>\n<p>You can pass in the RequestContext as a closure</p>\n</blockquote>\n<p>Can you give an example, say within the lazy part of the <code>codeactions.lean</code> file.</p>",
        "id": 310843209,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668784359
    },
    {
        "content": "<p>I want the inserted text to depend on the current text.</p>",
        "id": 310843267,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668784381
    },
    {
        "content": "<p>I don't know how to get the <code>RequestContext</code>from the <code>CodeActionParams</code></p>",
        "id": 310843875,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668784546
    },
    {
        "content": "<p>It seems to me that it should be common for code-actions to depend on the current text. If I follow the code in the definitions I end up with <code>TextEdit</code> which asks for the new text, but not as a function of the current text.</p>",
        "id": 310844846,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668784810
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[codeActionProvider]</span>\n<span class=\"kd\">def</span> <span class=\"n\">xyz</span> <span class=\"o\">:</span> <span class=\"n\">CodeActionProvider</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">params</span> <span class=\"n\">snap</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rc</span> <span class=\"o\">:</span> <span class=\"n\">RequestContext</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">ca</span> <span class=\"o\">:</span> <span class=\"n\">CodeAction</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">title</span> <span class=\"o\">:=</span> <span class=\"s2\">\"xyz\"</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">lazy</span> <span class=\"o\">:</span> <span class=\"n\">RequestM</span> <span class=\"n\">CodeAction</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"c1\">-- this is a requestM</span>\n        <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">RequestM.readDoc</span>\n        <span class=\"n\">return</span> <span class=\"n\">ca</span>\n\n  <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[{</span>\n    <span class=\"n\">eager</span> <span class=\"o\">:=</span> <span class=\"n\">ca</span>\n    <span class=\"n\">lazy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">EIO.toIO</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.message</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ReaderT.run</span> <span class=\"n\">lazy</span> <span class=\"n\">rc</span>\n  <span class=\"o\">}]</span>\n</code></pre></div>",
        "id": 310845415,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668784978
    },
    {
        "content": "<p>I admit this is quite clunky</p>",
        "id": 310845730,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668785055
    },
    {
        "content": "<p>Thanks a lot.</p>",
        "id": 310845742,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668785059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20action.20behaviour.3F/near/310842789\">said</a>:</p>\n<blockquote>\n<p>I’d also like to use <code>readDoc</code>, but in the Elaborator monad (maybe with a piece of <code>Syntax</code> to locate the doc), so a suggestion here is welcome :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> This makes me wonder whether elaborators really should be in charge of adding widgets. I'm imagining an alternative design where widgets are created by server handlers triggered by nodes in the info tree (perhaps containing data added by elaborators specifically for widget visualization). This would have the advantage that not only does the widget creation code have access to server data, you can also add widgets for existing elaborators, e.g. +/- buttons for any <code>elabNumLit</code> node.</p>",
        "id": 310850222,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668786254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/270676-lean4/topic/code.20action.20behaviour.3F/near/310780317\">said</a>:</p>\n<blockquote>\n<p>Also <code>Lean.Syntax.getRange?</code> will give you a Lean range, but this needs to be converted to an LSP range using <a href=\"https://github.com/leanprover/lean4/blob/ce78c17f2d0602bcf8201181938a97a048e3bcf7/stage0/src/Lean/Data/Lsp/Utf16.lean#L78\"><code>leanPosToLspPos</code></a></p>\n</blockquote>\n<p>Is there a similar function from <code>LspPos</code> to <code>String.Pos</code>? I am trying to get the user's cursor position as a <code>String.Pos</code>. So far I have been using <code>_snap.beginPos</code>as a reasonable approximation, but in my use case it would be better to have the actual position. I believe <code>params.range</code> starts and ends at the same position when nothing is selected, so I was wondering if I could just use that position (which is an <code>LspPos</code>) to get a <code>String.Pos</code>.</p>",
        "id": 310870366,
        "sender_full_name": "Anand Rao",
        "timestamp": 1668791762
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/lean4/blob/ce78c17f2d0602bcf8201181938a97a048e3bcf7/stage0/src/Lean/Data/Lsp/Utf16.lean#L67\"><code>lspPosToUtf8Pos</code></a> and <a href=\"https://github.com/leanprover/lean4/blob/ce78c17f2d0602bcf8201181938a97a048e3bcf7/stage0/src/Lean/Data/Position.lean#L55\"><code>toPosition</code></a> should do it</p>",
        "id": 310872432,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1668792321
    }
]