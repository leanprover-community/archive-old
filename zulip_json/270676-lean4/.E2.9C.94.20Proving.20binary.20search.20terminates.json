[
    {
        "content": "<p>I am trying to prove this binary search sqrt function terminates. I could show my 30 lines of failed inequality proofs/lemmas, but I've never seen <code>decreasing_by</code> use more than 3 tactics in mathlib4/lean4. So I feel like my approach is fundamentally wrong - is there an easy answer for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sqrt_bs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bs</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"n\">lo</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n      <span class=\"k\">if</span> <span class=\"n\">gt</span> <span class=\"o\">:</span> <span class=\"n\">mid</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n        <span class=\"n\">bs</span> <span class=\"n\">lo</span> <span class=\"n\">mid</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">bs</span> <span class=\"n\">mid</span> <span class=\"n\">hi</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">bs</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 318939035,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1672640095
    },
    {
        "content": "<p>Since <code>mid</code> involves integer division it can be a bit fiddly. The following is the skeleton I would use (it does not solve the real issue).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sqrt_bs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bs</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"n\">lo</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n      <span class=\"k\">if</span> <span class=\"n\">gt</span> <span class=\"o\">:</span> <span class=\"n\">mid</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"n\">bs</span> <span class=\"n\">lo</span> <span class=\"n\">mid</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">mid</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"n\">bs</span> <span class=\"n\">mid</span> <span class=\"n\">hi</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">bs</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 318939503,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672640498
    },
    {
        "content": "<p>Ah, well this solves one problem for me at least - inside <code>decreasing_by</code>, it seems to run your tactics on all goals, which I couldn't figure out how to use well</p>",
        "id": 318940671,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1672641576
    },
    {
        "content": "<p>This is a generally useful pattern: one states lemmas that show decreasing just before recursive calls and then use <code>decreasing_by assumption</code>. So the task of showing decreasing is at least encapsulated and often easy (here it may need some work because of rounding during integer division).</p>",
        "id": 318941711,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672642443
    },
    {
        "content": "<p>Thanks, I think with this information, I just need to work through the proofs now</p>",
        "id": 318942159,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1672642798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"499256\">Stuart Geipel</span> has marked this topic as resolved.</p>",
        "id": 318942160,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672642800
    },
    {
        "content": "<p><code>decreasing_by assumption</code> should not usually be necessary, it is already included in <code>decreasing_trivial</code></p>",
        "id": 318995261,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672667125
    }
]