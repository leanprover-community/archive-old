[
    {
        "content": "<p>Here's a test case where the compiler emits <code>PANIC at Lean.Expr.bindingDomain! Lean.Expr:618:23: binding expected</code> on being invoked. I don't know if this is considered a bug since the input program should not compile due to syntax errors.  I reduced the test case to a minimal example in case Lean has a policy of never panicking on malformed input.  </p>\n<h4>The full error log:</h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">temp</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">gap</span><span class=\"bp\">$</span> <span class=\"n\">leanpkg</span> <span class=\"n\">build</span>\n<span class=\"n\">configuring</span> <span class=\"n\">gap</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././</span><span class=\"n\">build</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">P.olean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">temp</span><span class=\"bp\">/</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">P.c</span> <span class=\"bp\">./</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">P.lean</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././</span><span class=\"n\">build</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.olean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">temp</span><span class=\"bp\">/</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.c</span> <span class=\"bp\">./</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.lean</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Expr.bindingDomain</span><span class=\"bp\">!</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">:</span><span class=\"mi\">618</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">binding</span> <span class=\"n\">expected</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Expr.bindingDomain</span><span class=\"bp\">!</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">:</span><span class=\"mi\">618</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">binding</span> <span class=\"n\">expected</span>\n<span class=\"bp\">./</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Expr'</span>\n<span class=\"bp\">./</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Expr'</span>\n<span class=\"bp\">./</span><span class=\"n\">GAP</span><span class=\"bp\">/</span><span class=\"n\">AST.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">GAP.AST.parse_expr_logical</span>\n  <span class=\"n\">GAP.AST.parse_expr</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">handle</span> <span class=\"n\">mutually</span> <span class=\"n\">recursive</span> <span class=\"n\">functions</span>\n\n<span class=\"n\">unexpected</span> <span class=\"n\">bound</span> <span class=\"kd\">variable</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"n\">Build</span> <span class=\"n\">failed.</span>\n</code></pre></div>\n<h4>The minimal test case</h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">temp</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">gap</span><span class=\"bp\">$</span> <span class=\"n\">tree</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">├──</span> <span class=\"n\">GAP</span>\n<span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">AST.lean</span>\n<span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">P.lean</span>\n<span class=\"bp\">├──</span> <span class=\"n\">GAP.lean</span>\n<span class=\"bp\">└──</span> <span class=\"n\">leanpkg.toml</span>\n</code></pre></div>\n<p>with file contents:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- GAP.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">GAP.P</span>\n<span class=\"kn\">import</span> <span class=\"n\">GAP.AST</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- GAP/P.lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">GAP.P</span>\n<span class=\"kd\">structure</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">runP</span><span class=\"o\">:</span> <span class=\"n\">a</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">runP</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a2mb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a2mb</span> <span class=\"o\">(</span><span class=\"n\">a.runP</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- GAP/AST.lean</span>\n  <span class=\"kn\">import</span> <span class=\"n\">GAP.P</span>\n  <span class=\"kn\">open</span> <span class=\"n\">GAP.P</span>\n  <span class=\"kn\">namespace</span> <span class=\"n\">GAP.AST</span>\n  <span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">parse_expr_logical</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">parse_expr</span>\n  <span class=\"kd\">def</span> <span class=\"n\">parse_expr</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">parse_expr_logical</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># leanpkg.toml</span>\n<span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"gap\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"o\">=</span> <span class=\"s\">\"leanprover/lean4:master\"</span>\n</code></pre></div>\n<h3><a href=\"https://gist.github.com/bollu/471121c586a6021d2e0e9b293ad0bb20#file-lean-panic-error-log-txt-L5-L6\">Link to Gist</a></h3>\n<p><a href=\"https://gist.github.com/bollu/471121c586a6021d2e0e9b293ad0bb20#file-lean-panic-error-log-txt-L5-L6\">Click here for a gist, formatted as a Lean issue</a></p>",
        "id": 256080480,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633362303
    },
    {
        "content": "<p>Thanks for reporting the problem. I pushed a fix for this issue.</p>",
        "id": 256126930,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633379102
    }
]