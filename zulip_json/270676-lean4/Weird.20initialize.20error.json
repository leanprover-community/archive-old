[
    {
        "content": "<p>When I use <code>initialize</code> with <code>@[extern] constant</code> Lean would complain that it <code>could not find native implementation of external declaration xxx</code>. The code is like this and the full example is provided <a href=\"https://github.com/xubaiw/weird-initialize\">here</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"foo_initialize\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">fooInit</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">fooInit</span>\n</code></pre></div>\n<p>The weird point is that when I change <code>initialize</code> to <code>builtin_initialize</code>, the code builds successfully.<br>\nAfter doing some search I found some discussions about <code>initialize</code> and <code>builtin_initialize</code> from other topics.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Compile.20package.20as.20plugin/near/248657707\">said</a>:</p>\n<blockquote>\n<p>Yes, it's not expected to also import a plugin, though we should probably make sure it still works since you might not be able to avoid it in case of some shared module. I'm not sure <code>initialize</code> being run in a plugin is even intended, usually <code>builtin*</code> means \"run when native code is loaded, register into some global IO.Ref\" and non-builtin means \"run when imported, register into the environment\".</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/KeyedDeclsAttribute/near/240146399\">said</a>:</p>\n<blockquote>\n<p>I think<code> initialize</code>, despite its name, actually runs after initializing the environment, whereas <code>bulitin_initialize</code> actually runs during initialization.</p>\n</blockquote>\n<p>Does this mean that the user provided external code should not be viewed as part of the package, and should always be called with <code>builtin_initialize</code>? And they are loaded whether or not the package is imported?</p>",
        "id": 256232178,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633434990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/Weird.20initialize.20error/near/256232178\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/KeyedDeclsAttribute/near/240146399\">said</a>:</p>\n<blockquote>\n<p>I think<code> initialize</code>, despite its name, actually runs after initializing the environment, whereas <code>bulitin_initialize</code> actually runs during initialization.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>Note that I said this before user-defined attributes and environment extensions were supported. This may not be the case anymore (i.e., <code>initialize</code> now might run during initialization).</p>",
        "id": 256254261,
        "sender_full_name": "Mac",
        "timestamp": 1633443834
    }
]