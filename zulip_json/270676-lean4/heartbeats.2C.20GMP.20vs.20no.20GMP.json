[
    {
        "content": "<p>I'm poking at <a href=\"https://github.com/leanprover/lean4/issues/827\">https://github.com/leanprover/lean4/issues/827</a> a little bit.<br>\nI have found an input that causes a non-GMP build to emit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">expression</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">delab'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span>\n</code></pre></div>\n<p>while the equivalent GMP build succesfully pretty-prints without hitting the limit.</p>\n<p>Is that an interesting result? It was somewhat surprising to me, as I did not expect mpz operations to change the heartbeat count.</p>",
        "id": 302963624,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665201015
    },
    {
        "content": "<p>sounds like the heartbeat counter needs to look for wraparound in the counter?</p>",
        "id": 302969364,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665208009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Yes, this is an interesting result, but it is consistent with the current implementation. We increase the number of heartbeats in our custom memory allocator, and the non-GMP implementation uses this custom allocator.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/runtime/mpz.cpp#L264\">https://github.com/leanprover/lean4/blob/master/src/runtime/mpz.cpp#L264</a></p>",
        "id": 303023326,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665237982
    },
    {
        "content": "<p>here's a reduced input:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span><span class=\"bp\">�</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">49</span>\n</code></pre></div>",
        "id": 303031508,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665241852
    },
    {
        "content": "<p>where <code>�</code> is the non-utf8 byte <code>0xff</code></p>",
        "id": 303031582,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665241888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">echo</span> <span class=\"s2\">\"ZGVmIHg6IEludCA6Pf8oMSkKI3JlZHVjZSB4KjQ5Cg==\"</span> <span class=\"bp\">|</span> <span class=\"n\">base64</span> <span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"n\">differ.lean</span>\n\n<span class=\"bp\">$</span> <span class=\"bp\">~/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">differ.lean</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">maxHeartbeats</span><span class=\"bp\">=</span><span class=\"mi\">1000</span>\n<span class=\"n\">differ.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'«»'</span>\n<span class=\"n\">differ.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">pretty</span> <span class=\"n\">print</span> <span class=\"n\">expression</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">raw</span> <span class=\"n\">representation</span><span class=\"o\">)</span>\n\n<span class=\"bp\">$</span> <span class=\"bp\">~/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">differ.lean</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">maxHeartbeats</span><span class=\"bp\">=</span><span class=\"mi\">1000</span>\n<span class=\"n\">differ.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'«»'</span>\n<span class=\"n\">differ.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">Int.rec</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Int.ofNat</span>\n<span class=\"bp\">...</span> <span class=\"o\">[</span><span class=\"n\">large</span> <span class=\"n\">expression</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 303031963,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242110
    },
    {
        "content": "<blockquote>\n<p>We increase the number of heartbeats in our custom memory allocator, and the non-GMP implementation uses this custom allocator.</p>\n</blockquote>\n<p>Ah, okay, that makes sense. This result is no longer surprising to me.</p>",
        "id": 303032230,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Is it clear to you where the big numbers are being created in this example?</p>",
        "id": 303032729,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665242476
    },
    {
        "content": "<p>Is the non-utf8 byte relevant to trigger the discrepancy? That is, can you observe the discrepancy if you use <code>def x: Int := ??</code>?</p>",
        "id": 303033001,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665242600
    },
    {
        "content": "<p>yes, the non-utf8 byte seems to be necessary</p>",
        "id": 303033121,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242646
    },
    {
        "content": "<p>I assume some error handling fallback logic is creating a large number</p>",
        "id": 303033245,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242732
    },
    {
        "content": "<p>though maybe if I get just the right large int I don't need that...</p>",
        "id": 303033359,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242789
    },
    {
        "content": "<p>hm.. this is not triggering it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span><span class=\"mispan>\n<span class=\"k\">#reduce</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">49</span>\n</code></pre></div>",
        "id": 303033499,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665242874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/heartbeats.2C.20GMP.20vs.20no.20GMP/near/303033499\">said</a>:</p>\n<blockquote>\n<p>hm.. this is not triggering it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span><span class=\"mispan>\n<span class=\"k\">#reduce</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">49</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>#reduce</code> and the kernel have special support for reducing terms like that efficiently in one step. That is, they will not unfold <code>Nat.mul</code> and compute the result using the unary encoding.</p>",
        "id": 303033695,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665242960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/heartbeats.2C.20GMP.20vs.20no.20GMP/near/303033245\">said</a>:</p>\n<blockquote>\n<p>I assume some error handling fallback logic is creating a large number</p>\n</blockquote>\n<p>It is unclear to me what is happening here. I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">sorryAx.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"n\">Bool.true</span>\n</code></pre></div>\n<p>as expected. I don't have the \"non-gmp\" version built on my machine right now.</p>",
        "id": 303034292,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665243309
    },
    {
        "content": "<p>Aha! This input exhibits the same behavior, with no bad utf8:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">49</span>\n</code></pre></div>",
        "id": 303047570,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665251764
    },
    {
        "content": "<p>the behavior is: without GMP enabled and with <code>-D maxHeartbeats=1000</code>, we get the error <code>failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)</code>, while with GMP enabled and the same <code>maxHeartbeats</code>, pretty printing succeeds</p>",
        "id": 303047733,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665251873
    },
    {
        "content": "<p>Great. Did you find where the extra \"heartbeats\" are coming from? I am assuming there are no big-numbers being created in this <code>#reduce</code> command.</p>",
        "id": 303129784,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665319804
    },
    {
        "content": "<p>I don't know where the extra heartbeats are coming from.</p>\n<p>The exact counts are: non-gmp version takes 1045 heartbeats, while the gmp version takes 963 heartbeats.</p>",
        "id": 303182043,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665361292
    },
    {
        "content": "<p>That doesn't seem like an excessive difference. GMP is not using an allocator that counts heartbeats so some difference is expected.</p>",
        "id": 303182278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665361580
    },
    {
        "content": "<p>stack trace of an allocation that occurs in the non-gmp version and does not occur in the gmp version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0x00007ffff4b531e2</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">::</span><span class=\"n\">allocate</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">clone</span> <span class=\"bp\">.</span><span class=\"n\">constprop.0</span><span class=\"o\">]</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"mi\">0x00007ffff4b5321a</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"o\">()</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">11</span> <span class=\"mi\">0x00007ffff4b5327a</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">::</span><span class=\"n\">mpz</span><span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">12</span> <span class=\"mi\">0x00007ffff79282d9</span> <span class=\"k\">in</span> <span class=\"n\">lean_cstr_to_nat</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">13</span> <span class=\"mi\">0x00007ffff4dc410f</span> <span class=\"k\">in</span> <span class=\"n\">initialize_Init_Prelude</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">14</span> <span class=\"mi\">0x00007ffff4e293c9</span> <span class=\"k\">in</span> <span class=\"n\">initialize_Init</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">15</span> <span class=\"mi\">0x00007ffff791fce7</span> <span class=\"k\">in</span> <span class=\"n\">lean_initialize</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">16</span> <span class=\"mi\">0x00007ffff77d1f4e</span> <span class=\"k\">in</span> <span class=\"n\">lean_main</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"n\">no</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">17</span> <span class=\"mi\">0x00007ffff4229d90</span> <span class=\"k\">in</span> <span class=\"n\">__libc_start_call_main</span> <span class=\"o\">(</span><span class=\"n\">main</span><span class=\"bp\">=</span><span class=\"n\">main</span><span class=\"bp\">@</span><span class=\"n\">entry</span><span class=\"bp\">=</span><span class=\"mi\">0x555555555060</span> <span class=\"bp\">&lt;</span><span class=\"n\">main</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">argc</span><span class=\"bp\">=</span><span class=\"n\">argc</span><span class=\"bp\">@</span><span class=\"n\">entry</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">argv</span><span class=\"bp\">=</span><span class=\"n\">argv</span><span class=\"bp\">@</span><span class=\"n\">entry</span><span class=\"bp\">=</span><span class=\"mi\">0x7fffffffdcc8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">../</span><span class=\"n\">sysdeps</span><span class=\"bp\">/</span><span class=\"n\">nptl</span><span class=\"bp\">/</span><span class=\"n\">libc_start_call_main.h</span><span class=\"o\">:</span><span class=\"mi\">58</span>\n<span class=\"bp\">#</span><span class=\"mi\">18</span> <span class=\"mi\">0x00007ffff4229e40</span> <span class=\"k\">in</span> <span class=\"n\">__libc_start_main_impl</span> <span class=\"o\">(</span><span class=\"n\">main</span><span class=\"bp\">=</span><span class=\"mi\">0x555555555060</span> <span class=\"bp\">&lt;</span><span class=\"n\">main</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">argc</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">argv</span><span class=\"bp\">=</span><span class=\"mi\">0x7fffffffdcc8</span><span class=\"o\">,</span> <span class=\"n\">init</span><span class=\"bp\">=&lt;</span><span class=\"n\">optimized</span> <span class=\"n\">out</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">fini</span><span class=\"bp\">=&lt;</span><span class=\"n\">optimized</span> <span class=\"n\">out</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">rtld_fini</span><span class=\"bp\">=&lt;</span><span class=\"n\">optimized</span> <span class=\"n\">out</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">stack_end</span><span class=\"bp\">=</span><span class=\"mi\">0x7fffffffdcb8</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 303295835,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665421400
    },
    {
        "content": "<p>I believe this traces back to <a href=\"https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Init/Prelude.lean#L1814\">https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Init/Prelude.lean#L1814</a></p>",
        "id": 303296629,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665421754
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Init/Prelude.lean#L1889\">https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Init/Prelude.lean#L1889</a></p>",
        "id": 303296844,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665421818
    },
    {
        "content": "<p>further along, in the non-gmp version I observe <code>Lean.Subexpr.Pos.push</code> calling <code>lean::mpz::allocate</code>:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Lean/SubExpr.lean#L45\">https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Lean/SubExpr.lean#L45</a></p>",
        "id": 303312085,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665428529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/heartbeats.2C.20GMP.20vs.20no.20GMP/near/303312085\">said</a>:</p>\n<blockquote>\n<p>further along, in the non-gmp version I observe <code>Lean.Subexpr.Pos.push</code> calling <code>lean::mpz::allocate</code>:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Lean/SubExpr.lean#L45\">https://github.com/leanprover/lean4/blob/7b3709e28ab1252a1e175dbe2ebd5c468fa359b9/src/Lean/SubExpr.lean#L45</a></p>\n</blockquote>\n<p>Now that you found it, it makes sense :) <br>\nThanks for investigating!</p>",
        "id": 303320378,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665432927
    }
]