[
    {
        "content": "<p>What is the difference between <code>@[inline]</code> and <code>@[macroInline]</code>?</p>",
        "id": 287004435,
        "sender_full_name": "Mac",
        "timestamp": 1655872966
    },
    {
        "content": "<p><code>[inline]</code> respects Lean calling convention: call-by-value, <code>[macroInline]</code> is just delta+beta reduction.<br>\nExample: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1000</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>If <code>f</code> is marked as <code>[inline]</code>, <code>g</code> becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1000</span><span class=\"o\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>If <code>f</code> is marked as <code>[macroInline]</code>, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 287094097,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655922444
    },
    {
        "content": "<p>We use <code>[macroInline]</code> in definitions such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[macroInline]</span> <span class=\"kd\">def</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>to make sure we get the behavior most users expect: <code>y</code> is not evaluated if <code>x</code> evaluates to <code>true</code>.</p>",
        "id": 287094455,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655922588
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 287135124,
        "sender_full_name": "Mac",
        "timestamp": 1655949784
    }
]