[
    {
        "content": "<p>Why does this work?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">part</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">part</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">part</span> <span class=\"n\">x</span> <span class=\"c1\">-- This doesn't have to be marked as partial?</span>\n</code></pre></div>\n<p>I was expecting <code>safe</code> to be required to be marked as partial as well, as it calls a partial function.</p>",
        "id": 266440330,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640881651
    },
    {
        "content": "<p>What you are talking about would be  the behaviour of<code>unsafe</code> (which is what partial uses under the hood)  The Lean 4 manual states:<br>\nWhen the partial keyword is used, Lean generates an auxiliary unsafe definition that uses general recursion, and then defines an opaque constant that is implemented by this auxiliary definition.</p>\n<p>Meaning that <code>partial</code> desugars to an <code>unsafe def</code> and a <code>constant</code> which is marked with an <code>@implementedBy</code> attribute pointing to the unsafe implementation and is thus logically sound (since <code>constant</code> types have to be inhabited).</p>",
        "id": 266442877,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1640884126
    }
]