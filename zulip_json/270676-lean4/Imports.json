[
    {
        "content": "<p>I seem to be having trouble with importing anything within a lean4 project</p>\n<p>I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">mkdir</span> <span class=\"n\">new_lean_project</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">cd</span> <span class=\"n\">new_lean_project</span>\n<span class=\"bp\">$</span> <span class=\"n\">leanpkg</span> <span class=\"n\">init</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">$</span> <span class=\"n\">leanpkg</span> <span class=\"n\">build</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>Then I make a new file in <code>new_lean_project</code> called <code>bar.lean</code>. But when  I try to <code>import Foo</code>, I get <code>unknown package 'Foo'</code> .  Any ideas as to what's going wrong?</p>",
        "id": 227942417,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1614352837
    },
    {
        "content": "<p>yep, you need to follow the directory structure suggested here: <a href=\"https://leanprover.github.io/lean4/doc/setup.html#leanpkg\">https://leanprover.github.io/lean4/doc/setup.html#leanpkg</a><br>\nyou'll want to place your files in <code>Foo/</code> and have only one root level lean file</p>",
        "id": 228020713,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1614388103
    },
    {
        "content": "<p>Right, I saw that. My directory structure is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">new_lean_project</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo.lean</span>\n<span class=\"bp\">|</span> <span class=\"n\">leanpkg.toml</span>\n<span class=\"bp\">|</span> <span class=\"n\">Build</span><span class=\"bp\">/</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo</span><span class=\"bp\">/</span>\n <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">bar.lean</span>\n</code></pre></div>\n<p>And it is in <code>Foo/bar.lean</code> that I cannot get <code>import Foo</code>  or   <code>import Foo.baz</code> to seem to work</p>",
        "id": 228025286,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1614392261
    },
    {
        "content": "<p>oh yeah, I misread. I tried going through the steps and creating this file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Foo</span><span class=\"bp\">/</span><span class=\"n\">bar.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Foo.baz</span> <span class=\"c1\">-- contains a definition for `x`</span>\n<span class=\"kn\">import</span> <span class=\"n\">Foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"n\">main</span>\n</code></pre></div>\n<p>and everything works just fine. make sure you're using the lean4 nightly build. are you able to rebuild with <code>leanpkg build</code> (is it just an editor issue)?  maybe you have an old version of the lean4 extension? (it should be 0.0.7).</p>",
        "id": 228034556,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1614403171
    },
    {
        "content": "<p>Thank you Scott - I was on the stable release, switched to nightly and everything is working!</p>",
        "id": 228084803,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1614462037
    },
    {
        "content": "<p>This is an old thread but my question suits the topic.<br>\nSuppose I have the files <code>a.lean</code> and <code>b.lean</code> such that <code>b.lean</code> imports <code>a.lean</code>.</p>\n<p>In Lean 3, when something changes in <code>a.lean</code>, switching to <code>b.lean</code> automatically triggers a recompilation of <code>b.lean</code>. In Lean 4, however, I have to comment and uncomment the <code>import a</code> line in <code>b.lean</code> everytime I change something in <code>a.lean</code>. This is not a serious issue, but gets a bit annoying with time.</p>\n<p>Does anyone else experience this? Is it a bug in the Lean 4 VS Code extension?</p>",
        "id": 268405704,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642518999
    },
    {
        "content": "<p>It's not a bug, see the very end of <a href=\"https://leanprover.github.io/lean4/doc/quickstart.html\">https://leanprover.github.io/lean4/doc/quickstart.html</a></p>",
        "id": 268406434,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642519300
    },
    {
        "content": "<p>Oh, thanks!!<br>\nAny particular reason why the automatic update was dropped?</p>",
        "id": 268407029,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642519493
    },
    {
        "content": "<p>It was easier to implement in the new server infrastructure. And at least the developers vastly prefer it, I believe.</p>",
        "id": 268407495,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642519665
    },
    {
        "content": "<p>To elaborate a bit, the issue was mainly that opening a random file deep within mathlib and <em>accidentally</em> (or even intentionally, to try something out) a line would trigger a massive rebuild. So we decided to make the rebuilding something the user has to decide to do consciously, although there could be an option that restores the Lean 3 behaviour (not implemented atm).</p>",
        "id": 268439517,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642532440
    },
    {
        "content": "<blockquote>\n<p>So we decided to make the rebuilding something the user has to decide to do consciously,</p>\n</blockquote>\n<p>Rebuilding is not a conscious action though.  It happens automatically whenever you open a file.  (And with no opt-out, unlike in Lean 3.)  Accidentally changing a line in mathlib will still trigger a massive rebuild.</p>",
        "id": 268441788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642533457
    },
    {
        "content": "<p>Only if you save the mathlib file though. (So the assumption was that saving the file is like committing that you do want the change to persist.)</p>",
        "id": 268442788,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642533926
    },
    {
        "content": "<p>The manual refreshing of file dependencies doesn't completely solve the problem though, right?<br>\nRe-using the example I posted above, but also supposing that <code>b.lean</code> imports such a deep mathlib file that I decided to play with.<br>\nBut then, I change something in <code>a.lean</code> and I see myself forced to hit <code>ctrl+shift+x</code> in <code>b.lean</code>. Then the avalanche starts.</p>\n<p>An alternative solution (or complementary?), although likely harder to implement, is providing a \"safe mode\", in which the generated <code>olean</code> file wouldn't replace the one used for other imports. So you'd be able to play with files safely, no matter how deep they are in the chain of imports</p>",
        "id": 268443022,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642534006
    },
    {
        "content": "<blockquote>\n<p>Only if you save the mathlib file though. (So the assumption was that saving the file is like committing that you do want the change to persist.)</p>\n</blockquote>\n<p>I've set vscode to autosave. :-/</p>",
        "id": 268443114,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642534049
    },
    {
        "content": "<p>Ah, well, that's the problem then :) Indeed we should probably have more configuration on this to fit people's different setups.</p>",
        "id": 268443295,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642534129
    },
    {
        "content": "<blockquote>\n<p>providing a \"safe mode\", in which the generated olean file wouldn't replace the one used for other imports.</p>\n</blockquote>\n<p>Iirc Lean 3 now has something like this, see <a href=\"https://github.com/leanprover-community/lean/pull/208\">leanprover-community/lean#208</a>.</p>",
        "id": 268443863,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642534408
    },
    {
        "content": "<p>That's nice. It tries to accomplish the same goal. But it doesn't provide a safer environment, in the sense that the <code>olean</code> files do get tweaked in the end</p>",
        "id": 268445023,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642534975
    },
    {
        "content": "<p>Lean 3s old mode is very much un-safe though, if not used with caution you can end up breaking logical consistency. I really like the idea of the new non-auto refreshing, I think it will solve a lot of the orange bars of hell trouble we see reported on Zulip</p>",
        "id": 268445126,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642535030
    },
    {
        "content": "<p>Ah well, this \"safe mode\" can be just opening a copy of the file named with a tag to be ignored by git <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 268446083,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642535472
    },
    {
        "content": "<p>Since it was not mentioned above, instead of commenting and uncommenting <code>a.lean</code> one can use the <em>Lean 4: refresh file dependencies</em> vs-code command. This is what I do and it is pretty efficient since this is always close to the top of my recently used commands.</p>",
        "id": 268523332,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1642590487
    },
    {
        "content": "<p>It's <code>Ctrl+Shift+X</code> in VS Code</p>",
        "id": 268523779,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642590745
    },
    {
        "content": "<p>Btw, I'm not sure if <code>Ctrl+Shift+X</code> is such a great keybind <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI picked it more or less arbitrarily because the keys are all close together, not realizing that it conflicts with the \"Open extension sidebar window\" command when the editor isn't focused ...</p>",
        "id": 268526771,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1642592512
    },
    {
        "content": "<p>Re Siddhartha: yeah, it's mentioned in the link Sebastian posted <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 268528037,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642593359
    },
    {
        "content": "<p>is there a way to do relative imports that ignore the lean search path? For example, I have a directory structure like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">Foo</span>\n    <span class=\"bp\">|</span> <span class=\"n\">somemainfile.lean</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar</span>\n    <span class=\"bp\">|</span> <span class=\"n\">adjdacent_files_that_import_files_from_Foo.lean</span>\n    <span class=\"bp\">|</span> <span class=\"n\">file1.lean</span>\n    <span class=\"bp\">|</span> <span class=\"n\">file2.lean</span>\n</code></pre></div>\n<p>The lean search path points to <code>Foo</code>, but I want to import <code>file1.lean</code> into <code>file2.lean</code>. Does anyone know how to get around this? Thanks!</p>",
        "id": 285853999,
        "sender_full_name": "z battleman",
        "timestamp": 1655056449
    },
    {
        "content": "<p>I think you always need to specify the absolute path (in this case <code>Bar.file1</code>)</p>",
        "id": 286161362,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655264861
    },
    {
        "content": "<p>In lean 3 there is support for relative paths via <code>import .foo</code> but it caused problems and mathlib straight up bans its use</p>",
        "id": 286161425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655264930
    },
    {
        "content": "<p>from what I can tell this syntax is no longer recognized in lean 4</p>",
        "id": 286161449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655264987
    }
]