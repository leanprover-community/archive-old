[
    {
        "content": "<p>Looking at the definition of <code>ForIn'</code>, the <code>Membership</code> parameter depends on the outParam of the declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ForIn'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn'</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>is this member still filled via typeclass inference? if so, is it possible to make the notation more indicative of that behavior (maybe allow params of the form <code>[outParam $ Membership α ρ]</code> or something?)</p>",
        "id": 287493951,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656250814
    },
    {
        "content": "<p>In general all outParam's are filled via type class inference, at least that's my understanding.</p>\n<p>If you mark a parameter of a certain type class as an outParam type class inference will start even without this parameter being inferred from the context already and then search for an instance which will in turn determine the value of the outParam. If that instance happens to figure out the Membership instance via type class inference itself it will be filled via that, if it figures it out statically it will be filled statically.</p>",
        "id": 287494894,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656252162
    },
    {
        "content": "<p>ah right, cuz it's set at the instance I guess</p>",
        "id": 287503691,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656263837
    }
]