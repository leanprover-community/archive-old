[
    {
        "content": "<p>Hello, I have been messing around with the extern command.  Using resources such as <a href=\"https://github.com/leanprover/lean4/tree/master/tests/compiler/foreign\">https://github.com/leanprover/lean4/tree/master/tests/compiler/foreign</a>, I have been able to use c++ objects in a lean project by compiling it to an executable.  I would now like to use c++ objects (foreign functions) in lean programs without needing to compile them.  In other words, I would like to be able to use <code>lean --run</code> or the interactive vscode theorem prover with foreign function.  I found a possible method of doing this here: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Using.20result.20from.20foreign.20function.20in.20a.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Using.20result.20from.20foreign.20function.20in.20a.20tactic</a>.  I created the shared object by running <code>leanc -shared -x none test.cpp -o build/bin/plugin.so</code>.  In this instance, <code>test.cpp</code> is the file containing the c++ objects that I want to use, and the file is compiled to <code>build/bin/plugin.so</code>.  This step executes successfully as far as I can tell, but upon passing the file to lean using <code>lean --run --plugin=./build/bin/plugin.so main.lean</code> I get an error:<br>\n<code>terminate called after throwing an instance of 'lean::exception'\n  what():  error, plugin /home/owenr/Documents/LEAN/testing/build/bin/plugin.so does not seem to contain a module 'plugin.Default'\nAborted (core dumped)</code><br>\nIn the resource that I linked above (<a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Using.20result.20from.20foreign.20function.20in.20a.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Using.20result.20from.20foreign.20function.20in.20a.20tactic</a>), it appears that <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span>  seemed experienced the same problem, though I'm not really sure how it was resolved.<br>\nWhat  would be the best way to resolve it?</p>",
        "id": 265752049,
        "sender_full_name": "Owen W",
        "timestamp": 1640132860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465828\">@Owen W</span> A couple notes: </p>\n<ol>\n<li>That post is rather out of date, a lot has changed since then. You should load a shared library containing foreign functions through <code>--load-dynlib</code> not <code>--plugin</code>.</li>\n<li>To use a foreign function interactively in Lean, the shared library  needs to have both the foreign implementation of function <code>extern</code> function <em>and</em> the compiled Lean module with the <code>extern</code> definition.</li>\n</ol>",
        "id": 265754817,
        "sender_full_name": "Mac",
        "timestamp": 1640135166
    },
    {
        "content": "<p>For example, if you have <code>lean_object* foo(lean_object*)</code> in a C file and <code>@[extern \"foo\"] constant foo : IO Unit\" in a Lean file. The resulting </code>foo.so<code> you pass to </code>--load-dynlib` needs to include the compiled versions of both.</p>",
        "id": 265755008,
        "sender_full_name": "Mac",
        "timestamp": 1640135328
    },
    {
        "content": "<p>A step-by-step process would look something like:</p>\n<ol>\n<li>Compile the external C file: <code>cc -c -o ext_foo.o ext_foo.c</code></li>\n<li>Compile the Lean file into a C file: <code>lean -c foo.c Foo.lean</code> </li>\n<li>Compile the Lean C file: <code>leanc -c -o foo.c foo.o</code></li>\n<li>Link them together into a shared library: <code>leanc -shared -o foo.so foo.o ext_foo.o</code></li>\n<li>Load the shared library when interpreting a Lean file using the <code>extern</code> definition: <code>lean --load-dynlib=foo.so test.lean</code></li>\n</ol>",
        "id": 265755231,
        "sender_full_name": "Mac",
        "timestamp": 1640135576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465828\">@Owen W</span> the main difference I see with my code is that you're not using the <code>-L</code> option in <code>leanc</code> to add a directory to the library search path but I might be wrong. I suggest taking a look at the makefiles in: <a href=\"https://github.com/cpehle/lean4-plugin-example\">https://github.com/cpehle/lean4-plugin-example</a></p>",
        "id": 265825008,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1640191196
    },
    {
        "content": "<p>I managed to get my foreign functions working using <code>--load-dynlib</code> thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's instructions. Thanks all for helping to clear up this process.</p>",
        "id": 265830796,
        "sender_full_name": "Owen W",
        "timestamp": 1640194305
    }
]