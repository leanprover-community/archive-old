[
    {
        "content": "<p>Are there plans (or is it even possible) to allow mutual declaration of inductive types and structures in the same block?</p>\n<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282267849,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652457537
    },
    {
        "content": "<p>The example looks like it violates the rule that structures can't be recursive.</p>",
        "id": 282269134,
        "sender_full_name": "Chris B",
        "timestamp": 1652458054
    },
    {
        "content": "<p>I think you have to make <code>Bar</code> just a vanilla (mutual) inductive.</p>",
        "id": 282269253,
        "sender_full_name": "Chris B",
        "timestamp": 1652458107
    },
    {
        "content": "<p>Aren't structures morally equivalent to inductives of a single constructor?</p>\n<p>At any rate, there's an equivalent and valid definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>which is a bit weird to me, since this sort of nesting is justified because it is equivalent to a mutual block, which in turn is equivalent, with a bit of cleverness, to a single inductive family, so these are all conservative extensions of the language. It seems like there's a mismatch in this case</p>",
        "id": 282274774,
        "sender_full_name": "Gabriel Barreto",
        "timestamp": 1652460728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436006\">Gabriel Barreto</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20structure/near/282274774\">said</a>:</p>\n<blockquote>\n<p>Aren't structures morally equivalent to inductives of a single constructor?</p>\n</blockquote>\n<p>I guess it depends on how you define moral equivalence;  the \"not recursive\" proviso is the other half of  what makes a structure. The kernel has  special support for structure projections and structures add inheritance into the mix via <code>extends</code>, so there are some concrete differences.</p>",
        "id": 282276333,
        "sender_full_name": "Chris B",
        "timestamp": 1652461471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"436006\">@Gabriel Barreto</span> <br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>... will work, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>... would try to create a projection for <code>n</code> which it can't because that would escape <code>Prop</code>.</p>",
        "id": 282287211,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1652466682
    }
]