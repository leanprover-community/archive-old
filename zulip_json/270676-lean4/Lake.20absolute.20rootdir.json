[
    {
        "content": "<p>Is there any particular issue with Lake giving an absolute path for the <code>rootDir</code> of a package? I think it would just require a handful of lines to change, mainly <code>CliM.run</code> in <code>Lake/CLI/Main.lean</code>. It would also bump the lake CLI up from BaseIO to IO, but I don't think that is a huge issue?</p>\n<p>Motivation: I was surprised to find out the workspace rootDir was just <code>\".\"</code> after trying to use it in a context where I had changed directories. I'm just using IO.currentDir in my lakefile now.</p>",
        "id": 321470606,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673782003
    },
    {
        "content": "<p>(and it would be decidedly more useful if it were an absolute path IMO)</p>",
        "id": 321470651,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673782029
    },
    {
        "content": "<p>That <code>\".\"</code> can change when the package is being used as a dependency... to something like <code>\"./lake-packages/&lt;cloned pkg dir name&gt;\"</code>. To get the absolute path you can use <code>IO.currentDir</code> and then merge the result with what Lake already tells you. But it seems to me that you shouldn't be needed to deal with that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 321474796,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673784064
    },
    {
        "content": "<p>Can you link to the source where you're needing the absolute path?</p>",
        "id": 321475007,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673784156
    },
    {
        "content": "<p>Uh, sure, lemme push this to a repository</p>",
        "id": 321476830,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673784965
    },
    {
        "content": "<p>(basically I am revamping my CaDiCaL FFI's build stack to use lean-llvm as its toolchain, so I have a copy of lean-llvm in the root directory and i need to refer to that from within a different subdirectory.........)</p>",
        "id": 321476914,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673785014
    },
    {
        "content": "<p><a href=\"https://github.com/JamesGallicchio/LeanSAT/blob/master/lakefile.lean#L68\">https://github.com/JamesGallicchio/LeanSAT/blob/master/lakefile.lean#L68</a></p>",
        "id": 321477368,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673785281
    },
    {
        "content": "<p>The process I spawn has to have the cadical folder as its CWD, but it needs to also get an argument that is relative to the CWD. Better if the argument is simply an absolute path.</p>",
        "id": 321477481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673785331
    },
    {
        "content": "<p>Ah okay, you're using something completely external to the Lake pkg. In this case you indeed need the absolute path</p>",
        "id": 321478224,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673785696
    },
    {
        "content": "<p>I thought rootDir was the intended way to refer to stuff in the package's root directory :/</p>",
        "id": 321478384,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673785790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> idea: get that external path from an environment variable <code>CADICAL_PATH</code> so different people can compile your project without you having to guess where that folder is</p>",
        "id": 321481050,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673786960
    },
    {
        "content": "<p>That would probably work, and I could do the same for the lean-llvm dependency. But I do kind of like it being self contained and self managed :/</p>",
        "id": 321481712,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673787241
    },
    {
        "content": "<p>does Lake have (1) a way for downstream users to pass configuration options up, and (2) a way to get configuration information from the lakefile to the source code?</p>",
        "id": 321481838,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673787296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20absolute.20rootdir/near/321481712\">said</a>:</p>\n<blockquote>\n<p>That would probably work, and I could do the same for the lean-llvm dependency. But I do kind of like it being self contained and self managed :/</p>\n</blockquote>\n<p>Idea 2: write that path on a text file and load it in the <code>lakefile.lean</code></p>",
        "id": 321482057,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673787411
    },
    {
        "content": "<p>Realizing perhaps this is specific enough to this project to move to <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F\">#std4 &gt; SAT core defs in Std?</a>...</p>",
        "id": 321482058,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673787412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20absolute.20rootdir/near/321481838\">said</a>:</p>\n<blockquote>\n<p>does Lake have (1) a way for downstream users to pass configuration options up, and (2) a way to get configuration information from the lakefile to the source code?</p>\n</blockquote>\n<p>I don't think there is a standard way, but you can create your own config file and parse it manually. Or use a JSON file</p>",
        "id": 321482255,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673787508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20absolute.20rootdir/near/321482057\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20absolute.20rootdir/near/321481712\">said</a>:</p>\n<blockquote>\n<p>That would probably work, and I could do the same for the lean-llvm dependency. But I do kind of like it being self contained and self managed :/</p>\n</blockquote>\n<p>Idea 2: write that path on a text file and load it in the <code>lakefile.lean</code></p>\n</blockquote>\n<p>Potentially. And then I would want the root directory <em>of the downstream dependency's package</em> most likely, so that users of the library don't have to dig through the lake-packages stuff to find what they want.</p>",
        "id": 321482369,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673787570
    },
    {
        "content": "<p>The issue of config files is that they're not allowed to be git ignored, so others will have to change them manually and pushing their changes will potentially make it incompatible with <em>your</em> setup. That's why env vars are the usual way for this kind of setup to work</p>",
        "id": 321482732,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673787723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>  I think the main question here is how are you expecting end users (i.e., downstream dependents) to acquire and/or specify the location of the needed lean-llvm and cadical libraries?</p>",
        "id": 321863700,
        "sender_full_name": "Mac",
        "timestamp": 1673970870
    },
    {
        "content": "<p>From your lakefile, it appears you are expecting users to download the necessary files into the root directory of their package (or your package? -- I am not entirely clear on your intent). If so, Arthur is right, you can use <code>IO.currentDir</code> + the package path to get a absolute path. Alternatively, you can also use <code>IO.FS.realPath</code> to convert the relative path to an absolute one.</p>",
        "id": 321865390,
        "sender_full_name": "Mac",
        "timestamp": 1673971279
    },
    {
        "content": "<p>My rational for using an relative path is twofold: 1) there were some problems with <code>IO.FS.realPath</code> when I first wrote that part of Lake that I believe made it not work on all OSes at the time (I think that has since been fixed) 2) using an resolved absolute path result in different directories for relative paths like '...' in the presence of things like symlinks.</p>",
        "id": 321866101,
        "sender_full_name": "Mac",
        "timestamp": 1673971465
    },
    {
        "content": "<p>Totally makes sense. I'm not sure what I want to do, which is why my lakefile is a bit scuffed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I think it will be resolved once I figure out how I want to handle package configuration options.</p>",
        "id": 321884922,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673976403
    }
]