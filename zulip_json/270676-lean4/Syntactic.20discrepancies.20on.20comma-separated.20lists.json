[
    {
        "content": "<p>Lean 4 is inconsistent in the way it parses comma-separated lists in commands and terms. My<br>\nunderstanding is that the nominal shape uses <code>manyIndent</code> as in <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Term.lean#L95\">structure-instance\nparsing</a><br>\nwhich allows the following styles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">snd</span><span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">noSep</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"seven\"</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">commaSep</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"seven\"</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">commaSepTrail</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"seven\"</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The first and last styles have the nice property that all lines are homogeneous which arguably<br>\nsimplifies edits.</p>\n<p>But not all comma-separated lists work this way. In class/structure definitions for instance,<br>\n<code>extends</code> takes a list of classes/types which has to be comma-separated with no trailing comma.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Class1</span>\n<span class=\"kd\">class</span> <span class=\"n\">Class2</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Class3</span>\n<span class=\"kd\">extends</span>\n  <span class=\"n\">Class1</span><span class=\"o\">,</span>\n  <span class=\"n\">Class2</span>\n\n<span class=\"c1\">-- does not compile</span>\n<span class=\"kd\">class</span> <span class=\"n\">Class3</span>\n<span class=\"kd\">extends</span>\n  <span class=\"n\">Class1</span>\n  <span class=\"n\">Class2</span>\n<span class=\"c1\">-- does not compile</span>\n<span class=\"kd\">class</span> <span class=\"n\">Class3</span>\n<span class=\"kd\">extends</span>\n  <span class=\"n\">Class1</span><span class=\"o\">,</span>\n  <span class=\"n\">Class2</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>This is not the only place this happens. The <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L91\">parser rule for\n<code>extends</code></a><br>\nuses <code>sepBy1</code>, looking for that in <code>src/Lean/Parser/Command.lean</code> yields the following</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L55\"><code>.{ &lt;ids&gt; }</code></a></li>\n<li><code>deriving</code>, <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L68\">here</a>, <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L79\">here</a> and <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L98\">here</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L91\"><code>extends</code></a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L118\"><code>attribute</code></a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Command.lean#L122\"><code>renaming</code></a></li>\n</ul>\n<p><code>sepBy1</code> is used in other <code>src/Lean/Parser/*</code> files but I'm not knowledgeable enough to (easily)<br>\ndiscern whether having the more flexible list parser would make sense.</p>\n<p>I was wondering whether there is interest in fixing (some of) these discrepancies. I would be glad<br>\nto contribute on this matter if there is interest, although it's not clear to me how involved such a<br>\ncontribution would get and how deep an understanding of Lean's internals I would need.</p>",
        "id": 281442403,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651845653
    },
    {
        "content": "<p>It would be great to get feedback on this proposal. Some of the examples you provided are great targets for a whitespace sensitivity,  but others are not (e.g., universe parameters <code>.{ &lt;ids&gt; }</code>).<br>\nRegarding the implementation itself, I think this is not a good match for first-time contributors because of staging issues. The person making the change must understand really well the staging mechanism we use to bootstrap Lean.</p>",
        "id": 281488476,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651867983
    },
    {
        "content": "<p>While I'm not sure about adding whitespace sensitivity (which needs individual review), I think that adding an optional final separator to ~everywhere <code>sepBy1</code> is used is a very nice quality of life improvement. That is, <code>rw [a, b]</code> works so <code>rw [a, b,]</code> should also work</p>",
        "id": 281506101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651880657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntactic.20discrepancies.20on.20comma-separated.20lists/near/281506101\">said</a>:</p>\n<blockquote>\n<p>That is, <code>rw [a, b]</code> works so <code>rw [a, b,]</code> should also work</p>\n</blockquote>\n<p>I have mixed feeling about it. Seems like another degree of freedom for us to tame new contributors with a formatting rule in mathlib. How do you see it improving UX?</p>",
        "id": 281506520,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651881180
    },
    {
        "content": "<p>It is quite annoying for edit distance stuff. If I have something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span>\n  <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">baz</span><span class=\"o\">,</span>\n  <span class=\"n\">qux</span><span class=\"o\">,</span> <span class=\"n\">gla</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>then if I delete <code>gla</code> I have to remove the comma before it too, and if I delete <code>qux</code> then I have to also remove the comma on the previous line. Since it's a syntax error otherwise, I'm not getting any compiler advice in the meantime, so I can't easily remove <code>qux</code> and undo to see the difference between the goal states (this is more important for <code>simp</code> than<code>rw</code> since <code>simp</code> doesn't get mid-tactic goal states). This also increases the number of changed lines for git purposes, which can make reviewing harder (did they also change <code>foo</code> to <code>foo'</code> or something? No, it's just the comma at the end that changed).</p>",
        "id": 281507312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882020
    },
    {
        "content": "<p>Rust does this pretty uniformly and I have found it to be an unmitigated good thing</p>",
        "id": 281507349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882067
    },
    {
        "content": "<p>it's also one of the differences between JSON and the JSON dialect that vscode uses in its config files (or actual JS objects) that you will notice if you work with it enough</p>",
        "id": 281507532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882287
    },
    {
        "content": "<p>That's a good point. And now that I think about commas, some proofs have methodical commas after every <code>}</code> or tactic and some don't (when the goal is closed). And both are fine</p>",
        "id": 281507604,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651882367
    },
    {
        "content": "<p>We already have tons and tons of syntactic variations. A formatter will one day lay down the law, but I don't see any reason not to be permissive in the language if it doesn't have negative parsing side effects</p>",
        "id": 281507717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882549
    },
    {
        "content": "<p>in any case it doesn't prevent us from having a style guide</p>",
        "id": 281507774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882608
    },
    {
        "content": "<p>This is one reason I believe people use the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">a</span>\n<span class=\"o\">,</span> <span class=\"n\">b</span>\n<span class=\"o\">,</span> <span class=\"n\">c</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>notation in haskell but I have to say I find this style abhorrent</p>",
        "id": 281507868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651882761
    },
    {
        "content": "<p>I also feel that allowing \"unneeded\" commas is helpful.</p>\n<p>Besides the <code>rw</code> comments made by Mario, I also find it hard (in Lean 3) to have a comma after every command <em>except the last one</em> when debugging <code>meta</code> code.  For instance, if I want to find which line is problematic in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">command1</span><span class=\"o\">,</span>\n   <span class=\"n\">command2</span><span class=\"o\">,</span>\n   <span class=\"n\">command3</span><span class=\"o\">,</span>\n   <span class=\"n\">command4</span>\n</code></pre></div>\n<p>I would like to be able to comment the <code>command</code>s from the bottom up, but I also have to get rid of the previous comma each time.</p>\n<p>I'm not sure if this is the same issue and is probably also affected by my inexperience.</p>",
        "id": 281524021,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651905948
    },
    {
        "content": "<p>that one is not a problem in lean 4 since you don't need the commas anymore</p>",
        "id": 281524456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651906717
    },
    {
        "content": "<p>One more reason to seriously start learning Lean4!</p>",
        "id": 281524711,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651907084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's argument for optional trailing commas is the exact reason I opened this topic, when I first said basically the same thing to <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> privately. (I'm originally a Rustacean myself.)</p>",
        "id": 281531204,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651916810
    },
    {
        "content": "<p>It seems like the whole opt-trail-comma + whitespace thing needs discussion and a more expert contributor to take care of it. But I quite like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's idea of just modifying <code>sepBy1</code> (and potentially others I missed) with an opt-trail-comma, sounds like something I might be able to do</p>",
        "id": 281531286,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651916929
    },
    {
        "content": "<p>my recommendation would be to have a variant of <code>sepBy1</code> that has the optional trailing separator; every use needs to be reviewed</p>",
        "id": 281531317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651916983
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 281531370,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651917007
    },
    {
        "content": "<p>If I understand the contribution workflow correctly, the next step would be to create a detailed RFC issue. Let me know if I should do that</p>",
        "id": 281531451,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651917152
    },
    {
        "content": "<p>What if the user writes <code>rw [h hx]</code> when they didn't mean <code>rw [h, hx]</code>? That is, the user wants to apply <code>hx</code> to <code>h</code> but it might be parsed as two different arguments for <code>rw</code>.</p>\n<p>In other words, maybe simply adding an optional comma after the <code>rw</code>/<code>simp</code> arguments and before the <code>]</code> solves this issue</p>\n<p>This would make <code>rw [,]</code> legal but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 281533464,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651920213
    },
    {
        "content": "<p>Internal commas are not optional. The only way I think that would be okay is if it is using newlines and whitespace sensitivity as separator instead</p>",
        "id": 281536228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651923855
    },
    {
        "content": "<p>The grammar I am thinking of is <code>term,* \",\"?</code></p>",
        "id": 281536270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651923936
    },
    {
        "content": "<p>although that syntax allows <code>,</code> alone, as you say</p>",
        "id": 281536318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651923968
    },
    {
        "content": "<p>A BNF description would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sepByT</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">::=</span> <span class=\"n\">A</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">sepByT</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">sepBy1T</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">::=</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">sepBy1T</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This also works with newline separation if <code>B</code> is <code>\",\" | \"\\n\"</code>, although indentation matching doesn't quite work like that</p>",
        "id": 281536523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651924227
    },
    {
        "content": "<p>I just noticed that <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Basic.lean#L1788\"><code>sepBy1</code> has an optional argument for optional trailing separator</a></p>",
        "id": 281537412,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651925283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm struggling to understand what <code>sepBy1</code> precisely does (looked at <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Parser/Basic.lean#L613\"><code>sepByFnAux</code></a>, but I don't have a lot of time at this precise moment), but as far as I can tell it parses lists of at least one element, right?</p>\n<p>If that's the case then the grammar is <code>term (\",\" term)* \",\"?</code>, so it does not allow <code>,</code> alone. Of course what we're saying here also applies to potentially empty lists, but it seems there's interesting things to improve just by considering calls to <code>sepBy1</code>. Could we maybe take care of these first? It seems to me like a relatively low hanging fruit suited for a first issue</p>",
        "id": 281538006,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651926195
    },
    {
        "content": "<p>Yes, the BNF I just wrote above has two variants, for lists of at least 1 (<code>sepBy1T</code>) and for length 0 or more (<code>sepByT</code>)</p>",
        "id": 281538120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651926307
    },
    {
        "content": "<p>The first one can also be written <code>sepByT(A, B) ::= (A B)* A?</code> and the second one is <code>sepBy1T(A, B) ::= A (B A)* B?</code> like you say</p>",
        "id": 281538212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651926420
    },
    {
        "content": "<p>Right my bad, replied too fast</p>",
        "id": 281538290,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651926554
    },
    {
        "content": "<p>It looks like <code>sepByFn</code> already supports trailing separators</p>",
        "id": 281538419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651926726
    },
    {
        "content": "<p>In fact, it looks like there is even short syntax for it: <code>term,*,?</code> is what I was calling <code>sepByT</code></p>",
        "id": 281538567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651926991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntactic.20discrepancies.20on.20comma-separated.20lists/near/281538419\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>sepByFn</code> already supports trailing separators</p>\n</blockquote>\n<p>So do <code>sepBy</code> and <code>sepBy1</code> as I pointed out</p>",
        "id": 281538573,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651927021
    },
    {
        "content": "<p>the slightly longer syntax for that is <code>sepBy(term, \",\", \", \", allowTrailingSep)</code></p>",
        "id": 281538587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651927052
    },
    {
        "content": "<p>so it seems like there is nothing to do here besides reviewing existing uses of <code>,*</code> to see whether <code>,*,?</code> is better</p>",
        "id": 281538665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651927159
    },
    {
        "content": "<p>Yeah that's the low hanging fruit I was thinking of</p>",
        "id": 281538749,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651927211
    }
]