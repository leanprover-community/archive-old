[
    {
        "content": "<p>The following piece of code causes <code>unfold</code> to run for time exponential in the length of either string (while constantly allocating memory). Sorry for the somewhat contrived MWE <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>, I wasn't able to cut it down any further. Confirmed on yesterday's nightly <code>leanprover/lean4:nightly-2022-06-29</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wrapper</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span><span class=\"o\">:</span> <span class=\"n\">Wrapper</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Wrapper.extend</span><span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">wrap</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((),</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Assign</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">Assign</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Block</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span><span class=\"o\">:</span> <span class=\"n\">Block</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">runOp</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"n\">runBlock</span> <span class=\"n\">r</span><span class=\"bp\">;</span> <span class=\"bp\">.</span><span class=\"n\">wrap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runAssign</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">op</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runOp</span> <span class=\"n\">op</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runBlock</span><span class=\"o\">:</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runAssign</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">wrap</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\"r\"</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\"APrettyLongString\"</span> <span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bug</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">runAssign</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extend.snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">runAssign</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extend.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--unfold b -- extremely slow</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288083209,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656620931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> Thanks for reporting this issue. I pushed a fix for it. <br>\n<a href=\"https://github.com/leanprover/lean4/commit/14260f454b9b73d85aafef5e7be79c58ce4381b5\">https://github.com/leanprover/lean4/commit/14260f454b9b73d85aafef5e7be79c58ce4381b5</a><br>\nThe problem was not <code>unfold</code>, but type checking the proof generated using <code>unfold</code> in the kernel.<br>\nWhen checking whether <code>s.i</code> and <code>r.i</code> are definitionally equal, the kernel was always trying to reduce them. However, in your example, this is very expensive, and checking whether <code>s</code> and <code>r</code> are definitionally equal first is a better strategy.<br>\nI have another commit that also fixes the problem in the <code>isDefEq</code> for the <code>MetaM</code> monad.</p>",
        "id": 288107047,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656636973
    },
    {
        "content": "<p>Thanks for the super quick fixes, this is helping a ton. Reducing entire projects never felt so worthwhile :)</p>",
        "id": 288151362,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656671962
    }
]