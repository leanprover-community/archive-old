[
    {
        "content": "<p>Why does this example not work as one would expect?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[extern \"some_extern\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"o\">:=</span> <span class=\"n\">A.data</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implementedBy</span> <span class=\"n\">get</span><span class=\"o\">]</span> <span class=\"n\">Array.data</span>\n</code></pre></div>\n<p>It claims there is a type mismatch, but I can't for the life of me see why</p>",
        "id": 280883974,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651503343
    },
    {
        "content": "<p>The check is currently syntactic and universe level parameter names are taken into account. The following works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[extern \"some_extern\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> &lt;&lt;&lt;&lt; Changed here -/</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"o\">:=</span> <span class=\"n\">A.data</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implementedBy</span> <span class=\"n\">get</span><span class=\"o\">]</span> <span class=\"n\">Array.data</span>\n</code></pre></div>\n<p>I will improve this, and make sure the universe levels parameter names are not taken into account.</p>",
        "id": 280885005,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651503699
    },
    {
        "content": "<p>Ah, weird, okay -- thank you for giving it a look!</p>",
        "id": 280885355,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651503812
    },
    {
        "content": "<p>It also seems like the calling convention modifiers prevent it from matching; is there a way to modify the conventions on auto-generated accessors? (if not I can just put another def between them)</p>",
        "id": 280885720,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651503950
    }
]