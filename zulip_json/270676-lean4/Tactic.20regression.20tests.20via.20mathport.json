[
    {
        "content": "<p>I wrote a first draft of an extension to mathport that translates<code>TacticInvocation</code>s into regression tests. Code here: <a href=\"https://github.com/JLimperg/mathport\">https://github.com/JLimperg/mathport</a></p>\n<p>However, I haven't managed to actually test this extension yet. When I run the modified mathport, it reports 0 tactic invocations parsed by <code>parseAST3</code>. I think I followed the build instructions, using the latest release with <code>download-release.sh</code>. Any idea what's going wrong?</p>",
        "id": 292265708,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659802102
    },
    {
        "content": "<p>For reproduction: I tried roughly</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>make build\nmake source\n./download-release.sh nightly-2022-07-18\nmake TARGET=data.list.basic port-mathbin-single\n</code></pre></div>",
        "id": 292265883,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659802350
    },
    {
        "content": "<p>After some more investigation, it seems like the tactic invocations are never exported to the <code>.ast.json</code> files. E.g. <code>data/vector.lean</code> contains some tactic calls, but <code>data/vector.ast.json</code> does not have a <code>tactics</code> section (or at least <code>grep</code> doesn't find <code>tactics</code> there). This also applies when I delete the sources downloaded via <code>download-release.sh</code> and run <code>make predata</code> myself. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  are the tactic invocations supposed to be there?</p>",
        "id": 292308508,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659862819
    },
    {
        "content": "<p>You have to explicitly enable it, they aren't there by default because the data gathering is expensive</p>",
        "id": 292308533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659862875
    },
    {
        "content": "<p>looks like you need to do <code>lean --make --ast --tsast</code> if you want tactic states</p>",
        "id": 292308755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659863169
    },
    {
        "content": "<p>If we're going to be using this data regularly in mathport we should probably enable that flag in the CI that generates the ast.json files</p>",
        "id": 292308853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659863343
    },
    {
        "content": "<p>Nice, thanks! I'll first test the whole thing locally and then we can talk about CI integration and so on.</p>",
        "id": 292322499,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659882290
    },
    {
        "content": "<p>The <code>--tsast</code> works, but unfortunately I get a segfault during <code>predata</code> generation:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ make predata\n...\ncd sources/mathlib &amp;&amp; lean --make --recursive --ast --tlean src\n/home/jannis/.nocdp/mathport/sources/mathlib/src/logic/basic.lean: exists_eq_right'make: *** [Makefile:79: mathbin-predata] Segmentation fault\n</code></pre></div>\n<p>This also seems to happen with a fresh checkout of <code>mathport</code> master and without <code>--tsast</code>, though I need to test it from scratch to be sure I didn't mess anything up. In the meantime, any suggestions?</p>",
        "id": 292324800,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659885490
    },
    {
        "content": "<p>Is that a segfault in the <code>lean</code> invocation?</p>",
        "id": 292325115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659885948
    },
    {
        "content": "<p>can you run it without the makefile?</p>",
        "id": 292325157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659885964
    },
    {
        "content": "<p>Yes, it's Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ cd sources/mathlib/\n$ find -name \"*.olean\" -delete\n$ lean --make --recursive --ast --tlean src\n/tmp/mathport/sources/mathlib/src/logic/basic.lean: forall_eq_apply_imp_ifffish: Job 1, 'lean --make --recursive --ast -â€¦' terminated by signal SIGSEGV (Address boundary error)\n</code></pre></div>\n<p>This is on a fresh checkout of mathport master.</p>",
        "id": 292325448,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659886500
    },
    {
        "content": "<p>With mathlib3 commit <code>903e8941f0862f6c34f28babbb607842a7f8a6c7</code> (the last on July 18th, when the last mathport release was made), there seems to be no segfault.</p>",
        "id": 292325848,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659887084
    },
    {
        "content": "<p>can you reproduce on core lean?</p>",
        "id": 292325876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659887117
    },
    {
        "content": "<p>I.e. does it segfault when run on the standard library? No, these calls always went through without a hitch.</p>",
        "id": 292326013,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659887303
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/lean/pull/752\">lean#752</a></p>",
        "id": 292331693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659895354
    },
    {
        "content": "<p>The failing file is <code>algebra/hierarchy_design.lean</code>, which contains some really deep exprs as a result of encoding some huge docstrings as strings</p>",
        "id": 292331782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659895495
    },
    {
        "content": "<p>That was quick. Thanks!</p>",
        "id": 292335428,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1659900453
    }
]