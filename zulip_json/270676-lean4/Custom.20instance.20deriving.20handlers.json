[
    {
        "content": "<p>This is something of a followup to this <a href=\"#narrow/stream/270676-lean4/topic/deriving.20extensions\">very old thread</a>:</p>\n<p>I have some experience with metaprogramming and wanted to take a crack and writing an extension to the instance deriving mechanism, but I'm quickly realizing I'm out of my depth here. I know for a fact I'm doing things wrong because I'm always running into the <code>default handlers have not been implemented yet, ...</code> error no matter how simple of an example I try.</p>\n<p>I first started by copying the template from the deriving <code>BEq</code> file, and tried to strip it down to the easiest possible cases, but I'm finding debugging tricky, so I'm not sure where to even begin fixing my problems. Eventually I just copy and pasted the whole <code>BEq</code> deriving file and tried to modify it for <code>NBEq</code> (not BEq) and I was still getting the same error, which made me think I'm fundamentally misunderstanding things...</p>\n<p>I've included a minimal (non)working example below if that might help in figuring out what I'm doing wrong</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Util</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">making_handler</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Deriving.Foo</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mkFooFuns</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">auxFunName</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.auxFunNames</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">auxFunName</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Bar\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkFooInstanceCmds</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">mkContext</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">declName</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkFooFuns</span> <span class=\"n\">ctx</span> <span class=\"n\">declName</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkInstanceCmds</span> <span class=\"n\">ctx</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">declName</span><span class=\"o\">])</span>\n  <span class=\"n\">return</span> <span class=\"n\">cmds</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkFooHandler</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmds</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"n\">none</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkFooInstanceCmds</span> <span class=\"n\">declNames</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"n\">cmds.forM</span> <span class=\"n\">elabCommand</span>\n  <span class=\"n\">return</span> <span class=\"n\">true</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerBuiltinDerivingHandler</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span> <span class=\"n\">mkFooHandler</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab.Deriving.Foo</span>\n<span class=\"kd\">end</span> <span class=\"n\">making_handler</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">testing_handler</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">con1</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n  <span class=\"bp\">|</span> <span class=\"n\">con2</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- default handlers have not been implemented yet, class: 'Foo' types: [test]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">testing_handler</span>\n</code></pre></div>",
        "id": 290391838,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1658417672
    },
    {
        "content": "<p>(I should also mention that I tried having the instance handler in a separate module and importing it, but that doesn't work either)</p>",
        "id": 290391948,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1658417728
    }
]