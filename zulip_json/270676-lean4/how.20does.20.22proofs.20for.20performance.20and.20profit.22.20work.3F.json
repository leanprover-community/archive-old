[
    {
        "content": "<p>I'm really excited for lean 4 and I've been following the various lectures. Today I re-visited an older one from about 9 months ago. There's a slide that says you can use proofs to make more efficient machine code.</p>\n<p>The examples given were:</p>\n<ul>\n<li>avoiding array bounds checks if you have a proof that your index is in bounds</li>\n<li>avoiding execution of a continuation  function <code>k</code>, if you know that <code>x = y -&gt; k () = true</code> and you know that <code>x</code> and <code>y</code> are pointer equal</li>\n</ul>\n<p>Now, I obviously see how you can write more efficient code <em>by hand</em> if you know these properties hold, but in the slide it said, that the compiler generates better code. How does that work?</p>",
        "id": 228931450,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1614940354
    },
    {
        "content": "<p>The short answer is that the compiler does not know about proofs (only how to detect and eliminate them), but some primitives do:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/e228ca38b812af098046b63f049d3c0e5f6c8e0c/src/Init/Data/Array/Basic.lean#L36-L41\">https://github.com/leanprover/lean4/blob/e228ca38b812af098046b63f049d3c0e5f6c8e0c/src/Init/Data/Array/Basic.lean#L36-L41</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/e228ca38b812af098046b63f049d3c0e5f6c8e0c/src/Init/Util.lean#L43-L44\">https://github.com/leanprover/lean4/blob/e228ca38b812af098046b63f049d3c0e5f6c8e0c/src/Init/Util.lean#L43-L44</a> (see also <a href=\"https://icfp20.sigplan.org/details/icfp-2020-papers/13/Sealing-Pointer-Based-Optimizations-Behind-Pure-Functions\">https://icfp20.sigplan.org/details/icfp-2020-papers/13/Sealing-Pointer-Based-Optimizations-Behind-Pure-Functions</a>)</li>\n</ul>\n<p>In both cases we use optimized but unsafe code (once in C++, once in unsafe Lean) that (we assume) becomes safe by the presence of the proof</p>",
        "id": 228933769,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614941672
    },
    {
        "content": "<p>Ah I see, you use the <code>implementedBy</code> or <code>extern</code> for an efficient manual implementation and use the pure reference implementation for type checking purposes only.</p>",
        "id": 228938375,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1614944047
    }
]