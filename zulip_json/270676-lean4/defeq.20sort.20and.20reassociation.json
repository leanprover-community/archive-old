[
    {
        "content": "<p>I have a simple inductive type for expression with a single binary operation. I would like to write a function that reassociates and orders all terms in the expression. The trouble is that I want this function to work well with defeq. </p>\n<p>The expression type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>I want function <code>def Expr.sort : Expr → Expr </code> such that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>   <span class=\"c1\">-- The `by rfl` is important!</span>\n</code></pre></div>\n<hr>\n<p>My attempt:<br>\nWhat is the problem with the <code>Expr.sort</code> function such that is causes troubl to <code>rfl</code> tacitc?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.sort</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.sort</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n    <span class=\"k\">then</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n    <span class=\"k\">then</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sort</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.op</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.toString</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{a}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({x.toString} * {y.toString})\"</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.toString</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- check if it is working</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sort</span>\n\n<span class=\"c1\">-- swapping works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- left association does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 301082761,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664302506
    },
    {
        "content": "<p>I can do it using bubble sort on List but I would like to understand what is wrong with the function <code>Expr.sort</code> above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.bubblesort</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨[],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">bubblesort</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨[],</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_self</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">bubblesort</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n        <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">zs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">]⟩</span>\n      <span class=\"k\">else</span>\n        <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.vals</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.vals.append</span> <span class=\"n\">y.vals</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.fromVals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">fromVals</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.sort'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.fromVals</span> <span class=\"n\">e.vals.bubblesort.1.reverse</span>\n\n\n<span class=\"c1\">-- It works now!</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sort'</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 301083008,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664302579
    },
    {
        "content": "<p>In my code I'm actually interested in doing this for expressions with one binary and one unary operations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>But then one needs to define a bit more complicated ordering to define. </p>\n<p>Effectively, I'm interested in finding a unique representative for each expression under assumption what <code>op</code> is commutative and associative operation and the function returning this representative should respect defeq.</p>",
        "id": 301084559,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664303071
    }
]