[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mydecl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">mydecl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getIdent</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">mydecl</span> <span class=\"bp\">→</span> <span class=\"n\">Ident</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mydecl</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getType</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">mydecl</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mydecl</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"sd\">/-- From a term `s` and a list of pairs `(i, t) ; Ident × Term`, create the syntax</span>\n<span class=\"sd\">where `s` is preceded with universal quantifiers `∀ i : t`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">×</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"n\">s</span> <span class=\"n\">tail</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Foo\"</span> <span class=\"n\">decls</span><span class=\"o\">:</span><span class=\"n\">mydecl</span><span class=\"bp\">*</span> <span class=\"s2\">\":\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span>  <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">$</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">decls.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">getIdent</span> <span class=\"n\">decl</span><span class=\"o\">,</span> <span class=\"n\">getType</span> <span class=\"n\">decl</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">$</span> <span class=\"n\">elabTerm</span> <span class=\"n\">g</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I try to create in a complicated way the stupid expression <code>∀ (x y : Nat), y = x + 7 → 2*(x + 7) = 2*(x + 7)</code> but, as can be seen from the <code>dbg_trace</code> output, Lean doesn't get the universe of <code>Nat</code>.</p>",
        "id": 301506420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664476425
    },
    {
        "content": "<p>How could I fix that?</p>",
        "id": 301506476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664476442
    },
    {
        "content": "<p>It seems to have worked fine, you need to call <code>instantiateMVars</code> to remove the mvars from the expression though</p>",
        "id": 301508179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664476953
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 301515850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664479641
    }
]