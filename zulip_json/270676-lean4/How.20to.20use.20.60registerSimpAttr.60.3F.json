[
    {
        "content": "<p>Are simp sets supported and how am I supposed to use <code>registerSimpAttr</code>?</p>\n<ul>\n<li>It is unclear to me where am I supposed to call <code>registerSimpAttr</code> to properly register a simp attribute.</li>\n<li>Looking at <code>Notation.lean</code> it looks like that <code>simp</code> does not define <code>simp  (with simp sets)?</code>, so simp sets are not  currently supported? How difficult would it be to add the support?</li>\n</ul>\n<p>My attempt, the stuff I would like to get working is commented out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">mySimpExtension</span> <span class=\"o\">:</span> <span class=\"n\">SimpExtension</span>  <span class=\"bp\">←</span> <span class=\"n\">registerSimpAttr</span> <span class=\"bp\">`</span><span class=\"n\">mysimp</span> <span class=\"s2\">\"My simp set\"</span>\n\n<span class=\"c1\">-- @[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- @[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_add_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- @[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lassoc_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">expand_mul_add</span><span class=\"o\">,</span> <span class=\"n\">expand_add_mul</span><span class=\"o\">,</span> <span class=\"n\">lassoc_add</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- simp with mysimp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 275912288,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647698934
    },
    {
        "content": "<p>I think this is close:<br>\nFirst, declare this in a file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">initialize</span> <span class=\"n\">mySimpExtension</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span> <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">mysimp</span> <span class=\"s2\">\"My simp set\"</span>\n</code></pre></div>\n<p>Then you should be able to use it in another file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Parser.Tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">simpLemma</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSimpLemma</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp \"</span> <span class=\"s2\">\"with \"</span> <span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tagName</span> <span class=\"o\">:=</span> <span class=\"n\">tag.getId</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpMap</span> <span class=\"o\">:=</span> <span class=\"n\">mySimpExtension.ext.getState</span> <span class=\"n\">env</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">decls</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">declName</span> <span class=\"k\">in</span> <span class=\"n\">simpMap</span> <span class=\"k\">do</span>\n    <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls.push</span> <span class=\"n\">declName</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">decls</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpLemmas</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"c1\">-- decls.map toSimpLemma</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">simpLemmas</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_add_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lassoc_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp only [expand_mul_add, expand_add_mul, lassoc_add]</span>\n  <span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">mysimp</span>\n</code></pre></div>",
        "id": 275917324,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647706555
    },
    {
        "content": "<p>Someone else more skillful with terms of type <code>Syntax</code> might be able to help you with the implementation of <code>toSimpLemma</code></p>",
        "id": 275917392,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647706669
    },
    {
        "content": "<p>A flaw in my code: I'm not using <code>tagName</code>. I went straight to <code>mySimpExtension</code>.<br>\nIdeally <code>mySimpExtension</code> should be retrieved by using <code>tagName</code></p>",
        "id": 275917911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647707475
    },
    {
        "content": "<p>Cool this looks good! </p>\n<blockquote>\n<p>First, declare this in a file:</p>\n</blockquote>\n<p>In what file? How do I reference that file in the file where I want to use the <code>mysimp</code> attribute?</p>",
        "id": 275918112,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647707771
    },
    {
        "content": "<p>Make a \"dummy file\" with that declaration alone. You can't use <code>mySimpExtension</code> in the same file it was registered</p>",
        "id": 275918209,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647707940
    },
    {
        "content": "<p>Then make another file B with the syntax declaration and tactic implementation, which imports the previous file A. And to use your new <code>simp</code>, just import the file B (which will import the tag attribute transitively)</p>",
        "id": 275918280,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647708023
    },
    {
        "content": "<p>Ok, so I have to use lake to set up the project. There is no other way how to import a file, right?</p>",
        "id": 275918353,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647708136
    },
    {
        "content": "<p>Not that I know of, at least</p>",
        "id": 275918365,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647708185
    },
    {
        "content": "<p>Great, so I have the attribute working!</p>",
        "id": 275918443,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647708339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> if you figure out how to implement <code>toSimpLemma</code> please let me know <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 275918839,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647708851
    },
    {
        "content": "<p>I'm looking at Lean's internals. It looks like that alternatively it would be possible to modify <code>mkSimpContext</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkSimpContext</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eraseLocal</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ignoreStarArg</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">MkSimpContextResult</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">ctx</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"'simp_all' tactic does not support 'discharger' option\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">dischargeWrapper</span> <span class=\"bp\">←</span> <span class=\"n\">mkDischargeWrapper</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpOnly</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isNone</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpTheorems</span> <span class=\"bp\">←</span>\n    <span class=\"k\">if</span> <span class=\"n\">simpOnly</span> <span class=\"k\">then</span>\n      <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addConst</span> <span class=\"bp\">``</span><span class=\"n\">eq_self</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">getSimpTheorems</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I would modify <code>getSimpTheorems</code> to accept <code>Name</code> of the simp extension with default value <code>simp</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getSimpTheorems</span> <span class=\"o\">(</span><span class=\"n\">attrName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">SimpTheorems</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getSimpExtension</span> <span class=\"n\">attrName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getTheorems</span>\n</code></pre></div>\n<p>The question is:</p>\n<ul>\n<li>How to turn <code>Name</code> to <code>SimpExtension</code>?</li>\n<li>How to get <code>attrName</code> from the syntax <code>stx</code> inside <code>mkSimpContext</code>. This probably requires modifying the syntax definition of <code>simp</code> in Notation.lean</li>\n</ul>",
        "id": 275919022,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647709107
    },
    {
        "content": "<p>I'm getting an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">for_in</span><span class=\"bp\">%'</span> <span class=\"kd\">notation</span>\n  <span class=\"n\">ForIn</span> <span class=\"o\">(</span><span class=\"n\">ReaderT</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">StateRefT'</span> <span class=\"n\">IO.RealWorld</span> <span class=\"n\">State</span> <span class=\"n\">Elab.TermElabM</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ScopedEnvExtension.StateStack</span> <span class=\"n\">Meta.SimpEntry</span> <span class=\"n\">Meta.SimpEntry</span> <span class=\"n\">Meta.SimpTheorems</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.221</span>\n</code></pre></div>\n<p>on the line <code>for declName in simpMap do</code></p>",
        "id": 275919368,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647709539
    },
    {
        "content": "<p>Ohh, I was using <code>SimpExtension</code> instead of <code>TagAttribute</code>. With <code>TagAttribute</code> it works.</p>",
        "id": 275919560,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647709802
    },
    {
        "content": "<p>But then do you want to implement another tactic? I was trying to delegate the task to <code>simp</code> as is</p>",
        "id": 275920555,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647711279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275918839\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> if you figure out how to implement <code>toSimpLemma</code> please let me know <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n</blockquote>\n<p>This code reveals what needs to be created:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">tc</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">expand_mul_add</span><span class=\"o\">])</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">tc</span>\n</code></pre></div>\n<p>The result is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Tactic.simp</span> <span class=\"s2\">\"simp\"</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"s2\">\"only\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\"[\"</span> <span class=\"o\">[(</span><span class=\"n\">Tactic.simpLemma</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">expand_mul_add._</span><span class=\"bp\">@.</span><span class=\"n\">Main._hyg.869</span><span class=\"o\">)]</span> <span class=\"s2\">\"]\"</span><span class=\"o\">]</span> <span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 275920642,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647711420
    },
    {
        "content": "<p>I think the <code>._@.Main._hyg.869</code> part can be ignored</p>",
        "id": 275920660,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647711455
    },
    {
        "content": "<p>And yeah, the question is how to turn </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">expand_mul_add</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Tactic.simpLemma</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">expand_mul_add</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275920727,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647711532
    },
    {
        "content": "<blockquote>\n<p>How to turn Name to SimpExtension?</p>\n</blockquote>\n<p>This would be part of the <code>simp with</code> implementation: an environment extension for tracking associations of names to SimpExtensions</p>",
        "id": 275921203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647712274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275920727\">said</a>:</p>\n<blockquote>\n<p>And yeah, the question is how to turn </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">expand_mul_add</span>\n</code></pre></div>\n<p>into</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Tactic.simpLemma</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">expand_mul_add</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpLemma</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax.node</span> <span class=\"n\">default</span> <span class=\"n\">nullKind</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">default</span> <span class=\"n\">nullKind</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">Syntax.ident</span> <span class=\"n\">SourceInfo.none</span> <span class=\"n\">default</span> <span class=\"s2\">\"expand_mul_add\"</span> <span class=\"o\">[]]</span>\n</code></pre></div>\n<p>It is producing correct output on <code>dbg_trace</code> not sure if it is valid <code>Syntax</code>. I have to go now, so I can't test it.</p>",
        "id": 275921325,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647712416
    },
    {
        "content": "<p>You shouldn't create a syntax to pass to <code>simp</code>, the point of <code>SimpExtension</code> is to store a compiled <code>SimpLemmas</code> object that can be passed directly to <code>simp</code> without having to break it down into lemmas again</p>",
        "id": 275921501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647712626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275921501\">said</a>:</p>\n<blockquote>\n<p>You shouldn't create a syntax to pass to <code>simp</code>, the point of <code>SimpExtension</code> is to store a compiled <code>SimpLemmas</code> object that can be passed directly to <code>simp</code> without having to break it down into lemmas again</p>\n</blockquote>\n<p>I agree with that, but I'm just trying to finish Arthur's approach and learning about Lean in the process :)</p>",
        "id": 275921659,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647712817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm interested in knowing the proper way of doing this <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 275921719,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647712890
    },
    {
        "content": "<p>I think the correct way is to modify  <code>mkSimpContext</code> to use the correct <code>SimpExtension</code> in <code>getSimpTheorems</code>.</p>\n<p>This would also involve modifying the parser for simp such that it can accept the simp attribute.</p>",
        "id": 275922342,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647713842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275921203\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How to turn Name to SimpExtension?</p>\n</blockquote>\n<p>This would be part of the <code>simp with</code> implementation: an environment extension for tracking associations of names to SimpExtensions</p>\n</blockquote>\n<p>Where can I find an example of an environment extension? I have no clue how to do that.</p>",
        "id": 275922657,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647714267
    },
    {
        "content": "<p>This worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- file A</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">initialize</span> <span class=\"n\">mySimpExtension</span> <span class=\"o\">:</span> <span class=\"n\">SimpExtension</span> <span class=\"bp\">←</span> <span class=\"n\">registerSimpAttr</span> <span class=\"bp\">`</span><span class=\"n\">mysimp</span> <span class=\"s2\">\"My simp set\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"c1\">-- import file A</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Parser.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSimpLemma</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpLemma</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkNullNode</span><span class=\"o\">,</span> <span class=\"n\">mkNullNode</span><span class=\"o\">,</span> <span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp \"</span> <span class=\"s2\">\"with \"</span> <span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tagName</span> <span class=\"o\">:=</span> <span class=\"n\">tag.getId</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpTheorems</span> <span class=\"bp\">←</span> <span class=\"n\">mySimpExtension.getTheorems</span>\n  <span class=\"k\">let</span> <span class=\"n\">lemmas</span> <span class=\"o\">:=</span> <span class=\"n\">simpTheorems.lemmaNames.fold</span>\n    <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">toSimpLemma</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">lemmas.reverse</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_add_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lassoc_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">mysimp</span>\n</code></pre></div>",
        "id": 275925106,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647717610
    },
    {
        "content": "<p>But I still don't know how to retrieve <code>mySimpExtension</code> using <code>tagName</code>. I just hardcoded it instead</p>",
        "id": 275925215,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647717818
    },
    {
        "content": "<p>So this is just as good for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"mysimp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lemmas</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mySimpExtension.getTheorems</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lemmaNames.fold</span>\n    <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">toSimpLemma</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">lemmas.reverse</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[mysimp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">expand_mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[mysimp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">expand_add_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[mysimp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">lassoc_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mysimp</span>\n</code></pre></div>",
        "id": 275925739,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647718612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275925215\">said</a>:</p>\n<blockquote>\n<p>But I still don't know how to retrieve <code>mySimpExtension</code> using <code>tagName</code>. I just hardcoded it instead</p>\n</blockquote>\n<p>I will add an API for this.</p>",
        "id": 275925912,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647718809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> My motivation was rather manual though. Mario said that this solution of building the sintax nodes for each lemma was not ideal</p>",
        "id": 275926034,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647718980
    },
    {
        "content": "<p>Or do you intend to add an API for the native support of <code>simp with &lt;ident&gt;</code>?</p>",
        "id": 275926099,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647719050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I didn't read the thread, but I am assuming the API is independently useful.</p>",
        "id": 275926121,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647719083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275926099\">said</a>:</p>\n<blockquote>\n<p>Or do you intend to add an API for the native support of <code>simp with &lt;ident&gt;</code>?</p>\n</blockquote>\n<p>We can add this to the core repo too, but I barely used this feature in Lean 3. If it is a popular, we can add it.</p>",
        "id": 275926198,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647719169
    },
    {
        "content": "<p>I found <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266189490\">this thread</a>.</p>\n<p>And this answer from Mario:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266230920\">said</a>:</p>\n<blockquote>\n<p>Correct me if I'm wrong, but although <code>registerSimpAttr</code> can be used to declare simp sets, it isn't possible to <em>use</em> simp sets currently, because <code>simp</code> does not support the syntax <code>simp [] with my_simp_set</code></p>\n</blockquote>",
        "id": 275926476,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647719604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275926198\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20use.20.60registerSimpAttr.60.3F/near/275926099\">said</a>:</p>\n<blockquote>\n<p>Or do you intend to add an API for the native support of <code>simp with &lt;ident&gt;</code>?</p>\n</blockquote>\n<p>We can add this to the core repo too, but I barely used this feature in Lean 3. If it is a popular, we can add it.</p>\n</blockquote>\n<p>It isn't very common but it is used by mathlib enough that we need it for mathport. Let me also take the opportunity to propose the alternative syntax <code>simp [..my_simp_set]</code> if you do implement this, I think it's a more intuitive way to write it than <code>with</code> since a simp set is basically a set of lemmas.</p>",
        "id": 275940510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647739896
    },
    {
        "content": "<p>Good one. Another point is that <code>simpa</code> has both <code>using</code> and <code>with</code> arguments. So either of those could be conflicting</p>",
        "id": 275944483,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647746570
    },
    {
        "content": "<p>I think that could even work without the <code>..</code></p>",
        "id": 275955304,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647764974
    },
    {
        "content": "<p>Although the absence of <code>..</code> can add some overhead: since we can't know explicitly whether an argument is a simp set ot a simp lemma, we'd need to check everytime even though most of the times it won't be a simp set.</p>\n<p>Regarding readability, I'd prefer the <code>..my_simp_set</code> so I know before hand that <code>my_simp_set</code> is not a theorem (taking into consideration that the simp set name might not be so obvious)</p>",
        "id": 275976766,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647795473
    },
    {
        "content": "<p>I don't think the overhead is anything to be concerned about. We already have to check the argument to see if it is a definition or a lemma; much more important is the effect on the user experience: is it important to visibly indicate that a simp set is not a lemma? Note that lemmas can sometimes act like simp sets all on their own, if they happen to be conjunctions of equalities</p>",
        "id": 275977249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796040
    }
]