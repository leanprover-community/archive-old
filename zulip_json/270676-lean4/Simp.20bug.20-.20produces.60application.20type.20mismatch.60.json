[
    {
        "content": "<p>I'm playing around with combinatory logic and I have encountered a problem with <code>simp</code> tactic. It seems to produce an invalid expression on nightly build.</p>\n<p>This example defines <code>S</code> combinator with <code>B</code>(comp) and <code>C</code>(swap) and diagonal(no clue what is the official name)</p>\n<p>Define <code>comp, swap, diag</code> and their reductions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">comp_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">swap_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">swap</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">diag_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">diag</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">diag</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n</code></pre></div>\n<p>Define <code>subs</code>(S combinator) in terms of the previous three and prove it is indeed S combinator</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">subs_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subs</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">whnf</span><span class=\"bp\">;</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">subs_reduce'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subs</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">subs</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>On nighly build <code>leanprover/lean4:nightly-2021-10-13</code> proving <code>subs_reduce'</code> fails with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">comp</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n</code></pre></div>",
        "id": 257711901,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634310110
    },
    {
        "content": "<p>For some reason after couple of simplifications it produces an invalid goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">comp</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the correct goal should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">comp</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Continuing from that point on works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finish_proof</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>  <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 257714359,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634310905
    },
    {
        "content": "<p>The <code>simp.rewrite</code> trace is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">swap_reduce</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">)))</span> <span class=\"n\">f</span>\n  <span class=\"n\">g</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n<span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">comp_reduce</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))</span>\n  <span class=\"n\">g</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">comp</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">comp_reduce</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257723598,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634314437
    },
    {
        "content": "<p>Manually repeating these rewrites works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subs_reduce''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))))</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">swap_reduce</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_reduce</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_reduce</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 257724464,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634314778
    },
    {
        "content": "<p>Here is a self contained version that produces invalid goal just after one step of <code>simp.rewrite</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">diag</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">comp_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n<span class=\"kd\">def</span> <span class=\"n\">swap_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">swap</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">diag_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">diag</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">diag</span><span class=\"o\">]</span> <span class=\"n\">done</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">comp</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">subs_reduce'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"bp\">→</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">diag</span><span class=\"o\">)</span> <span class=\"n\">foo</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>   <span class=\"c1\">--  application type mismatch: comp diag (foo g) x</span>\n</code></pre></div>",
        "id": 257727130,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634315808
    },
    {
        "content": "<p>Maybe related to this <a href=\"https://github.com/leanprover/lean4/commit/1282fb2d97bc45873c050aa62f95a263c528f68d\">commit</a>. It even has a comment about reversed order of arguments.</p>",
        "id": 257729621,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634316880
    },
    {
        "content": "<p>Pushed a fix for this bug.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/6b2303b24305deab05a7609985f03af3e9fdece5\">https://github.com/leanprover/lean4/commit/6b2303b24305deab05a7609985f03af3e9fdece5</a></p>",
        "id": 258099609,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634590914
    }
]