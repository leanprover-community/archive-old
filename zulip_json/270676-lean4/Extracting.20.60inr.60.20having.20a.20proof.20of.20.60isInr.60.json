[
    {
        "content": "<p>With the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extrr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.elim</span> <span class=\"n\">hE</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ey</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">xeq</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">???</span> <span class=\"o\">(</span><span class=\"n\">isInr</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">ey</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">isInr</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm starting with the easy direction first: prove that if something is <code>.inr y</code>, then it is <code>isInr</code>.</p>",
        "id": 299816367,
        "sender_full_name": "cognivore",
        "timestamp": 1663696656
    },
    {
        "content": "<p>It feels like I got really close to finishing the easy proof, but I have no idea how to tell it that since <code>x = .inr ey</code>, <code>isInr x = isInr $ .inr ey</code>.</p>\n<p>And since <code>.inr ey</code> is <code>.inr</code>, it's also <code>isInr</code>.</p>",
        "id": 299816632,
        "sender_full_name": "cognivore",
        "timestamp": 1663696734
    },
    {
        "content": "<p>I got help from Winston from Yatima:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extrr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.elim</span> <span class=\"n\">hE</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ey</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">xeq</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">xeq</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>Now my only question is -- how to go back from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>r</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> isInr \\ x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span></span></span></span> to  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>y</mi><mo>:</mo><mi>x</mi><mo>=</mo><mi mathvariant=\"normal\">.</mi><mi>i</mi><mi>n</mi><mi>r</mi><mtext> </mtext><mi>y</mi></mrow><annotation encoding=\"application/x-tex\"> \\exists y : x = .inr \\ y </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">.</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 299817544,
        "sender_full_name": "cognivore",
        "timestamp": 1663697020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">hx</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Note that I changed <code>true</code> to <code>True</code> (and similarly for false) as these are the true/false props, whereas the lowercase ones are the bools</p>",
        "id": 299824027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663699254
    },
    {
        "content": "<p>Here is an alternative construction</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">isInr</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 299824739,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663699502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Extracting.20.60inr.60.20having.20a.20proof.20of.20.60isInr.60/near/299824027\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">hx</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Note that I changed <code>true</code> to <code>True</code> (and similarly for false) as these are the true/false props, whereas the lowercase ones are the bools</p>\n</blockquote>\n<p>False.elim doesn't work on 09-15 toolchain <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 299828609,
        "sender_full_name": "cognivore",
        "timestamp": 1663700669
    },
    {
        "content": "<p>LOL</p>",
        "id": 299828735,
        "sender_full_name": "cognivore",
        "timestamp": 1663700722
    },
    {
        "content": "<blockquote>\n<p>Note that I changed true to True</p>\n</blockquote>",
        "id": 299828755,
        "sender_full_name": "cognivore",
        "timestamp": 1663700727
    },
    {
        "content": "<p>Sorry!</p>",
        "id": 299828758,
        "sender_full_name": "cognivore",
        "timestamp": 1663700730
    },
    {
        "content": "<p>Right, note that <code>false : Bool</code> while <code>False : Prop</code> in Lean4</p>",
        "id": 299828924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663700778
    },
    {
        "content": "<p>Yes, I tried to do <code>Prop</code> straight away, but didn't understand that I got tricked by <code>Coe</code>.</p>",
        "id": 299828992,
        "sender_full_name": "cognivore",
        "timestamp": 1663700806
    },
    {
        "content": "<p>I assumed you wanted to use props, given the type signature of <code>isInr</code>.</p>",
        "id": 299828994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663700806
    },
    {
        "content": "<p>Absolutely!</p>",
        "id": 299829018,
        "sender_full_name": "cognivore",
        "timestamp": 1663700814
    },
    {
        "content": "<p>Now this stopped working :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extrr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.elim</span> <span class=\"n\">hE</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ey</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">xeq</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">xeq</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 299829135,
        "sender_full_name": "cognivore",
        "timestamp": 1663700829
    },
    {
        "content": "<p>1 sec</p>",
        "id": 299829182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663700840
    },
    {
        "content": "<p>I'm trying to figure out how to rewrite it without the triangle anyway. I don't understand triangle yet.</p>",
        "id": 299829260,
        "sender_full_name": "cognivore",
        "timestamp": 1663700863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extrr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hE</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">hx</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 299829496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663700938
    },
    {
        "content": "<p>I am trying to avoid tactics mode when I can so far. Your first line is equivalent to me calling <code>Exists.elim hE</code>, right?</p>",
        "id": 299829724,
        "sender_full_name": "cognivore",
        "timestamp": 1663700996
    },
    {
        "content": "<p>How does <code>rw</code> tactic understand what does it have to rewrite <code>x = .inr y</code> to? and how does <code>trivial</code> then pick it up?<br>\nMy intuition was that I have to use <code>rfl</code> to show <code>.inr y = x</code></p>",
        "id": 299829960,
        "sender_full_name": "cognivore",
        "timestamp": 1663701067
    },
    {
        "content": "<p>yeah essentially, here is a term-mode proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extrr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists.elim</span> <span class=\"n\">hE</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">xeq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xeq</span> <span class=\"bp\">▸</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 299830066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663701113
    },
    {
        "content": "<p>Also, why does <code>trivial</code> work, whereas <code>simp</code> doesn't? (Sorry for a ton of stupid questions, I'm too stupid to understand the \"Theorem Proving\" book from the first read)</p>",
        "id": 299830142,
        "sender_full_name": "cognivore",
        "timestamp": 1663701132
    },
    {
        "content": "<p><code>trivial</code> is the constructor of <code>True</code>.</p>",
        "id": 299830314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663701186
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=True#doc\">docs4#True</a></p>",
        "id": 299830451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663701239
    }
]