[
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover/lean4/blob/3fc226dc6dc204917dbc42e1d21bd1268ad2b0de/src/Lean/Compiler/Util.lean#L12\">this line</a> we see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">objectType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>        <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">_obj</span>\n</code></pre></div>\n<p>We also noticed that having a prelude file and having a simple <code>def id (a : α) : α := a</code> in it creates this in the environment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">id._rarg._cstage2</span> <span class=\"o\">:</span> <span class=\"n\">_obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">_obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">_obj</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>What does <code>_obj</code> mean?</p>",
        "id": 286943674,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655830493
    },
    {
        "content": "<p>It's the IR representation of the last category (+<code>Nat</code>) from <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c\">https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c</a></p>",
        "id": 286944185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655830698
    }
]