[
    {
        "content": "<p>I'm again fighting with TC and unfortunately I do not have mwe yet. </p>\n<p>tl;dr - the question: How do I set up and example that tests definatorial equality? for example <code>Module ℝ Y =?= Module ℝ ?m.7927</code> is doing something weird inside of TC, how do I compartmentalize it and test it directly?</p>\n<hr>\n<p>The problem is rather odd, this example fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">IsSmooth</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">∥²</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>(A bit of context, <code>T</code> implements <code>GetElem T X Y (fun _ _ =&gt; True)</code> and <code>Y</code> is vector space with a norm. )</p>\n<p>The odd thing is that when you move the argument <code>(i : X)</code> before the the colon it suddenly works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">IsSmooth</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">∥²</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<hr>\n<p>The TC error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">IsSmooth</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">∥²</span>\n</code></pre></div>\n<p>TC tracing abruptly ends with message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">Y</span> <span class=\"bp\">=?=</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">m.7927</span>\n</code></pre></div>\n<p>by inspecting the code, this should be always followed by one of these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"s2\">\"success\"</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"s2\">\"failure assigning\"</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"s2\">\"failure\"</span>\n</code></pre></div>\n<p>Unless, there is there is an exception thrown in <code>(← isDefEq mvarTypeBody instTypeBody)</code> or <code>(← isDefEq mvar instVal)</code>.  This is happening inside of <code>tryResolveCore</code>.</p>\n<p>So there must be a problem with checking the definatorialy equality. Hence the question at the top. How do I set up  a test for <code>Module ℝ Y =?= Module ℝ ?m.7927</code>?</p>",
        "id": 289572657,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657793247
    },
    {
        "content": "<p>After some investigation, the call <code>(← isDefEq mvarTypeBody instTypeBody)</code> throws an exception. The message data of the exception is \"internal exception <a href=\"https://github.com/leanprover-community/mathlib/pull/0\">#0</a>\", what does that mean?</p>",
        "id": 289638891,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657827342
    },
    {
        "content": "<p>And for the caught exception <code>e</code> the  <code>e.getRef</code>  is <code>&lt;missing&gt;</code> and <code>e.hasSyntheticSorry</code> is <code>false</code>.</p>",
        "id": 289639889,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657827843
    },
    {
        "content": "<p>Interestingly enough, switching to <code>isDefEqGuarded</code> solves the TC problem but causes bunch of other problems. For example <code>#check 1</code> errors with <code>OfNat ?m.8278 1</code>. In general, type deduction seems a bit broken after it.</p>",
        "id": 289641540,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657828681
    },
    {
        "content": "<p>I have found the problematic instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunType</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">ℝ</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Module.mk</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It should be more or less direct copy from mathlib as mathlib4 does not have modules yet.</p>\n<p>The class <code>FunType T X Y</code> is saying that <code>T</code> behaves like <code>X -&gt; Y</code>. This class extends <code>GetElem T X Y (fun _ _ =&gt; True)</code>.</p>\n<p>This instance was giving me troubles in the past but priority tweak fixed it. This time I have to mark it as local to resolve the problem, but that is not an ideal solution. Hopefully I should be able to produce mwe now. </p>\n<hr>\n<p>Anyone is working with modules in Lean 4? What is your definition? How do you define scalar multiplication? My <code>MulAction</code> extends <code>HMul</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289731896,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657894150
    }
]