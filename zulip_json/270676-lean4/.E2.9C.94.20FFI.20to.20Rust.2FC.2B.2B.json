[
    {
        "content": "<p>Amazing! Now it works!</p>\n<p>As mentioned earlier in this thread, I think the goto way is to just use Rust's C FFI and avoid C++ completely.</p>",
        "id": 318794247,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1672530300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> has marked this topic as resolved.</p>",
        "id": 318795900,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672531670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20FFI.20to.20Rust.2FC.2B.2B/near/318785395\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> Okay it works now (thanks everyone!!)<br>\nThe misconception I had was that I didn't think we could call Rust code <em>from C</em>. I thought it was like Lean, which allows us to call C code from it.</p>\n<p>Here's the PR with the changes: <a href=\"https://github.com/yatima-inc/FFI.lean/pull/1\">https://github.com/yatima-inc/FFI.lean/pull/1</a><br>\nYou might as well just fetch the <code>c</code> branch</p>\n</blockquote>\n<p>There is btw also nothing stopping you from calling Lean code in C or C++, we have quite a few ocasions in the compiler where we do this, in general the C FFI mechanism is quite often implemented in a bidirectional way</p>",
        "id": 318795984,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672531734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544752\">@Tage Johansson</span> we have found some issues with our previous template and some fixes for them. This is how we do the setup for Rust FFI now: <a href=\"https://github.com/yatima-inc/RustFFI.lean/commit/d8f9dbff843852a37ab2bf8794a03c00ae1fcaff\">https://github.com/yatima-inc/RustFFI.lean/commit/d8f9dbff843852a37ab2bf8794a03c00ae1fcaff</a></p>\n<p>In short, we were having some issues when importing a package that was setup as the previous version. Lake wouldn't know where to run <code>cargo build</code> from nor where to look for the static lib.</p>",
        "id": 320670691,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673435208
    }
]