[
    {
        "content": "<p>I have an expression that looks something like <code>∀ x, (fun y =&gt; P y) x ∧ ...</code>.  I want to change it to <code>∀ x, P x ∧ ...</code>.  That's easy enough to do by, basically, taking the expression apart, calling <code>Core.betaReduce</code> on the part that needs to be reduced, and then putting it back together.  I've done that, and it seems to work.  But the expression I'm passing to <code>Core.betaReduce</code> has the form <code>app (lam y ...) (bvar 0)</code>, so it has a loose bvar, and I've read that some functions that operate on expressions can run into problems if you pass an expression with loose bvars.  I could avoid the issue by using <code>Meta.withLocalDecl</code>, but it seems like a lot of trouble if it isn't necessary.  So my question is: Is there any reason to avoid passing an expression with loose bvars to <code>Core.betaReduce</code>?</p>",
        "id": 298651216,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1663096649
    },
    {
        "content": "<p>I don't know about <code>betaReduce</code> in particular, but indeed the Lean API in general is really not a fan of loose bvars. So you might as well learn the 'proper' way to do things like this, which I've described <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#deconstructing-expressions\">here</a>.</p>",
        "id": 298733401,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663147962
    },
    {
        "content": "<p>Oh, I was thinking I would need withLocalDecl, but I see now that telescopes do what I want.  Thanks.</p>\n<p>But I also realized that, in my particular case, there's a much easier solution.  The beta reduction of <code>app (lam y t b bi) (bvar 0)</code> is just <code>b</code>!  That's how de Bruijn indices work.  So there's no need to call Core.betaReduce at all; just pull out <code>b</code>.</p>",
        "id": 298759003,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1663157605
    }
]