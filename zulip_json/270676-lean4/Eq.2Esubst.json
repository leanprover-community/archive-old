[
    {
        "content": "<p>In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.subst</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>I get the error message <code>application type mismatch Eq.subst h1 argument h1 has type b = a * m : Prop but is expected to have type b = a * m * n : Prop</code>.  If I use <code>@Eq.subst</code> and supply the motive explicitly, it works.  So I guess Lean isn't able to figure out the motive, but I'm surprised at that.  Isn't inferring the motive pretty straightforward in this case?</p>",
        "id": 305151705,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666273117
    },
    {
        "content": "<p><code>elab_as_eliminator</code> isn't much used in Lean 4. (It was added at some point to help porting mathlib but it isn't acutally used.)</p>\n<p>In term mode, you need to supply the motive for pretty much all recursors. Instead of <code>@Eq.subst</code>, you can use <code>Eq.subst (motive:=_)</code> so the other implicit arguments are filled in.</p>\n<p>That said, in the case of <code>Eq.subst</code>, you can simply use <code>▸</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 305212686,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1666290592
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/pull/1679\">lean4#1679</a></p>",
        "id": 305213919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666290996
    },
    {
        "content": "<p>I was assuming <code>h1 ▸ h2</code> was just shorthand for <code>Eq.subst h1 h2</code>--that's what it said in TPIL 3.  But I see that TPIL 4 says something slightly different--it says that <code>▸</code> is \"a macro built on top of Eq.subst and Eq.symm.\"  So I guess it has changed.<br>\nActually, when I hover over <code>h1 ▸ h2</code> in Lean it tells me that <code>▸</code> is a macro built on top of Eq.rec and Eq.symm.</p>",
        "id": 305216122,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666291762
    },
    {
        "content": "<p>It was changed, because <code>\\t</code> in lean 3 was very often useless / didn't do the obvious thing even when <code>by rw h; exact e</code> would work - which has exactly the same amount of information as <code>h \\t e</code></p>",
        "id": 305216475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666291884
    },
    {
        "content": "<p><code>Eq.subst</code> is limited to propositions; <code>Eq.ndrec</code> is the same but applies to any sort. <code>Eq.rec</code> is the natural eliminator for equality but it has a more complex signature that is rarely of much use.</p>",
        "id": 305221494,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1666293675
    }
]