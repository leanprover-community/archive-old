[
    {
        "content": "<p>Hey everyone, I am learning Lean. I wrote a simple loop to find the sqrt of a number:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- used because Exists hides the witness</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">is_valid</span> <span class=\"o\">:</span> <span class=\"n\">is_sqrt</span> <span class=\"n\">n</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sqrt'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sqrt</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- recursive - details not relevant</span>\n<span class=\"kd\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">r</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_valid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_sqrt</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- how to extract is_valid from inside the match here?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm returning a <code>Sqrt</code> (which has the result and proof of correctness) from the helper <code>sqrt'</code>. I use that in <code>sqrt</code> which just returns the <code>Nat</code> and then try to conventionally prove it with <code>sqrt_valid</code>, but I'm not sure how. Two questions:</p>\n<ol>\n<li>How can I \"extract\" the <code>is_valid</code> Prop before <code>sqrt</code> throws it away for my <code>sqrt_valid</code> proof?</li>\n<li>Is it considered bad practice to mix the program and the proof like I did in the signature of <code>sqrt'</code>?</li>\n</ol>",
        "id": 318686670,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1672460463
    },
    {
        "content": "<p>You could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsSqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sqrt'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">//</span> <span class=\"n\">IsSqrt</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- recursive - details not relevant</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">val</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsSqrt.sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSqrt</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">sqrt'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</code></pre></div>\n<p>Note that I renamed <code>is_sqrt</code> to <code>IsSqrt</code> (as Lean 4 convention is to use UpperCamelCase for propositions) and replaced your <code>Sqrt</code> type with the subtype <code>{ r // IsSqrt n r }</code>.</p>\n<p>Generally I wouldn't say that it's bad practice to mix programs and proofs like this. Though in this case it feels kind of awkward to have <code>sqrt</code> wrapping <code>sqrt'</code> like that. Also, separating programs and proofs to some degree can help with avoiding \"dependent type hell\".</p>",
        "id": 318701188,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1672475238
    },
    {
        "content": "<p>This is really helpful, thank you! Subtype was what I was actually looking for.<br>\nSomething I realized from this was, you don't have to find a \"reference\" to the .property from the original invocation of <code>sqrt</code>. You can just invoke it again as <code>sqrt' n</code>, it's taking in the same <code>n</code> as a parameter, so the result will be definitionally equal for <code>exact</code>. (Like, <code>n</code> is a sort of unique \"binding\", although I'm still wrapping my head around exactly what that means lol)</p>",
        "id": 318773521,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1672513432
    }
]