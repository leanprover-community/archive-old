[
    {
        "content": "<p>I've been enjoying Lean 4 a great deal and I'm really impressed by the powerful macro system which has so far helped me delay learning more about the deeper parts of Lean 4 metaprogramming. However, there are some things that are beyond the macro system. I know the docs aren't ready yet and I'm generally happy to wait... but Lean 4 is so exciting!</p>\n<p>Perhaps this is not a wise place to get started learning about using the Lean 4 monads, but I thought I'd ask since I couldn't find any examples in the tests or elsewhere and there's a similar thing I want to do to port some old Lean 3 code. Let's say I want to add a simple tag attribute called <code>tellMeYourName</code> such that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[tellMeYourName]</span> <span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>prints out \"My name is blah\" (or some other inconsequential but observable action). How would I go about doing that in Lean 4?</p>",
        "id": 223786153,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1611447468
    },
    {
        "content": "<p>Users will be able to define their own attributes. However, the attribute API is still changing. We will document and add examples as soon as it is stable.</p>",
        "id": 223853685,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611547953
    },
    {
        "content": "<p>Now that env extensions have landed, my understanding is that user attributes are now possible, but I could really use a usage example. This isn't working for me:<br>\n<code>Test/A.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"s2\">\"foo \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">fooRef</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooAttr</span> <span class=\"o\">:</span> <span class=\"n\">AttributeImpl</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo\"</span>\n  <span class=\"n\">add</span>\n  <span class=\"bp\">|</span> <span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">attrKind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">fooRef.modify</span> <span class=\"k\">fun</span> <span class=\"n\">foos</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foos.push</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">stx.isNameLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">registerAttributeOfDecl</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">fooAttr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p><code>Test.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Test.A</span> <span class=\"c1\">-- unknown declaration 'fooAttr'</span>\n<span class=\"kd\">@[foo bar]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 249012075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628617656
    },
    {
        "content": "<p>I haven't double-checked that this works, but FYI <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> implemented this here: <a href=\"https://github.com/JLimperg/aesop/blob/master/Aesop/Config.lean#L370-L396\">https://github.com/JLimperg/aesop/blob/master/Aesop/Config.lean#L370-L396</a></p>",
        "id": 249013906,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1628618495
    },
    {
        "content": "<p>You have to use the <code>initialize</code> command. We have examples here<br>\n<a href=\"https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_attr\">https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_attr</a><br>\nIt is part of our test suite, and it is being tested on all platforms by the CI.<br>\nOther relevant examples for user extensions<br>\n<a href=\"https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_ext\">https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_ext</a><br>\n<a href=\"https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_opt\">https://github.com/leanprover/lean4/tree/master/tests/leanpkg/user_opt</a></p>",
        "id": 249023363,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1628623115
    }
]