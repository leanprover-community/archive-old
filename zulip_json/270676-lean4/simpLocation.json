[
    {
        "content": "<p>Currently in <code>src/Lean/Elab/Tactic/Simp.lean</code> the definition <a href=\"https://github.com/leanprover/lean4/blob/c2a5e37/src/Lean/Elab/Tactic/Simp.lean#L221\"><code>evalSimp</code></a> is doing two different types of work:</p>\n<ol>\n<li>munging the tactic <code>Syntax</code> to extract arguments</li>\n<li>delegating to other lower level tactics based on the form of the <code>location</code> argument extracted from the <code>Syntax</code>.</li>\n</ol>\n<p>I'd prefer if these were separate, in particular so that in another tactic I can run the simplifier by specifying a <code>location</code>. As <code>evalSimp</code> is currently written, I'd either have to reproduce most of its logic, or synthesize a <code>Syntax</code> expression in order to actually use <code>evalSimp</code>.</p>\n<p>Is it reasonable to want this separation? Perhaps I'm not yet used to \"the Lean 4 way\"!</p>\n<p><a href=\"https://github.com/leanprover/lean4/compare/master...semorrison:semorrison/simpLocation?expand=1\">https://github.com/leanprover/lean4/compare/master...semorrison:semorrison/simpLocation?expand=1</a> is my proposed modification, introducing a <code>simpLocation</code> tactic.</p>",
        "id": 261098550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636612586
    },
    {
        "content": "<p>the \"lean 4 way\" seems to be to construct syntax to run the tactic frontend. I'm also not particularly happy with this state of affairs</p>",
        "id": 261099967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636613624
    },
    {
        "content": "<p>similar observations also apply to most command parsers, they parse their syntax and delegate right away, so you can't really run them unless you have a syntax, it's not like lean 3 where there is a backend tactic that takes exprs and such</p>",
        "id": 261100049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636613732
    },
    {
        "content": "<p>The local reason I wanted this was experimenting with porting <code>split_ifs</code>. Part of <code>split_ifs</code> delegates to <code>simp only [if_pos, if_neg, dif_pos, dif_neg]</code> along with a <code>discharger</code>.</p>\n<p>It is set up so that that list of lemmas is obtained from an attribute. The \"syntactical\" <code>simp</code> tactic in Lean 4 implemented by <code>evalSimp</code> doesn't support passing lemmas by attribute. It seems like it would be quite unpleasant to synthesize a <code>Syntax</code> after you've done whatever work is required to assemble the list of lemmas.</p>",
        "id": 261101928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636616016
    },
    {
        "content": "<p>The alternative would be to directly call the underlying tactics in <a href=\"https://github.com/leanprover/lean4/blob/c2a5e37c60cefb2d9dab293ee695f85659e1ad72/src/Lean/Meta/Tactic/Simp/Main.lean\"><code>src/Lean/Meta/Tactic/Simp/Main.lean</code></a> but none of those are set up to deal with <code>location</code> already (whereas <code>evalSimp</code> has the logic).</p>",
        "id": 261102005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636616095
    },
    {
        "content": "<p>Hence my desire to separate the code the deals with <code>Syntax</code> and the code the deals with <code>location</code>.</p>",
        "id": 261102027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636616127
    },
    {
        "content": "<p>+1. I've copy-pasted a few definitions because I don't want to bother constructing <code>Syntax</code> for what should be a function call. If this sort of refactoring is wanted, I'd be happy to do (some of) it.</p>",
        "id": 261111166,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1636623701
    },
    {
        "content": "<p>This is now a PR as <a href=\"https://github.com/leanprover/lean4/pull/797\">https://github.com/leanprover/lean4/pull/797</a>.</p>",
        "id": 261577011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637019528
    }
]