[
    {
        "content": "<p>Still working on NNG4, I try to get rid of the definitional surprises that plagued the Lean 3 version. For this purpose I don't define the game natural number as an inductive but I put axioms everywhere. However I hit elaboration issues with the induction principle.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">MyNat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">myOfNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">myAddition</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">myMultiplication</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[elabAsElim]</span> <span class=\"kd\">axiom</span> <span class=\"n\">myInduction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- apply myInduction (P := λ n =&gt; 0 + n = n) n -- works</span>\n  <span class=\"n\">apply</span> <span class=\"n\">myInduction</span> <span class=\"n\">n</span>  <span class=\"c1\">-- failed to elaborate eliminator</span>\n</code></pre></div>\n<p>without <code>@[elabAsElim]</code> it gets the motive completely wrong. With the attribute there is an error. What could I try? I wouldn't mind using a completely custom elaborator but I have no idea how to do that.</p>",
        "id": 301649851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664545414
    },
    {
        "content": "<p>The <code>[elabAsElim]</code> strategy requires the expected type to be available, but the <code>apply</code> tactic elaborates the term without an expected type (see  <code>elabTermForApply</code>). One option is to use <code>refine</code> or <code>refine'</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">myInduction</span> <span class=\"n\">n</span> <span class=\"bp\">?</span><span class=\"n\">base</span> <span class=\"bp\">?</span><span class=\"n\">ind</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine'</span> <span class=\"n\">myInduction</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Another option is to write a variant of <code>apply</code> that behaves like the <code>refine</code> tactics above but we doesn't force us to add the <code>_</code>s.</p>",
        "id": 301653783,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664546439
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 301655096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664546781
    },
    {
        "content": "<p>Now I need to figure out how to do that in a tactic (while jump to definition on <code>refine</code> doesn't seem to work)</p>",
        "id": 301655305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664546826
    },
    {
        "content": "<p>Actually a macro is probably good enough.</p>",
        "id": 301656403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664547106
    }
]