[
    {
        "content": "<p>I just wrote a little macro that programming-minded people might enjoy. It's to allow simple tests to be embedded in a file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">someTest</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">someTest</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Unfortunately , failing tests get a pretty unhelpful error message, phrased in terms of the macro's expansion to <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n   <span class=\"n\">rfl</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is there a nice way to catch and rewrite that error message? Or perhaps I need to expand to a tactic script instead, to get more control of what's going on?</p>",
        "id": 275852434,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1647632143
    },
    {
        "content": "<p>In particular, I'd like the error message for this example to be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expected</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">got</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 275852619,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1647632223
    },
    {
        "content": "<p>Nice macro!</p>\n<p>I don't think a macro will let you do that but if you use <code>elab_rules</code> instead of <code>macro_rules</code>, you can use tactic-like code and check that the two expressions are definitionally equal and throw the exact error message that you want if they're not</p>",
        "id": 275855005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647633557
    },
    {
        "content": "<p>I'm surprised that you don't get a name clash between your test cases. I expected that the name hygiene was just for local declarations</p>",
        "id": 275855277,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647633655
    },
    {
        "content": "<p>Thanks!</p>\n<p>RE hygiene, it seems to work here, which is what the Schemer in me expected. Also, I checked whether I could refer to <code>someTest</code> afterwards, and I could not, which is what I'd expect with hygiene. It's quite common for Racket macros to emit helper definitions, after all, and hygiene makes this work predictably.</p>\n<p>Do you know any code in the wild with some examples of <code>elab_rules</code>? As far as I can see, it is used only once in the Lean 4 repository, and that's a fairly minimal test.</p>",
        "id": 275855950,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1647633983
    },
    {
        "content": "<p>there are 6 occurrences in mathlib4</p>",
        "id": 275857942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647634863
    },
    {
        "content": "<p>it looks like the main use is when we want to write an <code>elab</code> tactic but only for some subset or special case of the actual syntax of the tactic</p>",
        "id": 275858087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647634942
    },
    {
        "content": "<p>You may be able to find more examples of elaboration functions in the Lean 4 source code. Organizing the code along these lines might help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">testStx</span><span class=\"o\">)</span> <span class=\"s2\">\"#test \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[commandElab testStx]</span> <span class=\"kd\">def</span> <span class=\"n\">elabTest</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">stx</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">x</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">y</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"c1\">-- (testStx \"#test\" (numLit \"1\") \"=\" (numLit \"1\") [\":\" `Nat])</span>\n<span class=\"c1\">-- (numLit \"1\")</span>\n<span class=\"c1\">-- (numLit \"1\")</span>\n<span class=\"c1\">-- (some `Nat)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- (testStx \"#test\" (numLit \"1\") \"=\" (numLit \"1\") [])</span>\n<span class=\"c1\">-- (numLit \"1\")</span>\n<span class=\"c1\">-- (numLit \"2\")</span>\n<span class=\"c1\">-- none</span>\n</code></pre></div>\n<p>Your code will run in the <code>Lean.Elab.Command.CommandElabM</code> monad</p>",
        "id": 275859863,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647635968
    },
    {
        "content": "<p>You can search for functions tagged with <code>@[commandElab ⋯]</code> for examples</p>",
        "id": 275860000,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647636050
    },
    {
        "content": "<p>Thanks, this is really helpful! I think it's time to hit the sack, but I'll revisit this next time I get a moment.</p>",
        "id": 275860087,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1647636116
    },
    {
        "content": "<p>And I forgot to mention that you can use <code>try/catch/finally</code> routines there. Or even throw errors with customized messages: <code>throwError \"my error message\"</code></p>",
        "id": 275862031,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647637210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> Here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"k\">in</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"k\">in</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">`</span><span class=\"n\">test</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n      <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"Expected {y}, but got {← reduce x}\"</span>\n\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"c1\">-- error: Expected 3, but got 2</span>\n</code></pre></div>",
        "id": 275877604,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647649028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> It got me thinking... would it be possible to code it in the <code>CommandElabM</code> monad? What would be an alternative solution to <code>elabTerm</code>?</p>",
        "id": 275877803,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647649229
    },
    {
        "content": "<p>The code after <code>=&gt;</code> is in the <code>CommandElabM</code> monad, but I immediately used <code>liftTermElabM</code> to move to <code>TermElabM</code>.</p>",
        "id": 275877896,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647649324
    },
    {
        "content": "<p>Oh, right! Thanks</p>",
        "id": 275878016,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647649477
    },
    {
        "content": "<p>The <code>TermElabM</code> tracks a lot of extra information: pending elaboration problems, pending tactics to be executed, etc.</p>",
        "id": 275878062,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647649540
    },
    {
        "content": "<p>Is there a place from where I can learn more about these monads roles, hierarchies and transitions?<br>\nIn your code you went from the <code>CommandElabM</code> to the <code>TermElabM</code> and I didn't know that was possible. And then you talked about the <code>TermElabMonadM</code> and I don't know where it fits in the context of this conversation</p>",
        "id": 275878362,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647649885
    },
    {
        "content": "<p>I recall a diagram of the relation between the monads in Leo's lean 4 presentation from Lean Together 2021</p>",
        "id": 275878578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647650118
    },
    {
        "content": "<p>Unfortunately, the only place right now is the Lean source code itself :( <code>TermElabMonadM</code> was typo. Sorry about that.</p>",
        "id": 275878585,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647650134
    },
    {
        "content": "<p>Page 5 of <a href=\"https://leanprover-community.github.io/lt2021/slides/leo-LT2021-meta.pdf\">https://leanprover-community.github.io/lt2021/slides/leo-LT2021-meta.pdf</a></p>",
        "id": 275878693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647650241
    },
    {
        "content": "<p>We are currently overwhelmed. I think we will be able to greatly improve the documentation for end-users in the next few months, but we currently do not have a plan for documenting the Lean internals.</p>",
        "id": 275878703,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647650265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20errors.20from.20macro-elaborated.20code.3F/near/275878703\">said</a>:</p>\n<blockquote>\n<p>We are currently overwhelmed. I think we will be able to greatly improve the documentation for end-users in the next few months, but we currently do not have a plan for documenting the Lean internals.</p>\n</blockquote>\n<p>Np, I just wanted to know about already existing sources</p>",
        "id": 275879000,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647650579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20errors.20from.20macro-elaborated.20code.3F/near/275878693\">said</a>:</p>\n<blockquote>\n<p>Page 5 of <a href=\"https://leanprover-community.github.io/lt2021/slides/leo-LT2021-meta.pdf\">https://leanprover-community.github.io/lt2021/slides/leo-LT2021-meta.pdf</a></p>\n</blockquote>\n<p>So, I've seen that diagram but I don't understand it. I'll open a dedicated thread to ask questions about it</p>",
        "id": 275879023,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647650627
    },
    {
        "content": "<p>This is great, thanks Leo!</p>",
        "id": 275892616,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1647670122
    }
]