[
    {
        "content": "<p>I'm running into a couple of issues updating code after the \"Typed Macro\" update. I managed to fix them all so far but I'm puzzled by some of the solutions.</p>\n<p>For example, this macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mwe\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Doesn't work without specifying <code>$name:ident</code> on the RHS. It seems like <code>intro</code> expects a <code>matchAlt</code> argument by default instead of an <code>ident</code>. This is probably a bug.</p>\n<p>The parentheses around <code>$rest</code> are also necessary for some reason. This might be a feature but I don't understand why this is necessary.</p>",
        "id": 287931599,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1656538390
    },
    {
        "content": "<p>Thanks for the feedback! The <code>intro</code> issue is an artifact resulting from the fact that there are actually two separate <code>intro</code> tactics, for idents and for matchAlts, would be feasible but maybe a bit complex to make that still work. The second issue is \"technically correct\", without parentheses Lean expects a single tactic at that point. We could define a coercion to insert the parentheses for us.</p>",
        "id": 287936504,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656539335
    },
    {
        "content": "<p>Thanks Sebastian! That makes sense. The <code>$rest</code> issue makes total sense now. It would be convenient to have a coercion since I had quite a few cases of that to fix.</p>\n<p>Thanks for the explanation of the <code>intro</code> issue! Is this an instance \"the matchAlt case is tried before the ident case because the matchAlt case was defined last\" or is it more complex than that?</p>",
        "id": 287944716,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1656540821
    },
    {
        "content": "<p><code>intro $name</code> is in fact parsed into a choice node of both tactics</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"o\">[(</span><span class=\"n\">choice</span>\n       <span class=\"o\">(</span><span class=\"n\">Tactic.intro</span> <span class=\"s2\">\"intro\"</span> <span class=\"o\">[(</span><span class=\"n\">term.pseudo.antiquot</span> <span class=\"s2\">\"$\"</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">name</span> <span class=\"o\">[])])</span>\n       <span class=\"o\">(</span><span class=\"n\">Tactic.introMatch</span> <span class=\"s2\">\"intro\"</span> <span class=\"o\">(</span><span class=\"n\">Term.matchAlts.antiquot</span> <span class=\"s2\">\"$\"</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">name</span> <span class=\"o\">[])))</span>\n</code></pre></div>\n<p>We would have to select and generate the correct alternative given <code>name : TSyntax [`term, `matchAlt]</code></p>",
        "id": 287989131,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656575920
    }
]