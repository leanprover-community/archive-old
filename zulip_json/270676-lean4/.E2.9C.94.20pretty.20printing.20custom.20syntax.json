[
    {
        "content": "<p>I was looking at an example from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> of an <code>elab</code> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20functions.20in.20an.20unsafe.20way/near/313454654\">command to pretty print a term</a> and was curious that it will pretty print notation like <code>x + x</code>, but if I define my own notation before it, it won't pretty print that, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"decl_to_string\"</span> <span class=\"n\">decl</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">decl.getId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">val</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"**\"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">**</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">decl_to_string</span> <span class=\"n\">foo</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"c1\">-- \"fun x =&gt; x ^ x\"</span>\n</code></pre></div>\n<p>However the <a href=\"https://github.com/leanprover/lean4/blob/master/script/reformat.lean\">reformat</a> script seems to pretty print the custom notation fine. What's the difference/How can I add that custom notation to the pretty printer?</p>",
        "id": 313497851,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669987223
    },
    {
        "content": "<p>Note that the <code>**</code> notation also doesn't show up when you <code>#print foo</code></p>",
        "id": 313498092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669987313
    },
    {
        "content": "<p>I think the issue is that the way the notation is defined there is no possible way to reconstruct that you want to use the notation</p>",
        "id": 313498199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669987339
    },
    {
        "content": "<p>Oh, it looks like it matters whether you use a constant in the declaration of the notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\" ** \"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">**</span> <span class=\"n\">x</span> <span class=\"c1\">-- fun x =&gt; x ^ x : Nat → Nat</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\" ** \"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HPow.hPow</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">**</span> <span class=\"n\">x</span> <span class=\"c1\">-- fun x =&gt; x ** x : Nat → Nat</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So it's probably a bug in the unexpander declaration, cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 313499283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669987708
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/681bbe5cf40ebd45019db2a84cd04dc0c63b8539/src/Lean/Elab/Notation.lean#L82-L85\">https://github.com/leanprover/lean4/blob/681bbe5cf40ebd45019db2a84cd04dc0c63b8539/src/Lean/Elab/Notation.lean#L82-L85</a></p>",
        "id": 313501286,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669988329
    },
    {
        "content": "<p>thanks, that's pretty insightful! And how come the <a href=\"https://github.com/leanprover/lean4/blob/master/script/reformat.lean\">reformat script</a> can reproduce the syntax in that case? Do I understand it right that it's because it keeps the commands as <code>Syntax</code> objects and doesn't delaborate them or anything?</p>",
        "id": 313504473,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669989297
    },
    {
        "content": "<p>(and in particular it won't <code>expandNotation</code>)</p>",
        "id": 313504517,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669989310
    },
    {
        "content": "<p>yes</p>",
        "id": 313504764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669989382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 313504946,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669989431
    }
]