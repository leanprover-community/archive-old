[
    {
        "content": "<p>Does Lean have a library for containers like this one in Idris (<a href=\"https://github.com/idris-lang/idris2/blob/master/libs/contrib/Data/Container.idr\">https://github.com/idris-lang/idris2/blob/master/libs/contrib/Data/Container.idr</a>)? Containers are one way to give more type information for Expressions.<br>\nThey can be useful to do some kind of generics metaprogramming (<a href=\"https://github.com/effectfully/Generic\">https://github.com/effectfully/Generic</a>), like deducing Equality for vectors.</p>",
        "id": 245090719,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1625601332
    },
    {
        "content": "<p>This looks a bit like our work on W types in lean 3: <a href=\"http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf\">http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf</a></p>",
        "id": 245094338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625603329
    },
    {
        "content": "<p>I haven't seen a container library for Lean, but you should be able to copy the Idris stuff more or less verbatim. Some notes that may or may not be helpful:</p>\n<ul>\n<li>The containers implemented there are non-indexed, so they can represent only non-indexed inductive types. For indexed inductive types, you need indexed containers. <a href=\"https://github.com/agda/agda-stdlib/blob/master/src/Data/Container/Indexed/Core.agda\">The Agda stdlib has these.</a></li>\n<li>You need funext to prove anything about containers, but I guess that's not a problem in Lean.</li>\n<li>The runtime representation of a containerised data type is not very efficient because there are functions everywhere.</li>\n<li>Programming directly with containerised types is syntactically cumbersome. It can be done, but you'd probably want a metaprogram that translates back and forth between your types and their containerised versions.</li>\n</ul>",
        "id": 245099442,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1625605957
    },
    {
        "content": "<p>I'm interested in using this a la <code>deriving Generic</code> in order to get easy proofs of finiteness, countability, and other things given only instances on built in types like sum, sigma and W. But the approach is definitely algorithmically suboptimal, so when performance is a concern it's probably better to write the derive handler directly</p>",
        "id": 245099802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625606175
    }
]