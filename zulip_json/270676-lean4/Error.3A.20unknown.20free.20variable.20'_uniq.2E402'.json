[
    {
        "content": "<p>I'm not sure this should work, but the error message does not explain much: <code>unknown free variable '_uniq.402'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">succ</span> <span class=\"o\">::</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Pos.add</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Pos.add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Pos</span> <span class=\"n\">x.succ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Pos.succ</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Should this work? If not, what is the actual error?</p>",
        "id": 275471811,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1647412300
    },
    {
        "content": "<p>this is a bug that happens when a tactic handles expressions from a goal without opening the metavariable context first</p>",
        "id": 275471884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647412381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: And the tactic that is causing the problem in this case is part of Lean's attempt to show termination of <code>f</code>?</p>",
        "id": 275487350,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1647424096
    },
    {
        "content": "<p>What does that funky colon syntax for <code>succ</code> do?</p>",
        "id": 275489248,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647425147
    },
    {
        "content": "<p>Ohhhh its a custom constructor but weirdly typed out, dont mind me</p>",
        "id": 275489366,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647425212
    },
    {
        "content": "<p>The weird error message is due to a missing check in the new pattern elaboration code. We have redesigned it last week to be able to support overloaded notation in patterns and issue <a href=\"https://github.com/leanprover/lean4/issues/944\">https://github.com/leanprover/lean4/issues/944</a><br>\nI pushed a fix for this. <a href=\"https://github.com/leanprover/lean4/commit/05a2778b0db14fda956f1ff3fff9525217a5ab1e\">https://github.com/leanprover/lean4/commit/05a2778b0db14fda956f1ff3fff9525217a5ab1e</a><br>\nIt now produces the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalidPatternIssue.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">patterns</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">explicit</span> <span class=\"n\">pattern</span> <span class=\"kd\">variable</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">only</span> <span class=\"n\">occurs</span> <span class=\"k\">in</span> <span class=\"n\">positions</span> <span class=\"n\">that</span> <span class=\"n\">are</span> <span class=\"n\">inaccessible</span> <span class=\"n\">to</span> <span class=\"n\">pattern</span> <span class=\"n\">matching</span>\n  <span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>x+1</code> pattern in <code>f</code>, is interpreted as <code>{ pred := Nat.succ .(x.1) }</code>. Recall that <code>.( .. )</code> is the notation for inaccessible patterns, and <code>x.1</code> is <code>x.pred</code>.</p>",
        "id": 275522380,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647442556
    },
    {
        "content": "<p>BTW, I added a new test that uses \"views\" to pattern match in types such as <code>Pos</code>. The termination proof is a bit manual, but it will be more automated in the future.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/68154a6c690f22d195906b9ae6563dea3f2b5f0e/tests/lean/run/posView.lean\">https://github.com/leanprover/lean4/blob/68154a6c690f22d195906b9ae6563dea3f2b5f0e/tests/lean/run/posView.lean</a></p>",
        "id": 275546123,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647450833
    }
]