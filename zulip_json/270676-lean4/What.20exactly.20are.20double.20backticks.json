[
    {
        "content": "<p>Hi, I'm getting started with Lean 4 but I have no idea what I'm doing. The Metaprogramming Book was very helpful in getting me started, but I'm still confused on some things. Is there any reference that explains exactly how quotations/antiquotations/quasiquotations work in Lean? Why is <code>mkConst ``zero</code> understood as mkConst `Nat.zero?  Is `` a singular operation or two quotes nested together?</p>",
        "id": 284776641,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654190296
    },
    {
        "content": "<p>Also how do I escape a backtick (so I can write <code>mkConst </code>Nat.zero`)</p>",
        "id": 284776665,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654190312
    },
    {
        "content": "<p>Escaping example: <code>`escaped!</code></p>\n<p>You can \"View source\" on this message <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 284777551,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654190815
    },
    {
        "content": "<p>There is a little docstring if you hover over the <code> `` </code> in the editor</p>",
        "id": 284777578,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654190829
    },
    {
        "content": "<p>The single backtick is used to write a name, and a double backtick is used to write a name that is checked to currently be in the environment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"n\">Cat</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">``</span><span class=\"n\">Cat</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 284777706,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654190899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20exactly.20are.20double.20backticks/near/284777578\">said</a>:</p>\n<blockquote>\n<p>There is a little docstring if you hover over the <code> `` </code> in the editor</p>\n</blockquote>\n<p>Oh, when you hover over <code>``Nat</code> it generates a docstring that's labelled with <code>`Nat: [...]</code>, so I thought it was talking about a single quote, oops</p>",
        "id": 284778404,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654191303
    },
    {
        "content": "<p>But I think I get it now!</p>",
        "id": 284778445,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654191325
    },
    {
        "content": "<p>The double backtick doesn't only do compile time checking of the name, it also does name resolution, which can change the actual name literal being used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"n\">Cat</span>  <span class=\"c1\">-- `Cat</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">``</span><span class=\"n\">Cat</span> <span class=\"c1\">-- `Foo.Cat</span>\n</code></pre></div>",
        "id": 284964654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654328036
    }
]