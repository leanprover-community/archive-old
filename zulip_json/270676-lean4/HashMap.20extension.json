[
    {
        "content": "<p>Playing with environment extensions, I realized I kept using extensions whose states were lists of pairs and searching in the list elements with a given first component. So I feel like I want extensions where the state is a hash map. But my understanding of environment extensions is very shallow. The following code seems to be doing what I want, but I'm not confident at all that I'm not doing something very stupid.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>          <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HashMap.ofList</span> <span class=\"o\">(</span><span class=\"n\">as.concatMap</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">,</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.insert</span> <span class=\"n\">n.1</span> <span class=\"n\">n.2</span> <span class=\"o\">,</span>\n    <span class=\"n\">toArrayFn</span>     <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">es.toArray</span>\n  <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Now I'll write some tests</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">testExt</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">mkHashMapExtension</span> <span class=\"bp\">`</span><span class=\"n\">my_test</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#add_test\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"n\">content</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">testExt.addEntry</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">name.getNat</span><span class=\"o\">,</span> <span class=\"n\">content.getString</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#list_tests\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">testExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s.toList</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#get_test\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">testExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n.getNat</span>\n</code></pre></div>",
        "id": 294763698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661200867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> while you're here, do you have any comment about this thread?</p>",
        "id": 294768908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203292
    },
    {
        "content": "<p>Looks good I think. You can use <code>mkStateFromImportedEntries</code> to simplify and optimize your <code>addImportedFn</code>.</p>",
        "id": 294769618,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661203660
    },
    {
        "content": "<p>I was especially worried about that <code>addImportedFn</code> indeed. Now I need to decipher what <code>mkStateFromImportedEntries</code> does...</p>",
        "id": 294769899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203794
    },
    {
        "content": "<p>Do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HashMapExtension.addEntryFn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.insert</span> <span class=\"n\">n.1</span> <span class=\"n\">n.2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>          <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"n\">mkStateFromImportedEntries</span> <span class=\"n\">HashMapExtension.addEntryFn</span> <span class=\"o\">{},</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"n\">HashMapExtension.addEntryFn</span><span class=\"o\">,</span>\n    <span class=\"n\">toArrayFn</span>     <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">es.toArray</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 294770459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661204081
    },
    {
        "content": "<p>Yes, though I would probably have inlined the new function as a lambda :)</p>",
        "id": 294772677,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661205315
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 294774527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661206342
    },
    {
        "content": "<p>I'm returning to this old thread. Now that I try to actually use this HashMap extension idea I see that it doesn't work. I have a file <code>HashMapExt.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMapExtension</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>          <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"n\">mkStateFromImportedEntries</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.insert</span> <span class=\"n\">n.1</span> <span class=\"n\">n.2</span><span class=\"o\">)</span> <span class=\"o\">{},</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.insert</span> <span class=\"n\">n.1</span> <span class=\"n\">n.2</span><span class=\"o\">),</span>\n    <span class=\"n\">toArrayFn</span>     <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">es.toArray</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HashMapExtension</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">$</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ext.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">ext.modifyState</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">ext.modifyState</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hm.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">HashMapExtension</span>\n</code></pre></div>\n<p>and then a second file <code>test0.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">HashMapExt</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">testExt</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">mkHashMapExtension</span> <span class=\"bp\">`</span><span class=\"n\">test</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">testExt.insert</span> <span class=\"n\">n.getNat</span> <span class=\"n\">s.getString</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"PrintTests\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">$</span> <span class=\"n\">repr</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">testExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n</code></pre></div>\n<p>and <code>test1.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">test0</span>\n\n<span class=\"n\">Test</span> <span class=\"mi\">3</span> <span class=\"s2\">\"Foo\"</span>\n\n<span class=\"n\">PrintTests</span>\n</code></pre></div>\n<p>so far everything seems to work. But when I create <code>test2.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">test1</span>\n\n<span class=\"n\">Test</span> <span class=\"mi\">4</span> <span class=\"s2\">\"Bar\"</span>\n\n<span class=\"n\">PrintTests</span>\n</code></pre></div>\n<p>I see only the entry created in <code>test2</code>, not two entries as I expected.</p>",
        "id": 300784691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664194378
    },
    {
        "content": "<p>Sebastian, do you see what I'm doing wrong?</p>",
        "id": 300801323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664194891
    },
    {
        "content": "<p>Not directly, I'd have to take a closer look</p>",
        "id": 300802265,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664195235
    },
    {
        "content": "<p>Should I create an issue then?</p>",
        "id": 300812482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664198334
    },
    {
        "content": "<p>For people who want to investigate this, <a href=\"/user_uploads/3121/SOQI7jihhW10MwF97pMfXZIq/issue.zip\">issue.zip</a>  contains a folder <code>issue</code> with a Lean project showing my problem in the <code>Issue</code> lib.</p>",
        "id": 300814657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664199081
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 300841937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664206729
    },
    {
        "content": "<p>Your issue is with the <code>HashMapExtension.insert</code> and <code>update</code> functions.</p>",
        "id": 300879497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218156
    },
    {
        "content": "<p>The <code>SimplePersistentEnvExtension.modifyState</code> should never be used because the state is not persisted.</p>",
        "id": 300879582,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218193
    },
    {
        "content": "<p>(It's obvious that it can't be persisted: what is being written to the olean file is the <em>entries</em>, while <code>modifyState</code> applies some opaque function to the state.  It doesn't know which entries to store to recreate the state modification.)</p>",
        "id": 300879765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218255
    },
    {
        "content": "<p>This should fix your issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">ext.addEntry</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">HashMapExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">ext.addEntry</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 300879820,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218273
    },
    {
        "content": "<p>Indeed it works much better!</p>",
        "id": 300881152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664218793
    },
    {
        "content": "<p>Thanks a lot Gabriel!</p>",
        "id": 300881162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664218798
    },
    {
        "content": "<p><code>SimplePersistentEnvExtension.modifyState</code> is indeed rather misleading. Should I PR a docstring with a warning or do you think it should be completely removed?</p>",
        "id": 300881412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664218880
    },
    {
        "content": "<p>Yes. At least a docstring would be good.</p>",
        "id": 300881720,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218990
    },
    {
        "content": "<p>It has nothing to do with \"Simple\". Already <code>PersistentExtension.modifyState</code> is implemented as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">modifyState</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">PersistentEnvExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext.toEnvExtension.modifyState</span> <span class=\"n\">env</span> <span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ps</span> <span class=\"k\">with</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ps.state</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>ext.toEnvExtension</code> very much sounds like to first step is to forget about persistance...</p>",
        "id": 300881913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664219053
    },
    {
        "content": "<p>Yeah, that function should get a docstring as well.</p>",
        "id": 300881968,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664219079
    },
    {
        "content": "<p>I believe the only use of these dangerous functions is to implement <code>ScopedEnvExtension</code> .</p>",
        "id": 300882055,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664219105
    },
    {
        "content": "<p>Actually the same projection occurs in <code>addEntry</code> so it doesn't explain why your version works</p>",
        "id": 300882099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664219119
    },
    {
        "content": "<p>Maybe it's best to just remove both sets of them, and then have <code>ScopedEnvExtension</code> break the abstraction barrier explicitly.</p>",
        "id": 300882139,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664219132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/HashMap.20extension/near/300882099\">said</a>:</p>\n<blockquote>\n<p>Actually the same projection occurs in <code>addEntry</code> so it doesn't explain why your version works</p>\n</blockquote>\n<p>If you look at the <code>addEntry</code> function, it calls the <code>addEntryFn</code> field.  And the <code>addEntryFn</code> is set by <code>registerSimplePersistentEnvExtension</code> to a function that updates <em>both</em> the state as well as the entries.</p>",
        "id": 300882462,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664219238
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/1649\">https://github.com/leanprover/lean4/pull/1649</a></p>",
        "id": 300885268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664220340
    }
]