[
    {
        "content": "<p>Thanks for the pointers and clarification.</p>",
        "id": 274988281,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1647011656
    },
    {
        "content": "<blockquote>\n<p>A final question: It seems that the implementation mutates the ST.Ref's in place so their use seems to violate the purity of functional paradigm. Is that because we know these are only being used once so it is OK?</p>\n</blockquote>\n<p>Note that we can only use the mutations inside of the <code>IO</code> and <code>ST</code> monads, or monad stacks built on top of them.</p>",
        "id": 274988388,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647011715
    },
    {
        "content": "<blockquote>\n<p>So is the purpose of this lifting so that the ST.Ref functions can be used as actions in any monad?</p>\n</blockquote>\n<p>Yes. Note that many monads in the Lean implementation (i.e., <code>MetaM</code>, <code>TermElabM</code>, <code>TacticM</code>) are built on top of <code>IO</code> or <code>ST</code>.</p>",
        "id": 274988651,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647011858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296262\">Richard L Ford</span> has marked this topic as resolved.</p>",
        "id": 274993128,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647014146
    }
]