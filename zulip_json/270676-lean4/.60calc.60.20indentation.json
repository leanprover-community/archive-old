[
    {
        "content": "<p>This is a continuation of the discussion started in <a href=\"#narrow/stream/270676-lean4/topic/indenting.20after.20.22by.22\">a previous Zulip thread</a> which spawned <a href=\"https://github.com/leanprover/lean4/pull/1844\">issue #1844</a>. The issues pointed out in the thread appeared after <a href=\"https://github.com/leanprover/lean4/pull/1811\">#1811</a> was merged.</p>\n<p>The discussion is about indentation in <code>calc</code>'s relations and proofs. As mentioned <a href=\"https://github.com/leanprover/lean4/pull/1844#issuecomment-1321171553\">in the issue</a>, I gathered examples of how indentation could be/is used in <code>calc</code> here:</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/experimentalean4/blob/main/discussions/ByCalcIndent/ByCalcIndent.lean\">https://github.com/AdrienChampion/experimentalean4/blob/main/discussions/ByCalcIndent/ByCalcIndent.lean</a></li>\n</ul>\n<p>This thread is an attempt to gather feedback to see if there's a solution that everyone would be comfortable with.</p>",
        "id": 315614226,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670944465
    },
    {
        "content": "<p>The problem is that when the <code>_</code>-s in <code>calc</code> are indented past the \"normal\" indentation of the \"block\", like <a href=\"https://github.com/AdrienChampion/experimentalean4/blob/main/discussions/ByCalcIndent/ByCalcIndent.lean#L49-L52\">here</a>, then <code>by</code> can get confused (thanks to <a href=\"https://github.com/leanprover/lean4/pull/1811\">#1811</a>)</p>",
        "id": 315614881,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670944648
    },
    {
        "content": "<p>More generally, as pointed out <a href=\"https://github.com/leanprover/lean4/pull/1844#issuecomment-1320163138\">here</a>, there is a potential problem of strong indentation drifting in the proof following each relation due to the often large padding introduced before the <code>_</code></p>",
        "id": 315615556,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670944807
    },
    {
        "content": "<p>Speaking as someone who is about to impose a lot of Lean 4 calc blocks on new-to-Lean undergraduates (see <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html\">here</a> for the Lean 3 version), I would like writing a calc block to be as fast and robust as possible.</p>\n<p>So I would like to <em>not</em> require that the column of <code>&lt;</code>/<code>=</code>/etc line up in rows 2+ with the position in row 1: whether you do this by padding before the <code>_</code> or after, it is fiddly and I imagine it would cause headaches.</p>",
        "id": 315644605,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670952603
    },
    {
        "content": "<p>(Padding after <code>_</code> seems like it would be more painful than padding before <code>_</code>.)</p>",
        "id": 315645471,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670952827
    },
    {
        "content": "<p>Do you ever use multi-line tactic blocks inside <code>calc</code>? How would you want to style them in Lean 4?</p>",
        "id": 315646288,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670953057
    },
    {
        "content": "<p>Just to reiterate: the central issue is how to distinguish the end of a tactic block inside <code>calc</code> from the next equation</p>",
        "id": 315646460,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670953100
    },
    {
        "content": "<p>I do use them quite often in my own contributions to mathlib, but I don't use them in teaching.  So I'm more flexible on style there.</p>",
        "id": 315646470,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670953103
    },
    {
        "content": "<p>is it okay to have all the <code>_</code> on rows 2+ line up?</p>",
        "id": 315647104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953302
    },
    {
        "content": "<p>Using a token like <code>...</code> that is not valid anywhere else, and that ironically I think I'm responsible for having replaced with <code>_</code>, would be a very robust way to achieve just that. So we might want to include that variant in the discussion, even if it requires some parser tricks to implement.</p>",
        "id": 315647229,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670953331
    },
    {
        "content": "<p>the current proposal enforces that rows 2+ line up vertically <em>at the start</em>, not at the relation symbol</p>",
        "id": 315647396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953384
    },
    {
        "content": "<p>so if you want them to line up at the relation symbol you have to insert space between the <code>_</code> and the <code>&lt;</code></p>",
        "id": 315647486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953406
    },
    {
        "content": "<p>Just to be clear, the version I am hoping lands supports the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">firstTerm</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"n\">alsoFirstTerm</span> <span class=\"bp\">=</span> <span class=\"n\">secondTerm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">proof_continues</span>\n  <span class=\"n\">alsoSecondTerm</span> <span class=\"bp\">=</span> <span class=\"n\">thirdTerm</span> <span class=\"o\">:=</span> <span class=\"n\">oneLineProof</span>\n</code></pre></div>\n<p>the <code>also</code> terms will usually be <code>_</code> but they don't have to be</p>",
        "id": 315647985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953541
    },
    {
        "content": "<p>Is it possible to make hitting \\newline in VS Code clever, so that when you do that within a calc block it makes a new line with the cursor in the right spot?  (whatever syntax is ultimately decided on as \"the right spot\")</p>",
        "id": 315648134,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670953571
    },
    {
        "content": "<p>I think that needs vscode support, but in principle I don't see why not</p>",
        "id": 315648368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953633
    },
    {
        "content": "<p>we just need to register <code>by</code> as a keyword after which to indent, similar to <code>{</code> handling in C code</p>",
        "id": 315648531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670953679
    },
    {
        "content": "<p>But maybe that gets annoying when you have reached the end of your calc-block and now need to de-indent.  I guess typing in a text editor which automatically continues a list of bullet points with more bullet points is the same situation -- when you reach the end of the list, you backspace to delete the unneeded bullet point.</p>",
        "id": 315649643,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670953975
    },
    {
        "content": "<p>In fact, if hitting \\newline takes you to the right horizontal position (and maybe even inserts the <code>_</code> for you), this one should be easy to type, and I think it's quite pretty:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- align on rel-ops with arbitrary `_` indentation</span>\n<span class=\"c1\">-- nightly ✅ #1844 ❌ pre #1811 ✅</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n     <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n     <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">longId</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n  <span class=\"c1\">-- dedent terminates the block</span>\n  <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 315651111,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670954425
    },
    {
        "content": "<p>But it might get painful if you slightly adjust <code>t1</code> and it changes length by one character.</p>",
        "id": 315651379,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670954496
    },
    {
        "content": "<p>So in fact I think my requests are:</p>\n<ul>\n<li>no padding required between the <code>_</code> and the relation</li>\n<li>remains valid under a change in the length of <code>t1</code></li>\n<li>cursor is in a valid position after a \\newline</li>\n</ul>",
        "id": 315653217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670955029
    },
    {
        "content": "<p>The challenge with supporting that one is that if <code>pf12</code> spans multiple lines  it is difficult to distinguish the <code>_ &lt; t3</code> from the continuation of the proof <code>pf12</code></p>",
        "id": 315654515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670955378
    },
    {
        "content": "<p>In Lean 3 I think that didn't arise because of the <code>...</code>.  But writing that syntax also has a user-friendliness problem (which I did encounter in Lean 3): if you want to transform an existing left-justified calc block into that syntax, you might need to indent a whole block (rows 2+) by an odd number of spaces, and I never found an easy way to do that in VS Code.</p>",
        "id": 315655567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670955697
    },
    {
        "content": "<p>the trick I use when that comes up is alt-shift-click to vertical select and then insert spaces to taste</p>",
        "id": 315656602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670956029
    },
    {
        "content": "<p>For what it's worth (which is not much), ease-of-typing points are super odd to me. Eventually Lean will have a formatter, which is how you actually achieve ease-of-typing, right?</p>",
        "id": 315719882,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670981228
    },
    {
        "content": "<p>My two cents is that I think arbitrary indentation is bad because it breaks the convention that, by looking at the indentation of a line, I can know which blocks/scope/entity it belongs to.<br>\nI think that's valuable, especially for beginners, people unfamiliar with a given piece of <code>calc</code> code, or anyone that's skimming to find something in the code.</p>",
        "id": 315720024,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670981325
    },
    {
        "content": "<p>By \"arbitrary indentation\" I meant <em><code>calc</code> indentation + 2 + whatever the length of first LHS is</em></p>",
        "id": 315720569,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670981643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315719882\">said</a>:</p>\n<blockquote>\n<p>For what it's worth (which is not much), ease-of-typing points are super odd to me. Eventually Lean will have a formatter, which is how you actually achieve ease-of-typing, right?</p>\n</blockquote>\n<p>To make a distinction I have often heard from Mario: I think it is very important that it be easy to type <em>valid</em> calc blocks (and that's what I was <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315653217\">emphasizing above</a>).  I think it is less important that it be easy to type style-guide-approved calc blocks.</p>\n<p>You're saying here that because of the potential existence of a formatter, you think it is less important that it be easy to type style-guide-approved calc blocks.  So I don't think our positions conflict? :-)</p>",
        "id": 315723866,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670983875
    },
    {
        "content": "<p>PS What do you use calc blocks for?</p>",
        "id": 315723875,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670983893
    },
    {
        "content": "<p>I was referring to these</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315644605\">said</a>:</p>\n<blockquote>\n<p>Speaking as someone who is about to impose a lot of Lean 4 calc blocks on new-to-Lean undergraduates (see <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html\">here</a> for the Lean 3 version), I would like writing a calc block to be as fast and robust as possible.</p>\n<p>So I would like to <em>not</em> require that the column of <code>&lt;</code>/<code>=</code>/etc line up in rows 2+ with the position in row 1: whether you do this by padding before the <code>_</code> or after, it is fiddly and I imagine it would cause headaches.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315645471\">said</a>:</p>\n<blockquote>\n<p>(Padding after <code>_</code> seems like it would be more painful than padding before <code>_</code>.)</p>\n</blockquote>",
        "id": 315724412,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670984299
    },
    {
        "content": "<p>But I agree there's no conflict, at least not necessarily</p>",
        "id": 315724436,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670984334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315723875\">said</a>:</p>\n<blockquote>\n<p>PS What do you use calc blocks for?</p>\n</blockquote>\n<p>I don't really, I ended up having to deal with this issue which I do find interesting</p>",
        "id": 315724526,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670984401
    },
    {
        "content": "<p>I'm talking in those snippets about requirements (i.e., requirements for the code to be valid).  I do think the things I was describing there are painful to type, so I'd like there to be some valid syntax which avoids them.  Perhaps I was ambiguous, did it sound like I was describing what I wanted in the style guide?</p>",
        "id": 315724700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670984531
    },
    {
        "content": "<p>I think I misunderstood then, any of the three variants I listed allow the plain (I would argue \"natural\") writing style I think most write spontaneously:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>",
        "id": 315724839,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670984652
    },
    {
        "content": "<p>What I meant is that \"how to align symbols\" is irrelevant ease-of-typing-wise because you're not doing it (eventually). Unless the formatter introduces arbitrary indentation of course, because that wrecks <code>by</code>, function application...</p>",
        "id": 315725015,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670984765
    },
    {
        "content": "<p>Anyway, I hope that someday there will be further automation to type calc blocks, well beyond just a formatter.  For example, I'd like to be able to easily add a line to a calc block which differs from the previous line only in having a certain term (selected by clicking in the infoview) blanked out, ready for replacement.</p>\n<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> was telling me that such things should be possible once we have <a href=\"https://github.com/leanprover/lean4/issues/1494\">code actions</a> (or maybe it was <a href=\"https://github.com/leanprover/lean4/issues/1223\">contextual suggestions</a> ...).</p>",
        "id": 315725778,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670985397
    },
    {
        "content": "<p>I think the difficult issue is the case in which the first term is long, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n    <span class=\"n\">longId</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n            <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n  <span class=\"c1\">-- dedent terminates the block</span>\n</code></pre></div>\n<p>For that case, I am inclined to use this formatting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n<span class=\"c1\">-- dedent terminates the block</span>\n</code></pre></div>\n<p>Or, if you don't care that much about lining up the relation symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n  <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n<span class=\"c1\">-- dedent terminates the block</span>\n</code></pre></div>\n<p>The last one is easy to type in VSCode:  once you indent the first <code>=</code>, VSCode will indent the later lines the same amount.  The previous one is only slightly harder, and looks nicer.  The advantage of this style is that there's no need to leave large gaps if you want the relation symbols to line up.  Also, it leaves you a lot of room in case any of pf12, pf23, etc. are long.</p>",
        "id": 315842184,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671030803
    },
    {
        "content": "<p>If only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>\n<p>worked</p>",
        "id": 315842508,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671030868
    },
    {
        "content": "<p>(just to be clear, <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> 's example <em>does</em> work under the proposal, and is my preferred solution to the issues <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> raises)</p>",
        "id": 315843829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671031201
    },
    {
        "content": "<p>Is it really necessary to have the underscores?  What would be closest to what mathematicians actually write is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n  <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>\n<p>Would that be regarded as too confusing, or too much of a departure from previous notation?</p>",
        "id": 315844070,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671031248
    },
    {
        "content": "<p>yes, the underscores are necessary. Otherwise the stuff on the left will be considered as a continuation of the stuff on the right</p>",
        "id": 315844200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671031278
    },
    {
        "content": "<p>and you don't want <code>pf12 &lt; t3</code> to be considered as the proof of <code>longId t1 = t2</code></p>",
        "id": 315844346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671031307
    },
    {
        "content": "<p>Well, we could support it, using a <code>withPosition</code> to terminate  <code>pf12</code> and then a trailing_parser to parse <code>&lt; t3</code>. But then we can't support terms on the left, which is not nice</p>",
        "id": 315845089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671031469
    },
    {
        "content": "<p>In that case, I also like <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span>'s proposal: easy to type, looks good, doesn't waste a lot of space with large blank spaces needed to align things.</p>",
        "id": 315846022,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671031681
    },
    {
        "content": "<p>I might  decide to use this style for all calc proofs, even if <code>t1</code> isn't long.<br>\n<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> :  Does this style meet your criteria?</p>",
        "id": 315847506,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671032088
    },
    {
        "content": "<p>Yes -- bonus points if when you hit <code>\\newline</code> during such a proof it automatically indents you to the right position and types the <code>_</code>!  Is that possible?</p>",
        "id": 315850626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671032914
    },
    {
        "content": "<p>not yet, but it's feasible</p>",
        "id": 315850790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671032960
    },
    {
        "content": "<p>Mario, is the reason you want to support things like <code>alsoSecondTerm</code> on the left-hand side because you will / want to be able to write an alternative second term that is defeq to the first term (and this would be checked automatically?) or do you mean that <code>alsoSecondTerm</code> is syntactically equal to <code>secondTerm</code> and you are just optionally writing it again for clarity?</p>",
        "id": 315856015,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671034292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315844200\">said</a>:</p>\n<blockquote>\n<p>yes, the underscores are necessary. Otherwise the stuff on the left will be considered as a continuation of the stuff on the right</p>\n</blockquote>\n<p>I thought whitespace was now important. Can't we use that somehow?</p>",
        "id": 315859194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671035113
    },
    {
        "content": "<p>I don't think the column is checked before binops</p>",
        "id": 315859335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671035152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/315842508\">said</a>:</p>\n<blockquote>\n<p>If only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>\n<p>worked</p>\n</blockquote>\n<p>I implemented support for this: <a href=\"https://github.com/AdrienChampion/lean4/commit/ba391209f9ae1362393c76f1c992570b5d6968ff\">https://github.com/AdrienChampion/lean4/commit/ba391209f9ae1362393c76f1c992570b5d6968ff</a></p>",
        "id": 319560721,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1672916846
    },
    {
        "content": "<p>I'm not sure whether someone had arguments against this syntax, and/or if it would cover everyone's bases. Feedback would be greatly appreciated</p>",
        "id": 319560936,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1672916906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 319668466,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1672951047
    },
    {
        "content": "<p>That syntax is fine with me.  I hope this would also work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>\n<p>My main concern is actually indenting after <code>by</code>--an earlier change made it necessary to indent very far after <code>by</code>.  I assume that will also be fixed by this change.</p>",
        "id": 319787447,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673013944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> well it became necessary to indent very far after <code>by</code> only if you indented your <code>_</code> very far. One of the main point of this change is to not need to do that anymore, so that both the <code>_</code> and <code>by</code>'s body are properly indented</p>",
        "id": 319813998,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673022234
    },
    {
        "content": "<p>Like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>",
        "id": 319814400,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673022356
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319820278,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673024187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/319787447\">said</a>:</p>\n<blockquote>\n<p>I hope this would also work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The issue with this syntax is that you don't know at what indentation we should stop parsing <code>pf12</code> as we don't know the <code>_</code> indentation yet</p>",
        "id": 319831389,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673027840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/319787447\">said</a>:</p>\n<blockquote>\n<p>That syntax is fine with me.  I hope this would also work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45</span>\n</code></pre></div>\n<p>My main concern is actually indenting after <code>by</code>--an earlier change made it necessary to indent very far after <code>by</code>.  I assume that will also be fixed by this change.</p>\n</blockquote>\n<p>So if you want to use <code>by</code> on the <code>= t2</code> line, you need to indent <em>after</em> the start of the line, <em>i.e.</em> the <code>=</code>.</p>\n<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">t1</span>\n      <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>but this does not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">t1</span>\n      <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>",
        "id": 319849613,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673033939
    },
    {
        "content": "<p>IMHO it seems like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">t1</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>if merged would be preferable or <em>\"more idiomatic\"</em> as it makes everything quite consistent, especially indentation</p>",
        "id": 319850710,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673034335
    },
    {
        "content": "<p>Yes, I can see that this is more consistent.  OK, I'm happy with this.</p>",
        "id": 319867066,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673040829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> it would be great to have your feedback <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 319938414,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673089741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> how much feedback do you think we should get on this point by the way? And do you have suggestions on how to get enough of it besides this thread so far?</p>",
        "id": 319942934,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673091855
    },
    {
        "content": "<p>Feedback on what exactly? I think the underscore before every operator is nice, because I often add and remove steps while iterating on a proof</p>",
        "id": 319946628,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673093401
    },
    {
        "content": "<p>Are there now two competing proposals, <a href=\"https://github.com/leanprover/lean4/pull/1844\">#1844</a> and <a href=\"https://github.com/AdrienChampion/lean4/commit/ba391209f9ae1362393c76f1c992570b5d6968ff\">allow underscore in 1st relation</a>?  Perhaps, to get more feedback, you could show us some tests illustrating what works under each proposal?  As I understand it, the second proposal adds a new option: using underscores in the 1st relation.  But does it also rule out anything that is allowed under the first proposal?</p>",
        "id": 321502184,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673797449
    },
    {
        "content": "<p>No, things which work under <a href=\"https://github.com/leanprover/lean4/pull/1844\">lean4#1844</a> should also work in the new version</p>",
        "id": 321503063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673798026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> 's list of examples <a href=\"https://github.com/AdrienChampion/experimentalean4/blob/main/discussions/ByCalcIndent/ByCalcIndent.lean\">here</a> included this example as working under <a href=\"https://github.com/leanprover/lean4/pull/1844\">lean4#1844</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>  <span class=\"n\">longId</span> <span class=\"n\">t1</span>\n      <span class=\"bp\">=</span> <span class=\"n\">longerId</span> <span class=\"n\">t2</span>\n        <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span>\n        <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span>\n        <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>A previous comment from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> gave me the impression that this wouldn't work under the new version, because when parsing pf12 you don't yet know the indenting level for _.  Is that wrong, or did I misunderstand Sebastian's comment?</p>",
        "id": 321505536,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673799492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> this works fine, but it will start to break apart if you <code>by</code> + newline</p>",
        "id": 321507450,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673800556
    },
    {
        "content": "<p>IMHO it should be discouraged and considered non-idiomatic for the same reasons as above (inconsistent and breaks usual indentation rules)</p>",
        "id": 321507612,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673800630
    },
    {
        "content": "<p>To be clear, this kind of example has exactly the same weird behavior under both versions</p>",
        "id": 321508132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673800958
    },
    {
        "content": "<p>if you aren't using a multiline <code>by</code>, you might be able to avoid noticing the weird behavior</p>",
        "id": 321508179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673800998
    },
    {
        "content": "<p>OK, I think I understand.  The \"weird behavior\" is that after <code>by</code> you would have to indent beyond the <code>=</code>?</p>\n<p>If the new proposal just adds a new attractive option without breaking anything, I can't see any reason not to prefer it.</p>",
        "id": 321508372,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673801131
    },
    {
        "content": "<p>you have to indent beyond the column where <code>longId</code> starts</p>",
        "id": 321508429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673801163
    },
    {
        "content": "<p>Oh, that makes sense.</p>",
        "id": 321508494,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673801205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/321502184\">said</a>:</p>\n<blockquote>\n<p>Are there now two competing proposals, <a href=\"https://github.com/leanprover/lean4/pull/1844\">#1844</a> and <a href=\"https://github.com/AdrienChampion/lean4/commit/ba391209f9ae1362393c76f1c992570b5d6968ff\">allow underscore in 1st relation</a>?  Perhaps, to get more feedback, you could show us some tests illustrating what works under each proposal?  As I understand it, the second proposal adds a new option: using underscores in the 1st relation.  But does it also rule out anything that is allowed under the first proposal?</p>\n</blockquote>\n<p>Underscore in first relation will be added to  <a href=\"https://github.com/leanprover/lean4/pull/1844\">#1844</a> shortly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 321524425,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673811165
    },
    {
        "content": "<p>I wonder if <a href=\"https://github.com/leanprover/lean4/pull/1844\">#1844</a> will fix the following problem.</p>\n<p>The error message I get in this example is very unhelpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>There is no red squiggle anywhere in the first example, even though <code>linarith</code> obviously cannot prove <code>a &gt; b</code>.  The red squiggle appears under the second <code>example</code>.  I assume what's happening here is that Lean thinks that <code>done</code> and the second <code>example</code> are part of the tactic proof of <code>a &gt; b</code>, and it can't parse it, so <code>linarith</code> never actually gets called.  Is that right?</p>",
        "id": 323051893,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674488386
    },
    {
        "content": "<p>I'm looking into it, even this is broken</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>gives me <code>unexpected end of input; expected ':='</code> after the <code>done</code></p>",
        "id": 323088051,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> it does not seem related to the second <code>by</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>also gives me <code>unexpected end of input; expected ':='</code></p>",
        "id": 323088508,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498325
    },
    {
        "content": "<p>this is on the PR or on the original?</p>",
        "id": 323088631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498358
    },
    {
        "content": "<p>That's on nightly</p>",
        "id": 323088782,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498389
    },
    {
        "content": "<p>I'm using leanprover/lean4:nightly-2023-01-16.</p>",
        "id": 323088806,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674498399
    },
    {
        "content": "<p>If you add a second <code>calc</code> line the issue goes away</p>",
        "id": 323088874,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498422
    },
    {
        "content": "<p>It seems to be a problem in <code>calc</code> expecting at least 2 relations to prove</p>",
        "id": 323088923,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498434
    },
    {
        "content": "<p>that works in lean 3 FWIW</p>",
        "id": 323089124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498486
    },
    {
        "content": "<p>That would definitely (I think) be a different PR though. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> want me to investigate this?</p>",
        "id": 323089168,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498502
    },
    {
        "content": "<p><code>calc term := proof</code> is treated as <code>show term from proof</code></p>",
        "id": 323089209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498513
    },
    {
        "content": "<p>I imagine it's a <code>+</code> where there should be a <code>*</code></p>",
        "id": 323089261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498532
    },
    {
        "content": "<p>Since you are working on a better version <span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> I think it suffices to ensure that your version does not inherit the issue</p>",
        "id": 323089370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498568
    },
    {
        "content": "<p>Could it be the <code>stx[2].getArgs</code> in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Calc.lean#L73\">the elaboration</a>?</p>",
        "id": 323089648,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498641
    },
    {
        "content": "<p>That's the term version but the tactic version has the same thing</p>",
        "id": 323089722,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498678
    },
    {
        "content": "<p>no that's a pure function. The only thing pure functions can do to fail is <code>panic!</code> and this looks quite different</p>",
        "id": 323089834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498721
    },
    {
        "content": "<p>it's most likely the <code>syntax</code> declaration for calc</p>",
        "id": 323090030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674498773
    },
    {
        "content": "<p>Just tested and that's only a tactic version issue</p>",
        "id": 323090046,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498780
    },
    {
        "content": "<p>Term <code>calc</code> is happy with just one relation to prove</p>",
        "id": 323090081,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674498794
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n  <span class=\"o\">(</span><span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 323091936,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674499420
    },
    {
        "content": "<p>my guess is that it has something to do with the empty <code>withPosition</code> after the calc</p>",
        "id": 323092075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674499461
    },
    {
        "content": "<p>Still looking into it, but maybe we should open an issue?</p>",
        "id": 323192547,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674549744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/323090046\">said</a>:</p>\n<blockquote>\n<p>Just tested and that's only a tactic version issue</p>\n</blockquote>\n<p>Actually that's not true. The problem triggers whenever there's a <code>calc</code> with a single relation, <strong>and</strong> it is followed by something that could be the start of another relation (regardless of indentation).</p>",
        "id": 323194837,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674550443
    },
    {
        "content": "<p>For instance, on term-<code>calc</code>, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this does not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">res</span>\n<span class=\"c1\">-- expected ':='</span>\n</code></pre></div>",
        "id": 323195031,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674550504
    },
    {
        "content": "<p>And on tactic-<code>calc</code>, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and as reported this does not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- expected ':='</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 323195398,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674550618
    },
    {
        "content": "<p>The separate <code>withPosition</code>s were requested in <a href=\"https://github.com/leanprover/lean4/issues/1342#issuecomment-1192114799\">https://github.com/leanprover/lean4/issues/1342#issuecomment-1192114799</a></p>",
        "id": 323196790,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674551052
    },
    {
        "content": "<p>The second one should probably be preceded by <code>colGt</code> though</p>",
        "id": 323196828,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674551065
    },
    {
        "content": "<p>That's exactly the kind of thing I'm experimenting with, but it's tricky to get it right (especially for a noob like me)</p>",
        "id": 323197417,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674551267
    },
    {
        "content": "<p>I'm not far though (hopefully)</p>",
        "id": 323197436,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674551277
    },
    {
        "content": "<p>But maybe if the \"correctly indented\" <code>_</code>-in-first-relation ends up being considered the most idiomatic syntax, <code>calc</code>'s syntax definition could be significantly simpler at the cost of forcing <code>calc</code> \"items\" to have the same/<code>colGe</code> indentation</p>",
        "id": 323197819,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674551399
    },
    {
        "content": "<p>Which I'm all for but I understand that reasonable minds can disagree</p>",
        "id": 323197955,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674551437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/323196828\">said</a>:</p>\n<blockquote>\n<p>The second one should probably be preceded by <code>colGt</code> though</p>\n</blockquote>\n<p>The problem I'm having is that having <code>colGt</code> outside of the repetition in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">calcTactic</span><span class=\"o\">)</span> <span class=\"s2\">\"calc\"</span>\n  <span class=\"n\">ppLine</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"o\">)</span>\n  <span class=\"n\">ppLine</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">calcStep</span> <span class=\"n\">ppLine</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"c1\">-- ppLine colGt withPosition(...)</span>\n  <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>means the <code>done</code> (in the examples) will fail the check and produce an error.</p>",
        "id": 323200798,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674552267
    },
    {
        "content": "<p>But then if I put the <code>colGt</code> inside the repetition, then it comes after the <code>withPosition</code> and it will always fail</p>",
        "id": 323200990,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674552331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/323197819\">said</a>:</p>\n<blockquote>\n<p>But maybe if the \"correctly indented\" <code>_</code>-in-first-relation ends up being considered the most idiomatic syntax, <code>calc</code>'s syntax definition could be significantly simpler at the cost of forcing <code>calc</code> \"items\" to have the same/<code>colGe</code> indentation</p>\n</blockquote>\n<p>Yes, we should agree on that first</p>",
        "id": 323201306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674552411
    },
    {
        "content": "<p>The closest I have to something working atm is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">calcTactic</span><span class=\"o\">)</span> <span class=\"s2\">\"calc\"</span>\n  <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"o\">)</span> <span class=\"n\">ppLine</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n  <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>which passes <strong>my</strong> tests but, I think, allows a bunch of things we don't want, and/or might mis-recognize lines or at least produces bad errors at times</p>",
        "id": 323201542,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674552472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/323201306\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation/near/323197819\">said</a>:</p>\n<blockquote>\n<p>But maybe if the \"correctly indented\" <code>_</code>-in-first-relation ends up being considered the most idiomatic syntax, <code>calc</code>'s syntax definition could be significantly simpler at the cost of forcing <code>calc</code> \"items\" to have the same/<code>colGe</code> indentation</p>\n</blockquote>\n<p>Yes, we should agree on that first</p>\n</blockquote>\n<p>To sabotage my own point, note that <code>_</code>-in-first-relation forces (I'm pretty sure) to consider the first <code>calcStep</code> separately anyways</p>",
        "id": 323202467,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1674552761
    }
]