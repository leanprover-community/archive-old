[
    {
        "content": "<p>I'm trying to define a mutual inductive type containing a constructor that requires a proof about previous parameters (of the same constructor).</p>\n<p>How can I achieve this? Or is it not possible?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- (kernel) invalid nested inductive datatype 'Eq',</span>\n              <span class=\"c1\">-- nested inductive datatypes parameters cannot</span>\n              <span class=\"c1\">-- contain local variables.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">barsL</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">barsR</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">barsL.length</span> <span class=\"bp\">=</span> <span class=\"n\">barsR.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Feel free to clear out any <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> noise that you think I'm being obfuscated by and to suggest an adequate approach to make it work <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 277021201,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648567322
    },
    {
        "content": "<p>It's not possible, at least not with this encoding. You can't use list functions on nested inductives in the definition, this would make an inductive-recursive type</p>",
        "id": 277021847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648567586
    },
    {
        "content": "<p>in this particular case a quick fix is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"bp\">×</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277022142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648567736
    },
    {
        "content": "<p>You can also use <code>Vector</code> instead of <code>List</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">barsL</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">barsR</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277022241,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648567788
    },
    {
        "content": "<p>What if the constraint is <code>barsL.length ≤ barsR.length</code>?</p>",
        "id": 277022358,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648567828
    },
    {
        "content": "<p><code>List (Bar × Bar) → List Bar → Foo</code>?</p>",
        "id": 277022411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648567846
    },
    {
        "content": "<p>Leo's version works just fine with inequalities there</p>",
        "id": 277022493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648567879
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">barsL</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bar</span> <span class=\"n\">nL</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">barsR</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bar</span> <span class=\"n\">nR</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">nL</span> <span class=\"bp\">≤</span> <span class=\"n\">nL</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 277022782,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648568019
    },
    {
        "content": "<p>It works! Thank you very much!</p>",
        "id": 277023061,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648568127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 277023134,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648568156
    },
    {
        "content": "<p>You can generalize Leo's version to accomodate most functions that you would otherwise need inductive-recursive types for; you just calculate the function's value in an index of the inductive type</p>",
        "id": 277023561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648568317
    },
    {
        "content": "<p>I didn't understand what you mean, Mario. Can you show me?</p>",
        "id": 277023843,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648568420
    },
    {
        "content": "<p>bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foo.headD</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WithHeadD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 277024809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648568759
    },
    {
        "content": "<p><code>WithHeadD α a x</code> is essentially the type <code>{l : List α // l.headD a = x}</code></p>",
        "id": 277024988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648568818
    },
    {
        "content": "<p>But neither of those were accepted by the kernel</p>",
        "id": 277025361,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648568962
    }
]