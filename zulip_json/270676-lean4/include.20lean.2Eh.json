[
    {
        "content": "<p>Another stupid question: How do I compile and run code? I can compile a file using <code>lake env lean ... -c ...</code>.<br>\nIf I just stupidly compile this C file, I get an error that <code>lean/lean.h</code> is not  found (at line 4: <code>#include &lt;lean/lean.h&gt;</code>). <br>\nHow do I compile this C file correctly?</p>",
        "id": 264846615,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639483230
    },
    {
        "content": "<p>There is an FFI example over here <a href=\"https://github.com/leanprover/lake/blob/master/examples/ffi/lakefile.lean\">https://github.com/leanprover/lake/blob/master/examples/ffi/lakefile.lean</a> that shows how to marry C and Lean 4 code.</p>",
        "id": 264846815,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639483360
    },
    {
        "content": "<p>I see, that is useful. Can I somehow use this to compile tactics/programs from a single file in the <code>mathlib4</code> repository (which, by default doesn't compile its files)?</p>",
        "id": 264847907,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639484099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> more specifically, this part tells the compiler where the <code>lean/lean.h</code> header is:<br>\n<code>#[\"-I\", (← getLeanIncludeDir).toString]</code></p>",
        "id": 264847971,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639484143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264847907\">said</a>:</p>\n<blockquote>\n<p>I see, that is useful. Can I somehow use this to compile tactics/programs from a single file in the <code>mathlib4</code> repository (which, by default doesn't compile its files)?</p>\n</blockquote>\n<p>What do you mean? Do you want to define a function in Mathlib4 that runs C code?</p>",
        "id": 264849948,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639485186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> AFAIK, Lake can only build a single library or executable per package right now. But you can change <code>binRoot</code> to temporarily point at an appropriate module and then use <code>lake build :bin</code>.</p>",
        "id": 264853079,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639486713
    },
    {
        "content": "<p>Ok, let me take a step back.</p>\n<p>I am trying to collect all declarations in the environment and do some operations on them. When doing this with <code>#eval</code> inside Lean, these operations are starting to become really expensive, and I was wondering if using compiled code instead of interpreted code would help here.</p>\n<p>So if I understand the comments correctly, I now have to write a function<br>\n<code>def main (strs : List String) : IO UInt32 := ...</code><br>\nthen use <code>lake build</code> with the appropriate configuration to run the code after compiling it? <br>\nOr can I do the compilation from Lean itself (using <code>compileO</code>?)</p>\n<p>Also, how do I pass (data computed from) the current environment to the compiled function (if the function I compile lives in <code>IO</code>)?</p>",
        "id": 264855023,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639487687
    },
    {
        "content": "<p>What operations are you trying to do?  The interpreter isn't that slow, and mathlib4+lean is pretty small.</p>",
        "id": 264856788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639488571
    },
    {
        "content": "<p>Maybe he is operating on binport output?</p>",
        "id": 264857543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639488950
    },
    {
        "content": "<p>I was also a bit surprised that it would already slow down. I might have some inefficient code. <br>\nI'm trying to do a kind of page rank on the  declarations. So it mostly involves mapping functions over arrays and <code>Float</code> operations.</p>",
        "id": 264857710,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489039
    },
    {
        "content": "<p>I am currently just doing it on mathlib4+Lean, but the idea is to later do it on the binport output. Unfortunately the former is already slow.</p>",
        "id": 264857790,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489074
    },
    {
        "content": "<p>The (very messy) file is here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/fpvandoorn/graph/Personal/Graph.lean\">https://github.com/leanprover-community/mathlib4/blob/fpvandoorn/graph/Personal/Graph.lean</a></p>",
        "id": 264858117,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489215
    },
    {
        "content": "<p>If you're on Linux, you can get a rough idea of what it is spending time on by running <code>perf top</code> in parallel</p>",
        "id": 264858172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639489244
    },
    {
        "content": "<p>A majority of the computation time seems to be spent on a quicksort:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sortRevByWeight</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">NameNode</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">NameNode</span> <span class=\"o\">:=</span>\n<span class=\"n\">g.qsort</span> <span class=\"bp\">λ</span> <span class=\"n\">nn1</span> <span class=\"n\">nn2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nn1.weight</span> <span class=\"bp\">&gt;</span> <span class=\"n\">nn2.weight</span>\n</code></pre></div>\n<p>Here <code>nni.weight</code> are <code>Float</code>s</p>",
        "id": 264858991,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489598
    },
    {
        "content": "<p>and the array is about 27k entries long.</p>",
        "id": 264859249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489723
    },
    {
        "content": "<p>Ah, makes sense. <code>qsort</code> will be specialized to the comparison function, so it cannot use any precompiled version. And LLVM will make a much better job of the resulting code than the interpreter.</p>",
        "id": 264859475,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639489808
    },
    {
        "content": "<p>If interesting, these are the top entries of <code>sudo perf top</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">93</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_inc_ref_cold</span>\n  <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">42</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_dec_ref_cold</span>\n  <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">17</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">eval_body</span>\n  <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">14</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">rb_map</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">symbol_cache_entry</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_quick_cmp</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">find</span>\n   <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">call</span>\n   <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">86</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_name_eq</span>\n   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">53</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_inc</span>\n   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">pop_frame</span>\n   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">72</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">lookup_symbol</span>\n   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">36</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">eval_expr</span>\n   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">28</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">stub_m</span>\n   <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">__append</span>\n   <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">85</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">stub_m_aux</span>\n   <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">71</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mk_pair</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">symbol_cache_entry</span><span class=\"bp\">&gt;</span>\n   <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">52</span><span class=\"bp\">%</span>  <span class=\"n\">libleanshared.so</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">rb_map</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">constant_cache_entry</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_quick_cmp</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">find</span>\n</code></pre></div>",
        "id": 264859764,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639489933
    },
    {
        "content": "<p>That definitely looks like the interpreter :)</p>",
        "id": 264859830,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639489966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264855023\">said</a>:</p>\n<blockquote>\n<p>So if I understand the comments correctly, I now have to write a function<br>\n<code>def main (strs : List String) : IO UInt32 := ...</code><br>\nthen use <code>lake build</code> with the appropriate configuration to run the code after compiling it? </p>\n</blockquote>\n<p>Yes, I think that is the simplest way currently.</p>\n<blockquote>\n<p>Also, how do I pass (data computed from) the current environment to the compiled function (if the function I compile lives in <code>IO</code>)?</p>\n</blockquote>\n<p>You can't directly. You can get an <code>Environment</code> in the compiled program by running <code>importModules</code>, in which case you should run the binary inside <code>lake env</code> so that <code>LEAN_PATH</code> is set correctly.</p>",
        "id": 264859849,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639489969
    },
    {
        "content": "<p>I implemented this over here: <a href=\"https://github.com/hargoniX/doc-gen4/blob/main/DocGen4/Load.lean\">https://github.com/hargoniX/doc-gen4/blob/main/DocGen4/Load.lean</a> if you want some place you can copy paste from :P (its largely adapted from the compiler and language server though)</p>",
        "id": 264860102,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639490084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264859849\">said</a>:</p>\n<blockquote>\n<p>You can't directly. You can get an <code>Environment</code> in the compiled program by running <code>importModules</code>, in which case you should run the binary inside <code>lake env</code> so that <code>LEAN_PATH</code> is set correctly.</p>\n</blockquote>\n<p>Thanks! So something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">EIO.toIO</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"error\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CoreM.run'</span> <span class=\"n\">test</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">})</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 264860698,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639490339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264860102\">said</a>:</p>\n<blockquote>\n<p>I implemented this over here: <a href=\"https://github.com/hargoniX/doc-gen4/blob/main/DocGen4/Load.lean\">https://github.com/hargoniX/doc-gen4/blob/main/DocGen4/Load.lean</a> if you want some place you can copy paste from :P (its largely adapted from the compiler and language server though)</p>\n</blockquote>\n<p>Thanks, I'll take a look</p>",
        "id": 264860717,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639490348
    },
    {
        "content": "<p>Ah, you also need to run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"build/lib\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>before <code>importModules</code>. Then you don't even need <code>lake env</code> if you run the executable from the project root.</p>",
        "id": 264861995,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639490801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think I'm getting closer. I now have the following files:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/Graph.lean</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"build/lib\"</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">CoreM.toIO</span> <span class=\"n\">test</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lakefile.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">mathlib</span> <span class=\"o\">{</span> <span class=\"n\">binRoot</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Graph</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I can compile the file fine with <code>lake build</code>. However, running <code>./build/bin/mathlib</code> gives me </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>uncaught exception: could not find native implementation of external declaration 'UInt64.ofNatCore' (symbols 'l_UInt64_ofNatCore___boxed' or 'l_UInt64_ofNatCore')\n</code></pre></div>\n<p>Searching on Zulip gives me similar errors using <code>leanpkg</code> where the solution is to add the option <code>LINK_OPTS=-rdynamic</code>. Do I have to do something similar with <code>lake</code>?</p>",
        "id": 264879307,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639497652
    },
    {
        "content": "<p>Ah, you can use <code>supportInterpreter := true</code> in the lakefile for that</p>",
        "id": 264879668,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639497754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> This helped me when I got that error:<br>\nadd <code>supportInterpreter := true</code> to the package in the <code>lakefile</code></p>",
        "id": 264879699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639497759
    },
    {
        "content": "<p>Thanks, that works!</p>",
        "id": 264880351,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639497981
    },
    {
        "content": "<p>The <code>qsort</code> which was the bottleneck when interpreted is ~100 times faster now :-)</p>",
        "id": 264881145,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639498272
    }
]