[
    {
        "content": "<p>I'm learning macros and read <em>most of</em> the <a href=\"https://arxiv.org/pdf/2001.10490.pdf#page=11\">beyond notations paper</a>. I am wondering if it's possible to <em>export</em> some identifiers introduced in a <code>macro_rules</code> so that they are visible outside.</p>",
        "id": 277659539,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649017964
    },
    {
        "content": "<p>Maybe with an attribute telling lean I actively want to export some identifiers, I still want hygiene on everything but a few idents.</p>",
        "id": 277659543,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649017978
    },
    {
        "content": "<p>My use case is that I want to add to the namespace associated to some type I don't know, but I want what I add to be available. It's more of an exercise than a real vital thing I need at this point</p>",
        "id": 277659604,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649018078
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"implStaticLen!\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\"in\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\")\"</span><span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"n\">implStaticLen</span><span class=\"bp\">!</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">)</span>\n  <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">def</span> <span class=\"n\">staticLen</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">value</span>\n    <span class=\"k\">#check</span> <span class=\"n\">staticLen</span>\n  <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"n\">implStaticLen</span><span class=\"bp\">!</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">nSpace</span> <span class=\"o\">)</span>\n  <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">nSpace</span>\n      <span class=\"n\">implStaticLen</span><span class=\"bp\">!</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">)</span>\n    <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">nSpace</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Arr2</span> <span class=\"o\">(</span><span class=\"n\">Elm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">Elm</span> <span class=\"bp\">×</span> <span class=\"n\">Elm</span>\n<span class=\"n\">implStaticLen</span><span class=\"bp\">!</span> <span class=\"o\">(</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Arr2</span> <span class=\"k\">in</span> <span class=\"n\">Arr2</span> <span class=\"o\">)</span>\n<span class=\"c1\">-- `#check` inside the macro gives `Map.Spec.Range.Arr2.staticLen✝ : Nat`</span>\n<span class=\"k\">#check</span> <span class=\"n\">Arr2.staticLen</span>\n<span class=\"c1\">-- `unknown constant 'Map.Spec.Range.Arr2.staticLen'`</span>\n</code></pre></div>",
        "id": 277660310,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649019073
    },
    {
        "content": "<p>You can use use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkIdent#doc\">docs4#Lean.mkIdent</a> to create a syntactic identifier without hygiene information</p>",
        "id": 277660315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649019082
    },
    {
        "content": "<p>Wait, mathlib4 is up? At least the lean4 part I mean?</p>",
        "id": 277660890,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649019687
    },
    {
        "content": "<p>It wasn't the last time I did a deep dive in lean4 (main reason I stopped diving)</p>\n<p>But now I can stop spending my time <code>rg</code>-ing lean4's sources. Thanks!</p>",
        "id": 277660936,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649019727
    },
    {
        "content": "<p>I'm surprised it's not linked in the <a href=\"https://leanprover.github.io/documentation/\">\"official\" documentation page</a> though</p>",
        "id": 277660949,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649019758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277660315\">said</a>:</p>\n<blockquote>\n<p>You can use use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkIdent#doc\">docs4#Lean.mkIdent</a> to create a syntactic identifier without hygiene information</p>\n</blockquote>\n<p>Also, thank you for your answer. It seems it's exactly what I need, but lean4's sources don't seem to use it in a <code>macro_rules</code>. At least now I'm on the right track, I'll figure it out</p>\n<p>Thank you so much <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 277660982,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649019822
    },
    {
        "content": "<p>There is this slightly silly example: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean</a><br>\nYou might need to make the syntax kind explicit after <code>def</code>: <code>def $(mkIdent `staticLen):ident ...</code></p>",
        "id": 277661229,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649020171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> mathlib4 has been around for almost a year, but we still don't have the \"real thing\", it's just a grab bag of tactics and preparatory material. But it is getting better as a collection of example use cases of lean 4 metaprogramming</p>",
        "id": 277682019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649048336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277661229\">said</a>:</p>\n<blockquote>\n<p>There is this slightly silly example: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean</a><br>\nYou might need to make the syntax kind explicit after <code>def</code>: <code>def $(mkIdent `staticLen):ident ...</code></p>\n</blockquote>\n<p>You really did solve everything for me <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 277691192,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649057077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277682019\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> mathlib4 has been around for almost a year, but we still don't have the \"real thing\", it's just a grab bag of tactics and preparatory material. But it is getting better as a collection of example use cases of lean 4 metaprogramming</p>\n</blockquote>\n<p>Sounds that way, although simply having lean's documentation in a nice searchable way is already going to make my life significantly easier. I really think it should be on the <a href=\"http://github.io\">github.io</a> \"Documentation\" page!</p>\n<p>I heard contributing matlab4 and to the <code>matlab3 → matlab4</code> transition (tactics in particular) is a great way to learn. Do you know if there are enough low-hanging fruits left at this point?</p>",
        "id": 277691540,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649057288
    },
    {
        "content": "<p>the name seems to be mutating in your posts. mathlib != matlab</p>",
        "id": 277712127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649068812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277712127\">said</a>:</p>\n<blockquote>\n<p>the name seems to be mutating in your posts. mathlib != matlab</p>\n</blockquote>\n<p>That was before my coffee sorry. I'm very, very glad mathlib is not the same as matlab and we're not spec/ver-ifying math stuff in simulink</p>",
        "id": 277712270,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649068917
    },
    {
        "content": "<p>there are still plenty of low hanging fruits. The main thing we're working on at the moment is porting tactics listed in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">Mathport/Syntax.lean</a></p>",
        "id": 277712374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649068978
    },
    {
        "content": "<p>I see, I checked for \"easy first issue\"-like tags in the repo's issues but to my surprise there's only 3 open ones. I <em>quickly</em> checked for a \"contributing\" thing but did not find one</p>",
        "id": 277712450,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649069031
    },
    {
        "content": "<p>Should I just pick on and try to write a PR then?</p>",
        "id": 277712511,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649069057
    },
    {
        "content": "<p><em>notices there's a <code>mathlib4</code> channel</em></p>\n<p>I should probably just take a look there</p>",
        "id": 277713082,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649069440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277661229\">said</a>:</p>\n<blockquote>\n<p>There is this slightly silly example: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/kevin.lean</a><br>\nYou might need to make the syntax kind explicit after <code>def</code>: <code>def $(mkIdent `staticLen):ident ...</code></p>\n</blockquote>\n<p>I'm wondering if there's a resource I missed for macros that would help me understand what I can and can't do. Is there?</p>\n<p>For instance this does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span>\n  <span class=\"s2\">\"repeat \"</span> <span class=\"s2\">\"in \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"(\"</span>\n    <span class=\"o\">(</span>\n      <span class=\"n\">declModifiers</span>\n      <span class=\"s2\">\"fn \"</span> <span class=\"n\">ident</span> <span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n      <span class=\"s2\">\":=\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";\"</span>\n    <span class=\"o\">)</span><span class=\"bp\">*</span>\n  <span class=\"s2\">\")\"</span>\n<span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"n\">repeat</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">ns</span> <span class=\"o\">(</span>\n    <span class=\"bp\">$</span><span class=\"o\">[</span>\n      <span class=\"bp\">$</span><span class=\"n\">fMods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span>\n      <span class=\"n\">fn</span> <span class=\"bp\">$</span><span class=\"n\">fId</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">fParams</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">fTy</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">fBody</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">;</span>\n    <span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span>\n<span class=\"c1\">--  v~~~~~ expected ')'</span>\n    <span class=\"bp\">$</span><span class=\"o\">[</span>\n      <span class=\"bp\">$</span><span class=\"n\">fMods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span>\n      <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">fId</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">fParams</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">fTy</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">fBody</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"n\">repeat</span> <span class=\"k\">in</span> <span class=\"n\">Dummy</span> <span class=\"o\">(</span>\n  <span class=\"n\">fn</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span><span class=\"bp\">;</span>\n  <span class=\"n\">fn</span> <span class=\"n\">something</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">11</span><span class=\"bp\">;</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>The RHS of the <code>macro_rules</code> rule is rejected on the <code>$[</code>. I'm not sure why, I feel like I'm still missing a lot of context to understand macros and their restrictions</p>",
        "id": 277713354,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649069617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> in this case try defining a separate syntax for the thing you're signaling with multiple occurrences.</p>\n<p>Something along the lines of <code>syntax declModifierSyntax := declModifiers \"fn \" ident ...</code></p>",
        "id": 277717104,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649071965
    },
    {
        "content": "<p>There's something strange in your syntax. I will test it on my computer in a few minutes</p>",
        "id": 277717185,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649072033
    },
    {
        "content": "<p>I'm afraid splicing a sequence of commands is not implemented right now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Please file a bug</p>",
        "id": 277721128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649074247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> just to mention since you're interested in learning about the topic and documentation: we've kicked off a <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">book for metaprogramming in Lean 4</a>. I took the initiative to start the repo but it's a collaborative effort. Many of those topics are still beyond my competence but, as you said, porting mathlib4 tactics is a good way to learn. I also play with side projects to help me gather knowledge to produce more content. Help is welcome!</p>",
        "id": 277722954,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649075221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277722954\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> just to mention since you're interested in learning about the topic and documentation: we've kicked off a <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">book for metaprogramming in Lean 4</a>. I took the initiative to start the repo but it's a collaborative effort. Many of those topics are still beyond my competence but, as you said, porting mathlib4 tactics is a good way to learn. I also play with side projects to help me gather knowledge to produce more content. Help is welcome!</p>\n</blockquote>\n<p>This sounds pretty interesting, I'll take a look at the book see if it helps and/or if I can contribute. Feel free to send me (DM or here) more links of lean4 codebases a noob like myself can contribute to <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 277723219,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649075362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Make.20some.20macro-introduced.20identifiers.20visible.20outside/near/277721128\">said</a>:</p>\n<blockquote>\n<p>I'm afraid splicing a sequence of commands is not implemented right now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Please file a bug</p>\n</blockquote>\n<p>I will try to do that shortly no problem <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 277723270,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1649075395
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277724260,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649075869
    }
]