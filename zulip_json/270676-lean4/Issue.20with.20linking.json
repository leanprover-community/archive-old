[
    {
        "content": "<p>I'm currently working on a project that uses openBLAS for optimized computation. I have a matrix multiplication function which is implented with cblas, and a matrix exponentiation function which is implemented with cblas as well. If its relevant, in Lean, the exponentiation function is defined by recursive calls to multiplication (but it's <code>extern</code>'ed anyway) When I try to compile, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-24/bin/lean: symbol lookup error: ./build/lib/libleanffi.so: undefined symbol: cblas_dgemm</span>\n</code></pre></div>\n<p>but what's strange is that this only occurs when I use the exponentiation function. When I compile with just the multiplication function (which also uses <code>cblas_dgemm</code> I have no issues. </p>\n<p>If it helps, here is the exponentiation code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"mathMatrix_exp\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mathMatrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mathMatrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mathMatrix.id</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M.multiply_MM</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">M</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as well as the underlying FFI code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">mathMatrix_mul_MM</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">m_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">n_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">k_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">M1_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">M2_</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mathMatrix</span><span class=\"bp\">*</span> <span class=\"n\">M1</span> <span class=\"bp\">=</span> <span class=\"n\">mathMatrix_unboxer</span><span class=\"o\">(</span><span class=\"n\">M1_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">mathMatrix</span><span class=\"bp\">*</span> <span class=\"n\">M2</span> <span class=\"bp\">=</span> <span class=\"n\">mathMatrix_unboxer</span><span class=\"o\">(</span><span class=\"n\">M2_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">uint32_t</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">M1</span><span class=\"bp\">-&gt;</span><span class=\"n\">rows</span><span class=\"bp\">;</span>\n    <span class=\"n\">uint32_t</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">M1</span><span class=\"bp\">-&gt;</span><span class=\"n\">cols</span><span class=\"bp\">;</span>\n    <span class=\"n\">uint32_t</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">M2</span><span class=\"bp\">-&gt;</span><span class=\"n\">cols</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"n\">M2</span><span class=\"bp\">-&gt;</span><span class=\"n\">rows</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">mathMatrix</span><span class=\"bp\">*</span> <span class=\"n\">out_struct</span> <span class=\"bp\">=</span> <span class=\"n\">mathMatrix_alloc</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">double</span><span class=\"bp\">*</span> <span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">malloc</span><span class=\"o\">(</span><span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">double</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">i</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">result</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">cblas_dgemm</span><span class=\"o\">(</span><span class=\"n\">CblasRowMajor</span><span class=\"o\">,</span> <span class=\"n\">CblasNoTrans</span><span class=\"o\">,</span> <span class=\"n\">CblasNoTrans</span><span class=\"o\">,</span>\n                <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">M1</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M2</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">out_struct</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">result</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">return</span> <span class=\"n\">mathMatrix_boxer</span><span class=\"o\">(</span><span class=\"n\">out_struct</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">mathMatrix_exp</span> <span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">n_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">M_</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">e_</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mathMatrix</span><span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">mathMatrix_unboxer</span><span class=\"o\">(</span><span class=\"n\">M_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">uint32_t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">lean_unbox_uint32</span><span class=\"o\">(</span><span class=\"n\">e_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">uint32_t</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"n\">rows</span><span class=\"bp\">;</span>\n    <span class=\"n\">mathMatrix</span><span class=\"bp\">*</span> <span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">mathMatrix_struct_id</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">i</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">cblas_dgemm</span><span class=\"o\">(</span><span class=\"n\">CblasRowMajor</span><span class=\"o\">,</span> <span class=\"n\">CblasNoTrans</span><span class=\"o\">,</span> <span class=\"n\">CblasNoTrans</span><span class=\"o\">,</span>\n                    <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"bp\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">return</span> <span class=\"n\">mathMatrix_boxer</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Edit: The issue fixed when I removed <code>precompileModules = true</code> from my lakefile. Though ideally it would still be able to have it enabled</p>",
        "id": 291514623,
        "sender_full_name": "z battleman",
        "timestamp": 1659304570
    },
    {
        "content": "<p>Is your library properly linked against cblas (<code>lld build/lib/libleanffi.so</code> should list it)?</p>",
        "id": 291542337,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659340730
    },
    {
        "content": "<p>There are a couple of functions which are not properly linked</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">entry</span> <span class=\"n\">symbol</span> <span class=\"n\">_start</span><span class=\"bp\">;</span> <span class=\"n\">not</span> <span class=\"n\">setting</span> <span class=\"n\">start</span> <span class=\"n\">address</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_big_usize_to_nat'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">l_Fin_ofNat'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">cblas_dgemv'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_register_external_class'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_mk_string'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_apply_1'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">cblas_dgemm'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_inc_ref_cold'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_mk_io_user_error'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_notify_assert'</span>\n<span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_alloc_small'</span>\n</code></pre></div>\n<p>Admittedly though, I'm not sure how to fix it as I think I am correctly linking as shown here in my lakefile</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">LeanAlg</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- customize layout</span>\n  <span class=\"c1\">--srcDir := \"LeanAlg\"</span>\n  <span class=\"c1\">--libRoots := #[`mathVec, `mathMatrix]</span>\n  <span class=\"c1\">-- specify the lib as an additional target</span>\n  <span class=\"c1\">--moreLibTargets := #[cLibTarget __dir__]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-L\"</span><span class=\"o\">,</span> <span class=\"s2\">\"./third_party/OpenBLASLib/lib\"</span><span class=\"o\">,</span>\n                    <span class=\"s2\">\"-lopenblas\"</span><span class=\"o\">,</span>\n                    <span class=\"s2\">\"-Wl,-R./third_party/OpenBLASLib/lib\"</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">--precompileModules := true</span>\n  <span class=\"n\">packagesDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"third_party\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pkgDir</span> <span class=\"o\">:=</span> <span class=\"n\">__dir__</span>\n<span class=\"kd\">def</span> <span class=\"n\">cSrcDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkgDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">cBuildDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkgDir</span> <span class=\"bp\">/</span> <span class=\"n\">_package.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">libBuildDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkgDir</span> <span class=\"bp\">/</span> <span class=\"n\">_package.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lib\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oTarget</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FileTarget</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">cBuildDir</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{filename}.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcTarget</span> <span class=\"o\">:=</span> <span class=\"n\">inputFileTarget</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">cSrcDir</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{filename}.c\"</span>\n  <span class=\"n\">fileTargetWithDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcTarget</span> <span class=\"k\">fun</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">compileO</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"s2\">\"third_party/OpenBLASLib/include\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">,</span>\n                             <span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">cLib</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">libFile</span> <span class=\"o\">:=</span> <span class=\"n\">libBuildDir</span> <span class=\"bp\">/</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"n\">staticLibTarget</span> <span class=\"n\">libFile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">oTarget</span> <span class=\"s2\">\"./utils/utils\"</span><span class=\"o\">,</span> <span class=\"n\">oTarget</span> <span class=\"s2\">\"mathVec_ffi\"</span><span class=\"o\">,</span> <span class=\"n\">oTarget</span> <span class=\"s2\">\"mathMatrix_ffi\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291585951,
        "sender_full_name": "z battleman",
        "timestamp": 1659365436
    },
    {
        "content": "<p>I think this is a bug in Lake due to the fact that I don't pass additional linking arguments to the  linker when compiling a shared library from a static library here: <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Targets.lean#L84-L92\">https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Targets.lean#L84-L92</a></p>",
        "id": 291652706,
        "sender_full_name": "Mac",
        "timestamp": 1659402055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20linking/near/291652706\">said</a>:</p>\n<blockquote>\n<p>I think this is a bug in Lake due to the fact that I don't pass additional linking arguments to the  linker when compiling a shared library from a static library here: <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Targets.lean#L84-L92\">https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Targets.lean#L84-L92</a></p>\n</blockquote>\n<p>What I think is really interesting is that it seems to only occur with some functions? For example if I just use the multiplication function (which also uses <code>cblas_dgemm</code> it compiles without complaining. Do you have a guess as to why that could be?</p>",
        "id": 291658867,
        "sender_full_name": "zbatt",
        "timestamp": 1659409123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"483794\">@zbatt</span>  I think I would need to look at the source of <code>libleanffi</code> to make any guesses as to why that would be the case.</p>",
        "id": 291659015,
        "sender_full_name": "Mac",
        "timestamp": 1659409288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20linking/near/291659015\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"483794\">zbatt</span>  I think I would need to look at the source of <code>libleanffi</code> to make any guesses as to why that would be the case.</p>\n</blockquote>\n<p>If it's helpful for debugging Lake, I would be more than happy to share the repository, but obviously you don't have to look at it for my bugs haha</p>",
        "id": 291659108,
        "sender_full_name": "zbatt",
        "timestamp": 1659409364
    },
    {
        "content": "<p>(I'm also just interested in taking a gander <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>)</p>",
        "id": 291659889,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1659410253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483794\">zbatt</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20linking/near/291659108\">said</a>:</p>\n<blockquote>\n<p>If it's helpful for debugging Lake</p>\n</blockquote>\n<p>I think it could be.</p>",
        "id": 291661743,
        "sender_full_name": "Mac",
        "timestamp": 1659412100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20linking/near/291661743\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"483794\">zbatt</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20linking/near/291659108\">said</a>:</p>\n<blockquote>\n<p>If it's helpful for debugging Lake</p>\n</blockquote>\n<p>I think it could be.</p>\n</blockquote>\n<p><a href=\"https://github.com/zaxioms/LeanAlg\">https://github.com/zaxioms/LeanAlg</a><br>\nHere you go :D</p>",
        "id": 291715988,
        "sender_full_name": "zbatt",
        "timestamp": 1659450093
    }
]