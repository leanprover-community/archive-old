[
    {
        "content": "<p>Hi! So it's my understanding that in Lean 3 tactics, we can use <code>change'</code> to change all instances of some expression to something definitionally equal.<br>\nI want to do something similar in a Lean 4 tactic. I have an expression <code>x : Expr</code> and a definitionally equivalent <code>y : Expr</code>. So in my context I have something like <code>x + x = x</code> and a goal of <code>x = 0</code>, but I want <code>y + y = y</code> and a goal of <code>y = 0</code>. I'm confused on how Lean 4 <code>change</code> works, and if that's what I have to use to accomplish this.</p>",
        "id": 274933186,
        "sender_full_name": "Ian Benway",
        "timestamp": 1646976261
    },
    {
        "content": "<p>I'm not really sure how <code>change'</code> works, but if you can get a hypothesis <code>x = y</code> (perhaps by <code>have : x = y := refl</code> then you can <code>rw [this] at *</code> to the same effect, I think</p>",
        "id": 274933551,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646976780
    },
    {
        "content": "<p>I like this solution. But in my case, I think I'd like to do so without adding a new hypothesis. Is there any way around that?</p>",
        "id": 274999127,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647016851
    },
    {
        "content": "<p><code>rw [(rfl : x = y)]</code>? :)</p>",
        "id": 275003916,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647018927
    },
    {
        "content": "<p>Not a real answer to the question regarding <code>change</code>, but it should work if <code>x</code> and <code>y</code> are defeq, without adding an additional hypothesis</p>",
        "id": 275004115,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647019006
    },
    {
        "content": "<p>I think you need to do <code>rw [(id rfl : x = y)]</code>, because <code>rfl</code> always has the type <code>x = x</code>.</p>",
        "id": 275006653,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647020066
    },
    {
        "content": "<p>This is a fairly common pattern actually, although I prefer to use <code>show</code> like <code>simp [fun n =&gt; show n.succ = n + 1 from rfl]</code>.</p>",
        "id": 275006862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647020169
    }
]