[
    {
        "content": "<p>On further poking it looks like the second issue is because it tries to generalize <code>h</code>, but then the motive for the nested induction is left as a meta-variable and thus doesn't have the <code>(h : _) -&gt;</code> binder it expects to have</p>",
        "id": 274815467,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646907755
    },
    {
        "content": "<p>which, actually, is still the case if <code>h</code> is moved into the return type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rotate_inv</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">LazyList</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"bp\">=</span> <span class=\"n\">F.toList</span> <span class=\"bp\">++</span> <span class=\"n\">R.reverse</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">F</span>\n  <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">fn</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">()</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>intro</code> raises the same error.</p>",
        "id": 274815675,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646907869
    },
    {
        "content": "<p>(Cleaned up the MWE above quite a bit; this seems to be as simple as I can get it)</p>",
        "id": 274943706,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646987008
    },
    {
        "content": "<p>Thanks for the MWE. I am working on it.</p>",
        "id": 275032581,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647032100
    }
]