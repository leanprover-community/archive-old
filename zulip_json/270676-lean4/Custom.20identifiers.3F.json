[
    {
        "content": "<p>When trying to define Haskell-like operator identifiers I encountered the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"(~)\"</span> <span class=\"o\">:</span> <span class=\"n\">ident</span>\n<span class=\"c1\">-- unknown category 'ident'</span>\n</code></pre></div>\n<p>Is there some reason why <code>ident</code> is not a proper syntax category? I would like to able to do something akin the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"(~)\"</span> <span class=\"o\">:</span> <span class=\"n\">ident</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">~</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">~</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 234409388,
        "sender_full_name": "Mac",
        "timestamp": 1618351433
    },
    {
        "content": "<p>An intriguing idea. What I don't quite like about it is that you need an unhygienic macro for it, and you need to do it for each operator separately. I'd rather like to have a general mechanism a la</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"kd\">infix</span> <span class=\"s2\">\"~\"</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234451179,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618383962
    },
    {
        "content": "<p>Oh no we're turning into agda</p>",
        "id": 234457826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618387382
    },
    {
        "content": "<p>Actually it's not clear to me whether Agda allows local mixfix notations (<span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> ?)</p>\n<blockquote>\n<p>A type name, function name, or constructor name can comprise one or more name parts if we separate them with underscore characters _, and the resulting name can be used as an operator.</p>\n</blockquote>",
        "id": 234463789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618390401
    },
    {
        "content": "<p>What do you mean by \"local\"?</p>",
        "id": 234463997,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618390499
    },
    {
        "content": "<p>For a let- or lambda-bound function as above</p>",
        "id": 234464062,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618390521
    },
    {
        "content": "<p>Yeah, no problem.</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"kr\">data</span> ⊤ <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n  <span class=\"nf\">tt</span> <span class=\"ow\">:</span> ⊤\n\n<span class=\"nf\">stuff</span> <span class=\"ow\">:</span> ⊤\nstuff <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span> _//_ <span class=\"ow\">:</span> ⊤ <span class=\"ow\">→</span> ⊤ <span class=\"ow\">→</span> ⊤\n      x // y <span class=\"ow\">=</span> tt\n  <span class=\"kr\">in</span> <span class=\"o\">(</span>tt ~ tt + tt<span class=\"o\">)</span> // tt\n  <span class=\"kr\">where</span>\n    <span class=\"nf\">_~_+_</span> <span class=\"ow\">:</span> ⊤ <span class=\"ow\">→</span> ⊤ <span class=\"ow\">→</span> ⊤ <span class=\"ow\">→</span> ⊤\n    x ~ y + z <span class=\"ow\">=</span> tt\n</code></pre></div>\n<p>Works with lambda binders as well.</p>",
        "id": 234464491,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618390707
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"nf\">foo</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>X <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)(</span>x <span class=\"ow\">:</span> X<span class=\"o\">)</span> <span class=\"ow\">→</span> <span class=\"kt\">Set</span>\nfoo X x <span class=\"ow\">=</span> <span class=\"kr\">let</span> _~_ <span class=\"ow\">=</span> <span class=\"ow\">λ</span> <span class=\"o\">(</span>x y <span class=\"ow\">:</span> X<span class=\"o\">)</span> <span class=\"ow\">→</span> X <span class=\"kr\">in</span>\n        x ~ x\n</code></pre></div>",
        "id": 234464511,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618390723
    },
    {
        "content": "<p>Nice. I would have been surprised if it didn't work, but the docs quoted above seemed relatively specific.</p>",
        "id": 234464599,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618390772
    },
    {
        "content": "<p>Agda has the same rules for every sort of identifier, be it constructor, definition, ...</p>",
        "id": 234464612,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618390782
    },
    {
        "content": "<p>I guess it's still a \"function name\"</p>",
        "id": 234464642,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618390800
    },
    {
        "content": "<p>I mean, the Lean community seems pretty dismissive about mixfix as theorem names, which I get, but mixfix variable seem to have some good use cases too</p>",
        "id": 234465091,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618390978
    },
    {
        "content": "<p>I just don't think that notations should be the actual canonical names of things</p>",
        "id": 234465185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618391010
    },
    {
        "content": "<p>I think local notations (like literally local to an expression) are a fine way to address this use case</p>",
        "id": 234465239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618391042
    },
    {
        "content": "<p>But isn't the reasoning behind that the same as the reasoning why a \"thing\" shouldn't be just named with a single letter and we do that all the time locally?</p>",
        "id": 234465405,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618391115
    },
    {
        "content": "<p>For that, I think a macro expansion to name the identifier something inaccessible and let you supply the mixfix notation would be ideal</p>",
        "id": 234465577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618391183
    },
    {
        "content": "<p>but the grammar of identifiers shouldn't need to change to support this</p>",
        "id": 234465701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618391240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234451179\">said</a>:</p>\n<blockquote>\n<p>An intriguing idea. What I don't quite like about it is that you need an unhygienic macro for it, and you need to do it for each operator separately. I'd rather like to have a general mechanism a la</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"kd\">infix</span> <span class=\"s2\">\"~\"</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><strong>I fully support this idea!</strong> However, this does could restrict the kinds of notation you can locally bind. For example, this would likely not allow for local binding of lambda-like macros (akin to forall/exists/sigma, etc.).</p>",
        "id": 234593940,
        "sender_full_name": "Mac",
        "timestamp": 1618443823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234465185\">said</a>:</p>\n<blockquote>\n<p>I just don't think that notations should be the actual canonical names of things</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234465577\">said</a>:</p>\n<blockquote>\n<p>For that, I think a macro expansion to name the identifier something inaccessible and let you supply the mixfix notation would be ideal</p>\n</blockquote>\n<p>You can already do both of these. For the unlikely to access  approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`«~»</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«~»</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">~</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>For the standard naming approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">lt</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>I don't like the former because it requires too much usage of French double quotes, and I don't like the latter because the connection between the notation and the identifier is not immediately clear (its unhygienic). I even dislike my original suggestion somewhat because of the unhygienic macro usage that destroys pretty printing.</p>",
        "id": 234595020,
        "sender_full_name": "Mac",
        "timestamp": 1618444420
    },
    {
        "content": "<p>The second example isn't quite what I meant. I mean a hygienic macro that both declares a new binder like <code>(lt : $type)</code> and also the notation for it, <code>infix $notation =&gt; lt</code>. That way the name <code>lt</code> becomes bound in the macro so you can't refer to it, and the surface syntax becomes somewhat similar to agda where you just use the notation directly in the binder</p>",
        "id": 234602090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618449882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234593940\">said</a>:</p>\n<blockquote>\n<p><strong>I fully support this idea!</strong> However, this does could restrict the kinds of notation you can locally bind. For example, this would likely not allow for local binding of lambda-like macros (akin to forall/exists/sigma, etc.).</p>\n</blockquote>\n<p>Yes, it will need cooperation from each macro's parser at least. But if we can do it for built-in syntax, it will also be possible for any user-defined one.</p>",
        "id": 234629049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618471248
    }
]