[
    {
        "content": "<p>Why does the apply tactic not force its term into a function (using <code>CoeFun</code>)? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ExFalso</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExFalso</span>\n<span class=\"kd\">def</span> <span class=\"n\">funType</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ExFalso</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">ExFalso</span> <span class=\"n\">funType</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">K.toFun</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">ExFalso</span>\n\n<span class=\"c1\">-- Works as expected</span>\n<span class=\"kd\">def</span> <span class=\"n\">trueExFalso</span> <span class=\"o\">[</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ExFalso</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trueExFalso'</span> <span class=\"o\">[</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ExFalso</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">True</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Fails unexpectedly</span>\n  <span class=\"n\">apply</span> <span class=\"n\">K</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  tactic 'apply' failed, failed to unify</span>\n<span class=\"cm\">    ExFalso</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    False → True</span>\n<span class=\"cm\">  K : ExFalso</span>\n<span class=\"cm\">  ⊢ False → True</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 236425440,
        "sender_full_name": "Mac",
        "timestamp": 1619565587
    },
    {
        "content": "<p><code>apply</code> already has a pretty hard job matching the goal to the input up to some extra <code>_</code>'s and definitional equality. Adding coercions to the mix would make it very underdetermined</p>",
        "id": 236426757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619566352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/No.20function.20coercion.20on.20apply.3F/near/236426757\">said</a>:</p>\n<blockquote>\n<p><code>apply</code> already has a pretty hard job matching the goal to the input up to some extra <code>_</code>'s and definitional equality. Adding coercions to the mix would make it very underdetermined</p>\n</blockquote>\n<p>This doesn't seem like it would be that complicated, as it simply has to apply <code>CoeFun.coe</code> to its argument. Furthermore, without this coercion, apply is essentially the same as <code>refine</code> for non-functions, which makes no sense to me. I can not think of a time when I would expect apply <em>not</em> to treat its argument like a function.</p>",
        "id": 236521879,
        "sender_full_name": "Mac",
        "timestamp": 1619622047
    }
]