[
    {
        "content": "<p>I am trying to get the instance trace of simp calls in Lean4. In the following example, in <code>mythm</code> I get the trace of the first simp call (in <code>A</code>), but not of the second one (in <code>B</code>). Is there a way to access this trace in the current state of the Lean4 vscode extension, or should I just wait?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MyClass2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyClass.foo1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyClass.foo2</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MyClass3</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MyClass2</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mysimp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyClass3</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyClass.foo1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyClass.foo2</span> <span class=\"o\">:=</span>\n<span class=\"n\">MyClass2.foo_eq</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mythm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyClass3</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyClass.foo1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyClass.foo2</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyClass.foo1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyClass.foo2</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 224442254,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611909105
    },
    {
        "content": "<p>It must be a caching mechanism: if I modify the example so that the second simp has to make a genuine new search, then I get the instance trace. So everything is fine!</p>",
        "id": 224443125,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611909754
    }
]