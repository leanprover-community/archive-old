[
    {
        "content": "<p>Is there a version of <code>have</code> that permits uninferred metavariables?</p>",
        "id": 229935861,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615500404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/have.20with.20metavariables.3F/near/229935861\">said</a>:</p>\n<blockquote>\n<p>Is there a version of <code>have</code> that permits uninferred metavariables?</p>\n</blockquote>\n<p>Could you please post an example?</p>",
        "id": 230094082,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615581530
    },
    {
        "content": "<p>I think this should go through:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h'</span>\n  <span class=\"n\">done</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Goals (1)</span>\n<span class=\"cm\">h : Nat</span>\n<span class=\"cm\">h' : ?m.721 + 1 = ?m.721 + 1</span>\n<span class=\"cm\">⊢ 1 + 1 = 1 + 1</span>\n\n<span class=\"cm\">Messages (4)</span>\n<span class=\"cm\">3:14:</span>\n<span class=\"cm\">don't know how to synthesize implicit argument</span>\n<span class=\"cm\">  @rfl Nat (?m.721 + 1)</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">h : Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">3:28:</span>\n<span class=\"cm\">don't know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">h : Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">3:20:</span>\n<span class=\"cm\">don't know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">h : Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">3:2:</span>\n<span class=\"cm\">failed to infer 'let' declaration type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 230094566,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615581786
    },
    {
        "content": "<p>We are trying to promote structured tactic scripts in Lean 4. So, <code>have</code>/<code>let</code>/<code>sufficies</code> will reject problems with unresolved holes.<br>\nNote that they do accept \"synthetic\" named holes (e.g., <code>?h1</code>). This kind of hole is useful for missing proofs only since they cannot be \"filled\" by unification. We fill them using tactics such as <code>case &lt;hole-name&gt; =&gt; &lt;tactic&gt;</code>.<br>\nThat being said, I acknowledge that the feature you are asking for is useful in some circumstances.<br>\nWe already had <code>refine!</code> (renamed to <code>refine'</code> today), and I added <code>have'</code> and <code>let'</code>. They transform all unresolved holes into new goals.<br>\nThese are just macros defined here <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L270-L288\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L270-L288</a><br>\nSo, we can now write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span><span class=\"bp\">'</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h'</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>BTW, <code>have'</code> is not being highlighted. We stopped manually marking the builtin keywords since we will soon have<br>\n<a href=\"https://github.com/leanprover/lean4/pull/344\">https://github.com/leanprover/lean4/pull/344</a><br>\nYour example also exposed other problems that have been fixed today :)</p>",
        "id": 230128299,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615602735
    },
    {
        "content": "<p>What's the difference between <code>refine</code> without <code>'</code> and <code>exact</code> then?</p>",
        "id": 230129396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615603964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/have.20with.20metavariables.3F/near/230129396\">said</a>:</p>\n<blockquote>\n<p>What's the difference between <code>refine</code> without <code>'</code> and <code>exact</code> then?</p>\n</blockquote>\n<p>You can use synthetic holes with <code>refine</code> and create many subgoals. <code>exact</code> must not produce any subgoal.</p>",
        "id": 230129861,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615604458
    },
    {
        "content": "<p>Is there syntax for a hole with no name? Does <code>?</code> work?</p>",
        "id": 230129893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615604487
    },
    {
        "content": "<p>Here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simple6</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">_</span> <span class=\"n\">h3</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Eq.trans</span> <span class=\"bp\">?</span><span class=\"n\">pre</span> <span class=\"n\">h1</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">pre</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 230129960,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615604546
    },
    {
        "content": "<p>The lean 3 version would do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">_</span> <span class=\"n\">h3</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Eq.trans</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It would be nice to have something like this where there are structured subgoals but they are simply ordered instead of named</p>",
        "id": 230130022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615604634
    },
    {
        "content": "<p>You can still do this.</p>",
        "id": 230130076,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615604659
    },
    {
        "content": "<p>great</p>",
        "id": 230130106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615604704
    },
    {
        "content": "<p>(I think that most of the time <code>refine</code> is used there aren't very interesting names to give these holes)</p>",
        "id": 230130138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615604733
    },
    {
        "content": "<p>The syntax is <code>?_</code> instead of <code>?</code> though</p>",
        "id": 230130205,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615604778
    }
]