[
    {
        "content": "<p>How do I put a type ascription in a syntax quotation? The term defaulting is causing problems for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"bla\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bla</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"c1\">-- expected 'in'</span>\n</code></pre></div>\n<p>I tried <code> `(command| open foo)</code> but it doesn't work (nor various attempts at a qualified name for the parser category).</p>",
        "id": 244984313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625531673
    },
    {
        "content": "<p>Does the missing space after <code>\"variable\"</code> mean anything?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinCommandParser]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kn\">namespace</span><span class=\"bp\">»</span>    <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"namespace \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ident</span>\n<span class=\"kd\">@[builtinCommandParser]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">end</span><span class=\"bp\">»</span>          <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"end \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"n\">ident</span>\n<span class=\"kd\">@[builtinCommandParser]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">variable</span><span class=\"bp\">»</span>     <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"variable\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many1</span> <span class=\"n\">Term.bracketedBinder</span>\n<span class=\"kd\">@[builtinCommandParser]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">universe</span><span class=\"bp\">»</span>     <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"universe \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many1</span> <span class=\"n\">ident</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 244984693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625532246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Quoting.20commands/near/244984693\">said</a>:</p>\n<blockquote>\n<p>Does the missing space after <code>\"variable\"</code> mean anything?</p>\n</blockquote>\n<p>It just won't be pretty-printed as \"variable \" but instead \"variable\" (i.e. <code>variable {a}</code> would be pretty printed <code>variable{a}</code>).</p>",
        "id": 244985941,
        "sender_full_name": "Mac",
        "timestamp": 1625534249
    },
    {
        "content": "<p>To your main question, you could always go for broke and define a command quotation yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cmdQuot</span><span class=\"o\">)</span> <span class=\"s2\">\"`(command|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Quotation</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[termElab cmdQuot]</span> <span class=\"kd\">def</span> <span class=\"n\">elabCmdQuot</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span>\n  <span class=\"n\">adaptExpander</span> <span class=\"n\">stxQuot.expand</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"bla\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bla</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n\n<span class=\"n\">bla</span> <span class=\"n\">Lean</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 244985994,
        "sender_full_name": "Mac",
        "timestamp": 1625534302
    },
    {
        "content": "<p>I believe when we implemented the quotations we did not have overlapping term/command syntax yet. We should probably use the longest parse of the two of them. And generalizing the quotation kind syntax to arbitrary categories/parsers is TBD (it actually already works with <code>syntax_cat</code>).</p>",
        "id": 245003451,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625556110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Quoting.20commands/near/245003451\">said</a>:</p>\n<blockquote>\n<p>And generalizing the quotation kind syntax to arbitrary categories/parsers is TBD (it actually already works with <code>syntax_cat</code>).</p>\n</blockquote>\n<p>Would you happen to know if the custom command quotation hack I presented is perfectly serviceable substitute in end-user code until core gets around to that or are there some thorns / concerns one should keep in mind?</p>",
        "id": 245003966,
        "sender_full_name": "Mac",
        "timestamp": 1625556518
    },
    {
        "content": "<p>Looks fine, it's identical to the built-in ones, right?</p>",
        "id": 245005123,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625557403
    },
    {
        "content": "<p>I think so.</p>",
        "id": 245053291,
        "sender_full_name": "Mac",
        "timestamp": 1625584533
    },
    {
        "content": "<p>I'm going to need almost all other syntax categories as well soon, so that TBD interests me. Will it work if I just copy Mac's code for random parsers? The word <code>command</code> in <code>incQuotDepth(command)</code> is coming from a fairly small list of options, I think (category parsers?)</p>",
        "id": 245084340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625598225
    },
    {
        "content": "<p>Yes, it should work for any parser, category or not. In fact the Lean package uses a common macro to declare the elaborators: <a href=\"https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/Lean/Elab/Quotation.lean#L183-L195\">https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/Lean/Elab/Quotation.lean#L183-L195</a></p>",
        "id": 245085362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625598680
    },
    {
        "content": "<p>Oh great, can I use that too? Does that overload <code> `(...)</code> or does it define<code> `(bla| ...)</code>?</p>",
        "id": 245085558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625598779
    },
    {
        "content": "<p>That depends purely on your syntax definition going with it :) .</p>",
        "id": 245085641,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625598831
    },
    {
        "content": "<p>Are all those elaborators attaching to the same syntax?</p>",
        "id": 245085802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625598903
    },
    {
        "content": "<p>In fact that last one should already implement <code> `(p|...)` </code> for any <code>p : (Trailing)Parser</code> <em>in scope</em> after all. It's just that the parser for <code>command</code> is called <code>commandParser</code>, and it takes an extra parameter, so it didn't work out of the box for this one.</p>",
        "id": 245085855,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625598932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Quoting.20commands/near/245085362\">said</a>:</p>\n<blockquote>\n<p>In fact the Lean package uses a common macro to declare the elaborators: <a href=\"https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/Lean/Elab/Quotation.lean#L183-L195\">https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/Lean/Elab/Quotation.lean#L183-L195</a></p>\n</blockquote>\n<p>Note that while I stole the code for my example from this macro, I did not use it directly because it defines <em>builtin</em> parsers rather than normal parsers -- the later being the kind of parser you generally want for user code (as it works in the same file).</p>",
        "id": 245094152,
        "sender_full_name": "Mac",
        "timestamp": 1625603226
    },
    {
        "content": "<p>Why doesn't this work? (Using <code> `(command| </code> doesn't seem to make a difference.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">bis</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n          <span class=\"c1\">-- ^ expected '(', '*', '[', '{' or identifier</span>\n</code></pre></div>",
        "id": 245098531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625605393
    },
    {
        "content": "<p>I tried sticking <code>:bracketedBinder</code> in various places but I couldn't find one that was syntactically correct</p>",
        "id": 245098672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625605473
    },
    {
        "content": "<p>This looks like a similar issue (using Mac's <code>command|</code> quotation):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"bp\">$</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">names</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n                    <span class=\"c1\">-- ^ expected ')'</span>\n</code></pre></div>",
        "id": 245100253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625606384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Quoting.20commands/near/245098531\">said</a>:</p>\n<blockquote>\n<p>Why doesn't this work? (Using <code> `(command| </code> doesn't seem to make a difference.)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">bis</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n          <span class=\"c1\">-- ^ expected '(', '*', '[', '{' or identifier</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This doesn't work because there is no <code>$[...]+</code> (with a plus), there is only a <code>$[...]*</code> (with an asterisk).</p>",
        "id": 245101296,
        "sender_full_name": "Mac",
        "timestamp": 1625607003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Quoting.20commands/near/245100253\">said</a>:</p>\n<blockquote>\n<p>This looks like a similar issue (using Mac's <code>command|</code> quotation):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"bp\">$</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">names</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n                    <span class=\"c1\">-- ^ expected ')'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This one doesn't work because <code>$foo</code> needs to be <code>$foo:ident</code>.</p>",
        "id": 245101386,
        "sender_full_name": "Mac",
        "timestamp": 1625607051
    }
]