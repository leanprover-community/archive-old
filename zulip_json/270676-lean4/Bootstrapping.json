[
    {
        "content": "<p>I'm looking through the Lean source code for <code>Expr</code> and I'm confused by how Lean in defining itself. Before <code>Expr</code> is defined, are Lean binaries elaborating Lean code into some kind of <code>Expr</code>s? If that question even makes any sense. I guess in general, how is Lean bootstrapping itself?</p>",
        "id": 284780416,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654192226
    },
    {
        "content": "<p>It's no different from other bootstrapping compilers. The <code>Expr</code> that is compiled into the binary is completely independent from the <code>Expr</code> that is eventually elaborated in the stdlib and finally compiled into the next stage's binary.</p>",
        "id": 284797860,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654200571
    },
    {
        "content": "<p>Oh wait, I see. I was confusing myself thinking the binaries and <code>Expr</code> were working together in some way</p>",
        "id": 284798863,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654201068
    },
    {
        "content": "<p>That would be true for elaborators etc. run in the interpreter, but all elaborators in the stdlib are built-in, i.e. not executed before being compiled into the next stage's binary</p>",
        "id": 284845798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654241990
    },
    {
        "content": "<p>We do run some other programs such as parsers in the interpreter though, which is when you get to the fun bootstrapping issues described in <a href=\"https://leanprover.github.io/lean4/doc/dev/bootstrap.html#further-bootstrapping-complications\">https://leanprover.github.io/lean4/doc/dev/bootstrap.html#further-bootstrapping-complications</a></p>",
        "id": 284845927,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654242085
    }
]