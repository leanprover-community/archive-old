[
    {
        "content": "<p>I've got this piece of code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Test</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n  <span class=\"kn\">namespace</span> <span class=\"n\">Maybe</span>\n    <span class=\"kd\">def</span> <span class=\"n\">apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Maybe</span> <span class=\"n\">β</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n    <span class=\"kd\">theorem</span> <span class=\"n\">none_apply</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">apply</span> <span class=\"n\">none</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">none</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"kd\">theorem</span> <span class=\"n\">apply_none</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"kd\">end</span> <span class=\"n\">Maybe</span>\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>I would expect both theorems to be solved with just rfl but only the first one does, the second fail to be solved by rfl and requires induction/cases to solve. And I'm wondering whether this is a bug? After all there is only one pattern in the function that would allow the result to be <code>some</code> and in <code>none_apply</code> rfl correctly detects this but in <code>apply_none</code> it fails to.</p>",
        "id": 255724184,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1633085244
    },
    {
        "content": "<p>The patterns you write don't always correspond to the definition Lean compiles them down to. Here it's going to do a case split on the first argument to start, and hence in <code>apply_none</code> <code>rfl</code> can't see what is happening.</p>",
        "id": 255726168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633086334
    },
    {
        "content": "<p>if you <code>#print apply.match_1</code> you'll get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Test.Maybe.apply.match_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Maybe.casesOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"n\">none</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Maybe.casesOn</span> <span class=\"n\">x_1</span> <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_1</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span>\n</code></pre></div>",
        "id": 255726327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633086407
    },
    {
        "content": "<p>(To guess to look at <code>apply.match_1</code>, if you have a copy of Mathlib4 you can <code>import Mathlib.Tactic.PrintPrefix</code> and then use  <code>#print prefix apply</code> to see that automatically generated auxiliary definitions.)</p>",
        "id": 255726554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633086523
    },
    {
        "content": "<p>I'm pretty sure you can't make them both definitional equalities, regardless of how you defined <code>apply</code> (other than <code>apply f x = none</code> of course)</p>",
        "id": 255730585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633088857
    }
]