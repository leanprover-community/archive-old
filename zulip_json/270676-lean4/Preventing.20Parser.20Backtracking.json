[
    {
        "content": "<p>Is there a way to stop the Lean parser from backtracking after certain in a parse. That is, is there some way to tell the Pratt parser to treat syntax errors after a certain point as just that (syntax errors) rather than trying to parser it with a different (lower priority).</p>\n<p>Alternatively, is there a way to tell Lean  to use the syntax/errors from the higher priority parser (i.e., the first one tried), rather than the syntax/errors of the lower priority parser (i.e., the last one tried).</p>",
        "id": 253012620,
        "sender_full_name": "Mac",
        "timestamp": 1631481545
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">symbol</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"s2\">\" baz\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"s2\">\"hi\"</span> <span class=\"n\">bap</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Errors on `bar` with `unknown identifier 'bar'`</span>\n<span class=\"cm\">  Instead of on `baz` with `expected 'baz'`</span>\n<span class=\"cm\">  Also breaks semantic syntax highlighting</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 253013136,
        "sender_full_name": "Mac",
        "timestamp": 1631482105
    },
    {
        "content": "<p>Is <code>&lt;|&gt;</code> an option in your case?</p>",
        "id": 253014637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631483773
    },
    {
        "content": "<p>Sadly, no, the category is very categorical. To be specific, the case in questions is for the <a href=\"https://github.com/tydeu/lean4-papyrus/blob/72141229d73e6fe1abb911ddcabab7818699ec49/Papyrus/Script/Do.lean\">augmented do notation</a> of Papyrus.</p>",
        "id": 253015333,
        "sender_full_name": "Mac",
        "timestamp": 1631484565
    },
    {
        "content": "<p>The regular <code>doElem</code> syntax preempts that of the augmented keywords (when syntax errors occur) which makes me think there is a bug when it is just a typo on my part (which I imagine would also flummox end-users). It also makes such typos hard to debug (as the errors are nonsensical).</p>",
        "id": 253015429,
        "sender_full_name": "Mac",
        "timestamp": 1631484656
    },
    {
        "content": "<p>In addition to the uniformative errors, the low priority parser also kicks in when its parse is longer than that of the higher priority parser. This cases a short instruction (e.g., <code>ret i32 0</code>) to get merged with a subsequent assignment (e.g., <code>%foo = load i1, bar</code>) because it ends up parsing them as two terms joined by the <code>%</code> operator.</p>",
        "id": 253015720,
        "sender_full_name": "Mac",
        "timestamp": 1631484970
    },
    {
        "content": "<p>I can likely get around this by just require pure Lean statements to be prefixed with some token (e.g., <code>#</code>), but I was curious if there was a way to avoid such a requirement.</p>",
        "id": 253015760,
        "sender_full_name": "Mac",
        "timestamp": 1631485045
    },
    {
        "content": "<p>One approach that is used in the lean grammar is the selective use of <code>notFollowedBy</code> in the fallback parser to make it inapplicable when you use a keyword. So for example your <code>term =&gt; doElem'</code> parser would instead be <code>syntax notFollowedBy(\"ret\") term : doElem'</code>, where you extend the list to include all keywords you want to avoid. It's not perfect since you are still using an exhaustive list, but perhaps you can at least list your keywords.</p>",
        "id": 253018626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631488255
    },
    {
        "content": "<p>I don't think there is. But you are essentially writing a quasiquotation syntax, so I would definitely expect special tokens for introducing antiquotations there.</p>",
        "id": 253107567,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631546409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Fair enough. I was actually wondering there was a way I could use the antiquotation syntax itself (i.e., <code>$(x)</code>), but I don't think there is a way to use that without also making things like <code>$(x):ident</code> valid, which makes no sense in this context.</p>",
        "id": 253143962,
        "sender_full_name": "Mac",
        "timestamp": 1631560556
    }
]