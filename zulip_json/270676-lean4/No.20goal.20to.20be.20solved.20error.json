[
    {
        "content": "<p>I have a problem, and a minimal working (kinda) example.<br>\nI have an intricate function where lean is unable to prove termination, so i provide <code>termination_by</code><br>\nThen i have some things to prove, so i write theorems and tag them <code>@[simp]</code><br>\nAnd then i get <code>No goal to be solved</code> where i previously got <code>tactic 'assumption' failed</code></p>\n<p>In this MWE lean is able to prove termination, but if i use the <code>termination_by</code> modifier the same problem appear, so i hope it will be enough</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"c1\">-- comment this for seeing the `tactic 'assumption' failed` error</span>\n<span class=\"kd\">def</span> <span class=\"n\">tmp</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">c'</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toLst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span>     <span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">nil</span><span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">c'</span> <span class=\"n\">cs'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"c1\">-- lean can work without this but it's not the point</span>\n</code></pre></div>",
        "id": 269188555,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643067631
    },
    {
        "content": "<p>Lean is able to figure out termination on my machine here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toLst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span>     <span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">nil</span><span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">c'</span> <span class=\"n\">cs'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Version: <code>leanprover/lean4:nightly-2022-01-15</code></p>",
        "id": 269189160,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643068122
    },
    {
        "content": "<p>(maybe I wasn't able to understand the issue you're facing)</p>",
        "id": 269189316,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643068272
    },
    {
        "content": "<p>It's a simplification of a function where lean can't figure out termination and where i'm forced to add the <code>termination_by</code><br>\nand then i get <code>No goal to be solved</code></p>",
        "id": 269189531,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643068398
    },
    {
        "content": "<p>like in this example if you don't remove the last line</p>",
        "id": 269189565,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643068431
    },
    {
        "content": "<p>(i will search a simple function where lean can't figure out the termination tomorrow, but now i need to sleep)</p>",
        "id": 269189654,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643068498
    },
    {
        "content": "<p>If you leave the last line in, I assume it's just complaining because you don't need to manually show that <code>toLst</code> is decreasing. If you're saying <code>toLst</code> is different than the function you're actually working with, you may have to post the whole thing to get useful feedback.</p>",
        "id": 269189703,
        "sender_full_name": "Chris B",
        "timestamp": 1643068546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364007\">@Alice Laroche</span> Here you go, an example where you can neither include nor not include the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"c1\">-- comment this for seeing the `tactic 'assumption' failed` error</span>\n<span class=\"kd\">def</span> <span class=\"n\">tmp</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">c'</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toLst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span>     <span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">),</span> <span class=\"n\">nil</span><span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">),</span> <span class=\"n\">cons</span> <span class=\"n\">c'</span> <span class=\"n\">cs'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"c1\">-- lean can work without this but it's not the point</span>\n</code></pre></div>",
        "id": 269189776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643068580
    },
    {
        "content": "<p>(I'm having the same kind of problem: <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20cannot.20be.20used/near/269063033\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/structural.20recursion.20cannot.20be.20used/near/269063033</a>)</p>",
        "id": 269189811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643068611
    },
    {
        "content": "<p>That seems like a less than perfect error message for needing a <code>decreasing_by</code> clause. This works for me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"c1\">-- comment this for seeing the `tactic 'assumption' failed` error</span>\n<span class=\"kd\">def</span> <span class=\"n\">tmp</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">c'</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toLst</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span>     <span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">),</span> <span class=\"n\">nil</span><span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">),</span> <span class=\"n\">cons</span> <span class=\"n\">c'</span> <span class=\"n\">cs'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">toLst</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"c1\">-- lean can work without this but it's not the point</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 269190258,
        "sender_full_name": "Chris B",
        "timestamp": 1643068911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nOh, so this was the product type which messed up<br>\nI have a product in my original function, it was what was missing, thank you</p>",
        "id": 269190622,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643069148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> Well, using sorry is not really a solution</p>",
        "id": 269190752,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643069253
    },
    {
        "content": "<p>By \"this works for me\", I meant \"this quiets the error message you mentioned\". You still need to provide a proof that it's decreasing.</p>",
        "id": 269191822,
        "sender_full_name": "Chris B",
        "timestamp": 1643070054
    }
]