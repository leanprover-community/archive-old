[
    {
        "content": "<p>There seems to be a difference between <code>.1</code> when produced by unification (via eta-for-structures) and <code>.1</code> when written directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- ⊢ i.1 = 0</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">i.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n  <span class=\"c1\">--   i.val</span>\n  <span class=\"n\">change</span> <span class=\"n\">i.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"c1\">-- ⊢ i.val = 0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">i.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 278627609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649717703
    },
    {
        "content": "<p>Yes, \"eta-for-structures\" is using <code>Expr.proj</code>, and the \"elaborator for <code>i.&lt;idx&gt;</code> is using the auto-generated projection functions (<code>Fin.val</code> in this case). <code>rw</code> uses keyed matching, and it thinks the key is <code>Fin.val</code> here. <br>\nBTW, <code>simp [show i.1 = 0 from sorry]</code>works as expected since it indexes after unfolding <code>[reducible]</code> constants.</p>",
        "id": 278629642,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649719177
    },
    {
        "content": "<p>There are multiple possible fixes here:</p>\n<ul>\n<li>Modify keyed matching</li>\n<li>Modify \"eta-for-structures\"</li>\n<li>Modify field access elaborator (and delaborator). This one will probably generate problems for the Mathlib port.</li>\n</ul>",
        "id": 278629955,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649719452
    },
    {
        "content": "<p>My inclination is to hide the primitive projections when possible. That would mean changing eta-for-structures (in unification) to automatically hide the projections behind the definitions. Probably they can still appear sometimes, so <code>rw</code> might also need to be able to match through reducible definitions (which I believe is also what lean 3 <code>rw</code> does).</p>",
        "id": 278630844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649720214
    },
    {
        "content": "<p>Note that <code>rw</code> matches through reducible definitions. The issue here is the head symbol only.</p>",
        "id": 278630903,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649720279
    },
    {
        "content": "<p>Even if the head symbol is keyed after unfolding, won't it be a very uninformative key <code>Expr.proj 1</code>?</p>",
        "id": 278631105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649720453
    },
    {
        "content": "<p>like that could apply to any structure</p>",
        "id": 278631125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649720481
    },
    {
        "content": "<p>The <code>Expr.proj</code> contains the structure name. We have been using this approach for <code>simp</code>, and it seems to be working well.</p>",
        "id": 278631219,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649720551
    },
    {
        "content": "<p>I think we can also have a (mathlib4) tactic to re-fold all projections in the goal. My guess is that most tactics will choke on primitive projections because the assumption that expressions are mostly structured around <code>Expr.const</code> and <code>Expr.app</code> is widespread</p>",
        "id": 278631465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649720800
    },
    {
        "content": "<p>Yes, this macro will probably be useful even if we modify the behavior of \"eta-for-structurer\" in the elaborator.</p>",
        "id": 278631932,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649721222
    }
]