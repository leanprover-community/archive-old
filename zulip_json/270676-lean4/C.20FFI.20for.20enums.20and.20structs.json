[
    {
        "content": "<p>So working on FFI bindings to various libraries I want to be able to bind with structs and enums more easily.<br>\nIf I have a constant that is supposed to reference an element of an enum like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"SDL_APP_TERMINATING\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">SDL_APP_TERMINATING</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"c1\">-- OS is terminating the application</span>\n</code></pre></div>\n<p>It will generate this c code</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">SDL_APP_TERMINATING</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">initialize_SDL_Events</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_G_initialized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"n\">_G_initialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">initialize_Init</span><span class=\"p\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_io_result_is_error</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">lean_dec_ref</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">l_SDL_Event_Type_SDL__APP__TERMINATING</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_init_l_SDL_Event_Type_SDL__APP__TERMINATING</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--- this is never generated!</span>\n\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why does it not generate the initializer <code>_init_l_SDL_Event_Type_SDL__APP__TERMINATING</code>?<br>\nMy suggestion would be to generate this</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"nf\">_init_l_SDL_Event_Type_SDL__APP__TERMINATING</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">SDL_APP_TERMINATING</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268624692,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642638716
    },
    {
        "content": "<p>The standard <code>extern</code> is supposed to be generic FFI that binds to symbols, but <code>SDL_APP_TERMINATING</code> is probably a header constant that doesn't exist at runtime. You can tell Lean \"yes, I know this will only work with the C backend\" (which of course is the only backend right now) using <code>c inline</code>: <a href=\"https://github.com/leanprover/lean4/blob/bbec84bb18d7d978b0c4ea13841b5a4ee6f1c1b4/src/Init/Meta.lean#L29-L31\">https://github.com/leanprover/lean4/blob/bbec84bb18d7d978b0c4ea13841b5a4ee6f1c1b4/src/Init/Meta.lean#L29-L31</a></p>",
        "id": 268656325,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642666621
    },
    {
        "content": "<p>It's the field of an enum. Cool that we have this option. This will probably not be used outside of C for a long time.</p>",
        "id": 268664738,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642671084
    },
    {
        "content": "<p>I think that referencing global constant static variables is platform/backend independent. It is just about assigning a value from a constant symbol at  initialization.<br>\nAs for structs I would suggest a sort of <code>@[bindgen ...]</code> declaration. This could also maybe be used to mirror enums with inductives.</p>\n<p>An example</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And in Lean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[bindgen struct \"Data\" ]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span>\n</code></pre></div>\n<p>Which automatically generates a PointedType instance for Data<br>\nwhich would generate something like (and more stuff)</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"nf\">_lean_Data_get_Data_x</span><span class=\"p\">(</span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_get_extern_data</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"nf\">_lean_Data_get_Data_y</span><span class=\"p\">(</span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_get_extern_data</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which are linked to the accessors of that function, makes it possible to access fields of that struct without writing too much boiler plate. The lean compiler needs to trust that you have specified the fields correctly though.</p>",
        "id": 268680486,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642679538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Where is the value from c inline actually emitted? I can't see it anywhere in the generated source.</p>",
        "id": 268683138,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642681188
    },
    {
        "content": "<p>At each use site</p>",
        "id": 268683213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642681230
    },
    {
        "content": "<p>But it produces this error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">js66s0xwjnzg0ggi2lq9bcvlk6x2za13</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">src.c</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x662</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">_init_l_SDL_Event_Type_SDL__LASTEVENT'</span>\n</code></pre></div>\n<p>why isn't the initialization functions generated?</p>",
        "id": 268683392,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642681340
    },
    {
        "content": "<p>I suspect this is because it is declared as just a constant UInt32. But this seems to work for Nat and bool in Init.Meta.</p>",
        "id": 268684258,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642681842
    },
    {
        "content": "<p>I can't help you if you don't even post your code, but there is a reason for the <code>Unit</code> argument in the linked code.</p>",
        "id": 268684435,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642681958
    },
    {
        "content": "<p>My code is the one I posted above. I see that that code uses a form of thunks, but since this is an immutable value I don't see why it shouldn't be just initialized to that value right away.</p>",
        "id": 268685018,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642682300
    },
    {
        "content": "<p>I assumed you were now using <code>c inline</code>, since you won't solve this any other way</p>",
        "id": 268685364,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642682482
    },
    {
        "content": "<p>I am using <code>c inline</code>. So I just wanted to avoid the indirection of using a thunk. I can always use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"SDL_APP_TERMINATING\"]</span>\n<span class=\"kn\">private</span> <span class=\"kd\">constant</span> <span class=\"n\">_SDL_APP_TERMINATING</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span>\n<span class=\"kd\">def</span> <span class=\"n\">SDL_APP_TERMINATING</span><span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">_SDL_APP_TERMINATING</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I just though there would be a simpler way</p>",
        "id": 268685689,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642682672
    },
    {
        "content": "<p>There is no thunk at runtime. And you'll want remove the second <code>Unit</code> argument.</p>",
        "id": 268685942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642682822
    },
    {
        "content": "<p>Oh, forgot that one.</p>",
        "id": 268685986,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642682861
    },
    {
        "content": "<p>But empty constants which are not filled by foreign initialization should cause compiler error. This shouldn't be left for the c compiler to detect IMO.</p>",
        "id": 268686572,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642683146
    },
    {
        "content": "<p>Hm, so this still causes an error since I haven't included the header file which contains this enum.<br>\nIs there some way I could include this header? <code>#include \"SDL.h\"</code> or reexport it somehow?</p>",
        "id": 268687172,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642683434
    },
    {
        "content": "<p>Alternatively I can just write it in C.</p>",
        "id": 268687364,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642683516
    },
    {
        "content": "<p>Oh, you are right. There is no way to do that, and we probably don't want to cement the C backend's default status even further.</p>",
        "id": 268687529,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642683587
    },
    {
        "content": "<p>I suggest removing the c inline functionality altogether and just use standard FFI and C code for those cases. It probably does more harm that usefullness if it can't even solve such simple things.</p>",
        "id": 268687887,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642683719
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/pull/694\">https://github.com/leanprover/lean4/pull/694</a></p>",
        "id": 268692064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642685733
    },
    {
        "content": "<p>Is it impossible to use match on UInt32 (that are not known at compile time)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">s.type</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">SDL_QUIT</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Event.quitEvent</span>\n  <span class=\"bp\">|</span> <span class=\"n\">SDL_KEYDOWN</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Event.keyboardEvent</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Event.userEvent</span>\n</code></pre></div>\n<p>This fails with redundant alternative since there is no way of knowing what those are at compile time. So do I have to resort to using <code>if then else</code> for this case?</p>",
        "id": 268699778,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642688999
    },
    {
        "content": "<p>Yes. I think this is the case in virtually every language.</p>",
        "id": 268700595,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642689305
    }
]