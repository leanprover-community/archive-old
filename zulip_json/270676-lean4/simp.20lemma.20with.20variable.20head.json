[
    {
        "content": "<p>Because of changes in simp's indexing (if I understand correctly), in Lean 4 we can now write code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasInv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">self_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">HasInv</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">self_inv</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasInv</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>In Lean 3, simp would never use <code>self_inv</code> since the head <code>f</code> of the lhs is a variable.</p>\n<p>But when I lint the example above in std4, both the <code>simpNF</code> linter and the <code>simpVarHead</code> linter throw errors. Is this as it should be? I thought the new simp was smart enough to only try to apply <code>self_inv</code> when <code>IsEquiv.inv</code> appears somewhere?</p>",
        "id": 310171078,
        "sender_full_name": "David Wärn",
        "timestamp": 1668508371
    },
    {
        "content": "<p>just a naive question, what is std4?</p>",
        "id": 310236460,
        "sender_full_name": "Sina",
        "timestamp": 1668529011
    },
    {
        "content": "<p>Its the project <a href=\"https://github.com/leanprover/std4#std4\">https://github.com/leanprover/std4#std4</a>, a standard library for lean 4, containing generally useful material for lean 4 projects that isn't central enough to make it into the core lean itself</p>",
        "id": 310236925,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668529158
    },
    {
        "content": "<p>The new simp hasn't changed in that regard.  The lhs of <code>self_inv</code> is still a badly conditioned HO pattern, <code>?f (inv ?f ?b) ?b</code>.  The unifier will choke on it, and we can't index it either.</p>",
        "id": 310249621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668532804
    }
]