[
    {
        "content": "<p>I am trying to create a mutual declaration involving an abbrev and an inductive (through a structure, but that is an irrelevant detail).</p>\n<p>However, it seems that I can't. Consider the following code snippet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"c1\">-- ERROR: invalid mutual block</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">Val</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Closure</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Env</span>\n  <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">VVar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Lvl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">VApp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span>  <span class=\"c1\">-- dont eval 'a' until needed</span>\n<span class=\"bp\">|</span> <span class=\"n\">VLam</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Closure</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">VPi</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">closure</span><span class=\"o\">)</span> <span class=\"c1\">-- dont eval 'A' if not typechecking</span>\n<span class=\"bp\">|</span> <span class=\"n\">VU</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way around this?</p>",
        "id": 292812018,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660157246
    },
    {
        "content": "<p>Based on the Declaration.lean, only mutual of inductives or mutual of definitions are supported, not even a mutual mixing definitions and inductives.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinCommandElab «mutual»]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabMutual</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">terminationBy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">decreasingBy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"n\">isMutualInductive</span> <span class=\"n\">stx</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"n\">hints.terminationBy</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwErrorAt</span> <span class=\"n\">bad</span> <span class=\"s2\">\"invalid 'termination_by' in mutually inductive datatype declaration\"</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"n\">hints.decreasingBy</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwErrorAt</span> <span class=\"n\">bad</span> <span class=\"s2\">\"invalid 'decreasing_by' in mutually inductive datatype declaration\"</span>\n    <span class=\"n\">elabMutualInductive</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">isMutualDef</span> <span class=\"n\">stx</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">argHints</span> <span class=\"o\">:=</span> <span class=\"n\">getTerminationHints</span> <span class=\"n\">arg</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"n\">argHints.terminationBy</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwErrorAt</span> <span class=\"n\">bad</span> <span class=\"s2\">\"invalid 'termination_by' in 'mutual' block, it must be used after the 'end' keyword\"</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"n\">argHints.decreasingBy</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwErrorAt</span> <span class=\"n\">bad</span> <span class=\"s2\">\"invalid 'decreasing_by' in 'mutual' block, it must be used after the 'end' keyword\"</span>\n    <span class=\"n\">elabMutualDef</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"n\">hints</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid mutual block\"</span>\n</code></pre></div>",
        "id": 292812869,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660157544
    },
    {
        "content": "<p>Ok, I guess the workaround is obvious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Closure</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">VVar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Lvl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">VApp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"c1\">-- call-by-need: dont eval 'a' until needed</span>\n<span class=\"bp\">|</span> <span class=\"n\">VLam</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Closure</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">VPi</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">closure</span><span class=\"o\">)</span> <span class=\"c1\">-- dont eval 'A' if not typechecking</span>\n<span class=\"bp\">|</span> <span class=\"n\">VU</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292813706,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660157824
    },
    {
        "content": "<p>This is probably a conservative check to rule out <a href=\"https://en.wikipedia.org/wiki/Induction-recursion\">induction-recursion</a>, which vastly increases the power of the theory.  I suspect that this would make elaborating recursive functions to eliminators much more tricky, and I don't know if I-R is compatible with all the other features of Lean, however.</p>",
        "id": 292830178,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1660164368
    },
    {
        "content": "<p>Another workaround is to use a notation to define <code>Env</code>. You have to turn off <code>quot.precheck</code> to make the notation go through though</p>",
        "id": 292869573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660196079
    },
    {
        "content": "<p>Here's an <a href=\"https://github.com/leanprover-community/mathport/blob/e16a13a76b08d7270ad25398ce3bc51bef0518ae/Mathport/Syntax/AST3.lean#L281-L423\">example</a> from mathport: it starts with a <code>local notation \"Binders\" =&gt; Array #Binder</code>, then uses that in the mutual induction, then ends with <code>def Binders := Array #Binder</code> after the induction so you can use that as a real definition. The only downside is that the inductive constructors themselves have fields using <code>Array #Binder</code> instead of the <code>Binders</code> declaration.</p>",
        "id": 292869719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660196196
    }
]