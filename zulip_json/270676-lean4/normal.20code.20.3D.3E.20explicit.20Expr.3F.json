[
    {
        "content": "<p>Is there a method that returns the underlying <code>Expr</code> in either Lean 3 or Lean 4?<br>\nFor example, <code>getExpr (1+2)</code> would return <code>mkApp (mkApp (Expr.const 'Nat.add []) (mkNatLit 1)) (mkNatLit 2)</code>.</p>",
        "id": 318209335,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672214941
    },
    {
        "content": "<p>You can do that with <code>elabTerm</code> and its variants</p>",
        "id": 318225963,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672222532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 318226083,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672222567
    },
    {
        "content": "<p>But the underlying <code>Expr</code> of <code>1 + 2</code> seems to be a lot more intimidating than your example :)</p>",
        "id": 318226393,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672222702
    },
    {
        "content": "<p>Actually I think <code>TermElabM</code> is the right monad for that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getExpr</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">e</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Expr</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"n\">getExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 318227378,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672223097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> has marked this topic as unresolved.</p>",
        "id": 318545178,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672391703
    }
]