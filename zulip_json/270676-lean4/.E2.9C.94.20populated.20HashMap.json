[
    {
        "content": "<p>Is it possible to start off a <code>HashMap</code> with data already in it? Something similar to this in Python:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">key_a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">key_b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Or this in Scala:</p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"kd\">val</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"nc\">Map</span><span class=\"p\">(</span><span class=\"s\">\"key_a\"</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"key_b\"</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 265823981,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640190635
    },
    {
        "content": "<p>That's not built in afaik, but you could write a helper function that folds a list of pairs into a hashmap and give it some fancy syntax like above if you wanted.</p>",
        "id": 265824450,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640190876
    },
    {
        "content": "<p>Yeah, that's what I ended up doing but I'm afraid the insertion computation is being called multiple times everytime I use my \"populated\" <code>HashMap</code></p>",
        "id": 265824536,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640190929
    },
    {
        "content": "<p>Can you show an example of what you are thinking about? I can't quite see why that should be the case.</p>",
        "id": 265824744,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640191049
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeTranslationList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"o\">(</span><span class=\"s2\">\"Float\"</span><span class=\"o\">,</span> <span class=\"s2\">\"double\"</span><span class=\"o\">)</span>\n<span class=\"o\">]</span>\n\n<span class=\"c1\">-- is this function being called multiple times???</span>\n<span class=\"kd\">def</span> <span class=\"n\">hashMapFromList</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">HashMap.empty</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n    <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">m.insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typeTranslationHashMap</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hashMapFromList</span> <span class=\"n\">typeTranslationList</span>\n</code></pre></div>",
        "id": 265824875,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640191117
    },
    {
        "content": "<p>Then I call <code>typeTranslationHashMap.find! &lt;key&gt;</code> multiple times. But I think everytime I call it, it's starting off from an empty hashmap, populating it and then doing the <code>find!</code> routine</p>",
        "id": 265825090,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640191229
    },
    {
        "content": "<p>A way to workaround this issue is to build the hashmap only once and pass it down the functions that need to use it. But I wanted to know if there was a way to avoid passing every populated data structure. I'm still new to functional programming <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265825362,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640191413
    },
    {
        "content": "<p>This is a question about how Lean handles top-level constants</p>",
        "id": 265825402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640191436
    },
    {
        "content": "<p>In my original code I did define <code>typeTranslationHashMap</code> using <code>constant</code> instead of <code>def</code>. But I don't know if it helps</p>",
        "id": 265825674,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640191580
    },
    {
        "content": "<blockquote>\n<p>I'm afraid the insertion computation is being called multiple times everytime I use my \"populated\" HashMap</p>\n</blockquote>\n<p>You might be afraid, but I'm almost certain it will only be evaluated once.  You can check the generated code using <code>set_option trace.compiler.ir.result true</code>.  Anything that ends in \"closed\" will only be evaluated once and cached afterwards.</p>",
        "id": 265826810,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640192223
    },
    {
        "content": "<p>BTW, this has nothing to do with top-level or not.  Even if you do <code>let x := hasMapFromList [(\"a\", \"b\"), (\"c\", \"d\")]; ....</code>, the hashmap will only be constructed once.</p>",
        "id": 265826888,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640192274
    },
    {
        "content": "<p>You can also put a <code>dbg_trace \"hash map is being constructed1!!\"</code> in hashMapFromList.  Then you'll get a message every time the function is called.</p>",
        "id": 265827020,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640192351
    },
    {
        "content": "<p>Thanks a lot for the tips Gabriel! The IR compiler result indeed shows \"closed\" and the debug message only shows up once <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 265827982,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640192816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 265827992,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640192824
    }
]