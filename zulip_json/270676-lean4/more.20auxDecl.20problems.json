[
    {
        "content": "<p>Here's another issue I've run into that seems kind of similar to <a href=\"#narrow/stream/270676-lean4/topic/tactic.20'cases'.20failed.20nested.20error/near/315681420\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/tactic.20'cases'.20failed.20nested.20error/near/315681420</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Relation.Symm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">â†”</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- (incorrectly) introduces a recursive hypothesis `foo : p`.</span>\n   <span class=\"n\">assumption</span> <span class=\"c1\">-- no error here</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">all goals are closed, and we get an error:</span>\n\n<span class=\"cm\">  fail to show termination for</span>\n<span class=\"cm\">    foo</span>\n<span class=\"cm\">  with errors</span>\n<span class=\"cm\">  structural recursion cannot be used</span>\n\n<span class=\"cm\">  well-founded recursion cannot be used, 'foo' does not take any (non-fixed) arguments</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I expect this to give me an error at <code>assumption</code>. Instead, we get the above-shown error about structural recursion.</p>\n<p>(I've reported this as <a href=\"https://github.com/leanprover-community/mathlib4/issues/1061\">https://github.com/leanprover-community/mathlib4/issues/1061</a>.)</p>",
        "id": 316137555,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671137402
    },
    {
        "content": "<p>(I'm reporting this in the lean4 stream instead of the mathlib4 stream, because my impression is that the bug is in the <a href=\"https://github.com/leanprover-community/mathlib4/blob/1305c7997e8133859d08c576d278bdfb1bfc30b6/Mathlib/Lean/Meta.lean#L17-L42\"><code>replace</code> function</a>, which looks like it's just a copy of the function <a href=\"https://github.com/leanprover/lean4/blob/f6cd6c069587cfe62dd68cb6330f9ad794a56724/src/Lean/Meta/Tactic/Replace.lean#L61-L80\"><code>replaceLocalDeclCore</code></a> from Lean 4 core.)</p>",
        "id": 316139560,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671138061
    }
]