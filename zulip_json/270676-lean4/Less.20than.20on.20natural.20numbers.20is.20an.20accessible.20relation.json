[
    {
        "content": "<p>Hi everyone, </p>\n<p>When I am pattern matching on an element of type <code>Acc R n</code> , Lean typechecker says, \"invalid alternative name Acc.intro\". How can I do this? (In Coq, I would use  <code>inversion ih</code>) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.WF</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n  <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">focus</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n      <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Hy</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">focus</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n        <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n        <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">Hz</span>\n        <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Acc.intro</span> <span class=\"n\">_</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>  <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">Typechecker</span> <span class=\"n\">complains</span><span class=\"o\">:</span>  <span class=\"n\">invalid</span> <span class=\"n\">alternative</span> <span class=\"n\">name</span> <span class=\"bp\">'</span><span class=\"n\">Acc.intro'</span>  <span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287427777,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1656153143
    },
    {
        "content": "<p>I have no clue why this doesn't work, but if you want a workaround until someone else can explain the problem, try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">ih</span>\n<span class=\"n\">case</span> <span class=\"n\">succ.h.h.intro</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 287428859,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656154628
    },
    {
        "content": "<p>You simply use <code>intro</code>to refer to the case. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 287428945,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656154801
    },
    {
        "content": "<p>I guess in general the tag name doesn't include the namespace. Just as in your example if you replace <code>succ</code> with <code>Nat.succ</code> it will be an invalid tag</p>",
        "id": 287429028,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656154883
    },
    {
        "content": "<p>So when using <code>cases</code>/<code>induction</code> with <code>with</code>, the cases are identified by tags? I always thought <code>with</code> means that we're back to \"normal\" pattern matching.</p>",
        "id": 287429108,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656155022
    },
    {
        "content": "<p>And if the type you're casing on has just one constructor as with <code>Acc</code> you can even put an underscore in place of the name, which I think is nice: <code>cases ih with | _ _ R =&gt; </code> instead of  <code>cases ih with | intro _ R =&gt; </code>.</p>",
        "id": 287429152,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656155053
    },
    {
        "content": "<p>Also, when you only have a single constructor you can perform destructuring with <code>have ⟨_, R⟩ := ih</code>.</p>",
        "id": 287429224,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656155173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horațiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/Less.20than.20on.20natural.20numbers.20is.20an.20accessible.20relation/near/287429152\">said</a>:</p>\n<blockquote>\n<p><code>cases ih with | _ _ R =&gt;  </code>.</p>\n</blockquote>\n<p>Interesting,  I thought I tried it and it did not work in the past, but now that you answered my question, it's working :). Thank you both <span class=\"user-mention\" data-user-id=\"329243\">@Horațiu Cheval</span> <span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> . </p>\n<p>Since, we are here how do you search for relevant lemmas and tactics?  Right now, I need to discharge:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">Hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 287429267,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1656155283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Less.20than.20on.20natural.20numbers.20is.20an.20accessible.20relation/near/287429108\">said</a>:</p>\n<blockquote>\n<p>So when using <code>cases</code>/<code>induction</code> with <code>with</code>, the cases are identified by tags? I always thought <code>with</code> means that we're back to \"normal\" pattern matching.</p>\n</blockquote>\n<p>The first example works, but the second doesn't, with an invalid tag error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 287429299,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656155298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239476\">Mukesh Tiwari</span> <a href=\"#narrow/stream/270676-lean4/topic/Less.20than.20on.20natural.20numbers.20is.20an.20accessible.20relation/near/287429267\">said</a>:</p>\n<blockquote>\n<p>Since, we are here how do you search for relevant lemmas and tactics?  Right now, I need to discharge:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">Hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>There used to be a <code>library_search</code> tactic which hasn't been ported to Lean 4 yet (IIRC).<br>\nThese days I tend to use the <a href=\"https://leanprover-community.github.io/lean-web-editor\">Lean 3 web editor</a> to then use <code>library_search</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287429461,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656155536
    },
    {
        "content": "<p><code>library_search</code> has been ported as part of mathlib4 (<a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a>).</p>",
        "id": 287429489,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656155619
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_of_lt_of_le#doc\">docs4#lt_of_lt_of_le</a> seems like a first step</p>",
        "id": 287429998,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656156405
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.lt_succ_iff#doc\">docs4#Nat.lt_succ_iff</a></p>",
        "id": 287430015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656156443
    },
    {
        "content": "<p>Thanks everyone! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.WF</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n  <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">focus</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n      <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Hy</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">focus</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n        <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n        <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">Hz</span>\n        <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">apply</span> <span class=\"n\">R</span>\n          <span class=\"k\">have</span> <span class=\"n\">Ht</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">Hy</span>\n          <span class=\"k\">have</span> <span class=\"n\">Hw</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">Hz</span> <span class=\"n\">Ht</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Hw</span>\n<span class=\"bp\">````</span>\n</code></pre></div>",
        "id": 287431245,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1656158323
    },
    {
        "content": "<p>Btw, no need to import content from <code>Init</code>. It's already imported by default</p>",
        "id": 287432134,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656159595
    }
]