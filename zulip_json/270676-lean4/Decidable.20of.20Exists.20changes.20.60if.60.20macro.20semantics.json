[
    {
        "content": "<p>The presence of a <code>Decidable</code> instance for <code>Exists</code> changes how the <code>if</code> macro is used to make definitions. It results in specialization of an argument from <code>Sort _</code> to <code>Prop</code>, and wraps the definition in a <code> .proof_1</code>. Relying on <code>@dite</code> does not have this happen.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Debug</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"n\">exists_prop_decidable</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n<span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Debug</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choice</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span> <span class=\"n\">Extend</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Classical.propDecidable</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">invFun</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">invFun'</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">invFun</span> <span class=\"c1\">-- Sort, Sort</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">invFun'</span> <span class=\"c1\">-- Sort, Sort</span>\n<span class=\"k\">#print</span> <span class=\"n\">invFun</span>\n<span class=\"k\">#print</span> <span class=\"n\">invFun'</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Debug.exists_prop_decidable</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">invFun_variant</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">invFun_variant'</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">invFun_variant</span> <span class=\"c1\">-- Prop, Sort</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">invFun_variant'</span> <span class=\"c1\">-- Sort, Sort</span>\n<span class=\"k\">#print</span> <span class=\"n\">invFun_variant.proof_1</span>\n<span class=\"k\">#print</span> <span class=\"n\">invFun_variant'</span>\n</code></pre></div>",
        "id": 306905041,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667094782
    },
    {
        "content": "<p>At a glance it looks like things are working as expected. Typeclass resolution is allowed to assign undetermined universe levels.</p>",
        "id": 306956624,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667135062
    },
    {
        "content": "<p>What's the right way to write the definition using the if then else macro, if we'd like to retain the Sort _ generalized?</p>",
        "id": 306963444,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667138469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> The part that seems suspicious here is that the universe levels should have already been turned into variables by the point you get to that instance</p>",
        "id": 306963853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667138660
    },
    {
        "content": "<p>Like, I thought that changing the body of a definition can't change its type? That sort of thing is pretty valuable for incremental compilation and such</p>",
        "id": 306964042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667138760
    },
    {
        "content": "<p>what I'm hearing here is that this is only true up to universe metavariables, which are not yet determined by the time the type is elaborated since apparently the value can refine them</p>",
        "id": 306964259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667138859
    },
    {
        "content": "<p>Correct, universe levels are considered more of an implementation detail than part of the formal signature by the elaborator</p>",
        "id": 306972587,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667143258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , should we tag <code>exists_prop_decidable</code> with <code>(priority := low)</code>?</p>",
        "id": 306975331,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667144690
    },
    {
        "content": "<p>I don't think this is <code>exists_prop_decidable</code>'s fault. Assuming the lean 4 behavior doesn't change, I would blame <code>invFun</code> for not specifying that it wants alpha to be a Sort u</p>",
        "id": 306975401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667144742
    },
    {
        "content": "<p>So switching from <code>Sort _</code> to <code>Sort u</code> should be sufficient, correct?</p>",
        "id": 306975580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667144811
    },
    {
        "content": "<p>yes</p>",
        "id": 306975609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667144817
    },
    {
        "content": "<p>I'm thinking of making a linter similar to the <code>suspicious_universes</code> linter which will warn if universe metavariables are refined in the definition. I think that will 90% of the time be a bug</p>",
        "id": 306975728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667144879
    },
    {
        "content": "<p>How would you check that in this case?</p>",
        "id": 306975876,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667144906
    },
    {
        "content": "<p>If you only see the definition after it's been specialized to <code>Sort 0</code></p>",
        "id": 306975936,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667144922
    },
    {
        "content": "<p>You can re-elaborate the type, generalize the universes and see if you get the same thing as the final result</p>",
        "id": 306975996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667144946
    },
    {
        "content": "<p>I really think that this should just be fixed on the lean 4 side, that's a lot simpler: you just up the universe metavariable context depth when elaborating the value of the definition, to ensure that the metavariables can't be instantiated by the value</p>",
        "id": 306976242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667145033
    },
    {
        "content": "<p>(you can't immediately promote the metavariables to variables, because you don't yet know what <code>variable</code>s are included)</p>",
        "id": 306976377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667145121
    },
    {
        "content": "<p>I've run into this issue recently as well, and needed to workaround by changing <code>Sort _</code> to <code>Sort u</code>. It would be nice not to have this gotcha.</p>",
        "id": 307016658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667171317
    },
    {
        "content": "<p>On the other hand, I think that my proposal will increase the probability of universe mismatch errors, which are definitely an un-fun experience for beginners. Enabling it on the lean core repo will probably already find some cases where they are relying on this behavior for something like <code>List.foldl : (α → β → α) → α → List β → α</code> inferring <code>α</code> to be a <code>Sort</code> (from the signature) instead of a <code>Type</code> (from the definition)</p>",
        "id": 307034349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667190222
    },
    {
        "content": "<p>This particular example should be fine since <code>α</code> can be generalized to <code>Sort</code> here. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 307599891,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667416129
    },
    {
        "content": "<p>That was the point of the example. If you look at the type, you will think that alpha can be a <code>Sort</code>, but if it is defined using specialization of <code>foldlM</code> to <code>Id</code> in the definition then alpha must be a <code>Type</code>. That's a universe constraint that happens only in the value, not the type, so with the current approach that would silently infer alpha to be a <code>Type</code> and under the proposal it would be a universe error</p>",
        "id": 307612484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667420830
    }
]