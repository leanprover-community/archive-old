[
    {
        "content": "<p>I'm trying to do a syntax extension along the lines of <a href=\"https://github.com/leanprover/lean4/blob/master/doc/tutorial/metaprogramming-arith.md\">this tutorial</a>. Defining special syntax to interpret my syntax categories as <code>term</code>s seems to work well, except that it breaks when I have an identifier at the end of a chain of nests. I tried breaking this into a #MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Syntax</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">expr</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[expr|\"</span> <span class=\"n\">expr</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsString</span> <span class=\"o\">:=</span> <span class=\"n\">lhs.getId.toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsSyntax</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.quote</span> <span class=\"n\">lhsString</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">lhsSyntax</span> <span class=\"bp\">++</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|$</span><span class=\"n\">rhs</span><span class=\"o\">])</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">expr</span><span class=\"bp\">|$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">xString</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">x.getId.toString</span>\n<span class=\"n\">return</span> <span class=\"n\">Lean.quote</span> <span class=\"n\">xString</span>\n\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The first #check will work great and produce  <code>\"bar\" : String</code>, the second one works for the <code>lhs</code> where I've inlined it, and will complain about the <code>rhs</code>, with: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'«</span><span class=\"n\">term</span><span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">]</span><span class=\"bp\">»'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is clearly what it was just able to elaborate above! Am I doing something wrong here, or is this a yet unimplemented feature in the syntax extension? Thanks!</p>",
        "id": 276783443,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1648380499
    },
    {
        "content": "<p>You need to tell Lean about <code> `([expr|$x:expr])</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">expr</span> <span class=\"s2\">\" + \"</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[expr|\"</span> <span class=\"n\">expr</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsString</span> <span class=\"o\">:=</span> <span class=\"n\">lhs.getId.toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsSyntax</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.quote</span> <span class=\"n\">lhsString</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">lhsSyntax</span> <span class=\"bp\">++</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|$</span><span class=\"n\">rhs</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">expr</span><span class=\"bp\">|$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">xString</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">x.getId.toString</span>\n  <span class=\"n\">return</span> <span class=\"n\">Lean.quote</span> <span class=\"n\">xString</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">expr</span><span class=\"bp\">|$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">expr</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">xString</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">x.getId.toString</span>\n  <span class=\"n\">return</span> <span class=\"n\">Lean.quote</span> <span class=\"n\">xString</span>\n\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- \"foo\" ++ \" + \" ++ \"bar\" : String</span>\n</code></pre></div>\n<p>I think the third case needs adjustments towards generality though</p>",
        "id": 276785318,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648383153
    }
]