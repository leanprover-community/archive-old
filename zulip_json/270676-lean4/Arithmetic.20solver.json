[
    {
        "content": "<p>Are there any efforts to build a proof producing solver in Lean for discharging goals involving arithmetic constraints?<br>\nI started to work on some buffer manipulation code as part of some work to formalize crypto routines in Lean.  I find myself spending a fair bit of time writing arithmetic lemmas by hand, and it seems like I should start working on automation rather than keep pushing through those lemmas.</p>",
        "id": 264665814,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639373851
    },
    {
        "content": "<p>oh? I don't know cryptography <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but could you post some examples of arithmetic constraints? the word sounds vague to me as a non expert, and I doubt that there are many cryptographers here</p>",
        "id": 264666564,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639374743
    },
    {
        "content": "<p>do you mean something like \"this addition won't overflow\"? or could you be more specific</p>",
        "id": 264666578,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639374791
    },
    {
        "content": "<p>or do you mean something like... if you do this kind of pointer arithmetic then a buffer overflow won't happen?</p>",
        "id": 264666639,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639374853
    },
    {
        "content": "<p>Have you tried <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a>? Of course it is not in lean 4 yet, but anything in lean 3 is slated for porting in the near term</p>",
        "id": 264672964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639382395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have not, but that looks like exactly what I am looking for.  I'd be happy to help with the porting.</p>",
        "id": 264705551,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639402321
    },
    {
        "content": "<p>a fair warning: in lean 3 I've learned to avoid the linarith tactic because it makes proofs unreasonably slow. I'm not sure if linarith could run faster in lean 4 or not</p>",
        "id": 264708531,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639403746
    },
    {
        "content": "<p>The thing about <code>linarith</code> is that it loves the jobs you hate. It makes working with Lean more like the way an undergraduate mathematician would work on paper -- \"obviously a+b+c&gt;0 because this follows from the assumptions which I'm carrying around in my head\". So for mathematicians it's a really important and useful tactic.</p>",
        "id": 264708859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639403900
    },
    {
        "content": "<p>It's super useful for computer scientists and programmers too (for array bound checks if nothing else).  I think it's essential that Lean 4 have a fast linear arithmetic tactic (which some heuristics for limited non-linear).</p>",
        "id": 264709945,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639404340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/270676-lean4/topic/Arithmetic.20solver/near/264705551\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I have not, but that looks like exactly what I am looking for.  I'd be happy to help with the porting.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> did you see that?</p>",
        "id": 264715764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639406741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/Arithmetic.20solver/near/264708531\">said</a>:</p>\n<blockquote>\n<p>a fair warning: in lean 3 I've learned to avoid the linarith tactic because it makes proofs unreasonably slow. I'm not sure if linarith could run faster in lean 4 or not</p>\n</blockquote>\n<p>Linarith isn't inherently slow. On average I wouldn't expect it to slow down your proofs more than <code>simp</code>, although of course they scale differently -- simp scales with the number of imports, <code>linarith</code> scales with the numbers of inequalities in your context and the number of variables in those inequalities. There's a <code>linarith only</code> variant that's faster.</p>",
        "id": 264723843,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639409894
    },
    {
        "content": "<p>That said, I think there's more promise for an efficient implementation of the simplex algorithm in Lean 4, which will scale better than the current Fourier-Motzkin implementation</p>",
        "id": 264724092,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639410008
    },
    {
        "content": "<p>sounds interesting... but i have a counterexample! <a href=\"https://gist.github.com/huynhtrankhanh/18611b9372d420f1cbbac54f52a4ba77\">https://gist.github.com/huynhtrankhanh/18611b9372d420f1cbbac54f52a4ba77</a> <code>linarith</code> is extremely slow in this proof <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 264728248,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639411586
    },
    {
        "content": "<p>so well, there is an escape hatch at the top of the file</p>",
        "id": 264728289,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639411607
    },
    {
        "content": "<p>(the <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> is to acknowledge that i've read your message, not to say that i agree with you lol)</p>",
        "id": 264728475,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639411673
    },
    {
        "content": "<p>That's a monster proof that's slow, period. There are 40 linarith calls in it, many with fairly big contexts. It shouldn't be at all surprising that replacing them with <code>sorry</code> speeds up the proof.</p>",
        "id": 264737305,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639415157
    },
    {
        "content": "<p>In addition, a lot of them involve natural number inequalities that get lifted (again and again and again) to <code>int</code>. Half of <code>linarith</code>'s execution time is spent in <code>zify</code> preprocessing.</p>",
        "id": 264737434,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639415199
    },
    {
        "content": "<p>Yeah, linarith isn't what is pathological about that proof. Lemmas are your friends</p>",
        "id": 264740872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639416571
    },
    {
        "content": "<p>I expect the use case I have will just involve really small arithmetic problems.  So far, I'm just addressing it by building up a collection of <a href=\"https://github.com/joehendrix/lean-crypto/blob/main/lib/Crypto/Nat.lean\">lemmas</a> and doing the proofs <a href=\"https://github.com/joehendrix/lean-crypto/blob/d88744cd24130d8c520d408371701fa5174c3f3e/lib/Crypto/Array.lean#L25-L32\">manually</a>.</p>\n<p>I think that approach may run into problems once I start specifying the actual crypto algorithms though.</p>",
        "id": 264751154,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639420700
    }
]