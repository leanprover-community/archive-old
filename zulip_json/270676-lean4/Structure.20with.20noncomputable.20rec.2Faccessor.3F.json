[
    {
        "content": "<p>Is there a way to mark a structure's <code>rec</code>/<code>accessor</code> functions noncomputable after the declaration? I'm doing some FFI stuff, I would like them to be available for reasoning, but noncomputable. My first instinct was to use the <code>attribute</code> command but noncomputable isn't actually an attribute.</p>",
        "id": 298637943,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663091935
    },
    {
        "content": "<p>Ended up just making an opaque NonemptyType and introducing the axioms I needed, but I'm still curious if this solution is possible!</p>",
        "id": 298667280,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663103124
    },
    {
        "content": "<p>Can you post a concrete example of what you're trying to do?</p>",
        "id": 298735170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663148619
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 298826769,
        "sender_full_name": "cognivore",
        "timestamp": 1663180169
    },
    {
        "content": "<p>Sure -- the reason for the noncomputability is to do with this <code>Uninit</code> type <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> worked out, which is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">UninitPointed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Uninit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">UninitPointed</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Uninit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">UninitPointed</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">opaque</span> <span class=\"n\">uninit</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">initUnsafe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">a</span>\n<span class=\"kd\">@[implementedBy initUnsafe]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getValueExists</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">init</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>So given a value <code>x : Uninit α</code> it is undecidable whether it is init or uninit. But given a proof that <code>∃ a, x = Uninit.init a</code> the value can be synthesized.</p>",
        "id": 298844772,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663186787
    },
    {
        "content": "<p>All that said, an uninitialized value of type <code>Uninit α</code> violates the Lean ABI (in particular, something might call <code>lean_inc</code> or <code>lean_dec</code> on it,  which could segfault). So, <code>Uninit α</code> values can only exist if they are contained by some external object that properly handles them</p>",
        "id": 298845312,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663187014
    },
    {
        "content": "<p>That's okay for me -- I wanted to use <code>Uninit α</code> to implement arrays that can be partially uninitialized. The uninit values are never actually exposed to the Lean runtime, but are used to define the interface. So I wanted to have something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ArrayUninit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>But, of course, this is potentially unsafe if <code>data</code> is computable, since then we could actually expose uninitialized values to the runtime.</p>",
        "id": 298845882,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663187289
    },
    {
        "content": "<p>So since I couldn't figure out how to do that, instead I wrote a new opaque type that is isomorphic to <code>Fin n → Uninit α</code>. I had to then manually axiomatize the reasoning principles for it, which are equivalent to what would be auto-generated by the structure, modulo <code>rec</code> being noncomputable.</p>",
        "id": 298846208,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663187447
    }
]