[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[foomacro|\"</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>A macro rule that names a binder <code>$foo</code> runs into an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foomacro</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ERROR: expected no space before spliced term or string</span>\n</code></pre></div>\n<p>Renaming the binder to <code>$bar</code> solve the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foomacro</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">bar</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bar</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I find this counter-intuitive, since I imagined that the strings in the syntax are not \"accessible\". Clearly, I'm wrong.</p>\n<ul>\n<li>Is this intended behavior? </li>\n<li>If it is intended, What's the use-case for <code>$foo</code> to clash with the string <code>\"foo\"</code> that is part of the syntax?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">189</span><span class=\"n\">f4bd372d8</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268496828,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1642573540
    },
    {
        "content": "<p>The issue is already in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[foomacro|\"</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>This will make <code>foo</code> a token and <code>foo</code> can then no longer be used for identifiers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[foomacro|\"</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- ERROR: Expected identifier</span>\n</code></pre></div>\n<p>Try the <code>&amp;</code> sign:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[foomacro|\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"foo\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>This will not make <code>foo</code> a token. Sometimes doing this causes other issues though that I don't fully understand yet...</p>",
        "id": 268503882,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1642580051
    },
    {
        "content": "<p>My understanding of the limitation of <code>&amp;\"foo\"</code> is that it can't be used when an identifier would also be legal in that position. <code>&amp;\"foo\"</code> and <code>&amp;\"bar\"</code> can be disambiguated but not <code>&amp;\"foo\" term</code> and <code>term</code></p>",
        "id": 268504291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642580374
    }
]