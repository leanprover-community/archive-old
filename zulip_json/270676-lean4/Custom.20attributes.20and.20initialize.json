[
    {
        "content": "<p>What's the status on defining new user attributes like <code>@[to_additive]</code> and <code>@[ext]</code>? A fair number of tactics are blocked on this or some other way of tagging lemmas.</p>\n<p>Related: what does <code>initialize</code> do, and how should it be used? When is \"initialization\"? My impression is that you can use this to store arbitrary data in the environment, which is way better than the lean 3 approach of serializing everything into exprs and sticking them in attributes.</p>",
        "id": 238120392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620643918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20attributes.20and.20initialize/near/238120392\">said</a>:</p>\n<blockquote>\n<p>A fair number of tactics are blocked on this or some other way of tagging lemmas.</p>\n</blockquote>\n<p>Is it possible you could use type classes as an alternative? That is, have the relevant lemmas be instances of a given type class and use have that type class serve as the tag.</p>",
        "id": 238223824,
        "sender_full_name": "Mac",
        "timestamp": 1620687106
    },
    {
        "content": "<p>Piggybacking on this topic: is there currently any way, regardless how hacky, to get a custom attribute and custom trace option in (short of forking Lean)? <code>#eval registerTraceClass</code> seems to work, but I guess the server expects it to be pure (and it scares me). I also have a tactic prototype that would really benefit from this.</p>",
        "id": 242281529,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1623365372
    },
    {
        "content": "<p>Apparently, according to the devs, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  is right -- custom user-space attributes are currently not supported. It is in the plans but will not be added right now.</p>",
        "id": 242281880,
        "sender_full_name": "Mac",
        "timestamp": 1623365644
    },
    {
        "content": "<p>Yeah, I had heard the same thing. Just hoping there's a difference between \"not supported\" and \"can't be done\".</p>",
        "id": 242281978,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1623365753
    },
    {
        "content": "<p>Well when I asked how to add them in a similar discussion the response was it may be time to implement non built-in attributes which got shot done as a complex thing to do later. This implied to me that there is no way to add non built-in attributes at this time.</p>",
        "id": 242282356,
        "sender_full_name": "Mac",
        "timestamp": 1623366015
    },
    {
        "content": "<p>The one hacky, non-fork way I could think of doing it is by building a shared library defining the new custom builtin attributes and passing that library to <code>lean --plugin</code>. That may work.</p>",
        "id": 242282496,
        "sender_full_name": "Mac",
        "timestamp": 1623366085
    },
    {
        "content": "<p>Do you (or the devs) know what the specific technical challenges are? That might help suss out where the line between \"not supported\" and \"can't be done\" is</p>",
        "id": 242283419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623366801
    },
    {
        "content": "<p>To quote <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> : \"The core limitation that would have to be lifted is the one on registering environment extensions: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Environment.lean#L227-L230\">https://github.com/leanprover/lean4/blob/master/src/Lean/Environment.lean#L227-L230</a>\"</p>",
        "id": 242285133,
        "sender_full_name": "Mac",
        "timestamp": 1623368390
    },
    {
        "content": "<p>Also, see this issue, which goes into more detail: <a href=\"https://github.com/leanprover/lean4/issues/513\">https://github.com/leanprover/lean4/issues/513</a></p>",
        "id": 242300101,
        "sender_full_name": "Mac",
        "timestamp": 1623385776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Custom.20attributes.20and.20initialize/near/242281529\">said</a>:</p>\n<blockquote>\n<p>Piggybacking on this topic: is there currently any way, regardless how hacky, to get a custom attribute and custom trace option in (short of forking Lean)? <code>#eval registerTraceClass</code> seems to work, but I guess the server expects it to be pure (and it scares me). I also have a tactic prototype that would really benefit from this.</p>\n</blockquote>\n<p>I don't think there's a requirement to register the trace class (in fact there's quite a few trace messages in core for unregistered trace classes).  The only downside of not registering is that you can't use <code>set_option</code> to enable it.  You need to use <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/SudoSetOption.lean\"><code>sudo set_option</code></a> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SudoSetOption</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">sudo</span> <span class=\"kd\">set_option</span> <span class=\"n\">trace.jannis</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">jannis</span><span class=\"o\">]</span> <span class=\"s2\">\"Erfolg!\"</span>\n</code></pre></div>",
        "id": 242308491,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623395557
    },
    {
        "content": "<p>Very nice, thanks! That's more than good enough for prototyping.</p>",
        "id": 242325475,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1623406628
    }
]