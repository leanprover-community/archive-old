[
    {
        "content": "<p>I am writing a test in IO_test.lean for <a href=\"http://IO.FS.Handle.read\">IO.FS.Handle.read</a>. When EOF is reached with this function, it should return an empty array. However, with the following  line</p>\n<p>let ys &lt;- withFile &lt;name of the file&gt; <a href=\"http://Mode.read\">Mode.read</a> $ fun h =&gt; <a href=\"http://h.read\">h.read</a> 1;</p>\n<p>I got as my output [76]. Furthermore, if I read four bytes, then I get [76,105,110,101]. However, if I add the following line before this line</p>\n<p>withFile &lt;name of the file&gt; Mode.write fun h =&gt; do pure();</p>\n<p>I do get the empty array as my output, as expected. What is going on here?</p>",
        "id": 241813272,
        "sender_full_name": "Reijo Jaakkola",
        "timestamp": 1623087610
    },
    {
        "content": "<p>Maybe this bug? <a href=\"https://github.com/leanprover/lean4/pull/514\">https://github.com/leanprover/lean4/pull/514</a></p>",
        "id": 241813794,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623087878
    },
    {
        "content": "<p>Not sure what you mean. I have the change that you mentioned in my own branch, so it should not be causing this.</p>",
        "id": 241814040,
        "sender_full_name": "Reijo Jaakkola",
        "timestamp": 1623087990
    },
    {
        "content": "<p><code>man 3 fopen</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span>      <span class=\"n\">Truncate</span>  <span class=\"n\">file</span>  <span class=\"n\">to</span> <span class=\"n\">zero</span> <span class=\"n\">length</span> <span class=\"n\">or</span> <span class=\"n\">create</span> <span class=\"n\">text</span> <span class=\"n\">file</span> <span class=\"n\">for</span> <span class=\"n\">writing.</span>  <span class=\"n\">The</span> <span class=\"n\">stream</span> <span class=\"n\">is</span> <span class=\"n\">positioned</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"kd\">begin</span><span class=\"bp\">‚Äê</span>\n              <span class=\"n\">ning</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">file.</span>\n</code></pre></div>\n<p><code>Mode.write</code> is expected to truncate the file</p>",
        "id": 241814886,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623088340
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Reading.20a.20text.20file\">#general &gt; Reading a text file</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span></p>",
        "id": 241815439,
        "sender_full_name": "Notification Bot",
        "timestamp": 1623088556
    },
    {
        "content": "<p>But shouldn't  <code>Mode.read</code> position the stream at the start of the file? In which case if the file is already empty (as it was in my case) the <code>h.read</code> should already return the empty array since it encounters EOF?</p>",
        "id": 241821900,
        "sender_full_name": "Reijo Jaakkola",
        "timestamp": 1623091352
    },
    {
        "content": "<p>I don't know what file you are reading, but the bytes you posted spell out <code>\"Line\"</code>, that doesn't seem very arbitrary :)</p>",
        "id": 241822215,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623091508
    },
    {
        "content": "<p>Lol, it did indeed contain them, I just forgot it... Thanks for the translation :)</p>",
        "id": 241822537,
        "sender_full_name": "Reijo Jaakkola",
        "timestamp": 1623091679
    }
]