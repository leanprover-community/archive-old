[
    {
        "content": "<p>We (= <span class=\"user-mention\" data-user-id=\"385405\">@Julien Marquet</span> and me) are happy to \"release\" one of our (school) project: <a href=\"https://github.com/RaitoBezarius/compiler9000\">https://github.com/RaitoBezarius/compiler9000</a> which is an extremely simple lambda calculus â†’ Krivine machine certified [1] compiler [2].</p>\n<p>We were supposed to do it in Coq, but it sounded a nice self contained project for an evaluation of Lean 4, so we convinced our teacher to let us do it in Lean 4, he accepted at one condition, to have everything without <code>sorry</code> by the end of the project -- it was pretty cool all the way.</p>\n<p>We might do some stuff on the top of this if we have some time, we would like to see how far we can go with such toy models, for the theory behind this, here is a nice paper: <a href=\"https://drops.dagstuhl.de/opus/volltexte/2014/4634/pdf/13.pdf\">https://drops.dagstuhl.de/opus/volltexte/2014/4634/pdf/13.pdf</a> which proves \"more\" but I think the Coq proofs are definitely lost, I was not able to find them and the authors are not answering over email alas.</p>\n<p>Thanks for the Lean 4 developers and everyone who helped and suggested solutions when we posted here. :)</p>\n<p>[1]: Well, it does not have all the desired theorems and it would require some work but straightforward to have all the theorems one might want for such things.<br>\n[2]: Well, we did not yet tried to extract it in C/C++ as we have some unsafe definitions which are more placeholder-like than really implemented.</p>",
        "id": 240398769,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622067317
    }
]