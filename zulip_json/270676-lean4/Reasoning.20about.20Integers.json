[
    {
        "content": "<p>Hi,<br>\nI'm trying to do small arithmetic proofs with Lean 4, and I'm struggling with the following small lemma<br>\n<code>def foo (x : Nat) : 0 &lt;= Int.ofNat x := by sorry</code></p>\n<p>I found <code>Nat.zero_le </code> which almost gives me what I need, but I still need to prove that <code>x &lt;= y -&gt; Int.ofNat x &lt;= Int.ofNat y</code><br>\nIs this lemma somewhere in the standard library (and what is the recommended way to look for such lemmas, and/or to do proofs on integers)?<br>\nThanks!</p>",
        "id": 301821454,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664630962
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Int.NonNeg.mk</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 301839590,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664640238
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 301840265,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664640605
    },
    {
        "content": "<p>The <code>&lt;=</code> notation corresponds to <code>LE.le</code>. The <code>LE</code> instance for <code>Int</code> uses <code>Int.le</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Int.le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">NonNeg</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NonNeg</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NonNeg</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So if you want to prove <code>(x &lt;= y) → (Int.ofNat x &lt;= Int.ofNat y)</code> you could start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LE.le</span><span class=\"o\">,</span> <span class=\"n\">Int.le</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which then requires you to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 301840529,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664640764
    }
]