[
    {
        "content": "<p>How can I make a syntax category accept the empty string?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">manyPlus</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"s2\">\"+\"</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">manyPlus</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{runParserCategory (← getEnv) `manyPlus \"</span><span class=\"bp\">+</span> <span class=\"bp\">+</span><span class=\"s2\">\"}\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ok: («manyPlus+» [\"+\" \"+\"])</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{runParserCategory (← getEnv) `manyPlus \"</span><span class=\"bp\">+</span><span class=\"s2\">\"}\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ok: («manyPlus+» [\"+\"])</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{runParserCategory (← getEnv) `manyPlus \"\"}\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c1\">-- error: &lt;input&gt;:1:0: unexpected end of input</span>\n</code></pre></div>",
        "id": 309201237,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1668176407
    },
    {
        "content": "<p><span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>",
        "id": 309201547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668176505
    },
    {
        "content": "<p>Is using a wrapper <code>syntax foo := (manyPlus)?</code> not an option?</p>",
        "id": 309201893,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668176616
    },
    {
        "content": "<p>I am using <code>runParserCategory</code>, so I think it has to be a syntax category. Or is there a similar function for syntax that does not have its own category? Of course, I can work around the whole issue by checking whether what I am parsing is only whitespace. I just wanted to make sure I am not missing a better solution here.</p>",
        "id": 309215350,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1668181031
    },
    {
        "content": "<p>you can just run <code>Parser.optional (runParserCategory ...)</code> in that case, I think?</p>",
        "id": 309216332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668181332
    },
    {
        "content": "<p>Not quite, you'd have to copy its implementation and change the invoked parser <code>p</code></p>",
        "id": 309216505,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668181404
    },
    {
        "content": "<p>hm, there should be a <code>Parser.run</code> frontend that just takes a string and a <code>Parser</code></p>",
        "id": 309216776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668181490
    },
    {
        "content": "<p>I'm running into a related issue and, before I try to work on a workaround, what is the issue behind having a <code>Parser.run</code> frontend as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> just described?</p>",
        "id": 309395505,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1668293269
    },
    {
        "content": "<p>it's not difficult to write, you can just adapt <code>runParserCategory</code></p>",
        "id": 309395580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668293320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"sd\">/-- convenience function for testing -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Parser.run</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;input&gt;\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">mkParserContext</span> <span class=\"o\">(</span><span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mkParserState</span> <span class=\"n\">input</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">whitespace</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">p.fn</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.hasError</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">(</span><span class=\"n\">s.toErrorMsg</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">input.atEnd</span> <span class=\"n\">s.pos</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.ok</span> <span class=\"n\">s.stxStack.back</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">((</span><span class=\"n\">s.mkError</span> <span class=\"s2\">\"end of input\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toErrorMsg</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 309395749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668293426
    },
    {
        "content": "<p>Can I drop <code>env</code> if I don't need <code>fileName</code>? (I'm only parsing strings in my use case.)</p>",
        "id": 309397391,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1668294776
    },
    {
        "content": "<p>Seems like <code>mkParserState</code> might use the environment.</p>",
        "id": 309397502,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1668294854
    },
    {
        "content": "<p>no, parsers need the environment because a parser might call a category parser which needs everything in the parser extension</p>",
        "id": 309398171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668295475
    },
    {
        "content": "<p><code>fileName</code> is only used in error messages AFAIK</p>",
        "id": 309398194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668295499
    },
    {
        "content": "<p>Right. That makes sense. Thanks!</p>",
        "id": 309399192,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1668296392
    },
    {
        "content": "<p>You can keep the environment empty if all your parsers are builtin, though that is not currently possible with <code>syntax</code></p>",
        "id": 309428776,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668328213
    }
]