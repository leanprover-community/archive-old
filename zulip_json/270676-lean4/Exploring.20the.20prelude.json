[
    {
        "content": "<p>When I want to know what's in the Prelude, I use some combination of go-to-definition and ripgrep. This works, but it's annoying and it's hard to recommend to others.</p>\n<p>Is there a better way?</p>\n<p>For instance, Coq has its various <code>Search</code> commands. Idris 1 had an <code>:apropos</code> command at the REPL that, in the environment, searches names, the names that occur in their types, and docstrings for things that contain a given string. <code>:search</code> finds definitions with types that are roughly isomorphic to a given type, similarly to Hoogle in Haskell.</p>",
        "id": 289762617,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657908433
    },
    {
        "content": "<p>The mathlib4 documentation can be helpful, especially since it shows everything with nice notation even if that notation is defined later (just ignore the Mathlib section and focus on Init): <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a></p>",
        "id": 289764339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657909269
    },
    {
        "content": "<p>Thanks for that! Is there a ready way to locally generate something this for only the things that ship with Lean? This is for programming-focused beginners.</p>",
        "id": 289764837,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657909522
    },
    {
        "content": "<p>Another good trick is to use the workspace symbol search (ctrl-p # in vscode).</p>",
        "id": 289768835,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657911560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> yes, it is generated with <a href=\"https://github.com/leanprover/doc-gen4\">https://github.com/leanprover/doc-gen4</a> you could run it against an empty lake project and it will output docs for Init, Std and Lean</p>",
        "id": 289770736,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657912461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> in my case, it seems to be called <code>M-x consult-lsp-symbols</code>. It searches names, which is very useful, but doesn't seem to search type signatures nor docs. Still, it's much better than nothing - thanks!</p>",
        "id": 289809842,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657949095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Thanks!</p>",
        "id": 289809854,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657949112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Exploring.20the.20prelude/near/289809842\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> in my case, it seems to be called <code>M-x consult-lsp-symbols</code>. It searches names, which is very useful, but doesn't seem to search type signatures nor docs. Still, it's much better than nothing - thanks!</p>\n</blockquote>\n<p>Oh and type search is on my list for doc-gen some time in the future <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> You could use mathlibs <code>#find</code> right now though.</p>",
        "id": 289816628,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657960026
    },
    {
        "content": "<p>The LSP workspace symbols request sadly is severely lacking. Both the lack of server-side sorting (could also be blamed on the VS Code client undoing it) and of any kind of labels for e.g. displaying types (not that we could include them in the search without some hefty optimizations) are such baffling omissions.</p>",
        "id": 289818299,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657962472
    },
    {
        "content": "<p>It's certainly better than nothing!</p>",
        "id": 289843703,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657999563
    },
    {
        "content": "<p>Oh yeah, I'm definitely glad with what we have! You could even write a bachelor's thesis about it! <a href=\"https://pp.ipd.kit.edu/publication.php?id=mennicken22bachelorarbeit\">https://pp.ipd.kit.edu/publication.php?id=mennicken22bachelorarbeit</a></p>",
        "id": 289844362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658000535
    }
]