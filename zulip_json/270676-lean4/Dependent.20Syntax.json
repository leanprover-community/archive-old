[
    {
        "content": "<p>Is there a way to get a syntax/parser to parse an element using a parser dependent on the value of a previously parsed element? For example, something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"lang\"</span> <span class=\"n\">cat</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"{\"</span> <span class=\"bp\">$</span><span class=\"n\">cat</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>The idea in the above example is that the stuff between the braces would be parsed using the specified  category <code>cat</code>. I doubt such a thing is available in the syntax notation, but I hope there is at least some way to write a parser that does this.</p>",
        "id": 238691592,
        "sender_full_name": "Mac",
        "timestamp": 1620945456
    },
    {
        "content": "<p>It should definitely be possible if you fall to the lowest level, writing a <code>ParserFn</code></p>",
        "id": 238692173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620945843
    },
    {
        "content": "<p>Assuming that's true, my other two questions would be: How low do I have to go? And, would it possible for <code>cat</code> to be a <code>term</code> that can be reduced into a <code>Name</code> for a category?</p>",
        "id": 238692839,
        "sender_full_name": "Mac",
        "timestamp": 1620946233
    },
    {
        "content": "<p>The next higher level than a <code>ParserFn</code> would be parser combinators, and you should be able to <em>mostly</em> use these with a manual parser for the <code>$cat</code> part</p>",
        "id": 238692908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946305
    },
    {
        "content": "<p>I'm not sure what you mean about the term thing</p>",
        "id": 238692918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946321
    },
    {
        "content": "<p>The parser will have available the syntax of the previously read tokens, so you can work with raw identifiers easily enough but anything involving type checking is probably not available</p>",
        "id": 238692997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946371
    },
    {
        "content": "<p>You don't even have the macro context so you can't write arbitrary <code>MacroM</code> code</p>",
        "id": 238693131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238692997\">said</a>:</p>\n<blockquote>\n<p>anything involving type checking is probably not available</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238693131\">said</a>:</p>\n<blockquote>\n<p>You don't even have the macro context so you can't write arbitrary <code>MacroM</code> code</p>\n</blockquote>\n<p>That was my curiosity, is it possible (if desired) to perform type-checking and elaboration and such during parsing? For me, the biggest thing would be resolving defs and/or expanding macros.</p>",
        "id": 238693164,
        "sender_full_name": "Mac",
        "timestamp": 1620946500
    },
    {
        "content": "<p>No, that's definitely not possible (deliberately?). The parser monad is quite restricted (and not even really a monad). Resolving defs is possible though, since you have access to the environment</p>",
        "id": 238693306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946575
    },
    {
        "content": "<p>Oh, the <code>$cat</code> parser already exists: <code>parserOfStack</code></p>",
        "id": 238693426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946676
    },
    {
        "content": "<p>it takes an index of the number of tokens ago where <code>cat:ident</code> was parsed and parses a <code>e:cat</code></p>",
        "id": 238693525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946726
    },
    {
        "content": "<p>it is used in <code>dynamicQuot</code> aka <code> `(cat| bla)</code></p>",
        "id": 238693601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620946775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238693426\">said</a>:</p>\n<blockquote>\n<p>Oh, the <code>$cat</code> parser already exists: <code>parserOfStack</code></p>\n</blockquote>\n<p>cool, thanks! I definitely missed that while skimming through the source code.</p>",
        "id": 238694507,
        "sender_full_name": "Mac",
        "timestamp": 1620947295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238693306\">said</a>:</p>\n<blockquote>\n<p>Resolving defs is possible though, since you have access to the environment</p>\n</blockquote>\n<p>Any chance you could provide an example of how <code>def</code> resolution works?</p>\n<p>I am still very much of a newbie when it comes to understand the inner workings of Lean. Most of what I've learned has come from searching for specific keywords and go to def'ing and then looking at the surrounding code and trying to understand it. So I am still very much missing most of the big picture.</p>",
        "id": 238694749,
        "sender_full_name": "Mac",
        "timestamp": 1620947436
    },
    {
        "content": "<p>I am doing the same thing, of course. Definition lookup can be done using <code>env.find?</code></p>",
        "id": 238695282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947797
    },
    {
        "content": "<p>Oh interesting, you can evaluate things in the parser monad: <code>evalParserConst</code> looks up a parser definition in the environment and runs it</p>",
        "id": 238695347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947846
    },
    {
        "content": "<p>ultimately it boils down to <code>Environment.evalConst</code></p>",
        "id": 238695450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947906
    },
    {
        "content": "<p>Thanks for all the help! :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238695282\">said</a>:</p>\n<blockquote>\n<p>I am doing the same thing, of course.</p>\n</blockquote>\n<p>Well, apparently, you're much better at it. XD</p>",
        "id": 238695476,
        "sender_full_name": "Mac",
        "timestamp": 1620947937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238695282\">said</a>:</p>\n<blockquote>\n<p>Definition lookup can be done using <code>env.find?</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238695450\">said</a>:</p>\n<blockquote>\n<p>ultimately it boils down to <code>Environment.evalConst</code></p>\n</blockquote>\n<p>Ah but constants are only imported names, correct? Not local ones.</p>",
        "id": 238695605,
        "sender_full_name": "Mac",
        "timestamp": 1620948028
    },
    {
        "content": "<p><code>env.find?</code> uses fully qualified names, but <code>resolveName</code> will resolve an unqualified name to a qualified name</p>",
        "id": 238695657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948077
    },
    {
        "content": "<p>unless by local you mean a local constant</p>",
        "id": 238695707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948106
    },
    {
        "content": "<p>which of course can't be evaluated</p>",
        "id": 238695722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948120
    },
    {
        "content": "<p>Yes, but the <code>find?</code> definition has the following comment: \"It is safe to use <code>find'</code> because we never overwrite imported declarations.\" so that seems to imply that only works for imported declarations.</p>",
        "id": 238695766,
        "sender_full_name": "Mac",
        "timestamp": 1620948130
    },
    {
        "content": "<p>I don't see that comment. Are you looking at an old version?</p>",
        "id": 238695820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948200
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/03ba945be179f73ae705191dcd5963e4dd40b84f/src/Lean/Environment.lean#L69\">https://github.com/leanprover/lean4/blob/03ba945be179f73ae705191dcd5963e4dd40b84f/src/Lean/Environment.lean#L69</a></p>",
        "id": 238695847,
        "sender_full_name": "Mac",
        "timestamp": 1620948238
    },
    {
        "content": "<p>That's master.</p>",
        "id": 238695893,
        "sender_full_name": "Mac",
        "timestamp": 1620948250
    },
    {
        "content": "<p>I am also not sure what the difference between a \"constant declaration\" and and non-\"constant\" one is and how it connects to the <code>de</code>\" command.</p>",
        "id": 238695972,
        "sender_full_name": "Mac",
        "timestamp": 1620948313
    },
    {
        "content": "<p>weird, my find in files isn't working right</p>",
        "id": 238695995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948337
    },
    {
        "content": "<p>Regarding imported declarations, it's talking about defs that were made in another file</p>",
        "id": 238696067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948367
    },
    {
        "content": "<p>any additions to the environment are always attached to the current file</p>",
        "id": 238696097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948391
    },
    {
        "content": "<p>There are lots of declarations in lean: <code>constant</code>,<code>axiom</code>, <code>def</code>, <code>theorem</code>, <code>inductive</code> and maybe a few I forget</p>",
        "id": 238696129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948433
    },
    {
        "content": "<p>they all have representatives in the return type of <code>find?</code></p>",
        "id": 238696139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948447
    },
    {
        "content": "<p>I think <code>constant</code> corresponds to <code>OpaqueVal</code></p>",
        "id": 238696248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948522
    },
    {
        "content": "<p><code>constant foo : nat := 1</code> is like <code>def foo : nat := 1</code> except the elaborator and the kernel refuse to reduce <code>foo ~&gt; 1</code>, <code>foo</code> acts like an axiomatic constant with no definition</p>",
        "id": 238696295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948578
    },
    {
        "content": "<p>it is basically the same as <code>axiom foo : nat</code> except you don't have to worry about inconsistency concerns</p>",
        "id": 238696366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948611
    },
    {
        "content": "<p>It's also possible I'm answering entirely the wrong question, \"constant\" is an overloaded word in lean</p>",
        "id": 238696433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238696433\">said</a>:</p>\n<blockquote>\n<p>It's also possible I'm answering entirely the wrong question, \"constant\" is an overloaded word in lean</p>\n</blockquote>\n<p>True! XD Yeah, I wasn't talking about <code>constant</code> (at least I don't think so). I was talking about the fact that <code>find?</code> returns <code>ConstantInfo</code> which the doc for describes as \"information associated with constant definitions\" and am wondering what the additional adjective of \"constant\" is meant to imply.</p>",
        "id": 238696811,
        "sender_full_name": "Mac",
        "timestamp": 1620948942
    },
    {
        "content": "<p>constant is a noun, not an adjective in that sentence</p>",
        "id": 238696946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620949049
    },
    {
        "content": "<p>\"declarations of constants\"</p>",
        "id": 238696970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620949078
    },
    {
        "content": "<p>lol, I guess technically a noun functioning as an adjective, but still a noun.</p>",
        "id": 238697013,
        "sender_full_name": "Mac",
        "timestamp": 1620949086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Syntax/near/238696970\">said</a>:</p>\n<blockquote>\n<p>\"declarations of constants\"</p>\n</blockquote>\n<p>Yes, but my question with that is what is the difference between a constant definition and a non-constant definition. Don't all definitions define constants (especially since <code>ConstantInfo</code> covers <code>def</code>s, <code>axiom</code>s, <code>constant</code>s, <code>inductive</code>, etc.)?</p>",
        "id": 238697153,
        "sender_full_name": "Mac",
        "timestamp": 1620949219
    },
    {
        "content": "<p>Sure, some define multiple constants</p>",
        "id": 238697255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620949307
    },
    {
        "content": "<p>Examples of declarations that don't define constants include <code>notation</code>, <code>open</code>, <code>namespace</code>,<code>attribute</code></p>",
        "id": 238697481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620949462
    },
    {
        "content": "<p><code>ConstantInfo</code> seems to be specifically for answering the question \"what kind of declaration does this named constant come from?\", which makes sense since it is the return value of <code>find?</code></p>",
        "id": 238697702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620949634
    },
    {
        "content": "<p>ah, makes sense</p>",
        "id": 238697744,
        "sender_full_name": "Mac",
        "timestamp": 1620949677
    }
]