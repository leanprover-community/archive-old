[
    {
        "content": "<p>Hello,<br>\nI am finding that Lean.Name implements BEq, but not DecidableEq.<br>\nIs there a lemma somewhere that says everything with BEq is DecidableEq?</p>",
        "id": 234576675,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1618434625
    },
    {
        "content": "<p>No, because it is not true. For example, <code>BEq Expr</code> is defined modulo alpha equivalence.</p>",
        "id": 234579741,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618435741
    },
    {
        "content": "<p>My understanding of why we differentiate between BEq and Eq in the first place is that we can return a boolean if the function in question is decidable</p>",
        "id": 234580197,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1618435977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228135\">@Scott Viteri</span> Sebastian's point is that one could define <code>BEq</code> arbitrarily, and so in general it might not actually be a decision procedure for equality. So the lemma you ask for cannot exist.  As for <code>Name</code>, it does support <code>DecidableEq</code> and AFAICT <code>BEq</code> decides it, but the <code>DecidableEq Name</code> instance just hasn't been implemented yet.</p>",
        "id": 234583792,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618437752
    },
    {
        "content": "<p>I see, BEq could be any function at all from a to a to bool.</p>",
        "id": 234585795,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1618438811
    },
    {
        "content": "<blockquote>\n<p>So the lemma you ask for cannot exist.</p>\n</blockquote>\n<p>Well it could exist, it would be a <code>LawfulBEq</code> typeclass like we currently have for monads. Although if <code>BEq</code> implementations which do not coincide with equality are normal and common, then maybe this typeclass should only include equivalence relation axioms to turn it into a setoid. You can already use <code>x = y</code> if you want something that is unambiguously an equality decision procedure.</p>",
        "id": 234601714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618449547
    },
    {
        "content": "<p>Hmm</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"s2\">\"LawfulBEq\"</span> <span class=\"bp\">./</span>\n</code></pre></div>\n<p>Coming up empty in lean3 and lean4 for me.</p>",
        "id": 234604121,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1618451407
    },
    {
        "content": "<p>Oh, could exist nm</p>",
        "id": 234604338,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1618451600
    },
    {
        "content": "<p>I like Mario's idea of <code>LawfulBEq</code>. I ran into this issue last week. I had been occasionally using the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decide_Eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>until it broke on <code>Bool × Bool</code> because that type's <code>BEq</code> is derived using <code>instBEqProd</code> instead of through <code>instDecidableEqProd</code>. I then realized this kind of lemma was basically hopeless. I'm glad I caught that early! A <code>LawfulBEq</code> class would help so would <code>LawfulOrd</code>.</p>",
        "id": 234625290,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1618469464
    },
    {
        "content": "<p>Why would you ever use <code>BEq</code>? What are the current use cases?</p>",
        "id": 234746992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518461
    },
    {
        "content": "<p>I would be fine for reserving the use of <code>BEq</code> to the cases where it's <em>not</em> just <code>Eq</code></p>",
        "id": 234747085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518490
    },
    {
        "content": "<p>(or I guess if you are in programming context and don't want to prove anything)</p>",
        "id": 234747322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518585
    },
    {
        "content": "<p>It's the right equality for <code>Float</code></p>",
        "id": 234751266,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1618520235
    },
    {
        "content": "<p>(that one is also not lawful).</p>",
        "id": 234751402,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1618520288
    },
    {
        "content": "<p>It's also used in Init.Data.List, in functions like <code>erase</code> and <code>replace</code>, which is why we even have to refer to <code>BEq</code> in teaching :-/</p>",
        "id": 234841315,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1618574849
    }
]