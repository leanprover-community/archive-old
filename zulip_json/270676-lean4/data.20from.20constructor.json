[
    {
        "content": "<p>I have defined my own natural numbers and <code>≤</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">zero</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_le</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am now trying to prove that <code>succ m ≤ succ n → m ≤ n</code>. In words what I want to say is that <code>succ m ≤ succ n</code> must have been constructed by <code>succ_le</code> and that constructor requires a proof that <code>m ≤ n</code>, which we use as our proof that <code>m ≤ n</code>. How do I say this in Lean4?</p>",
        "id": 320462042,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673360622
    },
    {
        "content": "<p>You can use induction on your <code>m ≤ n</code> hypothesis.</p>",
        "id": 320462405,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673360727
    },
    {
        "content": "<p>I think in this case, <code>cases</code> might also work.</p>",
        "id": 320462601,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673360769
    },
    {
        "content": "<p>I don't have <code>m ≤ n</code> as a hypothesis. That is my goal</p>",
        "id": 320463255,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673360951
    },
    {
        "content": "<p>Sorry, I meant the <code>succ m ≤ succ n</code> hypothesis.</p>",
        "id": 320463309,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673360969
    },
    {
        "content": "<p>Applying induction allows you to essentially solve the goal for all of the different ways an object could have been constructed. In your case, there's only one non-contradictory way to construct a proof of <code>succ m ≤ succ n</code>.</p>",
        "id": 320463499,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673361011
    },
    {
        "content": "<p>It worked with cases. Thank you! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 320463986,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673361125
    },
    {
        "content": "<p>This was one of the candidate definitions for &lt;= in the natural number game but tests indicated that people found doing induction on inequalities too confusing! I do think it's a beautiful approach but IIRC it was quite hard to verify the standard axioms for &lt;= on nat using it (maybe antisymmetry was hard?)</p>",
        "id": 320491354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673368174
    }
]