[
    {
        "content": "<p>I noticed a regression with function coercion inference compared to Lean 3. <br>\nIt is not hard to work around it by giving some extra typing information, but this is a common occurrence in mathlib, and the workaround already occurs a few times in Mathlib4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">toFun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">invFun</span>   <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Equiv.toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e.invFun</span><span class=\"o\">,</span> <span class=\"n\">e.toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">e₂</span> <span class=\"bp\">∘</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₁.symm</span> <span class=\"bp\">∘</span> <span class=\"n\">e₂.symm</span><span class=\"o\">⟩</span> <span class=\"c1\">-- both fields raise an error</span>\n</code></pre></div>",
        "id": 303901188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665686678
    },
    {
        "content": "<p>I've been running into this too.</p>",
        "id": 303930945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665698352
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/1725\">lean4#1725</a>.  It's not entirely trivial to fix this though, since the coercion code is scattered and partly duplicated over a couple of files right now.</p>",
        "id": 303936884,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665701597
    }
]