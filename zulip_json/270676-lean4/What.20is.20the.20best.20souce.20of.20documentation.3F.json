[
    {
        "content": "<p>I am a newbie trying to implement a bunch of statements about the natural numbers (basically the natural numbers game in lean4)  I am trying to prove very simple things like for all natural numbers a, a &lt; a + 1, which is easy enough.  I want to state and prove a trivial corollary that for all natural number a, a+ 1 &gt; a.   Where can I look to start figuring out these questions for myself?  Is it best to look at the source code?  Maybe in the Ord collection? </p>\n<p>For completeness, this is what I need to figure out,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">myNamespace</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ℕ.succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ.succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>  <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n   <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">--(I have a decent proof here that I want to reuse)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_gt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span>\n    <span class=\"c1\">--how can I find out what to put here, I want something like ((a &lt; b) implies (b &gt; a) )</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_succ</span> <span class=\"n\">n</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">myNamespace</span>\n</code></pre></div>\n<p>I appreciate any ideas and direction.</p>",
        "id": 292350454,
        "sender_full_name": "kvanvels",
        "timestamp": 1659919439
    },
    {
        "content": "<p><code>theorem succ_gt (n : ℕ) : succ n &gt; n := lt_succ n</code></p>",
        "id": 292350775,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659919808
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>",
        "id": 292350810,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659919875
    },
    {
        "content": "<p>This is surprising to me.  Is it correct to say that this means that lean switches greater-thans to less-thans automatically,  and that there is no reason to even have my theorem and proof?</p>",
        "id": 292351246,
        "sender_full_name": "kvanvels",
        "timestamp": 1659920455
    },
    {
        "content": "<p>thanks for the response.  I appreciate it.</p>",
        "id": 292351261,
        "sender_full_name": "kvanvels",
        "timestamp": 1659920477
    },
    {
        "content": "<p>afaiu, lean4 is able to interpret the gt-syntax as the lt, and vice versa. They (<code>a &lt; b</code>, <code>b &gt; a</code>) both stand for <code>LT.lt a b</code>.</p>",
        "id": 292351513,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659920876
    },
    {
        "content": "<p>Ok.  That is nice.  In C++ you have define all the different relations.  This way seems to make more sense.   Do you dig through the source code to learn something like that?</p>",
        "id": 292351774,
        "sender_full_name": "kvanvels",
        "timestamp": 1659921281
    },
    {
        "content": "<p>I'm not on my PC, but what does <code>#check 1 &gt; 0</code> say?</p>\n<p>Ugh, nvm, I guess it's going to say <code>Prop</code></p>",
        "id": 292352245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659921967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519925\">@kvanvels</span> <code>b &gt; a</code> is _definitionally equal_ to <code>a &lt; b</code>, and tactics like <code>refl</code> and <code>exact</code> work up to definitional equality. It's the same reason as why <code>m + zero = m</code> is proved by <code>rfl</code> (but of course <code>zero + m = m</code> is not <code>rfl</code>; definitional equality is \"not mathematical\" in some sense.)</p>",
        "id": 292400621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659964972
    }
]