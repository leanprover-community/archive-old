[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 261994035,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637271170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Exfalso.20HEq/near/261989164\">said</a>:</p>\n<blockquote>\n<p>In fact, it's possible for <code>Int = Thing 0 = Thing 1 = Thing 2 = ...</code>.</p>\n</blockquote>\n<p>Not only is it possible, they are, in fact, equal to each other implementation-wise.</p>",
        "id": 262004143,
        "sender_full_name": "Mac",
        "timestamp": 1637276423
    },
    {
        "content": "<p>Well, implementation-equality also includes a bunch of other things that are not necessarily equal in theory (like <code>structure Foo := (x : Nat)</code> and <code>Nat</code>), as well as some things that are definitely not equal in theory (like <code>Nat</code> and <code>Trunc Nat := Quot Nat (fun _ _ =&gt; True)</code>)</p>",
        "id": 262004846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637276776
    },
    {
        "content": "<p>A better word than \"implementation\" in this context would be \"model\"</p>",
        "id": 262017399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637285952
    },
    {
        "content": "<p>As in, there are models of Lean's type theory in which <code>Thing 1 = Thing 2</code> and other models in which the equality does not hold.</p>",
        "id": 262017819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637286359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Exfalso.20HEq/near/262004846\">said</a>:</p>\n<blockquote>\n<p>Well, implementation-equality also includes a bunch of other things that are not necessarily equal in theory (like <code>structure Foo := (x : Nat)</code> and <code>Nat</code>), as well as some things that are definitely not equal in theory (like <code>Nat</code> and <code>Trunc Nat := Quot Nat (fun _ _ =&gt; True)</code>)</p>\n</blockquote>\n<p>What is <code>Trunc</code> here?</p>",
        "id": 262056629,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637322678
    },
    {
        "content": "<p>Mario defines it in the post -- it's the quotient of a type by the \"always-true\" equivalence relation. His point is that mathematically the quotient has just one term, however internally the quotient type <code>Trunc Nat</code> is just represented by <code>Nat</code>, although the user doesn't know this.</p>",
        "id": 262057308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637323200
    }
]