[
    {
        "content": "<p>In Chapter 3, in the section \"Working with Propositions as Types\" there is the following:</p>\n<p>\"This looks exactly like the definition of the constant function in the last chapter,  ...\"</p>\n<p>Based on the type, I think it's trying to draw a parallel with something like the <code>const</code> function e.g. in Haskell, however I don't see any mention of a similar const function in Ch 2 of TPiL.  I looked at the version for Lean 3 and it seems that perhaps this sentence is a mistake/leftover from that?</p>\n<p>Thanks.</p>",
        "id": 294512622,
        "sender_full_name": "Tom",
        "timestamp": 1661063432
    },
    {
        "content": "<p>I believe it's referring to this part of chapter 2: \"the expression <code>fun x : Nat =&gt; true</code> denotes the constant function that always returns true\"</p>",
        "id": 294541410,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1661086723
    },
    {
        "content": "<p>I spotted that too but discarded it because the type of that function is <code>Nat -&gt; Bool</code>, unlike the theorem in the section I'm referring to: <code>theorem t1 : p → q → p := fun hp : p =&gt; fun hq : q =&gt; hp</code>.<br>\nThat's why I'm wondering if it's referring to a <code>const</code> function defined as <code>def const (a: p) (b: q): p := a</code>, ie with the type <code>p -&gt; q -&gt; p</code> (and note that if you remove the function definition sugar, you end up with the same \"computable\" version of the theorem)<br>\nConceptually, that makes sense as an example/comparison.  The const function is now making the \"same\" statement as the theorem, i.e. if you give me a <code>p</code>, I don't care/can ignore <code>q</code>.</p>",
        "id": 294555189,
        "sender_full_name": "Tom",
        "timestamp": 1661095185
    },
    {
        "content": "<p>Yes, this sentence is poorly worded.  I think the problem is that in the phrase \"This looks exactly like ...,\" it is unclear what \"this\" refers to.  There are actually two function definitions here--one introduced by <code>fun hp : p</code> and one introduced by <code>fun hq : q</code>.  The second function is the return value of the first function.  It is the second function definition that \"looks exactly like the definition of the constant function in the last chapter.\"  The second definition is <code>fun hq : q =&gt; hp</code>, and I think the point they are trying to make is that the return value of this function, <code>hp</code>, doesn't depend on the input to the function, <code>hq</code>.  That's what makes it look like a constant function: the function takes the input <code>hq</code>, ignores it, and returns <code>hp</code> no matter what <code>hq</code> is.</p>",
        "id": 294560736,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1661098547
    },
    {
        "content": "<p>Good point. Btw, I am happy to submit a documentation PR if someone steps in and tells me what the original intent is/was.</p>",
        "id": 294563738,
        "sender_full_name": "Tom",
        "timestamp": 1661100505
    },
    {
        "content": "<p>I don't remember what the original intent was; I am guessing that it was just a mistake. I'll fix it.</p>",
        "id": 294576731,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1661109584
    },
    {
        "content": "<p>Done. Thanks for pointing this out.</p>\n<p>On running the tests, I noticed that the following <code>conv</code> proof is now broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- |- a * (b * c) = a * (c * b)</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"c1\">-- |- a * (b * c)</span>\n    <span class=\"n\">congr</span>\n    <span class=\"c1\">-- 2 goals : |- a and |- b * c</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"c1\">-- |- b * c</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I think this is a Lean 4 bug. I can open an issue if that would be helpful.</p>",
        "id": 294580737,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1661113185
    }
]