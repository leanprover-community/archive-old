[
    {
        "content": "<p>How to measure the time of pure computation? I can use <code>IO.monoMsNow</code> to get the current time but I need to ensure the computation is done between two calls to the <code>IO.monoMsNow</code> function.</p>\n<p>The best I come up with is a \"black box\" API (<code>α → IO α</code>), like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[noinline]</span> <span class=\"n\">opaque</span> <span class=\"n\">blackBox</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compute</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- expensive computation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">startTime</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">blackBox</span> <span class=\"n\">input</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"bp\">←</span> <span class=\"n\">blackBox</span> <span class=\"bp\">$</span> <span class=\"n\">compute</span> <span class=\"n\">input</span>\n  <span class=\"k\">let</span> <span class=\"n\">endTime</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"time: {endTime - startTime}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">output</span>\n</code></pre></div>\n<p>But it relies on the behavior that <code>blackBox</code> is not inlined.</p>\n<p>Maybe it doesn't much make sense if <code>α</code> is a singleton type.</p>",
        "id": 292248183,
        "sender_full_name": "pcpthm",
        "timestamp": 1659783527
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=timeit#doc\">docs4#timeit</a>, if it's a pure computation you can just <code>Function.comp pure yourFunction</code></p>",
        "id": 292249561,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659785551
    },
    {
        "content": "<p>Unfortunately, <code>timeit</code> doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">computeFib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">10000</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getLine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trim.toNat</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"bp\">←</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"time\"</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">computeFib</span> <span class=\"n\">input</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"{output}\"</span>\n</code></pre></div>\n<p>And input <code>100000000</code>. The result is <code>time 0.00021ms</code> even though it is actually taking 1s.</p>\n<p>I guess this is because <code>computeFib input</code> can be computed before <code>timeit</code> starts.<br>\nThus, to make computation happen inside the <code>timeit</code> block, I need to get <code>input</code> inside the <code>timeit</code> block. However, that means the time it takes to input (waiting for user input) will be counted for the time.</p>\n<p>Also, I want to more flexible output than the fixed <code>timeout</code> output.</p>",
        "id": 292250965,
        "sender_full_name": "pcpthm",
        "timestamp": 1659787464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347012\">pcpthm</span> <a href=\"#narrow/stream/270676-lean4/topic/Measure.20compute.20time/near/292248183\">said</a>:</p>\n<blockquote>\n<p>But it relies on the behavior that <code>blackBox</code> is not inlined.</p>\n</blockquote>\n<p>What's the problem with that? It's not really different from <a href=\"https://doc.rust-lang.org/std/hint/fn.black_box.html\">https://doc.rust-lang.org/std/hint/fn.black_box.html</a></p>",
        "id": 292251973,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659788938
    },
    {
        "content": "<p>A concern was even if Lean doesn't inline a function, an C compiler will inline the function later. But thinking about that, the C compiler is usually not reordering statements, so it is okay I guess.</p>\n<p>I guess, in the end, because computation time is not something semantic, probably there is no way to truly ensure something like this.</p>",
        "id": 292252685,
        "sender_full_name": "pcpthm",
        "timestamp": 1659789818
    },
    {
        "content": "<p>Like, even if <code>blackBox</code> was truly opaque, a hypothetical transformation of code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">compute</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">blackBox</span> <span class=\"n\">input</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">precomputedFor0</span> <span class=\"o\">:=</span> <span class=\"n\">compute</span> <span class=\"mi\">0</span>\n<span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">blackBox</span> <span class=\"n\">input</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">blackBox</span> <span class=\"n\">precomputedFor0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">input</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">compute</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is valid and the computation time will be bogus.</p>",
        "id": 292252881,
        "sender_full_name": "pcpthm",
        "timestamp": 1659790090
    }
]