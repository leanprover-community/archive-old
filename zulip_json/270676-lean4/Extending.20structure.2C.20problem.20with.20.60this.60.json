[
    {
        "content": "<p>When extending a structure, I'm having a trouble that <code>this</code> is not transparent enough.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A.type</span> <span class=\"n\">this</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n    <span class=\"n\">B.mk</span> <span class=\"o\">(</span><span class=\"n\">A.mk</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">this.type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>In that context <code>this</code> is just some <code>A</code> and not <code>A.mk Nat</code>.</p>\n<p>What is the intended way to define <code>b</code> ?</p>",
        "id": 302319608,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664907256
    },
    {
        "content": "<p>What is <code>this</code> supposed to be? Do you happen to mean <code>toA</code>?</p>\n<p>If I assume the meaning of your code correctly, you can also just write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 302320045,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664907417
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> yes <code>toA</code> is what I want. Im just too used to object oriented programming and its <code>this</code></p>",
        "id": 302327708,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664910022
    }
]