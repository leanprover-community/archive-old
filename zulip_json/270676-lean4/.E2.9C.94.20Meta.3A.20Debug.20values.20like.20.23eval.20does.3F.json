[
    {
        "content": "<p>Hi, I recently started some metaprogramming in Lean4. As a beginner, I often want to debug / log some values to see what is happening. <code>logInfo</code> and friends are great for that.</p>\n<p>However, they do some pretty printing which hides a lot of information about the structure of the value. For example, <code>Expr</code> is an inductive value and I might want to see how it is made, instead of pretty printing it. Especially, if I want to do some pattern matching in the next step of my meta function.</p>\n<p>I was wondering if there is a way to log values in a similar manner like <code>#eval</code> does? <code>#eval</code> seems to be able to print almost anything, and in a really nice way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">target</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lean.Expr.app</span>\n<span class=\"cm\">    (Lean.Expr.app</span>\n<span class=\"cm\">      (Lean.Expr.const `Eq [])</span>\n<span class=\"cm\">      (Lean.Expr.const `a []))</span>\n<span class=\"cm\">    (Lean.Expr.const `b [])</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"sample\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:=</span><span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n    <span class=\"n\">Lean.logInfo</span> <span class=\"n\">target</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span><span class=\"kd\">by</span>\n  <span class=\"n\">sample</span> <span class=\"c1\">-- I get: a = b</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>Additionally, I do not know how to log results of more complex types, like for example <code>Option (Expr × Expr × Expr)</code>. <code>#eval</code> has no problems with this, so I guess there is a way.</p>\n<p>Is there a way to get a debug like this?</p>",
        "id": 295571929,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1661594315
    },
    {
        "content": "<p><code>#eval</code> uses <code>repr</code> for this</p>",
        "id": 295572411,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661594547
    },
    {
        "content": "<p>Perfect, works :) Thank you very much</p>",
        "id": 295572578,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1661594648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"527227\">Jan-Mirko Otter</span> has marked this topic as resolved.</p>",
        "id": 295572599,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661594659
    }
]