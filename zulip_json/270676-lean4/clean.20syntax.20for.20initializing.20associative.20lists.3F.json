[
    {
        "content": "<p>I need to initialize some associative lists to test some lean4 code I've been running. I know that if the list is empty you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mylist</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>But if I want a list with elements in it I don't see another syntax for this (besides actually calling Std.AssocList.cons which is very verbose. Is there something akin to the python map initialization syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myList</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>or could I create this via the macro system?</p>",
        "id": 227199878,
        "sender_full_name": "Dillon Huff",
        "timestamp": 1613947078
    },
    {
        "content": "<p>Here is a macro that uses <code>List.toAssocList</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">assocEntry</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toAssocList</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Here is one that expands the notation using <code>AssocList.cons</code> and <code>AssocList.nil</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">assocEntry</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.AssocList.nil</span><span class=\"o\">)</span>\n    <span class=\"n\">es.getElems.foldrM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227200586,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1613947958
    },
    {
        "content": "<p>Thanks! That was just what I was looking for. One clarification: when I copy that code in and #check {} like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">assocEntry</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toAssocList</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.AssocList.nil</span><span class=\"o\">)</span>\n    <span class=\"n\">es.getElems.foldrM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>I get an error message from vscode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">Std.AssocList.nil</span>\n\n  <span class=\"n\">EmptyCollection.emptyCollectionLean</span> <span class=\"mi\">4</span> <span class=\"n\">server</span>\n</code></pre></div>\n<p>Can the macro syntax be tweaked to avoid this?</p>",
        "id": 227200779,
        "sender_full_name": "Dillon Huff",
        "timestamp": 1613948220
    },
    {
        "content": "<p>You can define the notation for non-empty lists only. We have to replace <code>*</code> with <code>+</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>The following still works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because we have the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span> <span class=\"o\">(</span><span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227201039,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1613948460
    },
    {
        "content": "<p>Makes sense. Thanks!</p>",
        "id": 227201142,
        "sender_full_name": "Dillon Huff",
        "timestamp": 1613948565
    }
]