[
    {
        "content": "<p>I am creating a function that returns the average of the elements generated by applying the function to each element of the list. I am having trouble getting all the implicit parameters right. this is what i have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">averageBy</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HDiv</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">outParam</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">projection</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid argument exception: may not provide empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">xs.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">projection</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">projection</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">xs.length</span>\n    <span class=\"n\">sum</span> <span class=\"bp\">/</span> <span class=\"n\">length</span>\n</code></pre></div>\n<p>but i have these three errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HDiv</span> <span class=\"n\">β</span> <span class=\"n\">Nat</span> <span class=\"bp\">?</span><span class=\"n\">m.1886</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"n\">β</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">projection</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">projection</span> <span class=\"n\">y</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">outParam</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1080</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1153</span>\n</code></pre></div>\n<p>any help would  be appreciated</p>",
        "id": 272324373,
        "sender_full_name": "Joseph O",
        "timestamp": 1645132982
    },
    {
        "content": "<p>Why is <code>projection</code> of type <code>β → α</code>? If you change it to <code>α → α</code>, it works.</p>",
        "id": 272325853,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645133553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/implicit.20arguments/near/272325853\">said</a>:</p>\n<blockquote>\n<p>Why is <code>projection</code> of type <code>β → α</code>? If you change it to <code>α → α</code>, it works.</p>\n</blockquote>\n<p>right, but i dont want it to nessacerily take in type a</p>",
        "id": 272337105,
        "sender_full_name": "Joseph O",
        "timestamp": 1645139021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> I would like to be able to do something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"n\">Char</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNum</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">arg.num</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">averageBy</span> <span class=\"n\">getNum</span> <span class=\"o\">[{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"sc\">'A'</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"sc\">'A'</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"sc\">'A'</span><span class=\"o\">}]</span>\n</code></pre></div>\n<p>if you see what i mean</p>",
        "id": 272338257,
        "sender_full_name": "Joseph O",
        "timestamp": 1645139864
    },
    {
        "content": "<p>If you explicit the type of <code>sum</code> as <code>α</code>, the error message will be more insightful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">averageBy</span>\n    <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HDiv</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">outParam</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">projection</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid argument exception: may not provide empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">xs.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">projection</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">projection</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">xs.length</span>\n    <span class=\"n\">sum</span> <span class=\"bp\">/</span> <span class=\"n\">length</span>\n</code></pre></div>",
        "id": 272338734,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645140171
    },
    {
        "content": "<p>Ok thanks. I will try it out</p>",
        "id": 272340292,
        "sender_full_name": "Joseph O",
        "timestamp": 1645141255
    },
    {
        "content": "<p>I was playing around with it a bit but I was not able to fix it</p>",
        "id": 272352212,
        "sender_full_name": "Joseph O",
        "timestamp": 1645150992
    },
    {
        "content": "<p>Is the following what you want (slight tweak of <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>'s code).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">averageBy</span>\n    <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HDiv</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">outParam</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">projection</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid argument exception: may not provide empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">xs.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">projection</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">xs.length</span>\n    <span class=\"n\">sum</span> <span class=\"bp\">/</span> <span class=\"n\">length</span>\n</code></pre></div>",
        "id": 272353529,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645152338
    },
    {
        "content": "<p>Was about to post almost the same thing</p>",
        "id": 272353597,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645152381
    },
    {
        "content": "<p>Is the inhabited instance being used for panic!?</p>",
        "id": 272353616,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645152410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> note that if you want to use <code>projection</code> on the elements of <code>xs</code>, then they must be of type <code>β</code>. Hence the return type <code>List β → α</code>.</p>\n<p>And the other issue was a misuse of <code>foldr</code></p>",
        "id": 272353662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645152468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/implicit.20arguments/near/272353616\">said</a>:</p>\n<blockquote>\n<p>Is the inhabited instance being used for panic!?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 272354997,
        "sender_full_name": "Joseph O",
        "timestamp": 1645153755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/implicit.20arguments/near/272353529\">said</a>:</p>\n<blockquote>\n<p>Is the following what you want (slight tweak of <span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span>'s code).</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">averageBy</span>\n    <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HDiv</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">outParam</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">projection</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid argument exception: may not provide empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">xs.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">projection</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">xs.length</span>\n    <span class=\"n\">sum</span> <span class=\"bp\">/</span> <span class=\"n\">length</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>well that works. I see what the type mismatches were</p>",
        "id": 272355109,
        "sender_full_name": "Joseph O",
        "timestamp": 1645153877
    },
    {
        "content": "<p>Small thing, what was wrong with the misuse of foldr? I didn't really understand the fix</p>",
        "id": 272355185,
        "sender_full_name": "Joseph O",
        "timestamp": 1645153951
    },
    {
        "content": "<p>The type of the result had to be specified, otherwise lean inferred it was β.</p>",
        "id": 272355395,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645154190
    },
    {
        "content": "<p>In the original code, the main mistake was that you were taking a projection of the accumulator for the sum, not only the entries of the list.</p>",
        "id": 272355428,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645154260
    },
    {
        "content": "<p>Yeah, and the accumulator was already of type <code>α</code></p>",
        "id": 272356261,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645155043
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 272356294,
        "sender_full_name": "Joseph O",
        "timestamp": 1645155093
    }
]