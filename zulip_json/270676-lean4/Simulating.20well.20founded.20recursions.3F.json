[
    {
        "content": "<p>I'm trying to formalize the function <code>compile.inv</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">LambdaTerm</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"bp\">|</span> <span class=\"n\">Access</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Grab</span>\n<span class=\"bp\">|</span> <span class=\"n\">Push</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"bp\">|</span> <span class=\"n\">Item</span> <span class=\"o\">(</span><span class=\"n\">instrs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineStack</span>\n<span class=\"bp\">|</span> <span class=\"n\">Item</span> <span class=\"o\">(</span><span class=\"n\">instrs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">KrivineState</span> <span class=\"n\">where</span>\n  <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span>\n  <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span>\n  <span class=\"n\">stack</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineStack</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LambdaTerm</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But it looks like Lean 4 is not able to show termination on <code>compile.inv</code> (due to <a href=\"https://github.com/leanprover/lean4/issues/176\">https://github.com/leanprover/lean4/issues/176</a> I suppose), is there a way forward or tricks to still build this function manually and show stuff on it?</p>",
        "id": 236803788,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619772202
    },
    {
        "content": "<p>does making it <code>partial</code> work for your case?</p>",
        "id": 236804278,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619772530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235513\">Daniel Fabian</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20well.20founded.20recursions.3F/near/236804278\">said</a>:</p>\n<blockquote>\n<p>does making it <code>partial</code> work for your case?</p>\n</blockquote>\n<p>I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"n\">partial</span> <span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"n\">compile.inv'</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">that</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">inhabited</span>\n</code></pre></div>",
        "id": 236804505,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619772660
    },
    {
        "content": "<p>ah, you'll need to add a <code>deriving Inhabited</code> to your type.</p>",
        "id": 236804564,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619772709
    },
    {
        "content": "<p>Probably to <code>LambdaTerm</code></p>",
        "id": 236804572,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619772718
    },
    {
        "content": "<p>You will not be able to prove anything about it then though</p>",
        "id": 236804662,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619772751
    },
    {
        "content": "<p>Ha, so indeed, deriving <code>Inhabited</code>for <code>LambdaTerm</code> and making it <code>partial</code> creates the function, but I still need to prove things on its composition with other functions</p>",
        "id": 236804739,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619772798
    },
    {
        "content": "<p>Okay, I see, <code>partial</code> makes the function unsafe and uses <code>implementedBy</code>, makes sense why I cannot prove anything on it</p>",
        "id": 236804916,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619772913
    },
    {
        "content": "<p>You could try to apply <code>Wellfounded.fixF</code> manually or, probably nicer, define a custom \"accessibility\" inductive predicate for your datatype and do induction on that one. Not completely sure about that one though, I haven't tried yet.</p>",
        "id": 236805742,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619773387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20well.20founded.20recursions.3F/near/236805742\">said</a>:</p>\n<blockquote>\n<p>You could try to apply <code>Wellfounded.fixF</code> manually or, probably nicer, define a custom \"accessibility\" inductive predicate for your datatype and do induction on that one. Not completely sure about that one though, I haven't tried yet.</p>\n</blockquote>\n<p>Alright, will give it a try, thanks!</p>",
        "id": 236806139,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619773615
    },
    {
        "content": "<p>Well, I guess the predicate merely moves the issue since you still have to show by well-founded recursion that it is inhabited :) . So it might only make sense if you have multiple functions using the same recursion scheme. In other words, it is more or less equivalent to hiding the wf recursion behind a custom recursor.</p>",
        "id": 236806593,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619773880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20well.20founded.20recursions.3F/near/236806593\">said</a>:</p>\n<blockquote>\n<p>Well, I guess the predicate merely moves the issue since you still have to show by well-founded recursion that it is inhabited :) . So it might only make sense if you have multiple functions using the same recursion scheme. In other words, it is more or less equivalent to hiding the wf recursion behind a custom recursor.</p>\n</blockquote>\n<p>This custom recursor can be used then with <code>induction &lt;&gt; using custom_recursor</code> syntax?</p>",
        "id": 236807344,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619774317
    },
    {
        "content": "<p>So I tried a real quick definition and got to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">LambdaTerm</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"bp\">|</span> <span class=\"n\">Access</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Grab</span>\n<span class=\"bp\">|</span> <span class=\"n\">Push</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"bp\">|</span> <span class=\"n\">Item</span> <span class=\"o\">(</span><span class=\"n\">instrs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineStack</span>\n<span class=\"bp\">|</span> <span class=\"n\">Item</span> <span class=\"o\">(</span><span class=\"n\">instrs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">KrivineState</span> <span class=\"n\">where</span>\n  <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span>\n  <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineEnv</span>\n  <span class=\"n\">stack</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineStack</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv_rel</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv_wf</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">):</span> <span class=\"n\">Acc</span> <span class=\"n\">inv_rel</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">):</span> <span class=\"n\">LambdaTerm</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fixF</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">code</span> <span class=\"n\">inv</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">code</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n<span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">inv_wf</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, Lean is giving me: <code>(kernel) compiler failed to infer low level type, unknown declaration 'WellFounded.fixF'</code> ; is this expected because I abused of <code>sorry</code> :&gt; ?</p>",
        "id": 236809694,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619775636
    },
    {
        "content": "<p>Oops, the compiler does not know how to handle wf recursion. You can turn it off using <code>set_option codegen false</code>. Or, if you <em>want</em> to run this def, do what the elaborator will do when it gains support for wf recursion and define a <code>partial def</code> for the compiler and an <code>@[implementedBy ...] def</code> for proving.</p>",
        "id": 236810346,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619776049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20well.20founded.20recursions.3F/near/236810346\">said</a>:</p>\n<blockquote>\n<p>Oops, the compiler does not know how to handle wf recursion. You can turn it off using <code>set_option codegen false</code>. Or, if you <em>want</em> to run this def, do what the elaborator will do when it gains support for wf recursion and define a <code>partial def</code> for the compiler and an <code>@[implementedBy ...] def</code> for proving.</p>\n</blockquote>\n<p>so I would need to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">compile.inv</span> <span class=\"bp\">…</span>\n\n<span class=\"kd\">@[implementedBy compile.inv]</span>\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv_defined_with_wf</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>?</p>",
        "id": 236810729,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619776273
    },
    {
        "content": "<p>oh no, I understood I think now</p>",
        "id": 236810757,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619776295
    },
    {
        "content": "<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">compile.inv</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LambdaTerm</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[implementedBy compile.inv]</span>\n<span class=\"kd\">def</span> <span class=\"n\">compile.inv_with_wf</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">):</span> <span class=\"n\">LambdaTerm</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fixF</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">code</span> <span class=\"n\">inv</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">code</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n<span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">inv_wf</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>without much more luck, do I still need to disable codegen for the wf definition?</p>",
        "id": 236810918,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619776402
    },
    {
        "content": "<p>You might, that could be an oversight in <code>implementedBy</code></p>",
        "id": 236811056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619776506
    },
    {
        "content": "<p>Alright, it did the trick I think, thanks!</p>",
        "id": 236811244,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619776624
    },
    {
        "content": "<p>Nice!</p>",
        "id": 236811364,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619776705
    },
    {
        "content": "<p>So the whole <code>partial</code> + <code>implementedBy</code> dance is only there to achieve efficient computation, right? That is, the <code>partial def</code> is not necessary if you're only interested in proving things about the definition?</p>",
        "id": 249841901,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629290132
    },
    {
        "content": "<p>Yes, see<br>\n<span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20well.20founded.20recursions.3F/near/236810346\">said</a>:</p>\n<blockquote>\n<p>You can turn it off using <code>set_option codegen false</code>. Or, if you <em>want</em> to run this def, do what the elaborator will do when it gains support for wf recursion and define a <code>partial def</code> for the compiler and an <code>@[implementedBy ...] def</code> for proving.</p>\n</blockquote>",
        "id": 249842188,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629290285
    }
]