[
    {
        "content": "<p>I'm getting an issue <code>failed to compile partial definition, failed to show type is inhabited</code><br>\nHowever, I can create a proof that the type in question is inhabited. How do I get lean to compile my function?</p>",
        "id": 225121412,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1612417283
    },
    {
        "content": "<p>Construct an instance <code>instance inhabited T := ...</code></p>",
        "id": 225121562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612417502
    },
    {
        "content": "<p>Ah I think I see where I went wrong. This is somewhat odd. If I have the two functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">unsafeFn1</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeFn1</span> <span class=\"n\">a</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">unsafeFn2</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeFn2</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Then the first is considered inhabited (because of <code>pure</code>) and the second is not. Furthermore, I'm not sure how to prove it is because I'd have to provide arguments to <code>Inhabited</code> in somewhat of an odd way.<br>\nMy issue is that I wrote the definition the second way instead of the first way (however I wrote the inhabited proof the first way, so they wouldn't line up)</p>",
        "id": 225121810,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1612417916
    },
    {
        "content": "<p>When I try to compile that the first definition causes the compiler to loop and the server becomes unresponsive until I restart it</p>",
        "id": 225122433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612418715
    },
    {
        "content": "<p>yes, that's another problem, but if you write it in a different (but still non-total way) it works</p>",
        "id": 225122454,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1612418745
    },
    {
        "content": "<p>Adding an inhabited instance such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>causes the second definition to work, at least until it hits the same loop as definition 1</p>",
        "id": 225122536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612418841
    }
]