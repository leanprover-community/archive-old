[
    {
        "content": "<p>I don't have a very good understanding of the reference counting instructions so this may be a misunderstanding on my part, but I think this might be a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((),</span> <span class=\"o\">())</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((),</span> <span class=\"n\">x.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">of</span>\n  <span class=\"n\">Option.none</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">foo._closed_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_3</span>\n  <span class=\"n\">Option.some</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">isShared</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">case</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n    <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">PUnit.unit</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_1</span>\n    <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n      <span class=\"n\">inc</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">PUnit.unit</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_8</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_9</span>\n</code></pre></div>\n<p>This has been minimized, but the part I want to point out is that in the <code>none</code> case,  <code>inc x_2</code> is called but there is no corresponding <code>dec x_2</code> later. This only seems to happen for nullary variants of a data-carrying inductive, like <code>none</code> in this case.</p>",
        "id": 237799914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620383535
    },
    {
        "content": "<p><code>Option.none</code> is unboxed, so there is nothing to free</p>",
        "id": 237805402,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620386450
    },
    {
        "content": "<p>If there was such a fundamental memory leak, I do hope the leak sanitizer would have found it :)</p>",
        "id": 237805484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620386481
    },
    {
        "content": "<p>The <code>inc/dec x_2</code> could theoretically be elided, but that would need some borrow checker-like analysis of <code>x_2</code>'s lifetime being dominated by <code>x_1</code>'s.</p>",
        "id": 237809822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620388588
    }
]