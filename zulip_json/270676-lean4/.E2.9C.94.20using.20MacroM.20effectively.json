[
    {
        "content": "<p>Regarding 1.,<br>\nWe don't have documentation for <code>MacroM</code> yet. You can finds its definition here<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L2139-L2219\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L2139-L2219</a><br>\nThere are some examples here:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean</a></p>\n<p>Regarding 2.,<br>\nTo be honest, I think the error message is quite reasonable in this case.<br>\nThe <code>lookahead</code> parser may be useful. Suppose you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;[\"</span> <span class=\"n\">lookahead</span><span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"]&gt;\"</span><span class=\"o\">)</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"o\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"s2\">\"]&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">dict</span>\n</code></pre></div>\n<p>Then, we get the error <code>error: expected ']&gt;' or string literal</code> at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dict2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"bp\">Ã—</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dict</span><span class=\"bp\">%</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"mi\">1</span> <span class=\"bp\">===</span> <span class=\"mi\">2</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>We also have an <code>error</code> parser, but we didn't expose it yet in the <code>syntax</code> command. So, you have to write the actual parsing function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[dictParser]</span> <span class=\"kd\">def</span> <span class=\"n\">parseDict</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"s2\">\"&lt;[\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">lookahead</span> <span class=\"o\">(</span><span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"]&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">error</span> <span class=\"s2\">\"MY ERROR\"</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">sepBy</span> <span class=\"o\">(</span><span class=\"n\">categoryParser</span> <span class=\"bp\">`</span><span class=\"n\">kvbare</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\"]&gt;\"</span>\n</code></pre></div>\n<p>You will also need to import <code>import Lean.Parser</code>.<br>\nThen, the error message will be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">MY</span> <span class=\"n\">ERROR</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"o\">]</span><span class=\"bp\">&gt;'</span> <span class=\"n\">or</span> <span class=\"n\">string</span> <span class=\"n\">literal</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 255880662,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633190859
    },
    {
        "content": "<p>Thanks a lot, the snippets and the pointer to the example are very helpful.</p>",
        "id": 255881006,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633191242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 255881040,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633191249
    }
]