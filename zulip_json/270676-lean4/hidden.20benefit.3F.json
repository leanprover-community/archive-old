[
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> wrote this function some time ago:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">αs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">αs.get'</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Tuple.unit</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.nth</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and i was wondering why he did not write it instead as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">αs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">αs.get'</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tuple.unit</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.nth</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is cleaner. Is there some hidden benefit I am unaware of?</p>",
        "id": 275013888,
        "sender_full_name": "Joseph O",
        "timestamp": 1647023286
    },
    {
        "content": "<p>Does the latter declaration typecheck? When Lean unifies within the cases of a match I think it only unifies the parameters that are within the match. I'm not sure whether we need to unify against <code>αs</code> here to get it to compile</p>",
        "id": 275015089,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647023849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/hidden.20benefit.3F/near/275015089\">said</a>:</p>\n<blockquote>\n<p>Does the latter declaration typecheck? When Lean unifies within the cases of a match I think it only unifies the parameters that are within the match. I'm not sure whether we need to unify against <code>αs</code> here to get it to compile</p>\n</blockquote>\n<p>The second one typechecks</p>",
        "id": 275015327,
        "sender_full_name": "Joseph O",
        "timestamp": 1647023981
    },
    {
        "content": "<p>Huh, cool :D I don't think there's any difference then</p>",
        "id": 275016008,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647024361
    },
    {
        "content": "<p>Ah ok. Is it some sort of style then, because I have seen other people writing functions in this style as well.</p>",
        "id": 275017484,
        "sender_full_name": "Joseph O",
        "timestamp": 1647024947
    },
    {
        "content": "<p>I guess the implicit matching is only against the parameters to the right of the colon (I only forget the precise changes from Lean 3 to Lean 4 here). But in Lean 4 it is also only a matter of style and syntactic sugar, while in 3 there was an actual distinction (you couldn't match on something to the left of the colon)</p>",
        "id": 275017829,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647025047
    },
    {
        "content": "<p>Ah I see.<br>\nThat makes sense</p>",
        "id": 275018032,
        "sender_full_name": "Joseph O",
        "timestamp": 1647025102
    },
    {
        "content": "<p>If I'm not mistaken, this is a recent change, it didn't use to work</p>",
        "id": 275018181,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647025147
    },
    {
        "content": "<p>Do matches now unify everything in context instead of just the match parameters?</p>",
        "id": 275018292,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647025196
    },
    {
        "content": "<p>Yes <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-02-17\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-02-17</a></p>",
        "id": 275018618,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647025284
    },
    {
        "content": "<p>It's going to take a while to learn to write things in Lean 4 that in Lean 3 I was trained against expecting should work!</p>",
        "id": 275020796,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647026052
    },
    {
        "content": "<p>We have been improving the dependent pattern matching in Lean 4 since March of 2021. Many of the improvements appeared after <span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> pointed out he had to use too many <code>_</code>s in his definitions. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">balanceRR</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">hiddenTree</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">almostNode</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">HR</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RR</span> <span class=\"n\">left</span> <span class=\"n\">y</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">HR</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RR</span> <span class=\"n\">left</span> <span class=\"n\">y</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LR</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Leaf</span><span class=\"o\">,</span> <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">Leaf</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, we just have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">balanceRR</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">hiddenTree</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">almostNode</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span><span class=\"o\">,</span>    <span class=\"n\">HR</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RR</span> <span class=\"n\">left</span> <span class=\"n\">y</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LR</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Leaf</span><span class=\"o\">,</span>    <span class=\"n\">HB</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">Leaf</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275031484,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647031496
    }
]