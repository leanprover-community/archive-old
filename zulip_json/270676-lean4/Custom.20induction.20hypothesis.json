[
    {
        "content": "<p>How to use induction with custom hypothesis that does not represent an induction hypothesis?<br>\nHere is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ind2</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₁</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">ind2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Where am I supposed to use <code>hn</code>?</p>",
        "id": 284392601,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1653932587
    },
    {
        "content": "<p>I think you're supposed to move it into the motive if you want it to be part of the induction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ind2</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₁</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">ind2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 284394075,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1653933932
    },
    {
        "content": "<p>It works, but I'm not very happy with that solution. The hypothesis <code>hn</code> should be unrelated to <code>P</code> (motive). Making it a part of <code>P</code> forces us to needlessly add constraints to each induction hypothesis. It doesn't allow hypotheses to cover numbers for which <code>hn</code> does not hold (for example, it doesn't allow us to have hypothesis <code>h₃ : ∀ (n : Nat), n &lt; 10 → P n</code>).</p>",
        "id": 284397122,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1653936769
    },
    {
        "content": "<p>I agree in that I don't think a custom induction principle is the play here. The way you wrote it, <code>n &lt; 2</code> is a minor premise; how are you expecting it to be used?</p>",
        "id": 284407185,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1653945678
    },
    {
        "content": "<p>Do you also get an error \"tactic 'introN' failed, insufficient number of binders\" there?</p>",
        "id": 284594600,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654080872
    },
    {
        "content": "<p>If we give <code>n &lt; 2</code> a name in the statement of <code>ind2</code> (for example <code>(h₃ : n &lt; 2)</code>), then I am expecting <code>induction</code> to create three new goals: goal <code>h₁</code> for <code>P 0</code>, goal <code>h₂</code> for <code>P 1</code> and goal <code>h₃</code> for <code>n &lt; 2</code>. But instead, <code>induction</code> gives the error: <code>tactic 'introN' failed, insufficient number of binders</code></p>\n<p>Even though <code>n &lt; 2</code> is not of the form <code>P n</code> or <code>(... → P n)</code>, I don't see what prevents <code>induction</code> to create a new goal for it. An alternative way would be to revert everything except <code>n</code> and <code>hn</code> (assuming there are other assumptions), then use <code>apply ind2</code>, provide the motive explicitly (in case the elaborator cannot figure it out), and finally re-introduce the reverted assumptions in each subgoal created by <code>apply</code>. I would like <code>induction</code> to save me from this effort and I think this feature would be nice to have in Lean 4.</p>",
        "id": 284595703,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1654081490
    },
    {
        "content": "<p>That's definitely a bug, <code>induction</code> should never try to introduce more binders than it has available...</p>",
        "id": 284596562,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654082075
    },
    {
        "content": "<p>Maybe <code>ind2</code> is just not in the form that <code>induction</code> expects, but if so, <code>induction</code> should give another error</p>",
        "id": 284596884,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654082297
    },
    {
        "content": "<p>(Note that <code>revert hn; refine ind2 ?_ ?_ n</code> works perfectly fine)</p>",
        "id": 284596916,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654082316
    },
    {
        "content": "<p>I'd be happy if we could call it a bug, but I'm afraid it's just an unimplemented feature, since it doesn't work in Lean 3 either. Nevertheless, I think it would be a nice feature to have (and I also think the support for this use case isn't too hard to implement).</p>",
        "id": 284984267,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1654354827
    }
]