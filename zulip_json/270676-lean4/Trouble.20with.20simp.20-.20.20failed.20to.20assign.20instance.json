[
    {
        "content": "<p>I'm having a problem with <code>simp</code> tactic as it does not want to use certain theorem because of an error  <code>failed to assign instance</code>. </p>\n<p>I did some investigation and the problem is that I have two instances,  <code>SemiHilbert.toVec</code> and  <code>instVecℝ</code>, that fails to be proven equal, i.e. <code>isDefEq</code> evaluates to false inside of <code>simp</code> tactic.</p>\n<p>The weird thing is that outside of <code>simp</code> tactic the <code>isDefEq</code> evaluates to true. The problem is that <code>whnf</code> inside of the function <code>synthesizeArgs</code>(in  Lean/Meta/Tactic/Simp/Rewrite.lean) does not reduce  either <code>SemiHilbert.toVec</code>  or <code>instVecℝ</code>, but calling <code>whnf</code> on these in a simple file reduces both to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Vec.mk</span> <span class=\"n\">instVecℝ.proof_1</span> <span class=\"n\">instVecℝ.proof_2</span> <span class=\"n\">instVecℝ.proof_3</span> <span class=\"n\">instVecℝ.proof_4</span>\n</code></pre></div>\n<p>Therefore there must be some special transparency setting when running <code>simp</code> so that <code>whnf</code> does not reduce these instances. Is that intended behavior? Unfortunately, I was unable simplify this problem to a small example.</p>",
        "id": 261118925,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636628483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please.  In general, type class search uses reducible transparency, so it won't reduce <code>def</code>s but only <code>abbrev</code>s.</p>",
        "id": 261119521,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636628897
    },
    {
        "content": "<p>Yes I will try to produce MWE, but I was unable to do so without copy pasting few hundreds of lines of code.</p>",
        "id": 261119620,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636628973
    },
    {
        "content": "<p>I have managed to nail down the problem, here is the mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Sub</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec'</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">differential</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">differential_of_linear</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">differential</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Vec'.toVec</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">done</span> <span class=\"c1\">-- failed to assign instance</span>\n</code></pre></div>",
        "id": 261132501,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636636836
    },
    {
        "content": "",
        "id": 261132507,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636636841
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 261132512,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636636842
    },
    {
        "content": "<p>In your example, the two instances are indeed different.  <code>inst : Vec X</code> and <code>Vec'.toVec instVec'</code> are not defeq.</p>",
        "id": 261136368,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636638837
    },
    {
        "content": "<p>Note that in practice this normally won't be a problem because the <code>Vec'</code> instance will be built from the <code>Vec</code> instance in a sensible way, and the definition of <code>differential_of_linear</code> won't be <code>sorry</code></p>",
        "id": 261137830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636639618
    },
    {
        "content": "<p>but it could well be that the simplifier runs with a reducibility setting that doesn't expand the definition of <code>differential_of_linear</code>, yeah</p>",
        "id": 261137893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636639668
    },
    {
        "content": "<blockquote>\n<p>the Vec' instance will be built from the Vec instance in a sensible way</p>\n</blockquote>\n<p>What do you mean by that? Using <code>extends</code> is not a sensible way of doing it?</p>",
        "id": 261138043,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636639743
    },
    {
        "content": "<p>How can I change the above code such that the second example is solved by <code>simp</code>?</p>",
        "id": 261138200,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636639842
    },
    {
        "content": "<p>I'm talking about instances of <code>Vec'</code>. Your MWE is too trivial to have interesting examples but in general, if you have instances of both <code>Vec X</code> and <code>Vec' X</code> then you would want to arrange that the fields of the <code>Vec' X</code> instance that came from <code>Vec X</code> are defeq to the corresponding fields of the <code>Vec X</code> instance.</p>",
        "id": 261138406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636639945
    },
    {
        "content": "<p>Sorry, it's not <code>differential_of_linear</code> that's the problem, it's <code>differential</code>.</p>",
        "id": 261138421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636639957
    },
    {
        "content": "<p>I guess it should work for instance if you make <code>differential</code> a <code>def</code> like <code>def differential {X Y : Type} [Vec X] [Vec Y] (f : X → Y) (x dx : X) : Y := f x</code></p>",
        "id": 261138499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640018
    },
    {
        "content": "<p>Maybe <code>simp</code> won't do the rewrite for you, but you could do it by hand at least.</p>",
        "id": 261138628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640075
    },
    {
        "content": "<blockquote>\n<p>I guess it should work for instance if you make differential a def like def differential {X Y : Type} [Vec X] [Vec Y] (f : X → Y) (x dx : X) : Y := f x</p>\n</blockquote>\n<p>It does not work for me.</p>",
        "id": 261138635,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636640079
    },
    {
        "content": "<p>In your current version, the last <code>example</code> is just not provable at all</p>",
        "id": 261138655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640095
    },
    {
        "content": "<p>oh maybe it is provable... sorry, this example is very confusing <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 261138812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640166
    },
    {
        "content": "<p>OK, let me try again.</p>",
        "id": 261139088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640308
    },
    {
        "content": "<p><code>simp</code> doesn't do this.</p>",
        "id": 261139094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640313
    },
    {
        "content": "<p>Think about <code>Vec</code> as a vector space and <code>Vec'</code> for example as a finite dimensional vector space. I didn't put full definitions here for brevity.</p>",
        "id": 261139098,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636640315
    },
    {
        "content": "<p>However, it's usually not a problem because we don't have instances like <code>\ninstance {X} [Vec X] : Vec' X := ⟨⟩</code> in the real world, and when we want to apply <code>simp</code> to something like <code>add_zero</code> at a specific type <code>T</code> where we might have a funny \"non-standard\" instance for <code>add_zero_class T</code>, that funny instance will be defeq to the standard one because both of them will reduce to constructor applications with defeq fields.</p>",
        "id": 261139370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640452
    },
    {
        "content": "<p>Not every vector space is finite dimensional, so this is still not a real example</p>",
        "id": 261139431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640487
    },
    {
        "content": "<p>Ohh, the culprit was  <code>instance {X} [Vec X] : Vec' X := ⟨⟩</code> ok then I made incorrect mwe :)</p>",
        "id": 261140062,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636640777
    },
    {
        "content": "<p>I think for your real situation the question comes down to what reducibility level <code>simp</code> uses to compare instance arguments of lemmas to the synthesized ones. Note that (at least in Lean 3) this is all a bit silly because if you stated your <code>simp</code> lemma using <code>{}</code> binders for the <code>Vec</code> arguments, then <code>simp</code> would just infer their values from the ones that appear in the expression to be simplified, which is generally what you want anyways. I think some of this stuff works differently in Lean 4.</p>",
        "id": 261140073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640783
    },
    {
        "content": "<p>Ok consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">differential</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">differential_of_linear</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">differential</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Vec'</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">differential</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Vec'.toVec</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 261140314,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636640899
    },
    {
        "content": "<p>We have some versions of lemmas in mathlib that are formulated to take instance arguments in <code>{}</code> binders rather than <code>[]</code> ones, but usually the reason is that we want to handle cases where the instance that appears in an expression is genuinely different from the synthesized one, or where there is no synthesized one... not where the two instances are actually defeq, but at the wrong reducibility level</p>",
        "id": 261140363,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636640927
    },
    {
        "content": "<p>It still fails and I do not have a general instance <code>instance {X} [Vec X] : Vec' X := ⟨⟩</code> but only a specialized one for <code>Float</code>.</p>",
        "id": 261140378,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636640936
    },
    {
        "content": "<p>Sorry, I think I got some of the stuff wrong here.</p>\n<ol>\n<li>The instances are defeq after all.  The <code>instance [inst : Vec X] : Vec' X := ⟨⟩</code> is <code>@Vec' X inst</code> under the hood.  I mistook it for <code>⟨⟨⟩⟩</code>.</li>\n<li>It is weird that simp tries to synthesize this instance in the first place.  The instance should have already been assigned via unification.  There is an explicit check for this in the simp code.</li>\n</ol>",
        "id": 261140441,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636640980
    },
    {
        "content": "<p>I don't know, but it works in Lean 3 now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">-- extends Add X, Inhabited X</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">differential</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">differential_of_linear</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">differential</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">differential</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Vec'</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">differential</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Vec'.to_Vec</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">dx</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 261140645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636641092
    },
    {
        "content": "<p>Yeah does not work with Lean 4, I'm on <code>nightly-2021-11-10</code></p>",
        "id": 261140770,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636641146
    },
    {
        "content": "<p>The simplifier trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">differential_of_linear</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Vec</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 261140812,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636641180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20with.20simp.20-.20.20failed.20to.20assign.20instance/near/261140441\">said</a>:</p>\n<blockquote>\n<p>Sorry, I think I got some of the stuff wrong here.</p>\n<ol>\n<li>The instances are defeq after all.  The <code>instance [inst : Vec X] : Vec' X := ⟨⟩</code> is <code>@Vec' X inst</code> under the hood.  I mistook it for <code>⟨⟨⟩⟩</code>.</li>\n<li>It is weird that simp tries to synthesize this instance in the first place.  The instance should have already been assigned via unification.  There is an explicit check for this in the simp code.</li>\n</ol>\n</blockquote>\n<p>The <code>(← isDefEq x val)</code> in  the function <code>Lean.Meta.Simp.synthesizeArgs</code> does not seem to produce correct value in this case.</p>",
        "id": 261141323,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636641482
    },
    {
        "content": "<blockquote>\n<p>There is an explicit check for this in the simp code.</p>\n</blockquote>\n<p>Oh I take it back.  There is a check for \"is this mvar already assigned\" there.  But right above it is: if the argument is instance-implicit, synthesize the instance anyhow...</p>",
        "id": 261141817,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636641768
    },
    {
        "content": "<p>So is this a bug or a feature? :)</p>",
        "id": 261152371,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636646876
    },
    {
        "content": "<p>Simply <a href=\"https://github.com/lecopivo/lean4/commit/dd1f50a19b4121c1c3eacc9beef7b9943c53f13d\">fixing</a> the transparency settings solves the problem.</p>\n<p>I do not fully understand the definition of \"definitional equality\" but should the result of <code>isDefEq</code> depend on transparency settings? If not then the transparency fix should be applied on the level of <code>isDefEq</code>.</p>",
        "id": 261230744,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1636710410
    }
]