[
    {
        "content": "<p>Say we have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Thing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">n₁</span> <span class=\"bp\">≠</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>How would one go about proving this theorem?</p>\n<p>Using <code>eq_of_heq</code> didn't work for me.</p>",
        "id": 261970780,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637260851
    },
    {
        "content": "<p>It's not provable</p>",
        "id": 261977164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637263502
    },
    {
        "content": "<p>It only really makes sense to care about <code>h : HEq t₁ t₂</code> if you also know that <code>n₁ = n₂</code></p>",
        "id": 261977297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637263562
    },
    {
        "content": "<p>Huh, why is that? Shouldn't <code>Heq t₁ t₂</code> allow me to derive <code>n₁ = n₂</code>,  which is then a contradiction to <code> n₁ ≠ n₂</code>?</p>",
        "id": 261988218,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637268387
    },
    {
        "content": "<p>No, you can only deduce <code>Thing n₁ = Thing n₂</code></p>",
        "id": 261988558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637268575
    },
    {
        "content": "<p>Do you mean <code>t₁ = t₂</code>? I thought type level equalities like <code>Thing n₁ = Thing n₂</code> weren't possible?</p>",
        "id": 261988754,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637268679
    },
    {
        "content": "<p>Nope!</p>",
        "id": 261988779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637268693
    },
    {
        "content": "<p>You have equality at any type, including <code>Type</code></p>",
        "id": 261989023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637268791
    },
    {
        "content": "<p>It's just not very productive to think about equalities of types usually</p>",
        "id": 261989036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637268799
    },
    {
        "content": "<p>Terms of <code>Thing</code> don't use <code>n</code>, so it's possible for a concrete implementation to erase it from the representation.  In fact, it's possible for <code>Int = Thing 0 = Thing 1 = Thing 2 = ...</code>.  It's also possible that they're all not equal to each other in a concrete implementation, so that's why you can't prove it either way.</p>",
        "id": 261989164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637268853
    },
    {
        "content": "<p>Ok, I think I should heed the common advice and avoid <code>HEq</code> then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 261989184,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637268864
    },
    {
        "content": "<p>Sigma types (that includes just putting <code>n</code> into the structure as a field) are sort of a way around this.</p>",
        "id": 261989330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637268950
    }
]