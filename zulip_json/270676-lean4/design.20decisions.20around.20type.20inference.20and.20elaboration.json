[
    {
        "content": "<p>It seems very strange to me that I keep having to do <code>by { exact foo }</code> rather than <code>foo</code> and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo'</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"n\">foo'</span>\n</code></pre></div>\n<p>rather than <code>foo</code> in order to get the type inferencer to accept my code.  Is this a sign that I'm doing something wrong?  Is this a deliberate design decision, to make <code>let x := y in x</code> and <code>by { exact y }</code> be treated differently from <code>y</code>?</p>",
        "id": 231385046,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616447291
    },
    {
        "content": "<p>In Lean 3, <code>by exact X</code> and <code>X</code> were elaborated in slightly different ways, meaning that sometimes one would not work but the other would. There are around 87 occurrences of <code>by exact</code> in mathlib, which I guess is rare given that it's now half a million lines of code.</p>",
        "id": 231389334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616449369
    },
    {
        "content": "<p>Could you say more precisely in what context <code>foo</code> is showing up, such that this difference is visible?</p>",
        "id": 231390806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616450110
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Procat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≈&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~&gt;₁</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≈&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">~&gt;₁</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'g'</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span> <span class=\"bp\">*</span> <span class=\"n\">g'</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'g'c</span> <span class=\"o\">:=</span> <span class=\"n\">f'g'</span> <span class=\"bp\">⨾</span> <span class=\"n\">C.compose</span>\n  <span class=\"n\">f'g'c</span>\n</code></pre></div>\n<p>works fine.  Inlining <code>f'g'</code> into <code>f'g'c</code> breaks things.  Inlining <code>f'g'c</code> breaks things.  I suppose this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Procat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'g'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≈&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~&gt;₁</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≈&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">~&gt;₁</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'g'c</span> <span class=\"o\">:=</span> <span class=\"n\">f'g'</span> <span class=\"bp\">⨾</span> <span class=\"n\">C.compose</span>\n  <span class=\"n\">f'g'c</span>\n</code></pre></div>\n<p>Replacing <code>by { exact f }</code> with <code>f</code> (and similarly for <code>g</code>) breaks things.</p>",
        "id": 231391186,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616450284
    },
    {
        "content": "<p>I strongly suspect this is about typeclass resolution, perhaps around the order in which default instances are tried.</p>",
        "id": 231391235,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616450317
    }
]