[
    {
        "content": "<p>I was looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html\">https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html</a> and thought it would be nice if instead of showing the generated <code>ParserDescr</code> declarations, it showed the actual syntax of the tactic/etc. being defined.  For example, even the direct source code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rewriteSeq</span><span class=\"o\">)</span> <span class=\"s2\">\"rewrite \"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>is (seems to be?) more useful than <code>def Lean.Parser.Tactic.rewriteSeq : Lean.ParserDescr</code>.</p>\n<p>Is this plausible/desirable/feasible?</p>",
        "id": 283110653,
        "sender_full_name": "Raghuram",
        "timestamp": 1653072079
    },
    {
        "content": "<p>If it is possible right now I do not know how to do it (otherwise I would already have done it). That does however not mean it cannot be done. The elaborator for these <code>syntax</code> declarations would have to store the information about the original syntax somewhere <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> so doc-gen can fetch it.</p>",
        "id": 283111548,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653072526
    },
    {
        "content": "<p>The ParserDescr definitions are easy to parse, there's no need to keep the original syntax around.</p>",
        "id": 283115149,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653074348
    },
    {
        "content": "<p>Should we have delaborators for <code>ParserDescr</code> then?</p>",
        "id": 283115817,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653074792
    },
    {
        "content": "<p>So i started on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">StxUnexpander</span> <span class=\"o\">:=</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">UnexpandM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">stx</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandCat</span> <span class=\"o\">:</span> <span class=\"n\">StxUnexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ParserDescr.cat</span> <span class=\"bp\">$</span><span class=\"n\">cat</span> <span class=\"bp\">$</span><span class=\"n\">prec</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">prec</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">prec.raw</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">cat</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">prec</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>But I'm running into the issue that Lean does not like the antiquotations this way of course because they could also be interpreted as \"$cat with this stx category\". Is there a way to create this syntax node nicely none the less? Or do I have to write some manual <code>Syntax.node</code> stuff here?</p>",
        "id": 290611288,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658579183
    },
    {
        "content": "<p>You can work around that by making the kind of the first antiquotation explicit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"n\">cat</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">prec</span>\n</code></pre></div>",
        "id": 290612435,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658580831
    }
]