[
    {
        "content": "<p>I'm a little confused why the goal is in my local context in this metaprogram:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"ohno\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">LocalContext</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getLCtx</span>\n    <span class=\"n\">for</span> <span class=\"n\">decl</span> <span class=\"k\">in</span> <span class=\"n\">ctx</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">decl.toExpr</span>\n      <span class=\"k\">let</span> <span class=\"n\">expr_t</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">expr</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"+ local decl: </span><span class=\"se\">\\\"</span><span class=\"s2\">{decl.userName}</span><span class=\"se\">\\\"</span><span class=\"s2\"> === {expr} ::: {expr_t}\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ohno</span>\n</code></pre></div>\n<p>Logs the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">+</span> <span class=\"kn\">local</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"s2\">\"test\"</span> <span class=\"bp\">===</span> <span class=\"n\">_uniq.4025</span> <span class=\"o\">:::</span> <span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">Nat.zero</span>\n</code></pre></div>\n<p>Why? I thought the local context is exactly the assumptions I can use?</p>",
        "id": 316598497,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1671374510
    },
    {
        "content": "<p>It's an auxDecl and you shouldn't use it unless you are defining something recursive. You can filter such things out by checking  <code>LocalDecl.isImplementationDetail</code>.</p>",
        "id": 316599734,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671375081
    },
    {
        "content": "<p>(I've been wrestling with these things recently <a href=\"https://github.com/leanprover-community/mathlib4/issues/1061\">https://github.com/leanprover-community/mathlib4/issues/1061</a> )</p>",
        "id": 316599847,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671375125
    }
]