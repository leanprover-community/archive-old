[
    {
        "content": "<p>I'm trying to debug why the <code>Eq.subst ha</code> doesn't work in this proof, but the trace output is not very helpful - or at least I don't know how to make it helpful...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cong_fst_arg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.subst</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>\n<p>The Eq.subst fails saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"n\">a'</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is it not able to reach inside the function call and substitute <code>a</code> for <code>a'</code> ? Because it could do that in lean3, here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cong_fst_arg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301550529,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664495360
    },
    {
        "content": "<p>My guess is that this is a problem with high order unification e.g. filling hole <code>?m.33 a'</code> where <code>?m.33</code> is a function. This is a hard problem which often does not have a unique solution.</p>\n<p>It works, if you specify the motive explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cong_fst_arg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.subst</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>\n<p>Let's try to prove the theorem using this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The naive attempt fails with a very similar unification problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- tactic 'apply' failed, failed to unify ?m.133 a = ?m.133 a' with f a b = f a' b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subst</span> <span class=\"n\">ha</span>\n</code></pre></div>\n<p>It works when you specify <code>f</code> explicitly: <code>apply subst ha (f := λ x =&gt; f x b)</code>.</p>\n<p>I deal with this problem all the time. My usual work around is to state variants of <code>subst</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subst_parm1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>then the original theorem is solvable by <code>apply subst_parm1 ha</code>. </p>\n<hr>\n<p>I do not really understands the inner workings of high order unification, but a good rule of thumb is that the pattern  <code>?m.33 a'</code> has to \"match syntactically\" i.e. all the parts of the function <code>?m.33</code> have to be left of <code>a</code>. Therefore <code>f a b</code> does not match <code>?m.33 a'</code> because the only solution <code>λ x =&gt; f x b</code> is left and right of <code>a</code>.</p>\n<p>It would be great if someone who really understands how this works in Lean would comment on this.</p>\n<p>Also any improvement to high order unification would be highly appreciated from my side. For example, this exact problem is making automatic differentiation involving high rank tensors quite difficult.</p>",
        "id": 301582099,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664521425
    },
    {
        "content": "<p>I have found the <code>set_option trace.Meta.isDefEq true</code> to be useful, It helped me figure out the required second motive in this case which was tricky (no a' on the right hand side of the proposition).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cong_two_args</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.subst</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.subst</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>",
        "id": 301730866,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664570461
    },
    {
        "content": "<p>I wonder if it has something to do with β-conversion  <code>(λx =&gt; f x) a = f a</code>?  The explanation of the <code>cong_fst_arg</code> proof in hglv is as follows:</p>\n<blockquote>\n<p>The <code>Eq.subst</code> instance we use has <code>?a := a</code>, <code>?b := a'</code>, and <code>?p := (λ x =&gt; f a b = f x b)</code>:<br>\n<code>lean\n    a = a' → (λx =&gt; f a b = f x b) a → (λx =&gt; f a b = f x b) a'\n    </code><br>\n    In β-reduced form:<br>\n<code>lean\n    a = a' → f a b = f a b → f a b = f a' b\n    </code><br>\n    The lemma's first assumption matches the hypothesis <code>ha : a = a'</code>, which is passed as an argument in the<br>\nfirst apply invocation. The lemma's second assumption is a trivial equality that can be proved by<br>\napply <code>Eq.refl</code> or <code>rfl</code>. The lemma's conclusion matches the goal’s target. Notice how a higher-order<br>\nvariable (e.g., <code>?p</code>) can represent an arbitrary context (e.g., <code>f . . . b</code>) around a term (e.g.,<br>\n<code>a</code> or <code>a'</code>). This works because <code>apply</code> unifies up to computation, including β-conversion.</p>\n</blockquote>\n<p>This phrase <code>can represent an arbitrary context (e.g., </code>f . . . b<code>) around a term</code> might be important, does this mean lean3 β-conversion can convert <code>(λx =&gt; f x n₁ ... nₖ) a = f a</code> n₁ ... nₖ<code> and perhaps lean4 cannot?  And this is why it could not handle my </code>f a b<code> function?  I could understand in general this is hard, the second motive I have above in </code>cong_two_args<code> is interesting </code>(motive := λ x =&gt; f a b = f a x)` because it is not converting the first parameter, it is converting the second!, So for lean to find this out it has to kind of try every combination of parameters which could be slow.  Perhaps lean4 doesn't want to be slow doing these kinds of expensive searches?  Just a wild guess on my part though...</p>",
        "id": 301738874,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664574451
    },
    {
        "content": "<p>I believe it is a bug in <code>elabAsElim</code>. It is leaving some arguments unevaluated before calculating the motive.</p>",
        "id": 301760970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664590923
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/elabAselim.20issue/near/301653783\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/elabAselim.20issue/near/301653783</a></p>",
        "id": 301761136,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664591103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Sorry for not elaborating, it's not just that. Here's the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">@[elabAsElim]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Eq.subst'</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">@</span><span class=\"n\">Eq.subst</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Eq.subst</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Eq.subst'</span> <span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c1\">-- goal is f a = f a', should be f a = f a</span>\n</code></pre></div>\n<p>I narrowed the issue down to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"test1\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabAppArgs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">Eq.subst'</span><span class=\"o\">)</span>\n    <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">stx</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.getMainTarget</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"n\">false</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← instantiateMVars e}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test2\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabAppArgs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">Eq.subst'</span><span class=\"o\">)</span>\n    <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">expr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.getMainTarget</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"n\">false</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← instantiateMVars e}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test1</span> <span class=\"n\">h</span> <span class=\"c1\">-- @Eq.subst'.{?u.31628} ?m.31642 (fun (x : ?m.31642) =&gt; f a') ?m.31644 ?m.31645 ?m.31646 ?m.31647</span>\n  <span class=\"n\">test2</span> <span class=\"n\">h</span> <span class=\"c1\">-- @Eq.subst'.{?u.31611} α (fun (x : α) =&gt; f x) a a' h ?m.31670</span>\n</code></pre></div>\n<p>It seems that the elaboration of all the arguments other than the motive and targets are delayed, which makes the kabstract fail to find anything because we need to use <code>h</code> in this example to determine that the target is <code>a'</code>. I looked into the lean 3 code and I think it has some auxiliary check of the dependencies between the arguments in the original type to figure out which one is the major premise (which should be elaborated eagerly) and which ones are minor premises (which we should delay until after we have the motive)</p>",
        "id": 301766172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664597039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for investigating. Let's create an issue with all these notes and analysis. I will take a look after I am done with the compiler. I am assuming this is not blocking anybody. One can use <code>rw</code>/<code>simp</code> in tactic mode, and <code>▸</code> in term mode.</p>",
        "id": 301827473,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664633810
    }
]