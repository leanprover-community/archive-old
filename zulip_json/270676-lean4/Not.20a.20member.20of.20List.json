[
    {
        "content": "<p>I am trying to prove a theorem and came across a goal of the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I can easily prove the version without the negations, but I cannot think of a way to prove this one. Can someone give some guidance on how to prove this simple statement?</p>",
        "id": 278488600,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1649623274
    },
    {
        "content": "<p>I would hope <code>by simp</code> does it</p>",
        "id": 278488760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649623471
    },
    {
        "content": "<p>the non-automated version is to apply <code>mt</code> to turn it into <code>x \\in [y] -&gt; x = y</code>, and then apply a theorem called List.mem_single or something which says <code>x \\in [y] &lt;-&gt; x = y</code></p>",
        "id": 278488791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649623539
    },
    {
        "content": "<p><code>List.Mem</code> is an inductive predicate with two constructors. You can also use pattern matching to prove this goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `cases` tactic version</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hne</span> <span class=\"n\">hin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hin</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"c1\">-- `match` version</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"n\">hin</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hin</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">List.Mem.head</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hne</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- `match` refined `hne` type to `x ≠ x`</span>\n    <span class=\"c1\">-- Remark `match` can figure out that the case `List.Mem.tail` is \"unreachable\"</span>\n\n<span class=\"c1\">-- Compressed version of the previous example.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"o\">(</span><span class=\"n\">List.Mem.head</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hne</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 278489757,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649624733
    }
]