[
    {
        "content": "<p>Has there been consideration of a feature like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"kd\">noncomputable</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>meaning</p>\n<ul>\n<li><code>Foo.y</code> becomes noncomputable</li>\n<li><code>Foo.mk x y</code> is computable as soon as <code>x</code> is</li>\n<li>A <code>Foo</code> does not store the value <code>y</code> at runtime</li>\n</ul>\n<p>It's possible to emulate this with a <a href=\"https://leanprover-community.github.io/mathlib_docs/data/erased.html#erased\"><code>Erased</code></a> type, but at the cost of some definitional equalities.</p>",
        "id": 224354416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611852323
    },
    {
        "content": "<p>(I just noticed that <code>erased.out</code> isn't marked <code>noncomputable</code> in the doc gen. We should probably do something about that)</p>",
        "id": 224355634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611852443
    },
    {
        "content": "<p>What is the type of <code>Foo.mk</code>? Is it possible to define a function with the same computability behavior as the proposed <code>Foo.mk</code> constructor?</p>",
        "id": 224355945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611852559
    },
    {
        "content": "<p>It might be easier to actually have an <code>Erased</code> type constructor. It can't really be a type alias because then the VM could confuse <code>A</code> and <code>Erased A</code> if a lean function abuses the defeq</p>",
        "id": 224356262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611852677
    },
    {
        "content": "<p>Right, I don't know how Lean determines which parts of the program are runtime relevant, but if it's based entirely on type information, then a special <code>structure Erased A where val : A</code> which gets erased would already be helpful</p>",
        "id": 224357778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611853248
    },
    {
        "content": "<p>The key function for this seems to be <a href=\"https://github.com/leanprover/lean4/blob/master/src/library/compiler/util.cpp#L401-L414\">https://github.com/leanprover/lean4/blob/master/src/library/compiler/util.cpp#L401-L414</a> . I can't find any function along these lines in lean, although there is <code>Arg.irrelevant</code> and <code>IRType.irrelevant</code> for tracking it</p>",
        "id": 224360188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611854205
    }
]