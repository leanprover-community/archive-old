[
    {
        "content": "<p>What is going on here? Why does the match not hit the <code>..</code> case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"s2\">\" ♫ \"</span> <span class=\"o\">((</span><span class=\"n\">ident</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" .. \"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab foobar]</span> <span class=\"kd\">def</span> <span class=\"n\">elabFoobar</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">$</span><span class=\"n\">i1</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">i2</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"idents\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"dots\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no match\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- \"idents\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"bp\">..</span>\n<span class=\"c1\">-- \"no match\"</span>\n<span class=\"c1\">-- why isn't this \"dots\"?</span>\n</code></pre></div>",
        "id": 287221448,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656004502
    },
    {
        "content": "<p>I suppose I should just write separate syntax commands for the different branches.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"s2\">\" ♫ \"</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foobar'</span><span class=\"o\">)</span> <span class=\"s2\">\" ♫ \"</span> <span class=\"s2\">\" .. \"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab foobar]</span> <span class=\"kd\">def</span> <span class=\"n\">elabFoobar</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">$</span><span class=\"n\">i1</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">i2</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"idents\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no match\"</span>\n\n<span class=\"kd\">@[commandElab foobar']</span> <span class=\"kd\">def</span> <span class=\"n\">elabFoobar'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"dots\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no match\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- \"idents\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"bp\">..</span>\n<span class=\"c1\">-- \"dots\", as expected</span>\n</code></pre></div>",
        "id": 287223765,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656005721
    },
    {
        "content": "<p>Short answer: you need to write <code>group(ident ident)</code>.  See <a href=\"https://github.com/leanprover/lean4/pull/1229\">lean4#1229</a></p>",
        "id": 287227944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656007743
    },
    {
        "content": "<p>The thing is that Lean 4 parsers have an <em>arity</em>: they do not just parse a single syntax object, but a whole array (and the size of the array is the arity).</p>",
        "id": 287228028,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656007796
    },
    {
        "content": "<p>So <code>ident</code> produces one syntax, <code>ident ident</code> produces two syntaxes, <code>ppLine</code> produces no syntaxes.</p>",
        "id": 287228119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656007825
    },
    {
        "content": "<p>Most of the code assumes that both sides of <code>&lt;|&gt;</code> have the same arity, that's why you ran into troubles here.</p>",
        "id": 287228234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656007895
    },
    {
        "content": "<p>another weird behavior I don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">baz</span><span class=\"o\">)</span> <span class=\"s2\">\" ♫ \"</span> <span class=\"n\">Lean.binderIdent</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab baz]</span> <span class=\"kd\">def</span> <span class=\"n\">elabBaz</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"underscore\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"ident\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no match\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- \"underscore\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- \"underscore\"</span>\n<span class=\"c1\">-- why doesn't this print \"ident\"?</span>\n</code></pre></div>",
        "id": 287240654,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656014159
    },
    {
        "content": "<p>If i switch the order of the match arms, then it behaves as I expect.</p>",
        "id": 287240740,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656014188
    },
    {
        "content": "<p>Indeed, if I switch the order of these match arms in mathlib4, a bunch of things break: <a href=\"https://github.com/leanprover-community/mathlib4/blob/20c6d70bd1300d2b8dea061731b3e011380b94c3/Mathlib/Init/ExtendedBinder.lean#L31-L35\">https://github.com/leanprover-community/mathlib4/blob/20c6d70bd1300d2b8dea061731b3e011380b94c3/Mathlib/Init/ExtendedBinder.lean#L31-L35</a></p>",
        "id": 287245563,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656016604
    },
    {
        "content": "<p>Is the <code>_</code> somehow also acting as a catch-all here?</p>",
        "id": 287245634,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656016641
    },
    {
        "content": "<p>My hypothesis was that this had something to do with <code>_</code> getting misinterpreted as a catch-all pattern, but the same problem happens if I use <code>~</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">binderIdent'</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"~\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">baz</span><span class=\"o\">)</span> <span class=\"s2\">\" ♫ \"</span> <span class=\"n\">binderIdent'</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab baz]</span> <span class=\"kd\">def</span> <span class=\"n\">elabBaz</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">~</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"squiggle\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">♫</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"ident\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no match\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"bp\">~</span>\n<span class=\"c1\">-- \"squiggle\"</span>\n\n<span class=\"bp\">♫</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- \"squiggle\"</span>\n<span class=\"c1\">-- why doesn't this print \"ident\"?</span>\n</code></pre></div>",
        "id": 287248287,
        "sender_full_name": "David Renshaw",
        "timestamp": 1656017919
    },
    {
        "content": "<p>The short answer is that quotation patterns do not check atoms such as <code>\"~\"</code> here, so you need to put the non-atom pattern first. There is some related discussion at <a href=\"https://github.com/leanprover/lean4/issues/638\">https://github.com/leanprover/lean4/issues/638</a>.</p>",
        "id": 287328051,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656076025
    }
]