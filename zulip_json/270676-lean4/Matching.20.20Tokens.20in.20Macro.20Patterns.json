[
    {
        "content": "<p>How do I match optional and alternating tokens in macro patterns? </p>\n<p>For example, I want to do something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span>  <span class=\"s2\">\"foo \"</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"bar \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"baz \"</span><span class=\"o\">)</span> <span class=\"s2\">\"ahoy\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">barz</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"ahoy!\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>foo?</code> matches the optional <code>\"foo\"</code> token and <code>barz</code> matches the <code>\"bar \"</code> or <code>\"baz \"</code> alternation. </p>\n<p>My current partial solutions is to define syntax kinds for the tokens and use them like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">fooTk</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo \"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">barzTk</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bar \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"baz \"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">fooTk</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">barzTk</span> <span class=\"s2\">\"ahoy\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">fooTk</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">barz</span><span class=\"o\">:</span><span class=\"n\">barzTk</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"ahoy!\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this doesn't work with pre-existing syntaxes that were not defined in this manner. That is, where no such token syntax kind exists. For example, the <code>:=</code>/<code>where</code> token alternation in the <code>class</code>/<code>structure</code> syntax (and the <code>class</code>/<code>structure</code> alternation itself).</p>",
        "id": 239007402,
        "sender_full_name": "Mac",
        "timestamp": 1621200244
    },
    {
        "content": "<p>You need to use separate patterns</p>",
        "id": 239007659,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621200527
    },
    {
        "content": "<p>Really?  But that can easily cause exponential blow up? That is, each optional token doubles the number of patterns, each token alternative of size n multiplies the number by n. In my current use case I have 2 optional tokens and 1 alternative of size 2. Thus, I would already need 8 of essentially the same pattern to match. And then I have to duplicate code across the matches as well.</p>",
        "id": 239008178,
        "sender_full_name": "Mac",
        "timestamp": 1621201050
    },
    {
        "content": "<p>is there a catch-all token kind so that you can do the secondary matching in a separate <code>match</code> statement?</p>",
        "id": 239010862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621203774
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span>  <span class=\"s2\">\"foo \"</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"bar \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"baz \"</span><span class=\"o\">)</span> <span class=\"s2\">\"ahoy\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">barz</span><span class=\"o\">:</span><span class=\"n\">stx</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">barz</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"bar!\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">baz</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"baz!\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239010929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621203850
    },
    {
        "content": "<p>(in rust, you would use the <code>$e:tt</code> macro matcher for this purpose, where tt means \"token tree\" and is roughly equivalent to lean's <code>Syntax</code>)</p>",
        "id": 239010969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621203912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20.20Tokens.20in.20Macro.20Patterns/near/239010862\">said</a>:</p>\n<blockquote>\n<p>is there a catch-all token kind so that you can do the secondary matching in a separate <code>match</code> statement?</p>\n</blockquote>\n<p>In fact, for these examples (and my uses cases) all I need is a syntax kind that catches all keywords/tokens. I don't need to catch complex multi-token syntaxes. Then I could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span>  <span class=\"s2\">\"foo \"</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"bar \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"baz \"</span><span class=\"o\">)</span> <span class=\"s2\">\"ahoy\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">tok</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">barz</span><span class=\"o\">:</span><span class=\"n\">tok</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"ahoy!\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239018364,
        "sender_full_name": "Mac",
        "timestamp": 1621211616
    },
    {
        "content": "<p>I think a way to match any <code>Syntax.atom</code>  would work for this?</p>",
        "id": 239018559,
        "sender_full_name": "Mac",
        "timestamp": 1621211775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20.20Tokens.20in.20Macro.20Patterns/near/239010929\">said</a>:</p>\n<blockquote>\n<p>something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">barz</span><span class=\"o\">:</span><span class=\"n\">stx</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How would this (matcher) work?  I thought that the category annotations (like <code>$bar:term</code>) only influence how the syntax in the pattern is <em>parsed</em>, and are completely ignored after that.  That is, <code>Syntax</code> objects don't store their category, so there's nothing to match on.</p>",
        "id": 239042765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621235206
    },
    {
        "content": "<p>The parser has already been specified, in the <code>syntax</code> rule. It just doesn't have an elaborator, and this says that when elaborating this term constructor, just take the syntax without further inspection. A lot of lean built in notations just skip the pattern match altogether and use <code>stx[0]</code>, <code>stx[1]</code> etc, but this is a middle ground where <code>foo</code> and <code>ahoy</code> are matched but <code>barz</code> is just a raw syntax</p>",
        "id": 239043200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621235495
    },
    {
        "content": "<p>Ah, now I see what you mean.  But it's still not clear to me how the parser could ever figure out how to parse <code>foo $barz:stx ahoy</code>.</p>",
        "id": 239043594,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621235761
    },
    {
        "content": "<p>What's preventing you from doing <code>declare_syntax_cat barz</code>?</p>",
        "id": 239043666,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621235781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20.20Tokens.20in.20Macro.20Patterns/near/239043594\">said</a>:</p>\n<blockquote>\n<p>Ah, now I see what you mean.  But it's still not clear to me how the parser could ever figure out how to parse <code>foo $barz:stx ahoy</code>.</p>\n</blockquote>\n<p>The <em>parsing</em> is already done, by <code>syntax  \"foo \"? (\"bar \" &lt;|&gt; \"baz \") \"ahoy\" : term</code>. That will produce a syntax tree like <code>node [atom \"foo\", atom \"bar\", atom \"ahoy\"]</code> when the parser does its thing. Then macro expansion kicks in, and the <code> `( $[$foo?]? $barz:stx ahoy)</code> pattern will match against this tree and bind <code>atom \"bar\"</code> to the <code>barz</code> variable (and <code>some (atom \"foo\")</code> to the <code>foo</code> variable), equivalent to approximately <code>let barz := stx[1]; let foo := if stx[0].isSome then none else some stx[0];</code>.</p>",
        "id": 239044509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20.20Tokens.20in.20Macro.20Patterns/near/239043666\">said</a>:</p>\n<blockquote>\n<p>What's preventing you from doing <code>declare_syntax_cat barz</code>?</p>\n</blockquote>\n<p>That was mentioned as a workaround, but it's a bit cumbersome (not to mention inefficient) to declare extensible syntax categories for every sub-parser; that makes the combinators kind of useless, and doesn't match the way lean itself does it.</p>",
        "id": 239044809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20.20Tokens.20in.20Macro.20Patterns/near/239044509\">said</a>:</p>\n<blockquote>\n<p>That will produce a syntax tree like <code>node [atom \"foo\", atom \"bar\", atom \"ahoy\"]</code> when the parser does its thing. Then macro expansion kicks in, and the <code> `( $[$foo?]? $barz:stx ahoy)</code> pattern will match against this tree and bind <code>atom \"bar\"</code> to the <code>barz</code> variable (and <code>some (atom \"foo\")</code> to the <code>foo</code> variable), equivalent to approximately <code>let barz := stx[1]; let foo := if stx[0].isSome then none else some stx[0];</code>.</p>\n</blockquote>\n<p>Ok, this operation makes sense. The syntax is ambiguous though, I would expect it to match a binary postfix operator <code>ahoy</code> with two arguments $foo and $barz (where barz is in the syntax category stx).</p>",
        "id": 239045308,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621236741
    },
    {
        "content": "<p>ah, I was assuming the example was just trying to have interesting combinators in it</p>",
        "id": 239045476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236843
    },
    {
        "content": "<p>I'm not sure how <code>\"foo\"?</code> is encoded in syntax, but just use whatever that encoding is</p>",
        "id": 239045598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236899
    },
    {
        "content": "<p>I believe that the <code>$[$foo]?</code> matcher is saying to match the syntax produced by the optional parser into an <code>Option Syntax</code></p>",
        "id": 239045689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236956
    },
    {
        "content": "<p>and that if then else on <code>stx[0]</code> was my guess at what it does</p>",
        "id": 239045768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621236986
    },
    {
        "content": "<p>probably the encoding is actually <code>node [stx]</code> vs <code>node []</code></p>",
        "id": 239045853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621237038
    },
    {
        "content": "<p>This is how you construct and destruct your foo bar ahoy term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">MonadRef.mkInfoFromRefPos</span>\n        <span class=\"n\">getCurrMacroScope</span>\n        <span class=\"n\">getMainModule</span>\n        <span class=\"n\">pure</span>\n            <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"o\">(</span><span class=\"n\">Name.mkStr</span> <span class=\"n\">Name.anonymous</span> <span class=\"s2\">\"termFooBarBazAhoy\"</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">Array.push</span>\n                <span class=\"o\">(</span><span class=\"n\">Array.push</span>\n                  <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">Array.empty</span>\n                    <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"o\">(</span><span class=\"n\">Name.mkStr</span> <span class=\"n\">Name.anonymous</span> <span class=\"s2\">\"null\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">Array.empty</span> <span class=\"o\">(</span><span class=\"n\">Syntax.atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">))))</span>\n                  <span class=\"o\">(</span><span class=\"n\">Syntax.atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"bar\"</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"n\">Syntax.atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"ahoy\"</span><span class=\"o\">)))</span>\n    <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"k\">if</span> <span class=\"n\">Syntax.isOfKind</span> <span class=\"n\">discr</span> <span class=\"o\">(</span><span class=\"n\">Name.mkStr</span> <span class=\"n\">Name.anonymous</span> <span class=\"s2\">\"termFooBarBazAhoy\"</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">discr</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n        <span class=\"k\">if</span> <span class=\"n\">Syntax.matchesNull</span> <span class=\"n\">discr</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">Unit.unit</span> <span class=\"k\">else</span>\n          <span class=\"n\">panicWithPosWithDecl</span> <span class=\"s2\">\"[anonymous]\"</span> <span class=\"s2\">\"_check\"</span> <span class=\"mi\">9</span> <span class=\"mi\">11</span> <span class=\"s2\">\"unreachable code has been reached\"</span>\n      <span class=\"k\">else</span> <span class=\"n\">panicWithPosWithDecl</span> <span class=\"s2\">\"[anonymous]\"</span> <span class=\"s2\">\"_check\"</span> <span class=\"mi\">9</span> <span class=\"mi\">11</span> <span class=\"s2\">\"unreachable code has been reached\"</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Unit</span>\n</code></pre></div>",
        "id": 239046001,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621237129
    },
    {
        "content": "<p>I'm just pasting the output of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"n\">MacroM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 239046021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621237151
    },
    {
        "content": "<p>Though, looking closer at this matcher.  I believe I've found a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span>  <span class=\"s2\">\"foo \"</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"bar \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"baz \"</span><span class=\"o\">)</span> <span class=\"s2\">\"ahoy\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">ahoy</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"ahoy!\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">baz</span> <span class=\"n\">ahoy</span> <span class=\"c1\">-- \"ahoy!\"</span>\n</code></pre></div>",
        "id": 239046552,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621237475
    },
    {
        "content": "<p>I should have been more specific: syntax <code>match</code> explicitly ignores tokens. After all we usually don't care whether you're using <code>=&gt;</code> or <code>⇒</code>. If you do care about a token, put it in its own syntax abbreviation so it gets its own syntax (and antiquotation) kind. If you cannot change the parser, you'll have to match manually.</p>",
        "id": 239047022,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621237771
    },
    {
        "content": "<p>This is a surprising difference between <code>?</code> and <code>&lt;|&gt;</code>!</p>",
        "id": 239047385,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621237991
    },
    {
        "content": "<p>Haha, I agree. Not sure if there is a better matching spec, but for semantic transformations ignoring tokens has worked out very well for us so far.</p>",
        "id": 239047589,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621238117
    },
    {
        "content": "<p>For implementing syntactic transformations, we might want a <code>match</code> flag that makes it care about tokens, but we haven't gotten to that point yet.</p>",
        "id": 239047631,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621238153
    },
    {
        "content": "<p>Perhaps it would have been nicer to always check tokens and define any alternative notation as a macro for the \"canonical\" one. That would be a nontrivial change at this point though.</p>",
        "id": 239154869,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621283308
    }
]