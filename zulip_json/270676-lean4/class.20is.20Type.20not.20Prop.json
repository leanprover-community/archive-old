[
    {
        "content": "<p>Am I right in thinking that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsAddRightCancel</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsAddRightCancel</span> <span class=\"n\">A</span> <span class=\"c1\">-- Type</span>\n</code></pre></div>\n<p>should really be a Prop? I think that Lean 3 made it a Type as well. You can explicitly tell it otherwise and it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsAddRightCancel'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">IsAddRightCancel'</span> <span class=\"n\">A</span> <span class=\"c1\">-- Prop</span>\n</code></pre></div>\n<p>Beginners who don't know about this trick in Lean 3 sometimes accidentally make Types instead of Props this way.</p>",
        "id": 238693829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620946888
    },
    {
        "content": "<p>Should we use mathlib4 issues to build up wishlist features like this that can plausibly be implemented in mathlib instead of lean 4?</p>",
        "id": 238694064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947006
    },
    {
        "content": "<p>(in this case, I mean defaulting classes whose members are propositions to <code>Prop</code> instead of <code>Type*</code>)</p>",
        "id": 238694100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947035
    },
    {
        "content": "<p>From the type theory point of view, you have to specify the target type and for a class like this it will work for <code>Prop</code> or any <code>Type v</code></p>",
        "id": 238694231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947123
    },
    {
        "content": "<p>It has to do with the fact that it's an inductive type, it's underdetermined in the same way as the type <code>nat</code> is not determined in this recursive definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 238694449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620947275
    },
    {
        "content": "<p>Why should it be a <code>Prop</code> rather than a <code>Type</code>? What benefits does that provide?</p>",
        "id": 238694997,
        "sender_full_name": "Mac",
        "timestamp": 1620947615
    },
    {
        "content": "<p>Given that it defaults to and instance of <code>Type</code> and most utility classes in Lean deal with instances of <code>Type</code>, It would seem most logical to keep it that way unless there is a compelling reason it should be a <code>Prop</code>.</p>",
        "id": 238695345,
        "sender_full_name": "Mac",
        "timestamp": 1620947841
    },
    {
        "content": "<p>My instinct is that type-valued typeclasses are far more prone to causing diamond issues but I don't know if that would be the case here</p>",
        "id": 238695800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620948180
    },
    {
        "content": "<p>Unless it makes the projections noncomputable, it is generally better to have a <code>Prop</code> than a <code>Type</code> when there is only one inhabitant because you get proof irrelevance, meaning that diamond issues go away entirely</p>",
        "id": 238696564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620948781
    }
]