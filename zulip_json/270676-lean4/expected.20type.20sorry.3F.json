[
    {
        "content": "<p>Should I be seeing \"but is expected to have type <code>sorry</code>\" in cases where I don't use <code>sorry</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Tm</span> <span class=\"n\">where</span>\n  <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">ty.ty</span> <span class=\"bp\">Γ</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Actx</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=</span> <span class=\"n\">A.ctx</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">xTy</span> <span class=\"o\">:</span> <span class=\"n\">x.ty</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ty</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">ty.ty</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span><span class=\"n\">x.ty.ctx</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.tm</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:=</span><span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"n\">xTy</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">13:71: type mismatch</span>\n<span class=\"cm\">  Tm.tm x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Ty.ty x.ty Γ</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  sorry</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 229034927,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614983141
    },
    {
        "content": "<p>Pushed a fix for this one: <a href=\"https://github.com/leanprover/lean4/commit/7a79ef62d1ee7ff34ac3141eacbecb537ec62e28\">https://github.com/leanprover/lean4/commit/7a79ef62d1ee7ff34ac3141eacbecb537ec62e28</a></p>",
        "id": 229058839,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615000334
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 229107112,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615045398
    }
]