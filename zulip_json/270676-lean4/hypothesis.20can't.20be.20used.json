[
    {
        "content": "<p>Hi! I want to apologize upfront for yet-another-long-mwe, but this time I am not being able to use a hypothesis in my context with <code>simp</code> or <code>rw</code></p>\n<p><a href=\"https://gist.github.com/arthurpaulino/22807b35054a638838974b73ad789315\">https://gist.github.com/arthurpaulino/22807b35054a638838974b73ad789315</a></p>\n<p>The issue is that <code>h'</code> can't be used on lines 394 and 395. I'm not entirely sure if I'm doing something wrong, but I <em>suspect</em> this should have worked</p>\n<p>Thanks in advance for your attention <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 280252919,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650998107
    },
    {
        "content": "<p>The following threads should clarify what is going on<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22</a><br>\n<a href=\"#narrow/stream/270676-lean4/topic/Cannot.20rewrite.20term.20being.20cased.20on\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Cannot.20rewrite.20term.20being.20cased.20on</a></p>",
        "id": 280253843,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650998491
    },
    {
        "content": "<p>To minimize the problem, we have to change how we encode the <code>match h : ... with ...</code> notation. It will happen, but not in the near future.</p>",
        "id": 280254045,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650998568
    },
    {
        "content": "<p>Ah, alright, thanks!!<br>\nLet me read those <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 280254911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650998901
    },
    {
        "content": "<p>The second one is the most relevant.</p>",
        "id": 280254986,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650998934
    },
    {
        "content": "<p>Both those topics are mine, and I'm still pretty lost about how to do the right generalization -- maybe we can learn how to work around this together <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 280256181,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1650999437
    },
    {
        "content": "<p>Sure, from what I understood, I have to manually provide a motive for my <code>consume</code> function (and I don't know what a motive is yet). Now that Leo has pointed out the root cause of the issue, I'll try to minimize my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> later and work on it. For now I'll just sorry that part out</p>",
        "id": 280257102,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650999794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> how far are you on the investigation?</p>",
        "id": 280257305,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650999895
    },
    {
        "content": "<p>Oh, actually, your case is maybe simple to solve, lemme try to fill this sorry in...</p>",
        "id": 280257787,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651000110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/hypothesis.20can't.20be.20used/near/280257102\">said</a>:</p>\n<blockquote>\n<p>Sure, from what I understood, I have to manually provide a motive for my <code>consume</code> function (and I don't know what a motive is yet). Now that Leo has pointed out the root cause of the issue, I'll try to minimize my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> later and work on it. For now I'll just sorry that part out</p>\n</blockquote>\n<p>Off-topic, but I don't know what a motive is precisely either yet, even though I know it's present in a particularly common Lean 3 error message. If you get a good handle on what one is, the glossary would benefit from having an entry for it!</p>",
        "id": 280259304,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651000815
    },
    {
        "content": "<p>I think a motive is a (potentially dependent) type which a recursor is eliminating into. The \"target\" type of a recursion/induction. So for inductive arguments trying to prove <code>\\forall n. P(n)</code>, the <code>P</code> is the motive. Or for a recursive function from <code>MyType</code> to <code>Nat</code>, the motive is <code>fun (_ : MyType) =&gt; Nat</code></p>",
        "id": 280260379,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651001262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/hypothesis.20can't.20be.20used/near/280257787\">said</a>:</p>\n<blockquote>\n<p>Oh, actually, your case is maybe simple to solve, lemme try to fill this sorry in...</p>\n</blockquote>\n<p>after spending 15 min on this i give up <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but it seems quite similar to the example Mario solved <a href=\"#narrow/stream/270676-lean4/topic/Cannot.20rewrite.20term.20being.20cased.20on/near/274325641\">here</a></p>",
        "id": 280260645,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651001366
    },
    {
        "content": "<p>Here's a fix for this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">State.retProgression</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"n\">v</span> <span class=\"n\">c</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">isEnd</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"n\">v</span> <span class=\"n\">c</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">isProg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"n\">generalizing</span> <span class=\"n\">v</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">es</span> <span class=\"n\">k</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">lm</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lm</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">ns</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">stepN</span><span class=\"o\">,</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n          <span class=\"k\">let</span> <span class=\"n\">isOk</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.isEnd</span> <span class=\"bp\">∨</span> <span class=\"n\">s.isProg</span>\n          <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">→</span>\n            <span class=\"n\">isOk</span> <span class=\"o\">(</span><span class=\"n\">step.match_2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"n\">o</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">h'</span>\n          <span class=\"n\">intro</span> <span class=\"n\">o</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280266519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651004321
    },
    {
        "content": "<p>I don't understand that <em>yet</em>, but it gives me the errors:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  match ?m.40719 with\n  | Except.error m =&gt; ?m.40720 m\n  | Except.ok x =&gt; fun h' =&gt; State\nargument\n  fun x h' =&gt; State\nhas type\n  (x : Value) → ?m.40727 x → Type : Sort (max 2 ?u.40724)\nbut is expected to have type\n  (v : Value) → ?m.40718 (Except.ok v) : Sort (imax 1 ?u.40717)\n</code></pre></div>\n<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>function expected at\n  match ?m.40719 with\n  | Except.error m =&gt; ?m.40720 m\n  | Except.ok v =&gt; ?m.40752 v\nterm has type\n  ?m.40718 ?m.40719\n</code></pre></div>\n<p>Thanks for helping out <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 280267324,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651004736
    },
    {
        "content": "<p>It looks like some of the captured variables are different, try moving the <code>(fun x h' =&gt; State)</code> argument earlier</p>",
        "id": 280270397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006266
    },
    {
        "content": "<p>Here's the type of <code>State.step.match_2</code> for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">State.step.match_2</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">State.step.match_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">es</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Program</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Program</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">p_1</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p_1</span><span class=\"o\">))</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"o\">((</span><span class=\"n\">p_1</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">p_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">p_1</span><span class=\"o\">))</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                <span class=\"o\">((</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">none</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 280270512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006336
    },
    {
        "content": "<p>I obtained the term in the <code>suffices</code> by setting <code>set_option pp.match false</code> and then locating the <code>(fun x h' =&gt; State)</code> (this is <code>motive</code>), <code>(consume p ns es)</code> (which is <code>o</code>) and <code>(_ : consume p ns es = consume p ns es)</code> (which is <code>h</code>) arguments in the match expression in the goal</p>",
        "id": 280270764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006455
    },
    {
        "content": "<p>I expect there is some lean version mismatch that has caused things to work out differently for you</p>",
        "id": 280270807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006480
    },
    {
        "content": "<p>I'm running <code>Lean (version 4.0.0-nightly-2022-04-16, commit 726b735c6df7, Release)</code></p>",
        "id": 280270895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006553
    },
    {
        "content": "<p>I'm using today's nightly. Will check that soon!</p>",
        "id": 280273145,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651007641
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">State.step.match_2</span>\n<span class=\"c1\">-- State.step.match_2 : (motive : Except String Value → Sort u_1) →</span>\n<span class=\"c1\">--   (x : Except String Value) → ((m : String) → motive (Except.error m)) → ((v : Value) → motive (Except.ok v)) → motive x</span>\n</code></pre></div>",
        "id": 280275069,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651008681
    },
    {
        "content": "<p>Once again consulting the Mario oracle to find the correct chant of generalization to proceed in a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">UninitPointed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Uninit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">UninitPointed</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Uninit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">UninitPointed</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">uninitUnsafe</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[implementedBy uninitUnsafe]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">uninit</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">initUnsafe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">a</span>\n<span class=\"kd\">@[implementedBy initUnsafe]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">uninit</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">constant</span> <span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofOption</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">uninit</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">init</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">getValue_ofOption</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ofOption</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">ofOption_getValue</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ofOption</span> <span class=\"o\">(</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">isInit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">getValueUnsafe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[implementedBy getValueUnsafe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">getValue</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.match</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getValue_init</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getValue</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getValue</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getValue.match_1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280907318,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651513171
    },
    {
        "content": "<p>I will attempt a few more random generalizations in the meantime</p>",
        "id": 280907425,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651513211
    },
    {
        "content": "<p>Here is an option using the <code>generalize</code> tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getValue_init</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getValue</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getValue</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">hx</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 280910262,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651514482
    },
    {
        "content": "<p>The notation <code>h = hx</code> is a bit cryptic, but it is there because the type of <code>h</code> depends on <code>getValue? (init a)</code>. We should add a better notation for this.</p>",
        "id": 280911172,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651514876
    },
    {
        "content": "<p>We can also use <code>h = h</code>, but it looks even more cryptic. BTW, the use of <code>=</code> in the <code>generalize</code> tactic is also a bit misleading. Any suggestions on how to improve this notation?</p>",
        "id": 280911580,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515074
    },
    {
        "content": "<p>Aside: Any chance <code>generalize</code> can support <code>at</code>? Mathlib has a <code>generalize_hyp</code> command which does not do anything except this relatively straightforward generalization</p>",
        "id": 280911622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/hypothesis.20can't.20be.20used/near/280911622\">said</a>:</p>\n<blockquote>\n<p>Aside: Any chance <code>generalize</code> can support <code>at</code>? Mathlib has a <code>generalize_hyp</code> command which does not do anything except this relatively straightforward generalization</p>\n</blockquote>\n<p>Yes, we can add support for <code>at</code>.</p>",
        "id": 280911721,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515154
    },
    {
        "content": "<p>Is that <code>h = hx</code> syntax new in lean 4 <code>generalize</code>? I don't recognize it from lean 3</p>",
        "id": 280911729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515160
    },
    {
        "content": "<p><code>generalize</code> in Lean 4 can take a telescope and simultaneously generalize many terms.</p>",
        "id": 280911831,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515222
    },
    {
        "content": "<p>how about <code>hx := h</code> instead of <code>h = hx</code>?</p>",
        "id": 280911915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515258
    },
    {
        "content": "<p>the <code>=</code> is backwards but I think we have precedent for using <code>hx := &lt;- h</code> at this point if we want it the other way around</p>",
        "id": 280911967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515300
    },
    {
        "content": "<p>ah crap, maybe that doesn't work as well in lean 4 since that's actually an expression</p>",
        "id": 280912039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515351
    },
    {
        "content": "<p>I suppose you can parse the arrow anyway, <code>rw</code> does that too</p>",
        "id": 280912098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515367
    },
    {
        "content": "<p>What about the fact that the types of <code>h</code> and <code>hx</code> are different?</p>",
        "id": 280912141,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515396
    },
    {
        "content": "<p>oh I see... <code>(x, h) := (e1, e2)</code>? Possibly without parens too</p>",
        "id": 280912214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515428
    },
    {
        "content": "<p>it might be harder to read for a long telescope though</p>",
        "id": 280912245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515457
    },
    {
        "content": "<p>maybe it's just better to live with the slightly mismatched types</p>",
        "id": 280912357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515505
    },
    {
        "content": "<p>Thanks for the feedback. The suggestions are already better than the current notation.</p>",
        "id": 280912427,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515541
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 280912480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651515564
    },
    {
        "content": "<p>If you have more ideas, please keep posting them here.</p>",
        "id": 280912563,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651515599
    },
    {
        "content": "<p>Another idea: have the syntax look more like binders rather than patterns, like <code>generalize (h : a = b) (e = f) (h' : c = d)</code></p>",
        "id": 280919172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651518590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks for sharing. I have a question.  Some of the equalities are actually heterogeneous. Should we enforce it in the new notation? That is, sign an error if one uses <code>=</code>, but the equality is heterogeneous.</p>",
        "id": 280947362,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651533380
    },
    {
        "content": "<p>Personally I'd prefer some sort of English which makes it read better, something like<br>\n<code>generalize h' : getValue? (init a), h as x, hx</code><br>\nIt would feel a bit more similar to the other tactics where you list new identifiers at the end</p>",
        "id": 280952348,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651537886
    },
    {
        "content": "<p>But thank you! The generalize tactic actually seems perfect for circumventing this issue</p>",
        "id": 280952428,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651537951
    },
    {
        "content": "<p>Wait, can you generalize multiple terms at once? If not, then I feel like the most natural would be<br>\n<code>generalize h' : getValue? (init a) as x in h1, h2, ...</code><br>\nwhere the hypotheses <code>h1, ...</code> keep their names but have new types</p>",
        "id": 280952826,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651538310
    },
    {
        "content": "<p>Was it where Mario was getting at with the <code>at</code> suggestion?</p>",
        "id": 280953008,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651538511
    },
    {
        "content": "<p>ooh potentially, I don't know what generalize_hyp does</p>",
        "id": 280953427,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651538980
    },
    {
        "content": "<p><code>_hyp</code> in Lean 3 meta code base usually means that you're doing something with a variable in the context instead of with the target. The <code>at</code> word is a good indicator that one can do <code>at h1 h2 |-</code> or <code>at *</code> (it's common syntax in mathlib)</p>",
        "id": 280953832,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651539348
    },
    {
        "content": "<p>Using <code>as</code> makes a lot of sense when you read it out loud. But I don't know other tactics that make use of \"as\" in their syntax (is this a concern?)</p>",
        "id": 280954038,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651539528
    },
    {
        "content": "<p>It's similar to ML binding patterns <code>x as p</code>, where <code>x</code> is bound to whatever matches <code>p</code></p>",
        "id": 280954220,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651539646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/hypothesis.20can't.20be.20used/near/280954038\">said</a>:</p>\n<blockquote>\n<p>Using <code>as</code> makes a lot of sense when you read it out loud. But I don't know other tactics that make use of \"as\" in their syntax (is this a concern?)</p>\n</blockquote>\n<p>It is a concern, because these sorts of filler words have to be keywords for the most part, which precludes their use in identifiers. <code>as</code> comes up quite a bit in theorems about lists where the lists are called <code>as</code> and <code>bs</code></p>",
        "id": 280969074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651555696
    },
    {
        "content": "<p>as a result it's generally best to stick to a somewhat restrictive grammar of filler words in tactics like <code>with</code>, <code>using</code>, <code>from</code>, or more unusual words like <code>generalizing</code></p>",
        "id": 280969096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651555758
    },
    {
        "content": "<p><code>set</code> is precedent for this kind of input, it uses <code>set x : t := val with h</code> where <code>h</code> receives the equation <code>x = val</code></p>",
        "id": 280969195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651555853
    },
    {
        "content": "<p>and you could easily have a comma or indent-newline sequence of such things for <code>generalize</code></p>",
        "id": 280969285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651555966
    },
    {
        "content": "<p>I think you could also add a type ascription on <code>h</code> if you wanted to change the type of it to something defeq or get an error if it's a heq and you didn't expect that, e.g. <code>generalize x := val with (h : x = val)</code></p>",
        "id": 280969403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651556117
    },
    {
        "content": "<p>I would probably leave the ascription off most of the time but it works syntactically</p>",
        "id": 280969431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651556149
    },
    {
        "content": "<p>I just pushed a commit that improves the <code>split</code> tactic. It uses a custom generalization procedure, and can now handle  <code>match</code> expressions such as <code>match h : Q.F.force with ...</code>. It is not heavily tested yet, but can already handle examples by <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> and <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> that used to fail.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/94b5a9b460ce0a258b77503198f5319f8739e84a/tests/lean/run/james1.lean\">https://github.com/leanprover/lean4/blob/94b5a9b460ce0a258b77503198f5319f8739e84a/tests/lean/run/james1.lean</a><br>\n<a href=\"https://github.com/leanprover/lean4/blob/94b5a9b460ce0a258b77503198f5319f8739e84a/tests/lean/run/arthur2.lean\">https://github.com/leanprover/lean4/blob/94b5a9b460ce0a258b77503198f5319f8739e84a/tests/lean/run/arthur2.lean</a><br>\nFrom the first test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">deq</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">LazyBatchQueue</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"bp\">×</span> <span class=\"n\">LazyBatchQueue</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q.F.force</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"o\">⟨</span><span class=\"n\">F'</span><span class=\"o\">,</span> <span class=\"n\">Q.F_len</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LazyList.F_force_some_len_minus_one</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Q.h_lens</span><span class=\"o\">]⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deq_correct</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">LazyBatchQueue</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deq</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">↔</span> <span class=\"n\">Q.F.force</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">deq</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 281098728,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651625589
    },
    {
        "content": "<p>Thanks!!!</p>",
        "id": 281098969,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651625876
    },
    {
        "content": "<p>BTW, the new generalizer for the split tactic can also handle the <code>geValue</code> example above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getValue</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Uninit</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getValue_init</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getValue</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getValue</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">next</span> <span class=\"n\">a'</span> <span class=\"n\">h'</span> <span class=\"n\">heq₁</span> <span class=\"n\">heq₂</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      a' : α</span>\n<span class=\"cm\">      h' : Option.isSome (some a') = true</span>\n<span class=\"cm\">      heq₁ : getValue? (init a) = some a'</span>\n<span class=\"cm\">      heq₂ : HEq h h'</span>\n<span class=\"cm\">      ⊢ a' = a</span>\n<span class=\"cm\">   -/</span>\n   <span class=\"gr\">sorry</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 281230597,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651704340
    },
    {
        "content": "<p>This is already helping me make lots of progress, thank you so much!</p>",
        "id": 281276297,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651744207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> , just discovered <code>nightly-2022-05-04</code> split regression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">self.foo</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">f</span><span class=\"o\">]:</span>\n  <span class=\"n\">bar</span> <span class=\"n\">self</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">bar</span> <span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bar</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hi</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">split'</span> <span class=\"n\">failed</span>\n<span class=\"n\">case</span> <span class=\"n\">right</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">f</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span>\n  <span class=\"k\">match</span> <span class=\"n\">Foo.foo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">⊢</span> <span class=\"k\">match</span> <span class=\"n\">Foo.foo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 282345385,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1652524014
    }
]