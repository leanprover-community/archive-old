[
    {
        "content": "<p>Why not just provide that instance?</p>",
        "id": 262957253,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638146501
    },
    {
        "content": "<p>and is the <code>1</code> being inferred as <code>Entry.int</code> or <code>Entry.float</code>?</p>",
        "id": 262957301,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638146536
    },
    {
        "content": "<p>One way around this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"e\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 262957378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638146674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/unintended.20instance/near/262957301\">said</a>:</p>\n<blockquote>\n<p>and is the <code>1</code> being inferred as <code>Entry.int</code> or <code>Entry.float</code>?</p>\n</blockquote>\n<p>Good question. I'm not sure</p>",
        "id": 262957399,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638146731
    },
    {
        "content": "<p>Make the <code>def</code> and then <code>#print</code> it.</p>",
        "id": 262957476,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638146875
    },
    {
        "content": "<p>(The <code>OfScientific</code> isn't a coercion, by the way. It's the way <code>3.4</code> gets parsed using the typeclass system -- it's similar to <code>OfNat</code>.)</p>",
        "id": 262957533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638146942
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">qq</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Entry.str</span> <span class=\"s2\">\"e\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It didn't say <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 262957596,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Entry.int (Int.ofNat 1)</span>\n</code></pre></div>",
        "id": 262957609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/unintended.20instance/near/262957533\">said</a>:</p>\n<blockquote>\n<p>(The <code>OfScientific</code> isn't a coercion, by the way. It's the way <code>3.4</code> gets parsed using the typeclass system -- it's similar to <code>OfNat</code>.)</p>\n</blockquote>\n<p>Does it mean there isn't much I can do to provide a way for the user to do <code>let r : Row := [1, \"e\", 3.4]</code>?</p>",
        "id": 262957619,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147074
    },
    {
        "content": "<p>Like Yakov suggested, you can provide an <code>OfScientific</code> instance, for example, rather than a coercion from <code>Float</code>, using Float's <code>OfScientific</code> instance.</p>",
        "id": 262957689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147149
    },
    {
        "content": "<p>How is the syntax for that?</p>",
        "id": 262957747,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147260
    },
    {
        "content": "<p>I wonder why <code>Int</code> is working, though.  There's a default instance for <code>Float</code> just like for <code>Nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[defaultInstance 100]</span> <span class=\"c\">/-</span><span class=\"cm\"> low prio -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Nat</span> <span class=\"n\">n</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[defaultInstance mid+1]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">Float</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 262957831,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147434
    },
    {
        "content": "<p>I copy/pasted it, basically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.float</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">m.log2</span> <span class=\"c1\">-- ensure we have 64 bits of mantissa left after division</span>\n      <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"n\">e</span>\n      <span class=\"n\">Float.ofBinaryScientific</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Float.ofBinaryScientific</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It worked</p>",
        "id": 262958034,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147656
    },
    {
        "content": "<p>There you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.float</span> <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"e\"</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 262958037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147661
    },
    {
        "content": "<p>Nice!</p>",
        "id": 262958059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147699
    },
    {
        "content": "<p>You probably want to keep the coercion since it would be convenient for non-literals.</p>",
        "id": 262958115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147754
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"e\"</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 262958128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638147784
    },
    {
        "content": "<p>Hm, I'm not intending to drop the coercions. Which coercion do you mean?</p>",
        "id": 262958200,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638147908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 262959700,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638150323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> <br>\nI think he means the <code>Float</code> to <code>Entry</code> coercion. </p>\n<p>The example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"e\"</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>...wouldn't work without it.</p>",
        "id": 262983391,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638177904
    }
]