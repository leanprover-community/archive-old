[
    {
        "content": "<p>Any ideas why the following crashes the Lean Server with a stack overflow?  I'm trying to decode Uri escaping using Parsec .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">textData</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">satisfy</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"sc\">'%'</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hexDigitToNat</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"sc\">'0'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'9'</span> <span class=\"k\">then</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"sc\">'a'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'f'</span> <span class=\"k\">then</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">-</span> <span class=\"sc\">'a'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n  <span class=\"k\">else</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">-</span> <span class=\"sc\">'A'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">digitsToNat</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">digits.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">base</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">exactlyNCore</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"n\">exactlyNCore</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc.push</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"n\">acc</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">exactlyN</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">exactlyNCore</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">escaped</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">skipString</span> <span class=\"s2\">\"%\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">?</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"sc\">'%'</span> <span class=\"k\">then</span>\n    <span class=\"n\">skip</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"%\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">charCode</span> <span class=\"bp\">←</span>\n    <span class=\"n\">digitsToNat</span> <span class=\"mi\">16</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">exactlyN</span> <span class=\"o\">(</span><span class=\"n\">hexDigitToNat</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">hexDigit</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"n\">charCode</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unescaped</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">manyChars</span> <span class=\"n\">textData</span>\n<span class=\"kd\">def</span> <span class=\"n\">uriChunk</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">escaped</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unescaped</span>\n<span class=\"kd\">def</span> <span class=\"n\">parsedUri</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">many</span> <span class=\"n\">uriChunk</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">match</span> <span class=\"n\">parsedUri</span> <span class=\"s2\">\"file:///d%3a/temp/test.xml\"</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Parsec.ParseResult.success</span> <span class=\"n\">_</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.ok</span> <span class=\"n\">res</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Parsec.ParseResult.error</span> <span class=\"n\">it</span> <span class=\"n\">err</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"offset {it.pos}: {err}\"</span>\n</code></pre></div>\n<p>and can this code be simplified?</p>",
        "id": 292193498,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659725121
    },
    {
        "content": "<p>You have a <code>many uriChunk</code> where <code>uriChunk</code> matches the empty string via <code>unescaped</code></p>",
        "id": 292194338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659725558
    },
    {
        "content": "<p>so the <code>many</code> parser will end up matching an infinite number of empty strings</p>",
        "id": 292194377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659725585
    },
    {
        "content": "<p>Are there parser combinator libraries from other dependently typed languages out there that can guarantee termination if they are used in a correct way with subtypes or similar?</p>",
        "id": 292194576,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659725689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/292194377\">said</a>:</p>\n<blockquote>\n<p>so the <code>many</code> parser will end up matching an infinite number of empty strings</p>\n</blockquote>\n<p>Thanks for the hint, now how do I fix it?  I thought <code>textData</code> was greedy and consumed as much as it can, why would it ever match empty, except when it hits '%' in which case escaped should take over... ?</p>",
        "id": 292194981,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659725929
    },
    {
        "content": "<p>what if there is no text remaining?</p>",
        "id": 292195024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659725949
    },
    {
        "content": "<p>it will consume as much as it can, which is nothing</p>",
        "id": 292195053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659725969
    },
    {
        "content": "<p>It is possible to make <code>many</code> not loop in this case by checking that the contained parser matches at least one character</p>",
        "id": 292195260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726005
    },
    {
        "content": "<p>The simplest fix in this case would be to use something like <code>many1Chars</code> in <code>unescaped</code></p>",
        "id": 292195380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/292194576\">said</a>:</p>\n<blockquote>\n<p>Are there parser combinator libraries from other dependently typed languages out there that can guarantee termination if they are used in a correct way with subtypes or similar?</p>\n</blockquote>\n<p>I believe Gabriel actually proved termination for the lean 3 parsec IIRC</p>",
        "id": 292195553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> also did some work on provable parsers in mathlib</p>",
        "id": 292195628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726191
    },
    {
        "content": "<p>Indeed, I just checked and <a href=\"https://github.com/leanprover-community/lean/blob/master/library/data/buffer/parser.lean\">https://github.com/leanprover-community/lean/blob/master/library/data/buffer/parser.lean</a> contains only terminating functions</p>",
        "id": 292195759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726289
    },
    {
        "content": "<p>Mario, what's you definition of terminating?</p>",
        "id": 292195791,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659726316
    },
    {
        "content": "<p>Functions that the Lean compiler accepts without stuff like partial for me</p>",
        "id": 292195845,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659726347
    },
    {
        "content": "<p>yeah that's what I mean</p>",
        "id": 292195904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726364
    },
    {
        "content": "<p>I guess the proof is a bit of a cheat because it uses a fuel parameter (even though the fuel parameter is guaranteed to be large enough, that's not proved)</p>",
        "id": 292195947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726399
    },
    {
        "content": "<p>As a side note, the TC-based parser properties led to the \"scary\" graph that was shared at lftcm</p>",
        "id": 292196040,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659726474
    },
    {
        "content": "<p>I imagine such a scheme would not work for  parsers that want to match the empty string (i.e., work in a similar manner to <code>skip</code>/ <code>check*</code> functions in the Lean parser).</p>",
        "id": 292196130,
        "sender_full_name": "Mac",
        "timestamp": 1659726517
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.bounded\">docs#parser.bounded</a></p>",
        "id": 292196175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659726570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> If you are doing the check in <code>many</code> itself I don't see how there could be a false positive unless the parser function is not pure</p>",
        "id": 292196256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726604
    },
    {
        "content": "<p>contrast with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.unfailing\">docs#parser.unfailing</a>, related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.conditionally_unfailing\">docs#parser.conditionally_unfailing</a></p>",
        "id": 292196309,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659726647
    },
    {
        "content": "<p>if you call <code>p</code> and it returns success and does not advance the cursor, then calling <code>p</code> again will result in the same thing and you will definitely loop</p>",
        "id": 292196310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659726647
    },
    {
        "content": "<p><code>many (pure x)</code></p>",
        "id": 292196458,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659726669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/292195380\">said</a>:</p>\n<blockquote>\n<p>The simplest fix in this case would be to use something like <code>many1Chars</code> in <code>unescaped</code></p>\n</blockquote>\n<p>Thanks, many1Chars fixed it.</p>",
        "id": 292196961,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659726995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/292196256\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> If you are doing the check in <code>many</code> itself I don't see how there could be a false positive unless the parser function is not pure</p>\n</blockquote>\n<p>Yes, but this assumes that one wants <code>many</code> to fail at the end of the input. If one has <code>many acceptsEmptyString &gt;&gt; optional otherParser</code>, one ideally does not want <code>many acceptsEmptyString</code> to fail because it just reach the end of the input.  Even break upon reaching the end does not solve this, as it not necessarily clear how many invocations of <code>acceptsEmptyString</code> one wants (especially if the parser <code>acceptsEmptyString</code> is not pure).</p>",
        "id": 292197357,
        "sender_full_name": "Mac",
        "timestamp": 1659727254
    },
    {
        "content": "<p><code>many acceptsEmptyString</code> would not fail, it would return the empty list and parse nothing</p>",
        "id": 292197484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659727325
    },
    {
        "content": "<p>and the exit condition is not reaching the end, it is parsing 0 characters</p>",
        "id": 292197544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659727378
    },
    {
        "content": "<p>if the parser is not pure then you are hosed</p>",
        "id": 292197592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659727422
    },
    {
        "content": "<p>dangerang, this code I borrowed from Lean.Xml.Parser.hexDigitToNat doesn't work, can anyone spot the problem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.Xml.Parser.CharRef</span> <span class=\"s2\">\"&amp;#x3a;\"</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span> <span class=\"c1\">-- ':'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Xml.Parser.CharRef</span> <span class=\"s2\">\"&amp;#x3b;\"</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span> <span class=\"c1\">-- error expected ';'</span>\n</code></pre></div>\n<p>is there something wrong with <code>if 'a' ≤ c ∧ c ≤ 'f'</code> ?  The weird thing is this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.Xml.Parser.hexDigitToNat</span> <span class=\"sc\">'b'</span>   <span class=\"c1\">-- 11</span>\n</code></pre></div>",
        "id": 292199207,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659728242
    },
    {
        "content": "<p>It's a bug in core</p>",
        "id": 292200007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659728764
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/deafc315c783ac8069508f72b2815f2713d06f6a/src/Lean/Data/Parsec.lean#L126-L128\">https://github.com/leanprover/lean4/blob/deafc315c783ac8069508f72b2815f2713d06f6a/src/Lean/Data/Parsec.lean#L126-L128</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hexDigit</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">attempt</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">anyChar</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"sc\">'0'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'9'</span><span class=\"o\">)</span>\n   <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"sc\">'a'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'a'</span><span class=\"o\">)</span>\n   <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'A'</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">fail</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"hex digit expected\"</span>\n</code></pre></div>",
        "id": 292200100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659728826
    },
    {
        "content": "<p>hilarious, I filed a bug <a href=\"https://github.com/leanprover/lean4/issues/1429\">https://github.com/leanprover/lean4/issues/1429</a> and tested the fix <a href=\"https://github.com/leanprover/lean4/pull/1430\">https://github.com/leanprover/lean4/pull/1430</a>, and it works.</p>",
        "id": 292200241,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659728912
    },
    {
        "content": "<p>A correct implementation for recognizing undecimal digits, though</p>",
        "id": 292200257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659728925
    },
    {
        "content": "<p>11 is the new 16 -- oh the fix is already merged! I love the way things move fast here.</p>",
        "id": 292243972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659777498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/292194576\">said</a>:</p>\n<blockquote>\n<p>Are there parser combinator libraries from other dependently typed languages out there that can guarantee termination if they are used in a correct way with subtypes or similar?</p>\n</blockquote>\n<p>There's at least <a href=\"https://github.com/gallais/agdarsec\">https://github.com/gallais/agdarsec</a> to look at, along with its ports to Coq and Idris.</p>",
        "id": 292273658,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1659812541
    }
]