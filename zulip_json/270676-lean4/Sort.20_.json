[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"c1\">-- instInhabitedSort</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize Inhabited (Sort ?u.25)</span>\n</code></pre></div>",
        "id": 221702659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881315
    },
    {
        "content": "<p>so <code>Sort _</code> behaves differently from <code>Sort u</code>? Is this expected?</p>",
        "id": 221702685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881336
    },
    {
        "content": "<p>Pretend <code>#synth</code> doesn't exist :) . It has no purpose aside from initial debugging and thus might be gone again soon.</p>",
        "id": 221703103,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609881555
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"c1\">-- typeclass instance problem contains metavariables: Inhabited (Sort ?u.423)</span>\n</code></pre></div>",
        "id": 221703305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881688
    },
    {
        "content": "<p>same problem with <code>inferInstance</code></p>",
        "id": 221703316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881694
    },
    {
        "content": "<p>Removing <code>#synth</code> is about lowering the maintenance burden, right? I.e. there won't be any technical limitations that prevent a command like <code>#synth</code> from working, so we could copy the current implementation and put it in some community library.</p>",
        "id": 221703715,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609881925
    },
    {
        "content": "<p>I really didn't think end users would find it useful (compared to the cost of learning one more command), but if you find it useful, sure, go ahead and copy it. I suppose you could even make it a mere macro for <code>#check inferInstanceAs A</code>.</p>",
        "id": 221704294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609882222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"c1\">-- failed to synthesize: Lean.Eval (Inhabited (Sort u))</span>\n</code></pre></div>",
        "id": 221704790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609882469
    },
    {
        "content": "<p>The <code>#eval</code> was most likely just a typo for <code>#check</code>.</p>",
        "id": 221704965,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609882561
    },
    {
        "content": "<p>Well, the same problem remains then.</p>",
        "id": 221705046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609882596
    }
]