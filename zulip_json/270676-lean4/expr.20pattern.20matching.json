[
    {
        "content": "<p>Is there syntax like <code>`(%%a ∧ %%b)</code> for matching against <code>expr</code> in Lean 4? We use this frequently in mathlib tactics, e.g., <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/push_neg.lean#L43\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/push_neg.lean#L43</a></p>",
        "id": 225040103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612369559
    },
    {
        "content": "<p>This syntax seems to be used for matching syntax in Lean 4 and I couldn't figure out how to get it to match <code>expr</code> instead</p>",
        "id": 225040210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612369590
    },
    {
        "content": "<p>There isn't, because we had no need for it so far. I'm not actually sure if the ideal solution is to bring it back as-is. In your experience, is matching <code>expr</code> structurally instead of by unfication in fact the correct behavior in most cases, or is it merely that the former is easier to write down in Lean 3?</p>",
        "id": 225041306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612370013
    },
    {
        "content": "<p>Hmm, I'm not sure really. We definitely don't want to do semireducible matching usually; if <code>prime p</code> means <code>2 ≤ p ∧ ∀ m ∣ p, m = 1 ∨ m = p</code> then we don't want <code>push_neg</code> to unfold that. But we don't use reducible definitions very often, so I don't know whether it would make sense to unfold them or not.</p>",
        "id": 225042646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612370563
    },
    {
        "content": "<p>Fwiw, note that <code>match</code> with syntax quotations is in fact a macro completely separate from \"constructor <code>match</code>\". So there's precedent showing that custom <code>match</code> constructs can be introduced modularly (...almost. Identification of pattern variables is currently hard-coded).</p>",
        "id": 225043842,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612371037
    },
    {
        "content": "<p>I think the only thing expr match should do by default that it doesn't currently do is instantiate metavariables</p>",
        "id": 225050221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373475
    },
    {
        "content": "<p>(and only as needed to resolve a match against a metavariable)</p>",
        "id": 225050288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373502
    },
    {
        "content": "<p>You mean in the discriminant?</p>",
        "id": 225050907,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612373721
    },
    {
        "content": "<p>I'm not sure what you mean. If you match against <code>%%a /\\ %%b</code> and the expr is <code>?m</code> where <code>?m := a /\\ b</code> then the match should work and assign <code>a</code> and <code>b</code></p>",
        "id": 225051054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373784
    },
    {
        "content": "<p>but it shouldn't do anything else to the expression like unfold definitions</p>",
        "id": 225051112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373810
    },
    {
        "content": "<p>Yes, the expression(s) after <code>match</code> is called the discriminant in GHC lingo. So expr <code>match</code> would need to become monadic to support your case <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> .</p>",
        "id": 225051319,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612373887
    },
    {
        "content": "<p>It need not be syntactically <code>match</code></p>",
        "id": 225051420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373936
    },
    {
        "content": "<p>But it could be! :)</p>",
        "id": 225051458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612373950
    },
    {
        "content": "<p>I just want the ability to do that, and easily enough that I won't accidentally use <code>match</code> instead</p>",
        "id": 225051493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373963
    },
    {
        "content": "<p>because not instantiating metavariables in that position is a recurring source of bugs</p>",
        "id": 225051542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612373983
    },
    {
        "content": "<p>We originally had a separate <code>match_syntax</code> syntax, but reusing <code>match</code> is very convenient in practice because it means you can immediately use it with macros on top of it, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 225051756,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612374073
    },
    {
        "content": "<p>It's not uncommon to use things like <code> `(%%a /\\ %%b) &lt;- pure e</code>, putting things in the monad anyway even though it's not monadic, just because the left arrow gets this pattern match sugar</p>",
        "id": 225051758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374074
    },
    {
        "content": "<p>+1 to that</p>",
        "id": 225051784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612374087
    },
    {
        "content": "<p>So this <code>match</code> (and its RHSs) would have type <code>m A</code> where <code>[MonadMCtx m]</code></p>",
        "id": 225052370,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612374354
    },
    {
        "content": "<p>Yeah, I definitely think this would be great to have <em>outside</em> the stdlib :)</p>",
        "id": 225052432,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612374369
    },
    {
        "content": "<p>It's funny that the situation is exactly the opposite from syntax quotations: those are monadic when used as terms (because of hygiene), but their <code>match</code> is non-monadic</p>",
        "id": 225053041,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612374660
    },
    {
        "content": "<p>FWIW, I'd like to establish <code> `[A|...] </code> as the standard syntax for parsing a term of type <code>A</code> (using <code>A</code>'s \"standard DSL\" if any) and returning its evaluation: <a href=\"https://twitter.com/derKha/status/1354082976456441861\">https://twitter.com/derKha/status/1354082976456441861</a><br>\nSo it would be <code> `[Expr|e] </code>, and one could also (re)introduce <code> `[Tactic|t] </code> as a simple macro for <code>evalTactic (&lt;- `(tactic|t))</code>(though strictly speaking that term is of type <code>TacticM Unit</code>, not <code>Tactic</code>, which additionally takes a <code>Syntax</code>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1354082976456441861\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1291333830113206273/Owxrf3il_normal.jpg\"></a><p>Embedding the syntax of a simple WHILE language into Lean 4 via recursive macros <a href=\"https://t.co/VTgTLbXAvB\">https://twitter.com/derKha/status/1354082976456441861/photo/1</a></p><span>- Sebastian Ullrich (@derKha)</span><div class=\"twitter-image\"><a href=\"https://t.co/VTgTLbXAvB\"><img src=\"https://pbs.twimg.com/media/EsqrGDPXIAANE7U.png:thumb\"></a></div></div></div>",
        "id": 225055250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612375447
    }
]