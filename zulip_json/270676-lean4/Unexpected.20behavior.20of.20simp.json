[
    {
        "content": "<p>I don't understand why the simplifier works on the first example but not the second.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- this works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>In Lean3 the equivalent code works just fine</p>",
        "id": 238239686,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620698256
    },
    {
        "content": "<p>The error is just that it has reduced your goal to <code>False</code> (your axiom is unsound)</p>",
        "id": 238241302,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620699449
    },
    {
        "content": "<p>But then why does it work in Lean3?  I just want to stipulate that <code>succ (pred a) = a</code> for my type <code>int</code></p>",
        "id": 238242895,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620700749
    },
    {
        "content": "<p>What do you mean by 'work'?  Lean4's simplifier is doing you a favor by reducing the goal to <code>False</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 238243063,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620700898
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"n\">zero</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 238243154,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620700971
    },
    {
        "content": "<p>You have to make a new quotient type where <code>succ (pred a) ≈ a</code></p>",
        "id": 238243308,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620701121
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Eq.mp</span> <span class=\"o\">(</span><span class=\"n\">eqFalse'</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.noConfusion</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">e1</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">False</span>\n</code></pre></div>",
        "id": 238243708,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620701468
    },
    {
        "content": "<p>Interesting. So Lean3 is just not telling me my axiom is inconsistent and Lean4 is being more helpful in this case? Regarding quotient type, in this case I don't want a quotient type, I just want <code>int</code> with a stipulation that <code>succ (pred a) = a</code> by definition so that anywhere i have an int I can simplify it. I can do this by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int.succ</span> <span class=\"o\">(</span><span class=\"n\">int.pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">int.succ</span> <span class=\"o\">(</span><span class=\"n\">int.pred</span> <span class=\"n\">int.zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But then I can't tag a variable with <code>@[simp]</code></p>",
        "id": 238244203,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620701887
    },
    {
        "content": "<p>I think you're just confused about what it means to \"stipulate\" something here. <code>succ (pred a) = a</code> lets you prove false, whether you get it as an axiom or a hypothesis. You need quotient types to do this.</p>",
        "id": 238244374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620702021
    },
    {
        "content": "<p>^ or to represent your type so that every int has a unique syntactic representation, and then define <code>succ</code> and <code>pred</code> on top of that</p>",
        "id": 238244460,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620702076
    },
    {
        "content": "<p>I see - yes I misunderstood; thanks.  So my real interest was in trying to emulate a higher-inductive type because there's an elegant (appearing) definition of the integers a higher inductive type, where it appears you just get to define the equalities within the inductive type definition. But I guess there's no way emulate that.</p>",
        "id": 238245178,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620702641
    }
]