[
    {
        "content": "<p>Hello, here is my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">List.get_zero'</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">motive_demo</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.get_zero'</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The rw fails with <code>tactic 'rewrite' failed, motive is not type correct</code>. What does this error mean?</p>",
        "id": 318042260,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672123384
    },
    {
        "content": "<p>In short, you can't replace <code>l</code> by something equal to it because then in the subterm <code>l[0]'P</code>, <code>P</code> will no longer have the correct type.</p>",
        "id": 318049274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128171
    },
    {
        "content": "<p>It's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because if I cut and paste it into either Lean 3 or Lean 4 it doesn't compile for me :-(</p>",
        "id": 318088609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672144556
    },
    {
        "content": "<p>Ah, I forgot to copy the import of <code>Std.Data.List.Basic</code>.  Fixed the example now.</p>",
        "id": 318133636,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672162345
    },
    {
        "content": "<p>Does this mean that I basically can't use <code>List.get</code>inside lemmas I want to  rewrite with?</p>",
        "id": 318134255,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672162635
    },
    {
        "content": "<p>you can use <code>simp</code> to rewrite in dependent functions, but yes, you generally want to get rid of dependent functions to make rewriting easier</p>",
        "id": 318134332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672162676
    },
    {
        "content": "<p>the usual trick I use for <code>List.get l i h</code> is to replace it with <code>a</code> and a hypothesis <code>List.get? l i = some a</code></p>",
        "id": 318134480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672162733
    },
    {
        "content": "<p>and then rewrite in the hypothesis</p>",
        "id": 318134513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672162752
    },
    {
        "content": "<p>In this case, <code>simp [List.get_zero' l P]</code> also fails.  Is there something going on here where rewriting is actually wrong in some technical sense, or is it just a limitation of the tactics that they are unable to \"fix\" the proofs in the rewritten context?</p>",
        "id": 318134912,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672162952
    },
    {
        "content": "<p>I have noticed some regressions with lean 4 <code>simp</code> here, I think the congr lemmas are weaker than they used to be in lean 3</p>",
        "id": 318135203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163100
    },
    {
        "content": "<p>actually I get the very reasonable error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>when I try it, which suggests that it's working but is looping, which makes sense</p>",
        "id": 318135336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163162
    },
    {
        "content": "<p>So you would write this lemma as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">List.get_zero'</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l.tail</span>  <span class=\"bp\">∧</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 318135389,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672163172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.get_zero'</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">motive_demo</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.get_zero'</span> <span class=\"n\">l</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works</p>",
        "id": 318135404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163181
    },
    {
        "content": "<p>I'm not saying to change the lemma statement, it's an okay statement (although by convention it should be the other way around so that <code>simp</code> can use it). Rather, I was describing a technique for reasoning about terms containing <code>List.get</code> in a proof</p>",
        "id": 318135694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163297
    },
    {
        "content": "<p>Hmm, it looks like in my version of lean (nightly-2022-12-19) simp doesn't rewrite anything.</p>",
        "id": 318136105,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672163484
    },
    {
        "content": "<p>I'm on 12-16 so I don't think that's the issue</p>",
        "id": 318136331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163563
    },
    {
        "content": "<p>did you copy my message exactly?</p>",
        "id": 318136440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163593
    },
    {
        "content": "<p>Could you explain a bit more why <code>simp</code> will rewrite using this lemma but <code>rw</code> won't?  Is there another tactic I could use that would rewrite left to right only once without getting into the infinite loop?</p>",
        "id": 318136585,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672163651
    },
    {
        "content": "<p>Ok it looks like something else about the context of my proof is stopping <code>simp</code> from working, because it works in a fresh file for me.</p>",
        "id": 318136692,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672163700
    },
    {
        "content": "<p>you can tell simp to rewrite only once</p>",
        "id": 318136923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163776
    },
    {
        "content": "<p>I believe the mathlib <code>simp_rw</code> tactic sets the options on <code>simp</code> to make it more like <code>rw</code></p>",
        "id": 318136992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672163811
    },
    {
        "content": "<p>Hmm, so <code>simp_rw</code> seems to want to rewrite infinitely as well if possible. I can't seem to find the option to rewrite only once in the <code>simp</code> or <code>simp_rw</code> docs.</p>",
        "id": 318140551,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672165443
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">List.get_zero'</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">motive_demo</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">P</span><span class=\"o\">::</span><span class=\"n\">l.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">List.get_zero'</span> <span class=\"n\">l</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 318140699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672165519
    },
    {
        "content": "<p>Cool thanks!</p>",
        "id": 318140980,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672165665
    },
    {
        "content": "<p>That still seems to rewrite all instances of the lhs rather than just one.  Is there a way I could get it to behave even more like <code>rewrite</code>?</p>",
        "id": 318141417,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672165849
    },
    {
        "content": "<p>It seems like I can do it by using <code>conv</code> but that is annoying.</p>",
        "id": 318141543,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672165914
    },
    {
        "content": "<p>that is what <code>rw</code> does too</p>",
        "id": 318142158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672166250
    },
    {
        "content": "<p>if you want to only rewrite the lhs you should use <code>conv =&gt; lhs; simp</code></p>",
        "id": 318142191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672166264
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 318142401,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672166354
    }
]