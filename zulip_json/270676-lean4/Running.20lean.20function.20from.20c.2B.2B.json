[
    {
        "content": "<p>I would like to generate some C code with Lean and then call it from C++. Here is an attempt in a minimal example, but running it causes segmentation fault.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">//</span> <span class=\"n\">main.cpp</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">iostream</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean.h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"s2\">\"main.h\"</span>\n\n<span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"o\">(){</span>\n\n  <span class=\"n\">auto</span> <span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">test_string</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">auto</span> <span class=\"n\">str</span> <span class=\"bp\">=</span> <span class=\"n\">lean_to_string</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">str</span><span class=\"bp\">-&gt;</span><span class=\"n\">m_data</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"bp\">;</span>\n\n  <span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n\n  <span class=\"n\">return</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">//</span> <span class=\"n\">main.lean</span>\n\n<span class=\"kd\">@[export test_string]</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_string</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"Hello World \"</span> <span class=\"bp\">++</span> <span class=\"n\">x.toString</span>\n</code></pre></div>\n<p>I compile and run this with <code>lean -c main.h main.lean &amp;&amp; leanc -x c++ main.cpp -o main  &amp;&amp; ./main</code> Unfortunately, this causes segmentation fault.</p>\n<p>When generating <code>main</code> function from lean, the C code looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"n\">argc</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"bp\">**</span> <span class=\"n\">argv</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"k\">in</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">res</span><span class=\"bp\">;</span>\n    <span class=\"n\">lean_initialize_runtime_module</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n    <span class=\"n\">res</span> <span class=\"bp\">=</span> <span class=\"n\">initialize_main</span><span class=\"o\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n    <span class=\"n\">lean_io_mark_end_initialization</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lean_io_result_is_ok</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">lean_init_task_manager</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n      <span class=\"n\">res</span> <span class=\"bp\">=</span> <span class=\"n\">_lean_main</span><span class=\"o\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lean_io_result_is_ok</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">int</span> <span class=\"n\">ret</span> <span class=\"bp\">=</span> <span class=\"n\">lean_unbox</span><span class=\"o\">(</span><span class=\"n\">lean_io_result_get_value</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n      <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">ret</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">lean_io_result_show_error</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>The crucial part seems to be <code>lean_initialize_runtime_module()</code> the rest seems to be error handling and IO monad. After some digging I have found <code>lean/init_module.h</code> containing <code>lean::initialize_runtime_module</code> and <code>lean::finalize_runtime_module</code> but running these does not fix the problem.</p>",
        "id": 253768425,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1631896019
    },
    {
        "content": "<p>You have to call <code>initialize_main</code> as well. There is no header for that, but you can copy the signature from the generated code and declare it as <code>extern \"C\"</code>.</p>",
        "id": 253768980,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631896211
    },
    {
        "content": "<p>But what object am I supposed to pass to <code>initialize_main</code> ?  There is <code>lean_io_mk_world()</code> in the generated code, but what if I'm not interested in IO?</p>",
        "id": 253769701,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1631896531
    },
    {
        "content": "<p>Ok I did <code>extern \"C\" lean_object* initialize_main(lean_object* w)</code> and then <code>initialize_main(nullptr)</code>. It works but looks sketchy.</p>",
        "id": 253769911,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1631896622
    },
    {
        "content": "<p>Initializing a Lean module is inherently IO. The actual value of the parameter doesn't matter, but please just use <code>lean_io_mk_world</code>.</p>",
        "id": 253770128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631896714
    },
    {
        "content": "<p>Cool, it works  :)</p>",
        "id": 253770404,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1631896835
    },
    {
        "content": "<p>Technically you should also check the result (though in this case, initialization cannot fail) and free it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">lean_io_mark_end_initialization</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lean_io_result_is_ok</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">lean_init_task_manager</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">lean_io_result_show_error</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"n\">throw</span> <span class=\"bp\">...;</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>We might want to supply a helper function for doing that at some point.</p>",
        "id": 253771297,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631897237
    }
]