[
    {
        "content": "<p>(This follows <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Failed.20to.20generate.20equational.20theorem\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Failed.20to.20generate.20equational.20theorem</a> -- but this version of the issue still exists in nightly-2022-03-30, after the patch that is mentioned in the original topic)</p>\n<p>I came across the \"failed to generate equational theorem\" issue in some code of my own.<br>\nDetails follow in the next message which is very lengthy due to the traces.</p>\n<p>Is there a way to work around this other than defining the function myself in terms of <code>WellFounded.fix</code> ?<br>\nI can file an issue on lean4 if it seems relevant</p>",
        "id": 277316408,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648748741
    },
    {
        "content": "<p>Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">termination_by'</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition.wf.eqns</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition.structural.eqns</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>(It seems like the problem goes away when I fill the holes in <code>termination_by' </code> and <code>decreasing_by</code>, but I actually encounter this issue in another function where I did prove termination by hand, but I didn't use that function for the example because it requires much, much more work to define and to prove its termination. I can provide this function in a branch in the repo where I work, in case anyone wants to see it ;) )</p>\n<p>The <code>Elab.definition.structural.eqns</code> traces show what's happening:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.definition.structural.eqns</span><span class=\"o\">]</span> <span class=\"n\">mkEqnTypes</span> <span class=\"n\">step</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"bp\">=</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Elab.definition.structural.eqns</span><span class=\"o\">]</span> <span class=\"n\">mkEqnTypes</span> <span class=\"n\">step</span>\n<span class=\"n\">case</span> <span class=\"n\">h_1</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">t_1</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Note that, in the following context, there is a new hypothesis, ` : g n = 0`</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.definition.structural.eqns</span><span class=\"o\">]</span> <span class=\"n\">mkEqnTypes</span> <span class=\"n\">step</span>\n<span class=\"n\">case</span> <span class=\"n\">h_1.h_1</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">t_1</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The WF equations generator (<code>src/Lean/Elab/PreDefinition/WF/Eqns.lean</code>) is then stuck because it tries to reduce a goal where <code>g n</code> <em>never appears</em>, because it works on a goal where <code>g</code> has been reduced to its definition in terms of <code>WellFounded.fix</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.definition.wf.eqns</span><span class=\"o\">]</span> <span class=\"n\">step</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">((</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">WellFounded.fix</span> <span class=\"n\">g.proof_1</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n              <span class=\"n\">t</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n              <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n                <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n            <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 277316411,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648748745
    },
    {
        "content": "<p>Maybe a temporary solution for me would be to have access to a theorem that states <code>g</code> in terms of <code>WellFounded.rec</code>, is there such a theorem that is generated ?</p>",
        "id": 277317191,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648749096
    },
    {
        "content": "<p>I pushed a fix for this. The issue happens in declarations using nested recursion and overlapping patterns.<br>\nI added your example to the test suite.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/096e4eb6d0f56ba395bb658bea87518a8baa4b57\">https://github.com/leanprover/lean4/commit/096e4eb6d0f56ba395bb658bea87518a8baa4b57</a></p>\n<blockquote>\n<p>(This follows <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Failed.20to.20generate.20equational.20theorem\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Failed.20to.20generate.20equational.20theorem</a> -- but this version of the issue still exists in nightly-2022-03-30, after the patch that is mentioned in the original topic)</p>\n</blockquote>\n<p>The example on this thread has been on our test suite for a while. <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitIssue.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitIssue.lean</a><br>\nHave you tried a variant of this example?<br>\nI have also added today another test where we define this example without any unsound <code>sorry</code>s.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitList.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitList.lean</a><br>\nIt requires a bit of \"plumbing\" by it is doable in the current system.</p>",
        "id": 277356609,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648772235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/failed.20to.20generate.20equational.20theorem/near/277356609\">said</a>:</p>\n<blockquote>\n<p>I pushed a fix for this. The issue happens in declarations using nested recursion and overlapping patterns.<br>\nI added your example to the test suite.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/096e4eb6d0f56ba395bb658bea87518a8baa4b57\">https://github.com/leanprover/lean4/commit/096e4eb6d0f56ba395bb658bea87518a8baa4b57</a></p>\n</blockquote>\n<p>Great, thanks ! I'm impressed by how fast you fixed it :)<br>\nI just switched to the latest nightly and tested, everything works fine now in my code, thanks again !</p>",
        "id": 277397871,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648809484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/failed.20to.20generate.20equational.20theorem/near/277356609\">said</a>:</p>\n<blockquote>\n<p>The example on this thread has been on our test suite for a while. <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitIssue.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitIssue.lean</a><br>\nHave you tried a variant of this example?</p>\n</blockquote>\n<p>No, I didn't try this particular example because since you fixed it and I run a recent enough version, I thought I wouldn't be able to make Lean behave incorrectly from this particular example (I'm not sure if that's what you're asking though, sorry if I missed your point...)</p>",
        "id": 277397876,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648809487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/failed.20to.20generate.20equational.20theorem/near/277356609\">said</a>:</p>\n<blockquote>\n<p>I have also added today another test where we define this example without any unsound <code>sorry</code>s.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitList.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/splitList.lean</a><br>\nIt requires a bit of \"plumbing\" by it is doable in the current system.</p>\n</blockquote>\n<p>Would you be interested in an example that has no unsound <code>sorry</code> ? I guess I can build one if you want, modulo the time required by the plumbing</p>",
        "id": 277398163,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648809694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385405\">Julien Marquet</span> has marked this topic as resolved.</p>",
        "id": 277409376,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648816187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385405\">Julien Marquet</span> has marked this topic as unresolved.</p>",
        "id": 277412486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648817632
    },
    {
        "content": "<p>It seems like I've hit another bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">termination_by'</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The problem arises from the conditions that lie in the generated equations.<br>\nMy guess is that the equation generator should actually also generate unconditional equations: the theorem <code>ex3</code> is an example of an unconditional equation that we would like to have.<br>\nFrom the error, it also looks like <code>rw</code> only tries the first equation it finds (I'm not entirely sure though, maybe it only reports the first error ?)</p>",
        "id": 277413916,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648818175
    },
    {
        "content": "<p>(I've also hit a \"failed to generate unfold theorem\", I'm trying to write a MWE)</p>",
        "id": 277413989,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648818212
    },
    {
        "content": "<p>Here's a mwe that triggers \"failed to generate unfold theorem\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cons</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Subst</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">act</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Var</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Cons</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">strangers</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span><span class=\"o\">,</span> <span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">v</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Subst</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">strangers</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"bp\">×</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decr_left</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">r₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">rel.rel</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">depth</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">h</span>\n  <span class=\"gr\">admit</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decr_right</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">r₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Subst</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">rel.rel</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">h</span>\n  <span class=\"gr\">admit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">robinson</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Subst</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">robinson</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">some</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">robinson</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">f</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n      <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">some</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Cons</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Var</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span> <span class=\"n\">some</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n    <span class=\"k\">else</span> <span class=\"o\">⟨</span> <span class=\"n\">some</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">⟩</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">rel</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">decr_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">decr_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">robinson</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">robinson</span> <span class=\"c1\">-- fails here</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">unfold</span> <span class=\"kd\">theorem</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">robinson'</span>\n<span class=\"n\">case</span> <span class=\"n\">h_1.h_1</span>\n<span class=\"n\">u_1</span> <span class=\"n\">v_1</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">}</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">none</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n <span class=\"o\">:</span> <span class=\"n\">robinson</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">robinson</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₁</span> <span class=\"n\">r₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Cons</span> <span class=\"n\">l₂</span> <span class=\"n\">r₂</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The hypothesis <code>h : P none l₁ l₂</code> in this context looks suspicious imho (in my own code, I've seen the context cluttered by lots of such hypotheses that come from recursive calls, but that can't be proven automatically -- because the purpose of my theorem is to prove them)</p>\n<p>I've tried to make this example actually provable, but I don't have the patience to fill the <code>sorry</code>s right now :p</p>",
        "id": 277424050,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648822345
    },
    {
        "content": "<p>I think this example also triggers the bug I originally mentioned</p>",
        "id": 277424147,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648822390
    },
    {
        "content": "<p>I pushed fixes for both issues. They were due to different problems.</p>",
        "id": 277487687,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648853468
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/4a0f68de83995436e59567d235dd05f1e52e84b1\">https://github.com/leanprover/lean4/commit/4a0f68de83995436e59567d235dd05f1e52e84b1</a><br>\n<a href=\"https://github.com/leanprover/lean4/commit/a926cd1698bce3208591a901bd328f2258e0b697\">https://github.com/leanprover/lean4/commit/a926cd1698bce3208591a901bd328f2258e0b697</a></p>",
        "id": 277487729,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648853503
    }
]