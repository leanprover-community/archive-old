[
    {
        "content": "<p>When I have the <code>lean4</code> repository open in VSCode (where I've use <code>elan override</code> to tell the extension to use Lean 4), jump-to-definition (F12) works great with in a single file, but I just get <code>No definition found</code> for any definitions coming from imports.</p>\n<p>Does this work for others? Is it a known problem?</p>",
        "id": 261575652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637018578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> nope, that has been my experience as well</p>",
        "id": 261601772,
        "sender_full_name": "Mac",
        "timestamp": 1637043357
    },
    {
        "content": "<p>I mentioned this in an older thread (see <a href=\"#narrow/stream/270676-lean4/topic/Segfault.20due.20to.20mutual.20recursion.3F/near/255345029\">here</a>), but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> said it worked fined for him, so we were never able to hash out the problem.</p>",
        "id": 261601852,
        "sender_full_name": "Mac",
        "timestamp": 1637043458
    },
    {
        "content": "<p>I made an issue at <a href=\"https://github.com/leanprover/vscode-lean4/issues/77\">https://github.com/leanprover/vscode-lean4/issues/77</a></p>",
        "id": 261601937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637043558
    },
    {
        "content": "<p>just pulled the latest lean, and it still seems to be working, although I forget if I have any relevant <code>elan override</code> settings</p>",
        "id": 261602200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637043712
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">override</span> <span class=\"n\">list</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean4</span>                <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 261602274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637043803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, well that is probably why it is working -- it is not actually pointing to the custom Lean build as describing in <a href=\"https://leanprover.github.io/lean4/doc/dev/index.html?highlight=dev#dev-setup-using-elan\">dev setup for elan</a> section of the manual</p>",
        "id": 261602363,
        "sender_full_name": "Mac",
        "timestamp": 1637043874
    },
    {
        "content": "<p>ah right, I have not actually built lean</p>",
        "id": 261602421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637043901
    },
    {
        "content": "<p>Yes, I'm seeing the same thing now. It works with the nightly, but not with a local toolchain.</p>",
        "id": 261602425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637043907
    },
    {
        "content": "<p>if you look at to where its jumping to, you will probably notice it is going to the sources for the toolchain not those for the repo</p>",
        "id": 261602439,
        "sender_full_name": "Mac",
        "timestamp": 1637043945
    },
    {
        "content": "<p>yes, that's right</p>",
        "id": 261602484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637043977
    },
    {
        "content": "<p>that is not the goal XD</p>",
        "id": 261602510,
        "sender_full_name": "Mac",
        "timestamp": 1637044033
    },
    {
        "content": "<p>I treat lean4 repo as read only anyway so it's not a big deal for me, but if the dev build version is broken then I guess that should be fixed</p>",
        "id": 261602582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637044087
    },
    {
        "content": "<p>I've updated the desciption in the issue to reflect all this.</p>",
        "id": 261602635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637044185
    },
    {
        "content": "<p>Yes I have the same problem. As a partial solution, I have set <code>CMAKE_INSTALL_PREFIX</code> to point to <code>~/.elan/toolchain</code> and when rebuilding I run <code>make install</code>. Now jumping to definition works but jumps to the installed files in elan directory instead of the file in repo.</p>",
        "id": 261603663,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637045418
    },
    {
        "content": "<p>As posted on the vscode-lean4 issue, this is a known problem:</p>\n<p>Local builds don't know where the sources are.  There are several \"solutions\" for this:</p>\n<ul>\n<li>Set the <code>LEAN_SRC_PATH</code> environment variable.</li>\n<li><code>ln -s ~/lean4/src/ ~/lean4/build/release/stage1/lib/lean/</code></li>\n</ul>\n<p>Ideally, they'd be able to figure out the source path automatically, but that's a <code>lean4</code> issue not a <code>vscode-lean4</code> one.</p>",
        "id": 261614678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637054437
    },
    {
        "content": "<p>Yes, the first bullet is documented at <a href=\"https://github.com/kha/lean4/blob/781a28b8f4badddbc01d1a8a6822128d5173c65a/doc/dev/index.md?plain=1#L30-L33\">https://github.com/kha/lean4/blob/781a28b8f4badddbc01d1a8a6822128d5173c65a/doc/dev/index.md?plain=1#L30-L33</a>. We could automate the second bullet in cmake on Unix platforms.</p>",
        "id": 261614890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637054571
    },
    {
        "content": "<p>The symlink is not ideal either, because go-to-definition now goes to a different path than the actual source files.  But it's definitely a less confusing out-of-the-box experience.</p>",
        "id": 261614968,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637054627
    },
    {
        "content": "<p>Ahh... we <em>could</em> <code>realPath</code> it</p>",
        "id": 261615046,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637054660
    }
]