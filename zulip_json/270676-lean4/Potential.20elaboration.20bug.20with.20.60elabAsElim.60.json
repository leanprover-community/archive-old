[
    {
        "content": "<p>Calling <code>refine'</code> as below with a lemma marked as <code>elabAsElim</code> doesn't seem to be behaving correctly (on leanprover/lean4:nightly-2022-09-15):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Perm l₁ l₂` or `l₁ ~ l₂` asserts that `l₁` and `l₂` are Permutations</span>\n<span class=\"sd\">  of each other. This is defined by induction using pairwise swaps. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>   <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">swap</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Perm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Perm.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">Perm.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[elabAsElim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">P_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.recOn</span> <span class=\"n\">l</span> <span class=\"n\">h₁</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₂</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ih</span>\n  <span class=\"n\">Perm.recOn</span> <span class=\"n\">p</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P_refl</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">@</span><span class=\"n\">h₄</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_inv_core</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">revert</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">perm_induction_on</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n  <span class=\"c1\">-- Hypotheses include</span>\n  <span class=\"c1\">-- `e₁: l₁ ++ a :: r₁ = s₁`</span>\n  <span class=\"c1\">-- `e₂: l₂ ++ a :: r₂ = s₂`</span>\n  <span class=\"c1\">-- but these should be</span>\n  <span class=\"c1\">-- `e₁: l₁ ++ a :: r₁ = nil`</span>\n  <span class=\"c1\">-- `e₂: l₂ ++ a :: r₂ = nil`</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 299501275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663563554
    },
    {
        "content": "<p>This can be readily minimized to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Q</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>   <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">@[elabAsElim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Q_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Q.recOn</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">revert</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Q_induction_on</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n  <span class=\"c1\">-- Hypotheses include</span>\n  <span class=\"c1\">-- `e: l ++ a :: r = s`</span>\n  <span class=\"c1\">-- but this should should be</span>\n  <span class=\"c1\">-- `e: l ++ a :: r = nil`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 299537976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663582980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I cannot reproduce the errors above, could you please get the latest nightly build and try again?</p>",
        "id": 299567167,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663594948
    },
    {
        "content": "<p><code>elabAsElim</code> instructs Lean to use a different approach/heuristic to compute the implicit motive (<code>P</code> in your example). However, the motive does not take the major premise <code>p</code> as a parameter, and this information is necessary for the current implementation. The following variant works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Q</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>   <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">@[elabAsElim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Q_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Q.recOn</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">revert</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Q_induction_on</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 299573172,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663597050
    }
]