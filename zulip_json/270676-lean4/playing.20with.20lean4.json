[
    {
        "content": "<p>hmm so i have an inductive predicate and a theorem... i have absolutely no idea how to prove this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">less</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_le_seven</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">3</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">4</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">6</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">e</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">f</span> <span class=\"n\">d</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 244805462,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625318897
    },
    {
        "content": "<p>hmm... so i am not allowed to use <code>exact</code>? this proof works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_le_seven</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n  <span class=\"n\">less.trans</span> <span class=\"o\">(</span><span class=\"n\">less.trans</span> <span class=\"o\">(</span><span class=\"n\">less.trans</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244805543,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625319023
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_le_seven</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">3</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">4</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">less.intro</span> <span class=\"mi\">6</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">e</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">less.trans</span> <span class=\"n\">f</span> <span class=\"n\">d</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 244805864,
        "sender_full_name": "David Renshaw",
        "timestamp": 1625319555
    },
    {
        "content": "<p>I think the curly braces are the problem</p>",
        "id": 244805869,
        "sender_full_name": "David Renshaw",
        "timestamp": 1625319573
    },
    {
        "content": "<p>Here's my general solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_le_thirty_seven</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"mi\">3</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span>\n  <span class=\"n\">apply</span> <span class=\"n\">less.trans</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">try</span> <span class=\"n\">exact</span> <span class=\"n\">less.intro</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 244806099,
        "sender_full_name": "Deniz Aydin",
        "timestamp": 1625319766
    },
    {
        "content": "<p>hmm... now i want to do induction. help me out!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">less</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">i_want_to_be_extremely_general</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- ???</span>\n</code></pre></div>",
        "id": 244806408,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625320161
    },
    {
        "content": "<p>I think the induction tactic is what you want for this, and you should only need to do induction on b. Here's a template:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">i_want_to_be_extremely_general</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- tactics here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- tactics here</span>\n</code></pre></div>",
        "id": 244807909,
        "sender_full_name": "Deniz Aydin",
        "timestamp": 1625321973
    },
    {
        "content": "<p>thank you. I still feel like a fish out of water. how can I learn Lean 4 aside from guessing random stuff?</p>",
        "id": 244811859,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625327228
    },
    {
        "content": "<p>i'm pretty sure the induction thing is not mentioned in the manual, is it?</p>",
        "id": 244812311,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625327993
    },
    {
        "content": "<p>oops i was tripping sorry, it is mentioned in the Tactics section. still, any other resources?</p>",
        "id": 244812571,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625328358
    },
    {
        "content": "<p>also I'd like to learn lean4 metaprogramming too, I guess lean4 metaprogramming is much nicer right</p>",
        "id": 244815558,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625333089
    },
    {
        "content": "<p><a href=\"https://github.com/IPDSnelting/tba-2021\">tba-2021</a> is one possible place to start, but it assumes that you know nothing about interactive theorem proving and it was taught in a lab environment.</p>",
        "id": 244817172,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625335559
    },
    {
        "content": "<p>Now that the kernel has bignum arithmetic, you can supercharge the proof by converting it to a question about <code>Nat.ble</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">less</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_less_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">less.intro</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">less.trans</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_less_succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">less.intro</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">less.trans</span> <span class=\"o\">(</span><span class=\"n\">zero_less_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">less.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">less_of_le</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ble</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">less</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_less_succ</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ_less_succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">less_of_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_le_seven</span> <span class=\"o\">:</span> <span class=\"n\">less</span> <span class=\"mi\">3</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">less_of_le</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bigger</span> <span class=\"o\">:</span>\n  <span class=\"n\">less</span> <span class=\"mi\">2330429062458062834620348502348502</span>\n       <span class=\"mi\">720432084506248560245680248562034852034582304528</span> <span class=\"o\">:=</span> <span class=\"n\">less_of_le</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 244823614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625345424
    },
    {
        "content": "<p>Does Lean 4 automatically discard false branches? You didn't handle the succ a, 0 and 0, 0 case.</p>",
        "id": 244835090,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625364521
    },
    {
        "content": "<p>And yet the proof still works.</p>",
        "id": 244835093,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625364540
    }
]