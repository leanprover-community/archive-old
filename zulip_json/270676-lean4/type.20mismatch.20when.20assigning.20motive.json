[
    {
        "content": "<p>The following induction fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch when assigning motive</span>\n<span class=\"cm\">  fun {n n} h =&gt; False</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  {n n : Nat} → P n n → Prop : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  (a a_1 : Nat) → P a a_1 → Sort ?u.66 : Type ?u.66</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I can work around it with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>... but I feel like this should work. Is this sensible?</p>",
        "id": 279847842,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650645222
    },
    {
        "content": "<p>This also fails in Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">induction tactic failed, argument #1 of major premise type</span>\n<span class=\"cm\">  P n n</span>\n<span class=\"cm\">is an index, but it occurs more than once</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 279852038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650647067
    },
    {
        "content": "<p>This proof works in lean3 though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 279852081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650647092
    },
    {
        "content": "<p>You need dependent pattern matching. Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 279871427,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650657443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> The example I gave was just an MWE for showcasing the problem. In my real project I really do need induction, not just case distinction - so these approaches won't work then, right?</p>",
        "id": 279875352,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650659683
    },
    {
        "content": "<p>If you need the induction hypotheses, yes the approach above will not work. You could try to generalize your goal and make sure the indices of the type you want to induct are distinct free variables.</p>",
        "id": 279875634,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650659862
    },
    {
        "content": "<p>We will try to improve the error message.</p>",
        "id": 279875828,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650659957
    },
    {
        "content": "<p>Another option is to use <code>match</code> and get the inductive hypotheses by using recursion. Then, you can do dependent pattern matching without having to massage the major premise. We also have to do that when proving properties of mutually recursive functions. See example at the bottom of this section <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#mutual-recursion\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#mutual-recursion</a></p>",
        "id": 279876882,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650660636
    }
]