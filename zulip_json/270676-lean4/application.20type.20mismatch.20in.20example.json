[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">iff_of_true</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.elim</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> comment out following `attribute [simp]` to make the example at the bottom work-/</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">problem</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Func'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">toFun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Func'</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo.rfl_toFun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Func'.toFun</span> <span class=\"n\">foo.rfl</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo.rfl.toFun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">in the presence of `attribute [simp] eq_iff_true_of_subsingleton in`, one gets</span>\n\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Eq</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  Sort u_1</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  {α : Prop} → α → α → Prop</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noissue</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo.rfl.toFun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"c1\">-- this doesn't complain!</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Commenting out the <code>attribute [simp] eq_iff_true_of_subsingleton in</code> line makes the <code>example</code> work. The <code>theorem noissue</code> always works.</p>",
        "id": 309533447,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668403251
    },
    {
        "content": "<p>This is in the 2022-11-10 nightly.</p>",
        "id": 309533498,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668403286
    },
    {
        "content": "<p>This sort of thing can go direct to <a href=\"https://github.com/leanprover/lean4/issues\">https://github.com/leanprover/lean4/issues</a></p>",
        "id": 309542387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668410329
    },
    {
        "content": "<p>I reported it as <a href=\"https://github.com/leanprover/lean4/pull/1829\">lean4#1829</a></p>",
        "id": 309568641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668421861
    }
]