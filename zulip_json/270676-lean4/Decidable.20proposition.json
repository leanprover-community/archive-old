[
    {
        "content": "<p>Hi</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span>  <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>?</p>",
        "id": 276035544,
        "sender_full_name": "Pavel Shuhray",
        "timestamp": 1647861460
    },
    {
        "content": "<p>you have to provide an instance <code>[Decidable a]</code></p>",
        "id": 276035991,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647861705
    },
    {
        "content": "<p>(can also be done as a variable)</p>",
        "id": 276036002,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647861712
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">isTrue</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">isFalse</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 276038307,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647863278
    },
    {
        "content": "<p>If we're going to pull in <code>Classical.choice</code>, may as well use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 276038539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647863415
    },
    {
        "content": "<p>I think the underlying question might be \"if decidability implies LEM, can LEM be used for decidability?\" At least, that's the question I had when I read Pavel's question. (I think the answer is \"no\")</p>",
        "id": 276038626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647863472
    },
    {
        "content": "<p>And the answer to this question is \"no\"</p>",
        "id": 276038648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647863490
    },
    {
        "content": "<p>The existence of a function <code>if a then 0 else 1</code> is equivalent to <code>Decidable a</code> which is strictly stronger than <code>a \\/ ~a</code></p>",
        "id": 276038726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647863531
    },
    {
        "content": "<p>More general question: if we have a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃!</span> <span class=\"n\">x</span> <span class=\"n\">A</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>can we extract this unique x? I know problems with strong ∃ in Calculus of Constructions.</p>",
        "id": 276295809,
        "sender_full_name": "Pavel Shuhray",
        "timestamp": 1648019965
    },
    {
        "content": "<p>Not without choice no</p>",
        "id": 276295873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648020007
    },
    {
        "content": "<p>You can't move from Prop to Type in Lean without magic</p>",
        "id": 276295882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648020025
    }
]