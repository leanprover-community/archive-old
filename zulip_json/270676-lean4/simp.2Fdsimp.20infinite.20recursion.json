[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">AB</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ABC</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">AB</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">A_B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">AB_C</span> <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ABC</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ABC</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span>\n<span class=\"c1\">-- error: maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n</code></pre></div>\n<p>Removing the <code>@[simp]</code> theorems results in the following error, which shows that <code>dsimp</code> did not simplify at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ABC</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>The same behavior is observed when using <code>example : A (B (C p)) := by dsimp</code>.</p>",
        "id": 322634891,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1674256495
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322648304,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1674264511
    },
    {
        "content": "<p><code>abbrev</code> makes a transparent definition, so <code>dsimp</code> will see that <code>ABC p</code> is the same as <code>AB (C p)</code> and use <code>AB_C</code> to rewrite it back to <code>ABC p</code>.</p>",
        "id": 322673742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674283888
    },
    {
        "content": "<p>If I remove <code>A_B</code> then the error no longer occurs. Also, I did not mark <code>ABC</code> with <code>@[simp]</code>. Removing <code>A_B</code> and adding <code>@[simp]</code> to <code>ABC</code> does result in the infinite recursion that you describe, but the fact that it does not occur without <code>@[simp]</code> suggests that this isn't the cause of the issue.</p>",
        "id": 322734225,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1674311423
    },
    {
        "content": "<p>Have you tried <code>set_option trace.simplify.rewrites true</code> (or whatever the Lean 4 equivalent of it is) to see what simp rewrites with?</p>",
        "id": 322734460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674311519
    },
    {
        "content": "<p><code>set_option trace.Meta.Tactic.simp true in</code></p>",
        "id": 322735219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674311794
    },
    {
        "content": "<p>Yeah sorry, it actually matches <code>A_B</code> first to rewrite to <code>AB (C p)</code></p>",
        "id": 322735263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674311815
    },
    {
        "content": "<p>I don't understand why it takes two of these lemmas to make a loop, but neither lemma seems sensible when <code>AB</code> and <code>ABC</code> are abbrevs</p>",
        "id": 322735479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674311899
    }
]