[
    {
        "content": "<p>Is <code>Int</code> supposed to be arbitrary precision, like <code>Nat</code>? There's some weirdness with Int.negSucc around Int64Max:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (9223372036854775807 == Int64Max)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span> <span class=\"bp\">==</span> <span class=\"n\">Int64Min</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span> <span class=\"bp\">==</span> <span class=\"n\">Int64Min</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"mi\">9223372036854775807</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 229211153,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1615144828
    },
    {
        "content": "<p>Oh that's bad. Is it another proof of false?</p>",
        "id": 229212110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615145729
    },
    {
        "content": "<p>Not a proof of false, just a bad extern</p>",
        "id": 229212240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615145869
    },
    {
        "content": "<p>Yup, I donâ€™t think the kernel uses Int</p>",
        "id": 229212313,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1615145938
    },
    {
        "content": "<p>I suspect <a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L1301-L1302\">https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L1301-L1302</a> but that should also affect <code>Nat.succ</code></p>",
        "id": 229212550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615146135
    },
    {
        "content": "<p>Where did you get <code>Int64Min</code>? I don't see it on the master branch</p>",
        "id": 229212712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615146322
    },
    {
        "content": "<p>I am also not replicating your result of the first <code>#eval</code>. I get various numbers nondeterministically like -84788720, -67524080, -72164848 which seems worse</p>",
        "id": 229212921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615146507
    },
    {
        "content": "<p>(I get seg fault on <code>Lean (version 4.0.0-nightly-2021-03-06, commit be4cf605fde9, Release)</code> )</p>",
        "id": 229212966,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615146583
    },
    {
        "content": "<p>I suspect this is hitting C undefined behavior</p>",
        "id": 229213041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615146618
    },
    {
        "content": "<p>probably the negation <a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L1503\">here</a> when given <code>INT_MIN</code></p>",
        "id": 229213100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615146684
    },
    {
        "content": "<blockquote>\n<p>Where did you get Int64Min? I don't see it on the master branch</p>\n</blockquote>\n<p>Just my helper definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">UInt32Max</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">UInt32.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">UInt64Max</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int32Max</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">((</span><span class=\"n\">UInt32.size</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int32Min</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">((</span><span class=\"n\">UInt32.size</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int64Max</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">((</span><span class=\"n\">UInt64.size</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int64Min</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">((</span><span class=\"n\">UInt64.size</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>One other weird thing: if I take <a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L1509\">https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L1509</a> (impl of Int.negSucc) and replace it with a Lean-defined function that just calls these three native functions, everything works</p>",
        "id": 229213417,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1615146997
    },
    {
        "content": "<p>I think I see the error. The code does this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code>    <span class=\"n\">lean_obj_res</span> <span class=\"n\">s</span>  <span class=\"o\">=</span> <span class=\"n\">lean_nat_succ</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>    <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_obj_res</span> <span class=\"n\">i</span>  <span class=\"o\">=</span> <span class=\"n\">lean_nat_to_int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>  <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_obj_res</span> <span class=\"n\">r</span>  <span class=\"o\">=</span> <span class=\"n\">lean_int_neg</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>     <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Here <code>a</code> is 2^63-1. The first step is <code>lean_nat_succ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">LEAN_LIKELY</span><span class=\"p\">(</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">lean_usize_to_nat</span><span class=\"p\">(</span><span class=\"n\">lean_unbox</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"p\">...</span>\n</code></pre></div>\n<p>Since <code>a</code> is exactly the largest small nat, <code>lean_unbox(a) + 1</code> does not overflow and produces 2^63. Since this is now too big for a nat, <code>lean_usize_to_nat</code> returns a new mpz with value 2^63.</p>\n<p>The second step, <code>lean_nat_to_int</code>, does nothing because it's already an mpz.</p>\n<p>The third step, <code>lean_int_neg</code>, calls <code>lean_int_big_neg</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code>    <span class=\"k\">return</span> <span class=\"nf\">mpz_to_int</span><span class=\"p\">(</span><span class=\"n\">neg</span><span class=\"p\">(</span><span class=\"n\">mpz_value</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)));</span>\n</code></pre></div>\n<p><code>neg</code> is mpz negation and produces -2^63, assuming GMP is implemented correctly, so the last step is <code>mpz_to_int</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">&lt;</span> <span class=\"n\">LEAN_MIN_SMALL_INT</span> <span class=\"o\">||</span> <span class=\"n\">m</span> <span class=\"o\">&gt;</span> <span class=\"n\">LEAN_MAX_SMALL_INT</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">mpz_to_int_core</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">get_int</span><span class=\"p\">()));</span>\n</code></pre></div>\n<p>I'm not 100% sure those inequalities are working correctly, because <code>&lt;</code> is only overloaded for <code>int</code>, <code>unsigned</code> and <code>unsigned long</code>, so it might be casting them to unsigned longs or something, c++ integer promotion is weird. Assuming they work as advertised, we should go into the else branch, where we have more suspicious code: <code>m.get_int()</code> returns an <code>int</code> and is cast to an <code>unsigned</code> and promoted to a <code>size_t</code>, so if <code>int</code> and <code>unsigned</code> are 32 bit as is normal then this seems like it will hit UB (or at least overflow).</p>",
        "id": 229214806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615148260
    },
    {
        "content": "<p>Pushed a fix for this bug<br>\n<a href=\"https://github.com/leanprover/lean4/commit/8afa96d6c89d7e34e372dda2d2b58abb1378cf8f\">https://github.com/leanprover/lean4/commit/8afa96d6c89d7e34e372dda2d2b58abb1378cf8f</a></p>",
        "id": 229218161,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615151481
    }
]