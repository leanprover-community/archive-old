[
    {
        "content": "<p>What's the correct syntax for defining a user attribute? The following code does not work for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">builtin_initialize</span> <span class=\"n\">extAttr</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">extAttr</span> <span class=\"s2\">\"mark at ext\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasExtAttribute</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">extAttr.hasTag</span> <span class=\"n\">env</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Prod.Ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">q.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extAttr</span><span class=\"o\">]</span> <span class=\"n\">Prod.Ext</span>\n</code></pre></div>",
        "id": 232926620,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617384117
    },
    {
        "content": "<p>I don't think you are supposed to use the <code>builtin_</code> version of things unless you are inside the lean 4 repo</p>",
        "id": 232926856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617384215
    },
    {
        "content": "<p>unfortunately that means examples of the user facing version are hard to find</p>",
        "id": 232926892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617384237
    },
    {
        "content": "<p><code>initialize ...</code> doesn't work either</p>",
        "id": 232927248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617384377
    },
    {
        "content": "<p>This was asked a while ago; I'm not sure if things have changed since then: <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20add.20user.20attributes.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/How.20to.20add.20user.20attributes.3F</a></p>",
        "id": 232929817,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617385612
    },
    {
        "content": "<p>I've been looking at the source and I can't figure out why the posted code (with <code>initialize</code> in place of <code>builtin_initialize</code>) doesn't work</p>",
        "id": 232930396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617385907
    },
    {
        "content": "<p>I think <code>initialize</code> should be used inside a plugin like &lt;<a href=\"https://github.com/leanprover/lean4/tree/master/tests/plugin\">https://github.com/leanprover/lean4/tree/master/tests/plugin</a>&gt;.</p>",
        "id": 232930507,
        "sender_full_name": "pcpthm",
        "timestamp": 1617385952
    },
    {
        "content": "<p>Try applying it in a different file</p>",
        "id": 232930829,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617386129
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">register</span> <span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">extensions</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">be</span> <span class=\"n\">registered</span> <span class=\"n\">during</span> <span class=\"n\">initialization</span>\n</code></pre></div>",
        "id": 232931085,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617386243
    },
    {
        "content": "<p>That's after making a separate <code>src/Attribute/Ext.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">extAttr</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">extAttr</span> <span class=\"s2\">\"mark at ext\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasExtAttribute</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">extAttr.hasTag</span> <span class=\"n\">env</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and then in <code>src/Tactic/Ext.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">src.Attribute.Ext</span> <span class=\"c1\">-- failed to register environment, extensions can only be registered during initialization [1, 1]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Prod.Ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">q.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- unknown constant 'sorryAx' [3, 1]; expected token [3, 27]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extAttr</span><span class=\"o\">]</span> <span class=\"n\">Prod.Ext</span> <span class=\"c1\">-- unknown attribute [extAttr] [8,1]</span>\n</code></pre></div>",
        "id": 232931200,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617386306
    },
    {
        "content": "<p>How do you import relative paths like <code>import ..foo</code> ?</p>",
        "id": 232931308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386376
    },
    {
        "content": "<p>apparently <code>lean --make</code> doesn't exist anymore either... my approach of having a single <code>test.lean</code> file in the lean 4 source repo isn't scaling</p>",
        "id": 232931492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386435
    },
    {
        "content": "<p>You need to use <code>leanpkg</code> and absolute imports for multiple files</p>",
        "id": 232931822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617386579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> That... might be a bug or simply unimplemented behavior. I'd have to take a closer look at it at some other time.</p>",
        "id": 232931951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617386635
    },
    {
        "content": "<p>Sure thing, no rush. Thanks for taking a look whenever!</p>",
        "id": 232932019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617386652
    },
    {
        "content": "<p>How do absolute imports work if I want out of the root directory?</p>",
        "id": 232932099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386694
    },
    {
        "content": "<p>all my imports seem to be coming from some <code>.elan</code> directory</p>",
        "id": 232932131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386710
    },
    {
        "content": "<p>also what's <code>import runtime</code>?</p>",
        "id": 232932315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> FYI I use vanilla <code>Makefile</code>s and manage my own paths -- in particular, I don't use <code>leanpkg</code> or <code>elan</code> or <code>leanmk</code> or <code>nix</code>. I import files from different directories/modules all the time and my workflow is smooth. Happy to share details if you are interested.</p>",
        "id": 232932560,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617386934
    },
    {
        "content": "<p>that sounds good to me, I don't like build tools until I can do it by hand</p>",
        "id": 232932637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617386986
    },
    {
        "content": "<p>(typing in emacs, will paste when done)</p>",
        "id": 232933555,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617387437
    },
    {
        "content": "<ul>\n<li>\n<p>Lean4</p>\n<ul>\n<li>build <code>&lt;path-to-lean4&gt;/build/release</code> in Release mode</li>\n<li>build <code>&lt;path-to-lean4&gt;/build/debug</code> in Debug mode</li>\n<li>symlink <code>&lt;path-to-lean4&gt;/build/release</code> to <code>&lt;path-to-lean4&gt;/build/current</code><ul>\n<li>(this process is not necessary but makes it easy to swap release/debug when needed)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Environment variables:</p>\n<ul>\n<li><code>LEAN4_DIR=&lt;path-to-lean4&gt;/build/current/stage1/</code></li>\n<li><code>LEAN_PATH=$LEAN4_DIR/lib/lean</code></li>\n</ul>\n</li>\n<li>\n<p>For each project Foo located at <code>&lt;path-to-foo&gt;</code>:</p>\n<ul>\n<li>create <code>&lt;path-to-foo&gt;/Makefile</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"nv\">PKG</span> <span class=\"o\">=</span> Foo\n<span class=\"cp\">include $(LEAN4_DIR)/share/lean/lean.mk</span>\n\n<span class=\"nf\">all</span><span class=\"o\">:</span> <span class=\"k\">$(</span><span class=\"nv\">BIN_OUT</span><span class=\"k\">)</span>/<span class=\"n\">test</span>\n\n<span class=\"nf\">$(BIN_OUT)/test</span><span class=\"o\">:</span> <span class=\"k\">$(</span><span class=\"nv\">LIB_OUT</span><span class=\"k\">)</span>/<span class=\"n\">libFoo</span>.<span class=\"n\">a</span> <span class=\"p\">|</span> <span class=\"k\">$(</span><span class=\"nv\">BIN_OUT</span><span class=\"k\">)</span>\n    c++ -rdynamic -o <span class=\"nv\">$@</span> $^ <span class=\"sb\">`</span>leanc -print-ldflags<span class=\"sb\">`</span>\n</code></pre></div>\n<p>- create <code>&lt;path-to-foo&gt;/Foo.lean</code> and define <code>main : IO Unit</code> in it<br>\n  - create other files inside the <code>&lt;path-to-foo&gt;/Foo</code> directory, e.g. <code>&lt;path-to-foo&gt;/Foo/Bar/Rig.lean</code><br>\n  - In <code>&lt;path-to-foo&gt;</code>, <code>make</code> should now build <code>Foo.lean</code> and all lean files in <code>Foo/</code><br>\n  - after your first <code>make</code> (which creates the <code>build</code> directory), concatenate <code>:&lt;path-to-foo&gt;/build</code> to <code>LEAN_PATH</code><br>\n    - rough edge: if you <code>make clean</code> and try to remake, you will need to locally change the path during the call to <code>make</code> to avoid importing from the <code>build/</code> directory you are creating</p>\n<ul>\n<li>For every project whose <code>build/</code> directory has been added to your <code>LEAN_PATH</code>, you can now import:<ul>\n<li><code>import Foo.Bar.Rig</code></li>\n<li>(this includes <code>Foo</code> modules importing files within <code>Foo</code>)</li>\n</ul>\n</li>\n</ul>",
        "id": 232934473,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617387886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/user.20attributes/near/232932637\">said</a>:</p>\n<blockquote>\n<p>that sounds good to me, I don't like build tools until I can do it by hand</p>\n</blockquote>\n<p><code>leanpkg</code> prints out every step it's executing</p>",
        "id": 232946257,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617394501
    },
    {
        "content": "<p>FYI user attributes (and more generally user env extensions) are implemented now. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p><a href=\"https://github.com/leanprover/lean4/commit/cdd1dbbb36ce06608352e5d8ccf21089b2d4e91a\">https://github.com/leanprover/lean4/commit/cdd1dbbb36ce06608352e5d8ccf21089b2d4e91a</a><br>\n<a href=\"https://github.com/leanprover/lean4/commit/a77598f7cfcb058da41cf3af8a7120aeca68fe8c\">https://github.com/leanprover/lean4/commit/a77598f7cfcb058da41cf3af8a7120aeca68fe8c</a></p>\n<p>Be aware of <a href=\"https://github.com/leanprover/lean4/issues/588\">this little issue</a> though.</p>",
        "id": 247453467,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1627476427
    }
]