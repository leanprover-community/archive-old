[
    {
        "content": "<p>Is there a way to create an inductive type with a dependent recursive substructure?<br>\nLean says its kernel found a non-valid instance of the type being declared.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Indexed</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Indexed</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">List.head</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">List.drop</span> <span class=\"n\">index</span> <span class=\"n\">list</span><span class=\"o\">)</span>\n  <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">List.length</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Rose</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Indexed</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 282856772,
        "sender_full_name": "TheGreatCatAdorer",
        "timestamp": 1652912331
    },
    {
        "content": "<p>No, these kinds of inductive types cannot be accepted, because <code>m A</code> can be something like <code>A -&gt; False</code> which you can use to deduce contradictions</p>",
        "id": 282857498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652912808
    },
    {
        "content": "<p>maybe a better example, if you take <code>m A := A -&gt; Bool</code> in this definition, then <code>Rose m Unit</code> will violate cantor's theorem</p>",
        "id": 282857725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652912999
    },
    {
        "content": "<p>The kernel has an issue with the below definition.  Is there a way to do it in Lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Rose</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 282865402,
        "sender_full_name": "TheGreatCatAdorer",
        "timestamp": 1652918615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"501554\">@TheGreatCatAdorer</span> See above</p>",
        "id": 282865810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652918957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"501554\">@TheGreatCatAdorer</span> <br>\nYou can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">Rose</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Rose</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Any definition that uses <code>Rose</code> will also have to be marked as <code>unsafe</code>. <br>\nSee <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s explanation above to understand why it cannot be a regular Lean declaration.</p>",
        "id": 282866568,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652919615
    },
    {
        "content": "<p>Not sure exactly what you are trying to do, but you may also consider writing a macro that given a <code>m</code>, generates a new <code>Rose</code> type instantiated with the given <code>m</code>.</p>",
        "id": 282866704,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652919764
    },
    {
        "content": "<p>The macro expansion should work for many <code>m</code> we care in practice, and will fail for examples like the ones Mario mentioned above.</p>",
        "id": 282866760,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652919832
    },
    {
        "content": "<p>I do enjoy macros.</p>",
        "id": 282872032,
        "sender_full_name": "TheGreatCatAdorer",
        "timestamp": 1652925717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20type.20with.20dependent.20recursive.20substructure/near/282857725\">said</a>:</p>\n<blockquote>\n<p>maybe a better example, if you take <code>m A := A -&gt; Bool</code> in this definition, then <code>Rose m Unit</code> will violate cantor's theorem</p>\n</blockquote>\n<p>Why would it violate the theorem?</p>",
        "id": 282993542,
        "sender_full_name": "Joseph O",
        "timestamp": 1652995161
    },
    {
        "content": "<p>You get a type with the shape</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>or if we simplify things a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>Constructors of inductive types are always injective, so <code>Foo.tree : (Foo -&gt; Bool) -&gt; Foo</code> is an injective function, so <code>card (Foo -&gt; Bool) &lt;= card Foo</code>. But cantor's theorem says <code>card X &lt; card (X -&gt; Bool)</code> for any <code>X</code>, contradiction.</p>",
        "id": 283000616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652999544
    }
]