[
    {
        "content": "<p>Should the time obtained as \"lean-measured\" by executing <code>f x</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"lean-measured: \"</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>roughly correspond with the execution time of the program as measured by the OS?</p>\n<p>I am in a scenario where I expect nothing much to be happening, <code>timeit</code> reporting ~10ms and the program taking about half a second to execute.</p>\n<p>It's hard to make an MWE for this.</p>",
        "id": 255223833,
        "sender_full_name": "František Silváši",
        "timestamp": 1632838652
    },
    {
        "content": "<blockquote>\n<p>... roughly correspond with the execution time of the program as measured by the OS?</p>\n</blockquote>\n<p>Correct.</p>\n<blockquote>\n<p>I am in a scenario where I expect nothing much to be happening, timeit reporting ~10ms and the program taking about half a second to execute.</p>\n</blockquote>\n<p>This issue is due to transformations applied by the Lean compiler. In the future, we will make sure these transformations are automatically disabled when compiling a <code>timeit</code> expression. In the meantime, you can avoid the problem by writing an auxiliary function with the following annotations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"time: \"</span> <span class=\"n\">aux</span>\n</code></pre></div>",
        "id": 255274242,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632853938
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 255276667,
        "sender_full_name": "František Silváši",
        "timestamp": 1632854743
    },
    {
        "content": "<p>Note that <code>perf</code> and similar profilers work quite well on compiled Lean programs without the need for annotations</p>",
        "id": 255296062,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632861850
    }
]