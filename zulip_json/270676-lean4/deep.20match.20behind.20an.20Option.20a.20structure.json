[
    {
        "content": "<p>I'm trying to match what a function does, which itself performs matches, but each time I have to match a <code>mk</code> due to the structure definition, or the context is not quite what I wished for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"bp\">|</span> <span class=\"n\">Access</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Grab</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Push</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuation</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineClosure</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KrivineEnv</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">KrivineState</span> <span class=\"n\">where</span>\n  <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span>\n  <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span>\n  <span class=\"n\">stack</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalKrivineMachine</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">KrivineState</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">state.code</span><span class=\"o\">,</span> <span class=\"n\">state.env</span><span class=\"o\">,</span> <span class=\"n\">state.stack</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"o\">(</span><span class=\"n\">KrivineInstruction.Access</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">closures</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">c</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c'</span> <span class=\"n\">env</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">code</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">)</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">List.max</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depthUnsafe</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.max</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">depthUnsafe</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">codegen</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[implementedBy KrivineClosure.depthUnsafe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">closure</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">closure</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"n\">depth_env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">depth_env</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.max</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">closure</span> <span class=\"o\">::</span> <span class=\"n\">closures</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">KrivineClosure.depth</span> <span class=\"n\">closure</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">closures</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth_rel</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">measure</span> <span class=\"n\">depth</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth_wf</span><span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measureWf</span> <span class=\"n\">depth</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">correct</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fix</span> <span class=\"n\">depth_wf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">correct</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"n\">List.length</span> <span class=\"n\">e₀</span><span class=\"o\">](</span><span class=\"n\">compile.leftInv</span> <span class=\"n\">c₀</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">e₀</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">admit</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">KrivineEnv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KrivineState.correct</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"n\">List.length</span> <span class=\"n\">state.env</span><span class=\"o\">](</span><span class=\"n\">compile.leftInv</span> <span class=\"n\">state.code</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">KrivineEnv.correct</span> <span class=\"n\">state.env</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">KrivineEnv.correct</span> <span class=\"n\">state.stack</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- here I want to perform case-analysis on (evalKrivineMachine state0) return.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">transitionCorrectness</span> <span class=\"o\">(</span><span class=\"n\">state₀</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state₁</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hTransition</span><span class=\"o\">:</span> <span class=\"n\">evalKrivineMachine</span> <span class=\"n\">state₀</span> <span class=\"bp\">=</span> <span class=\"n\">state₁</span><span class=\"o\">):</span> <span class=\"n\">KrivineState.correct</span> <span class=\"n\">state₀</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KrivineState.correct</span> <span class=\"n\">state₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">match</span> <span class=\"n\">state₀.code</span><span class=\"o\">,</span> <span class=\"n\">state₀.env</span><span class=\"o\">,</span> <span class=\"n\">state₀.stack</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But, neither approach I use enable me to match properly the return of <code>evalKrivineMachine</code>, BTW, is it expected that <code>evalKrivineMachine state_0 = state_1</code> is smart enough to know that it is in fact: <code>evalKrivineMachine state_0 = some state_1</code> (which the context shows!) ?</p>",
        "id": 237489010,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620218941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/270676-lean4/topic/deep.20match.20behind.20an.20Option.20a.20structure/near/237489010\">said</a>:</p>\n<blockquote>\n<p>I'm trying to match what a function does, which itself performs matches, but each time I have to match a <code>mk</code> due to the structure definition, or the context is not quite what I wished for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">KrivineInstruction</span>\n<span class=\"bp\">|</span> <span class=\"n\">Access</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Grab</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Push</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuation</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">KrivineClosure</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KrivineEnv</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">KrivineClosure</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">KrivineState</span> <span class=\"n\">where</span>\n  <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"n\">KrivineInstruction</span>\n  <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span>\n  <span class=\"n\">stack</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalKrivineMachine</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">KrivineState</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">state.code</span><span class=\"o\">,</span> <span class=\"n\">state.env</span><span class=\"o\">,</span> <span class=\"n\">state.stack</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"o\">(</span><span class=\"n\">KrivineInstruction.Access</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">closures</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">c</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c'</span> <span class=\"n\">env</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">KrivineState.mk</span> <span class=\"n\">code</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">)</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">List.max</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depthUnsafe</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.max</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">depthUnsafe</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">codegen</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[implementedBy KrivineClosure.depthUnsafe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">KrivineClosure.depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineClosure</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">closure</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">closure</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"n\">depth_env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">depth_env</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.max</span> <span class=\"n\">head_depth</span> <span class=\"n\">tail_depth</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">KrivineEnv</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">closure</span> <span class=\"o\">::</span> <span class=\"n\">closures</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.max</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">KrivineClosure.depth</span> <span class=\"n\">closure</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">closures</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth_rel</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">measure</span> <span class=\"n\">depth</span>\n<span class=\"kd\">def</span> <span class=\"n\">depth_wf</span><span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measureWf</span> <span class=\"n\">depth</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">correct</span><span class=\"o\">:</span> <span class=\"n\">KrivineEnv</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">WellFounded.fix</span> <span class=\"n\">depth_wf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">correct</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">e₀</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">admit</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">correct</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">KrivineEnv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KrivineState.correct</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"o\">(</span><span class=\"n\">KrivineEnv.correct</span> <span class=\"n\">state.env</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">KrivineEnv.correct</span> <span class=\"n\">state.stack</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- here I want to perform case-analysis on (evalKrivineMachine state0) return.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">transitionCorrectness</span> <span class=\"o\">(</span><span class=\"n\">state₀</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state₁</span><span class=\"o\">:</span> <span class=\"n\">KrivineState</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hTransition</span><span class=\"o\">:</span> <span class=\"n\">evalKrivineMachine</span> <span class=\"n\">state₀</span> <span class=\"bp\">=</span> <span class=\"n\">state₁</span><span class=\"o\">):</span> <span class=\"n\">KrivineState.correct</span> <span class=\"n\">state₀</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KrivineState.correct</span> <span class=\"n\">state₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">match</span> <span class=\"n\">state₀.code</span><span class=\"o\">,</span> <span class=\"n\">state₀.env</span><span class=\"o\">,</span> <span class=\"n\">state₀.stack</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But, neither approach I use enable me to match properly the return of <code>evalKrivineMachine</code>, BTW, is it expected that <code>evalKrivineMachine state_0 = state_1</code> is smart enough to know that it is in fact: <code>evalKrivineMachine state_0 = some state_1</code> (which the context shows!) ?</p>\n</blockquote>\n<p>So to answer myself, I can match the <code>mk</code> constructor then rematch the variables.<br>\nThough, I'm still running into issues because it looks like Lean 4 is not able to eliminate an <code>match</code> after a <code>simp</code>, I'm getting this in my goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">recEnv</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n            <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">code</span> <span class=\"n\">recEnv</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"n\">KrivineInstruction.Access</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n            <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Push</span> <span class=\"n\">c'</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"o\">:=</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c'</span> <span class=\"n\">env</span> <span class=\"o\">::</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n            <span class=\"bp\">|</span> <span class=\"n\">KrivineInstruction.Grab</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"n\">code</span><span class=\"o\">,</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">KrivineClosure.pair</span> <span class=\"n\">c₀</span> <span class=\"n\">e₀</span> <span class=\"o\">::</span> <span class=\"n\">closures</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n            <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">x_2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">code</span>\n</code></pre></div>\n<p>And I think it can be simplified to <code>some { code := code, env := recEnv, stack := stack }</code> but I'm not sure how to debug this further.</p>",
        "id": 237712719,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620328028
    },
    {
        "content": "<p>Okay, I have a very simple repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">D</span>\n  <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">state.a</span><span class=\"o\">,</span> <span class=\"n\">state.b</span><span class=\"o\">,</span> <span class=\"n\">state.c</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">tail</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.B</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"n\">c</span> <span class=\"n\">env</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_0</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In my code, I would like to reduce the lhs into rhs, so <code>simp [eval]</code> turns into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]],</span> <span class=\"o\">[]</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subExpr</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.B</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">stack</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">x_2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>At any moment, this proof can be closed by <code>rfl</code>, but if I'm in a case where I would like to exploit the reduction, I would need to inject <code>have: eval $a = $target := by rfl</code> and use it. Is there any way to reuse simp here?</p>",
        "id": 238038227,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620569172
    },
    {
        "content": "<p>Ha, <code>have</code> is not working</p>",
        "id": 238038401,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620569392
    },
    {
        "content": "<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">D</span>\n  <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">state.a</span><span class=\"o\">,</span> <span class=\"n\">state.b</span><span class=\"o\">,</span> <span class=\"n\">state.c</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.A</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">C.pair</span> <span class=\"n\">c</span> <span class=\"n\">subExpr</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">tail</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.B</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">S.mk</span> <span class=\"n\">c</span> <span class=\"n\">env</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_0</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.1228</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1228</span>\n</code></pre></div>",
        "id": 238038452,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620569419
    },
    {
        "content": "<p>I don't understand how to debug this kind of issue as it looks like all unification are succeeding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n      <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n      <span class=\"n\">some</span>\n        <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n          <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">some</span>\n      <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n<span class=\"n\">invalid</span> <span class=\"n\">pattern</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.beforeMkLambda</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.checkTypes</span><span class=\"o\">]</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.1156</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Prop</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.final</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n</code></pre></div>",
        "id": 238040179,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620571248
    },
    {
        "content": "<p>Elaborator traces seems to show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.app.args</span><span class=\"o\">]</span> <span class=\"n\">explicit</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.1162</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"o\">[</span><span class=\"n\">Elab.app.finalize</span><span class=\"o\">]</span> <span class=\"n\">rfl</span>\n  <span class=\"o\">[</span><span class=\"n\">Elab.app.finalize</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">etaArgs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1164</span>\n  <span class=\"o\">[</span><span class=\"n\">Elab.app.finalize</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1157</span>\n</code></pre></div>\n<p>So if I understand well, <code>?m.1164</code> is <code>α</code> ?</p>",
        "id": 238040394,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620571487
    },
    {
        "content": "<p>Shouldn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That is, with a colon (and maybe with a name for the hypothesis) -- or I am missing something? I would think that is why you are getting \"invalid pattern\".</p>",
        "id": 238044923,
        "sender_full_name": "Mac",
        "timestamp": 1620576489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/deep.20match.20behind.20an.20Option.20a.20structure/near/238044923\">said</a>:</p>\n<blockquote>\n<p>Shouldn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That is, with a colon (and maybe with a name for the hypothesis) -- or I am missing something? I would think that is why you are getting \"invalid pattern\".</p>\n</blockquote>\n<p>In Lean 4, it is not AFAIK. <br>\nYour addition creates <code>expected identifier</code> error</p>",
        "id": 238046243,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620578037
    },
    {
        "content": "<p>It might need to be named in Lean 4? That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That's what I would expect from the \"expected identifier\" error.</p>",
        "id": 238050700,
        "sender_full_name": "Mac",
        "timestamp": 1620583172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/deep.20match.20behind.20an.20Option.20a.20structure/near/238050700\">said</a>:</p>\n<blockquote>\n<p>It might need to be named in Lean 4? That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">C.pair</span> <span class=\"o\">(</span><span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That's what I would expect from the \"expected identifier\" error.</p>\n</blockquote>\n<p>Surprisingly, it works, but I do not understand why the \"no name\" version fails as it has worked at some other points. Though, that indeed solves most of my issues.</p>\n<p>I can also do <code>have $type from $proof</code> to have a <code>this</code> local decl.</p>",
        "id": 238051289,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1620583691
    }
]