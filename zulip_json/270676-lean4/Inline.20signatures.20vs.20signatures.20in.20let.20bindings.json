[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> has encouraged me to report this: <a href=\"https://github.com/cognivore/FuncDep.lean/commit/55c9a46fd9fb94874861e3fe8ef7c7c9080f765e#r77932527\">https://github.com/cognivore/FuncDep.lean/commit/55c9a46fd9fb94874861e3fe8ef7c7c9080f765e#r77932527</a></p>",
        "id": 288813332,
        "sender_full_name": "cognivore",
        "timestamp": 1657204026
    },
    {
        "content": "<p>It should work because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>instCountParts_String.</mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\text{instCountParts\\_String.}\\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9933em;vertical-align:-0.31em;\"></span><span class=\"mord text\"><span class=\"mord\">instCountParts_String.</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> is <a href=\"https://github.com/cognivore/FuncDep.lean/blob/main/FuncDep.lean#L10\"> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb{N} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> </a>.</p>",
        "id": 288813477,
        "sender_full_name": "cognivore",
        "timestamp": 1657204090
    },
    {
        "content": "<p>Oh, what about <code>let n₂' := ((FuncDep.CountParts_.φ \"Tarmogoyf\" 'o') : Nat)</code>?</p>",
        "id": 288813567,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657204147
    },
    {
        "content": "<p>(just to make sure we're helping Lean with the right term)</p>",
        "id": 288813597,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657204173
    },
    {
        "content": "<p>It won't work. Or do you assume that <code>:</code> is right-associative <em>and</em> <code>'o' : Nat</code> would typecheck?  :D</p>",
        "id": 288813628,
        "sender_full_name": "cognivore",
        "timestamp": 1657204190
    },
    {
        "content": "<p>I'll try, one sec.</p>",
        "id": 288813642,
        "sender_full_name": "cognivore",
        "timestamp": 1657204199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Inline.20signatures.20vs.20signatures.20in.20let.20bindings/near/288813567\">said</a>:</p>\n<blockquote>\n<p>Oh, what about <code>let n₂' := ((FuncDep.CountParts_.φ \"Tarmogoyf\" 'o') : Nat)</code>?</p>\n</blockquote>\n<p>Same error.</p>",
        "id": 288813710,
        "sender_full_name": "cognivore",
        "timestamp": 1657204215
    },
    {
        "content": "<p>Here's a more distilled <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CountParts_</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n  <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CountParts_</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">Char</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span> <span class=\"o\">:=</span> <span class=\"n\">haystack.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">needle</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CountParts</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Somehow, Lean manages to see `Nat ~ CountParts_.α String` in the instance declaration! -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CountParts</span> <span class=\"n\">String</span> <span class=\"n\">Char</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">instCountParts_String.φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span>\n    <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CountParts</span> <span class=\"n\">String</span> <span class=\"n\">Char</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">instCountParts_String.φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   HAdd (CountParts_.α String) Nat ?m.4026</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CountParts</span> <span class=\"n\">String</span> <span class=\"n\">Char</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">instCountParts_String.φ</span> <span class=\"n\">haystack</span> <span class=\"n\">needle</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   HAdd (CountParts_.α String) Nat ?m.4098</span>\n</code></pre></div>\n<p>We were trying to understand why the first instance typechecks and the others don't<br>\nWe're on nightly from 2022-05-29 btw</p>",
        "id": 288815307,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657204892
    },
    {
        "content": "<p>I just tested on a more recent version (<code>leanprover/lean4:nightly-2022-07-04</code>) and the same error occurs</p>",
        "id": 288816693,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657205504
    },
    {
        "content": "<p>If I understand correctly, the difference is that <code>(x : T)</code> doesn't actually assign type <code>T</code> to <code>x</code> (it just hints at it) whereas <code>let y : T := x</code> actually does.</p>",
        "id": 288825159,
        "sender_full_name": "Mac",
        "timestamp": 1657208960
    },
    {
        "content": "<p>Here is an old thread with a part by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  on the topic: <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236380370\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236380370</a></p>",
        "id": 288825557,
        "sender_full_name": "Mac",
        "timestamp": 1657209118
    },
    {
        "content": "<p>The underlying cause is that class projections are not reducible. It works with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">CountParts_.α</span>\n</code></pre></div>",
        "id": 288827332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657209864
    },
    {
        "content": "<p>Wow, thank you, Sebastian! That's an interesting thing to learn about for me as a beginner <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 288949113,
        "sender_full_name": "cognivore",
        "timestamp": 1657291302
    }
]