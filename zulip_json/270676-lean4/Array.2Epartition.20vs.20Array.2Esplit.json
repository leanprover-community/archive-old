[
    {
        "content": "<p>What's the difference between <code>Array.partition</code> and <code>Array.split</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n      <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">bs.push</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">split</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"bp\">#</span><span class=\"o\">[]))</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">as.push</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs.push</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>To me they look like they're doing the same thing.</p>",
        "id": 298230169,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662890577
    },
    {
        "content": "<p>They are the same. There are several instances of this in the core library; I would prefer the name <code>Array.partition</code> to match <code>List.partition</code></p>",
        "id": 298303010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662945832
    },
    {
        "content": "<p>(although the <code>split</code> implementation is easier to prove properties about)</p>",
        "id": 298303063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662945868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2Epartition.20vs.20Array.2Esplit/near/298303010\">said</a>:</p>\n<blockquote>\n<p>There are several instances of this in the core library</p>\n</blockquote>\n<p>Why is this? Is <code>partition</code> more efficient than <code>split</code>?</p>",
        "id": 298319834,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662964377
    },
    {
        "content": "<p>no, I think it's just oversight</p>",
        "id": 298320135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662964622
    },
    {
        "content": "<p>I fixed a few examples of duplication yesterday</p>",
        "id": 298320149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662964638
    },
    {
        "content": "<p>I would expect that  <code>split</code> is more efficient than <code>partition</code> because it doesn't have the overhead of the <code>ForInStep</code> stuff</p>",
        "id": 298320270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662964703
    },
    {
        "content": "<p>but I doubt the difference is noticeable</p>",
        "id": 298320305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662964735
    },
    {
        "content": "<p>the more noticeable thing is when those combinators show up in reasoning</p>",
        "id": 298320339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662964760
    }
]