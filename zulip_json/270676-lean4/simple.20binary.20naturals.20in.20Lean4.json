[
    {
        "content": "<p>I can see that I can't really do better than this when I'm converting from the peano definitions, but ... Surely Lean itself doesn't represent the number 54321 internally as a linked list of that many <code>succ</code> applications, right? I can see references to UInt32 ... but I don't (yet) see anything like <code>even</code> or <code>odd</code> or <code>giveMeTheBitsOfThisArbitrarilySizedUnsignedInteger</code>...</p>\n<p>should I care about this at all?</p>",
        "id": 287506731,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656267489
    },
    {
        "content": "<p>Lean will internally use big integers (right now GMP but there is a plan to move away from that eventually) to represent a <code>Nat</code>, the <code>UInt</code> types you are mentioning get translated to their C equivalent by the compiler. The reason you are not seing methods defined on stuff is that we didn't need them yet so nobody wrote them.</p>",
        "id": 287506857,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656267697
    },
    {
        "content": "<p>Either way your implementation will indeed be far inferior to the built-in <code>Nat</code> performance wise.</p>",
        "id": 287506916,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656267758
    },
    {
        "content": "<p>fair enough. i don't need to use it for actual calculations. just wanted to make sure i understood. thanks, <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> !</p>",
        "id": 287507115,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656268001
    },
    {
        "content": "<p>code is here if anyone is interested: <a href=\"https://github.com/tangentstorm/tangentlabs/blob/master/lean4/Bin/Bin.lean\">https://github.com/tangentstorm/tangentlabs/blob/master/lean4/Bin/Bin.lean</a></p>",
        "id": 287507330,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656268314
    },
    {
        "content": "<p>My other main question is from a math/proof perspective. I included this constructor that represents the infinite stream of zeros... So the mapping between Nat -&gt; Bin is a 1-to-many relationship. (I don't know what you call it in math land.)  Like...     1 is  <code>I B</code> but so is <code>I O B</code> and <code>I O O O O O B</code> .... </p>\n<p>Bascially, <code>B</code> is an infinite stream of zero digits, so you can multiply it by 2 as many times as you like and it's still the same.</p>\n<p>How would I approach telling Lean that I expect this to map 1-to-1 with <code>Nat</code>, but only for some well-behaved <code>Bin</code> instances?</p>",
        "id": 287507809,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656268927
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wellFormed</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">O</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">O</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wellFormed</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wellFormed</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 287507969,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656269163
    },
    {
        "content": "<p>You could for example define what it means to be a well behaved bin instance and then tell lean that if you have a bin instance that is well behaved there exists a bijection between Nat and Bin.</p>\n<p>The nicest way would however be if you were to drop your current representation and would attempt to come up with one that can only produce well behaved values, for example one might come up with a non empty list of 0s and 1s type like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bin</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BinNumber</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BinNumber</span>\n  <span class=\"bp\">|</span> <span class=\"n\">additional</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BinNumber</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BinNumber</span>\n</code></pre></div>\n<p>though there are of course many ways to represent binary numbers that might be better than this</p>",
        "id": 287508035,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656269282
    },
    {
        "content": "<p>In Lean 3 we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pos_num\">docs#pos_num</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/num\">docs#num</a> which do this.</p>",
        "id": 287508077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656269332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> i like that, but it doesn't quite solve the problem....    you can still do <code>additional zero (single zero)</code>...</p>",
        "id": 287508475,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656269963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has an awesome lean 3 tutorial that just does away with zero <a href=\"https://www.youtube.com/watch?v=9f7WQkKd6x0\">https://www.youtube.com/watch?v=9f7WQkKd6x0</a> but i guess i wanted to make things complicated for myself. :)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9f7WQkKd6x0\" href=\"https://www.youtube.com/watch?v=9f7WQkKd6x0\"><img src=\"https://uploads.zulipusercontent.net/9da377ef57d592482ec3725decdf894787b74e0d/68747470733a2f2f692e7974696d672e636f6d2f76692f39663757516b4b643678302f64656661756c742e6a7067\"></a></div>",
        "id": 287508519,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270004
    },
    {
        "content": "<p>i see that is <code>pos_num</code></p>",
        "id": 287508547,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270046
    },
    {
        "content": "<p>aha! and then <code>num</code> creates a bigger type with the zero.</p>",
        "id": 287508568,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270096
    },
    {
        "content": "<p>still i feel like part of the promise of a dependent type system is that i should be able to do this my (possibly dumb) way. :)</p>",
        "id": 287508642,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270220
    },
    {
        "content": "<p>Sure, you can define your well behaved thingy and then use a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype#doc\">docs4#Subtype</a> to define well behaved binary numbers based on that but things will get a little annoying on recursive calls because you have to always provide proofs that your well behavedness property is not broken.</p>\n<p>The general rule of thumb i've learn from CPDT is that if you have a simpler way that does not involve using a dependent type use it.</p>",
        "id": 287508738,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656270318
    },
    {
        "content": "<p>If you have too many things representing one thing then you can also take a quotient.</p>",
        "id": 287508760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656270347
    },
    {
        "content": "<p><a href=\"http://adam.chlipala.net/cpdt/\">http://adam.chlipala.net/cpdt/</a> ?</p>",
        "id": 287509137,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270792
    },
    {
        "content": "<p>Yes</p>",
        "id": 287509150,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656270813
    },
    {
        "content": "<p>Is porting <code>pos_num</code> and <code>num</code> to lean4 something we want, and just nobody's gotten around to it, or are they going away in mathlib4?</p>",
        "id": 287509214,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656270898
    },
    {
        "content": "<p>You could basically copy their definition and change the naming scheme and everything would be fine already.</p>\n<p>That being said the Lean3-&gt;4 porting tool mathport will eventually take care of it</p>",
        "id": 287509283,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656270979
    },
    {
        "content": "<p>Aha. The parsing and compilation features are actually the whole reason I wanted to learn lean4 instead 3. I was going to offer to volunteer to do the porting work, but maybe my time would be better spent learning about mathport.</p>",
        "id": 287509451,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656271282
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/blog/posts/intro-to-mathport/\">blog post</a> is now 6 months out of date but contains at least some basic information.</p>",
        "id": 287509842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656271756
    },
    {
        "content": "<p>The main thing that will be necessary apart from mathport is porting the lean 3 tactics to lean 4 for which we are currently putting together ressources here: <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/\">https://github.com/arthurpaulino/lean4-metaprogramming-book/</a>, if you wanna help the porting effort porting tactics will probably be the most efficient way</p>",
        "id": 287510311,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656272429
    },
    {
        "content": "<p>i would definitely like to get into tactics, but i feel like that's probably too much for me to learn all as a next step.</p>",
        "id": 287510727,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656273033
    },
    {
        "content": "<p>Looking at <a href=\"https://raw.githubusercontent.com/leanprover-community/mathlib/master/src/data/num/basic.lean\">https://raw.githubusercontent.com/leanprover-community/mathlib/master/src/data/num/basic.lean</a>  and <a href=\"https://raw.githubusercontent.com/leanprover-community/mathlib3port/master/Mathbin/Data/Num/Basic.lean\">https://raw.githubusercontent.com/leanprover-community/mathlib3port/master/Mathbin/Data/Num/Basic.lean</a> , I think I see some low-hanging fruit where the translation is breaking.</p>",
        "id": 287510837,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656273188
    },
    {
        "content": "<p>is <code>cases_on</code> a tactic?</p>",
        "id": 287510841,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656273198
    },
    {
        "content": "<p>No it is a function the Lean compiler is generating automatically on things out of <code>Type u</code>, what things are you seeing that break?</p>",
        "id": 287510927,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656273331
    },
    {
        "content": "<p>basic things i'm seeing:</p>\n<ul>\n<li>it couldn't figure out the lean4 version of <code>@deriving has_reflect</code> (if there is one?)</li>\n<li>the presence of  <code>has_one</code> or <code>has_zero</code> in the input should trigger an <code>import Mathlib.Algebra.Group.Defs</code> line in the output</li>\n<li>it's choosing to capitalize the <code>pos</code> constructor for <code>Posnum</code> and <code>Znum</code> in some outputs (but not others), while <code>zero</code> and <code>neg</code> remain lower case.</li>\n</ul>",
        "id": 287511596,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">PosNum</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>lean4 wants the references to <code>add</code> in this output to be <code>PosNum.add</code> ... maybe because <code>add</code> is marked protected?</p>",
        "id": 287511657,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274263
    },
    {
        "content": "<p>here is where <code>cases_on</code> is causing trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pred'</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">Num</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Num.pos</span> <span class=\"o\">(</span><span class=\"n\">Num.casesOn</span> <span class=\"o\">(</span><span class=\"n\">pred'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">bit1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Num.pos</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287511675,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274285
    },
    {
        "content": "<p>this one was originally called <code>nat_size</code> and gets renamed, but not in the recursive calls:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natSize</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat_size</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat_size</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287511763,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274391
    },
    {
        "content": "<p><code>cmp</code> returns an <code>Ordering</code> and the constants are mis-capitalized...</p>",
        "id": 287511824,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274455
    },
    {
        "content": "<p>and so on.  these all seem like low-hanging fruit to me (except <code>cases_on / casesOn</code> and possibly finding a replacement for <code>has_reflect</code>)</p>",
        "id": 287511840,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274477
    },
    {
        "content": "<p>but also i'm saying that before looking at the transpiler. :D</p>",
        "id": 287511879,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656274539
    },
    {
        "content": "<p>i think the <code>casesOn</code> is actually fine, it's the recursive call that's the problem.</p>",
        "id": 287512377,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656275276
    },
    {
        "content": "<p>there aren't really that many proofs in this file. the only tactic i see being used is <code>dsimp'</code> , which does seem to be missing.</p>",
        "id": 287512584,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656275565
    },
    {
        "content": "<p>okay. I will commit to manually porting this file.</p>\n<p>If succeed at that, I will look into having mathport make my changes automatically, but I'm not quite ready to commit to that yet.</p>",
        "id": 287512699,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656275762
    },
    {
        "content": "<p>the <code>has_reflect</code> part will actually have to be a meta program since deriving handlers are meta programs :p, apart from that it should definitely be possible. If you wanna help with mathport the people to talk to will be Gabriel Ebner and Daniel Selsam</p>",
        "id": 287512870,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656275956
    },
    {
        "content": "<p>ok. should I just keep posting in this thread, or make a new one somewhere else?</p>",
        "id": 287513047,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656276182
    },
    {
        "content": "<p>To my knowledge there hasn't been a thread regarding people that want to contribute to mathport yet so it could definitely be worth to make a new one to discuss that</p>",
        "id": 287513207,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656276369
    },
    {
        "content": "<p>oh i see. my understanding is that lean4 has a general parsing framework at its core... maybe tactics, <code>has_reflect</code> and <code>mathport</code> itself are all using this same framework.</p>",
        "id": 287513497,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656276763
    },
    {
        "content": "<p>in that case, tactics are probably just little compilers that also have access to the current state and a database of known theorems... huh.</p>",
        "id": 287513536,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656276829
    },
    {
        "content": "<p>If you want to know what Lean 4 does in detail you can read the meta programming book linked above^^</p>\n<p>To sum it up:</p>\n<ul>\n<li>you can define close to arbitrary syntax with it</li>\n<li>you can define macros, that is syntax -&gt; syntax translations to give a semantic to your syntax</li>\n<li>you can define term elaborators (they turn syntax into expressions, that is the low level dependent lambda calculus lean is based on) and command elaborators (the thing that handle stuff like <code>def</code>, <code>theorem</code> and interact with what is called the <code>Environmentm</code>)</li>\n<li>you can define tactics which are an abstraction even stronger than term elaborators, they use meta variables to incrementally construct expressions which are then fed to the type checker in order to check your proof (though tactics can in theory also create non proof terms but that is another topic)</li>\n</ul>\n<p>mathport has two modes of operation, the first is binport which turns the lean 3 binary .olean format into lean 4 one and is already working quite well, the second one is synport which does the syntax -&gt; syntax translation, looking at the mathport code it does not seem to me like they are making use of this machinery explained above.</p>",
        "id": 287513901,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656277262
    },
    {
        "content": "<p>looking at <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Parse.lean\">https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Parse.lean</a>  my guess is they wrote a custom parser for lean3, but then they're using <code>Lean.Expr</code> for lean 4</p>",
        "id": 287514040,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656277456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423842\">@michal wallace (tangentstorm)</span> To implement that function more efficiently than by unary recursion, you can just do repeated halving of the input number.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bin</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">B</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">((</span><span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 287515495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656279702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> aha! yeah, that's exactly what i wanted to write, but I didn't realize I had access to % (I was looking for something named <code>even</code> or <code>odd</code>). Thanks!</p>",
        "id": 287521838,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656289465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/simple.20binary.20naturals.20in.20Lean4/near/287510927\">said</a>:</p>\n<blockquote>\n<p>No it is a function the Lean compiler is generating automatically on things out of <code>Type u</code>, what things are you seeing that break?</p>\n</blockquote>\n<p>So in lean 4, <code>casesOn</code> seems to require an extra parameter: <code>(motive =: fun _ =&gt; T)</code>... For Data/Num/Basic, T was either <code>Num</code> or <code>Ordering</code>...  I started a <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20improvements.20for.20.60data.2Enum.2Eadd.60\">new thread for the required mathport changes</a>.</p>",
        "id": 287587391,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656340950
    }
]