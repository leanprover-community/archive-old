[
    {
        "content": "<p>Is this expected? It seems reducing <code>String.data</code> is somehow terribly expensive. Bumping <code>maxRecDepth</code> doesn't help, it runs out of stack space.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"c1\">-- []</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312679986,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669656448
    },
    {
        "content": "<p>Yes, this is expected.</p>",
        "id": 312684555,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1669657398
    },
    {
        "content": "<p>why do you need to <code>#reduce</code> it?</p>",
        "id": 312685196,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669657605
    },
    {
        "content": "<p>This is the same issue in lean 3 when you <code>#reduce 'a'</code></p>",
        "id": 312685712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669657767
    },
    {
        "content": "<p>the problem is that a <code>char</code>  is a unicode scalar value, which is a natural number less than <code>0x110000</code>; even though you don't have to work out the numeral itself in lean 4 to unary anymore you still have to work out the proof that 97 is less than this value which is also ultimately encoded in unary</p>",
        "id": 312685997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669657860
    },
    {
        "content": "<p>If you strip the proofs it is fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toNat</span><span class=\"o\">)</span> <span class=\"c1\">-- [97]</span>\n</code></pre></div>",
        "id": 312686334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669657942
    },
    {
        "content": "<p>Oh of course, I see. So this would reduce okay were the kernel not to reduce proofs, right?</p>",
        "id": 312687779,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669658385
    },
    {
        "content": "<p>yes</p>",
        "id": 312688041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669658447
    },
    {
        "content": "<p>it wouldn't be hard to expose an option to do that either, <code>#reduce</code> isn't something the kernel does anyway, IIRC it's just a frontend command</p>",
        "id": 312688186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669658489
    },
    {
        "content": "<p>I guess we really should implement <a href=\"https://github.com/leanprover/lean4/blob/d780ed12b391baa3823afee9f79217becef684aa/src/Lean/Elab/BuiltinCommand.lean#L252\">https://github.com/leanprover/lean4/blob/d780ed12b391baa3823afee9f79217becef684aa/src/Lean/Elab/BuiltinCommand.lean#L252</a>. And probably default <code>skipProofs</code> to <code>true</code>.</p>",
        "id": 312688747,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669658645
    },
    {
        "content": "<p>I think there is an argument for just removing <code>#reduce</code> entirely and moving it to std. It's more of a teaching tool than anything else</p>",
        "id": 312689053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669658759
    },
    {
        "content": "<p>and I think people semi-frequently get it confused with <code>#eval</code></p>",
        "id": 312689223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669658804
    }
]