[
    {
        "content": "<p>After seeing the compiler team add so many doc strings especially to fields of structure types etc. in the past few days I decided to take a look into rendering these in doc-gen4 as well, however I'm not 100% sure yet how to do this visually (since I suck at UX and webdev after all :p) So for example with the doc string of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Context#doc\">docs4#Lean.Meta.Context</a> would you prefer to have the giant blob of a doc string inline into the structure declaration as it is within the code: <a href=\"https://github.com/leanprover/lean4/blob/6aee3fb30465da8e0e3df12651832f548cb0159b/src/Lean/Meta/Basic.lean#L176-L192\">https://github.com/leanprover/lean4/blob/6aee3fb30465da8e0e3df12651832f548cb0159b/src/Lean/Meta/Basic.lean#L176-L192</a> or something different? If yes, what's your alternatives?</p>\n<p>Same question for doc strings on inductive type ctors.</p>",
        "id": 278415708,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649518740
    },
    {
        "content": "<p>you could have doc text between the lines of monospace text</p>",
        "id": 278415994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649519139
    },
    {
        "content": "<p>Minus the indendation (that's missing some dark CSS magic) (I'm also not sure why the markdown renderer made a code block out of the remark) that would look like this: <a href=\"/user_uploads/3121/1PLIg_xY99RwoVEBfGOemRq3/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1PLIg_xY99RwoVEBfGOemRq3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1PLIg_xY99RwoVEBfGOemRq3/image.png\"></a></div><p>Which is fine ish I'd say?</p>",
        "id": 278423771,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649528854
    },
    {
        "content": "<p>Is the remark indented?</p>",
        "id": 278424288,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649529573
    },
    {
        "content": "<p>You can see the markdown in the github link above, it shouldn't be rendering as a code block IMO.</p>",
        "id": 278424596,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649530027
    },
    {
        "content": "<p>Is there another occurrence of a comment block with two+ paragraphs? It might be related. What's the corresponding markdown that was generated?</p>",
        "id": 278424765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649530258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278423771\">said</a>:</p>\n<blockquote>\n<p>Which is fine ish I'd say?</p>\n</blockquote>\n<p>IMO it is a little hard to tell whether the comment is about the field above or below it</p>",
        "id": 278425063,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649530699
    },
    {
        "content": "<p>(Is it possible to make the vertical offset different above vs below?)</p>",
        "id": 278425092,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649530771
    },
    {
        "content": "<p>First things first this is how it looks without the CSS messing up the generated indentation: <a href=\"/user_uploads/3121/62vfco8-oN362i6qnLoBnKpV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/62vfco8-oN362i6qnLoBnKpV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/62vfco8-oN362i6qnLoBnKpV/image.png\"></a></div>",
        "id": 278425208,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649530832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425092\">said</a>:</p>\n<blockquote>\n<p>(Is it possible to make the vertical offset different above vs below?)</p>\n</blockquote>\n<p>Oh for sure it is I just dont know how..yet</p>",
        "id": 278425244,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649530899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278424765\">said</a>:</p>\n<blockquote>\n<p>Is there another occurrence of a comment block with two+ paragraphs? It might be related. What's the corresponding markdown that was generated?</p>\n</blockquote>\n<p>I did look through a bunch of mathlib and compiler files but I couldnt find one yet, seems they are rather rare which would also explain why I didnt notice this happening before.</p>",
        "id": 278425392,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649531051
    },
    {
        "content": "<p>Another option would be to emit separate definition documentation blocks for the projections, and only show the docstrings there</p>",
        "id": 278425495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649531233
    },
    {
        "content": "<p>That has the advantage of making the behavior more uniform between projections and definitions; consider how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.prop\">docs#subtype.prop</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.property\">docs#subtype.property</a> currently link to differently presented information.</p>",
        "id": 278425569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649531349
    },
    {
        "content": "<p>I'm also not sure that the docstrings should come before the relevant field, rather than after. For functions it makes sense to give the docstring beforehand since the arguments are in a negative position, but with a structure the fields are in a positive position.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Pair -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the first number -/</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the second number -/</span>\n</code></pre></div>\n<p>But allowing both seems incredibly annoying to handle in doc generation. Doxygen allows this by requiring a &lt; at the start docstring token (like <code>/--&lt; -/</code></p>",
        "id": 278425653,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649531422
    },
    {
        "content": "<p>Its actually not annoying for us at all, we don't ever parse the code ourselves, doc-gen4 is a lean meta program that asks the compiler for all the information including the doc string, if the compiler has the information we can get it without issue</p>",
        "id": 278425744,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649531548
    },
    {
        "content": "<p>TBH I thought those comment blocks that weren't placed right before a declaration (a function, structure, theorem etc) were meant for in-code documentation only (for those who are reading the source code) rather than to be extracted to a documentation page</p>",
        "id": 278425813,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649531650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425744\">said</a>:</p>\n<blockquote>\n<p>Its actually not annoying for us at all</p>\n</blockquote>\n<p>But I think it gets funky if for example you have a docstring after the last field of a structure and then a function immediately after. Not sure how we would differentiate where the docstring should go in something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Pair -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the first number -/</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the second number -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">myFn</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 278425902,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649531766
    },
    {
        "content": "<p>Oh with \"us\" I was referring to the doc-gen4 people, it sure is annoying to parse :p</p>",
        "id": 278425932,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649531838
    },
    {
        "content": "<p>By extracting those to a documentation page we might end up with a bunch of paragraphs with statements out of context, containing explanations about implementation details</p>",
        "id": 278425934,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649531838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425934\">said</a>:</p>\n<blockquote>\n<p>By extracting those to a documentation page we might end up with a bunch of paragraphs with statements out of context</p>\n</blockquote>\n<p>Lean does have the <code>/- -/</code> multi line comment blocks and the <code>--</code> single line comments for one line stuff, if its marked with a <code>/-- -/</code> its explicitly different from <code>/- -/</code> and meant to be interpreted as a doc string so whether it shows up here or not is the authors choice</p>",
        "id": 278426005,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649531918
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278426010,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649531928
    },
    {
        "content": "<p>correct</p>",
        "id": 278426013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649531935
    },
    {
        "content": "<p>whoops henrik sniped me :p</p>",
        "id": 278426019,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649531947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425932\">said</a>:</p>\n<blockquote>\n<p>Oh with \"us\" I was referring to the doc-gen4 people, it sure is annoying to parse :p</p>\n</blockquote>\n<p>So the compiler decides where in the AST a docstring is bound? (If so, where do the docstrings get bound in the example above?)</p>",
        "id": 278426111,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649532063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425063\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278423771\">said</a>:</p>\n<blockquote>\n<p>Which is fine ish I'd say?</p>\n</blockquote>\n<p>IMO it is a little hard to tell whether the comment is about the field above or below it</p>\n</blockquote>\n<p>I'm used to think that Lean docstrings come before the object being documented. Maybe it's worth it to keep this pattern for the sake of simplicity</p>",
        "id": 278426191,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649532143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425569\">said</a>:</p>\n<blockquote>\n<p>That has the advantage of making the behavior more uniform between projections and definitions; consider how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.prop\">docs#subtype.prop</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.property\">docs#subtype.property</a> currently link to differently presented information.</p>\n</blockquote>\n<p>I did think of this as well but once I end up implementing this feature for inductive constructors as well we would either:</p>\n<ul>\n<li>have to do it like I implemented it for structures rn</li>\n<li>render inductive ctors as a seperate definition again as well with a doc string, which I don't think is too sensible because you usually want to see them in context with the others (its an inductive after all)</li>\n</ul>\n<p>and since I wanted to keep behaviour consistent between the two (its of course open to debate whether that should be the case) I decided against it</p>",
        "id": 278426210,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649532184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278426111\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425932\">said</a>:</p>\n<blockquote>\n<p>Oh with \"us\" I was referring to the doc-gen4 people, it sure is annoying to parse :p</p>\n</blockquote>\n<p>So the compiler decides where in the AST a docstring is bound? (If so, where do the docstrings get bound in the example above?)</p>\n</blockquote>\n<p>Yes and to answer this question we can just ask the compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- Pair -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the first number -/</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"sd\">/-- the second number -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span><span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">Pair.fst</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span><span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">Pair.snd</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span><span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">none</span>\n<span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">number</span> <span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">second</span> <span class=\"n\">number</span> <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 278426351,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649532379
    },
    {
        "content": "<p>Ah, yeah, so we'd have to change the parser's behavior for that</p>",
        "id": 278426446,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649532507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425092\">said</a>:</p>\n<blockquote>\n<p>(Is it possible to make the vertical offset different above vs below?)</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/HRnn6rVQeFaAsQi0eaPGS1Zw/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HRnn6rVQeFaAsQi0eaPGS1Zw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HRnn6rVQeFaAsQi0eaPGS1Zw/image.png\"></a></div><p>good? more? less?</p>",
        "id": 278426610,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649532735
    },
    {
        "content": "<p>That definitely looks better. The space below could be smaller IMO, but space above looks good</p>",
        "id": 278426940,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649533219
    },
    {
        "content": "<p>I think a subtle filled box background around the docstring and element would work to separate the elements</p>",
        "id": 278432693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649540961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20and.20field.20doc.20strings/near/278425653\">said</a>:</p>\n<blockquote>\n<p>I'm also not sure that the docstrings should come before the relevant field, rather than after. </p>\n</blockquote>\n<p>In Haddock (a Haskell documentation generator), it has separate syntax for each: <a href=\"https://haskell-haddock.readthedocs.io/en/latest/markup.html#constructors-and-record-fields\">https://haskell-haddock.readthedocs.io/en/latest/markup.html#constructors-and-record-fields</a></p>",
        "id": 278437485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649548329
    },
    {
        "content": "<p>Here's an example of how Haddock handles constructor with documented fields: <a href=\"https://hackage.haskell.org/package/parsec-3.1.15.0/docs/Text-ParserCombinators-Parsec-Token.html\">https://hackage.haskell.org/package/parsec-3.1.15.0/docs/Text-ParserCombinators-Parsec-Token.html</a> (it shows the type name, followed by the type's documentation right below it, followed by a table for each constructor showing all the fields with their documentation to the right. For classes Haddock seems to put the field documentation below each field.)</p>",
        "id": 278437668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649548633
    },
    {
        "content": "<p>A downside of Haddock's flexibility is that teams then end up needing to rely on tooling to enforce the particular choice that they have made for their codebase, and most non-tiny projects end up adopting just one of the options in each possible context anyway.</p>",
        "id": 278455696,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1649579130
    },
    {
        "content": "<p>^Yeah, we should definitely pick something and stick with it. I like that Lean is quite opinionated about docstrings, it makes the docs experience very smooth</p>",
        "id": 278478926,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649610635
    },
    {
        "content": "<p>Aha! <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Syntax.html#Lean.Syntax.updateLeading\">https://leanprover-community.github.io/mathlib4_docs/Lean/Syntax.html#Lean.Syntax.updateLeading</a> found another one <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  the double paragraph is indeed at fault</p>",
        "id": 278750104,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649795923
    },
    {
        "content": "<p>I suspected of the double paragraph because the second one started at 4 white spaces from the left border and that qualifies for a code block according to markdown syntax</p>",
        "id": 278750253,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649796019
    },
    {
        "content": "<p>The first one is parsed with no space as I test it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">printDoc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">docs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">docs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not found\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">printDoc</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Syntax.updateLeading</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Set</span> <span class=\"bp\">`</span><span class=\"n\">SourceInfo.leading</span><span class=\"bp\">`</span> <span class=\"n\">according</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">trailing</span> <span class=\"n\">stop</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">preceding</span> <span class=\"n\">token.</span>\n    <span class=\"n\">The</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">round</span><span class=\"bp\">-</span><span class=\"n\">tripping</span> <span class=\"n\">syntax</span> <span class=\"n\">tree</span> <span class=\"n\">IF</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">input</span> <span class=\"n\">syntax</span> <span class=\"n\">tree</span><span class=\"o\">,</span>\n    <span class=\"bp\">*</span> <span class=\"n\">all</span> <span class=\"n\">leading</span> <span class=\"n\">stops</span><span class=\"o\">,</span> <span class=\"n\">atom</span> <span class=\"n\">contents</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">trailing</span> <span class=\"n\">starts</span> <span class=\"n\">are</span> <span class=\"n\">correct</span>\n    <span class=\"bp\">*</span> <span class=\"n\">trailing</span> <span class=\"n\">stops</span> <span class=\"n\">are</span> <span class=\"n\">between</span> <span class=\"n\">the</span> <span class=\"n\">trailing</span> <span class=\"n\">start</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">next</span> <span class=\"n\">leading</span> <span class=\"n\">stop.</span>\n\n    <span class=\"n\">Remark</span><span class=\"o\">:</span> <span class=\"n\">after</span> <span class=\"n\">parsing</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"bp\">`</span><span class=\"n\">SourceInfo.leading</span><span class=\"bp\">`</span> <span class=\"n\">fields</span> <span class=\"n\">are</span> <span class=\"n\">empty.</span>\n    <span class=\"n\">The</span> <span class=\"bp\">`</span><span class=\"n\">Syntax</span><span class=\"bp\">`</span> <span class=\"n\">argument</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">output</span> <span class=\"n\">produced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">parser</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">source</span><span class=\"bp\">`.</span>\n    <span class=\"n\">This</span> <span class=\"n\">function</span> <span class=\"s2\">\"fixes\"</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">source.leading</span><span class=\"bp\">`</span> <span class=\"n\">field.</span>\n<span class=\"bp\">......</span>\n</code></pre></div>\n<p>And the <a href=\"https://spec.commonmark.org/dingus/?text=Set%20%60SourceInfo.leading%60%20according%20to%20the%20trailing%20stop%20of%20the%20preceding%20token.%0A%20%20%20%20The%20result%20is%20a%20round-tripping%20syntax%20tree%20IF%2C%20in%20the%20input%20syntax%20tree%2C%0A%20%20%20%20*%20all%20leading%20stops%2C%20atom%20contents%2C%20and%20trailing%20starts%20are%20correct%0A%20%20%20%20*%20trailing%20stops%20are%20between%20the%20trailing%20start%20and%20the%20next%20leading%20stop.%0A%0A%20%20%20%20Remark%3A%20after%20parsing%2C%20all%20%60SourceInfo.leading%60%20fields%20are%20empty.%0A%20%20%20%20The%20%60Syntax%60%20argument%20is%20the%20output%20produced%20by%20the%20parser%20for%20%60source%60.%0A%20%20%20%20This%20function%20%22fixes%22%20the%20%60source.leading%60%20field.%0A%0A%20%20%20%20Additionally%2C%20we%20try%20to%20choose%20%22nicer%22%20splits%20between%20leading%20and%20trailing%20stops%0A%20%20%20%20according%20to%20some%20heuristics%20so%20that%20e.g.%20comments%20are%20associated%20to%20the%20(intuitively)%0A%20%20%20%20correct%20token.%0A%0A%20%20%20%20Note%20that%20the%20%60SourceInfo.trailing%60%20fields%20must%20be%20correct.%0A%20%20%20%20The%20implementation%20of%20this%20Function%20relies%20on%20this%20property.%20\">rendered sample</a> with commonmark spec</p>",
        "id": 278778071,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1649817674
    },
    {
        "content": "<p>The docComment parser is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">docComment</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">ppDedent</span> <span class=\"bp\">$</span> <span class=\"s2\">\"/--\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">commentBody</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppLine</span>\n</code></pre></div>\n<p>We may remove the <code>ppSpace</code> and then clean up the indentations. But I'm not sure if we can get position of the <code>/--</code> parser.</p>",
        "id": 278778486,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1649818213
    }
]