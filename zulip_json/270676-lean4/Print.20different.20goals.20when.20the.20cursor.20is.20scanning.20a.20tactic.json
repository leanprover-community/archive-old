[
    {
        "content": "<p>In Lean 3, the parser of <code>rw</code> is implemented so that when you move your cursor through the rewrite rules, you see each intermediate goal. It's a pretty cool feature! Is there something similar in Lean 4?</p>",
        "id": 278645867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649736200
    },
    {
        "content": "<p>Does it not work for you? It should work basically the same.</p>",
        "id": 278661932,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649752003
    },
    {
        "content": "<p>Sorry I wasn't clear. I mean what if I want to use the same feature for a tactic that I'm implementing, how do I do that?</p>",
        "id": 278718312,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649781351
    },
    {
        "content": "<p>Haha, that makes more sense! The interesting parts of the implementation are here: <a href=\"https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Elab/Tactic/Rewrite.lean#L34-L41\">https://github.com/leanprover/lean4/blob/3bdb385c199ebbcc2070f8849647df35c2cc2145/src/Lean/Elab/Tactic/Rewrite.lean#L34-L41</a><br>\n<code>withTacticInfoContext</code> will record the tactic state before and after running the last argument, and then annotate the lexical range of the given syntax tree with that info. <code>mkNullNode</code> is used here to create a synthetic syntax tree whose lexical range spans two given syntax trees.</p>",
        "id": 278719029,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649781713
    },
    {
        "content": "<p>Nice! Thanks!</p>",
        "id": 278727101,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649785437
    },
    {
        "content": "<p>It's mostly working. I'm implementing ssreflect's <code>move</code> tactic  and tactical and I want to show the goal between patterns. In this context, <code>move =&gt; a b c</code> is the same as <code>intros a b c</code>. I get the following odd behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">move</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n       <span class=\"bp\">^</span>\n<span class=\"c1\">-- ⊢ T → V → U → True</span>\n<span class=\"n\">move</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n         <span class=\"bp\">^</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>Here is my elaboration code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tac</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pats'</span> <span class=\"bp\">←</span> <span class=\"n\">pats.mapM</span> <span class=\"n\">parseMoveIntroPat</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n  <span class=\"k\">let</span> <span class=\"n\">arrow</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">withTacticInfoContext</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arrow</span><span class=\"o\">,</span> <span class=\"n\">pats</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]])</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">())</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">pats.size</span><span class=\"o\">],</span> <span class=\"n\">pat</span> <span class=\"k\">in</span> <span class=\"n\">pats'</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"n\">pats.getD</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">Syntax.missing</span>\n    <span class=\"n\">withTacticInfoContext</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">pats</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">next</span><span class=\"o\">])</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">allGoals</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runMoveIntroPat</span> <span class=\"n\">pat</span>\n</code></pre></div>\n<p>Can you see why in the second position I have two goals getting displayed?</p>",
        "id": 278774518,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649813540
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 278780009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649820205
    },
    {
        "content": "<p>Ok, I figured it out. I was treating the <code>mkNullNode</code> as an interval. It's more like a syntax tree or a set of syntax trees where we want a specific goal to be displayed. So my code should be (this time it's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, sorry about the oversight):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"move\"</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">ident</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">move</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">kw</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">arrow</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">withTacticInfoContext</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">kw</span><span class=\"o\">,</span> <span class=\"n\">arrow</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">())</span>\n  <span class=\"n\">for</span> <span class=\"n\">pat</span> <span class=\"k\">in</span> <span class=\"n\">pats</span> <span class=\"k\">do</span>\n    <span class=\"n\">withTacticInfoContext</span> <span class=\"n\">pat</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n        <span class=\"n\">liftMetaMAtMain</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"bp\">.</span> <span class=\"n\">pat.getId</span><span class=\"o\">)</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">move</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 278780868,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649821362
    },
    {
        "content": "<p>This time, each variable has only one goal</p>",
        "id": 278780883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649821389
    },
    {
        "content": "<p>what is the purpose of the first <code>withTacticInfoContext</code>? It doesn't seem to make any difference</p>",
        "id": 278785793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649827796
    },
    {
        "content": "<p>also you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">move</span><span class=\"bp\">%$</span><span class=\"n\">kw</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arrow</span> <span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>instead of that <code>getRef</code> stuff</p>",
        "id": 278785959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649827978
    },
    {
        "content": "<p>Thanks for the neat trick! <code>withTacticInfoContext</code> is from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's code snippet. The idea is to implement the same feature that <code>rw</code> has where you can move your cursor over the the rewrite rules and see the intermediate proof states. <code>withTacticInfoContext</code> records those proof states and associates them with the syntax trees that you're giving it.</p>",
        "id": 278830741,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649857730
    },
    {
        "content": "<p>Yes I understand that. I'm saying that I don't see any difference in the goal states with or without that line</p>",
        "id": 278848239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649865379
    },
    {
        "content": "<p>the second <code>withTacticInfoContext</code> seems to be working as intended but you get the behavior you want even if you delete the first <code>withTacticInfoContext</code></p>",
        "id": 278848359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649865426
    },
    {
        "content": "<p>Ah, right! Yeah, I'm not clear on that. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, what's the purpose of the first <code>withTacticInfoContext</code> in the <code>rw</code> implementation?</p>",
        "id": 278851516,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649866622
    },
    {
        "content": "<p>I believe this was from before we refined the behavior for when to show the pre/post state</p>",
        "id": 278852336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649866933
    },
    {
        "content": "<p>Ok. What did it used to do and what did it get changed to?</p>",
        "id": 278853310,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649867376
    }
]