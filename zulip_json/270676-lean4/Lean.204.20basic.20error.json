[
    {
        "content": "<p>Documentation of Lean 4 is quite incomplete yet. I may be doing something silly. But </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>gives the error \"unknown identifier 'ℕ'\" (both in VS and Emacs). The second definition works fine. Any idea? Any pointers to learn more about Lean 4?</p>",
        "id": 271583859,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1644589570
    },
    {
        "content": "<p>Try adding <code>abbrev ℕ := Nat</code> before using <code>ℕ</code></p>\n<p>Also, you shouldn't need the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>part for it to work</p>",
        "id": 271584042,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644589676
    },
    {
        "content": "<p><code>ℕ</code> is defined in Mathlib 4.<br>\nFor documentation, the best source is <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a></p>",
        "id": 271584053,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644589681
    },
    {
        "content": "<p>thanks</p>",
        "id": 271584278,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1644589787
    },
    {
        "content": "<p>FYI, the way that mathlib4 defines this notation is as follows:<br>\n<code>notation \"ℕ\" =&gt; Nat</code></p>",
        "id": 271584377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644589825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20basic.20error/near/271584377\">said</a>:</p>\n<blockquote>\n<p>FYI, the way that mathlib4 defines this notation is as follows:<br>\n<code>notation \"ℕ\" =&gt; Nat</code></p>\n</blockquote>\n<p>Nice one. What are the differences between those methods? (comparing with <code>abbrev</code>)</p>",
        "id": 271584646,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644589944
    },
    {
        "content": "<p>Indeed, <code>notation \"ℕ\" =&gt; Nat</code> makes both definitions have the same<code>ℕ → ℕ</code> type. With abbreviation makes one <code>Nat → Nat</code> and the other <code>ℕ → ℕ</code></p>",
        "id": 271584653,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1644589946
    },
    {
        "content": "<p>I don't know the inner workings, but if it's similar to Lean3, then <code>abbreviation</code> essentially means <code>@[reducible, inline] def</code></p>",
        "id": 271584757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644589992
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> this is not an explanation, just my description of the observable behaviour. The documentation pointed by <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> should explain us more...</p>",
        "id": 271584797,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1644590019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20basic.20error/near/271584653\">said</a>:</p>\n<blockquote>\n<p>Indeed, <code>notation \"ℕ\" =&gt; Nat</code> makes both definitions have the same<code>ℕ → ℕ</code> type. With abbreviation makes one <code>Nat → Nat</code> and the other <code>ℕ → ℕ</code></p>\n</blockquote>\n<p>I guess that's because with <code>abbrev</code>, <code>\\N</code> is a new term, even though definitionally equal with <code>Nat</code>, and very transparently so, but still a different term. While with <code>notation</code> it's just syntax that gets desugared to the exact same thing.</p>",
        "id": 271587232,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644591138
    }
]