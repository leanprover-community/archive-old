[
    {
        "content": "<p>Anyone got the <a href=\"https://github.com/xubaiw/lean4-socket\">Socket Library</a> running on windows? I tried <code>lake build</code> compiling the main example of the  framework and ran into <code>\"undefined reference to __imp_F\"</code> for all native <code>F</code>unctions defined in the library. Socket has two static libraries, both of which are being provided in <code>leanc someArgs .../libSocket.a .../native.a</code> automatically. Am I missing something in the lakefile package definition?</p>",
        "id": 257087016,
        "sender_full_name": "František Silváši",
        "timestamp": 1633969395
    },
    {
        "content": "<p>Sorry for that, but this library has not been tested on Windows (since I don't have one :D). I have opened an issue for this error.<br>\nAnd just to note that this library is a toy implementation. A higher level IO library like rust's <code>mio</code> and c's <code>libuv</code> can be much better, which I'm working on now.</p>",
        "id": 257094754,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633973449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364929\">@František Silváši</span>  Sorry for being too late, I was stuck by setting up Lean environment on Windows.</p>\n<p>All examples in the repo should now be runnable on Windows, with <code>#[\"-lWs2_32\"]</code> in the <code>moreLinkArgs</code> field.</p>",
        "id": 257816835,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634375873
    },
    {
        "content": "<p>Currently it's impossible to specify shared lib dependencies in library packages (static lib cannot be linked to shared lib) and every binary package depends on it has to specify shared lib dependency in their package config. (e.g. \"ws2_32.dll\" for every package that uses lean4-socket).</p>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  Can <code>lake</code> store linkage information and pass them when linking binaries? Maybe by a separate <code>links</code> field for native library dependencies like <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-links-field\">rust</a>?</p>\n<p>Specifying <code>moreLinkArgs</code> in every dependent package can be a temporal workaround, but not a nice solution.</p>",
        "id": 257818236,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634377322
    },
    {
        "content": "<p>It works indeed! Glorious, thank you kindly.</p>",
        "id": 257821691,
        "sender_full_name": "František Silváši",
        "timestamp": 1634380962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20.20on.20Windows.20-.20C.20FFI.20-.20undefined.20reference/near/257818236\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>  Can <code>lake</code> store linkage information and pass them when linking binaries? Maybe by a separate <code>links</code> field for native library dependencies like <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-links-field\">rust</a>?</p>\n</blockquote>\n<p>You should be using <code>moreLibTargets</code> for this. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Platform.isWindows</span> <span class=\"k\">then</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">inputFileTarget</span> <span class=\"s2\">\"/path/to/Ws2_32.dll\"</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>additional lib targets will be automatically be carried upwards to dependent packages.</p>",
        "id": 257838155,
        "sender_full_name": "Mac",
        "timestamp": 1634396790
    }
]