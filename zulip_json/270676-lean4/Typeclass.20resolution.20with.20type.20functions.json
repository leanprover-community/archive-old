[
    {
        "content": "<p>I have a function that removes a trailing <code>Unit</code> on tuples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Unit</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"n\">Unit</span> <span class=\"bp\">=</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But I'm having problems using it when the given type is calculated by another function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArgTypes</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">toType</span> <span class=\"n\">s.toList</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">toType</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'d'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'s'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"abc\"</span> <span class=\"bp\">=</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"%s is %d\"</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"%s is %d - %d\"</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes</span> <span class=\"s2\">\"abc\"</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  Simplify (ArgTypes \"abc\")</span>\n</code></pre></div>\n<p>Looks like the resolution mechanism does not evaluate the argument?</p>",
        "id": 304364282,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1665967885
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 304380223,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665983109
    },
    {
        "content": "<p>Correct, type classes don't unfold (non-reducible) definitions.<br>\nThis is something that is probably better to do with metaprogramming.<br>\nWhat is your use case?</p>",
        "id": 304402792,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665994183
    },
    {
        "content": "<p>The typeclass inference does not see through function marked with <code>def</code>, they need to be transparent i.e. marked with <code>abbrev</code> or with <code>@[reducible]</code>.</p>\n<p>Here is a simple example for creating nth power of a type <code>TypePower α  n = α × ... × α</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TypePower</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">TypePower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TypePower'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">TypePower'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">TypePower</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">TypePower'</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 304415915,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665998831
    },
    {
        "content": "<p>Here is a modification of your example that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Simplify</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Unit</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"n\">Unit</span> <span class=\"bp\">=</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArgTypes</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">toType</span> <span class=\"n\">s.toList</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">toType</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'d'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'s'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toType</span> <span class=\"n\">rest</span>\n\n\n<span class=\"kd\">@[reducible]</span> <span class=\"c1\">-- `abbrev` is just a shorthand for `reducible` attribute</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArgTypes'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'d'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">ArgTypes'</span> <span class=\"n\">rest</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'%'</span> <span class=\"o\">::</span> <span class=\"sc\">'s'</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">ArgTypes'</span> <span class=\"n\">rest</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ArgTypes'</span> <span class=\"n\">rest</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ArgTypes''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ArgTypes'</span> <span class=\"n\">s.data</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"abc\"</span> <span class=\"bp\">=</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"%s is %d\"</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ArgTypes</span> <span class=\"s2\">\"%s is %d - %d\"</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes</span> <span class=\"s2\">\"abc\"</span><span class=\"o\">)</span> <span class=\"c1\">-- fails because ArgTypes and String.toList are not `abbrev`</span>\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes'</span> <span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">,</span> <span class=\"sc\">'c'</span><span class=\"o\">])</span>\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes'</span> <span class=\"s2\">\"abc\"</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"c1\">-- fails because String.toList is not `abbrev`</span>\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes'</span> <span class=\"s2\">\"abc\"</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Simplify.apply</span> <span class=\"o\">(</span><span class=\"n\">ArgTypes''</span> <span class=\"s2\">\"abc\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304416687,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665999095
    },
    {
        "content": "<p>I didn't study your example properly but it looks like that your <code>Simplify</code> class is dealing exactly with the problem that naive implementation of <code>TypePower</code> produces <code>α × ... × α × Unit</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TypePowerNaive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">TypePowerNaive</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TypePowerCorrect</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">TypePowerCorrect</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TypePowerNaive</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TypePowerCorrect</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 304418027,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665999516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Ahh, I see. the inner function <code>toType</code> needed to be marked as reducible as well. Nice.</p>",
        "id": 304536304,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1666033228
    }
]