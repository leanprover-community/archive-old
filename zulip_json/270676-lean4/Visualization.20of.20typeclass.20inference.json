[
    {
        "content": "<p>I would like to have some visual representation of typeclass inference. I find myself spending more and more time debugging order of class instances and it is getting really annoying. The main thing I want to see are large branches that do not lead to an answer and identify the instance that started it. This usually means a wrong order of instances. Also visually encode the order in which the graph is traversed.</p>\n<p>I'm thinking about adding a tracing option <code>set_option trace.Meta.synthInstanceVis</code> that would generate some kind of string representation of a directed graph of goals/answers, consumer/generator nodes and then send it to some graph visualization tool, thinking about <a href=\"https://pyvis.readthedocs.io/en/latest/tutorial.html#example-visualizing-a-game-of-thrones-character-network\">pyvis</a>.</p>\n<p>Any tips on doing this? Or different approach?</p>\n<p>Would it be possible to invoke the graph visualization automatically when I compile with <code>lake</code>? Maybe a good idea only for the <code>in</code> version of <code>set_option</code> as I do not want to accidentally spawn thousands of graph visualizations.</p>",
        "id": 266698004,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1641223525
    },
    {
        "content": "<p>There is a (I believe graphviz based) visualization of solving a simple type class resolution goal in the \"Tabled Typeclass Resolution\" paper here: <a href=\"https://arxiv.org/abs/2001.04301\">https://arxiv.org/abs/2001.04301</a> (page 11) but I don't know whether this was auto generated, if it was though it seems to me like your goal should already be solved?</p>",
        "id": 266698475,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641223749
    },
    {
        "content": "<p>Yes some thing like that would be great just different visual of it. I want to immediately see that the branch <code>A1</code> from <code>N2</code> node is a dead end and this should scale if I have hundreds or thousands of nodes. To skip the dead branch you should declare the parameter <code>C</code> before <code>B</code>. I'm doing lots of debugging that leads to just reordering of parameters in instance declarations.</p>",
        "id": 266700282,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1641224664
    },
    {
        "content": "<p>Wondering if this could be a widget a la <a href=\"https://www.edayers.com/thesis/widgets\">https://www.edayers.com/thesis/widgets</a></p>\n<p>A graph visualization directly in VS Code would be super useful for some collections stuff I'm working on...</p>",
        "id": 273265817,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645813371
    },
    {
        "content": "<p>Yes this widget type of stuff has been discussed about before but I don't know about it's current status, however people are very much aware of the possiblity</p>",
        "id": 273266123,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645813527
    },
    {
        "content": "<p>Currently, I'm again debugging a total tangle of messy typeclasses and it is driving me crazy. I think I will look into how to generate text representation of the graph and then we can try to figure out the best way to visualize it.</p>",
        "id": 273269381,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1645815155
    },
    {
        "content": "<p>I see two approaches:</p>\n<ol>\n<li>Add a new tracing message like <code>trace.Meta.synthInstance.tcGraph</code> which would be just reformating of current messages so it is easier to parse and build the TC graph out of.</li>\n<li>After TC is done, inspect the TC tables and spit out the nodes and edges into a file. Not sure if this approach gives you the information in which order is the graph traversed.</li>\n</ol>\n<p>Any thoughts? Another better approach?</p>",
        "id": 273270608,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1645815687
    },
    {
        "content": "<p>The only way I see these two approaches is to modify Lean 4 code. Any idea how to avoid that?</p>",
        "id": 273270858,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1645815772
    }
]