[
    {
        "content": "<p>Is there any way to get more information about \"invalid mutual block\" errors?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Cat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Taut</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">Enrich</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">CatEnrichedOver</span> <span class=\"n\">over</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">CatEnrichedOver</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229749556,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615412302
    },
    {
        "content": "<p>No, but it means that this mix of commands is not supported. There are exactly two cases implemented currently: mutual \"<code>def</code>-likes\" (<code>instance</code>, <code>theorem</code>, ...), and mutual <code>inductive</code>s. So you would have to expand the <code>structure</code> into an <code>inductive</code>.</p>",
        "id": 229750229,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615412556
    },
    {
        "content": "<p>Hmm..... how hard would it be for me to augment the Lean compiler to also support <code>structure</code> in <code>mutual</code>?  (I presume this would be a welcome PR?) (Also: does this mean you don't currently support induction-recursion?)</p>",
        "id": 229762671,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615417145
    },
    {
        "content": "<p>I think it is a lot of work and would require a lot of coordination to have it merged in the master branch.<br>\n<span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> is working on induction-induction for Lean 4: <a href=\"https://github.com/javra/iit\">https://github.com/javra/iit</a></p>\n<blockquote>\n<p>does this mean you don't currently support induction-recursion?</p>\n</blockquote>\n<p>Correct, we don't support it, and it is not on our to-do list.</p>",
        "id": 229765256,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615418430
    }
]