[
    {
        "content": "<p>While doing some engineering in Lean, I've noticed that some of my structures are very likely just well-known algebraic structures. I'm too stupid and uneducated, however, to drop my structures and simply use the algebraic structures directly.</p>\n<p>However, I would like to be able for my structures to at least be encoded as classes and then whenever I notice that something S is \"just something else X with something else Y\", I could be able to write an instance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>Y</mi><mtext> </mtext><mi>α</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>X</mi><mtext> </mtext><mi>α</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mo>:</mo><mtext> </mtext><mi>S</mi><mtext> </mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> [Y \\  \\alpha] [X \\  \\alpha] \\  : \\  S \\  \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>.</p>\n<p>To give a concrete example, I have a logical clock, which is split across several classes such as Tick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Tick</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">tick</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I would like for anything that's <code>&lt;M, +, 0, succ&gt;</code> (M is totally ordered) to also be a <code>Tick</code>. But I don't know how to write this down in pure Lean 4 with Prelude. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">???</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Tick</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">tick</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How would you write it?</p>\n<p>Edit: total order doesn't imply <code>succ</code>! Thanks, <span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span></p>",
        "id": 290883927,
        "sender_full_name": "cognivore",
        "timestamp": 1658838659
    },
    {
        "content": "<p>We just don't have many classes for algebraic things in our Prelude right now, you might find some order theory in mathlib4 already but maybe you're out of luck there as well.</p>",
        "id": 290884253,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658838850
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 290884697,
        "sender_full_name": "cognivore",
        "timestamp": 1658839105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 290884702,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658839107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Require.20monoid.20with.20well.20ordered.20underlying.20set/near/290884253\">said</a>:</p>\n<blockquote>\n<p>We just don't have many classes for algebraic things in our Prelude right now, you might find some order theory in mathlib4 already but maybe you're out of luck there as well.</p>\n</blockquote>\n<p>I wonder, how cheesy is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Tick</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">tick</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 290885384,
        "sender_full_name": "cognivore",
        "timestamp": 1658839519
    }
]