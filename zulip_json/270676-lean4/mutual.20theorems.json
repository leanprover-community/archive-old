[
    {
        "content": "<p>What's the simplest example of mutually recursive theorems you can think of?<br>\nThanks in advance!</p>",
        "id": 286782493,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655725360
    },
    {
        "content": "<p>There's an example on <a href=\"http://leanprover.github.io/talks/NFM2022.pdf\">these slides</a>, but if anyone can craft something simpler, it would be super helpful <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 286783566,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655725968
    },
    {
        "content": "<p>I would guess that some of the Lean3 proofs about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.has_le\">docs#pgame.has_le</a> would make sense as a mutual theorem</p>",
        "id": 286784139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655726298
    },
    {
        "content": "<p>Such as <a href=\"https://github.com/leanprover-community/mathlib/blob/f9c339ecf5efb4cf0d911bb3501bd57ca2ef2507/src/set_theory/game/pgame.lean#L306-L313\">https://github.com/leanprover-community/mathlib/blob/f9c339ecf5efb4cf0d911bb3501bd57ca2ef2507/src/set_theory/game/pgame.lean#L306-L313</a></p>",
        "id": 286784221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655726354
    },
    {
        "content": "<p>Actually let me remove <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> noise. We're trying to compile Lean environment to a content-addressed version (more on the topic <a href=\"#narrow/stream/270676-lean4/topic/What's.20needed.20for.20mutual.20defs.3F/near/286278230\">here</a>) and we want to validate our method to compile mutual theorems.</p>\n<p>The issue we found is that we cannot find mutual theorems in the environment! So we're wondering what's happening. Does Lean elaborate mutual theorems to a single theorem? What's the resulting name of the theorem? We're not finding it after running Lean's frontend</p>",
        "id": 286784781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655726601
    },
    {
        "content": "<p>I assume the answers are the same as in Lean 3:<br>\n<span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20theorems/near/286784781\">said</a>:</p>\n<blockquote>\n<p>Does Lean elaborate mutual theorems to a single theorem?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>What's the resulting name of the theorem? We're not finding it after running Lean's frontend</p>\n</blockquote>\n<p>Implementation-defined by the elaborator. The original names will be defined as applications of the internally generated single theorem.</p>",
        "id": 286785691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655727074
    },
    {
        "content": "<p>Mutual declarations don't exist in the kernel or at the level of <code>expr</code>.</p>",
        "id": 286785704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655727087
    },
    {
        "content": "<p>Basically, see also comment at <a href=\"https://github.com/leanprover/lean4/blob/b6f251bcd33e3941cd653777068bd0bb2919a6a4/src/Lean/Declaration.lean#L153\">https://github.com/leanprover/lean4/blob/b6f251bcd33e3941cd653777068bd0bb2919a6a4/src/Lean/Declaration.lean#L153</a></p>",
        "id": 286785899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655727182
    },
    {
        "content": "<p>Lean 3 example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">theorem</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n  <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">a</span>        <span class=\"c1\">--  theorem a : ∀ (n : ℕ), n = n := a._main</span>\n<span class=\"k\">#print</span> <span class=\"n\">a._main</span>  <span class=\"c1\">--  theorem a._main : ∀ (n : ℕ), n = n := λ (n : ℕ), a.b._mutual (psum.inl n)</span>\n<span class=\"k\">#print</span> <span class=\"n\">a.b._mutual</span>\n<span class=\"c1\">-- theorem a.b._mutual : ∀ (_x : psum ℕ ℕ), (λ (_x : psum ℕ ℕ), psum.cases_on _x (λ (_s : ℕ), _s = _s) (λ (_s : ℕ), _s = _s)) _x :=</span>\n<span class=\"c1\">-- [big term]</span>\n</code></pre></div>",
        "id": 286786052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655727253
    },
    {
        "content": "<p>Fun fact--mathlib contains exactly one non-meta mutually inductive set of definitions</p>",
        "id": 286786163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655727321
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 286787866,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655728198
    }
]