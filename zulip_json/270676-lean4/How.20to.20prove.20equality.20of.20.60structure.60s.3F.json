[
    {
        "content": "<p>I'm trying to create basic rational numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Rat</span> <span class=\"n\">where</span>\n  <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">den</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"n\">den</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rat_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.mk</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"n\">b.den</span> <span class=\"bp\">+</span> <span class=\"n\">b.num</span> <span class=\"bp\">*</span> <span class=\"n\">a.den</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.den</span> <span class=\"bp\">*</span> <span class=\"n\">b.den</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">match</span> <span class=\"n\">nat_mul_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a.non_zero</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">b.non_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Rat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">rat_add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- issue is here</span>\n</code></pre></div>\n<p>The problem I'm running into is I can't see how to convert the goal <code>a + b = b + a</code> into the two goals <code>(a.num * b.den + b.num * a.den) = (b.num * a.den + a.num * b.den)</code> and <code>(a.den * b.den) = (b.den * a.den)</code>. How can I do this?</p>",
        "id": 250505757,
        "sender_full_name": "Ian Wood",
        "timestamp": 1629820495
    },
    {
        "content": "<p>You should write an extensionality lemma. It will involve doing cases on a and cases on b</p>",
        "id": 250509706,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629822205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20equality.20of.20.60structure.60s.3F/near/250509706\">said</a>:</p>\n<blockquote>\n<p>You should write an extensionality lemma. It will involve doing cases on a and cases on b</p>\n</blockquote>\n<p>That worked, thank you!</p>",
        "id": 250517267,
        "sender_full_name": "Ian Wood",
        "timestamp": 1629825370
    },
    {
        "content": "<p>You are aware that what you're defining isn't yet a representation of the rational numbers? You are missing the relation <code>Rat.mk x x = Rat.mk 1 1</code>.</p>",
        "id": 250519029,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629826218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384542\">Justus Springer</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20equality.20of.20.60structure.60s.3F/near/250519029\">said</a>:</p>\n<blockquote>\n<p>You are aware that what you're defining isn't yet a representation of the rational numbers? You are missing the relation <code>Rat.mk x x = Rat.mk 1 1</code>.</p>\n</blockquote>\n<p>Yes, this is the first thing I thought to do to try out lean4. I don't plan to make it correct really.</p>",
        "id": 250537594,
        "sender_full_name": "Ian Wood",
        "timestamp": 1629834083
    },
    {
        "content": "<p>I also came into this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NatWrap</span> <span class=\"n\">where</span>\n  <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">NatWrap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a.i</span> <span class=\"bp\">=</span> <span class=\"n\">b.i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a.j</span> <span class=\"bp\">=</span> <span class=\"n\">b.j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">???;</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>Is there a tactic to convert the goal <code>a=b</code> into a list of goals <code>a.i = b.i</code>, <code>a.j = b.j</code>?</p>",
        "id": 322915151,
        "sender_full_name": "Casavaca",
        "timestamp": 1674427341
    },
    {
        "content": "<p>This is called extensionality. If you tag <code>natWrap</code> with <code>ext</code>, then Lean will automatically generate an extensionality lemma for you. Then the tactic <code>ext</code> will call it for you.</p>",
        "id": 322915499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674427618
    }
]