[
    {
        "content": "<p>Ah okay, thanks for taking a look</p>\n<p>(Also, I didn't mean to make this in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>, if someone has the power to move it to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> I'd be grateful)</p>",
        "id": 280607127,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651224124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> has marked this topic as resolved.</p>",
        "id": 280607418,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651224306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> has marked this topic as resolved.</p>",
        "id": 280607421,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651224307
    },
    {
        "content": "<p>(whoops, wrong button... also, race condition in Zulip)</p>",
        "id": 280607454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651224336
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20autoImplicit.20confusion.3F\">#mathlib4 &gt; ✔ autoImplicit confusion?</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 280607540,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651224365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> has marked this topic as unresolved.</p>",
        "id": 280607576,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651224383
    },
    {
        "content": "<p>The declaration is accepted because of the \"auto implicit chaining\" feature. We can try to refine this feature, but this is the expected behavior for this feature. From our release notes:</p>\n<ul>\n<li>Added auto implicit \"chaining\". Unassigned metavariables occurring in the auto implicit types now become new auto implicit locals. Consider the following example:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">HasType</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">Ty</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">HasType</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ty</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pop</span>  <span class=\"o\">:</span> <span class=\"n\">HasType</span> <span class=\"n\">k</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">HasType</span> <span class=\"n\">k.succ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ty</span>\n</code></pre></div>\n<p><code>ctx</code> is an auto implicit local in the two constructors, and it has type <code>ctx : Vector Ty ?m</code>. Without auto implicit \"chaining\", the metavariable <code>?m</code> will remain unassigned. The new feature creates yet another implicit local <code>n : Nat</code> and assigns <code>n</code> to <code>?m</code>. So, the declaration above is shorthand for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">HasType</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">Ty</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Ty</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HasType</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ty</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pop</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Ty</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HasType</span> <span class=\"n\">k</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">HasType</span> <span class=\"n\">k.succ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ty</span>\n</code></pre></div>",
        "id": 280620177,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651232408
    },
    {
        "content": "<p>We can claim this is a bug since <code>x</code> is not an auto implicit in the <code>Foo</code> example above. So, the metavariable occurring there should not become a new parameter.</p>",
        "id": 280620275,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651232496
    },
    {
        "content": "<p>That makes sense -- I too would consider it a bug, since the behavior feels surprising in a way that auto-implicit generally does not</p>",
        "id": 280858196,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651488636
    },
    {
        "content": "<p>Pushed the following.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/04d3c6feebb81eb684be1c64289b8a5ddf7b7ba8\">https://github.com/leanprover/lean4/commit/04d3c6feebb81eb684be1c64289b8a5ddf7b7ba8</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>now produces an error.</p>",
        "id": 281226458,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651702000
    }
]