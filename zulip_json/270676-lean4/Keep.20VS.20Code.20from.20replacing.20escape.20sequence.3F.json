[
    {
        "content": "<p>In the following, if you insert <code>\\\"</code> between the single quotes '', navigate to the blank line, and press the tab key, then the <code>\\\"</code> gets replaced with <code>Ä</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_dquote</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"bp\">''</span> <span class=\"k\">then</span>\n\n  <span class=\"k\">else</span>\n    <span class=\"n\">false</span>\n</code></pre></div>\n<p>I guess if, rather than inserting <code>\\\"</code>, you type <code>\\</code>, tab, <code>\"</code>, then this cancels <code>\\</code> being active. Is there a way to cancel it after typing <code>\\\"</code>? The escape key doesn't seem to do so. (Is there a way to prevent it from spookily replacing <code>\\\"</code> from a distance?)</p>\n<p>(This is not real code, just a demonstration.)</p>",
        "id": 269170173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643057133
    },
    {
        "content": "<p>It makes me want to strangle baby seals when my newline <code>\"\\n\"</code> is replaced with a unicode negation.</p>",
        "id": 269175662,
        "sender_full_name": "František Silváši",
        "timestamp": 1643059846
    },
    {
        "content": "<p>In Emacs if you double type a \\ it will ignore the unicode stuff, maybe it has been implemeted like this in vscode as well?</p>",
        "id": 269176009,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643060028
    },
    {
        "content": "<p>Did you follow the suggestion at <a href=\"https://github.com/leanprover/vscode-lean/#input--editing-settings\">https://github.com/leanprover/vscode-lean/#input--editing-settings</a>?</p>",
        "id": 269179938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643062198
    },
    {
        "content": "<p>Note that you can also use another input leader (other than <code>\\</code>).</p>",
        "id": 269180019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643062220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Keep.20VS.20Code.20from.20replacing.20escape.20sequence.3F/near/269180019\">said</a>:</p>\n<blockquote>\n<p>Note that you can also use another input leader (other than <code>\\</code>).</p>\n</blockquote>\n<p>IIRC I saw in a video that you use <code>,</code>. I think that's a smart move and I'm going to copy it <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 269181220,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643062938
    },
    {
        "content": "<p>Oh this is brilliant advice. I'll use a different leading character indeed. Thanks &lt;3.</p>",
        "id": 269184224,
        "sender_full_name": "František Silváši",
        "timestamp": 1643064698
    },
    {
        "content": "<p>I think this would also be resolved by adding a Unicode completion that sends <code>\\\"</code> to itself</p>",
        "id": 270811312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644045316
    },
    {
        "content": "<p>Same for <code>\\n</code></p>",
        "id": 270811316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644045325
    },
    {
        "content": "<p>The \"shortest matching prefix\" behavior comes at the expense of having some bad prefixes we need to override</p>",
        "id": 270811370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644045372
    },
    {
        "content": "<p>Maybe that would interfere with <code>\\\"a</code> though</p>",
        "id": 270811375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644045398
    }
]