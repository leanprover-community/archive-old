[
    {
        "content": "<p>I was wondering how Lean is going about unifying <code>up (down b)</code> and <code>b</code> in this definition from the prelude:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PLift.up_down</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>My guess is that expands <code>b</code> to <code>up (down b)</code> (where it knows not to infinitely expand <code>b</code> in the LHS because it's already been projected), and more generally, if we have any structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">an</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and a free variable <code>t : Test</code>, unification will expand <code>t</code> wherever it occurs to <code>Test.mk t.a1 t.a2 ... t.an</code>. Is my suspicion correct? I'm trying to find where in the code this expansion happens, I found <code>toCtorWhenStructure</code> in <code>src/Lean/Meta/WHNF.lean</code> but it looks like that only applies to recursor applications.</p>",
        "id": 302093257,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1664812761
    },
    {
        "content": "<p>Aha, I found <code>try_eta_struct</code> in <code>src/kernel/typechecker.cpp</code>. Is there an equivalent somewhere in the Lean codebase?</p>",
        "id": 302105975,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1664816440
    },
    {
        "content": "<p>I don't think Lean will expand b to up (down b), it's more likely simplifying up (down b) back to b (probably using eta for structures).</p>",
        "id": 302107097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664816738
    },
    {
        "content": "<p>Yeah from the typechecker code it looks like it's not actually doing any expansion, it's actually checking for specifically this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">/**</span> <span class=\"bp\">\\</span><span class=\"n\">brief</span> <span class=\"n\">check</span> <span class=\"n\">whether</span> <span class=\"bp\">\\</span><span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">is</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"bp\">&lt;</span><span class=\"n\">tt</span><span class=\"bp\">&gt;</span><span class=\"n\">mk</span> <span class=\"n\">t.1</span> <span class=\"bp\">...</span> <span class=\"n\">t.n</span><span class=\"bp\">&lt;/</span><span class=\"n\">tt</span><span class=\"bp\">&gt;</span> <span class=\"bp\">*/</span>\n<span class=\"n\">bool</span> <span class=\"n\">type_checker</span><span class=\"o\">::</span><span class=\"n\">try_eta_struct_core</span><span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"n\">bool</span> <span class=\"n\">try_eta_struct</span><span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">expr</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n     <span class=\"n\">return</span> <span class=\"n\">try_eta_struct_core</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">try_eta_struct_core</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>(and <code>try_eta_struct</code> is called from <code>is_def_eq</code>)</p>",
        "id": 302108533,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1664817217
    }
]