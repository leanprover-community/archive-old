[
    {
        "content": "<p>So I have two inductions; this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Term.stlc_wknth_false</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Sparsity</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t.wknth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stlc</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">wknth</span> <span class=\"n\">n</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t.stlc</span> <span class=\"bp\">Γ</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stlc_var</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.stlc</span><span class=\"o\">,</span> <span class=\"n\">Sparsity.wknth_ix_false</span><span class=\"o\">,</span> <span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.lift_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.liftn_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">wknth_def</span><span class=\"o\">]</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">TermKind</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">AnnotSort</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">stlc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_merge</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Term.stlc_ty_wknth</span><span class=\"o\">]</span>\n      <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Term.stlc_wknth_true</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Sparsity</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t.wknth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stlc</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">wknth</span> <span class=\"n\">n</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t.stlc</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wknth</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">ix</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stlc_var</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.stlc</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">Γ.</span><span class=\"n\">dep</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span>\n        <span class=\"n\">assumption</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_ix_true'</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Stlc.wknth</span><span class=\"o\">,</span> <span class=\"n\">Stlc.wk</span><span class=\"o\">,</span> <span class=\"n\">Wk.wknth_var</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.lift_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.liftn_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">wknth_def</span><span class=\"o\">]</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">TermKind</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">AnnotSort</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">stlc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_merge</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Term.stlc_ty_wknth</span><span class=\"o\">]</span>\n      <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and directly under it in the same file, this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Term.stlc_wknth_false</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Sparsity</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t.wknth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stlc</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">wknth</span> <span class=\"n\">n</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t.stlc</span> <span class=\"bp\">Γ</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stlc_var</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.stlc</span><span class=\"o\">,</span> <span class=\"n\">Sparsity.wknth_ix_false</span><span class=\"o\">,</span> <span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.lift_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.liftn_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">wknth_def</span><span class=\"o\">]</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">TermKind</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">AnnotSort</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">stlc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_merge</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Term.stlc_ty_wknth</span><span class=\"o\">]</span>\n      <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Term.stlc_wknth_true</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Sparsity</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t.wknth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stlc</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">wknth</span> <span class=\"n\">n</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t.stlc</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wknth</span> <span class=\"o\">(</span><span class=\"bp\">Γ.</span><span class=\"n\">ix</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stlc_var</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.stlc</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">Γ.</span><span class=\"n\">dep</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span>\n        <span class=\"n\">assumption</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_ix_true'</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Stlc.wknth</span><span class=\"o\">,</span> <span class=\"n\">Stlc.wk</span><span class=\"o\">,</span> <span class=\"n\">Wk.wknth_var</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_dep</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wknth</span><span class=\"o\">,</span> <span class=\"n\">wk</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.lift_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Wk.liftn_wknth_merge</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">wknth_def</span><span class=\"o\">]</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">TermKind</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">AnnotSort</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">stlc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Sparsity.wknth_merge</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Term.stlc_ty_wknth</span><span class=\"o\">]</span>\n      <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>In context: the wildcard tactics at the bottom of both induction are not only basically exactly the same, but produce almost exactly the same intermediate rewrites as far as I can tell. Yet the bottom induction completes in a fraction of a second, whereas the top one takes almost a minute on an i9 and eats up a whole 16 gigabytes of RAM. Any idea what gives, or how I could go about reducing this to a small test case? I had a few other similar inductions which were giving me grief...</p>",
        "id": 279210610,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650184429
    },
    {
        "content": "<p>Extra context: the top induction requires <code>set_option maxHeartbeats 1000000</code> to even typecheck at all. No other nonstandard options are set anywhere</p>",
        "id": 279210672,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650184465
    },
    {
        "content": "<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? What are <code>Term</code> and <code>Sparsity</code> here?</p>",
        "id": 279217055,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1650195052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20performance.20issues.20with.20induction/near/279217055\">said</a>:</p>\n<blockquote>\n<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? What are <code>Term</code> and <code>Sparsity</code> here?</p>\n</blockquote>\n<p>I'm probably gonna try and minimize it later this week. <code>Term</code> is a small enum representing basically the STLC + products, say about 10 variants, while <code>Sparsity</code> is just an alias for <code>List Bool</code>.</p>",
        "id": 279244589,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650236275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> Thanks! A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be very useful for us.</p>",
        "id": 279308361,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650301739
    }
]