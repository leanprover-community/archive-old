[
    {
        "content": "<p>How can I debug a tactic that does not terminate? I thought <code>dbg_trace</code> should do that, put I cannot see the output anywhere. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic test]</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">evalTest</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">loop</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span>\n</code></pre></div>\n<p>Or should I try to update Lean? I am on <code>leanprover/lean4:nightly-2021-10-21</code>.</p>",
        "id": 265598754,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1640024079
    },
    {
        "content": "<blockquote>\n<p>I cannot see the output anywhere.</p>\n</blockquote>\n<p>That's because it doesn't terminate.  You can see it on the command-line though.</p>",
        "id": 265600477,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640025026
    },
    {
        "content": "<p>There's also no automatic timeout like in Lean 3, you need to check for heartbeats yourself.</p>",
        "id": 265600536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640025073
    },
    {
        "content": "<p>For example this terminates, and shows \"Test\" in the infoview:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic test]</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">evalTest</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">checkMaxHeartbeats</span> <span class=\"s2\">\"test\"</span>\n    <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">loop</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 265601398,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640025600
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 265609877,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1640030707
    }
]