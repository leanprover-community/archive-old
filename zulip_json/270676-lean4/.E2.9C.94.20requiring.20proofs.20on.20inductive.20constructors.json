[
    {
        "content": "<p>what error do you get? It works fine for me on <code>Lean (version 4.0.0-nightly-2022-03-21, commit cba204e3cb20, Release)</code></p>",
        "id": 277071397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648592074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"c1\">-- (kernel) invalid nested inductive datatype 'Eq', nested inductive</span>\n<span class=\"c1\">-- datatypes parameters cannot contain local variables.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foo.headD</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">WithHeadD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo'</span>\n<span class=\"c1\">-- (kernel) invalid nested inductive datatype 'WithHeadD', nested</span>\n<span class=\"c1\">-- inductive datatypes parameters cannot contain local variables.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">Foo'</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Foo'</span>\n</code></pre></div>\n<p>I'm using <code>leanprover/lean4:nightly-2022-03-28</code></p>",
        "id": 277071911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648592217
    },
    {
        "content": "<p>If this is unexpected behavior, I will mark it as unresolved, even though you guys have provided a workaround</p>",
        "id": 277072415,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648592595
    },
    {
        "content": "<p>oh weird, it is now giving the same error on my install</p>",
        "id": 277073824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648593483
    },
    {
        "content": "<p>actually this is expected behavior; you can't have indices that end up having type <code>Foo</code> when you substitute into the nested inductive (here <code>a</code> and <code>x</code>) since that's an inductive-inductive type which is also verboten</p>",
        "id": 277073911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648593561
    },
    {
        "content": "<p>you can push everything about the <code>HeadD</code> and equality into the inductive, but it makes it less obviously <code>headD</code> related</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WithHeadD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">WithHeadD</span> <span class=\"n\">Foo'</span> <span class=\"bp\">→</span> <span class=\"n\">Foo'</span>\n</code></pre></div>",
        "id": 277073998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648593608
    },
    {
        "content": "<p>the claim is that <code>WithHeadD α</code> is equivalent to the type <code>Σ a x : α, {l : List α // l.headD a = x /\\ x = a}</code></p>",
        "id": 277074091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648593681
    },
    {
        "content": "<p>Alright, thanks!<br>\nI will come back to this thread later and chew what has been said</p>",
        "id": 277080638,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648599365
    },
    {
        "content": "<p>I think I got the idea, Mario (Lean is amazing btw <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Non-empty list -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NEList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.toNEList</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span>\n      <span class=\"k\">then</span> <span class=\"n\">NEList.cons</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"n\">b.toNEList</span> <span class=\"n\">h</span>\n      <span class=\"k\">else</span> <span class=\"n\">NEList.uno</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   l ≠ []</span>\n<span class=\"c1\">-- argument has type</span>\n<span class=\"c1\">--   List Foo</span>\n<span class=\"c1\">-- but function has type</span>\n<span class=\"c1\">--   _nested.List_1 → Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- works!</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 277209871,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648678000
    }
]