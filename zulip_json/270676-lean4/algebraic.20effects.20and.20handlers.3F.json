[
    {
        "content": "<p>I've heard that algebraic effects and handlers form a nicer basis for stateful computation than monads (for example, there's no need to lift operations as there is when you nest monads).  Has anyone thought about basing things in Lean on algebraic effects and handlers rather than monads?  (c.f. <a href=\"https://xnning.github.io/papers/haskell-evidently.pdf\">https://xnning.github.io/papers/haskell-evidently.pdf</a> , for example)</p>",
        "id": 231512479,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616521416
    },
    {
        "content": "<p>Yes, it's a topic we've considered before. The very short answer is that AFAIK there are only two ways to avoid lifting, neither of which is acceptable for building nontrivial programs like Lean itself: by blowing up the runtime overhead (open union encoding etc.) or the compile time overhead (monomorphization).</p>",
        "id": 231513644,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616521823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/algebraic.20effects.20and.20handlers.3F/near/231512479\">said</a>:</p>\n<blockquote>\n<p>I've heard that algebraic effects and handlers form a nicer basis for stateful computation than monads (for example, there's no need to lift operations as there is when you nest monads).  Has anyone thought about basing things in Lean on algebraic effects and handlers rather than monads?  (c.f. <a href=\"https://xnning.github.io/papers/haskell-evidently.pdf\">https://xnning.github.io/papers/haskell-evidently.pdf</a> , for example)</p>\n</blockquote>\n<p>FWIW I have found the auto-lifting in Lean4 to be so good that I almost never need to think about this.</p>",
        "id": 231516365,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616522799
    },
    {
        "content": "<p>Open union encoding is where everything is polymorphic over all the other effects (or underlying monads) that might be present?</p>",
        "id": 231529512,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616527692
    },
    {
        "content": "<p>Maybe have compile-time support for union?</p>",
        "id": 290960490,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658872095
    },
    {
        "content": "<p>I made a library for this. <a href=\"https://github.com/locriacyber/lean-eff\">https://github.com/locriacyber/lean-eff</a></p>",
        "id": 290961535,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658872805
    },
    {
        "content": "<p>See Example.Handler and Example.HandlerControl for example.</p>\n<p>I don't know how to bench mark, but the runtime of those seem minimal.</p>\n<p>using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#!/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">fish</span>\n<span class=\"n\">time</span> <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"mi\">10000</span><span class=\"o\">)</span>\n    <span class=\"bp\">./</span><span class=\"n\">test_control</span>\n<span class=\"kd\">end</span> <span class=\"bp\">&gt;/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">null</span>\n\n\n<span class=\"n\">time</span> <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"mi\">10000</span><span class=\"o\">)</span>\n    <span class=\"bp\">./</span><span class=\"n\">test_handle</span>\n<span class=\"kd\">end</span> <span class=\"bp\">&gt;/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">null</span>\n</code></pre></div>",
        "id": 290961679,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658872904
    },
    {
        "content": "<p>There is no difference in time used. (probably because it's IO bound)</p>",
        "id": 290961823,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658872969
    },
    {
        "content": "<p>I would love to remove the <code>sorry</code> in my code, if anyone want to help.</p>",
        "id": 290961892,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658873001
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Those should be proved automatically</p>",
        "id": 290962596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658873447
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Free</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_monadish</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">_ret</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">β</span>\n\n<span class=\"sd\">/-- Proof that a list has an element -/</span>\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Elem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Elem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Elem</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Elem.zero</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">prev</span><span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">a</span> <span class=\"n\">xs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Elem.succ</span> <span class=\"n\">prev</span>\n<span class=\"kd\">end</span> <span class=\"n\">Elem</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Union</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">[</span><span class=\"n\">prf</span><span class=\"o\">:</span> <span class=\"n\">Elem</span> <span class=\"n\">ε</span> <span class=\"n\">εs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Union</span> <span class=\"n\">εs</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Union</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Union</span> <span class=\"o\">[</span><span class=\"n\">IO</span><span class=\"o\">]</span> <span class=\"n\">Unit</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">simplify</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Union.mk</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"n\">Elem.zero</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span> <span class=\"n\">Union</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Eff</span> <span class=\"n\">es</span> <span class=\"o\">:=</span> <span class=\"n\">Free</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"n\">es</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Eff</span>\n  <span class=\"kd\">def</span> <span class=\"n\">run1</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stacked</span><span class=\"o\">:</span> <span class=\"n\">Eff</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Free.pure</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Free.bind</span> <span class=\"n\">val</span> <span class=\"n\">cont</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bind.bind</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Union.simplify</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">run1</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">Eff</span>\n</code></pre></div>",
        "id": 291019361,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658920505
    },
    {
        "content": "<p>I can't prove <code>Eff.run1</code>  terminate.</p>",
        "id": 291019389,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658920526
    },
    {
        "content": "<p>Lean doesn't let me do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">bbb</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Free.bind</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">aaa</span>\n  <span class=\"kd\">def</span> <span class=\"n\">aaa</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Free.bind</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">bbb</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So it's safe, right?</p>",
        "id": 291020128,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658921036
    },
    {
        "content": "<p>If you replace <code>sorry</code> by <code>{ simp_wf; done }</code> you will see the issue: there is no reasonable way to assign a meaningful <code>sizeOf</code> value to <code>cont</code>.  With <code>bind : ε α -&gt; (α -&gt; Free ε β) -&gt; Free ε β</code> you want the size of <code>bind val cont</code> to be larger than that of <code>cont x</code> for every <code>x : α</code>.  This doesn't make sense, for example, when <code>α</code> is <code>Nat</code> and <code>sizeOf (cont n) &gt; n</code> for every <code>n : Nat</code>.</p>\n<p>Bottom line, the  <code>Free</code> monad is too big for a measure into <code>Nat</code>. You will need to use a more general form well-founded recursion to make this work.</p>",
        "id": 291035415,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1658929494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/algebraic.20effects.20and.20handlers.3F/near/290961535\">said</a>:</p>\n<blockquote>\n<p>I made a library for this. <a href=\"https://github.com/locriacyber/lean-eff\">https://github.com/locriacyber/lean-eff</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> did you migrate this repository somewhere else (i.e. is it still public somewhere)?</p>",
        "id": 320924227,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1673526127
    }
]