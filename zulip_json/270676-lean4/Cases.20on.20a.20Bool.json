[
    {
        "content": "<p>I've defined the integers as a subtype that defines integers to be either <code>zero</code> or of the form <code>pred^n zero</code> or <code>succ^n zero</code>. I want to write a function that takes an arbitrary term of the base type and coerce it to the subtype by doing cases on whether the base int is already in normal form or not. So if it's in normal form, just package that as the int, and if not, just return zero packaged as an int. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">b_int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">b_int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">//</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- doesn't let me have access to proof that `is_norm x` when `c` is true</span>\n<span class=\"kd\">def</span> <span class=\"n\">b_int_to_int</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">Subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">Subtype.mk</span> <span class=\"n\">zero</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 241608079,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1622855106
    },
    {
        "content": "<p>There's a special syntax to get the proof in an if statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b_int_to_int</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">Subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">Subtype.mk</span> <span class=\"n\">zero</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 241609231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1622857063
    },
    {
        "content": "<p>You can also use the angle bracket constructor notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b_int_to_int</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 241609287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1622857131
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 241610050,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1622858371
    }
]