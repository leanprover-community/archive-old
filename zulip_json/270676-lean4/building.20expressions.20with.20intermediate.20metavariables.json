[
    {
        "content": "<p>How does one construct terms like <code>Iff.mpr (@Int.add_one_le_iff _ _) p</code> without handling metavariables manually?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Int.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Qq</span>\n\n<span class=\"c1\">-- Given a proof of `a &lt; b` in the integers, produce the proof of `a + 1 ≤ b`</span>\n<span class=\"c1\">-- using `Int.add_one_le_iff : ∀ {a b : Int}, a + 1 ≤ b ↔ a &lt; b`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Int.add_one_le_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"c1\">-- Now in `Expr`:</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Iff.mpr</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">Int.add_one_le_iff</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]])</span> <span class=\"n\">p</span>\n\n<span class=\"c1\">-- Fails with `AppBuilder for 'mkAppOptM', result contains metavariables`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.zero_lt_one</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I don't want an answer using <code>Qq</code>! :-)</p>",
        "id": 303745301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665624103
    },
    {
        "content": "<p>I'm very confused by the question, because you say you don't want <code>Qq</code> or metavariables and you are using both</p>",
        "id": 303753713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665632099
    },
    {
        "content": "<p>do you know what <code>a</code> and <code>b</code> are? You need metavariables to figure them out from <code>p</code> alone</p>",
        "id": 303753964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665632376
    },
    {
        "content": "<p>Sorry, I was only using <code>Qq</code> in order to fake some input for the #eval. I don't want to use it in <code>foo</code>.</p>",
        "id": 303757566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665636065
    },
    {
        "content": "<p>And when I said I don't want to handle metavariables manually I'm hoping to not have to use <code>mkFreshExprMVar</code> while building the expression.</p>",
        "id": 303757589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665636105
    },
    {
        "content": "<p>I don't know what <code>a</code> and <code>b</code> are, except of course that I can find them by decomposing <code>← inferType p</code>.</p>",
        "id": 303757675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665636165
    },
    {
        "content": "<p>I'm happy, I guess, to relax my constraint about not using <code>Qq</code> inside <code>foo</code>. Either way, I'd like to know how others would do this, and hoping that it is a one liner! In lean 3 we would have just written something like <code>to_expr ``(add_one_le_iff.mpr %%p)</code></p>",
        "id": 303757860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665636325
    },
    {
        "content": "<p>the analogous one-liner in lean 4 is <code>evalExpr (&lt;- `(add_one_le_iff.mpr $p))</code></p>",
        "id": 303759328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665637768
    },
    {
        "content": "<p>but that requires going against the stream, converting my <code>Expr</code> back into a <code>TSyntax `term</code>...</p>",
        "id": 303764793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665642321
    },
    {
        "content": "<p>which I guess I can do in some way by pretty printing, but I'm stumped for now.</p>",
        "id": 303764986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665642457
    },
    {
        "content": "<p>Ah, the trick for that is to create a metavariable, immediately assign it, and put syntax for the metavariable in the syntax</p>",
        "id": 303766234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665643246
    },
    {
        "content": "<p>I think there is a function to do this for you</p>",
        "id": 303766263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665643262
    }
]