[
    {
        "content": "<p>I'm not particularly happy with the current home of vscode-lean4 at <a href=\"https://github.com/mhuisi/vscode-lean4\">mhuisi/vscode-lean4</a>. Ideally, I'd like the following to be true:</p>\n<ol>\n<li>vscode-lean4 should be situated at <a href=\"https://github.com/leanprover-community\">leanprover-community</a>.</li>\n<li>Given that much of vscode-lean4 will include porting features from vscode-lean, the full history with all the original authors should be preserved.</li>\n<li>Future improvements to vscode-lean should be ported to vscode-lean4 (e.g. the recent improvements to <code>input.ts</code>), also while preserving the original authors.</li>\n<li>The extension should be published under <code>leanprover</code>, not under my <code>mhuisi</code> account.</li>\n</ol>\n<p>I'd prefer to get this over with as soon as possible, so that <a href=\"https://github.com/mhuisi/vscode-lean4\">mhuisi/vscode-lean4</a> does not widely establish itself as the URL for vscode-lean4 in documentation and elsewhere.</p>\n<p>One difficulty is that I'm not sure how to satisfy (2) and (3).<br>\nAt the moment, vscode-lean4 is intentionally minimal, both in terms of structure and configuration. Ideally, I'd like to keep it this way for the time being, and not litter the project with files that are being used in vscode-lean, but have not been ported yet as the corresponding server behaviour has not been implemented. Additionally, the extension was initially based on Microsoft's <a href=\"https://github.com/microsoft/vscode-extension-samples/tree/master/lsp-sample\">lsp-sample</a>, not vscode-lean, and hence also includes its <code>LICENSE</code>.</p>\n<p>What do you think would be the best way to go about this?</p>",
        "id": 222167892,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610193489
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>)</p>",
        "id": 222167970,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610193672
    },
    {
        "content": "<p>Regarding (1), that can be handled by transferring ownership of the repo. Github will helpfully make mhuisi/vscode-lean4 a redirect for leanprover-community/vscode-lean4 in perpetuity (we did the same thing when moving leanprover/mathlib to the leanprover-community account).</p>",
        "id": 222168319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610194255
    },
    {
        "content": "<p>I've been thinking about whether it is possible to have vscode-lean and vscode-lean4 actually be the same extension, with some heuristics to figure out whether we are in lean 4 mode. That will make the user experience a lot smoother</p>",
        "id": 222168386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610194340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222168386\">said</a>:</p>\n<blockquote>\n<p>I've been thinking about whether it is possible to have vscode-lean and vscode-lean4 actually be the same extension, with some heuristics to figure out whether we are in lean 4 mode. That will make the user experience a lot smoother</p>\n</blockquote>\n<p>We could read <code>leanpkg.toml</code> and use <a href=\"https://code.visualstudio.com/api/references/vscode-api#languages.setTextDocumentLanguage\">languages.setTextDocumentLanguage</a> or <a href=\"https://code.visualstudio.com/api/references/vscode-api#languages.setLanguageConfiguration\">languages.setLanguageConfiguration</a>. Note that as of now, vscode-lean4 does not really require users to open the project folder, although that may change as e.g. <code>go to definition</code> is implemented.</p>",
        "id": 222169266,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610195823
    },
    {
        "content": "<p>(2) can be solved by having a git repo with multiple roots in the git DAG, right?</p>",
        "id": 222172140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610200579
    },
    {
        "content": "<p>Yes, but that only helps if you want to bring in all the lean3 files with it</p>",
        "id": 222174592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610204858
    },
    {
        "content": "<p>Otherwise if you create that dag, delete all the files, then re-add them as you need them, git blame will just show when they were added</p>",
        "id": 222174637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610204909
    },
    {
        "content": "<p>Without being a specific solution, git-filter-repo is a (really <em>the</em>) thing that can help you filter some specific subset of files and preserve history: <a href=\"https://github.com/newren/git-filter-repo\">https://github.com/newren/git-filter-repo</a>, but it can also get annoying if you at a later point want to add some additional file you didn't add at the beginning</p>",
        "id": 222179003,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610212273
    },
    {
        "content": "<p>If you go the git-blame route (which I suspect is less annoying), git blame has a thing that lets you tell it revisions to ignore</p>",
        "id": 222179079,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610212375
    },
    {
        "content": "<p><a href=\"https://www.git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt\">https://www.git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt</a> -- that -- so you could maintain some file with the revisions that cleared out the files</p>",
        "id": 222179096,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610212412
    },
    {
        "content": "<p>I like the idea of integrating vscode-lean4 into vscode-lean and might take a stab at it when I find the time to. Some initial thoughts about what that would look like:</p>\n<ol>\n<li><code>vscode-lean/extension.ts</code> becomes <code>extension_lean3.ts</code>, <code>vscode-lean4/extension.ts</code> becomes <code>extension_lean4.ts</code>.</li>\n<li>A new <code>extension.ts</code> file reads <code>leanpkg.toml</code> and activates either <code>extension_lean3.ts</code> or <code>extension_lean4.ts</code> depending on the Lean version in the TOML. I don't think <code>leanpkg.ts</code> is useful here, since it has a dependency to <code>server.ts</code>. There might end up being some duplicate code here that can be factored out later.</li>\n<li><code>lean.*</code> config options and commands remain as they are. The Lean 4 portion of the extension will reuse <code>lean.*</code> options/commands where possible and will declare its own Lean 4-exclusive options/commands as <code>lean4.*</code>.</li>\n<li>Lean 3 will remain associated with the <code>lean</code> language id, whereas Lean 4 will be associated with the <code>lean4</code> language id. Similarly, there will be language configurations and syntax files for each version. <code>*.lean</code> remains associated with the language id <code>lean</code> by default. If launched, <code>extension_lean4.ts</code> will set the language id of every newly opened file to be <code>lean4</code>.</li>\n<li>Files that don't reference <code>server.ts</code> can probably be used immediately as-is, whereas files that depend on <code>server.ts</code>will need to be ported for the Lean 4 portion of the extension. To support both language versions, this might result in multiple ported files <code>*_lean4.ts</code>.</li>\n</ol>\n<p>One might also consider running both language servers, e.g. in (4) if we decided to only set the language id to <code>lean4</code> for files from within the project and Lean 3 files from outside the project are opened, or if users decide to set the language of a file to <code>lean</code> manually. I'm not sure how well that would work; it would probably require more changes to the Lean 3 part of the extension so that there's no accidental overlap between features and hence I'm in favor of disregarding this for now.</p>",
        "id": 222180521,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610214285
    },
    {
        "content": "<p>(Whether Lean 4-exclusive options/commands need to be <code>lean4.*</code> is also debatable, I think :))</p>",
        "id": 222181327,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610215201
    },
    {
        "content": "<p>Having a single extension for both Lean 3 and Lean 4 sounds like it would make things easiest for users at the cost of some integration pain for developers, which I personally think would be worth the effort. Points 1-5 above look like a reasonable plan to me, but I'd like to hear what <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thinks.</p>\n<p>P.S. I'm happy to help out to the extent I can, but I'm not familiar enough with the Lean 4 server yet to build much on my own. (Would be very interested in learning more about it though!) Feel free to ping me for questions or review.</p>",
        "id": 222189441,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610225852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I think your approach looks good.  The main benefit I expect from integrating both extensions is that it makes it easier to use both Lean 3 and Lean 4.  I believe the only code that would be initially shared by both extensions would be the input mode.  Eventually, the infoview might be shared as well.</p>",
        "id": 222316678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610380931
    },
    {
        "content": "<p>One potential downside is that we'll need to keep the Lean 3 part of the extension virtually forever.</p>",
        "id": 222316774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610380973
    },
    {
        "content": "<p>Maybe we should keep them separate after all, but still support installing them side-by-side (and running them at the same time in a workspace).</p>",
        "id": 222316961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610381041
    },
    {
        "content": "<p>I don't have a strong opinion on this, except that integrating the two makes it easier for me to preserve the git history of files like <code>input.ts</code> and use improvements to it in the future :)</p>",
        "id": 222317331,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610381182
    },
    {
        "content": "<p>I'm perfectly happy to backport / forwardport PRs between the extensions myself if necessary, that shouldn't influence the decision.</p>",
        "id": 222317444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610381233
    },
    {
        "content": "<p>My suggestion for the \"separate\" approach would be to make one commit on top of the vscode-lean extension, which ontains the current changes of <code>vscode-lean4</code>, and then move out all the files that are not ported yet to a separate directory where they are not compiled.  This should result in straightforward merge PRs.</p>",
        "id": 222317929,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610381428
    },
    {
        "content": "<p>I think it's unrealistic to expect much code sharing between the two extensions, both now and in the long run.</p>",
        "id": 222318067,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610381501
    },
    {
        "content": "<blockquote>\n<p>(and running them at the same time in a workspace).</p>\n</blockquote>\n<p>This is difficult. My proposal suggests that all *.lean files are identified according to the version specified in the <code>leanpkg.toml</code>. Users can set the version of a single file manually, but does that really work well with vscode-lean? I vaguely remember plenty of things only working well when you launch vscode-lean at the workspace-level.</p>",
        "id": 222318518,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610381688
    },
    {
        "content": "<p>If we went for the \"separate extensions\" approach, I'd imagine that it would work somewhat similar to my earlier proposal: Both extensions read the <code>leanpkg.toml</code> and activate depending on the version.</p>",
        "id": 222318908,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610381865
    },
    {
        "content": "<p>My main concern is that keeping the two extensions together is a lot of technical debt: Lean 3 server mode is essentially frozen (for compatibility reasons).  In a year or two from now, virtually nobody will use Lean 3 anymore but we'll still have lots of dead code in the repo.  Which we can't remove because one or two people will still want to look at old mathlib versions.</p>",
        "id": 222319528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382012
    },
    {
        "content": "<blockquote>\n<p>extension_lean4.ts will set the language id of every newly opened file to be lean4.</p>\n</blockquote>\n<p>Is there a reason this won't work for two separate extensions?</p>",
        "id": 222319621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222319621\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>extension_lean4.ts will set the language id of every newly opened file to be lean4.</p>\n</blockquote>\n<p>Is there a reason this won't work for two separate extensions?</p>\n</blockquote>\n<p>It does, as suggested right above :)</p>",
        "id": 222319839,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610382157
    },
    {
        "content": "<blockquote>\n<p>Users can set the version of a single file manually, but does that really work well with vscode-lean?</p>\n</blockquote>\n<p>If I set the language type to C++, then the Lean 3 extensions seems to shut up.  It might still start the Lean server, but we can probably fix this.</p>",
        "id": 222319959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382199
    },
    {
        "content": "<blockquote>\n<p>If we went for the \"separate extensions\" approach, I'd imagine that it would work somewhat similar to my earlier proposal: Both extensions read the leanpkg.toml and activate depending on the version.</p>\n</blockquote>\n<p>This is probably the most reasonable approach.</p>",
        "id": 222320172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382279
    },
    {
        "content": "<p>Right, that's not the issue. I'm wondering whether it's actually possible to reasonably run both language servers at once for the same workspace, and have vscode-lean do reasonable things when the project is a lean4 project, but the user sets some file to be lean3. The alternative is the conditional approach from my proposal, where only one server is active at a time.</p>",
        "id": 222320212,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610382296
    },
    {
        "content": "<p>Ah, so there are two questions here:</p>\n<ol>\n<li>Should there be two extensions?</li>\n<li>Should they be able run in a single project at the same time?</li>\n</ol>",
        "id": 222320318,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382360
    },
    {
        "content": "<p>I'm not sure 2) matters very much.  If we want to do hybrid projects, we can always put them in subdirectories.</p>",
        "id": 222320408,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382393
    },
    {
        "content": "<p>What about mathlib porting though...? :)</p>",
        "id": 222320459,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610382422
    },
    {
        "content": "<p>The hybrid approach as suggested by Leo would just have two directories: <code>mathlib/lean3</code> and <code>mathlib/lean4</code>.  Plus a script that compiles the lean3 directory into <code>lean4/MathlibOld.olean</code> or something.</p>",
        "id": 222320644,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382491
    },
    {
        "content": "<p>Putting both in the same directory doesn't work seamlessly either: elan picks the lean version based on <code>leanpkg.toml</code>.  And there's only one version field there.</p>",
        "id": 222320749,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610382553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222319528\">said</a>:</p>\n<blockquote>\n<p>My main concern is that keeping the two extensions together is a lot of technical debt: Lean 3 server mode is essentially frozen (for compatibility reasons).  In a year or two from now, virtually nobody will use Lean 3 anymore but we'll still have lots of dead code in the repo.  Which we can't remove because one or two people will still want to look at old mathlib versions.</p>\n</blockquote>\n<p>It's not dead code until the users are not using it anymore. All indications are that this won't happen for a long while. If/when we get to a point where we can drop support for it, it can be moved to a separate extension (assuming you want to keep some lean 3 extension on the marketplace in perpetuity) based on a frozen version of the current one</p>",
        "id": 222321843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610382971
    },
    {
        "content": "<p>Also, I think it is possible to share more code if the lean 3 part of the code is just a shim to make the communication roughly compatible with the LSP interface</p>",
        "id": 222322174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383130
    },
    {
        "content": "<p>If we want to separate the extensions anyhow, then why merge them in the first place?  From my point of view, the only real advantage is that the input mode can be shared.  Everything else will and should probably be independent anyhow.</p>",
        "id": 222322192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610383138
    },
    {
        "content": "<p>Having them as separate installed extensions means that they compete for \"ownership\" of the files. VSCode wants to associate an extension to the <code>.lean</code> file extension</p>",
        "id": 222322366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222322366\">said</a>:</p>\n<blockquote>\n<p>Having them as separate installed extensions means that they compete for \"ownership\" of the files. VSCode wants to associate an extension to the <code>.lean</code> file extension</p>\n</blockquote>\n<p>This is not an issue, we can activate either extension conditionally depending on <code>leanpkg.toml</code> as in the earlier proposal and dynamically associate <code>*.lean</code> files with Lean 4.</p>",
        "id": 222322507,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610383269
    },
    {
        "content": "<p>Having them both in one extension means that the lean 3/4 determination is up to the extension, which I think will be necessary</p>",
        "id": 222322508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222322508\">said</a>:</p>\n<blockquote>\n<p>Having them both in one extension means that the lean 3/4 determination is up to the extension, which I think will be necessary</p>\n</blockquote>\n<p>I agree that this is necessary.  But it is also completely independent of whether there's one or two extensions.</p>",
        "id": 222322586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610383311
    },
    {
        "content": "<p>So the lean 3 extension thinks that all lean files are lean 3 and the lean 4 extension is conditionally activated? How does that work with things like syntax highlight?</p>",
        "id": 222322797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222322797\">said</a>:</p>\n<blockquote>\n<p>So the lean 3 extension thinks that all lean files are lean 3 and the lean 4 extension is conditionally activated? How does that work with things like syntax highlight?</p>\n</blockquote>\n<p>Syntax highlighting is bound to the language id, not the file extension. I've already done and tested this stuff in my local fork of vscode-lean, I only need to integrate the conditional <code>leanpkg.toml</code> stuff.</p>",
        "id": 222322956,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610383453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222322174\">said</a>:</p>\n<blockquote>\n<p>Also, I think it is possible to share more code if the lean 3 part of the code is just a shim to make the communication roughly compatible with the LSP interface</p>\n</blockquote>\n<p>There's enough differences that it's not easy to paper over them with a shim.  For example: Lean 4 doesn't rebuild dependencies by itself.  Lean 3 has a specific widget protocol, etc.<br>\nEither you make Lean 3 users angry by taking away Lean 3 features, or you make Lean 4 users angry by not supporting better protocols.</p>",
        "id": 222322999,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610383478
    },
    {
        "content": "<blockquote>\n<p>Lean 4 doesn't rebuild dependencies by itself</p>\n</blockquote>\n<p>So you have a \"rebuild dependencies\" command that is a no op for one of them</p>\n<blockquote>\n<p>Lean 3 has a specific widget protocol</p>\n</blockquote>\n<p>I hope that lean 4 gets one too (in the meantime it can be a no op)</p>",
        "id": 222323145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610383540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222322192\">said</a>:</p>\n<blockquote>\n<p>If we want to separate the extensions anyhow, then why merge them in the first place?  From my point of view, the only real advantage is that the input mode can be shared.  Everything else will and should probably be independent anyhow.</p>\n</blockquote>\n<p>One advantage (which I'm not sure matters much) is that we could eventually seamlessly turn vscode-lean into the Lean 4 extension and factor out the Lean 3 part into a vscode-lean3 extension, whereas if we use two separate extensions, the Lean 4 extension would likely always remain vscode-lean4, which could result in confusion.</p>",
        "id": 222323262,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610383587
    },
    {
        "content": "<p>We can rename the \"lean\" extension to \"lean 3\" today.  That shouldn't be the issue here.</p>",
        "id": 222323890,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610383858
    },
    {
        "content": "<p>Ok :)</p>",
        "id": 222323961,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610383884
    },
    {
        "content": "<p>As long as it's <code>leanprover/lean4</code>, <code>vscode-lean4</code> seems appropriate</p>",
        "id": 222324567,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610384119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The new widget protocol will probably look different from the current one.  Obvious cleanups aside, e.g. there's currently no way to keep a widget when a file is recompiled.<br>\nBut we're getting away from the main issue here.  Writing (and maintaining) a compatibility shim for Lean 3 is a dead end and having to support it indefinitely is technical debt.</p>",
        "id": 222324575,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384121
    },
    {
        "content": "<p>perhaps eventually, but good lean 3/4 integration is very important during the transition period, and I think the transition period will be quite long (&gt;1 year) so it seems like a worthwhile investment</p>",
        "id": 222324732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384202
    },
    {
        "content": "<p>I am very happy that we don't have to support Lean 2 in the vscode extension.</p>",
        "id": 222324744,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384208
    },
    {
        "content": "<p>(i surrender at trying to understand zulip polls)</p>",
        "id": 222324827,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610384248
    },
    {
        "content": "<p>From what Marc has found out, there doesn't seem to be any technical advantage to integrating both extensions.  We can and need to use exactly the same mechanism (manually setting language ids and parsing leanpkg.toml) in both cases.</p>",
        "id": 222324895,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384279
    },
    {
        "content": "<p>Fwiw, for the handful of Emacs users I'll just assume they're happy with using a separate editor instance per Lean version, which <code>emacs --eval</code> makes easy enough to set up (which is exactly what <code>nix run .#emacs-dev</code> is doing).</p>",
        "id": 222325054,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610384327
    },
    {
        "content": "<p>vscode doesn't like it when you open the same folder twice, so as long as the vscode-lean4 extension takes over use of the lean extension as it does currently, it can't be used for hybrid projects</p>",
        "id": 222325390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What are your thoughts on <code>leanpkg.toml</code> for hybrid projects.  Both 3 and 4 in the same toml?  Two subdirectories for 3/4, and one toml per subdirectory?</p>",
        "id": 222325572,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384529
    },
    {
        "content": "<p>will it work if you manually set the language ID?</p>",
        "id": 222325579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384535
    },
    {
        "content": "<p>My original hope was for the files themselves to indicate the language, e.g. via <code>#lang lean3</code></p>",
        "id": 222325669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384581
    },
    {
        "content": "<p>It could be one toml or two, I don't think it makes a big difference. One toml per subdirectory would be a big change from the current setup though</p>",
        "id": 222325930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384687
    },
    {
        "content": "<p>since right now you don't have to declare the list of files in a project</p>",
        "id": 222325997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384712
    },
    {
        "content": "<p>I mean <code>mathlib/lean3/leanpkg.toml</code> and <code>mathlib/lean4/leanpkg.toml</code>.</p>",
        "id": 222326069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384750
    },
    {
        "content": "<p>The reason I'm asking is this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ grep lean_version leanpkg.toml\n<span class=\"nv\">lean_version</span> <span class=\"o\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.24.0\"</span>\n</code></pre></div>",
        "id": 222326157,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384779
    },
    {
        "content": "<p>Oh, that might work, although if the lean3 files call the lean4 files and vice versa it's an interesting task to figure out how to get everything compiling</p>",
        "id": 222326282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384828
    },
    {
        "content": "<p>I'm not sure if vice versa is necessary.  We can just start porting at the leaves.</p>",
        "id": 222326344,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610384860
    },
    {
        "content": "<p>wasn't there talk of using oleans to communicate both ways?</p>",
        "id": 222326473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384902
    },
    {
        "content": "<p>(in the lean 4 logic)</p>",
        "id": 222326484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384910
    },
    {
        "content": "<p>I think it's easier to start porting from the root, since there will be competition for basic things like <code>Nat</code> vs <code>nat</code> otherwise</p>",
        "id": 222326593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610384977
    },
    {
        "content": "<p>Clearly, the olean converter needs to adapt the naming convention as well.</p>",
        "id": 222326704,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610385010
    },
    {
        "content": "<p>that's not all though, it needs to be logic-equivalent and that's surely not going to be the case</p>",
        "id": 222326753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610385036
    },
    {
        "content": "<p>it will probably work okay for a lot of things but your average leaf file will almost certainly depend on at least one of the exceptions</p>",
        "id": 222326843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610385080
    },
    {
        "content": "<p>I'm not sure I understand completely what \"logic-equivalent\" is.  You obviously need to map <code>and</code> to <code>And</code>, and <code>iff</code> to <code>Iff</code>, and <code>quot</code> to <code>Quot</code>, and <code>classical.choice</code> to <code>Classical.choice</code>.</p>",
        "id": 222327192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610385241
    },
    {
        "content": "<p>I haven't looked at all the details of lean 4 definitions, but I would assume that they vary in at least a few places. For example <code>Add</code> has more arguments than <code>has_add</code>, there is more stuff with boolean equality and less with decidability, and other things of that nature. It's not a literal 1-1 replacement even if you fix the naming scheme</p>",
        "id": 222327837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610385515
    },
    {
        "content": "<p>are all the inheritance hierarchies going to be exactly the same between lean 3 and lean 4</p>",
        "id": 222327861,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1610385528
    },
    {
        "content": "<p>so in some leaf file about topological rings you will have <code>has_add</code> from lean 3 stuff and <code>Add</code> from lean 4 stuff and no theorems that relate them</p>",
        "id": 222328083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610385616
    },
    {
        "content": "<p><code>Add</code> is actually the same.  <code>HAdd</code> is new and different.</p>",
        "id": 222328106,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610385627
    },
    {
        "content": "<p>There are some really gratuitious argument order changes though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3:</span>\n<span class=\"kd\">def</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- Lean 4:</span>\n<span class=\"kd\">def</span> <span class=\"n\">ite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 222328379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610385761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222328106\">said</a>:</p>\n<blockquote>\n<p><code>Add</code> is actually the same.  <code>HAdd</code> is new and different.</p>\n</blockquote>\n<p>This might be something to watch out for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">comm1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">comm2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Add.add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"n\">comm1</span> <span class=\"n\">x</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"n\">comm2</span> <span class=\"n\">x</span> <span class=\"c1\">-- Fails</span>\n</code></pre></div>",
        "id": 222328854,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610385966
    },
    {
        "content": "<p>I'm not sure if this will be a huge problem in practice.  Typically both <code>Add</code> and <code>HAdd</code> should come from <code>CommMonoid</code> or something, and then they're defeq.</p>",
        "id": 222329375,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610386203
    },
    {
        "content": "<p>Except when doing keyed matching e.g. in <code>simp</code> (edit: or <code>rw</code> as above) <span aria-label=\"silence\" class=\"emoji emoji-1f910\" role=\"img\" title=\"silence\">:silence:</span> . Ideally the operators should not be mixed.</p>",
        "id": 222329798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610386417
    },
    {
        "content": "<p>I just mean if there's an interface to import Lean 3 oleans, then if somehow there's a mapping <code>has_add.add -&gt; Add.Add</code>, this test suggests you won't be able to use those lemmas with <code>rw</code> without some more work.</p>",
        "id": 222329916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610386457
    },
    {
        "content": "<p>Ah, so if I understand this correctly, <code>Add.add</code> is a forbidden constant that shouldn't be used.  Kind of like <code>comm_monoid.mul</code> now.</p>",
        "id": 222332069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610387363
    },
    {
        "content": "<p>Heterogeneous operators are very expressive, but that, as usual, does come with <a href=\"https://github.com/leanprover/lean4/commit/21208833078c022eb7ff60bd14fde3a730dc98a9\">a few surprises</a> in practice. So really there should be one more experiment on whether the current encoding of heterogeneous operators with default instances works for mathlib or not. But once there has been a decision, people should stick with it to avoid rewriting issues, yes. Or they will need to call a tactic normalizing homogeneous to heterogeneous operators first.</p>",
        "id": 222433921,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610460041
    },
    {
        "content": "<p>By the way Sebastian -- we've been using homogeneous <code>*</code> for years now in Lean 3, but occasionally we want an object to act on another object, and for this we often use mathlib's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is tied to different notation (<code> • </code> a.k.a. <code>\\bub</code>).</p>",
        "id": 222443515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610464093
    },
    {
        "content": "<p>Should new feature PRs be made to <a href=\"https://github.com/mhuisi/vscode-lean4\">https://github.com/mhuisi/vscode-lean4</a> or to <a href=\"https://github.com/leanprover/vscode-lean\">https://github.com/leanprover/vscode-lean</a>? I have implemented unicode autocomplete for <a href=\"https://github.com/mhuisi/vscode-lean4\">https://github.com/mhuisi/vscode-lean4</a>, and am not sure whether to implement it for <a href=\"https://github.com/leanprover/vscode-lean\">https://github.com/leanprover/vscode-lean</a> too.</p>\n<p><a href=\"/user_uploads/3121/qm4UlSuXJZ4ZFlKHZSH4XKgK/Lean-Unicode-Completion.gif\">Lean-Unicode-Completion.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qm4UlSuXJZ4ZFlKHZSH4XKgK/Lean-Unicode-Completion.gif\" title=\"Lean-Unicode-Completion.gif\"><img src=\"/user_uploads/3121/qm4UlSuXJZ4ZFlKHZSH4XKgK/Lean-Unicode-Completion.gif\"></a></div>",
        "id": 222547243,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610525542
    },
    {
        "content": "<p>Input-related PRs should go to vscode-lean for the forseeable future.</p>",
        "id": 222550354,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610527626
    },
    {
        "content": "<p>Isn't there already an open PR against vscode-lean for unicode autocomplete?</p>",
        "id": 222708451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610625952
    },
    {
        "content": "<p>[With the leanprover/lean4 master, all LSP clients now support displaying the type and documentation on hover]</p>",
        "id": 222980217,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610802133
    },
    {
        "content": "<p>Would I be correct in saying that neither \"lean4-mode\" for emacs nor vscode-lean4 currently support proof-state/goal display?</p>",
        "id": 222982580,
        "sender_full_name": "Super Veridical",
        "timestamp": 1610805623
    },
    {
        "content": "<p>I guess my limited C++ skills are failing me since I can't seem to compile master on macOS, cmake is complaining about <code>fatal error: 'stdlib.h' file not found</code> once it gets to compiling <code>stage1</code> which IIRC is something usually about it using the wrong <code>sysroot</code> on macOS or somethign right? I'm using normal <code>clang++</code> as it looks like the lean4 docs recommend.</p>",
        "id": 222988167,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610811685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Home.20of.20vscode-lean4/near/222988167\">said</a>:</p>\n<blockquote>\n<p>I guess my limited C++ skills are failing me since I can't seem to compile master on macOS, cmake is complaining about <code>fatal error: 'stdlib.h' file not found</code> once it gets to compiling <code>stage1</code> which IIRC is something usually about it using the wrong <code>sysroot</code> on macOS or somethign right? I'm using normal <code>clang++</code> as it looks like the lean4 docs recommend.</p>\n</blockquote>\n<p>Alternatively you can also download the artifact directly: <a href=\"https://github.com/leanprover/lean4/runs/1712478947\">https://github.com/leanprover/lean4/runs/1712478947</a> (\"Artifacts\" in the top right corner)</p>",
        "id": 222988270,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610811822
    },
    {
        "content": "<p>Ah cool thanks!</p>",
        "id": 222988344,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610811896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> prettyyyy :) it works, thanks!</p>",
        "id": 222988544,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610812125
    },
    {
        "content": "<p>No need for that, everything should be contained in the latest nightly: <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2021-01-16\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2021-01-16</a></p>",
        "id": 222988546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610812126
    },
    {
        "content": "<p>PR for compat with vscode-lean4: <a href=\"https://github.com/leanprover/vscode-lean/pull/253\">https://github.com/leanprover/vscode-lean/pull/253</a></p>",
        "id": 223066993,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1610922360
    },
    {
        "content": "<p>To conclude this thread:</p>\n<ul>\n<li>vscode-lean4 has moved to <a href=\"https://github.com/leanprover-community/vscode-lean4\">leanprover-community/vscode-lean4</a></li>\n<li>The extension can now be found under the ID <a href=\"https://marketplace.visualstudio.com/items?itemName=leanprover.lean4\">leanprover.lean4</a> on the marketplace</li>\n<li>mhuisi.lean4, the old version of vscode-lean4 that was published on my user account, has been unpublished</li>\n<li>The version of vscode-lean4 that is published at leanprover.lean4 can be run at the same time as vscode-lean</li>\n<li><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> added server support for go to definition :)</li>\n</ul>",
        "id": 224019164,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1611656218
    },
    {
        "content": "<p>I just installed Lean 4 to play a little bit with it. No problem to install the VScode extension, thanks a lot! Just a small issue with the go to definition feature: it seems it doesn't try to open the right file, so it doesn't find it. Possibly related to the fact that I'm on windows. The output is like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Impossible</span> <span class=\"n\">d'ouvrir</span> <span class=\"bp\">'</span><span class=\"n\">Prelude.lean'</span> <span class=\"o\">:</span> <span class=\"n\">Impossible</span> <span class=\"n\">de</span> <span class=\"n\">lire</span> <span class=\"n\">le</span> <span class=\"n\">fichier</span> <span class=\"bp\">'\\\\</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">\\</span><span class=\"n\">bin</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">\\</span><span class=\"n\">lean</span><span class=\"bp\">\\</span><span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Prelude.lean'</span> <span class=\"o\">(</span><span class=\"n\">Unknown</span> <span class=\"o\">(</span><span class=\"n\">FileSystemError</span><span class=\"o\">):</span> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">UNKNOWN</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">error</span><span class=\"o\">,</span> <span class=\"n\">stat</span> <span class=\"bp\">'\\\\</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">\\</span><span class=\"n\">bin</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">\\</span><span class=\"n\">lean</span><span class=\"bp\">\\</span><span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Prelude.lean'</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>The right file to open would be <code>\\\\c:\\Users\\Sebastien\\.elan\\toolchains\\leanprover-lean4-nightly\\lib\\lean\\src\\Init\\Prelude.lean</code>, and the Lean location is <code>\\\\c:\\Users\\Sebastien\\.elan\\toolchains\\leanprover-lean4-nightly\\bin</code>. It seems it tries to concatenate the two to find the file name.</p>",
        "id": 224100954,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611694234
    },
    {
        "content": "<p>Huh, interesting! <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Any idea? Since the error seems to be from VS Code, <code>fileWithExt</code> must have succeeded. Prefixing that backslash-separated path with <code>file://</code> afterwards is probably incorrect, though I'm not sure how it could lead to this duplication.</p>",
        "id": 224110462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611698454
    },
    {
        "content": "<p>Just getting set up on Windows and I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ which leanpkg\n/c/Users/Wojtek/Desktop/<span class=\"se\">\\U</span>sers<span class=\"se\">\\W</span>ojtek/.elan/bin/leanpkg\n</code></pre></div>\n<p>which looks suspiciously similar but it's just the shell.</p>",
        "id": 224117860,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611702329
    },
    {
        "content": "<p>Well, I played with Lean 4 on Windows and I'm amazed you got as far as go-to-def <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> The actual bug appears to be that <code>file://host/fname</code> means \"<code>fname</code> on remote host <code>host</code>\", so VSCode interprets <code>c:</code> as a network share and then who knows what happens. For me, the editor crashes with an OOM/infinite loop. PR'd a fix that should appear in the nightly in a few days. My Windows setup is unfortunately incredibly painful to work with, so I will not be able to look at Windows any more until I resolve that.</p>",
        "id": 224144431,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611728336
    },
    {
        "content": "<p>Just to confirm that with the last nightly the problem is solved on my computer. Thanks!</p>",
        "id": 224435412,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611902041
    }
]