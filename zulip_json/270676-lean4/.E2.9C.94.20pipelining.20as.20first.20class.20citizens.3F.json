[
    {
        "content": "<p>Thanks! It makes sense.<br>\n(But I don't know what fbip is.)</p>",
        "id": 262296839,
        "sender_full_name": "Gabriel DORIATH DÖHLER",
        "timestamp": 1637573897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454626\">Gabriel DORIATH DÖHLER</span> has marked this topic as resolved.</p>",
        "id": 262296940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637573992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454626\">Gabriel DORIATH DÖHLER</span> <a href=\"#narrow/stream/270676-lean4/topic/pipelining.20as.20first.20class.20citizens.3F/near/262296839\">said</a>:</p>\n<blockquote>\n<p>Thanks! It makes sense.<br>\n(But I don't know what fbip is.)</p>\n</blockquote>\n<p>\"Fbip\" refers to \"functional but in place\". The term was introduced by <a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf\">the perceus paper</a>, which is based on <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">Lean 4's implementation</a>. It's a runtime optimization using reference counting. Essentially, code that looks imperative and for which it can be guaranteed that mutation is safe at runtime will really use mutation instead of allocating new memory and throwing the old memory away.</p>",
        "id": 262297610,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1637574378
    }
]