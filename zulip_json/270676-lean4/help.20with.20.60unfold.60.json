[
    {
        "content": "<p>Is there a way to unfold only one occurrence of a definition. <code>unfold</code> unfolds all occurrences. This affects proofs by induction</p>",
        "id": 316762689,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671461909
    },
    {
        "content": "<p>I am referring to the first occurrence in the goal, so I don't see a way to separately call this occurrence by a name</p>",
        "id": 316762820,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671461963
    },
    {
        "content": "<p>Maybe with <code>conv</code>?</p>",
        "id": 316763678,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671462188
    },
    {
        "content": "<p>If <code>unfold</code> is doing definitional unfolding then you might be able to use <code>change</code> with some <code>_</code> .</p>",
        "id": 316764321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671462356
    },
    {
        "content": "<p>It did not work. I am at my wits end with some of these proofs</p>",
        "id": 316768451,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671463462
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 316769903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671463813
    },
    {
        "content": "<p>It is the same as last time. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.WFTactics</span>\n\n<span class=\"c1\">-- Imported for Boolean `xor`</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Bool.Lemmas</span>\n\n<span class=\"c1\">-- Imported for `bit0` and `bit1`</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"c1\">-- Imported for cases'</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- The following line helps override the default behaviour, wherein</span>\n<span class=\"c1\">-- lean equates xor with Nat.xor</span>\n<span class=\"c1\">-- bxor points to Mathlib.Data.Bool.Basic.xor</span>\n<span class=\"c1\">--- Author : Shreyas Srinivas</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bxor</span> <span class=\"o\">:=</span> <span class=\"n\">xor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">boddDiv2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">nat.bodd_div2</span> <span class=\"n\">Nat.boddDiv2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">boddDiv2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">boddDiv2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_zero</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_one</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_two</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">nat.bodd_two</span> <span class=\"n\">Nat.bodd_two</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span><span class=\"cm\">  unfold bodd boddDiv2 &lt;;&gt; cases boddDiv2 n &lt;;&gt; rename_i fst snd &lt;;&gt; cases fst &lt;;&gt;</span>\n<span class=\"cm\">  simp &lt;;&gt;</span>\n<span class=\"cm\">  cases n &lt;;&gt; simp [add_succ, ]</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bodd</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">boddDiv2</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span>\n    <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 316770620,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671464014
    },
    {
        "content": "<p>This doesn't compile for me. Can you make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 316770939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671464120
    },
    {
        "content": "<p>I edited it and checked on the lean playground. It works. At the end of <code>case succ</code>, it seems unfolding <code>boddDiv2 (succ n)</code> would be useful. <code>unfold boddDiv2</code> unfolds all occurrences of <code>boddDiv2</code></p>",
        "id": 316771816,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671464350
    },
    {
        "content": "<p>So far I have worked around this and fixed a number of other errors in the file (Down from 70 odd messages to 19 messages). But I can't overlook this one anymore</p>",
        "id": 316772178,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671464433
    },
    {
        "content": "<p>A workaround is to introduce a statement <code>have l : boddDiv2 (succ n) = ... := by unfold boddDiv2</code> and then <code>rw [l]</code>.</p>",
        "id": 316775533,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671465380
    },
    {
        "content": "<p>I mean you can see what <code>boddDiv2 (succ n)</code> unfolds to, copy-paste that (in place of <code>...</code> above) to make the claim <code>l</code> and proceed as above.</p>",
        "id": 316775948,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671465497
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bodd</span><span class=\"o\">,</span> <span class=\"n\">boddDiv2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 316776867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671465743
    },
    {
        "content": "<p><code>unfold</code> was unfolding too far; <code>simp only</code> gets it right.</p>",
        "id": 316778946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671466381
    },
    {
        "content": "<p>I've also had the general experience that <code>rw</code> can be useful for performing a single unfold.</p>",
        "id": 316780807,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1671466963
    },
    {
        "content": "<p>Ruben's suggestion also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bodd</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">boddDiv2</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 316783960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671467876
    },
    {
        "content": "<p><code>change</code> works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bodd</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">boddDiv2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 316784276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671467977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20.60unfold.60/near/316776867\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bodd</span><span class=\"o\">,</span> <span class=\"n\">boddDiv2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah this worked. Using simp only also helped with another error. Thanks</p>",
        "id": 316826889,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671482168
    }
]