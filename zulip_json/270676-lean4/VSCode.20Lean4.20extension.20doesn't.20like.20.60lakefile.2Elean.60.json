[
    {
        "content": "<p>I now get error messages of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">leanpkg</span> <span class=\"n\">print</span><span class=\"bp\">-</span><span class=\"n\">paths</span><span class=\"bp\">`</span> <span class=\"n\">failed</span><span class=\"o\">:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">configuring</span> <span class=\"n\">testdep</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span> <span class=\"n\">must</span> <span class=\"n\">contain</span> <span class=\"n\">a</span> <span class=\"n\">unique</span> <span class=\"bp\">'.</span><span class=\"n\">lean'</span> <span class=\"n\">file</span> <span class=\"n\">as</span> <span class=\"n\">the</span> <span class=\"n\">package</span> <span class=\"n\">root</span>\n</code></pre></div>\n<p>because I have both <code>lakefile.lean</code> and <code>Testdep.lean</code> in the root of a repository. Is this a known issue? Is someone already working on having the VSCode lean4 extension talk to <code>lake</code> to obtain the path information?</p>",
        "id": 255923212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633236482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yeah, sadly Lean server and VSCode integration does not exist for Lake yet.</p>\n<p>The way I understand it there needs to be an change to the Lean 4 server so that it will try<code>lake print-paths</code> if there is a <code>lakefile.lean</code> in the working directory. There may also be something on the VSCode side that needs to be done as well, but I am not sure what. </p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 255924152,
        "sender_full_name": "Mac",
        "timestamp": 1633237433
    },
    {
        "content": "<p>I believe that's it</p>",
        "id": 255925863,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633239376
    },
    {
        "content": "<p>Yes, the server calls <code>leanpkg print-paths A.B C.D E.F.G</code> to compile the specified dependencies and print the path for the oleans.  Changing this to call lake is the easiest way to support lake.<br>\nI would take the opportunity to use a more descriptive command name though (like <code>compile-imports</code>), and maybe also upgrade the output format to json.</p>",
        "id": 255951271,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633267273
    },
    {
        "content": "<p>In the vscode extension, there is nothing to do (because we require the user to open the right directory).  We'll need to adapt the neovim plugin though.  I'm not sure if the emacs mode requires any changes.</p>",
        "id": 255951313,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633267322
    },
    {
        "content": "<p>Compiling imports is merely a necessary side-effect for printing their paths <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 255953173,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633269334
    },
    {
        "content": "<p>Yeah, I'm not sure what the best name for the operation is either.  If we reimplement <code>--old</code>, then that command will only print and not compile.</p>",
        "id": 255953452,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633269603
    },
    {
        "content": "<p>When is <code>--old</code> used in Lean 3c?</p>",
        "id": 255953890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633270012
    },
    {
        "content": "<p>You need to manually set it in the vscode settings (as an extra argument to the server).  Then the server will use oleans even if they're out of date.</p>",
        "id": 255953987,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633270103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/255925863\">said</a>:</p>\n<blockquote>\n<p>I believe that's it</p>\n</blockquote>\n<p>What is the plan on this? Is this something you will be implementing after merging <a href=\"https://github.com/leanprover/lean4/pull/683\">#683</a>? Or should i be updating the server and PR'ing a change?</p>",
        "id": 255958201,
        "sender_full_name": "Mac",
        "timestamp": 1633274326
    },
    {
        "content": "<p>It should be part of the PR,  I can write the Lean side. JSON sounds like a good idea.</p>",
        "id": 255971585,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633287417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> currently, <code>lake print-paths</code> operators the same as <code>leanpkg print-paths</code>. That is, it performs a build (outputting the usual build information along the way) and then spits out two lines of search paths (the first being oleans and the second being sources). How would you like to see that changed?</p>",
        "id": 255976271,
        "sender_full_name": "Mac",
        "timestamp": 1633291721
    },
    {
        "content": "<p>How about <code>{\"LEAN_PATH\": ..., \"LEAN_SRC_PATH\": ...}</code>?</p>",
        "id": 255982127,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633297543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> works for me. What about the build output, should that be completely quieted?</p>",
        "id": 255989017,
        "sender_full_name": "Mac",
        "timestamp": 1633305007
    },
    {
        "content": "<p>Right. We definitely want to keep streaming it to the editor, so should we put the build output on stderr and the JSON on stdout?</p>",
        "id": 256021679,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633335312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> okay, done (results to stdout, build output to stderr). Do you want the the values for <code>LEAN_PATH</code> and <code>LEAN_SRC_PATH</code> in the JSON to still be search paths (i.e., strings separated by a <code>:</code>) or would you like them to just be JSON arrays of paths?</p>",
        "id": 256088879,
        "sender_full_name": "Mac",
        "timestamp": 1633365143
    },
    {
        "content": "<p>Thanks. I have a slight preference for search paths since most users will simply forward the values to Lean. What do you think?</p>",
        "id": 256089805,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633365442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> it does not matter to me. The only complaints I can imagine is that search paths could break if a file name contains a ':'/';` (which I think my a be legal on Linux?) and that said separator is different on each platform (whereas the JSON would be cross-platform). Otherwise, they are both relatively easy to parse / process.</p>",
        "id": 256090129,
        "sender_full_name": "Mac",
        "timestamp": 1633365562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  another, somewhat unrelated question that has been bugging me: why are the <code>Json</code> and <code>Xml</code> libraries in <code>Lean</code> instead of <code>Std</code>?</p>",
        "id": 256090870,
        "sender_full_name": "Mac",
        "timestamp": 1633365808
    },
    {
        "content": "<blockquote>\n<p>I have a slight preference for search paths since most users will simply forward the values to Lean.</p>\n</blockquote>\n<p>We're talking about a lean-internal API here that is only called by the server.  The reason I suggested json here is partly for 1) future proofness, and 2) clarity of the information when debugging (if the two arrays come with human-readable keys then you don't have to guess what the first and second lines are (or if it's possible to get a third line)).</p>\n<p>Regarding the format, I was thinking of a slightly more typed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">ToJson</span> <span class=\"n\">for</span> <span class=\"n\">System.FilePath</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">FromJson</span> <span class=\"n\">for</span> <span class=\"n\">System.FilePath</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ToJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToJson</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toJson</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">toJson</span> <span class=\"n\">xs.toArray</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Array.toList</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">OutputBikesheddable</span> <span class=\"n\">where</span>\n  <span class=\"n\">sourcePath</span> <span class=\"o\">:</span> <span class=\"n\">SearchPath</span>\n  <span class=\"n\">binaryPath</span> <span class=\"o\">:</span> <span class=\"n\">SearchPath</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span><span class=\"o\">,</span> <span class=\"n\">FromJson</span>\n</code></pre></div>",
        "id": 256096228,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633367759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> neat idea. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> what do you think? If we went this route, the <code>FilePath</code> and <code>List</code> instances should be added to Lean itself not Lake.</p>",
        "id": 256097416,
        "sender_full_name": "Mac",
        "timestamp": 1633368195
    },
    {
        "content": "<p>If we choose this approach, then everything in the snippet needs to be in Lean.  The server needs the <code>FromJson OutputBikesheddable</code> instance after all.</p>",
        "id": 256097601,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633368263
    },
    {
        "content": "<p>true, good point! In that case I would name that structure as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LeanPaths</span> <span class=\"n\">where</span>\n  <span class=\"n\">oleanPath</span> <span class=\"o\">:</span> <span class=\"n\">SearchPath</span>\n  <span class=\"n\">sourcePath</span> <span class=\"o\">:</span> <span class=\"n\">SearchPath</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span><span class=\"o\">,</span> <span class=\"n\">FromJson</span>\n</code></pre></div>",
        "id": 256097901,
        "sender_full_name": "Mac",
        "timestamp": 1633368370
    },
    {
        "content": "<p>I think we also need custom <code>FromJson</code>/<code>ToJson</code> instances for <code>FilePath</code>.  The default one produces <code>{\"toString\": \"my/path\"}</code>.</p>",
        "id": 256098612,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633368614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256090870\">said</a>:</p>\n<blockquote>\n<p>why are the <code>Json</code> and <code>Xml</code> libraries in <code>Lean</code> instead of <code>Std</code>?</p>\n</blockquote>\n<p>I think this is just because we needed them in <code>Lean</code> (<code>Json</code> for the first LSP version), and so they ended up there. They might or might not also depend on other stuff in <code>Lean</code>. There are many modules or parts of modules which, imo, should be in <code>Std</code> before version 4.0 but aren't because it's not high priority.</p>",
        "id": 256123438,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1633377893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> [Fair enough, but to this point:</p>\n<blockquote>\n<p>I think this is just because we needed them in <code>Lean</code></p>\n</blockquote>\n<p>it should be noted that virtually of all <code>Std</code> is needed in <code>Lean</code> (that is why it is in the Lean core in the first place), so that really shouldn't be a consideration for its placement.</p>",
        "id": 256124558,
        "sender_full_name": "Mac",
        "timestamp": 1633378346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256096228\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I have a slight preference for search paths since most users will simply forward the values to Lean.</p>\n</blockquote>\n<p>We're talking about a lean-internal API here that is only called by the server</p>\n</blockquote>\n<p>Is it likely it will stay that way for long :) ? If a user either wants to execute <code>lean</code> directly on a module (for which there could also be a subcommand like <code>lake lean</code>, much like <code>cargo rustc</code>) <em>or</em> wants to run any other Lean program that wants to <code>importModules</code> that module, using <code>print-paths</code> to set up the environment seems like the most natural solution. It is our equivalent to <a href=\"https://nixos.org/manual/nix/unstable/command-ref/new-cli/nix3-print-dev-env.html\"><code>nix print-dev-env</code></a>. In fact, perhaps it should even default to <code>export LEAN_PATH=...</code> Bash output just like the Nix command unless <code>--json</code> is given.</p>",
        "id": 256404700,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633524570
    },
    {
        "content": "<blockquote>\n<p>to set up the environment seems like the most natural solution.</p>\n</blockquote>\n<p>I think the most natural solution would be to have a <code>lake lean ...</code> command that sets up the correct environment variables (and <code>--plugin</code> arguments!!).</p>",
        "id": 256405240,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633524787
    },
    {
        "content": "<blockquote>\n<p>or wants to run any other Lean program that wants to importModules that module,</p>\n</blockquote>\n<p>If you are already running Lean then it is arguably easier to parse the json (with the FromJson instance) than to parse a bash script.</p>",
        "id": 256405678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633524968
    },
    {
        "content": "<p>I was thinking more like <code>$(lake print-paths Mod.lean); myprogram Mod.lean</code></p>",
        "id": 256405825,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633525038
    },
    {
        "content": "<p>But if <code>myprogram</code> wants to hardcode dependency on lake, then it can just use the same code as the server to communicate with it, sure</p>",
        "id": 256406012,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633525106
    },
    {
        "content": "<blockquote>\n<p>In fact, perhaps it should even default to export LEAN_PATH=... Bash output</p>\n</blockquote>\n<p>This reminds me of <a href=\"https://github.com/NixOS/nix/pull/545\">https://github.com/NixOS/nix/pull/545</a>. Requiring to source bash scripts is a terrible UX for other shells.</p>",
        "id": 256406057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633525125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256405825\">said</a>:</p>\n<blockquote>\n<p>I was thinking more like <code>$(lake print-paths Mod.lean); myprogram Mod.lean</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> $(lake print-paths Mod.lean); myprogram Mod.lean\nfish: Command substitutions not allowed\n$(lake print-paths Mod.lean); myprogram Mod.lean\n ^\n</code></pre></div>",
        "id": 256406271,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633525211
    },
    {
        "content": "<p>Also not very cross-platform, I'll give you that :)</p>",
        "id": 256406283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633525214
    },
    {
        "content": "<p>So probably JSON is sufficient. I would still be surprised if users didn't find other uses for <code>print-paths</code>.</p>",
        "id": 256406462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633525287
    },
    {
        "content": "<blockquote>\n<p>wants to hardcode dependency on lake</p>\n</blockquote>\n<p>I thought the plan was to hardcode a lake dependency everywhere, no?  At least editors, etc., will interface directly with lake so it's not like you can get away from it.</p>",
        "id": 256406497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633525302
    },
    {
        "content": "<blockquote>\n<p>So probably JSON is sufficient. I would still be surprised if users didn't find other uses for print-paths.</p>\n</blockquote>\n<p>In most cases the command that is called \"print-paths\" right now is a pretty bad fit.  For example, if you want to get the list of source directories you don't want to trigger a build.</p>",
        "id": 256406679,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633525364
    },
    {
        "content": "<p>I think editors are more justified in being opinionated than (underlying) cmdline tools are, just like <code>lean</code> does not depend on leanpkg/lake while <code>lean --server</code> does. But it doesn't really matter, I'm sure potential external users will manage to cope with auto-generated JSON field names as well.</p>",
        "id": 256414663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633528382
    },
    {
        "content": "<p>Added <code>print-paths</code> JSON &amp; Lake support to the Lake PR, not thoroughly tested</p>",
        "id": 256451429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633541749
    },
    {
        "content": "<p>I don't want the server to judge whether a project has Lake set up, so I'm assuming Lake will respond with empty output if that is not the case, like leanpkg</p>",
        "id": 256451659,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633541841
    },
    {
        "content": "<p>If you want to test it with an external Lake, I'd suggest copying it into Lean's <code>bin/</code>... do we need a <code>LAKE_PATH</code> env var separate from <code>LEAN_SYSROOT</code> to make that easier?</p>",
        "id": 256452105,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633542003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> the structure uses <code>sourcePath</code>(i.e., spells out 'source') but its uses use <code>srcPath</code> -- how does that work?</p>",
        "id": 256452601,
        "sender_full_name": "Mac",
        "timestamp": 1633542172
    },
    {
        "content": "<p>I am fine with the short spelling <code>src</code> if that is what you would prefer</p>",
        "id": 256452678,
        "sender_full_name": "Mac",
        "timestamp": 1633542210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> also, from, the CI results you appear to have missed renaming a <code>leanpkgProc</code> somewhere.</p>",
        "id": 256453132,
        "sender_full_name": "Mac",
        "timestamp": 1633542366
    },
    {
        "content": "<p>Huh, I must have pushed the wrong commit somehow</p>",
        "id": 256453230,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633542411
    },
    {
        "content": "<p>Should be good now. I hope.</p>",
        "id": 256487810,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633555738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> it builds, but sadly many of the interactive test are now broken for some reason. Could it be because they lack both a <code>leanpkg.toml</code> and/or a <code>lakefile.lean</code>?</p>",
        "id": 256490761,
        "sender_full_name": "Mac",
        "timestamp": 1633557242
    },
    {
        "content": "<p>I'll fix it tomorrow</p>",
        "id": 256491566,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633557678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> fyi, I did update Lake to mirror the JSON syntax the server is now using, so an up-to-date should (hopefully) work with the server changes</p>",
        "id": 256491773,
        "sender_full_name": "Mac",
        "timestamp": 1633557783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256451659\">said</a>:</p>\n<blockquote>\n<p>I don't want the server to judge whether a project has Lake set up, so I'm assuming Lake will respond with empty output if that is not the case, like leanpkg</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> This is not the case yet, is it? The tests are failing because of that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"`/home/sebastian/lean/lean/build/release/stage1/bin/lake print-paths` failed:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">stderr:</span><span class=\"se\">\\n</span><span class=\"s2\">error: no such file or directory (error code: 2)</span><span class=\"se\">\\n</span><span class=\"s2\">  file: ./lakefile.lean</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 256563696,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633607290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256563696\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256451659\">said</a>:</p>\n<blockquote>\n<p>I don't want the server to judge whether a project has Lake set up, so I'm assuming Lake will respond with empty output if that is not the case, like leanpkg</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> This is not the case yet, is it? The tests are failing because of that</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"`/home/sebastian/lean/lean/build/release/stage1/bin/lake print-paths` failed:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">stderr:</span><span class=\"se\">\\n</span><span class=\"s2\">error: no such file or directory (error code: 2)</span><span class=\"se\">\\n</span><span class=\"s2\">  file: ./lakefile.lean</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>No, I guess misunderstood what you meant by that. I thought you meant that it would output nothing to stdout (which it does not). I strikes me as very weird for a Lake command to silently succeed when there is no lakefile and it did nothing.</p>",
        "id": 256601887,
        "sender_full_name": "Mac",
        "timestamp": 1633622083
    },
    {
        "content": "<p>However, if you think that is best. I can make it do that. Since <code>print-paths</code> is a non-public command I don't feel that strongly about it.</p>",
        "id": 256601920,
        "sender_full_name": "Mac",
        "timestamp": 1633622097
    },
    {
        "content": "<p>I'm also open to a special return code, but as you said it doesn't matter much</p>",
        "id": 256603948,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633622804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256603948\">said</a>:</p>\n<blockquote>\n<p>I'm also open to a special return code</p>\n</blockquote>\n<p>I actually quite like that solution! That way the distinction is not completely undetectable. Any particular preference which code to use?</p>",
        "id": 256606536,
        "sender_full_name": "Mac",
        "timestamp": 1633623720
    },
    {
        "content": "<p>No :)</p>",
        "id": 256607632,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633624129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> pushed, I went with the very uncreative code of <code>2</code>. XD</p>",
        "id": 256609550,
        "sender_full_name": "Mac",
        "timestamp": 1633624851
    },
    {
        "content": "<p>Then we think alike <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 256609635,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633624883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256452105\">said</a>:</p>\n<blockquote>\n<p>If you want to test it with an external Lake, I'd suggest copying it into Lean's <code>bin/</code>... do we need a <code>LAKE_PATH</code> env var separate from <code>LEAN_SYSROOT</code> to make that easier?</p>\n</blockquote>\n<p>Also, I meant to mention this earlier, but forgot. I do think a <code>LAKE_PATH</code> (or, ideally, just <code>LAKE</code>) environment variable for configuring the  Lake the Lean 4 server uses would be a good idea.</p>",
        "id": 256614904,
        "sender_full_name": "Mac",
        "timestamp": 1633626784
    },
    {
        "content": "<p>done</p>",
        "id": 256621412,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633629313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> sounds great! what are the plans for when to merge the PR?</p>",
        "id": 256621750,
        "sender_full_name": "Mac",
        "timestamp": 1633629461
    },
    {
        "content": "<p>I think we're only missing elan support</p>",
        "id": 256625136,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633630861
    },
    {
        "content": "<p>Feel free to test-drive the CI artifact</p>",
        "id": 256625171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633630878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I gave it and go and it appears to be broken <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> . The server running  <code>print-paths</code> through either <code>leanpkg</code> or <code>lake</code>  breaks with the error \"expected JSON array, got 'null'\".</p>",
        "id": 256658963,
        "sender_full_name": "Mac",
        "timestamp": 1633645201
    },
    {
        "content": "<p>I believe <a href=\"https://github.com/leanprover/lean4/pull/683#discussion_r724574804\">the change</a> I suggest in the PR may fix this.</p>",
        "id": 256659841,
        "sender_full_name": "Mac",
        "timestamp": 1633645739
    },
    {
        "content": "<p>While attempting to debug that issue, I also discovered (and fixed) at least <a href=\"https://github.com/leanprover/lake/commit/18724704054d695a13bf5537fd89c00d1d27bc7e\">one bug</a> of my own in Lake. So the Lake submodule will also need  a bump.</p>",
        "id": 256661485,
        "sender_full_name": "Mac",
        "timestamp": 1633646780
    },
    {
        "content": "<p>Pushed the JSON changes, now tested once more, to master</p>",
        "id": 256757322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633706967
    },
    {
        "content": "<p>elan 1.1.0 with support for <code>lake</code> has been released</p>",
        "id": 256764080,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633709717
    },
    {
        "content": "<p>Added some hints to make living with submodules easier :) <a href=\"https://github.com/leanprover/lean4/pull/683/commits/86cf1ceb0bb5b9280f2122e6895e9d99043817af\">https://github.com/leanprover/lean4/pull/683/commits/86cf1ceb0bb5b9280f2122e6895e9d99043817af</a> /cc <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 256797152,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633723138
    },
    {
        "content": "<p>I can't think of anything else that should be done before merging the PR</p>",
        "id": 256797577,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633723307
    },
    {
        "content": "<p>(If it's not too bikeshedy or controversial, subtrees are better than submodules IMHO --though still have a problem or two of their own if you mix a commit that touches lean and lake at the same time and want to now push to lake--, but they mean someone cloning the lean4 repo wouldn't need to know it vendors the lake repo)</p>",
        "id": 256798631,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633723869
    },
    {
        "content": "<p>I didn't know that git subtree can squash the history, to be honest. One tenuous argument for a Lake submodule is that we were considering to eventually put stage0/ into a shallow submodule to drastically reduce the size of the repo.</p>",
        "id": 256803059,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633725849
    },
    {
        "content": "<p>Yeah, the squashing is very convenient.</p>",
        "id": 256803746,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633726191
    },
    {
        "content": "<p>I've been using one for ~8+ years on a pair of repos I manage (here: <a href=\"https://github.com/Julian/jsonschema/tree/main/json\">https://github.com/Julian/jsonschema/tree/main/json</a>) and you can see each time it's a single easy to understand commit.</p>",
        "id": 256803858,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633726226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/VSCode.20Lean4.20extension.20doesn't.20like.20.60lakefile.2Elean.60/near/256797577\">said</a>:</p>\n<blockquote>\n<p>I can't think of anything else that should be done before merging the PR</p>\n</blockquote>\n<p>I'd wait until at least tomorrow to merge it. That way I can update Lake to use <code>LeanPaths</code> and test it on today's nightly. Then the Lake submodule can be updated and the PR merged tomorrow so Lake is available in that nightly's release.</p>",
        "id": 256813925,
        "sender_full_name": "Mac",
        "timestamp": 1633731639
    }
]