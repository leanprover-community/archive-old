[
    {
        "content": "<p>Hello, I have this \"efficient\" function that given a nat, computes true.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now i'm trying to prove the important math theorem: f 1 = true</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>My issue is that simp does not simplify (in lean4 nightly-2021-05-06) even when being specific about f</p>\n<p>I'm learning lean so I'm not very sure, but I expected that simp would replace f 1 with its computed result: true in the goal state.</p>\n<p>Maybe the tactic is not smart enough, but is there a way to force f 1 to unwrap itself in a single step?</p>",
        "id": 237680202,
        "sender_full_name": "Michael Jam",
        "timestamp": 1620315522
    },
    {
        "content": "<p><code>refl</code>?</p>",
        "id": 237688666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318544
    },
    {
        "content": "<p><code>refl</code> is called <code>rfl</code> in Lean 4.</p>",
        "id": 237688735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620318573
    },
    {
        "content": "<p>I am not too sure that I expect <code>simp</code> to work here. You have defined no <code>simp</code> lemmas and so this will just unfold to some f.rec term which the simplifier probably won't know what to do with? I'm not 100% sure of what I'm talking about though</p>",
        "id": 237688901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318634
    },
    {
        "content": "<p>Are they really the same?<br>\nLean3: <code>theorem hi : \"\".data = [] := by refl</code><br>\nLean4: <code> example : \"\".data = [] := by rfl </code> &lt;-- doesn't go through</p>",
        "id": 237689002,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1620318684
    },
    {
        "content": "<p>They're not the same no</p>",
        "id": 237689041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318703
    },
    {
        "content": "<p>In lean 4 <code>rfl</code> only proves a=a. Lean 3's <code>refl</code> tactic proves <code>R a a</code> for any reflexive binary relation whose proof of reflexivity has been tagged with the <code>@[refl]</code> tag. Lean 4 <code>refl</code> does exist but only in my mathlib port :p</p>",
        "id": 237689321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318816
    },
    {
        "content": "<p>And instead of tagging the refl lemma you have to add it to the list of lemmas which the tactic tries ;-)</p>",
        "id": 237689479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228135\">@Scott Viteri</span> my answer no longer applies to your post because you changed <code>==</code> to <code>=</code></p>",
        "id": 237689581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318916
    },
    {
        "content": "<p>sorry copy paste error</p>",
        "id": 237689668,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1620318956
    },
    {
        "content": "<p>I'm not at lean right now so can't check the definition of .data</p>",
        "id": 237689782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620319003
    },
    {
        "content": "<p>Don't want to derail this, I'll make a separate thread</p>",
        "id": 237689862,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1620319045
    },
    {
        "content": "<p>Interestingly enough <code>rfl</code> doesn't work either when using <code>and</code> in this order (on <code>master</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 237707804,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1620326093
    },
    {
        "content": "<p>It works with <code>set_option smartUnfolding false</code>.</p>",
        "id": 237709911,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1620326917
    },
    {
        "content": "<p>This one is subtle. Here are the smart-unfolding lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f._sunfold</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n      <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g._sunfold</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n      <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"n\">Bool</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>The call <code>f 1</code> will smart-unfold to <code>f 0</code>, which recursively smart-unfolds to <code>Bool.true</code>, which is not wrapped with <code>idRHS</code>; currently WHNF does not realize that this term is acceptable, and so rejects the smart-unfold. In contrast, <code>g 1</code> will smart-unfold to <code>idRHS true</code>, and so <code>true</code> is accepted.</p>",
        "id": 237728831,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620335054
    },
    {
        "content": "<p>This bug looks similar to <a href=\"#narrow/stream/270676-lean4/topic/Smart.20unfolding.20produces.20ununfoldable.20terms\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Smart.20unfolding.20produces.20ununfoldable.20terms</a> . The <code>idRhs</code> applications in the <code>match n</code> seem to be spurious, it should be around the <code>&amp;&amp;</code>.</p>",
        "id": 237752495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620348947
    },
    {
        "content": "<p>reported as <a href=\"https://github.com/leanprover/lean4/issues/445\">leanprover/lean4#445</a></p>",
        "id": 237753514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620349742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know if \"smart-unfolding\" has a precise semantics?</p>",
        "id": 237753677,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620349890
    },
    {
        "content": "<p>The specification I would propose is that smart unfolding is a transformation on terms like so:</p>\n<ul>\n<li>\n<p>If <code>e</code> is <code>match x with (| pat_i =&gt; e_i)*</code> where <code>x</code> is a variable,<br>\n  then <code>smart_unfold(e)</code> is <code>match x with (| pat_i =&gt; smart_unfold(e_i))*</code></p>\n</li>\n<li>\n<p>Otherwise, <code>smart_unfold(e) = idRhs _ e</code>.</p>\n</li>\n</ul>\n<p>Another possible clause would apply to if statements:</p>\n<ul>\n<li>If <code>e</code> is <code>if c then e1 else e2</code> then <code>smart_unfold(e)</code> is <code>if c then smart_unfold(e1) else smart_unfold(e2)</code></li>\n</ul>\n<p>but given how this interacts with the consumer of smart unfolding, namely <code>isDefEq</code> when it wants to unfold a function, it seems like having it depend on an arbitrary predicate being true will be difficult to control. So I would stick with <em>just</em> top level match (on a variable) being smart unfolded, as in the first two bullets.</p>",
        "id": 237754424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620350482
    },
    {
        "content": "<p>Are you sure that wouldn't cause <code>simp</code> to loop?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">False</span> <span class=\"k\">then</span> <span class=\"mi\">1000</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo._proposed_sunfold</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idRhs</span> <span class=\"bp\">$</span>\n  <span class=\"k\">if</span> <span class=\"n\">False</span> <span class=\"k\">then</span> <span class=\"mi\">1000</span> <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Simp on <code>foo n</code>:</p>\n<ul>\n<li>smart-unfold <code>foo n</code> to expose the <code>if</code></li>\n<li>traverse down to inner <code>foo n</code></li>\n<li>repeat</li>\n</ul>",
        "id": 237755840,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620351741
    },
    {
        "content": "<p>Yes, this is a common problem with definitions that don't start with a pattern match. I don't think that is an issue for smart unfolding to solve though</p>",
        "id": 237756019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620351901
    },
    {
        "content": "<p>You hit this problem in lean 3 when unfolding definitions by well founded recursion because those often don't start with a pattern match, for example <code>gcd</code>.</p>",
        "id": 237756238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620352064
    },
    {
        "content": "<p>One potential fix is for <code>simp</code> to detect simple infinite loops, in this case that a definition is going to unfold unconditionally to a term containing itself, and then handle these definitions specially, either never unfolding them or only unfolding once. In such cases I don't think it is unreasonable to ask the user to use another tactic or another configuration of <code>simp</code> like <code>single_pass := true</code></p>",
        "id": 237756394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620352186
    },
    {
        "content": "<p>For <code>isDefEq</code> this isn't a major problem since it only unfolds lazily so having a recursive unfolding like this is fine as long as it is \"productive\" (i.e. doesn't unfold trivially to an application of itself like <code>foo := foo</code>)</p>",
        "id": 237756642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620352365
    },
    {
        "content": "<p>(plus these kinds of unfolding aren't definitional anyway so <code>isDefEq</code> generally doesn't have to worry about them)</p>",
        "id": 237756671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620352407
    },
    {
        "content": "<p>Hi. Here is another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_subtree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_subtree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">binary_tree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">left_tree</span> <span class=\"n\">right_tree</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">left_tree</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">right_tree</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">th</span>\n  <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_tree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_tree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">left_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">left_tree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">right_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">right_tree</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">value</span> <span class=\"n\">left_tree</span> <span class=\"n\">right_tree</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>simp doesn't unfold binary_tree_is_full. I expect it unfolds.<br>\nIs this still a bug? I'm using Lean (version 4.0.0-nightly-2021-05-26, commit 02e917793e07, Release)</p>",
        "id": 240319796,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622033987
    },
    {
        "content": "<p>What do you expect it to unfold to? The case is not sufficiently determined.</p>",
        "id": 240321747,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622034797
    },
    {
        "content": "<p>oh i see you're right</p>",
        "id": 240322594,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622035171
    },
    {
        "content": "<p>What about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_subtree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_subtree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">binary_tree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">left_tree</span> <span class=\"n\">right_tree</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">left_tree</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">right_tree</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">th</span>\n  <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_tree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_tree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">left_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">left_tree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">right_tree_is_full</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">right_tree</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">value</span> <span class=\"n\">left_tree</span> <span class=\"n\">right_tree</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">tree</span> <span class=\"o\">:=</span> <span class=\"n\">node</span> <span class=\"n\">value</span> <span class=\"n\">left_tree</span> <span class=\"n\">right_tree</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n    <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>Shouldn't the last simp unfold to <code>binary_tree_is_full l &amp;&amp; binary_tree_is_full r</code>  ?</p>",
        "id": 240324451,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622035881
    },
    {
        "content": "<p>Maybe this unprovable theorem is cleaner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">th1</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">binary_tree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">binary_tree_is_full</span> <span class=\"n\">tree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n    <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n    <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary_tree_is_full</span><span class=\"o\">]</span>\n    <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>I match with the same structure as in binary_tree definition, the first simps seem to work but not the last ones</p>",
        "id": 240325860,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622036434
    },
    {
        "content": "<p>It's not that simple in presence of overlapping patterns. Your last case will only unfold if it's clear the prior ones did not match, i.e. on <code>node/node</code>. So you should match on <code>node _ (node ..) (node ..)</code> in the last proof case.</p>",
        "id": 240326255,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622036585
    },
    {
        "content": "<p>Accumulating the knowledge that the prior <em>proof cases</em> did not match either would in theory be possible, but is very much nontrivial. It's also not clear how to actually make that knowledge accessible in general. E.g. if you match first on <code>node _ nil _</code> and then <code>node ..</code>, what should the goal state look like?</p>",
        "id": 240326629,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622036727
    },
    {
        "content": "<p>I see... I think I will try to avoid overlapping patterns now</p>",
        "id": 240326892,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622036818
    },
    {
        "content": "<p>Thanks</p>",
        "id": 240326947,
        "sender_full_name": "Michael Jam",
        "timestamp": 1622036847
    },
    {
        "content": "<p>At least in your proofs, yes :)</p>",
        "id": 240327180,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622036949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> when you talk about \"in proofs\" are you referring to <code>noConfusion</code> not working in <code>Sort 0</code>?</p>",
        "id": 240330378,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622038249
    },
    {
        "content": "<p>No, I don't know about any connection to that</p>",
        "id": 240330458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622038295
    }
]