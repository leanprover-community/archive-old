[
    {
        "content": "<p>Sebastian's talk just reminded me of an issue that has been on my mind for some time: the syntax <code>{a, b, c}</code> is ambiguous at the moment (with the set syntax from mathlib).  It can mean either:</p>\n<ol>\n<li>The structure instance <code>{ a := a, b := b, c := c }</code>, or</li>\n<li>the \"set\" with the three elements <code>a</code>, <code>b</code>, and <code>c</code> (or anything with insert and singleton operations).</li>\n</ol>\n<p>Currently the ambiguity is resolved by always picking (2), which is nonideal.  Another option would be to make the decision based on whether we have HasInsert and HasSingleton instances (but that means <code>#check {1,2,3}</code> doesn't work).  Yet another option would be to use a different syntax for set literals, but I don't see any common alternative to <code>{1,2,3}</code>.</p>",
        "id": 283790350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653418604
    },
    {
        "content": "<p><code>#check {1,2,3}</code> doesn't do all that much in Lean 3 either, does it? How about simply failing with an appropriate message if the expected type (still) isn't sufficiently known?</p>",
        "id": 283792922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653419842
    },
    {
        "content": "<p>Branching on \"is a struct\" might be a bit more robust than \"has a <code>HasInsert</code>\"</p>",
        "id": 283792969,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653419875
    },
    {
        "content": "<p>Alternatively to failing one could also pick a default for the two when what is desired is not recognizable from context I guess?</p>",
        "id": 283793089,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653419938
    },
    {
        "content": "<blockquote>\n<p><code>#check {1,2,3}</code> doesn't do all that much in Lean 3 either, does it? </p>\n</blockquote>\n<p>It prints <code>{1, 2, 3} : ?M_1</code>, which is better than nothing.</p>",
        "id": 283793111,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653419957
    },
    {
        "content": "<blockquote>\n<p>Branching on \"is a struct\" might be a bit more robust than \"has a <code>HasInsert</code>\"</p>\n</blockquote>\n<p>This is unfortunately not correct. <code>Finset</code>is a structure.  We might want to turn <code>Set</code> into a structure as well.</p>",
        "id": 283793234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653420016
    },
    {
        "content": "<p>Hah, yes... checking for <code>HasInsert</code> is probably better than checking for \"is a structure with these exact field names\"</p>",
        "id": 283793332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653420077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Ambiguous.20braces/near/283793111\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>#check {1,2,3}</code> doesn't do all that much in Lean 3 either, does it? </p>\n</blockquote>\n<p>It prints <code>{1, 2, 3} : ?M_1</code>, which is better than nothing.</p>\n</blockquote>\n<p>I'm still surprised about this part though. Is \"could be any type\" really better than \"please provide a type here\"?</p>",
        "id": 283793927,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653420392
    },
    {
        "content": "<blockquote>\n<p>How about simply failing with an appropriate message if the expected type (still) isn't sufficiently known?</p>\n</blockquote>\n<p>I've just realized that overloaded syntax does exactly this.  It just requires being very careful with antiquotations, which is why I couldn't make it work the last time.  <a href=\"https://github.com/leanprover-community/mathlib4/pull/274\">https://github.com/leanprover-community/mathlib4/pull/274</a></p>",
        "id": 283794134,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653420496
    },
    {
        "content": "<p>We should do something against that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 283794189,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653420542
    },
    {
        "content": "<blockquote>\n<p>I'm still surprised about this part though. Is \"could be any type\" really better than \"please provide a type here\"?</p>\n</blockquote>\n<p>At least in Lean 3 this was very important because the type would need to be available immediately.  Type class constraints can be solved later when the type is filled in.</p>\n<p>In Lean 4 there is still a bit of an issue, where you might see <code>1 ∈ ?m...</code> in the context because the expected type of the set syntax is not available yet.  If we elaborate into the type class operations immediately, then you'll see <code>1 ∈ {a,b,c}</code> even if the type class instance is not synthesized yet.</p>",
        "id": 283794617,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653420758
    },
    {
        "content": "<p>I see, interesting</p>",
        "id": 283794971,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653420950
    },
    {
        "content": "<p>One downside of the overloaded syntax solution is that it doesn't work in patterns:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">fvarIdToLemmaId</span><span class=\"o\">,</span> <span class=\"n\">dischargeWrapper</span> <span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>For now I've added a <code>, ..</code> for disambiguation.  Longer term it would be great if the pattern syntax was at least somewhat extensible.</p>",
        "id": 283795922,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653421443
    },
    {
        "content": "<p>It feels like a kinda bad idea to overload structure syntax, no? To programmer-me a finset is just a type of collection, so some sort of overloaded syntax for all collections would be worth considering; maybe overload #[...] syntax with an <code>OfList</code> typeclass?</p>",
        "id": 283797296,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653422171
    },
    {
        "content": "<p>I think having syntactic difference between notation does very much help readability of Lean code, especially once we start having more collections sticking all of them in just one type of syntax seems like a bad idea to me.</p>",
        "id": 283797687,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653422357
    },
    {
        "content": "<p>I feel like it would be quite hard to defend any set syntax other than the current one; while at the same time, we certainly don't want to change the structure syntax either</p>",
        "id": 283805924,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653426737
    },
    {
        "content": "<p>So naturally we should make the choice dependent on the presence of whitespace inside the braces <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 283806052,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653426816
    },
    {
        "content": "<p>are there unicode braces you can use? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 283806590,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653427121
    },
    {
        "content": "<p>It's not ideal, but maybe the structure syntax could be extended to allow an optional <code>with</code> at the beginning, so to disambiguate you could write <code>{with a, b, c}</code>. This is meant to generalize the structure update syntax <code>{x with a, b, c}</code>, which works and is short for <code>{x with a := a, b := b, c := c}</code>.</p>",
        "id": 283807939,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653427886
    },
    {
        "content": "<p>Is the mathlib set syntax behind an import? Or at the top level if you have mathlib imported?</p>",
        "id": 283810496,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653429515
    },
    {
        "content": "<blockquote>\n<p>It's not ideal, but maybe the structure syntax could be extended to allow an optional with at the beginning, so to disambiguate you could write {with a, b, c}</p>\n</blockquote>\n<p>Or another alternative is to not automatically do <code>a := a</code> right? E.g. it's a remote analogy, in Python there's <code>f\"{name=}\"</code> which prints <code>name = name</code>, so maybe in Lean doing <code>{a :=, b :=, c :=}</code> to expand to <code>a := a</code> etc. would be a possible resolution. Or maybe the other way is less ugly. <code>{:= a, := b, := c}</code>.</p>",
        "id": 283812309,
        "sender_full_name": "Julian Berman",
        "timestamp": 1653430453
    },
    {
        "content": "<p>If we are already talking about changing the syntax of structures why not just go the <code>Array</code> way and <code>#{}</code> ?</p>",
        "id": 283815010,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653432040
    },
    {
        "content": "<p>Sebastian above said \"we certainly don't want to change the structure syntax either\" so don't know, that may already mean even these small changes (Kyle's or ^) aren't interesting :D</p>",
        "id": 283815363,
        "sender_full_name": "Julian Berman",
        "timestamp": 1653432261
    },
    {
        "content": "<p>Yes, moving away from curly braces for structures at least seems quite unlikely to happen. <code>:= a</code> in fact would have been my original proposal in anticipation of this issue, but by it's hard to imagine moving away from the tantalizingly compact current notation as well...</p>",
        "id": 283844146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653461834
    },
    {
        "content": "<p>it is useful to have an extra syntax when you can't or don't want to rely on type inference for generic literal notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">ˢ</span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">ᶠ</span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">ᵐ</span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283852829,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1653467897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Ambiguous.20braces/near/283795922\">said</a>:</p>\n<blockquote>\n<p>One downside of the overloaded syntax solution is that it doesn't work in patterns:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">fvarIdToLemmaId</span><span class=\"o\">,</span> <span class=\"n\">dischargeWrapper</span> <span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>For now I've added a <code>, ..</code> for disambiguation.  Longer term it would be great if the pattern syntax was at least somewhat extensible.</p>\n</blockquote>\n<p>I pushed a workaround for this issue. We can work on a better solution in the future.<br>\nI collected a few examples here: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/setStructInstNotation.lean#L39-L71\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/setStructInstNotation.lean#L39-L71</a><br>\nI tried to collect all examples posted here, and they all seem to be working. Do you have other examples that are not working?</p>",
        "id": 283962947,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653531691
    }
]