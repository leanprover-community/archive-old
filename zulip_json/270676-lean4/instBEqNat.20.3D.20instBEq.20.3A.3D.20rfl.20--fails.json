[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instBEq#src\">src4#instBEq</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instBEqNat#src\">src4#instBEqNat</a> are both in <code>Init/Prelude</code> and don't seem to be defeq. Is that intentional, or should it be fixed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instBEqNat</span> <span class=\"bp\">=</span> <span class=\"n\">instBEq</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/pull/1479/files/21bb12498a3bda1e0c3f2045eb3d62e2d25e6f9f..132baa12e953e9c29bffae5953881ac115ef2fb0#r1066580684\">https://github.com/leanprover-community/mathlib4/pull/1479/files/21bb12498a3bda1e0c3f2045eb3d62e2d25e6f9f..132baa12e953e9c29bffae5953881ac115ef2fb0#r1066580684</a></p>",
        "id": 320613655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673420433
    },
    {
        "content": "<p>It does look intentional: <a href=\"https://github.com/leanprover/lean4/commit/da55789c26d7e6030927eb0815796f93c8fa8f50\">https://github.com/leanprover/lean4/commit/da55789c26d7e6030927eb0815796f93c8fa8f50</a></p>",
        "id": 320647464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673427048
    },
    {
        "content": "<p>Hmm, so do you have a recommendation for the issue I linked to?</p>",
        "id": 320648273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673427408
    },
    {
        "content": "<p>Should we just pass the instance around explicitly, in cases like this?</p>",
        "id": 320648311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673427424
    },
    {
        "content": "<p>I'm not sure. Note that with <code>instBEq</code> you lose the accelerated kernel reduction, which I think is the whole reason for this particular setup</p>",
        "id": 320654441,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673429703
    },
    {
        "content": "<p>Why do the used lemmas demand <code>instBEq</code>? It would be nicer if they merely demanded <code>LawfulBEq</code>.</p>",
        "id": 320654857,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673429844
    },
    {
        "content": "<p>I guess it's just the instance that TC found...</p>",
        "id": 320655318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673430006
    },
    {
        "content": "<p>We've been talking about making <code>Decidable</code> extend <code>BEq</code> in core, which would fix this diamond.</p>",
        "id": 320782273,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673465805
    },
    {
        "content": "<p>I wanted to wait with this change until after the port, because I expect some (easily fixable) breakage in mathlib.  (For example, <code>cases h</code> with <code>h : Decidable p</code> would no longer be the moral equivalent of <code>by_cases p</code>).</p>",
        "id": 320782649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673465930
    },
    {
        "content": "<p>Do you mean something like this (not tested)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">decide_iff</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With this definition, will we still need <code>BEq</code>?</p>",
        "id": 321448156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673765249
    },
    {
        "content": "<p>The difficulty is that Lean is supposed to be a programming language to also be used by people who have no interest in proof and those people probably never want to see <code>Prop</code> at all.</p>",
        "id": 321448772,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673765934
    },
    {
        "content": "<p>Importantly, <code>Decidable</code> can't replace <code>BEq</code> because a <code>BEq</code> is not necessarily lawful. Gabriel's proposal can eliminate <code>LawfulBEq</code> however, making it equivalent to <code>DecidableEq</code>.</p>",
        "id": 321449095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673766308
    },
    {
        "content": "<p>With this definition we can have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">beq_iff_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span>\n  <span class=\"n\">decide_iff</span> <span class=\"o\">:=</span> <span class=\"n\">DecidableEq.beq_iff_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 321449233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673766432
    },
    {
        "content": "<p>right</p>",
        "id": 321449354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673766488
    },
    {
        "content": "<p>that's what Gabriel's PR <a href=\"https://github.com/leanprover/lean4/pull/2038\">lean4#2038</a> implements</p>",
        "id": 321449400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673766507
    }
]