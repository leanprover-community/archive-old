[
    {
        "content": "<p>I would have expected this to work (and it works if I swap term and level).  Am I doing something wrong or is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"frob \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">level</span>\n<span class=\"c1\">-- unknown attribute [levelParser]</span>\n</code></pre></div>",
        "id": 238119210,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620643273
    },
    {
        "content": "<p><code>syntax \"frob\" : level</code> doesn't work either. I guess <code>level</code> isn't a syntax category?</p>",
        "id": 238119794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620643576
    },
    {
        "content": "<p>mathlib4 is moving faster than I thought. I'd never think we'd already be doing Frobenius morphisms.</p>",
        "id": 238119955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620643675
    },
    {
        "content": "<p>this is great news, because <a href=\"#narrow/stream/116395-maths/topic/char_zero/near/238102341\">we're having trouble with them in Lean 3</a>...</p>",
        "id": 238120906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620644169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Declaring.20new.20syntax.20for.20greater.20universes/near/238119794\">said</a>:</p>\n<blockquote>\n<p>I guess <code>level</code> isn't a syntax category?</p>\n</blockquote>\n<p>It is a category for builtin parsers only. Changing that wouldn't immediately be of any help because it does not have support for macros or elaborators (probably unnecessary?) either yet.</p>",
        "id": 238121869,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620644678
    },
    {
        "content": "<p>What I want is similar to <code>Type (← frob)</code>.  The <code>← frob</code> is then lifted before expansion, so I wouldn't even need level macros.</p>",
        "id": 238123039,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620645313
    },
    {
        "content": "<p>For now I can live with the following workaround, but it would be really great if the level parsers were extensible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"Type\"</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"←\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Sort\"</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"←\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 238178229,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620666820
    }
]