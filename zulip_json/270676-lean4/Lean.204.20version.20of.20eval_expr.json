[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as unresolved.</p>",
        "id": 264418993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639127202
    },
    {
        "content": "<p>Ok I'm confused on how to use it. I want to synthesize an instance of a class and extract one field. Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">E</span>\n  <span class=\"k\">let</span> <span class=\"n\">add_expr</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkProj</span> <span class=\"bp\">`</span><span class=\"n\">add</span> <span class=\"mi\">0</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"bp\">←</span> <span class=\"n\">whnfD</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">add_expr</span><span class=\"o\">)</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">add_expr</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">T.isConst</span>  <span class=\"c1\">-- this is false .. so I can't use evalExpr?</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">add</span> <span class=\"bp\">←</span> <span class=\"n\">evalExpr</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">???</span><span class=\"o\">)</span> <span class=\"n\">add_expr</span>   <span class=\"c1\">--- What should be `typeName`?</span>\n\n<span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It looks like that <code>evalExpr</code> can't be used in this scenario :/</p>",
        "id": 264419350,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639127439
    },
    {
        "content": "<p>I think you can just make <code>def Foo := Nat -&gt; Nat -&gt; Nat</code> and pass <code> `Foo</code> for <code>typeName</code></p>",
        "id": 264419751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639127688
    },
    {
        "content": "<p>Nope, getting <code>unexpected type at evalExpr</code></p>",
        "id": 264419826,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639127746
    },
    {
        "content": "<p>you can also skip <code>evalExpr</code> and use <code>evalConst</code> directly</p>",
        "id": 264419998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639127846
    },
    {
        "content": "<p>But where it the dependence on <code>add_expr</code> ?</p>",
        "id": 264420120,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639127900
    },
    {
        "content": "<p>?</p>",
        "id": 264420161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639127940
    },
    {
        "content": "<p>the code for <code>elabEval</code>, for example, contains a use of <code>evalConst</code> for a function type</p>",
        "id": 264420205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639127974
    },
    {
        "content": "<p>In the code above:</p>\n<p>- <code>E</code> - expression for <code>Add Nat</code><br>\n  - <code>e</code>  - expression for instance of <code>Add Nat</code><br>\n  - <code>add_expr</code> - expression for <code>Nat.add</code><br>\n  - <code>T</code> - expression for <code>Nat -&gt; Nat -&gt; Nat</code><br>\nI want to somehow convert <code>add_expr : Expr</code> to an actual element of <code>Nat -&gt; Nat -&gt; Nat</code>.</p>",
        "id": 264420896,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639128332
    },
    {
        "content": "<p>Here's an adaptation of the <code>elabEval</code> code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">E</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">opts</span> <span class=\"bp\">←</span> <span class=\"n\">getOptions</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n    <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"o\">{</span>\n      <span class=\"n\">name</span>        <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">_bla</span>\n      <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n      <span class=\"n\">type</span>        <span class=\"o\">:=</span> <span class=\"n\">type</span>\n      <span class=\"n\">value</span>       <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"n\">hints</span>       <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.opaque</span>\n      <span class=\"n\">safety</span>      <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.unsafe</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Term.ensureNoUnassignedMVars</span> <span class=\"n\">decl</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"n\">decl</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">evalConst</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">_bla</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">finally</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 264420936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639128357
    },
    {
        "content": "<p>If you're willing to (import / copy) from mathlib4, we have a slightly nicer API for evalExpr: <a href=\"https://github.com/leanprover-community/mathlib4/blob/e59238956369b84c3b506ef49ef7e5ceada183e5/Mathlib/Tactic/RunTac.lean#L15-L16\">https://github.com/leanprover-community/mathlib4/blob/e59238956369b84c3b506ef49ef7e5ceada183e5/Mathlib/Tactic/RunTac.lean#L15-L16</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkForall</span> <span class=\"n\">Name.anonymous</span> <span class=\"n\">BinderInfo.default</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe</span> <span class=\"n\">evalExpr</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"n\">e</span>\n  <span class=\"n\">return</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 264421723,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639128781
    },
    {
        "content": "<p>Thanks a lot! Is there some documentation/part of a paper about the elaborator? It is a part of Lean I still have no clue about.</p>",
        "id": 264421911,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639128897
    },
    {
        "content": "<p>Here's that code again in a more convenient package:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">withEvalExpr</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadError</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadFinally</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadOptions</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">TermElabM</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">opts</span> <span class=\"bp\">←</span> <span class=\"n\">getOptions</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">inferType</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"o\">{</span>\n      <span class=\"n\">name</span>        <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">_bla</span>\n      <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n      <span class=\"n\">type</span>        <span class=\"o\">:=</span> <span class=\"n\">type</span>\n      <span class=\"n\">value</span>       <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"n\">hints</span>       <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.opaque</span>\n      <span class=\"n\">safety</span>      <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.unsafe</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Term.ensureNoUnassignedMVars</span> <span class=\"n\">decl</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"n\">decl</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">evalConst</span> <span class=\"n\">α</span> <span class=\"bp\">`</span><span class=\"n\">_bla</span><span class=\"o\">)</span>\n  <span class=\"n\">finally</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">E</span>\n  <span class=\"n\">withEvalExpr</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264421959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639128921
    },
    {
        "content": "<p>not sure how this compares to the mathlib4 version</p>",
        "id": 264422102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639128985
    },
    {
        "content": "<p>no paper, it's the wild west</p>",
        "id": 264422148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639129013
    },
    {
        "content": "<p>yeah, the mathlib4 version is better, use that</p>",
        "id": 264422802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639129367
    }
]