[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">OpT</span> <span class=\"o\">(</span><span class=\"n\">OpKind</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ops</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">Ops</span> <span class=\"n\">k</span> <span class=\"n\">String</span><span class=\"o\">)</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">OpT</span> <span class=\"n\">OpKind</span> <span class=\"n\">Ops</span>\n\n<span class=\"kd\">class</span>  <span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">toList</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span>  <span class=\"o\">[</span><span class=\"n\">ToList</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">ToList.toList</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n\n\n<span class=\"c1\">-- Messages (1)</span>\n<span class=\"c1\">-- 21:29:</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  ToList (Ops k)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">OpKind</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ops</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">BBs</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">Ops</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">OpT</span> <span class=\"n\">OpKind</span> <span class=\"n\">Ops</span><span class=\"o\">)</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">op</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">op</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">OpT.mk</span> <span class=\"n\">k</span> <span class=\"n\">args</span><span class=\"bp\">=&gt;</span> <span class=\"n\">Op.mk</span> <span class=\"o\">(</span><span class=\"n\">ToList.toList</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm unsure what I'm doing wrong. As far as I can see, I declare that I want a <code>[ToList (Ops k)]</code> as a pre-requisite for this coercion. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">╰─$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">189</span><span class=\"n\">f4bd372d8</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271189180,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1644353551
    },
    {
        "content": "<p>It does get a little more apparent if you dont name the first and the second k equivalently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">OpT</span> <span class=\"o\">(</span><span class=\"n\">OpKind</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ops</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">Ops</span> <span class=\"n\">k</span> <span class=\"n\">String</span><span class=\"o\">)</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">OpT</span> <span class=\"n\">OpKind</span> <span class=\"n\">Ops</span>\n\n<span class=\"kd\">class</span>  <span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">toList</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span>  <span class=\"o\">[</span><span class=\"n\">ToList</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">ToList.toList</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Op</span>\n\n<span class=\"c1\">-- Messages (1)</span>\n<span class=\"c1\">-- 21:29:</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  ToList (Ops k)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">OpKind</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ops</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">BBs</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">Ops</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">OpT</span> <span class=\"n\">OpKind</span> <span class=\"n\">Ops</span><span class=\"o\">)</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">op</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">op</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">OpT.mk</span> <span class=\"n\">k2</span> <span class=\"n\">args</span><span class=\"bp\">=&gt;</span> <span class=\"n\">Op.mk</span> <span class=\"o\">(</span><span class=\"n\">ToList.toList</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>leads to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">Ops</span> <span class=\"n\">k2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is the actual issue here</p>",
        "id": 271190412,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644354119
    },
    {
        "content": "<p>you are referring to two different k's in the first and second part of your code and thus the instance is in fact not available here</p>",
        "id": 271190490,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644354149
    },
    {
        "content": "<p>If you were to change the instance to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">OpKind</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ops</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">BBs</span><span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">OpKind</span><span class=\"o\">,</span> <span class=\"n\">ToList</span> <span class=\"o\">(</span><span class=\"n\">Ops</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">OpT</span> <span class=\"n\">OpKind</span> <span class=\"n\">Ops</span><span class=\"o\">)</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">op</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">op</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">OpT.mk</span> <span class=\"n\">k2</span> <span class=\"n\">args</span><span class=\"bp\">=&gt;</span> <span class=\"n\">Op.mk</span> <span class=\"o\">(</span><span class=\"n\">ToList.toList</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it can resolve the type class constraint, although I don't know whether this is what you are actually intending.</p>",
        "id": 271190767,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644354301
    }
]