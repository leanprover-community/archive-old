[
    {
        "content": "<p>I want to define a macro which expands into something of the form <code>← e</code>. However, I am getting an error saying that it must be nested inside a do expression. Is there a way to write such a macro?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"yield \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">M.yield</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">M.yield</span> <span class=\"o\">()</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">yield</span> <span class=\"o\">()</span> <span class=\"c1\">-- invalid use of `(&lt;- ...)`, must be nested inside a 'do' expression</span>\n</code></pre></div>",
        "id": 306896129,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1667084991
    },
    {
        "content": "<p>Does it work if you have your macro return a <code>doElem</code> instead of a <code>term</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"yield \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">M.yield</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 306935132,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1667123459
    },
    {
        "content": "<p>No, I want to use the macro in term position. Here's another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">State</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">StateM</span> <span class=\"n\">State</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"getFooState\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"fooState\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFooState</span><span class=\"o\">)</span> <span class=\"c1\">-- this works, but still requires wrapping with (← _)</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">bar</span> <span class=\"n\">fooState</span> <span class=\"c1\">-- invalid use of `(&lt;- ...)`, must be nested inside a 'do' expression</span>\n</code></pre></div>",
        "id": 306975985,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1667144943
    },
    {
        "content": "<p>I figured out a hacky way to do this. I'm not yet sure how to make it extensible, as right now it requires declaring ahead of time all of the macros that are to be pre-expanded.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">State</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">StateM</span> <span class=\"n\">State</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">fooStateMacro</span><span class=\"o\">)</span> <span class=\"s2\">\"fooState\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">doMacros</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">fooStateMacro</span><span class=\"o\">]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">expandDoMacros</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">doMacros.contains</span> <span class=\"n\">kind</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">expandMacro</span><span class=\"bp\">?</span> <span class=\"n\">stx</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">expandDoMacros</span> <span class=\"n\">stx</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">args.mapM</span> <span class=\"n\">expandDoMacros</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">stx</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">processedDoMacros</span><span class=\"o\">)</span> <span class=\"s2\">\"processedDoMacros% \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">processDoMacros</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">stx.raw.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">processedDoMacros</span>\n  <span class=\"k\">then</span> <span class=\"n\">throw</span> <span class=\"bp\">.</span><span class=\"n\">unsupportedSyntax</span>\n  <span class=\"k\">else</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">processedDoMacros</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"bp\">←</span> <span class=\"n\">expandDoMacros</span> <span class=\"n\">stx</span><span class=\"o\">⟩))</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">processDoMacros</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"c1\">-- macro_rules | `(doElem| $t:term) =&gt; do `(doElem| $(← processDoMacros t))</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node1</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">MonadRef.mkInfoFromRefPos</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.doExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">processDoMacros</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">bar</span> <span class=\"n\">fooState</span>\n<span class=\"k\">#check</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">State</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"n\">fooState</span>\n</code></pre></div>",
        "id": 306987781,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1667151282
    },
    {
        "content": "<p>Macro expansion and elaboration are interleaved, and I think the built-in parsers and elaborators happen to be written in a way that makes bolting on this specific extension inconvenient. The arrow part of your expansion <code>(← getThe State)</code> gets parsed as a <code>liftMethod</code> and the builtin term elaborator for that is set to throw the error you're getting if it's elaborated outside of the other <code>do</code> machinery.</p>",
        "id": 306989654,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1667152387
    },
    {
        "content": "<p>Hi! I'm new to Lean, I've installed it and can't run a simple script (both with nightly and stable toolchains).  I've made a file called test.lean in which I wrote 2 lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Leanpkg</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Leanpkg.leanVersionString</span>\n</code></pre></div>\n<p>When I run lean test.lean I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Leanpkg'</span>\n<span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Leanpkg.leanVersionString'</span>\n<span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span>\n</code></pre></div>",
        "id": 306992714,
        "sender_full_name": "Florin Dinu",
        "timestamp": 1667154175
    },
    {
        "content": "<p>This is a thread about macros using certain notation. Can you ask your question in a new thread?</p>",
        "id": 306992868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667154243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20using.20.E2.86.90.20notation/near/306992868\">said</a>:</p>\n<blockquote>\n<p>This is a thread about macros using certain notation. Can you ask your question in a new thread?</p>\n</blockquote>\n<p>Sorry, I'm new to Zulip Chat, didn't know this is a thread.</p>",
        "id": 306993007,
        "sender_full_name": "Florin Dinu",
        "timestamp": 1667154330
    },
    {
        "content": "<p>Maybe when the do notation is eventually rewritten, it'll become easier to extend <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 307661979,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667455067
    },
    {
        "content": "<p>The essence of my workaround is a way to mark a macro as needing to be expanded before do notation is elaborated (<code>doMacros</code> is the list of such macros). While this allows creating term macros that expands to uses of <code>←</code>, it is still very limited.</p>",
        "id": 307846761,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1667512461
    }
]