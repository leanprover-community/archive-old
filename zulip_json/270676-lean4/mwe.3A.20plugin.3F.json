[
    {
        "content": "<p>does anybody have a simple working example of two different projects in different directories in the same repository, one importing the other as a plugin only?</p>",
        "id": 240193098,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621951860
    },
    {
        "content": "<p>I've tried to create one based on the nice work by <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> on papyrus <a href=\"https://github.com/cpehle/lean4-plugin-example\">here</a>. Unfortunately right now I still get <code>could not find native implementation of external declaration 'Example.funA' (symbols 'l_Example_funA___boxed' or 'l_Example_funA')</code>, even though the plugin library has this symbol <code>nm -D -C plugin/build/ExamplePlugin.dll | grep l_Example_funA___boxed</code>.</p>",
        "id": 252816449,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631292895
    },
    {
        "content": "<p>Any pointers how to fix this minimal example would be appreciated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 252820158,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631294435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span>  are you building by just running <code>make test</code>? Because that works on my machine.</p>",
        "id": 252820297,
        "sender_full_name": "Mac",
        "timestamp": 1631294508
    },
    {
        "content": "<p>Also are you on a Windows or Unix box?</p>",
        "id": 252820378,
        "sender_full_name": "Mac",
        "timestamp": 1631294526
    },
    {
        "content": "<p>Hmm, we may be missing <code>RTLD_GLOBAL</code> in <code>load_plugin</code></p>",
        "id": 252820818,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631294738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"n\">RTLD_DEFAULT</span>\n              <span class=\"n\">Find</span>  <span class=\"n\">the</span>  <span class=\"n\">first</span>  <span class=\"n\">occurrence</span>  <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">desired</span> <span class=\"n\">symbol</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"n\">default</span> <span class=\"n\">shared</span> <span class=\"n\">object</span> <span class=\"n\">search</span> <span class=\"n\">order.</span>\n              <span class=\"n\">The</span> <span class=\"n\">search</span> <span class=\"n\">will</span> <span class=\"kn\">include</span> <span class=\"n\">global</span> <span class=\"n\">symbols</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">executable</span> <span class=\"n\">and</span> <span class=\"n\">its</span> <span class=\"n\">dependencies</span><span class=\"o\">,</span> <span class=\"n\">as</span> <span class=\"n\">well</span> <span class=\"n\">as</span> <span class=\"n\">symbols</span>\n              <span class=\"k\">in</span> <span class=\"n\">shared</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">were</span> <span class=\"n\">dynamically</span> <span class=\"n\">loaded</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">RTLD_GLOBAL</span> <span class=\"n\">flag.</span>\n</code></pre></div>",
        "id": 252820897,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631294774
    },
    {
        "content": "<p>I am building on a Unix box (some Ubuntu).</p>",
        "id": 252820981,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631294834
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> , then shouldn't you build a <code>.so</code> rather than a <code>.dll</code>?</p>",
        "id": 252821002,
        "sender_full_name": "Mac",
        "timestamp": 1631294854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252820818\">said</a>:</p>\n<blockquote>\n<p>Hmm, we may be missing <code>RTLD_GLOBAL</code> in <code>load_plugin</code></p>\n</blockquote>\n<p>Yes, that is also my suspicion, because at the place the symbol is looked up the plugin is not explicitly referenced.</p>",
        "id": 252821172,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631294939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252821002\">said</a>:</p>\n<blockquote>\n<p>Ah, <span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> , then shouldn't you build a <code>.so</code> rather than a <code>.dll</code>?</p>\n</blockquote>\n<p>I've added a c++ only test to check the postfix doesn't matter (my dynamic linker knowledge is limited :)).</p>",
        "id": 252821307,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631295003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> as is mine <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 252821375,
        "sender_full_name": "Mac",
        "timestamp": 1631295035
    },
    {
        "content": "<p>For example, I only hardcoded building a <code>.dll</code> in the original plugin Makefile because I don't know how to determine within it what the preferred extension of the platform should be.</p>",
        "id": 252821501,
        "sender_full_name": "Mac",
        "timestamp": 1631295104
    },
    {
        "content": "<p>(and not providing an extension caused all sorts of errors)</p>",
        "id": 252821594,
        "sender_full_name": "Mac",
        "timestamp": 1631295141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252820818\">said</a>:</p>\n<blockquote>\n<p>Hmm, we may be missing <code>RTLD_GLOBAL</code> in <code>load_plugin</code></p>\n</blockquote>\n<p>It depends of course on what the --plugin flag ultimately is supposed to be used for; for something like linters, the current implementation should be fine and perhaps even preferable. For loading native code, have you tried simply putting it in <code>LD_PRELOAD</code>?</p>",
        "id": 252821607,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631295151
    },
    {
        "content": "<p>using LD_PRELOAD works <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (didn't test that so thanks)</p>",
        "id": 252822765,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631295645
    },
    {
        "content": "<p>I think the behaviour should be consistent across platforms at least.</p>",
        "id": 252822973,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631295725
    },
    {
        "content": "<p>in a slightly more complicated plugin I get \"undefined symbol: l_instInhabitedUInt64\", which can be solved by also preloading <code>libleanshared.so</code></p>",
        "id": 252825180,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631296739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252821501\">said</a>:</p>\n<blockquote>\n<p>For example, I only hardcoded building a <code>.dll</code> in the original plugin Makefile because I don't know how to determine within it what the preferred extension of the platform should be.</p>\n</blockquote>\n<p>Apparently the linux linker does not care about the extension... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252838812,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631302630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> I just posted an issue to <a href=\"https://github.com/cpehle/lean4-plugin-example\"><code>lean4-plugin-example</code></a> (<a href=\"https://github.com/cpehle/lean4-plugin-example/issues/1\">#1</a>) noting that using <code>leanWithPlugin.sh</code> as the Lean executable does not work on Windows.</p>\n<p>I also recently got a cross-platform (Ubuntu, MacOS, and Windows) GitHub Actions workflow working to build and test Papyrus. I could PR a similar one to the repo (or you could copy from mine) if you want.</p>",
        "id": 253177604,
        "sender_full_name": "Mac",
        "timestamp": 1631576780
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/cpehle/lean4-plugin-example/issues/1\">#1</a>, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , when you get a chance, could you publish a new version of <code>vscode-lean4</code> to the marketplace? The server arguments commit is really key for Lean packages using plugins.</p>",
        "id": 253178000,
        "sender_full_name": "Mac",
        "timestamp": 1631577069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/253177604\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> I just posted an issue to <a href=\"https://github.com/cpehle/lean4-plugin-example\"><code>lean4-plugin-example</code></a> (<a href=\"https://github.com/cpehle/lean4-plugin-example/issues/1\">#1</a>) noting that using <code>leanWithPlugin.sh</code> as the Lean executable does not work on Windows.</p>\n<p>I also recently got a cross-platform (Ubuntu, MacOS, and Windows) GitHub Actions workflow working to build and test Papyrus. I could PR a similar one to the repo (or you could copy from mine) if you want.</p>\n</blockquote>\n<p>I suspected that just prepending <code>LD_PRELOAD</code> would lead trouble on Windows, but reading the issue it actually is a different problem. A pull request for the Github actions workflow would be very welcome, all credit for this example should really go to you anyways.</p>",
        "id": 253220326,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1631610666
    },
    {
        "content": "<p>I've tried to replicate lean4-plugin-example but VSCode seems to be ignoring the executablePath option. I suspect it has something to do with this issue: <a href=\"https://github.com/leanprover/vscode-lean4/issues/79\">https://github.com/leanprover/vscode-lean4/issues/79</a> Any idea how I can force VSCode to use <a href=\"http://leanWithPlugin.sh\">leanWithPlugin.sh</a>??</p>",
        "id": 264754435,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1639422280
    }
]