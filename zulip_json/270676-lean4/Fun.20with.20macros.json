[
    {
        "content": "<p>Hm, how would the right side need to be expressed? I'm trying to get a comma-seperated list of the <code>l</code>s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">ident</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">ident</span><span class=\"bp\">+</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>... doesn't work.</p>",
        "id": 248763283,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628417669
    },
    {
        "content": "<p>Ah, <code>l:(ident+)</code> probably is not a good idea because it will bind <code>l</code> to the dummy node containing all the idents. You'd have to unpack that one to use it in antiquotations, or avoid using <code>macro</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">ident</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">l.getArgs</span><span class=\"o\">),</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">ident</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">unfold</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 248763507,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628418096
    },
    {
        "content": "<p>I will try to remove that footgun from <code>macro</code> tomorrow</p>",
        "id": 248763566,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628418194
    },
    {
        "content": "<p>I'm guessing there are more functions like <code>getArgs</code>... What are those defined on?</p>",
        "id": 248763568,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628418212
    },
    {
        "content": "<p><code>Lean.Syntax</code></p>",
        "id": 248763576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628418228
    },
    {
        "content": "<p>(auto completion does in fact work in that place!)</p>",
        "id": 248763616,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628418254
    },
    {
        "content": "<p>For more info on antiquotations, see also §4.1 of <a href=\"https://arxiv.org/pdf/2001.10490.pdf#page=11\">https://arxiv.org/pdf/2001.10490.pdf#page=11</a></p>",
        "id": 248763703,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628418438
    },
    {
        "content": "<p>It is <strong>not</strong> <em>this</em>  <a href=\"https://github.com/leanprover/lean4/blob/358a129d78ea76cbbd58a7e904d2b96ba130890d/src/Lean/Syntax.lean#L48\"><code>getArgs</code></a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248763704,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628418442
    },
    {
        "content": "<p>Not quite, it's <a href=\"https://github.com/leanprover/lean4/blob/341b4ac652eb24471aeb55060f423fe6616025b2/src/Init/Prelude.lean#L1750-L1753\">https://github.com/leanprover/lean4/blob/341b4ac652eb24471aeb55060f423fe6616025b2/src/Init/Prelude.lean#L1750-L1753</a> :) . You should be able to navigate there using go-to-definition.</p>",
        "id": 248764432,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628419641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> You mention in your Hygienic-Macros-Paper that</p>\n<blockquote>\n<p>Both commands [<code>syntax</code> and <code>macro_rules</code>] can only be used at the top level; we are not currently planning support for local macros.</p>\n</blockquote>\n<p>I've implemented both the <code>unfold</code> and <code>obtain</code> inside a namespace though, and they work. Is this intended?</p>",
        "id": 248764704,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628420106
    },
    {
        "content": "<p>The \"top level\" is the <code>command</code> level. Local macros would be at the <code>term</code> level.</p>",
        "id": 248764759,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628420180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Fun.20with.20macros/near/248763507\">said</a>:</p>\n<blockquote>\n<p>Ah, <code>l:(ident+)</code> probably is not a good idea because it will bind <code>l</code> to the dummy node containing all the idents. You'd have to unpack that one to use it in antiquotations, or avoid using <code>macro</code>.</p>\n</blockquote>\n<p>Actually, you can also do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">many1</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 248768155,
        "sender_full_name": "Mac",
        "timestamp": 1628425558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Fun.20with.20macros/near/248768155\">said</a>:</p>\n<blockquote>\n<p>Actually, you can also do this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">many1</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Not sure how it is for you, but both your and my variant give me an error along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">,</span> <span class=\"n\">proposition</span> <span class=\"n\">expected</span>\n  <span class=\"o\">(</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_abstMVar.0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x_0</span>\n</code></pre></div>",
        "id": 248778597,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628441151
    },
    {
        "content": "<p>Here you really want the <code>:ident</code> :) . <code>simp</code> can contain more than just a <code>term</code>.</p>",
        "id": 248781499,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628445723
    },
    {
        "content": "<p>Doesn't simp expect a list of <code>simpLemma</code>? This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">simpLemma</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">unfold</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't know how to coerce an <code>ident</code> into a <code>simpLemma</code>.</p>",
        "id": 248783693,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1628449039
    },
    {
        "content": "<p><code>$[...]</code> can be used for that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">unfold</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 248784867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628450554
    }
]