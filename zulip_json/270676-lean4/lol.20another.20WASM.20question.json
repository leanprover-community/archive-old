[
    {
        "content": "<p>ok so this is another WASM question and you might think in your head oh why does this guy love WASM so much. is Lean 4 significantly faster than Lean 3 on WASM? in the future I might package Lean 4 for use on the web because why not <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> Lean 3 can be annoyingly slow on WASM sometimes</p>",
        "id": 242308345,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623395413
    },
    {
        "content": "<p>if Lean 4 is still slow on WASM I might need to consider other approaches, for example running Lean 4 on a server with appropriate sandboxing</p>",
        "id": 242308602,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623395666
    },
    {
        "content": "<p>It will probably be faster for builtin stuff and about the same for interpreted stuff. But WASM may significantly complicate the bootstrapping/plugin situation for libraries like mathlib that depend on compiled tactics</p>",
        "id": 242309388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623396313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> it depends on what you mean by \"Lean 4 on WASM\". We recently added an Emscripten build which can run under Node.js. Precise benchmarks TBD, but it is currently slower than native. However there is lots of optimisation work specific to Emscripten to be done. What is your intended use-case for \"Lean4 on the web\"? A build that will be usable in the browser as a library is WIP. But there are no immediate plans for running the LSP server in browsers (although it would be cool). Also we require the Emscripten runtime. A standalone/WASI build is not planned.</p>",
        "id": 242384891,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1623436014
    },
    {
        "content": "<blockquote>\n<p>WASM may significantly complicate the bootstrapping/plugin situation for libraries like mathlib that depend on compiled tactics</p>\n</blockquote>\n<p>Amazingly enough, the Emscripten people implemented a (admittedly simple, but good enough) dynamic linker, so we <em>can</em> load dylibs/plugins.</p>",
        "id": 242385095,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1623436099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/lol.20another.20WASM.20question/near/242384891\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> it depends on what you mean by \"Lean 4 on WASM\". We recently added an Emscripten build which can run under Node.js. Precise benchmarks TBD, but it is currently slower than native. However there is lots of optimisation work specific to Emscripten to be done. What is your intended use-case for \"Lean4 on the web\"? A build that will be usable in the browser as a library is WIP. But there are no immediate plans for running the LSP server in browsers (although it would be cool). Also we require the Emscripten runtime. A standalone/WASI build is not planned.</p>\n</blockquote>\n<p>Is this public? I'm interested, I was planning to tackle the WASM Lean 4 issue but didn't had any time to fix it</p>",
        "id": 242452054,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1623506240
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/505\">https://github.com/leanprover/lean4/pull/505</a></p>",
        "id": 242455364,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623510325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/lol.20another.20WASM.20question/near/242384891\">said</a>:</p>\n<blockquote>\n<p>A standalone/WASI build is not planned.</p>\n</blockquote>\n<p>Why is that? It seems Emscripten does not provide more functionality than WASI (thread is unavailable in both), and <a href=\"https://github.com/appcypher/awesome-wasm-langs\">many</a> languages prefer standalone (rust) or wasi (swiftwasm, tinygo). Also WASI is the WebAssembly standard.</p>",
        "id": 274288178,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646547134
    },
    {
        "content": "<p>Also in lean 3 Emscripten compiles the whole lean program into <code>lean.js</code> and <code>lean.wasm</code>. What can I do if I just want  to compile a single lake project?</p>",
        "id": 274288486,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646547622
    },
    {
        "content": "<blockquote>\n<p>It seems Emscripten does not provide more functionality than WASI</p>\n</blockquote>\n<p>I don't think that's true, Emscripten supports C++ exceptions that Lean uses. But I don't think the stdlib implementation needs them, so building a standalone Lean 4 program against WASI <em>might</em> be possible.</p>",
        "id": 274295721,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646558918
    },
    {
        "content": "<p>Oh yes, exception for WASM is still in proposal stage <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>  (WASI will have hope when all C++ stuff is moved to Lean).</p>",
        "id": 274297513,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646561569
    }
]