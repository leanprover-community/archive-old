[
    {
        "content": "<p>I am a newbie and I am trying to introduce a \"less than\" function on my home-grown implementation of the natural numbers.  This is what (in pertinent part) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ℕ.succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ.succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mylt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">ℕ.zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">mylt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ℕ.zero.succ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">--i don't know what I can do here.</span>\n</code></pre></div>\n<p>The example is just trying to show that zero is less and one.    </p>\n<p>It seems like I am defining LT incorrectly somehow.  I would have expected that it would \"rewrite\" the goal <br>\n\"zero &lt;  zero.succ\"  to the RHS of mylt.  But it just leaves it as \"zero &lt; zero.succ\".    I think I have misunderstanding of how the LT functions are supposed to be used.</p>\n<p>Note that  If I comment out the\" instance: LT \\N line\", then it complains about not having definition of $&lt;$.  I come from a C++ background where defining things like operator&lt; is exactly like this, so perhaps I am still thinking in C++ mode.  </p>\n<p>The manual for lean 3 has a <a href=\"https://leanprover.github.io/logic_and_proof/relations_in_lean.html#orderings-on-numbers\">pretty large section </a><br>\non ordering relations, but the manual for lean4 doesn't as far as I can tell.  Any help will be greatly appreciated.  Also I am aware that I could just use the Nat class but I want to understand the simplest things first.</p>",
        "id": 292341480,
        "sender_full_name": "kvanvels",
        "timestamp": 1659908968
    },
    {
        "content": "<p>what you can do is assert the type of the goal is exists of something</p>",
        "id": 292341669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ℕ.zero.succ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"k\">from</span>\n  <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 292341721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909280
    },
    {
        "content": "<p>here's another way to do it that doesn't require knowing the shape of the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ℕ.zero.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">LT.lt</span><span class=\"o\">,</span> <span class=\"n\">mylt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 292341826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909447
    },
    {
        "content": "<p>the theorem's not going to be provable because your definition is backwards: <code>n</code> and <code>m</code> should be interchanged</p>",
        "id": 292341891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909528
    },
    {
        "content": "<p>and here's a golfed proof of the corrected statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mylt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">ℕ.zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">mylt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ.zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ℕ.zero.succ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ℕ.zero.succ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 292342018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909676
    },
    {
        "content": "<p>Thank you for the response.  I appreciate it.  I am taking a break now, but will look at this soon.</p>",
        "id": 292342655,
        "sender_full_name": "kvanvels",
        "timestamp": 1659910429
    },
    {
        "content": "<p>Thanks, It works great.  I did need to add an axiom that zero is not the successor of any other natural number, so I modified the '''fun h =&gt; nomatch h''' argument  to something different.</p>",
        "id": 292347768,
        "sender_full_name": "kvanvels",
        "timestamp": 1659915413
    },
    {
        "content": "<p>That zero is not the successor of any other natural is an immediate consequence of the fact that the naturals are declared as an inductive type. This fact is accessed with <code>nomatch</code>.</p>",
        "id": 293643902,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660611454
    }
]