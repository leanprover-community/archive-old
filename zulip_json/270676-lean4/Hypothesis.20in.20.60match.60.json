[
    {
        "content": "<p>Consider the snippet below. I want to define the function <code>foo</code> through a dependent if-then-else, and to do pattern matching on one of the branches. But the hypothesis <code>h</code>given by <code>if</code> is in some patterns absurd, i.e. I am on the true branch but I know that the function is always false one some pattern, so <code>foo</code> is trivially defined through exfalso there. The problem is that the hypothesis from <code>if</code> remains stated in the local context in terms of the general variable <code>t</code>, instead of by replacing <code>t</code> with its form in the current pattern. Can this be done?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- let's say this is some function which returns `false` on `var (i + 1)`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"c1\">-- here `t` should be `i + 1`,but how do I get that `bar t = bar (i + 1)`?</span>\n    <span class=\"c1\">-- I know `h : bar t`, but `bar $ var (i + 1)` is false, si I want to apply False elimination</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    context:</span>\n<span class=\"cm\">    t : Term</span>\n<span class=\"cm\">    h : bar t = true</span>\n<span class=\"cm\">    i : Nat</span>\n<span class=\"cm\">    ⊢ Term</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265468660,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639902559
    },
    {
        "content": "<p>You can also match on <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"k\">match</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    t : Term</span>\n<span class=\"cm\">    h : bar t = true</span>\n<span class=\"cm\">    i : Nat</span>\n<span class=\"cm\">    h' : bar (var (i + 1)) = true</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265472073,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639907897
    },
    {
        "content": "<p>Or, equivalently, <code>match (generalizing := true) t with</code></p>",
        "id": 265472374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639908349
    },
    {
        "content": "<p>Added to the <code>match</code> docstring.</p>",
        "id": 265472800,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639908966
    },
    {
        "content": "<p>Great, thank you both!</p>",
        "id": 265474311,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639911360
    }
]