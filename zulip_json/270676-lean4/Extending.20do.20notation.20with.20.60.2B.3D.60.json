[
    {
        "content": "<p>I would like to extend do notation with <code>x += 1</code>, <code>x[0] := 1</code>, <code>x[0] += 1</code> and alike.</p>\n<p>I have figured out how to extend the parser, but I do not know how to correctly follow up with elaboration.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Do</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">@[doElemParser]</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Term.Parser.doFoo</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"foo\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">foo</span> <span class=\"c1\">-- Error: unexpected do-element of kind Lean.Term.Parser.doFoo: foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">letAddDeclNoBinders</span> <span class=\"o\">:=</span> <span class=\"n\">node</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.letIdDecl</span> <span class=\"bp\">$</span> <span class=\"n\">atomic</span> <span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pushNone</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\" += \"</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n<span class=\"kd\">@[doElemParser]</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Term.Parser.doAddReassign</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">notFollowedByRedefinedTermToken</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">letAddDeclNoBinders</span>\n\n<span class=\"c1\">-- This should be called in Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode</span>\n<span class=\"kd\">def</span> <span class=\"n\">getDoAddReassignVars</span> <span class=\"o\">(</span><span class=\"n\">doReassign</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- Error: unexpected do-element of kind Lean.Term.Parser.doAddReassign: x += 1</span>\n  <span class=\"n\">x</span>\n</code></pre></div>\n<p>The code is failing inside of <a href=\"https://github.com/leanprover/lean4/blob/6aee3fb30465da8e0e3df12651832f548cb0159b/src/Lean/Elab/Do.lean#L1610\"><code>doSeqToCode</code></a> . There does not seem to be a path for a custom do-element :( How can I fix it?</p>",
        "id": 277727116,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649077237
    },
    {
        "content": "<p>you could try handling it as a macro instead of an elab</p>",
        "id": 277727236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649077294
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"n\">Term.optType</span><span class=\"o\">)</span> <span class=\"s2\">\" += \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">+=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 277728130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649077726
    },
    {
        "content": "<p>Thanks a lot! Definitely a better approach. I was trying to do lots of different things with syntax and macro_rules, but I have always failed to get anywhere.</p>",
        "id": 277728512,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649077905
    },
    {
        "content": "<p>it is still limited in that you have to produce a <code>doSeq</code> syntax at the end of the day, there is no equivalent of <code>elab</code> for such things</p>",
        "id": 277729517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649078437
    },
    {
        "content": "<p>but for <code>+=</code> that's probably fine</p>",
        "id": 277729537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649078449
    },
    {
        "content": "<p>This is nice, <code>x[0] := 42</code> is working too!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.ident</span><span class=\"o\">)</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"] := \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">xi</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n  <span class=\"n\">x</span>\n</code></pre></div>\n<p>There is one problem that there has to be exactly one space between <code>x[0]</code> and <code>:=</code>. Replacing <code>\"] := \"</code> with <code>\"]\" \" := \"</code> in the syntax definition complains about multiple interpretations.</p>",
        "id": 277729897,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649078614
    },
    {
        "content": "<p>yes, because lean already defines this syntax</p>",
        "id": 277730145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649078729
    },
    {
        "content": "<p>I think it is a TODO right now though</p>",
        "id": 277730160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649078744
    },
    {
        "content": "<p>you can make your syntax higher priority</p>",
        "id": 277730217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649078762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Extending.20do.20notation.20with.20.60.2B.3D.60/near/277730145\">said</a>:</p>\n<blockquote>\n<p>yes, because lean already defines this syntax</p>\n</blockquote>\n<p>Ohh, is the notation <code>x[0] := 42</code> new? I though that it is not possible.</p>",
        "id": 277730472,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649078876
    },
    {
        "content": "<p>And how can I find the definition of the built in <code>x[0] := 42</code> syntax?  So I can make sure my types are supporting it.</p>",
        "id": 277731272,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649079248
    },
    {
        "content": "<p>I take it back, there is no special support in this particular position. However the syntax <code>term := term</code> is accepted because the left term can be a pattern, and <code>x[0] := 42</code> falls into this</p>",
        "id": 277741385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649083564
    },
    {
        "content": "<p>As you have mentioned, changing priority solves the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">Term.ident</span><span class=\"o\">)</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">xi</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>   <span class=\"o\">:=</span> <span class=\"mi\">13</span>\n  <span class=\"n\">x</span>   <span class=\"c1\">--- prints: #[42, 13, 2, 3]</span>\n</code></pre></div>",
        "id": 277758326,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649090102
    },
    {
        "content": "<p>Was this ever committed somewhere? Seems a good addition to <code>Std</code>, particularly if we extend it to <code>x[i][j]</code> esque stuff</p>",
        "id": 306894974,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667083934
    },
    {
        "content": "<p>See also the later discussion at <a href=\"https://github.com/leanprover/lean4/issues/905\">https://github.com/leanprover/lean4/issues/905</a></p>",
        "id": 306899081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667088183
    },
    {
        "content": "<p>I'm not gonna lie, most of those syntax examples are pretty meaningless to me at first glance <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> imperative programming is hard...</p>",
        "id": 306900406,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667089681
    },
    {
        "content": "<p>I'll stick to the functional stuff for now.</p>",
        "id": 306900450,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667089697
    }
]