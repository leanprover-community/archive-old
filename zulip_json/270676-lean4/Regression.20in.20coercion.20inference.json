[
    {
        "content": "<p>I noticed this while bumping mathlib4. It is easy enough to work around but I wanted to confirm the intentionality of this change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   HSub Nat Nat Int</span>\n</code></pre></div>\n<p>This kind of syntax is not uncommon in mathported files since this is how you indicate where you want the coercion to go in lean 3. I'm guessing some change related to the <code>2 * n</code> HMul stuff is related to this issue.</p>",
        "id": 281737387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652126088
    },
    {
        "content": "<p>Thanks for pointing this out. I will take a look.</p>",
        "id": 281739274,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652126985
    },
    {
        "content": "<p>Pushed a fix for this issue. It improves the custom elaborator (<code>binrel%</code>) for binary relations. However, the new <code>binrel%</code> always puts coercions on the \"leaves\", and makes its behavior consistent with the <code>binop%</code> one.  Example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">ex1</span>\n<span class=\"c1\">-- ex1 : ∀ (a : Int) (b c : Nat), a = Int.ofNat b - Int.ofNat c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ex2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">ex2</span>\n<span class=\"c1\">-- ex2 : ∀ (a : Int) (b c : Nat), a = Int.ofNat b - Int.ofNat c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ex3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">ex3</span>\n<span class=\"c1\">-- ex3 : ∀ (a : Int) (b c : Nat), a = Int.ofNat (b - c)</span>\n</code></pre></div>",
        "id": 281767766,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652147578
    },
    {
        "content": "<p>The fix is here: <a href=\"https://github.com/leanprover/lean4/commit/7ce0471f283feb37c313a09d15a27ea69a7f4eaa\">https://github.com/leanprover/lean4/commit/7ce0471f283feb37c313a09d15a27ea69a7f4eaa</a></p>",
        "id": 281767786,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652147622
    },
    {
        "content": "<p>The explanation for the regression is here: <a href=\"https://github.com/leanprover/lean4/commit/1768067aa0a6ac06526949bae1b918794819faf3\">https://github.com/leanprover/lean4/commit/1768067aa0a6ac06526949bae1b918794819faf3</a></p>",
        "id": 281767834,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652147656
    }
]