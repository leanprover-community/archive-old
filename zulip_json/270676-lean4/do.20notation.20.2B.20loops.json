[
    {
        "content": "<p>Consider: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matchInForInMonad</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">outstr</span> <span class=\"o\">:</span>  <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"c1\">-- | false =&gt; () -- fails</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">k</span> <span class=\"c1\">-- works</span>\n      <span class=\"c1\">-- | false =&gt; return () -- fails</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">outstr</span> <span class=\"o\">:=</span> <span class=\"n\">outstr</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">outstr</span>\n</code></pre></div>\n<p>The version that is <code>| false =&gt; ()</code> stopped compiling when I bumped up my Lean4 nightly from <code>leanprover/lean4:nightly-2022-01-16</code> to <code>4.0.0-nightly-2022-03-04</code>. I'm unsure what exactly changed in the desugaring. </p>\n<p>I wonder why <code>pure ()</code> succeeds while <code>return ()</code> fails?</p>",
        "id": 274842613,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646922904
    },
    {
        "content": "<blockquote>\n<p>I'm unsure what exactly changed in the desugaring. </p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/commit/e9d85f49e657787bf6eb899a1ac3591ccf1f36bd\">https://github.com/leanprover/lean4/commit/e9d85f49e657787bf6eb899a1ac3591ccf1f36bd</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/do.20notation.20.2B.20loops/near/274842613\">said</a>:</p>\n<blockquote>\n<p>I wonder why <code>pure ()</code> succeeds while <code>return ()</code> fails?</p>\n</blockquote>\n<p><code>return</code> exits the entire <code>do</code> block, so the type it is expecting is <code>String</code></p>",
        "id": 274846993,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646924719
    }
]