[
    {
        "content": "<p>In Lean3 there is the shorthand <code>∃ x ∈ s, p</code> for some set S and Prop P, which gets translated to <del><code>∃ x, x ∈ s ∧ p</code></del> under-the-hood. Has anyone implemented this in Lean4 yet?</p>",
        "id": 239271267,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621350921
    },
    {
        "content": "<p>Note this is not what it gets translated to in Lean 3.</p>",
        "id": 239272506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621351338
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 239272660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621351401
    },
    {
        "content": "<p>Ah thanks</p>",
        "id": 239272866,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621351478
    },
    {
        "content": "<p>I'm sorry this isn't answering your question at all, but I thought it was good to know.</p>",
        "id": 239272951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621351511
    },
    {
        "content": "<p>Definitely good to know!</p>",
        "id": 239273011,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621351530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon Brown</span> <a href=\"#narrow/stream/270676-lean4/topic/Existential.20quantifier.20set.20mem/near/239271267\">said</a>:</p>\n<blockquote>\n<p>Has anyone implemented this in Lean4 yet?</p>\n</blockquote>\n<p>Kevin implemented something similar to this in his <code>Data.Set.Basic</code></p>",
        "id": 239282073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621354631
    },
    {
        "content": "<p>I stole all of this stuff from other people. Maybe it was <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> who actually wrote this?</p>",
        "id": 239285657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621355965
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean4-filters/blob/master/Lean4_filters/Set/Basic.lean\">Here's a link</a>. Note that <code>hasLessEq</code> changed to <code>LE</code> recently. I will probably port this code to the official mathlib4 repo on Thursday.</p>",
        "id": 239285943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621356083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>It seems that I wrote shorthand Brandon is thinking about instead of the lean3 version</p>",
        "id": 239286418,
        "sender_full_name": "Jason KY.",
        "timestamp": 1621356275
    },
    {
        "content": "<p>Thanks for pointing this out! I will almost certainly change it to the Lean 3 version on Thursday (if I can figure out how to) (hopefully you'll be at Xena Jason  :D)</p>",
        "id": 239286550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621356329
    },
    {
        "content": "<p>The exists-and version is better than exists-exists, but this was a limitation of the way the lean 3 desugaring works</p>",
        "id": 239294961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621359515
    },
    {
        "content": "<p>the limitation of the lean 4 desugaring is that it has to be defined individually for all binops and binders</p>",
        "id": 239295014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621359540
    },
    {
        "content": "<p>By the way this macro in <code>Data.Set.Basic</code> is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>it should use <code>∧</code> on the rhs</p>",
        "id": 239295974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621359946
    },
    {
        "content": "<p>So that means every new binder has to introduce new notation for its interaction with <code>le</code> and <code>mem</code>?</p>",
        "id": 239300209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621361638
    },
    {
        "content": "<p>Even if that interaction is always \"just nest the binders\"</p>",
        "id": 239300334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621361674
    },
    {
        "content": "<p>I think it is possible to separate the two, using something like the <code>index</code> syntax class introduced in <code>Data.Set.Basic</code>, but right now the binder group syntax class is rather underdeveloped, I don't think we are ready to handle the desugaring of <code>\\exists (x \\in A) (y \\in B), p</code> yet</p>",
        "id": 239302874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621362598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Existential.20quantifier.20set.20mem/near/239294961\">said</a>:</p>\n<blockquote>\n<p>The exists-and version is better than exists-exists, but this was a limitation of the way the lean 3 desugaring works</p>\n</blockquote>\n<p>Oh yes, the Lean 3 version is very painful for teaching. Things got better only thanks to <a href=\"https://github.com/leanprover-community/mathlib/issues/5440\">#5440</a></p>",
        "id": 239303886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621362938
    }
]