[
    {
        "content": "<p>Here's a strange bug I've encountered while reviewing <a href=\"https://github.com/leanprover-community/mathlib4/pull/1453\">mathlib4#1453</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Language</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set.instMembershipSet</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span>  <span class=\"o\">(</span><span class=\"n\">Language</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set.instEmptyCollectionSet</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on</span>\n<span class=\"cm\">'EmptyCollection.emptyCollection', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">--instance : Zero (Language α) := ⟨(∅ : Language α)⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Language</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Also works -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Language</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n  <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 320827568,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1673486276
    },
    {
        "content": "<p>I'm a bit surprised we're porting this already, given it's on no critical paths at all. It's rather unfortunate that <a href=\"https://github.com/leanprover-community/mathlib/pull/17965\">#17965</a> predates it by a month.</p>",
        "id": 320828537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673487083
    },
    {
        "content": "<p>non-critical files are often being used as training ground for new porters, so we get a fair number of them in addition to the main stuff</p>",
        "id": 320829115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673487555
    }
]