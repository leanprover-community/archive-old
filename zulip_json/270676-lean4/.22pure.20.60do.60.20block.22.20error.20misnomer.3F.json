[
    {
        "content": "<p>TL;DR It seems like the \"<code>←</code> and <code>&lt;-</code> are not allowed in pure <code>do</code> blocks\" error can mask the actual underlying errors in a program.</p>\n<p>Looking for any suggestions before submitting a bug to the github repo (assuming I'm not missing something obvious here, hah).</p>\n<p>Lean version nightly-2021-08-17</p>\n<p>Background:</p>\n<p>Bumping our lean version on a large codebase and I keep hitting this error in a particular file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">x86_semantics</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">X86Semantics</span><span class=\"bp\">/</span><span class=\"n\">Instructions.lean</span><span class=\"o\">:</span><span class=\"mi\">162</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">`←`</span> <span class=\"n\">and</span> <span class=\"bp\">`&lt;-`</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span> <span class=\"k\">in</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"k\">do</span><span class=\"bp\">`</span> <span class=\"n\">blocks</span><span class=\"o\">,</span> <span class=\"n\">i.e.</span><span class=\"o\">,</span> <span class=\"n\">blocks</span> <span class=\"n\">where</span> <span class=\"n\">Lean</span> <span class=\"n\">implicitly</span> <span class=\"n\">used</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Id</span><span class=\"bp\">`</span> <span class=\"n\">monad</span>\n<span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">x86_semantics</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">X86Semantics</span><span class=\"bp\">/</span><span class=\"n\">Instructions.lean</span><span class=\"o\">:</span><span class=\"mi\">328</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">`←`</span> <span class=\"n\">and</span> <span class=\"bp\">`&lt;-`</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span> <span class=\"k\">in</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"k\">do</span><span class=\"bp\">`</span> <span class=\"n\">blocks</span><span class=\"o\">,</span> <span class=\"n\">i.e.</span><span class=\"o\">,</span> <span class=\"n\">blocks</span> <span class=\"n\">where</span> <span class=\"n\">Lean</span> <span class=\"n\">implicitly</span> <span class=\"n\">used</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Id</span><span class=\"bp\">`</span> <span class=\"n\">monad</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>It's odd because it seems <em>clear</em> the monad in question is <em>not</em> the <code>Id</code> monad.</p>\n<p>I start to minimize the program to reproduce the error and hit a point where the program is clearly wrong/broken, however the only error Lean is report to me is the \"<code>←</code> and <code>&lt;-</code> are not allowed in pure <code>do</code> blocks\" error both when I run <code>leanpkg build</code> and in the VSCode interface, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">semantics</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">semantics.block</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">semantics</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semantics</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">expression</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">expression</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uext</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">expression.const</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">expression</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semantics</span> <span class=\"o\">(</span><span class=\"n\">expression</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">expression.const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mnemonic</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">patterns</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">definst</span> <span class=\"s2\">\"mul\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n   <span class=\"n\">instr_pat</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">semantics.block</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">uext</span> <span class=\"n\">al.expr</span> <span class=\"mi\">16</span>  <span class=\"c1\">-- error flags this line</span>\n      <span class=\"n\">ax</span> <span class=\"bp\">.=</span> <span class=\"n\">tmp</span>\n      <span class=\"n\">set_overflow</span> <span class=\"bp\">$</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>So clearly this program is broken as is, but the only error being reported seems like a clear red herring (i.e., the issue is not that we're using <code>←</code> in the <code>Id</code> monad).</p>\n<p>Without swimming through all the relevant internals, I'm guessing as things started to go off the rails (e.g., the appearance of multiple undefined symbols such as <code>definst</code> and <code>instr_pat</code>) Lean tries to choose some reasonable defaults and keep parsing to report more potentially useful errors to the user, but things completely melt down when the <code>let tmp ←</code> line appears and the <em>only</em> error reported is  not really relevant and masking the more fundamental issues.</p>\n<p>Any thoughts? Should I just file a github bug? Or is there more to explore first?</p>",
        "id": 249745865,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629218755
    },
    {
        "content": "<p>the obvious workaround is to change it to <code>let tmp := ...</code> and then deal with the real errors</p>",
        "id": 249746999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629219300
    },
    {
        "content": "<p>I would guess the reason for the \"high priority error\" is because do notation is a macro transformation, so if it fails then there is no syntax to elaborate. My suggested fix would be for the macro to report the \"← and &lt;- are not allowed in pure do blocks\"  error and then generate syntax as though it said <code>let foo := ...</code> instead of <code>let foo &lt;- ...</code></p>",
        "id": 249748314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629219861
    },
    {
        "content": "<p>Unfortunately yes, for the small program I posted rewriting the <code>&lt;-</code> to a <code>:=</code> does then let Lean point to the correct error, however in the larger version of the program it then emits the errors one would expect when you mistakingly let-bind a monadic variable instead of using the monadic bind =\\</p>",
        "id": 249749249,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629220336
    },
    {
        "content": "<p>So in other words, in the full program I'm dealing with the \"red herring\" error about the <code>Id</code> monad motivates you to change the <code>&lt;-</code> to <code>:=</code> in several spots as it suggests, but then you immediately only see errors about how those variables now bound with <code>:=</code> are of the wrong type in subsequent expressions (because they're <em>are</em> in fact monadic computations, i.e. not merely in the <code>Id</code> monad), and so you feel like your just ping-ponging back and forth between these two unhelpful errors.</p>",
        "id": 249761807,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629226155
    },
    {
        "content": "<p>UPDATE! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>So, if I remove the <code>do</code> on the line <code>def mul : instruction := do</code> <em>then</em> I immediately get the error messages I'd expect about <code>unknown identifier</code>.</p>\n<p>MORE INTERESTINGLY, in the large codebase I'm in, if I remove that same <code>do</code> on the first line of the definition, the entire definition typechecks as expected! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  (i.e., it appears that <code>do</code> on the first line is affecting how the rest of the body is interpreted in a way that raises that odd pure do error)</p>",
        "id": 249769280,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629229621
    },
    {
        "content": "<p>Perhaps I can tinker more with the smaller program to reproduce the behavior I'm seeing with the larger program (i.e., where the <code>do</code>'s presence seems to break otherwise valid code)...</p>",
        "id": 249769437,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629229691
    },
    {
        "content": "<p>another option is to explicitly type-ascribe the <code>do</code> expressions so that lean won't think they are in the id monad</p>",
        "id": 249769511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629229740
    },
    {
        "content": "<p>as in <code>show semantics _ from do</code> wherever you have <code>do</code> now</p>",
        "id": 249769556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629229759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278501\">Andrew Kent</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249769280\">said</a>:</p>\n<blockquote>\n<p>MORE INTERESTINGLY, in the large codebase I'm in, if I remove that same <code>do</code> on the first line of the definition, the entire definition typechecks as expected! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  (i.e., it appears that <code>do</code> on the first line is affecting how the rest of the body is interpreted in a way that raises that odd pure do error)</p>\n</blockquote>\n<p>Can you make a MWE for this?</p>",
        "id": 249769781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629229861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249769781\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"278501\">Andrew Kent</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249769280\">said</a>:</p>\n<blockquote>\n<p>MORE INTERESTINGLY, in the large codebase I'm in, if I remove that same <code>do</code> on the first line of the definition, the entire definition typechecks as expected! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  (i.e., it appears that <code>do</code> on the first line is affecting how the rest of the body is interpreted in a way that raises that odd pure do error)</p>\n</blockquote>\n<p>Can you make a MWE for this?</p>\n</blockquote>\n<p>I intend to try this afternoon -- will report back.</p>",
        "id": 249769837,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629229895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249769556\">said</a>:</p>\n<blockquote>\n<p>as in <code>show semantics _ from do</code> wherever you have <code>do</code> now</p>\n</blockquote>\n<p>Oh interesting, I'll have to play with that syntactic form.  I was trying to morally do the same thing with some of the various type annotations and helpers I had introduced but to no avail (e.g., the <code>semantics.block</code> in the above example doesn't actually do anything because ensure a fixed expected type)</p>",
        "id": 249770060,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629230001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"278501\">Andrew Kent</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249769280\">said</a>:</p>\n<blockquote>\n<p>So, if I remove the <code>do</code> on the line <code>def mul : instruction := do</code> <em>then</em> I immediately get the error messages I'd expect about <code>unknown identifier</code>.</p>\n</blockquote>\n<p>You may already be aware of why this is the case, but, if not, here is an explanation. That <code>do</code> is the start of a pure <code>do</code> block (which does not, as the error suggests, allow <code>&lt;-</code> bind syntax). In that example, <code>instruction</code> is not defined as <code>Monad</code> so using <code>do</code> to define <code>mul</code> (which returns the pure <code>instruction</code>) leads to the whole block being a pure <code>do</code>.</p>",
        "id": 249770879,
        "sender_full_name": "Mac",
        "timestamp": 1629230385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.22pure.20.60do.60.20block.22.20error.20misnomer.3F/near/249770879\">said</a>:</p>\n<blockquote>\n<p>leads to the whole block being a pure <code>do</code>.</p>\n</blockquote>\n<p>I understand -- the part that surprises me at the moment is the existence of the initial <code>do</code> seems to impact the internal <code>do</code> blocks which are, e.g. within let-bindings and describing actual monadic computations that are not in <code>Id</code>.</p>",
        "id": 249771604,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629230687
    },
    {
        "content": "<p>Whoops, that check should not recurse that deep. Please open an issue, we might come back to the <code>do</code> notation next week.</p>",
        "id": 249771833,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629230790
    },
    {
        "content": "<p>Rewriting that small example above to use a <code>let</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">definst</span> <span class=\"s2\">\"mul\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n   <span class=\"n\">instr_pat</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">semantics</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">uext</span> <span class=\"n\">al.expr</span> <span class=\"mi\">16</span>\n        <span class=\"n\">ax</span> <span class=\"bp\">.=</span> <span class=\"n\">tmp</span>\n        <span class=\"n\">set_overflow</span> <span class=\"bp\">$</span> <span class=\"mi\">42</span>\n      <span class=\"n\">action</span>\n</code></pre></div>\n<p>The outer <code>do</code> seems to <em>make</em> the inner <code>do</code> pure in some sense. In this tiny example there are other issues, but in the larger example, removing the outer <code>do</code> and everything Just Works</p>",
        "id": 249771847,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629230801
    },
    {
        "content": "<p>Issue filed here: <a href=\"https://github.com/leanprover/lean4/issues/633\">https://github.com/leanprover/lean4/issues/633</a></p>",
        "id": 249775916,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1629232862
    }
]