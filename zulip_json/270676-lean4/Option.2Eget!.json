[
    {
        "content": "<p>Is it possible to prove the following statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">none.get</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inhabited.default</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried all sorts of versions of <code>simp</code> but I didn't succeed. Or is it the case that <code>panic!</code> (which appears in the definition of <code>Option.get!</code>) should only be used for programming and not theorem proving, and that if I want to prove theorems I should use something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option.get</span><span class=\"bp\">!!</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inhabited.default</span>\n</code></pre></div>\n<p>instead?</p>",
        "id": 265479430,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639919297
    },
    {
        "content": "<p>If you want to prove for example this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"Hello\"</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you can get two levels deep into the panic implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"Hello\"</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">panicWithPosWithDecl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">panic</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>however <code>panicCore</code> (which will show up in the proof goal at this point) is declared as a constant in <code>Prelude.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[neverExtract, extern \"lean_panic_fn\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">panicCore</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and constants can not be unwrapped by design since they are opaque. So yes you can in fact not prove anything about the return value of <code>panic!</code>, merely that it will return something of the desired type.</p>\n<p>I'd say if you really need something that returns <code>Inhabited.default</code> in case of a <code>none</code> you could use <code>Option.getD Inhabited.default</code></p>",
        "id": 265479821,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639919765
    },
    {
        "content": "<p><code>panic!</code> ultimately refers to <code>panicCore</code> in Init/Prelude.lean, which is a constant and hence cannot be unfolded, so it shouldn't be possible to prove anything about it. Ideally, in proofs, you ensure that the <code>panic!</code> case never occurs via preconditions (it shouldn't occur at runtime either after all!).</p>",
        "id": 265479828,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639919778
    },
    {
        "content": "<p>I see, thank you both. It makes sense, in my case, the <code>none</code> case can definitely happen so I will go with the <code>getD</code> version.</p>",
        "id": 265480907,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639921462
    },
    {
        "content": "<p>Do you know why <code>panic!</code> is a \"proper\" function instead of a <code>partial def</code>?<br>\nI find it kind of counterintuitive that an \"error out at runtime\" construct can be used within the mathematically sound part of Lean. <br>\nIs it so that we can write functions that use things like <code>get!</code> without having to show that it is safe <em>within</em> the function definition (but still can prove later that it's actually safe, by proving that the panic case can never occur)?</p>",
        "id": 265483042,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639924645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.2Eget!/near/265483042\">said</a>:</p>\n<blockquote>\n<p>Do you know why <code>panic!</code> is a \"proper\" function instead of a <code>partial def</code>?<br>\nI find it kind of counterintuitive that an \"error out at runtime\" construct can be used within the mathematically sound part of Lean. <br>\nIs it so that we can write functions that use things like <code>get!</code> without having to show that it is safe <em>within</em> the function definition (but still can prove later that it's actually safe, by proving that the panic case can never occur)?</p>\n</blockquote>\n<p>It's not a proper function, it's a constant.  Partial functions are also just unsafe functions hidden behind a constant. (cf <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword\">https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword</a>)</p>",
        "id": 265483454,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639925186
    },
    {
        "content": "<p>I was under the impression that a <code>partial def</code> still doesn't compromise soundness, because it requires the target type to be inhabited, is that right?</p>",
        "id": 265483481,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639925232
    }
]