[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getNumHeartbeats</span>\n  <span class=\"n\">return</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- no longer works</span>\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance Add (Option Nat)</span>\n</code></pre></div>",
        "id": 231401411,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616456405
    },
    {
        "content": "<p><code>Option</code> is no longer a monad since <a href=\"https://github.com/leanprover/lean4/commit/9a5f2395134a2668ae778f32262b3105c277483a\">https://github.com/leanprover/lean4/commit/9a5f2395134a2668ae778f32262b3105c277483a</a></p>",
        "id": 231401803,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1616456691
    },
    {
        "content": "<p>Code that used <code>Option</code> as a monad before now seems to use <code>OptionM.run</code>: <a href=\"https://github.com/leanprover/lean4/commit/04e3f21783e343a58eb245bcb9488dab59cb01a4\">https://github.com/leanprover/lean4/commit/04e3f21783e343a58eb245bcb9488dab59cb01a4</a></p>",
        "id": 231401887,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1616456758
    },
    {
        "content": "<p>Whaat? Why isn't <code>Option</code> a monad? That's the classic example</p>",
        "id": 231404793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616458752
    },
    {
        "content": "<blockquote>\n<p>Motivation: <code>Option</code> is data, <code>OptionM</code> is control.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/04e3f21783e343a58eb245bcb9488dab59cb01a4\">https://github.com/leanprover/lean4/commit/04e3f21783e343a58eb245bcb9488dab59cb01a4</a></p>\n</blockquote>",
        "id": 231405056,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616458931
    },
    {
        "content": "<p>I guess similar to how Haskell prefers to supply a StateT or <code>state</code> over State?</p>",
        "id": 231405249,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616459090
    },
    {
        "content": "<p>okay, but there are still uses of <code>do</code> notation for constructing <code>Option</code> data</p>",
        "id": 231405313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616459132
    },
    {
        "content": "<p>I mean, not all uses of <code>do</code> notation are for control</p>",
        "id": 231405405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616459174
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 231405435,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616459189
    },
    {
        "content": "<p>mathlib has plenty of other monads like the giry monad or filters or pfun and they can only very vaguely be interpreted as control structures</p>",
        "id": 231405486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616459231
    },
    {
        "content": "<p>Perhaps this will make things like <code>with_bot</code> or <code>with_top</code> cleaner?</p>",
        "id": 231405730,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616459433
    },
    {
        "content": "<p>I'm not sure what you mean. Those can be monads too</p>",
        "id": 231405952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616459602
    },
    {
        "content": "<p>Coming from Haskell, I also think it's reasonable for <code>Option</code> to be a monad, and am not sure about the data <code>Option</code> vs control <code>OptionM</code> distinction.  <code>List</code> is perfectly reasonable a s a monad in Haskell.</p>\n<p>I'd understand though if there is a compilation or performance reason for distinguishing the two, but don't see that referenced in the commit.</p>",
        "id": 231406385,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1616459949
    },
    {
        "content": "<p>I mean that it might make <code>with_bot T = OptionM ??? T</code> with something that isn't just Id for ??? ? Not sure.</p>",
        "id": 231406677,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616460236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231406385\">said</a>:</p>\n<blockquote>\n<p><code>List</code> is perfectly reasonable a s a monad in Haskell.</p>\n</blockquote>\n<p>This is exactly the problem: <code>Option</code> and <code>List</code> are reasonable monads in Haskell, but in Lean are performance traps because of strictness. People automatically think of monads as computation and don't think twice about chaining them with <code>*&gt;</code> or <code>&lt;|&gt;</code>, which is why it's a bad idea to make a strict data type a monad.</p>",
        "id": 231433226,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616486325
    },
    {
        "content": "<p>It's a surprising design choice.  All strict languages that I can think of and which can express a monad type have a monad instance for the list type: e.g. Lean 3, <a href=\"https://github.com/typelevel/cats/blob/0703eff9433bdcc02d5b0f4ff837bf2e7d765064/core/src/main/scala/cats/instances/list.scala#L16-L17\">scala (cats)</a>, or <a href=\"https://github.com/purescript/purescript-lists/blob/2578dd817ea9950558feca46bbae25e6b79cd13c/src/Data/List/Types.purs#L165-L169\">purescript</a> off the top of my head.</p>",
        "id": 231445059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616493531
    },
    {
        "content": "<p>While I can somewhat follow the argumentation of removing <code>Monad List</code> (Lean does not implement stream fusion, so let's remove nice syntax instead..), I am completely baffled as to why <code>Monad Option</code> is supposed to be problematic.  All operations on Option are constant-time, and you don't need stream fusion to simplify <code>f &lt;$&gt; g &lt;$&gt; x</code> to <code>(f ∘ g) &lt;$&gt; x</code> (I would expect both expressions to be optimized to the same result after inlining &lt;$&gt;).</p>",
        "id": 231446314,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616494201
    },
    {
        "content": "<p>It's not about the overhead of the operations themselves, but about that of eagerly evaluating an argument that shouldn't have been. If you do <code>bigSearch1 &lt;|&gt; bigSearch2</code> on <code>Option</code> and the optimizer decides it's over the inlining budget, you're screwed.</p>",
        "id": 231448856,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616495587
    },
    {
        "content": "<p>A different, Lean 4-specific issue is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">for'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">pure</span> <span class=\"n\">none</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">none</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"bp\">?</span><span class=\"n\">m.551</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.550</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The user thought of <code>Option</code> as data, but <code>do</code> assumed it was computation</p>",
        "id": 231449119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616495719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231448856\">said</a>:</p>\n<blockquote>\n<p>It's not about the overhead of the operations themselves, but about that of eagerly evaluating an argument that shouldn't have been. If you do <code>bigSearch1 &lt;|&gt; bigSearch2</code> on <code>Option</code> and the optimizer decides it's over the inlining budget, you're screwed.</p>\n</blockquote>\n<p>This would be a reasonable argument, but the <code>Alternative (Option α)</code> instance is still there.  And then there's also <code>fast &amp;&amp; slow</code>, etc.</p>",
        "id": 231449516,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495892
    },
    {
        "content": "<blockquote>\n<p>A different, Lean 4-specific issue is [...]</p>\n</blockquote>\n<p>Oh, this is disappointing but also a good explanation.  Thanks!</p>",
        "id": 231449696,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495999
    },
    {
        "content": "<p><code>Alternative Option</code> is gone, but the <code>OrElse</code>instance is still there. I'm not completely sure what <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>'s reasoning there was, but at least it makes it harder to unknowingly use the operator on <code>Option</code> in a combinator, since those usually use <code>Alternative</code> I'd guess. If we wanted to be strict (heh) about it, we could rename the function <code>Option.or</code> and add a separate <code>Option.orElse</code> using a thunk, both without special syntax.</p>",
        "id": 231450410,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616496420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231450410\">said</a>:</p>\n<blockquote>\n<p><code>Alternative Option</code> is gone, but the <code>OrElse</code>instance is still there. I'm not completely sure what <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span>'s reasoning there was, but at least it makes it harder to unknowingly use the operator on <code>Option</code> in a combinator, since those usually use <code>Alternative</code> I'd guess. If we wanted to be strict (heh) about it, we could rename the function <code>Option.or</code> and add a separate <code>Option.orElse</code> using a thunk, both without special syntax.</p>\n</blockquote>\n<p>There is the effort of fixing stdlib, and finding a nice alternative for the fix.</p>",
        "id": 231481385,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1616510539
    },
    {
        "content": "<p>Regarding the change, the goal is to improve the user experience. See <code>do</code> example that Sebastian posted above.<br>\nWe are exploring the design space and trying to figure out what works and what doesn't.<br>\nWe didn't wake up one day and decide to remove the instance. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  and I discussed the <code>Monad Option</code> issue a few times.<br>\nThere are many other changes we want to make. For example, we want to address <code>x *&gt; let a := &lt;expensive&gt;; b</code><br>\nFinally, if mathtlib users think <code>Monad Option</code> and <code>Monad List</code> are useful, they can define them in the Mathlib \"core\" files.</p>",
        "id": 231483234,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1616511226
    },
    {
        "content": "<p>Yes, the <code>do</code> example was convincing.  Although it makes me slightly uncomfortable that adding a type class instance can break <code>do</code>-notation that used to work before.  That is, if we add <code>instance : Monad FreeGroup</code>, it will break a function <code>def foo (xs : List α) : FreeGroup α := do ...</code>.<br>\nThere is often no way around <code>Monad</code>.  For example if you want to use lemmas that require <code>LawfulMonad</code>, you need to provide a <code>Monad</code> instance.</p>",
        "id": 231486862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616512407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231483234\">said</a>:</p>\n<blockquote>\n<p>Finally, if mathtlib users think <code>Monad Option</code> and <code>Monad List</code> are useful, they can define them in the Mathlib \"core\" files.</p>\n</blockquote>\n<p>I don't think anybody will add these instances if they break <code>do</code>-notation.</p>",
        "id": 231486944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616512432
    },
    {
        "content": "<p>I'm sure there will be users that would <em>want</em> <code>do</code> to use <code>Option</code> as the monad, so it might not be broken in their opinion. But prefixing the block with <code>OptionM.run</code> seems like the best compromise to please both camps.</p>",
        "id": 231488327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616512819
    },
    {
        "content": "<p>If you add the <code>Monad Option</code> instance, is there a way to get back and tell Lean that <code>def f (xs : List Nat) : Option Nat := do</code> should <em>not</em> use <code>Option</code> as the functor for the do-notation?</p>",
        "id": 231488949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616513033
    },
    {
        "content": "<p>Yes, you have to wrap the type with <code>Id</code></p>",
        "id": 231489420,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616513184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231448856\">said</a>:</p>\n<blockquote>\n<p>It's not about the overhead of the operations themselves, but about that of eagerly evaluating an argument that shouldn't have been. If you do <code>bigSearch1 &lt;|&gt; bigSearch2</code> on <code>Option</code> and the optimizer decides it's over the inlining budget, you're screwed.</p>\n</blockquote>\n<p>There may be some obvious reasons I haven't thought of yet why this suggestion is a silly one... but this has me curious if <code>&lt;|&gt;</code> wouldn't be better off as a macro that expands into control-flow primitives that only evaluate <code>bigSearch2</code> if <code>bigSearch1</code> \"fails\" (a la <code>or</code> being a macro and not a function/primitive in Scheme et al).</p>",
        "id": 231492172,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616514162
    },
    {
        "content": "<p><code>&lt;|&gt;</code> is from a typeclass, it cannot be a macro</p>",
        "id": 231492485,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616514262
    },
    {
        "content": "<p>Yes, I am aware it is currently a function from a typeclass, but that just reflects the current design, no? It's not a fundamental reason why <code>&lt;|&gt;</code> as infix syntax must be a function and not a macro.</p>",
        "id": 231492678,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616514332
    },
    {
        "content": "<p>I'm not necessarily arguing it \"should change\", but just thinking out loud a bit. If <code>&lt;|&gt;</code> has a strong association in enough peoples' minds with not always evaluating the right-hand side, maybe that's a reason to consider it a syntactic abstraction that does that instead of it being a function like it is in Haskell <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 231493088,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616514470
    },
    {
        "content": "<p><code>&lt;|&gt;</code> <em>is</em> the control flow primitive. If you want something else to happen for all monads/alternatives, you'll need to find a new primitive monadic combinator and abstract over it in a typeclass. We considered making the RHS of <code>&lt;|&gt;</code> a thunk, but that could be confusing in proofs/contexts where execution does not matter. If all but two interesting monads are already inherently lazy, the correct solution is to make those two lazy as well, not to change a fundamental combinator. Especially given that they are problematic in other ways as described above.</p>",
        "id": 231495484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616515235
    },
    {
        "content": "<p>I don't necessarily disagree with you, although I think I was trying to talk more purely about the <em>syntax</em> <code>&lt;|&gt;</code> and nothing more. I.e., what should the syntax <code>&lt;|&gt;</code> mean when a user reaches for it and not arguing that the underlying tower of typeclasses should change.</p>",
        "id": 231496340,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616515497
    },
    {
        "content": "<p>Then I do not understand. There is nothing the syntax can do here if the underlying combinator's signature doesn't change.</p>",
        "id": 231496593,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616515575
    },
    {
        "content": "<p>I think I'm imagining a more creative reinterpretation of the syntax <code>&lt;|&gt;</code> than perhaps I'm letting on then which is focused on the control-flow aspects....? (And perhaps for this reason it would be <em>too</em> different and not a good idea, as it would not work in all the places <code>&lt;|&gt;</code> is valid with its current meaning at present). In this alternative reality where <code>&lt;|&gt;</code> as syntax means something very different , you might imagine a class of values where you morally get the following elaborations:</p>\n<p>for <code>Option</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mA</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">mB</span>\n<span class=\"c1\">-- expands to</span>\n<span class=\"k\">match</span> <span class=\"n\">mA</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mB</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>for <code>Except</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mA</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">mB</span>\n<span class=\"c1\">-- expands to</span>\n<span class=\"k\">match</span> <span class=\"n\">mA</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mB</span>\n<span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>etc</p>\n<p>And this interpretation of <code>&lt;|&gt;</code> may end up being very divorced from the current typeclasses it is associated with and work with only a subset or different set of values, etc, but you could still imagine there being such a syntactic abstraction that for <em>some</em> things it ends up computatinoally behaving more like <code>&lt;|&gt;</code> does in a call-by-need language (in at least delaying the RHS).</p>\n<p>At any rate... I worry this is a bit too speculative and distracting for continued debate in this thread xD</p>",
        "id": 231499077,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616516454
    },
    {
        "content": "<p>If the notation was not based on a typeclass, you would not be able to use it in programs or combinators generic over the monad except by making the whole function a macro, which is not tenable.</p>",
        "id": 231499696,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616516684
    },
    {
        "content": "<p>Yes, if you think of this like a more generic \"or\", you would need a typeclass to tell you what values were \"falsy\" to know when to return the thing. And then of course you wouldn't be able to use it in all the places <code>&lt;|&gt;</code> can be used now. It is quite a radical reimagining of the syntax =)</p>",
        "id": 231500123,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616516837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks for explanation.  In hindsight strictness seems like an obvious problem, and I think although bind would be ok, many of the the other operations like <code>&gt;&gt;</code> and <code>&lt;|&gt;</code> would not.</p>",
        "id": 231507399,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1616519409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278501\">@Andrew Kent</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Another direction would be to make strategy annotations part of the type (ABI) of a function.  Maude has had <a href=\"http://maude.cs.uiuc.edu/maude1/manual/maude-manual-html/maude-manual_12.html\">this for a while</a>, but is a first order language.  This would allow making operations like <code>if  then else</code> and short-circuit operators definable in the language.  For Lean, you could just mark certain arguments as eager (call-by-value) and others as lazy (call-by-need).</p>\n<p>I'm guessing this would be a distraction from current goals, but I thought I'd mention it as the approach is fairly well known in term rewriting.</p>",
        "id": 231509364,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1616520135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231489420\">said</a>:</p>\n<blockquote>\n<p>Yes, you have to wrap the type with <code>Id</code></p>\n</blockquote>\n<p>In your <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231449119\">earlier example</a>, with my lean-3-tinted eyes I don't see why the displayed behavior is regarded as unexpected. If you want to use <code>return some x</code> and <code>return none</code> then you have to use <code>do</code> in a monad <code>m (Option Nat)</code>; if the target type is <code>Option Nat</code> then I expect that the monad is <code>Option</code> and the inner type is <code>Nat</code>. Indeed, if the target type is just <code>A</code> without an obvious monad application, I think it is acceptable to error out rather than guessing the <code>Id</code> monad. The concrete workaround for that example is to change the type to <code>def f ... : id (Option Nat) := do ...</code> or <code>def f ... : Option Nat := show  id (Option Nat) from do ...</code>.</p>",
        "id": 231555864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616539659
    },
    {
        "content": "<p>Regarding eager function applications like <code>o1 &lt;|&gt; o2</code> or <code>fast &amp;&amp; slow</code>, I think this has always been a problem and lean 3's solution of using <code>@[inline]</code> is not good because it is sensitive to inlining decisions. Ideally the execution order should not be changed by inlining; even though lean is a pure language this is still a performance foot-gun. I agree with <span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> that a more robust solution is to explicitly indicate laziness in the types; some of this can be accomplished by using <code>thunk A</code> but this is not the same type as <code>A</code> so it can cause problems for mathematics and the kernel (e.g. if the type of <code>Bool.and</code> was <code>Bool -&gt; (Unit -&gt; Bool) -&gt; Bool</code> that would be rather annoying to work with), so I think this should be either an identity wrapper / annotation or an attribute.</p>",
        "id": 231556540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616540087
    },
    {
        "content": "<blockquote>\n<p>I think it is acceptable to error out rather than guessing the <code>Id</code> monad.</p>\n</blockquote>\n<p>So this is what's happening here?  I honestly did not make that connection at all.</p>",
        "id": 231598495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616574941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231555864\">said</a>:</p>\n<blockquote>\n<p>with my lean-3-tinted eyes</p>\n</blockquote>\n<p>Using <code>do</code> blocks for pure code (without further annotations) has by now become second nature for us, it is super convenient. <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> told me he also ran into some <code>Option</code> confusion issues before the change, maybe he can mention some practical examples from someone not involved in designing the feature :) .</p>",
        "id": 231601935,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616576972
    },
    {
        "content": "<p>Just wanted to mention I’ve also run into issues that Sebastian described. As someone who frequently uses <code>Option</code> comprehension I dealt with them by sprinkling extra type annotations around in my for loops etc, but I understand that’s not good user experience for most users so the change seems like a net positive (as long as users can opt-in by providing their own Monad Option instance).</p>",
        "id": 231663510,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616602874
    },
    {
        "content": "<p>What about a macro like <code>pure_do</code> or similar to make it explicit that this is a do block in the identity monad? I think this is useful as documentation as well, because the version you posted reads weirdly otherwise</p>",
        "id": 231717443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616623744
    },
    {
        "content": "<p>this default fallback behavior seems difficult to control; there should be a simpler way to do it without cumbersome annotations if it is as useful as you say</p>",
        "id": 231717787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616623885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20do.20notation.20regression.3F/near/231449119\">said</a>:</p>\n<blockquote>\n<p>A different, Lean 4-specific issue is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">for'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">pure</span> <span class=\"n\">none</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">none</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"bp\">?</span><span class=\"n\">m.551</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.550</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The user thought of <code>Option</code> as data, but <code>do</code> assumed it was computation</p>\n</blockquote>\n<p>Might be a stupid question, but could somebody explain to me what the problem is here? And what's the difference between viewing a do block as data or as computation?</p>",
        "id": 265478522,
        "sender_full_name": "Marius Melzer",
        "timestamp": 1639917964
    },
    {
        "content": "<p>Have you seen the discussion here: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Has.20the.20do.20notation.20changed.20recently.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Has.20the.20do.20notation.20changed.20recently.3F</a> ? I think it's related</p>",
        "id": 265478933,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639918655
    },
    {
        "content": "<p>What version are you on? On <code>2021-12-18</code> I get a nicer error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">do</span><span class=\"bp\">'</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">monad</span> <span class=\"n\">application</span>\n  <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n<span class=\"n\">You</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"k\">do</span><span class=\"bp\">`</span> <span class=\"kd\">notation</span> <span class=\"k\">in</span> <span class=\"n\">pure</span> <span class=\"n\">code</span> <span class=\"kd\">by</span> <span class=\"n\">writing</span> <span class=\"bp\">`</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span><span class=\"bp\">`</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"k\">do</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">Id</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">identity</span> <span class=\"n\">monad.</span>\n</code></pre></div>",
        "id": 265479003,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639918762
    },
    {
        "content": "<p>If <code>Option</code> is a monad, then <code>return</code> is analogous to  <code>pure</code> in the sense that it'll take a value of type <code>Nat</code> and embed it in <code>Option Nat</code> (i.e. <code>return x</code> is <code>some x</code> in this case, with it additionally affecting control flow in Lean 4). So in the code snippet above, if <code>Option</code> is a monad, it'll error because it expects <code>Nat</code> for the argument to <code>return</code>, not <code>Option Nat</code>. Instead, you'd have to write it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">OptionM.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">x</span>\n  <span class=\"n\">none</span>\n</code></pre></div>\n<p>This behaviour makes sense for most side effects. If you use <code>IO</code> for instance, you think of the type <code>Nat</code> in <code>IO Nat</code> as the real return value, not <code>IO Nat</code>. If you use <code>return x</code> in <code>IO</code>, you very likely want to pass an integer, not an <code>IO</code>.<br>\nBut <code>Option</code> is somehow different. It's not always used for side effects, sometimes you just want to use it as a value. In this case, the default above can be unintuitive. So the choice made here was to have <code>OptionM</code> be the monad, <code>Option</code> be a value and <code>OptionM.run</code> to go from the former to the latter, so that you can still use the monadic version of <code>Option</code> in functions that return <code>Option</code> if you want to.</p>",
        "id": 265479363,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639919222
    },
    {
        "content": "<p>What's a terse way of doing <code>x &gt;&gt;= f</code> for <code>x : Option α</code>, <code>f : α → Option β</code>?</p>",
        "id": 275860550,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647636427
    },
    {
        "content": "<p>I guess <code>Option.bind x f</code></p>",
        "id": 275861115,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647636724
    },
    {
        "content": "<p><code>x.bind f</code></p>",
        "id": 275878259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647649776
    }
]