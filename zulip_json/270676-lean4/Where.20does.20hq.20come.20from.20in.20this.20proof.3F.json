[
    {
        "content": "<p>Why does this work? we're passing a function into <code>Or.inr</code> but we aren't passing an argument for <code>hq</code>, where does <code>hq</code> come from?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"c1\">-- where does hq come from?</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is a modified version of the last proof on <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html</a> (which also doesn't make sense, how is <code>hq : q</code> being extracted automatically from <code>hp : p</code> and <code>h : ¬(p ∧ q)</code>?)</p>",
        "id": 259005683,
        "sender_full_name": "Ulisse Mini",
        "timestamp": 1635188853
    },
    {
        "content": "<p>not q is defined as q → false</p>",
        "id": 259005890,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1635188957
    },
    {
        "content": "<p>So to prove not q, you create a function that takes the assumption <code>hq : q</code> and prove false</p>",
        "id": 259005954,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1635188996
    },
    {
        "content": "<p><code>hq</code> comes from <code>fun hq : q -&gt; ...</code>. Your goal at that point is <code>¬q</code> which by definition is <code>q -&gt; False</code> so you are assuming a proof of <code>q</code> and returning a proof of <code>False</code> from what you have.</p>",
        "id": 259005958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188999
    },
    {
        "content": "<p>PS you say it \"doesn't make sense\", but I think what you mean is that it doesn't make sense to you.</p>",
        "id": 259006105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189062
    },
    {
        "content": "<p>Maybe read the section on Negation and Falsity on that link?</p>",
        "id": 259006176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189105
    },
    {
        "content": "<p>if it didn't make sense, that would be a problem, because the whole point of Lean is that it's checking that everything makes sense :-)</p>",
        "id": 259006317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189165
    },
    {
        "content": "<p>I did read the section on contradictions &amp; I understand the argument, I just thought hq was a different type then q, and I was wondering where we \"create\" <code>hq</code>. basically I don't understand where \"assume for contradiction that <code>hq</code> is true\" is written, it seems very implicit to me.</p>",
        "id": 259006740,
        "sender_full_name": "Ulisse Mini",
        "timestamp": 1635189377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Where.20does.20hq.20come.20from.20in.20this.20proof.3F/near/259005890\">said</a>:</p>\n<blockquote>\n<p>not q is defined as q → false</p>\n</blockquote>\n<p>Ohh I think I understand now, thanks!</p>",
        "id": 259006835,
        "sender_full_name": "Ulisse Mini",
        "timestamp": 1635189443
    },
    {
        "content": "<p><code>q : Prop</code> and <code>hq : q</code>. So <code>q</code> is the <em>statement</em> and <code>hq</code> is the <em>proof</em>. If you want another resource then you could try the logic notes I wrote for my (mathematician) undergraduates a couple of weeks ago <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">here</a>.</p>",
        "id": 259007295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Where.20does.20hq.20come.20from.20in.20this.20proof.3F/near/259007295\">said</a>:</p>\n<blockquote>\n<p><code>q : Prop</code> and <code>hq : q</code>. So <code>q</code> is the <em>statement</em> and <code>hq</code> is the <em>proof</em>. If you want another resource then you could try the logic notes I wrote for my (mathematician) undergraduates a couple of weeks ago <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">here</a>.</p>\n</blockquote>\n<p>Thanks! I'll take a look at those</p>",
        "id": 259007517,
        "sender_full_name": "Ulisse Mini",
        "timestamp": 1635189774
    },
    {
        "content": "<p>Basically if you have a CS background then theorem proving in Lean might be the place to start, and if you have a maths background (e.g. you don't have a clue what a type or a term is, like my undergrads) then my more tactic based approach might be more suitable for you.</p>",
        "id": 259007818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189906
    }
]