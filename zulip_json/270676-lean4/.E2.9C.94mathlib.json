[
    {
        "content": "<p>Trying to get a technique from mathlib, but the import statement is throwing errors.<br>\n<code>import Mathlib.Logic.Basic</code><br>\n<code>unknown package 'Mathlib'</code></p>",
        "id": 285721212,
        "sender_full_name": "Aron",
        "timestamp": 1654888674
    },
    {
        "content": "<p>you need <a href=\"https://github.com/leanprover-community/mathlib4/\">https://github.com/leanprover-community/mathlib4/</a> as a dependency</p>",
        "id": 285723807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890173
    },
    {
        "content": "<p>here's an example of a lakefile that declares a mathlib dependency: <a href=\"https://github.com/avigad/lamr/blob/main/lakefile.lean\">https://github.com/avigad/lamr/blob/main/lakefile.lean</a></p>",
        "id": 285724129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890376
    },
    {
        "content": "<ul>\n<li>install elan: check.</li>\n<li>lake build:  toolchain 'stable' does not have the binary <code>/Users/myname/.elan/toolchains/stable/bin/lake</code></li>\n</ul>",
        "id": 285724133,
        "sender_full_name": "Aron",
        "timestamp": 1654890378
    },
    {
        "content": "<p>you should use a nightly compatible with mathlib4, <code>leanprover/lean4:nightly-2022-05-31</code></p>",
        "id": 285724260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890465
    },
    {
        "content": "<p>how?</p>",
        "id": 285724329,
        "sender_full_name": "Aron",
        "timestamp": 1654890488
    },
    {
        "content": "<p>it goes in the <code>lean-toolchain</code> file</p>",
        "id": 285724348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890501
    },
    {
        "content": "<p>where is the <code>lean-toolchain</code> file?</p>",
        "id": 285724390,
        "sender_full_name": "Aron",
        "timestamp": 1654890531
    },
    {
        "content": "<p>in the root of your project (again, see the LAMR example: <a href=\"https://github.com/avigad/lamr/blob/main/lean-toolchain\">https://github.com/avigad/lamr/blob/main/lean-toolchain</a>)</p>",
        "id": 285724433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890557
    },
    {
        "content": "<p>Tried making a lean-toolchain folder and putting that in, now my lean infoview is broken.</p>",
        "id": 285724770,
        "sender_full_name": "Aron",
        "timestamp": 1654890755
    },
    {
        "content": "<p><code>No info found.</code></p>",
        "id": 285724853,
        "sender_full_name": "Aron",
        "timestamp": 1654890800
    },
    {
        "content": "<p>actually LAMR was a bad example. It's surprisingly hard to find a good sample project to point at. Here's one: <a href=\"https://github.com/marcusrossel/model-checking/blob/main/lakefile.lean\">https://github.com/marcusrossel/model-checking/blob/main/lakefile.lean</a></p>",
        "id": 285725161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654890944
    },
    {
        "content": "<p>apparently mathlib4 use is pretty low among current lean 4 projects found on <a href=\"https://github.com/xubaiw/reservoir-index/blob/main/lakes.json\">https://github.com/xubaiw/reservoir-index/blob/main/lakes.json</a> . <span aria-label=\"concerned\" class=\"emoji emoji-1f615\" role=\"img\" title=\"concerned\">:concerned:</span></p>",
        "id": 285725584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654891178
    },
    {
        "content": "<p>But that's <code>lakefile.lean</code>, I need <code>lean-toolchain</code>.</p>",
        "id": 285725938,
        "sender_full_name": "Aron",
        "timestamp": 1654891337
    },
    {
        "content": "<p>the lean-toolchain file should also be found there</p>",
        "id": 285726129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654891455
    },
    {
        "content": "<p>it's literally just a file called <code>lean-toolchain</code> with the target lean version: <a href=\"https://github.com/marcusrossel/model-checking/blob/main/lean-toolchain\">https://github.com/marcusrossel/model-checking/blob/main/lean-toolchain</a></p>",
        "id": 285726169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654891483
    },
    {
        "content": "<p>you want the version to match the one that is used in whatever version of mathlib4 you are using (currently that is <code>leanprover/lean4:nightly-2022-05-31</code>)</p>",
        "id": 285726224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654891517
    },
    {
        "content": "<p>the commit of mathlib4 you are using goes in the lakefile (currently <code>6895646674b04c0d7bcd085b4da3f7bb354ceaa9</code>)</p>",
        "id": 285726344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654891587
    },
    {
        "content": "<p>Okay, that all seemed to work, but now my code is having a ton of errors that it didn't before. Does the nightly build go contrary to the stable build?</p>",
        "id": 285727365,
        "sender_full_name": "Aron",
        "timestamp": 1654892245
    },
    {
        "content": "<p>Oh, the nightly build actually implements unique existence, doesn't it? I'd defined that myself.</p>",
        "id": 285727491,
        "sender_full_name": "Aron",
        "timestamp": 1654892295
    },
    {
        "content": "<p>yeah, churn with new versions of lean 4 is pretty common, that's why we have all this nightly / commit pinning</p>",
        "id": 285729410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654893413
    },
    {
        "content": "<p>Do you know how I'd be able to get <code>h: lnot a=b</code> to <code>h: a\\neq b</code>?</p>",
        "id": 285730191,
        "sender_full_name": "Aron",
        "timestamp": 1654893816
    },
    {
        "content": "<p>what is <code>lnot</code></p>",
        "id": 285730318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654893883
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 285730325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654893892
    },
    {
        "content": "<p>Ask your question as a compiling lean file</p>",
        "id": 285730388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654893944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343532\">@Aron</span> Do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 285730508,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654894002
    },
    {
        "content": "<p>or just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 285730545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894040
    },
    {
        "content": "<p>these two are definitionally equal so you can pretty much use them interchangeably</p>",
        "id": 285730577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894062
    },
    {
        "content": "<p>Right, give me a minute</p>",
        "id": 285731110,
        "sender_full_name": "Aron",
        "timestamp": 1654894417
    },
    {
        "content": "<p>Here's something else that might help: start new Lean 4 projects with <code>lake new MyProjectName</code> and you'll have a fully functional Lake project (a Lean 4 project with Lake support). It will create a <code>lakefile.lean</code> and a <code>lean-toolchain</code> for you</p>",
        "id": 285731267,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654894497
    },
    {
        "content": "<p>is there a document to refer people to that explains the setup?</p>",
        "id": 285731430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894578
    },
    {
        "content": "<p>Okay, so I'm working on some incidence geometry stuff. All the import stuff is already fixed, this is just an unrelated thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"c1\">-- def exunique (p : α → Prop) := ∃ (x : α), (p x ∧ ∀ y, p y → x = y)</span>\n\n<span class=\"c1\">-- syntax \"∃!\" term \",\" term: term</span>\n<span class=\"c1\">-- macro_rules</span>\n<span class=\"c1\">-- | `(∃! $t:term, $p:term) =&gt; `(exunique (fun $t =&gt; $p))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span><span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩:=</span> <span class=\"n\">hex</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- apply Classical.byContradiction; intro hanb</span>\n<span class=\"n\">refine</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">hanb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hanb</span>\n<span class=\"c1\">-- have ⟨hal,ham⟩:=ha</span>\n<span class=\"c1\">-- have ⟨hbl,hbm⟩:=hb</span>\n<span class=\"c1\">-- have h:=i.one a b hanb</span>\n<span class=\"c1\">-- have ⟨x,hx1,hx2⟩:=h</span>\n<span class=\"c1\">-- have hl':= hx2 l ⟨hal,hbl⟩</span>\n<span class=\"c1\">-- have hm':= hx2 m ⟨ham,hbm⟩</span>\n<span class=\"c1\">-- have hlm:= Eq.trans (Eq.symm hl') hm'</span>\n<span class=\"c1\">-- hlm hlnm</span>\n<span class=\"c1\">-- contradiction</span>\n\n\n<span class=\"c1\">-- theorem t2: ∀ l, ∃ p, ¬ inc p l := by</span>\n<span class=\"c1\">-- intro l</span>\n<span class=\"c1\">-- have ⟨p,q,r,hpnq,hqnr,hpnr,hncol⟩ := i.three</span>\n<span class=\"c1\">-- have hl:= hncol l</span>\n<span class=\"c1\">-- apply Classical.byContradiction</span>\n<span class=\"c1\">-- intro hallinc</span>\n<span class=\"c1\">-- apply not_exists at hallinc</span>\n<span class=\"c1\">-- have hpqrinc:= And.intro (And.intro (hallinc p) (hallinc q)) (hallinc r)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trying.lean</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">17</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.352</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.353</span>\n<span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span>\n<span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">line</span>\n<span class=\"n\">hlnm</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">point</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">inc</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">a</span> <span class=\"n\">m</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"n\">hanb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>If you remove <code>eq_comm</code> you can see that <code>hanb: b=a</code> but it doesn't want to make <code>hanb: a=b</code>.</p>",
        "id": 285731473,
        "sender_full_name": "Aron",
        "timestamp": 1654894622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94mathlib/near/285731430\">said</a>:</p>\n<blockquote>\n<p>is there a document to refer people to that explains the setup?</p>\n</blockquote>\n<p>The minimal steps at least are right at <a href=\"https://leanprover.github.io/lean4/doc/quickstart.html#create-a-lean-project\">https://leanprover.github.io/lean4/doc/quickstart.html#create-a-lean-project</a></p>",
        "id": 285731509,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654894659
    },
    {
        "content": "<p>We might want to add a link to the Lake README there</p>",
        "id": 285731527,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654894677
    },
    {
        "content": "<p>does <code>lake add leanprover-community/mathlib4</code> work the way I would hope?</p>",
        "id": 285731622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894727
    },
    {
        "content": "<p>That doesn't exist, no</p>",
        "id": 285731765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654894812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343532\">@Aron</span> the simplest thing to do in that example is just <code>rewrite [eq_comm] at hanb</code></p>",
        "id": 285731801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894834
    },
    {
        "content": "<p>That is what I'm doing.</p>",
        "id": 285731945,
        "sender_full_name": "Aron",
        "timestamp": 1654894881
    },
    {
        "content": "<p><code>a = b</code> and <code>b = a</code> are not the same to lean, so if you have to flip an equality use that</p>",
        "id": 285731980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894900
    },
    {
        "content": "<p>I am using that.</p>",
        "id": 285731995,
        "sender_full_name": "Aron",
        "timestamp": 1654894912
    },
    {
        "content": "<p>or use <code>&lt;-</code> in <code>rw</code>, depending on the context</p>",
        "id": 285732006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894918
    },
    {
        "content": "<p>did you have a question about the code?</p>",
        "id": 285732074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894939
    },
    {
        "content": "<p>Yes, <code>eq_comm</code> isn't working despite being given the type that it wants.</p>",
        "id": 285732109,
        "sender_full_name": "Aron",
        "timestamp": 1654894964
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 285732125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654894981
    },
    {
        "content": "<p>We reach a state:<br>\n<code>hanb: ¬b = a</code><br>\nWe want to make:<br>\n<code>hanb: a ≠ b</code><br>\nSo we use:<br>\n<code>rewrite [&lt;- ne_eq, eq_comm] at hanb</code></p>",
        "id": 285732254,
        "sender_full_name": "Aron",
        "timestamp": 1654895076
    },
    {
        "content": "<p><code>rewrite [eq_comm, ← ne_eq] at hanb</code></p>",
        "id": 285732279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654895101
    },
    {
        "content": "<p>Why does the order matter?</p>",
        "id": 285732325,
        "sender_full_name": "Aron",
        "timestamp": 1654895128
    },
    {
        "content": "<p>because <code>eq_comm</code> rewrites <code>=</code>, not <code>!=</code>. You would use <code>ne_comm</code> to rewrite <code>!=</code></p>",
        "id": 285732363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654895157
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 285732431,
        "sender_full_name": "Aron",
        "timestamp": 1654895176
    },
    {
        "content": "<p>Alright, now I have a problem which pertains to mathlib again.<br>\nI'm trying to use lean with another editor by having a terminal window run <code>lean filename</code> every once in a while, but it doesn't recognize the mathlib package.<br>\nVSCode works just fine, though.<br>\nWhat's going on?</p>",
        "id": 285736886,
        "sender_full_name": "Aron",
        "timestamp": 1654897992
    },
    {
        "content": "<p>Using <code>lean</code> directly doesn't really work in lean 4 for a file that has imports (even if only to your own project) without a whole bunch of command line args to supply all the include paths</p>",
        "id": 285737563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654898506
    },
    {
        "content": "<p>if you run <code>lake build</code> you will see the lean invocation needed for your project</p>",
        "id": 285737689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654898600
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lNS4QtXb1HHaYGfsTySLTg_m/Screen-Shot-2022-06-10-at-6.04.06-PM.png\">Screen-Shot-2022-06-10-at-6.04.06-PM.png</a> <br>\nTried <code>lake build</code>, it hits an error.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lNS4QtXb1HHaYGfsTySLTg_m/Screen-Shot-2022-06-10-at-6.04.06-PM.png\" title=\"Screen-Shot-2022-06-10-at-6.04.06-PM.png\"><img src=\"/user_uploads/3121/lNS4QtXb1HHaYGfsTySLTg_m/Screen-Shot-2022-06-10-at-6.04.06-PM.png\"></a></div>",
        "id": 285737789,
        "sender_full_name": "Aron",
        "timestamp": 1654898669
    },
    {
        "content": "<p>is there a <code>Main.lean</code> file?</p>",
        "id": 285737833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654898719
    },
    {
        "content": "<p>No.</p>",
        "id": 285737953,
        "sender_full_name": "Aron",
        "timestamp": 1654898804
    },
    {
        "content": "<p>What would be in it?</p>",
        "id": 285737957,
        "sender_full_name": "Aron",
        "timestamp": 1654898810
    },
    {
        "content": "<p>Is that what my work file should be called?</p>",
        "id": 285737973,
        "sender_full_name": "Aron",
        "timestamp": 1654898824
    },
    {
        "content": "<p>that is the root file of the project</p>",
        "id": 285738077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654898910
    },
    {
        "content": "<p>Mine doesn't have one, should I just rename my file <code>Main.lean</code>?</p>",
        "id": 285738145,
        "sender_full_name": "Aron",
        "timestamp": 1654898985
    },
    {
        "content": "<p>the usual project hierarchy is to have <code>MyProj.lean</code> which is a bunch of lines like <code>import MyProj.Foo</code>, and then all your other lean files are in a subfolder also called <code>MyProj</code> , e.g.<code>MyProj/Foo.lean</code></p>",
        "id": 285738201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899014
    },
    {
        "content": "<p>The name <code>MyProj</code> is what appears in your lakefile</p>",
        "id": 285738224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899030
    },
    {
        "content": "<p>presumably you called it <code>Main</code> which is why lean is looking for a <code>Main.lean</code></p>",
        "id": 285738240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899059
    },
    {
        "content": "<p>The name of mine, <code>trying.lean</code>, doesn't show up in my lakefile.</p>",
        "id": 285738251,
        "sender_full_name": "Aron",
        "timestamp": 1654899067
    },
    {
        "content": "<p>There's no file name in there at all.</p>",
        "id": 285738263,
        "sender_full_name": "Aron",
        "timestamp": 1654899082
    },
    {
        "content": "<p>those are \"loose files\", imports won't work correctly in them</p>",
        "id": 285738277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899097
    },
    {
        "content": "<p>How do I properly put it in my lakefile?</p>",
        "id": 285738295,
        "sender_full_name": "Aron",
        "timestamp": 1654899119
    },
    {
        "content": "<p>I mean the lakefile has <code>package MyProj  ...</code></p>",
        "id": 285738360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899149
    },
    {
        "content": "<p>actually the examples I see seem to be lowercase, <code>package my_proj where ...</code></p>",
        "id": 285738508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899252
    },
    {
        "content": "<p>I guess it's doing case conversion?</p>",
        "id": 285738540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899284
    },
    {
        "content": "<p>It has <code>package model_checking where</code>.</p>",
        "id": 285738596,
        "sender_full_name": "Aron",
        "timestamp": 1654899327
    },
    {
        "content": "<p>But it's asking for <code>Main.lean</code>.</p>",
        "id": 285738615,
        "sender_full_name": "Aron",
        "timestamp": 1654899342
    },
    {
        "content": "<p>try creating a <code>ModelChecking.lean</code> file then</p>",
        "id": 285738772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899457
    },
    {
        "content": "<p>take a look at the file hierarchy in the project I got that from: <a href=\"https://github.com/marcusrossel/model-checking\">https://github.com/marcusrossel/model-checking</a></p>",
        "id": 285738876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899497
    },
    {
        "content": "<p>you see the main file is called <code>ModelChecking.lean</code> and all the other files are in the <code>ModelChecking</code> folder</p>",
        "id": 285738921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899536
    },
    {
        "content": "<p><code>lake</code> does actually do case conversion here, it derives the name of the file from the package name by converting it to capital camel case</p>",
        "id": 285738964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899580
    },
    {
        "content": "<p>(You probably want to change the name to something else though unless you are also interested in model checking)</p>",
        "id": 285739038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899619
    },
    {
        "content": "<p>but <code>lake</code> is looking for <code>Main.lean</code>.</p>",
        "id": 285739190,
        "sender_full_name": "Aron",
        "timestamp": 1654899752
    },
    {
        "content": "<p>can you show your whole setup and the commands you are executing? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 285739260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899820
    },
    {
        "content": "<p>It's neovim and tmux.<br>\n<a href=\"/user_uploads/3121/-CXAmUkeC4GsVVPIYKwjgAuA/Screen-Shot-2022-06-10-at-6.24.21-PM.png\">Screen-Shot-2022-06-10-at-6.24.21-PM.png</a> <a href=\"/user_uploads/3121/84zqvo8lMLK-DrLD_0Yb07Dh/Screen-Shot-2022-06-10-at-6.24.44-PM.png\">Screen-Shot-2022-06-10-at-6.24.44-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-CXAmUkeC4GsVVPIYKwjgAuA/Screen-Shot-2022-06-10-at-6.24.21-PM.png\" title=\"Screen-Shot-2022-06-10-at-6.24.21-PM.png\"><img src=\"/user_uploads/3121/-CXAmUkeC4GsVVPIYKwjgAuA/Screen-Shot-2022-06-10-at-6.24.21-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/84zqvo8lMLK-DrLD_0Yb07Dh/Screen-Shot-2022-06-10-at-6.24.44-PM.png\" title=\"Screen-Shot-2022-06-10-at-6.24.44-PM.png\"><img src=\"/user_uploads/3121/84zqvo8lMLK-DrLD_0Yb07Dh/Screen-Shot-2022-06-10-at-6.24.44-PM.png\"></a></div>",
        "id": 285739358,
        "sender_full_name": "Aron",
        "timestamp": 1654899891
    },
    {
        "content": "<p><code>lean --version</code>?</p>",
        "id": 285739396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899931
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NCU4YUx1CeuGZkbHzr8tCmxZ/Screen-Shot-2022-06-10-at-6.25.54-PM.png\">Screen-Shot-2022-06-10-at-6.25.54-PM.png</a> <br>\nNot the nightly build, apparently.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NCU4YUx1CeuGZkbHzr8tCmxZ/Screen-Shot-2022-06-10-at-6.25.54-PM.png\" title=\"Screen-Shot-2022-06-10-at-6.25.54-PM.png\"><img src=\"/user_uploads/3121/NCU4YUx1CeuGZkbHzr8tCmxZ/Screen-Shot-2022-06-10-at-6.25.54-PM.png\"></a></div>",
        "id": 285739453,
        "sender_full_name": "Aron",
        "timestamp": 1654899964
    },
    {
        "content": "<p>No, it is, but the wrong commit?</p>",
        "id": 285739484,
        "sender_full_name": "Aron",
        "timestamp": 1654899980
    },
    {
        "content": "<p>that seems fine</p>",
        "id": 285739496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899986
    },
    {
        "content": "<p>what is the contents of <code>lakefile.lean</code></p>",
        "id": 285739498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654899995
    },
    {
        "content": "<p>and use code blocks</p>",
        "id": 285739504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654900001
    },
    {
        "content": "<p>It looks like <code>lake build --file trying.lean</code> is trying to treat <code>trying.lean</code> as a build manifest, which is not what you want</p>",
        "id": 285739752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654900166
    },
    {
        "content": "<p>I'd use codeblocks if tmux let me copy and paste, give me a minute</p>",
        "id": 285739852,
        "sender_full_name": "Aron",
        "timestamp": 1654900233
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">trying</span> <span class=\"n\">where</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"6895646674b04c0d7bcd085b4da3f7bb354ceaa9\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 285739911,
        "sender_full_name": "Aron",
        "timestamp": 1654900300
    },
    {
        "content": "<p>Okay, I just set up a project like yours and got things working. It looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lakefile.lean</span>\n<span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">Main.lean</span>\n<span class=\"n\">Trying.lean</span>\n</code></pre></div>\n<p><code>lean-toolchain</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">31</span>\n</code></pre></div>\n<p><code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">trying</span> <span class=\"n\">where</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"6895646674b04c0d7bcd085b4da3f7bb354ceaa9\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p><code>Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Trying</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p><code>Trying.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_not_em</span>\n</code></pre></div>\n<p>result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">6895646674</span><span class=\"n\">b04c0d7bcd085b4da3f7bb354ceaa9</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-05-31/bin/lean ././Main.lean -R ./. -o ./build/lib/Main.olean -i ./build/lib/Main.ilean -c ./build/ir/Main.c</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-05-31/bin/leanc -c -o ./build/ir/Main.o ./build/ir/Main.c -O3 -DNDEBUG</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-05-31/bin/leanc -o ./build/bin/trying ./build/ir/Main.o ./build/ir/Trying.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/Ext.o ./lean_packages/mathlib/./build/ir/Mathlib/Util/LibraryNote.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/RCases.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/NoMatch.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/Cache.o ./lean_packages/mathlib/./build/ir/Mathlib/Logic/Basic.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/OpenPrivate.o ./lean_packages/mathlib/./build/ir/Mathlib/Init/Function.o ./lean_packages/mathlib/./build/ir/Mathlib/Init/Logic.o ./lean_packages/mathlib/./build/ir/Mathlib/Logic/Nonempty.o ./lean_packages/mathlib/./build/ir/Mathlib/Tactic/Basic.o</span>\n</code></pre></div>",
        "id": 285740506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654900752
    },
    {
        "content": "<p>if you don't want to create an executable, you can change the lakefile to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">trying</span> <span class=\"n\">where</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"6895646674b04c0d7bcd085b4da3f7bb354ceaa9\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n  <span class=\"n\">defaultFacet</span> <span class=\"o\">:=</span> <span class=\"n\">PackageFacet.oleans</span>\n</code></pre></div>\n<p>and delete <code>Main.lean</code></p>",
        "id": 285740623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654900845
    },
    {
        "content": "<p>Yeah, not much point in making it an executable when I'm just learning the language.</p>",
        "id": 285740684,
        "sender_full_name": "Aron",
        "timestamp": 1654900877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Arons</span><span class=\"bp\">-</span><span class=\"n\">MBP</span><span class=\"o\">:</span><span class=\"n\">trying</span> <span class=\"n\">atobi16</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"bp\">`./</span><span class=\"n\">lakefile.lean</span><span class=\"bp\">`</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 285740801,
        "sender_full_name": "Aron",
        "timestamp": 1654900969
    },
    {
        "content": "<p>I was going to suggest that, and it may not matter for playing around, but the lake repo says defaultFacet is apparently deprecated now</p>",
        "id": 285740999,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901137
    },
    {
        "content": "<p>What is defaultFacet?</p>",
        "id": 285741124,
        "sender_full_name": "Aron",
        "timestamp": 1654901237
    },
    {
        "content": "<p>it controls what <code>lake build</code> does</p>",
        "id": 285741140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901257
    },
    {
        "content": "<p>you can also specify it explicitly using <code>lake build bin</code>, <code>lake build oleans</code> and some others</p>",
        "id": 285741159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901276
    },
    {
        "content": "<p>Here's I think an example of the new way</p>",
        "id": 285741165,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901280
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/tree/be45aa90eb3fac480876fe7fd72425dbf5dec251/examples/deps/root\">https://github.com/leanprover/lake/tree/be45aa90eb3fac480876fe7fd72425dbf5dec251/examples/deps/root</a></p>",
        "id": 285741167,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901282
    },
    {
        "content": "<p>(<code>lean_lib</code> is the replacement)</p>",
        "id": 285741210,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901287
    },
    {
        "content": "<p>Where <code>root</code> and <code>Root.lean</code> is the name of an example project, so yours is <code>trying</code></p>",
        "id": 285741244,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901335
    },
    {
        "content": "<p>that looks pretty bleeding edge though, it's probably not available on the version Aron is using</p>",
        "id": 285741285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901382
    },
    {
        "content": "<p>Ah, indeed quite possibly, I forgot mathlib4 may not be so bleeding. Ignore me.</p>",
        "id": 285741348,
        "sender_full_name": "Julian Berman",
        "timestamp": 1654901415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343532\">Aron</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94mathlib/near/285740801\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Arons</span><span class=\"bp\">-</span><span class=\"n\">MBP</span><span class=\"o\">:</span><span class=\"n\">trying</span> <span class=\"n\">atobi16</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"bp\">`./</span><span class=\"n\">lakefile.lean</span><span class=\"bp\">`</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Well, I'm here now. Do I really need to fix all the errors [namely mathlib not importing] before this will work?</p>",
        "id": 285741420,
        "sender_full_name": "Aron",
        "timestamp": 1654901510
    },
    {
        "content": "<p>what's in your lakefile?</p>",
        "id": 285741492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901549
    },
    {
        "content": "<p>There's always Lean 3. Stable releases, solid maths library, lots of supporting tools and documentation etc etc</p>",
        "id": 285741505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654901566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343532\">Aron</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94mathlib/near/285739911\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">trying</span> <span class=\"n\">where</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"6895646674b04c0d7bcd085b4da3f7bb354ceaa9\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 285741514,
        "sender_full_name": "Aron",
        "timestamp": 1654901576
    },
    {
        "content": "<p>And I'd need to relearn everything and set up in a completely different way. Don't you love it?</p>",
        "id": 285741544,
        "sender_full_name": "Aron",
        "timestamp": 1654901610
    },
    {
        "content": "<p>that doesn't even have a line 11</p>",
        "id": 285741554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901621
    },
    {
        "content": "<p>is that really your lakefile?</p>",
        "id": 285741617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">trying</span> <span class=\"n\">where</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"6895646674b04c0d7bcd085b4da3f7bb354ceaa9\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n  <span class=\"n\">defaultFacet</span> <span class=\"o\">:=</span> <span class=\"n\">PackageFacet.oleans</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 285741657,
        "sender_full_name": "Aron",
        "timestamp": 1654901721
    },
    {
        "content": "<p>Oh, there it is.</p>",
        "id": 285741662,
        "sender_full_name": "Aron",
        "timestamp": 1654901731
    },
    {
        "content": "<p>That's what you guys were talking about.</p>",
        "id": 285741676,
        "sender_full_name": "Aron",
        "timestamp": 1654901745
    },
    {
        "content": "<p>did you copy the lakefile I posted <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94mathlib/near/285740623\">above</a>?</p>",
        "id": 285741728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901767
    },
    {
        "content": "<p>Yes.</p>",
        "id": 285741749,
        "sender_full_name": "Aron",
        "timestamp": 1654901793
    },
    {
        "content": "<p>there shouldn't be</p>",
        "id": 285741832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901876
    },
    {
        "content": "<p>there's a backtick at the end</p>",
        "id": 285741896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901920
    },
    {
        "content": "<p>(oops, missed message there)</p>",
        "id": 285741907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901940
    },
    {
        "content": "<p>you have a typo in your file</p>",
        "id": 285741921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654901960
    },
    {
        "content": "<p>Alright, it gave me the invocation - I think.</p>",
        "id": 285742023,
        "sender_full_name": "Aron",
        "timestamp": 1654902023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">6895646674</span><span class=\"n\">b04c0d7bcd085b4da3f7bb354ceaa9</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">atobi16</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-05-31/bin/lean ././Trying.lean -R ./. -o ./build/lib/Trying.olean -i ./build/lib/Trying.ilean```</span>\n</code></pre></div>",
        "id": 285742033,
        "sender_full_name": "Aron",
        "timestamp": 1654902038
    },
    {
        "content": "<p>Yeah, everything seems to be working okay.</p>",
        "id": 285742447,
        "sender_full_name": "Aron",
        "timestamp": 1654902386
    },
    {
        "content": "<p>do I have to do all of this every time I make a lean project?</p>",
        "id": 285742460,
        "sender_full_name": "Aron",
        "timestamp": 1654902404
    },
    {
        "content": "<p>I haven't been following the thread too closely but you can usually just run <code>lake new ProjectName</code>, edit the <code>lakefile.lean</code> in the new folder generated by the lake command to include Mathlib4 and you're good to go.</p>",
        "id": 285743544,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1654903386
    },
    {
        "content": "<p>In the worst case you might need to make sure that your <code>lean-toolchain</code> has a version that is compatible with Mathlib4 too, but that's it.</p>",
        "id": 285743621,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1654903452
    },
    {
        "content": "<p>Given the back and forth here, I am putting on my TODO listing adding different templates for <code>lake new</code>/<code>lake init</code>. The goal will be to make it so you just have to write <code>lake init Foo math</code> and get a Lake setup in your current directory that includes mathlib and builds  the module <code>Foo </code>without any additional hassle.</p>",
        "id": 285746174,
        "sender_full_name": "Mac",
        "timestamp": 1654906493
    }
]