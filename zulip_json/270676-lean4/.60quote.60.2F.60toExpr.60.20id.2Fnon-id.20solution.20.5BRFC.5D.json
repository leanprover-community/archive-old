[
    {
        "content": "<p>As pointed out earlier in <a href=\"#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236978085\">implementing '(x)</a>, <code>quote</code> and <code>toExpr</code> use <code>id</code> as their instances for <code>Syntax</code> and <code>Expr</code> respectively. This runs contrary to invariants one might expect from such classes (ex.,<code>$(quote x) = x</code> or <code>inferType (toExpr x) = toTypeExpr</code>). However, the Lean sources make use of the <code>id</code> behavior so removing it is out of the question (see <a href=\"#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236951821\">this response</a> of <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ).</p>\n<p>I propose a different solution: create two different sets of functions -- one which preserves the <code>id</code> behavior and one which preserves the desired invariants. I suggest the names <code>toSyntax</code>/<code>toExpr</code> for the <code>id</code> preserving versions and <code>quote</code>/<code>reflect</code> for invariant preserving versions.</p>\n<p>To define these functions, I propose using three sets of classes: <code>Quote</code>/<code>Reflect</code> to hold the common instances, <code>ToSyntax</code>/<code>ToExpr</code> for the <code>id</code> versions, and <code>QuoteAux</code>/<code>ReflectAux</code> for the invariant versions.</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Quote/ToSyntax</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quote</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">quote</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">QuoteAux</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">quote</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">QuoteAux</span> <span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">QuoteAux</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Syntax.quote</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Quote</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">QuoteAux</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i.quote</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ToSyntax</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toSyntax</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">ToSyntax</span> <span class=\"o\">(</span><span class=\"n\">toSyntax</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToSyntax</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Quote</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToSyntax</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i.quote</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Reflect/ToExpr</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Reflect</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">reflectType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ReflectAux</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">reflectType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">ReflectAux</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">reflectType</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ReflectAux</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Expr.reflect</span><span class=\"o\">,</span> <span class=\"n\">Expr.reflectType</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ReflectAux</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i.reflect</span><span class=\"o\">,</span> <span class=\"n\">i.reflectType</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ToExpr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toExpr</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">ToExpr</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">toTypeExpr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Expr</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i.reflect</span><span class=\"o\">,</span> <span class=\"n\">i.reflectType</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p><strong>What do people think of this solution?</strong></p>\n<p>In particular, I'm curious, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what you think of this proposal considering that you also found the current behavior problematic. I am also interested in whether <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> finds this to be a happy medium between the current <code>id</code> versions and the desired invariant preserving versions.</p>",
        "id": 239304078,
        "sender_full_name": "Mac",
        "timestamp": 1621363005
    },
    {
        "content": "<blockquote>\n<p>However, the Lean sources make use of the <code>id</code> behavior so removing it is out of the question.</p>\n</blockquote>\n<p>citation needed? During that discussion it came up that this instance is not in use</p>",
        "id": 239304247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363076
    },
    {
        "content": "<p>Right here: <a href=\"#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236951821\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236951821</a></p>",
        "id": 239304412,
        "sender_full_name": "Mac",
        "timestamp": 1621363123
    },
    {
        "content": "<p>I agree with Mario, code should explicitly write <code>id</code> instead of <code>toExpr</code> (the cited Zulip discussion concerns Syntax, not Expr).</p>",
        "id": 239304512,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363165
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236978322\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29/near/236978322</a></p>",
        "id": 239304684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363230
    },
    {
        "content": "<p>I think the Reflect type class should also have fields for the universe and type (like the ToExpr class does): <a href=\"https://github.com/gebner/quote4/blob/9530f186d2a2fce8f309cbe588e595cb989b98c6/Qq/Reflect.lean\">https://github.com/gebner/quote4/blob/9530f186d2a2fce8f309cbe588e595cb989b98c6/Qq/Reflect.lean</a></p>",
        "id": 239304742,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363246
    },
    {
        "content": "<p>I think that for <code>Quote Syntax</code> the behavior is also wrong, it's basically pretending to be antiquotation but that's going to have weird edge case behavior</p>",
        "id": 239304815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239304742\">said</a>:</p>\n<blockquote>\n<p>I think the Reflect type class should also have fields for the universe and type (like the ToExpr class does): <a href=\"https://github.com/gebner/quote4/blob/9530f186d2a2fce8f309cbe588e595cb989b98c6/Qq/Reflect.lean\">https://github.com/gebner/quote4/blob/9530f186d2a2fce8f309cbe588e595cb989b98c6/Qq/Reflect.lean</a></p>\n</blockquote>\n<p>Oops, yeah, missed that. I will fix that.</p>",
        "id": 239304886,
        "sender_full_name": "Mac",
        "timestamp": 1621363310
    },
    {
        "content": "<p>I consider my <code>toExpr</code> implementation superceded by Gabriel's <code>q(..)</code> macro btw</p>",
        "id": 239304896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363316
    },
    {
        "content": "<p>(can we get that merged into mathlib4 or should it be a dependent project?)</p>",
        "id": 239304977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363338
    },
    {
        "content": "<p>I'd say keep it a dependent project for now.  It's self-contained, and probably useful to non-mathlib users as well.  I'm happy to move it to the leanprover-community org though if you'd like.</p>",
        "id": 239305308,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363473
    },
    {
        "content": "<p>Of course, a lot of mathlib tactics will be in that boat too..</p>",
        "id": 239305437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239304512\">said</a>:</p>\n<blockquote>\n<p>I agree with Mario, code should explicitly write <code>id</code> instead of <code>toExpr</code> (the cited Zulip discussion concerns Syntax, not Expr).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239304815\">said</a>:</p>\n<blockquote>\n<p>I think that for <code>Quote Syntax</code> the behavior is also wrong, it's basically pretending to be antiquotation but that's going to have weird edge case behavior</p>\n</blockquote>\n<p><strong>I think the think <code>Expr</code> and <code>Syntax</code> versions of the quotation should be similar (they should behavior in a parallel manner).</strong> Since the Lean developers utilize the <code>id</code> behavior (per <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  post) for <code>Syntax</code>, there needs to be a class which has the <code>id</code> behavior for <code>Syntax</code>. Thus, to keep the two notions parallel, there should be an class with the <code>id</code> behavior for <code>Expr</code>, hence my proposal.</p>",
        "id": 239306455,
        "sender_full_name": "Mac",
        "timestamp": 1621363935
    },
    {
        "content": "<blockquote>\n<p>Since the Lean developers utilize the id behavior (per @Sebastian Ullrich post) for Syntax, there needs to be a class which has the id behavior for Syntax.</p>\n</blockquote>\n<p>Alternatively, find a way to solve the problems that they are using this instance for in another way, e.g. with antiquotations</p>",
        "id": 239306826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364077
    },
    {
        "content": "<p>Sure, but <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> seemed pretty happy with current definition, so I was trying to find a proposal that would retain that while still providing us with invariant-preserving versions.</p>",
        "id": 239307377,
        "sender_full_name": "Mac",
        "timestamp": 1621364285
    },
    {
        "content": "<p>You have marked this as [RFC] so I guess you want this in lean core. What advantage does this give over having your own invariant-preserving <code>Reflect</code> class?</p>",
        "id": 239307643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239307643\">said</a>:</p>\n<blockquote>\n<p>You have marked this as [RFC] so I guess you want this in lean core. What advantage does this give over having your own invariant-preserving <code>Reflect</code> class?</p>\n</blockquote>\n<p>Yes I do. By having this in core, these instances can be updated as Lean's representations change. For example, just yesterday a change was pushed that altered the representation of <code>SourceInfo</code> which would break any custom quotation instances built on it. Since this deals with a core part of  Lean and abstracts away implementation details I think it should be located in the core.</p>",
        "id": 239308506,
        "sender_full_name": "Mac",
        "timestamp": 1621364696
    },
    {
        "content": "<p>Especially since these classes already exist (essentially) in the core. The only area of debate is one particular instance.</p>",
        "id": 239308698,
        "sender_full_name": "Mac",
        "timestamp": 1621364771
    },
    {
        "content": "<blockquote>\n<p>By having this in core, these instances can be updated as Lean's representations change.</p>\n</blockquote>\n<p>That's just saying you want the lean devs to do maintenance work for you. Mathlib4 will also contain definitions / tactics / etc that need to be changed as lean core changes, but the maintenance burden is not on the lean devs. So maybe you should put it there instead.</p>",
        "id": 239309468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621365099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239304742\">said</a>:</p>\n<blockquote>\n<p>I think the Reflect type class should also have fields for the universe</p>\n</blockquote>\n<p>Also, I do think the addition of a field to reflect the universe is a good idea, but the current <code>ToExpr</code> does not have it. I think adding that should thus go in a separate proposal.</p>",
        "id": 239309835,
        "sender_full_name": "Mac",
        "timestamp": 1621365257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239309468\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>By having this in core, these instances can be updated as Lean's representations change.</p>\n</blockquote>\n<p>That's just saying you want the lean devs to do maintenance work for you.</p>\n</blockquote>\n<p>But they already <strong>have</strong> to do the maintenance work for me as these classes already (essentially) exist in core. Adding this would not significantly change the workload of the developers , but it would significantly reduce the maintenance work of the end-user.</p>",
        "id": 239310103,
        "sender_full_name": "Mac",
        "timestamp": 1621365374
    },
    {
        "content": "<blockquote>\n<p>But they already have to do the maintenance work for me as these classes already exist in core.</p>\n</blockquote>\n<p>No, that's maintenance work for them, because they have a different class that they are using for their own purposes. If you were proposing to <em>change</em> the existing class to have this new behavior I could understand why they would be invested in it, but this is just a new class that is not used by lean</p>",
        "id": 239310257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621365456
    },
    {
        "content": "<p>Not putting this core would just result in a lot of code duplication across various libraries <strong>and the Lean core</strong>.</p>",
        "id": 239310263,
        "sender_full_name": "Mac",
        "timestamp": 1621365459
    },
    {
        "content": "<p>You want both classes to exist in lean core, so this isn't decreasing code duplication</p>",
        "id": 239310385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621365499
    },
    {
        "content": "<p>My vote goes to the removal of the id-instances.  The diff is -5 +1, so it clearly improves maintainability:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/Init/Meta.lean b/src/Init/Meta.lean</span>\n<span class=\"gh\">index bad7c7f976..79b408f478 100644</span>\n<span class=\"gd\">--- a/src/Init/Meta.lean</span>\n<span class=\"gi\">+++ b/src/Init/Meta.lean</span>\n<span class=\"gu\">@@ -659,7 +659,6 @@ class Quote (α : Type) where</span>\n\n export Quote (quote)\n\n<span class=\"gd\">-instance : Quote Syntax := ⟨id⟩</span>\n instance : Quote Bool := ⟨fun | true =&gt; mkCIdent `Bool.true | false =&gt; mkCIdent `Bool.false⟩\n instance : Quote String := ⟨Syntax.mkStrLit⟩\n instance : Quote Nat := ⟨fun n =&gt; Syntax.mkNumLit &lt;| toString n⟩\n<span class=\"gh\">diff --git a/src/Lean/Elab/Quotation.lean b/src/Lean/Elab/Quotation.lean</span>\n<span class=\"gh\">index 9ece69df32..230eb9f988 100644</span>\n<span class=\"gd\">--- a/src/Lean/Elab/Quotation.lean</span>\n<span class=\"gi\">+++ b/src/Lean/Elab/Quotation.lean</span>\n<span class=\"gu\">@@ -106,7 +106,7 @@ private partial def quoteSyntax : Syntax → TermElabM Syntax</span>\n             throwErrorAt stx \"antiquotation splice must contain at least one antiquotation\"\n           let arr ← match k with\n             | `optional =&gt; `(match $[$ids:ident],* with\n<span class=\"gd\">-                | $[some $ids:ident],* =&gt; $(quote inner)</span>\n<span class=\"gi\">+                | $[some $ids:ident],* =&gt; #[$inner,*]</span>\n                 | none                 =&gt; Array.empty)\n             | _ =&gt;\n               let arr ← ids[:ids.size-1].foldrM (fun id arr =&gt; `(Array.zip $id $arr)) ids.back\n<span class=\"gh\">diff --git a/src/Lean/ToExpr.lean b/src/Lean/ToExpr.lean</span>\n<span class=\"gh\">index 0f56dc29d4..a596974b2f 100644</span>\n<span class=\"gd\">--- a/src/Lean/ToExpr.lean</span>\n<span class=\"gi\">+++ b/src/Lean/ToExpr.lean</span>\n<span class=\"gu\">@@ -14,10 +14,6 @@ class ToExpr (α : Type u) where</span>\n\n export ToExpr (toExpr toTypeExpr)\n\n<span class=\"gd\">-instance : ToExpr Expr where</span>\n<span class=\"gd\">-  toExpr     := id</span>\n<span class=\"gd\">-  toTypeExpr := mkConst ``Expr</span>\n<span class=\"gd\">-</span>\n instance : ToExpr Nat where\n   toExpr     := mkNatLit\n   toTypeExpr := mkConst ``Nat\n</code></pre></div>",
        "id": 239310485,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621365555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239310257\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But they already have to do the maintenance work for me as these classes already exist in core.</p>\n</blockquote>\n<p>No, that's maintenance work for them, because they have a different class that they are using for their own purposes. If you were proposing to <em>change</em> the existing class to have this new behavior I could understand why they would be invested in it, but this is just a new class that is not used by lean</p>\n</blockquote>\n<p>The common instances between the two (i.e. those in <code>Quote</code> in my proposal) are exactly the same as the are in the <code>Quote</code> in the Lean core, the only difference is in <code>QuoteAux</code>. That is, <code>Quote</code> + <code>ToSyntax</code> is exactly identical to the current representation in the Lean core (just split across two classes to support the definition of <code>QuoteAux</code>). The same is true for <code>Reflect</code> + <code>ToExpr</code>.</p>",
        "id": 239310615,
        "sender_full_name": "Mac",
        "timestamp": 1621365619
    },
    {
        "content": "<p>thanks for testing the change <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> . That does look promising</p>",
        "id": 239310766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621365693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239310485\">said</a>:</p>\n<blockquote>\n<p>My vote goes to the removal of the id-instances.  The diff is -5 +1, so it clearly improves maintainability:</p>\n</blockquote>\n<p>I mean sure, if <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is okay with this, I am all for it.</p>",
        "id": 239310963,
        "sender_full_name": "Mac",
        "timestamp": 1621365765
    },
    {
        "content": "<p>I would also like the addition of the invariant preserving instance, if possible, but this would certainly still be a significant improvement.</p>",
        "id": 239311100,
        "sender_full_name": "Mac",
        "timestamp": 1621365833
    },
    {
        "content": "<p>If there is no instance of <code>ToExpr Expr</code>, you can still add one yourself without having to redo all the other instances in a copy of the class</p>",
        "id": 239311205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621365869
    },
    {
        "content": "<p>true, hence my statement that \"his would certainly still be a significant improvement\". I would still very much like there to be <code>Syntax.quote</code> and <code>Expr.reflect</code> methods though for the invariant preserving quotations. But, yes, I can do that myself.</p>",
        "id": 239311456,
        "sender_full_name": "Mac",
        "timestamp": 1621365970
    },
    {
        "content": "<p>Well, this is what std++ libraries like mathlib4 are intended for</p>",
        "id": 239311677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621366075
    },
    {
        "content": "<p>To me, it makes no sense for a metaprogramming language such as Lean to not have reflection for all its compatible core types (especially since it already partially has them). It greatly reduces code duplication and maintenance on the part of end-users to have the instances defined with there corresponding definitions. </p>\n<p>Honestly, it would be desirable to have <code>deriving</code> support for them (which, despite being a large undertaking initially, would possible reduce the maintenance burden in the long run). I do realize though, this is not currently a priority for the Lean developers.  The only reason I suggested it is because the Lean developers recently added support for generating injectivity theorems, so I think this could eventual be a useful solution.</p>",
        "id": 239312231,
        "sender_full_name": "Mac",
        "timestamp": 1621366282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239311677\">said</a>:</p>\n<blockquote>\n<p>Well, this is what std++ libraries like mathlib4 are intended for</p>\n</blockquote>\n<p>I still find it rather concerning that <strong>math</strong>lib is considered the std++ library for Lean. First, it seems like it should be focused on <strong>math</strong>, not augmenting the metaprogramming capabilities of Lean (and other such std++ stuff). Second, in general, std++ libraries tend to get rolled in to the core of language (see C++, Haskell,  JavaScript, etc.) for precisely the reason above (to reduce code duplication across dozens of different libraries and hundreds/thousands of applications).</p>",
        "id": 239312637,
        "sender_full_name": "Mac",
        "timestamp": 1621366423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239312231\">said</a>:</p>\n<blockquote>\n<p>To me, t makes no sense for a metaprogramming language such as Lean to not have reflection for all its compatible core types (especially since it already partially has them). It greatly reduces code duplication and maintenance on the part of end-users to have the instances defined with there corresponding definitions. In fact, honestly, there should be <code>deriving</code> support for them.</p>\n</blockquote>\n<p>I don't disagree with you, but we have to be very careful not to put too much work on the very small lean dev team. Please collect \"stuff that probably should be in lean core but isn't\" elsewhere if it's not essential to the functionality of something already in lean core. I recommend using the <a href=\"https://github.com/leanprover-community/mathlib4/\">mathlib4</a> library for this because it is the only library currently planning to take on this maintenance burden.<br>\n<span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239312637\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239311677\">said</a>:</p>\n<blockquote>\n<p>Well, this is what std++ libraries like mathlib4 are intended for</p>\n</blockquote>\n<p>I still find it rather concerning that <strong>math</strong>lib is considered the std++ library for Lean. First, it seems like it should be focused on <strong>math</strong>, not augmenting the metaprogramming capabilities of Lean.</p>\n</blockquote>\n<p>FYI: I was opposed to the name \"mathlib\" originally, I called it \"stdlib\" but leo changed this during the initial split from lean 3. In any case it has never only been about math, but the branding had the effect you are indicating, and at this point it's too late to change the name.</p>\n<blockquote>\n<p>Second, in general, std++ libraries tend to get rolled in to the core of language (see Lean, Haskell, etc.) for precisely the reason above (to reduce code duplication across dozens of different libraries and hundreds/thousands of applications).</p>\n</blockquote>\n<p>Unfortunately the way lean development works does not currently permit this state of affairs. All external (to the lean dev team) work on lean is currently concentrated in the \"leanprover-community\" organization, and right now the focus is on building up mathlib4 as the place to go for std++ stuff. Maybe someday we can get closer to the model you are talking about, but lean 4 is not that kind of open source.</p>",
        "id": 239313689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621366862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I think you should have a look at <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Community.20Guidelines</a> because I fear there is a risk you're moving in the wrong direction.</p>",
        "id": 239314344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621367170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239313689\">said</a>:</p>\n<blockquote>\n<p>All external (to the lean dev team) work on lean is currently concentrated in the \"leanprover-community\" organization, and right now the focus is on building up mathlib4 as the place to go for std++ stuff. Maybe someday we can get closer to the model you are talking about, but lean 4 is not that kind of open source.</p>\n</blockquote>\n<p>I feel like this is directly opposed to the stated goal of making Lean 4 a general purpose programming language. I highly doubt anyone is going to think of it that way if the \"stdlib\" of the library is called \"mathlib\" and the vast majority of  the discussion on the forums is from people deep in mathematics. This doesn't really both me as computer scientist also heavily interested in mathematical theory. However, this is certainly not true of a lot of modern computer scientists, some of whom stay as far away from pure math as possible, but still, I believe, would find Lean useful. Thus, I think that segment out the core programming/metaprogramming additions into a separate library (that mathlib probably depends on) would greatly help move Lean's image in that direction.</p>\n<p>I do agree that throwing a lot of what would be a in normal \"corelib\" is a no go  given the current development cycle of Lean. I also don't think that is bad thing. I think the small dev team actually makes the language much more focused and refined than a lot of others (like Haskell and C++).  I think that is what drew me to it. However, I do feel this proposal is a bit of a special case since virtually all the pieces are virtually there. </p>\n<p>I am also perfectly content with <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> solution. This is mostly a statement of a wish.</p>",
        "id": 239315530,
        "sender_full_name": "Mac",
        "timestamp": 1621367684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239314344\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> I think you should have a look at <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Community.20Guidelines</a> because I fear there is a risk you're moving in the wrong direction.</p>\n</blockquote>\n<p>I'm sorry, but I really don't see what you are getting at here.</p>",
        "id": 239315911,
        "sender_full_name": "Mac",
        "timestamp": 1621367832
    },
    {
        "content": "<p>Maybe you could read the guide lines more carefully and then read again:<br>\n<span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239312231\">said</a>:</p>\n<blockquote>\n<p>To me, it makes no sense for a metaprogramming language such as Lean to not have reflection for all its compatible core types (especially since it already partially has them). It greatly reduces code duplication and maintenance on the part of end-users to have the instances defined with there corresponding definitions. In fact, honestly, there should be <code>deriving</code> support for them.</p>\n</blockquote>",
        "id": 239316851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621368186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239316851\">said</a>:</p>\n<blockquote>\n<p>Maybe you could read the guide lines more carefully</p>\n</blockquote>\n<p>I think the key phrase there is <strong>\"To me\"</strong>, but I did revise it to better explain my intent. I would like, though, to gently suggest that you seem to have a very specific interpretation of the guidelines and it might be wise to think about whether you are following that in the way you critize others. Graciousness and humility is a two-way street.</p>",
        "id": 239317699,
        "sender_full_name": "Mac",
        "timestamp": 1621368492
    },
    {
        "content": "<blockquote>\n<p>I feel like this is directly opposed to the stated goal of making Lean 4 a general purpose programming language. I highly doubt anyone is going to think of it that way if the \"stdlib\" of the library is called \"mathlib\" and the vast majority of the discussion on the forums is from people deep in mathematics. </p>\n</blockquote>\n<p>I don't think it's a bad thing that lots of mathematicians are involved. It's sad that there aren't more computer scientists, but there are at least a dozen people who are relatively active here and quite good at writing metaprogramming tools for mathlib or otherwise. But I don't think that the number of people involved has anything to do with the stated focus of the (mathlib) project. It's certainly not anything I have any control over, so I don't worry about it so much. As you say, lean 4 is more focused on being a general purpose programming language, but it's already quite clear that it will not have a large built in standard library, there just isn't the manpower, so having a good std++ library is more important than ever.</p>",
        "id": 239317769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239317769\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a bad thing that lots of mathematicians are involved.</p>\n</blockquote>\n<p>Sorry, It wasn't my intent to criticize that. As I said, I quite enjoy many of the deep math discussions here (and by \"on the forums\" I meant here on Zullip). I have no qualms with the people involved. I just think it may help to also have computer science targeted std++ as well. I am not saying this should be part of the Lean core, but that there should be some sore of a separate package from mathlib that incorporates the more general additions and targets a more general audience.</p>",
        "id": 239318245,
        "sender_full_name": "Mac",
        "timestamp": 1621368736
    },
    {
        "content": "<blockquote>\n<p>I just think it may help to also have computer science targeted std++ as well.</p>\n</blockquote>\n<p>I don't know how to put this any more plainly: <em>mathlib is a computer science targeted std++ library</em>. It is other things too.</p>",
        "id": 239318338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368778
    },
    {
        "content": "<p>yeah the name's weird, please look past it</p>",
        "id": 239318449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368830
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib\">#mathlib4 &gt; treating mathlib as a stdlib</a></p>",
        "id": 239322341,
        "sender_full_name": "Notification Bot",
        "timestamp": 1621370460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239317699\">said</a>:</p>\n<blockquote>\n<p>I think the key phrase there is <strong>\"To me\"</strong>, but I did revise it to better explain my intent. I would like, though, to gently suggest that you seem to have a very specific interpretation of the guidelines and it might be wise to think about whether you are following that in the way you critize others. Graciousness and humility is a two-way street.</p>\n</blockquote>\n<p>My message \"I fear there is a risk you're moving in the wrong direction\" was my best effort at being extremely gracious, given the circumstances.</p>",
        "id": 239330835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621374332
    },
    {
        "content": "<p>I'd like to weigh in on this. <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> the kind of thing you are proposing is exactly the kind of small library we would love to see come to life.</p>\n<p>Your proposal looks self-contained and small. The most logical option for me would be a tiny separate library.</p>\n<p>There are tons of missing features in the compiler. E.g. Look at Haskell's or F#'s List modules and you won't find zip3 or nth in Lean.</p>\n<p>I've had this conversation with <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> repeatedly.</p>\n<p>The reality for lean4 as of right now is, that we have a set of priorities due to our own stakeholders which you can roughly see in the projects tab in github and we very few core developers.</p>\n<p>Like every normal agile project we need to work on high-prio items first. And given the tiny core team even reviewing PRs is taking a toll on the amount of resources we have to drive things forward. To help communicate we have created various tags like the <code>help wanted</code>, <code>PR not welcome</code>or <code>no plans to address</code>.</p>\n<p>There are at least two different kinds of features that are very hard to get into core but would be great candidates for tiny self-contained libraries:</p>\n<ul>\n<li>stuff that we just should have but won't ever bubble up the priority stack enough, like <code>zip3</code>, <code>nth</code> and pretty much everything in your typical Haskell or F# libraries.</li>\n<li>stuff that's related to, but exactly identical to lean4 core functionality like your quotation effort. These are hard to review and don't contribute towards the priorities we are committed to deliver.</li>\n</ul>\n<p>The best solution for now, and potentially also long term, as it's good for the eco system, is building small self-contained libraries.</p>\n<p>On the other hand we are commited to making lean4 great for metaprogramming and extensibility. So if you do come across stuff that you think blocks you from implementing stuff in your library, please reach out and we'll see what the gaps are and how we can help.</p>",
        "id": 239386817,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621413517
    },
    {
        "content": "<p>Understood. Thanks for the explanation! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239387543,
        "sender_full_name": "Mac",
        "timestamp": 1621413916
    }
]