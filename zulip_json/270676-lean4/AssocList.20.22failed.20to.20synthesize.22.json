[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">List.toAssocList</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize Lean.Eval (Std.AssocList Nat Nat)</span>\n</code></pre></div>\n<p>possible bug?</p>",
        "id": 222194247,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1610233740
    },
    {
        "content": "<p>I would guess that <code>Lean.Eval</code> means something like lean 3's <code>has_repr</code>, a way to print the resulting data structure</p>",
        "id": 222194443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610234143
    },
    {
        "content": "<p>In other words, while lean can compute the AssocList, it doesn't know how to show the result</p>",
        "id": 222194499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610234216
    },
    {
        "content": "<p>This was a fun little exercise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Std.AssocList.ToList</span> <span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AssocList.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AssocList.cons</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">ToList</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">repr</span> <span class=\"n\">f.ToList</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">l.toAssocList</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 222196539,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610237465
    },
    {
        "content": "<p>Thanks! I'm coming from Coq so my knowledge of Lean 3 is limited :) Is there a way to just see the fully reduced term? I tried <code>#reduce</code> (in Lean 4) but in this example it gives me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Std.AssocList.cons</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n  <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span>\n          <span class=\"n\">List.rec</span>\n            <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span>\n                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n                      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.nil</span>\n                      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">es</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x.fst.fst</span><span class=\"o\">)</span>\n                      <span class=\"n\">f</span><span class=\"o\">)</span>\n                  <span class=\"o\">[]</span> <span class=\"n\">PUnit.unit</span><span class=\"o\">,</span>\n              <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">v_0</span> <span class=\"o\">:</span> <span class=\"n\">PProd</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.below</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n                        <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.nil</span>\n                        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List.below</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">es</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x.fst.fst</span><span class=\"o\">)</span>\n                        <span class=\"n\">f</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">v_0</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">},</span>\n                <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">v_0</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n            <span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)],</span>\n        <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst.fst</span>\n</code></pre></div>\n<p>instead of the expected <code>cons 1 1 (cons 2 2 nil)</code></p>",
        "id": 222196602,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1610237596
    },
    {
        "content": "<p>hmm, <code>#reduce</code> fully reduces this in Lean 3</p>",
        "id": 222196657,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1610237695
    },
    {
        "content": "<p>It appears that lean 4 <code>#reduce</code> isn't actually full reduction, it is just doing whnf</p>",
        "id": 222219664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610280881
    },
    {
        "content": "<p>if you peel off the top level constructor it will continue to make progress</p>",
        "id": 222219672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610280909
    }
]