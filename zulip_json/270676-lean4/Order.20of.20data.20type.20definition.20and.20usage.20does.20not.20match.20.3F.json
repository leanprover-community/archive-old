[
    {
        "content": "<p>I believe I make some mistakes or I'm stupid but I've been struggling porting StackMachine example of CPDT. The code below is mostly direct translation of Coq to Lean4 but the code does not work as I expect.<br>\n(A) is what I think the expected code but it doesn't compile but (B) does. What am I missing?<br>\nI think argument order of (X) and (A) should match.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Bool.beq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NAT</span>  <span class=\"o\">:</span> <span class=\"n\">type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BOOL</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tbinop</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">TPlus</span> <span class=\"o\">:</span> <span class=\"n\">tbinop</span> <span class=\"n\">NAT</span> <span class=\"n\">NAT</span> <span class=\"n\">NAT</span>\n<span class=\"bp\">|</span> <span class=\"n\">TEq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">),</span> <span class=\"n\">tbinop</span> <span class=\"n\">t</span> <span class=\"n\">t</span> <span class=\"n\">BOOL</span>\n<span class=\"kn\">open</span> <span class=\"n\">tbinop</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">texp</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">TNConst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">texp</span> <span class=\"n\">NAT</span>\n<span class=\"bp\">|</span> <span class=\"n\">TBConst</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">texp</span> <span class=\"n\">BOOL</span>\n<span class=\"bp\">|</span> <span class=\"n\">TBinop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">),</span> <span class=\"n\">tbinop</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">texp</span> <span class=\"n\">t1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">texp</span> <span class=\"n\">t2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">texp</span> <span class=\"n\">t</span> <span class=\"c1\">-- (X)</span>\n<span class=\"c1\">--           ^^ ^^ ^  t1 and t2 are input. t is result.</span>\n<span class=\"kn\">open</span> <span class=\"n\">texp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typeDenote</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">BOOL</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">NAT</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tbinopDenote</span> <span class=\"n\">arg1</span> <span class=\"n\">arg2</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tbinop</span> <span class=\"n\">arg1</span> <span class=\"n\">arg2</span> <span class=\"n\">res</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">typeDenote</span> <span class=\"n\">arg1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typeDenote</span> <span class=\"n\">arg2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typeDenote</span> <span class=\"n\">res</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TPlus</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.add</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TEq</span> <span class=\"n\">NAT</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.beq</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TEq</span> <span class=\"n\">BOOL</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.beq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">texpDenote</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">texp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">typeDenote</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TNConst</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TBConst</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"c1\">--    | TBinop t1 t2 t b e1 e2 =&gt; (tbinopDenote t1 t2 t b) (texpDenote  e1) (texpDenote e2) -- (A)</span>\n<span class=\"c1\">--             ^^ ^^ ^</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TBinop</span>   <span class=\"n\">t</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">tbinopDenote</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">texpDenote</span>  <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">texpDenote</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"c1\">-- (B)</span>\n<span class=\"c1\">--             ^ ^^ ^^</span>\n</code></pre></div>",
        "id": 282433204,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1652655272
    },
    {
        "content": "<p>Yes, I can confirm this is weird / probably a bug</p>",
        "id": 282435108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652657979
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Foo.mk</span>\n<span class=\"c1\">-- Foo.mk : (b a : Nat) → Foo a → Foo b</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Foo.mk</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 282435242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652658156
    },
    {
        "content": "<p>Thank you for your confirmation. I'm glad to hear that because I'm very confused about it for a while.<br>\nI tried to minimize my example but I could not find one. I'm impressed with your simple example.</p>",
        "id": 282443556,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1652669616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <br>\nMay I request you to take a look at this topic? If raising a ticket is better, let me know about ti. I'll raise a ticket on github.</p>",
        "id": 282715988,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1652826772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481687\">@Yasu Watanabe</span> Thanks for pinging me. I am a bit busy with two presentations, but I will take a look as soon as I have time. Please go ahead and create an issue on GitHub, it will make sure we do not forget this issue.</p>",
        "id": 282718925,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652828880
    }
]