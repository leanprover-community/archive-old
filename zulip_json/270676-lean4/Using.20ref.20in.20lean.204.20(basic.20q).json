[
    {
        "content": "<p>What's the analogue of Lean 3's <code>tactic.ref</code> in Lean 4? I looked in the analogous spot, but couldn't find it. (Also, whatever the analogue is, how should I then actually import/open the relevant files to use it?)</p>",
        "id": 304572818,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666046487
    },
    {
        "content": "<p>Several possiblities.</p>\n<ul>\n<li>If you wish to have local mutability use the <code>let mut</code> keyword in do notation</li>\n<li>If you wish to have monadic stuff (that is mutable variables shared across fucntion calls) you can start building your own monad stack with <code>StateRefT</code> or the underlying <code>ST</code> monad. </li>\n<li>You can also go very funky and use a global IO.Ref for example although this is most likely not what you want to do</li>\n</ul>",
        "id": 304575021,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666047249
    },
    {
        "content": "<p>The direct analogue of <code>tactic.ref</code> is <code>IO.Ref</code></p>",
        "id": 304575749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666047527
    },
    {
        "content": "<p>and you don't have to import anything, it's already in <code>Init</code></p>",
        "id": 304575814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666047563
    },
    {
        "content": "<p>oh, ok! so does it make sense to use <code>IO.Ref</code> in <code>tauto</code> just as a drop-in replacement for <code>ref</code>? it’s not clear to me that IO is actually happening there, unless it’s managed internally or something… (Or would it make more sense to use a <code>StateRefT</code> type of deal there?)</p>",
        "id": 304580153,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666049452
    },
    {
        "content": "<p>I think it's fine to use IO.Ref if you want to keep the structure of the original code</p>",
        "id": 304581364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666050048
    },
    {
        "content": "<p>StateRefT is basically the same thing, it uses ST.Ref instead of IO.Ref but there isn't much difference between these except the API</p>",
        "id": 304581431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666050079
    },
    {
        "content": "<blockquote>\n<p>The direct analogue of <code>tactic.ref</code> is <code>IO.Ref</code></p>\n</blockquote>\n<p>This is not really true: the Lean 3 <code>tactic.ref</code> is reset when backtracking (it is stored in the tactic state), while the Lean 4 <code>IO.Ref</code> is an actual reference that exists independently of the tactic state (and thus won't be reset when backtracking).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"n\">using_new_ref</span> <span class=\"mi\">42</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">write_ref</span> <span class=\"n\">r</span> <span class=\"mi\">10</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">read_ref</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- prints 42</span>\n</code></pre></div>",
        "id": 304583170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666051031
    },
    {
        "content": "<p>ah yeah, I ran into that issue when implementing <code>squeeze_scope</code>. I don't think there is any real analogue of <code>tactic.ref</code> that gets reset along with the tactic state</p>",
        "id": 304583902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666051392
    },
    {
        "content": "<p>An environment extension maybe?</p>",
        "id": 304622242,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1666077115
    },
    {
        "content": "<p>That will probably work, but it also clutters up the olean file</p>",
        "id": 304622992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666077467
    },
    {
        "content": "<p>Aren't normal extensions local to the current file unlike the persistent ones?</p>",
        "id": 304624746,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1666078370
    },
    {
        "content": "<p><em>should</em> there be a direct analogue of <code>tactic.ref</code>? (I mean I’m guessing it’s above my pay grade right now, so to speak, and it’s probably not strictly necessary for <code>tauto</code>, but I’m still curious what it would take to code it up lean 4…being reset when backtracking in tactics seems useful)</p>",
        "id": 304799145,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666113380
    },
    {
        "content": "<p>I'd rather avoid it, and explicitly use <code>StateT α TacticM</code> instead (if you want a backtrackable state of type <code>α</code>).</p>",
        "id": 304803059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666114505
    },
    {
        "content": "<p>ah, ok. I’m guessing this is the “build your own monad stack with <code>StateRefT</code>” strategy mentioned by <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> ? (Asking because I’m trying to figure out what the difference between using <code>StateRefT</code> vs. <code>StateT</code> is in this context; might be apparent as soon as I open the metaprogramming book, though… :) )</p>",
        "id": 304804203,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666114856
    },
    {
        "content": "<p>They behave equivalently to the user but one is a classic state monad pulling the state through as argument and return value while the other stores it as a real reference that gets mutated</p>",
        "id": 304805328,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666115235
    },
    {
        "content": "<p>They do <em>not</em> behave equivalently.  It's kind of the same difference as between <code>tactic.ref</code> and <code>IO.Ref</code>.</p>\n<ul>\n<li><code>StateT</code> does backtracking</li>\n<li><code>StateRefT</code> does not</li>\n</ul>",
        "id": 304809248,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666116515
    },
    {
        "content": "<p>Are there efficiency differences between using <code>StateT</code> and <code>StateRefT</code>/<code>IO.ref</code>? If I'm going to be managing a big state, I can imagine it might be better to use a reference instead of passing the whole state around. Then I would just try to work around the non-backtrackability. But I can also imagine that maybe, say, the internals of <code>StateT</code> make it just as efficient as using a reference.</p>",
        "id": 305209199,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666289430
    },
    {
        "content": "<p>StateRefT is generally speaking better if your monad stack allows for it.</p>",
        "id": 305209296,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666289467
    }
]