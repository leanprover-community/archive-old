[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"k\">then</span>\n    <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n              <span class=\"n\">revert</span> <span class=\"n\">h‚ÇÄ</span>\n              <span class=\"n\">revert</span> <span class=\"n\">h‚ÇÅ</span>\n              <span class=\"n\">apply</span> <span class=\"n\">le.trans_lt'</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 310359910,
        "sender_full_name": "üëÄÔºü",
        "timestamp": 1668587700
    },
    {
        "content": "<p>What's your question?</p>",
        "id": 310365090,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668589963
    },
    {
        "content": "<p>contradictory conditions, but do not report borrowing.</p>",
        "id": 310365363,
        "sender_full_name": "üëÄÔºü",
        "timestamp": 1668590086
    },
    {
        "content": "<p>What do you think the error is here? I'm assuming the code compiles and it looks ok to me. What you're doing is weird but I see no logical problem with it</p>",
        "id": 310366451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668590468
    },
    {
        "content": "<p>How to get lean to warn at h‚ÇÄ</p>",
        "id": 310366617,
        "sender_full_name": "üëÄÔºü",
        "timestamp": 1668590532
    },
    {
        "content": "<p>This conditional branch is not possible to execute</p>",
        "id": 310366893,
        "sender_full_name": "üëÄÔºü",
        "timestamp": 1668590654
    },
    {
        "content": "<p>Lean won't know that it is impossible without you proving it first.</p>",
        "id": 310367230,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668590799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Prove it in this way?</p>",
        "id": 310368153,
        "sender_full_name": "üëÄÔºü",
        "timestamp": 1668591141
    },
    {
        "content": "<p>That gives an error since <code>bar</code> takes two arguments</p>",
        "id": 310368605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668591272
    },
    {
        "content": "<p>If you have a proof of false (<code>h : false</code>) in a conditional branch / goal, you can close the branch / goal by casing on <code>h</code> (or applying <code>h.elim</code> if it works in Lean4).</p>",
        "id": 310368669,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668591297
    },
    {
        "content": "<p>Here is a working example of the code so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"k\">then</span>\n    <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Nat.le.step</span> <span class=\"n\">h‚ÇÄ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bar</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">rename_i</span> <span class=\"n\">h'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">False.elim</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 310369052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668591459
    },
    {
        "content": "<p>I had to change the <code>example</code> to prove <code>bar x h = 0</code> since <code>bar x h = x</code> isn't true.</p>",
        "id": 310369090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668591478
    },
    {
        "content": "<p>Lean won't do analysis for you that cases certain cases are impossible, if this is what you're asking about.</p>",
        "id": 310369305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668591540
    },
    {
        "content": "<p>Another way to write <code>bar</code> is to use <code>False.elim</code> to essentially tell Lean the case can't happen.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"k\">then</span>\n    <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h‚ÇÄ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bar</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">¬∑</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ‚ä¢ False.elim (_ : False) = 0</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm not sure the best way to fill in this <code>sorry</code> though... The term has a proof of <code>False</code> in it, so there's probably some good lemma or tactic for this somewhere.</p>",
        "id": 310370039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668591804
    },
    {
        "content": "<p>There's generalize_proofs in mathlib, and it seems like it is already ported into mathlib 4.</p>",
        "id": 310370382,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668591918
    },
    {
        "content": "<p>Rather than using <code>split</code>, I would just prove that <code>not (x &lt; 4)</code> and simp with it</p>",
        "id": 310374438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668593403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> </p>\n<blockquote>\n<p>I'm not sure the best way to fill in this sorry though... The term has a proof of False in it, so there's probably some good lemma or tactic for this somewhere.</p>\n</blockquote>\n<p>You can use <code>contradiction</code>.</p>",
        "id": 310445795,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1668615343
    },
    {
        "content": "<p>Ah, great, thanks! (For the curious, <a href=\"https://github.com/leanprover/lean4/blob/1de142a20b5e8a51f5ec35846a6f661e007a5ac3/src/Lean/Meta/Tactic/Contradiction.lean#L26\">where it searches for False.elim in the target</a>)</p>",
        "id": 310447674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668615908
    }
]