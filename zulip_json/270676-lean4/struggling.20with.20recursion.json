[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Entry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">NULL</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.null</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Int</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.int</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.str</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Float</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.float</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.float</span> <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Entry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toString'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Entry.str</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"'{e}'\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Entry.int</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Entry.float</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Entry.null</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"NULL\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.toString'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Entry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Entry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Row</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toStrings</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Row</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"n\">r.map</span> <span class=\"n\">Entry.toString'</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Row</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({\"</span><span class=\"o\">,</span><span class=\"s2\">\".intercalate (r.toStrings)})\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Row</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Column</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Column</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Column</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c.name} {c.type}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Column</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TableScheme</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Column</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TableScheme</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">TableScheme</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({\"</span><span class=\"o\">,</span><span class=\"s2\">\".intercalate (ts.map Î» v =&gt; v.build)})\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TableScheme</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Col</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Col</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.toString</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Col</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">inductive</span> <span class=\"n\">ColProp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EqE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NeqE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LeE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GeE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EqC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NeqC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LeC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GeC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cp'</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cp'</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" = \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.EqE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â  \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.NeqE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â¤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.LeE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.LE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â¥ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.GeE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.GE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" = \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.EqC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â  \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.NeqC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â¤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.LeC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.LC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" â¥ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.GeC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.GC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" â§ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.And</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" â¨ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.Or</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ColProp</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">cp</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.EqE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}={e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.NeqE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â {e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.LeE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â¤{e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.LE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}&lt;{e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.GeE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â¥{e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.GE</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}&gt;{e}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.EqC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}={c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.NeqC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â {c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.LeC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â¤{c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.LC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}&lt;{c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.GeC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}â¥{c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.GC</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}&gt;{c'}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.And</span> <span class=\"n\">cp</span> <span class=\"n\">cp'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({toString cp}) and ({toString cp'})\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColProp.Or</span> <span class=\"n\">cp</span> <span class=\"n\">cp'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({toString cp}) or ({toString cp'})\"</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">ColProp</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">cp</span> <span class=\"o\">:=</span> <span class=\"n\">cp.toString</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ColProp</span>\n\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Query</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span>\n  <span class=\"kn\">private</span> <span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n    <span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">how</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">table</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span> <span class=\"o\">â¨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">[]â©</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Query</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">â</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">name</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">â</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">steps</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">steps</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Query</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">â¨</span><span class=\"n\">q.name</span><span class=\"o\">,</span> <span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.select</span> <span class=\"n\">l</span><span class=\"o\">)â©</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">â¨</span><span class=\"n\">q.name</span><span class=\"o\">,</span> <span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.filter</span> <span class=\"n\">cp</span><span class=\"o\">)â©</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">how</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">â¨</span><span class=\"n\">q.name</span><span class=\"o\">,</span> <span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.join</span> <span class=\"n\">q'</span> <span class=\"n\">on</span> <span class=\"n\">how</span><span class=\"o\">)â©</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">transform</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">â</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"â \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">transform</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">structure</span> <span class=\"n\">SQL</span> <span class=\"n\">where</span>\n  <span class=\"n\">Select</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n  <span class=\"n\">From</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">Where</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">As</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SQL</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SQL</span> <span class=\"o\">:=</span>\n<span class=\"o\">â¨[],</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"s2\">\"true\"</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">â©</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">SQL</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">select</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">b.Select</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"s2\">\"*\"</span> <span class=\"k\">else</span> <span class=\"s2\">\",\"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"n\">b.Select</span>\n<span class=\"k\">if</span> <span class=\"n\">b.As</span> <span class=\"bp\">=</span> <span class=\"s2\">\"\"</span> <span class=\"k\">then</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"select {select} from {b.From} where {b.Where}\"</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(select {select} from {b.From} where {b.Where}) as {b.As}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SQL</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">applyStep</span> <span class=\"o\">(</span><span class=\"n\">sql</span> <span class=\"o\">:</span> <span class=\"n\">SQL</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SQL</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">step</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">QueryStep.select</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">newList</span> <span class=\"o\">:=</span> <span class=\"n\">l.map</span> <span class=\"n\">Col.toString</span>\n  <span class=\"k\">if</span> <span class=\"n\">sql.Select</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"o\">â¨</span><span class=\"n\">newList</span><span class=\"o\">,</span> <span class=\"n\">sql.From</span><span class=\"o\">,</span> <span class=\"n\">sql.Where</span><span class=\"o\">,</span> <span class=\"n\">sql.As</span><span class=\"o\">â©</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">â¨</span><span class=\"n\">sql.Select.filter</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">newList.contains</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">sql.From</span><span class=\"o\">,</span> <span class=\"n\">sql.Where</span><span class=\"o\">,</span> <span class=\"n\">sql.As</span><span class=\"o\">â©</span>\n<span class=\"bp\">|</span> <span class=\"n\">QueryStep.filter</span> <span class=\"n\">cp</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">â¨</span><span class=\"n\">sql.Select</span><span class=\"o\">,</span> <span class=\"n\">sql.From</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{sql.Where} and ({cp})\"</span><span class=\"o\">,</span> <span class=\"n\">sql.As</span><span class=\"o\">â©</span>\n<span class=\"bp\">|</span> <span class=\"n\">QueryStep.join</span> <span class=\"n\">q</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">newSQL</span> <span class=\"o\">:</span> <span class=\"n\">SQL</span> <span class=\"o\">:=</span> <span class=\"n\">q.steps.foldl</span> <span class=\"n\">applyStep</span> <span class=\"o\">(</span><span class=\"n\">SQL.init</span> <span class=\"n\">q.name</span> <span class=\"n\">q.name</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">newFrom</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{sql.From} {how} join {newSQL.toString} on {on}\"</span>\n  <span class=\"o\">â¨</span><span class=\"n\">sql.Select</span><span class=\"o\">,</span> <span class=\"n\">newFrom</span><span class=\"o\">,</span> <span class=\"n\">sql.Where</span><span class=\"o\">,</span> <span class=\"n\">sql.As</span><span class=\"o\">â©</span>\n<span class=\"n\">termination_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Sorry for the long MWE! My difficulty is on the definition of the last function: <code>applyStep</code>. The problem arises when I try to use <code>newFrom</code> in the output of the function. It says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">_private.0.applyStep'</span>\n</code></pre></div>",
        "id": 263049841,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638210908
    },
    {
        "content": "<p>I already get errors on <code>private def toString</code>, because it's noncomputable.</p>",
        "id": 263051289,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211623
    },
    {
        "content": "<p>How come? Here it computes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">SQL.toString</span> <span class=\"o\">â¨[</span><span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c2\"</span><span class=\"o\">],</span> <span class=\"s2\">\"table1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c1&gt;1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">â©</span>\n<span class=\"c1\">-- \"select c1,c2 from table1 where c1&gt;1\"</span>\n</code></pre></div>",
        "id": 263052086,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638211902
    },
    {
        "content": "<p>Ah sorry, I had some other code in the same file.</p>",
        "id": 263052187,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211950
    },
    {
        "content": "<p>Note that declaring the function as <code>partial</code> or <code>unsafe</code> removes the error.<br>\nYou might not like this fix if you intend to also prove things about your functions</p>",
        "id": 263052441,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638212081
    },
    {
        "content": "<p>Totally fine at the moment. Thanks!!</p>",
        "id": 263052726,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638212244
    },
    {
        "content": "<p>Hmm, so I thought it might be the <code>sorry</code>. But adding <code>axiom hf : False</code> and <code>termination_by False.elim hf</code> has the same issue.</p>",
        "id": 263052760,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638212264
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263052830,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638212288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> why are so many of the definitions/constants <code>private</code>?</p>",
        "id": 263053145,
        "sender_full_name": "Mac",
        "timestamp": 1638212430
    },
    {
        "content": "<p>A lot of these functions seem like they should not be (for example, the various <code>toString</code> functions).</p>",
        "id": 263053184,
        "sender_full_name": "Mac",
        "timestamp": 1638212461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263053145\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> why are so many of the definitions/constants <code>private</code>?</p>\n</blockquote>\n<p>For <code>constant</code>, I'm just copying what I've seen in other implementations that rely on FFI. I don't understand why just yet. For <code>private</code>, I'm trying to hide implementation details from the API user</p>",
        "id": 263053299,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638212514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> that is not really what <code>private</code> is for. Lean makes it very hard to interact with things marked <code>private</code>, which, in Lean, you generally want to do (e.g., for proofs). Things should really only be marked <code>private</code> if they are part of an already opaque definition (e.g., a <code>partia</code> or <code>unsafe</code> <code>def</code>) and simply serve as some form of auxiliary utility function.</p>",
        "id": 263053832,
        "sender_full_name": "Mac",
        "timestamp": 1638212768
    },
    {
        "content": "<p>Nothing in your MWE looks like something that should be marked <code>private</code>.</p>",
        "id": 263053919,
        "sender_full_name": "Mac",
        "timestamp": 1638212806
    },
    {
        "content": "<p>also why are <code>toString'</code>  functions not named  just <code>toString</code>?</p>",
        "id": 263054041,
        "sender_full_name": "Mac",
        "timestamp": 1638212876
    },
    {
        "content": "<p>I am guessing because the <code>toString</code> in the body then clashes with the name, in which case they should be marked <code>protected</code>, not renamed.</p>",
        "id": 263054156,
        "sender_full_name": "Mac",
        "timestamp": 1638212917
    },
    {
        "content": "<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>",
        "id": 263054245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638212994
    },
    {
        "content": "<p>Here's a reduced MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Query</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Query.steps</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">â</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">steps</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">steps</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">applyStep</span> <span class=\"o\">(</span><span class=\"n\">sql</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">QueryStep</span> <span class=\"bp\">â</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">QueryStep.join</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q.steps.foldl</span> <span class=\"n\">applyStep</span> <span class=\"n\">Unit.unit</span>\n<span class=\"n\">termination_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263054388,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263054245\">said</a>:</p>\n<blockquote>\n<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>\n</blockquote>\n<p>In Lean, 99% of the time you don't <em>want</em>  to hide things from the API user. Or, more accurately, the APO user doesn't want things hidden from them (as it inhibits their ability to reason about the code).</p>",
        "id": 263054929,
        "sender_full_name": "Mac",
        "timestamp": 1638213360
    },
    {
        "content": "<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>",
        "id": 263055156,
        "sender_full_name": "Mac",
        "timestamp": 1638213466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055156\">said</a>:</p>\n<blockquote>\n<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>\n</blockquote>\n<p>This was the solution I found to make it easy for the user to type in things like <code>`age &gt; 20</code></p>",
        "id": 263055510,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638213641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055510\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055156\">said</a>:</p>\n<blockquote>\n<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>\n</blockquote>\n<p>This was the solution I found to make it easy for the user to type in things like <code>`age &gt; 20</code></p>\n</blockquote>\n<p>I believe you can also do this by conforming to certain instances like <code>LE</code>, <code>LT</code>, etc.<br>\nThey will then \"provide\" the notation for you.</p>",
        "id": 263055622,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> usually that is true, but in this case that will not work because these functions do not match the type classes types.</p>",
        "id": 263055711,
        "sender_full_name": "Mac",
        "timestamp": 1638213750
    },
    {
        "content": "<p>I'm open to ideas. I'm green in Lean and I'm kind of finding my own ways to do things</p>",
        "id": 263055807,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638213797
    },
    {
        "content": "<p>Oh, I see. I'm guessing there is no <code>HLE</code> or <code>HLT</code>? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263055828,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> The problem is that they're <code>Prop</code>-valued, and Arthur wants an abstract syntax tree basically.</p>",
        "id": 263055906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638213843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Would this be a place where Arthur could create a new type of syntax for query expressions? That way <code>&gt;</code> in a query is different from the usual <code>&gt;</code> in an unambiguous way.</p>",
        "id": 263055958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638213864
    },
    {
        "content": "<p>It would be nice if there were general classes for <code>Eq</code>, <code>Lt</code>, and <code>Le</code> (and I have proposed such things before), but unfortunately they currently don't exist.</p>",
        "id": 263056032,
        "sender_full_name": "Mac",
        "timestamp": 1638213899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> yeah, that would probably be the best way to go about this.</p>",
        "id": 263056142,
        "sender_full_name": "Mac",
        "timestamp": 1638213959
    },
    {
        "content": "<p>With the things I've defined it's possible to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">table</span> <span class=\"s2\">\"person\"</span> <span class=\"bp\">â </span>\n<span class=\"n\">select</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">age</span><span class=\"o\">]</span> <span class=\"bp\">â </span>\n<span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">20</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">build</span>\n<span class=\"c1\">-- \"select * from (select name,age from person where true and (age&gt;20)) as person\"</span>\n</code></pre></div>\n<p>If it's possible to achieve something like this with better practices, I'm in!</p>",
        "id": 263056311,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214034
    },
    {
        "content": "<p>I'm building a SQL query from those \"spark-like\" transformations, which I find a lot better to explore data than pure SQL</p>",
        "id": 263056429,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Would this be a place where Arthur could create a new type of syntax for query expressions? That way <code>&gt;</code> in a query is different from the usual <code>&gt;</code> in an unambiguous way.</p>\n</blockquote>\n<p>That's exactly what I intended to do, but I don't know how exactly</p>",
        "id": 263057521,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214625
    },
    {
        "content": "<p>Is there an example of it? I just need to tweak and fix my recursion and then I can come back to this and fix this syntax overriding issue</p>",
        "id": 263058304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> here is a quick example of how such a DSL my look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">noWs</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"NULL\"</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"entry% \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.int</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">-$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.int</span> <span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">strLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.str</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"n\">NULL</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.null</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"ill-formed entry\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">colProp</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â  \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â¤ \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â¥ \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â  \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â¤ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" â¥ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" â§ \"</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" â¨ \"</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">colProp</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"colProp% \"</span> <span class=\"n\">colProp</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.EqE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â </span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.NeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â¤</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LE</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â¥</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GE</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.EqC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â </span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.NeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â¤</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LC</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">â¥</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GC</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">â§</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.And</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">â¨</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.Or</span>  <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"ill-formed column proposition\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">â§</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">â¨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"mi\">42</span> <span class=\"bp\">+</span> <span class=\"mi\">21</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ColProp.Or (ColProp.And (ColProp.EqE `a (Entry.int 2)) (ColProp.EqC `b `c))</span>\n<span class=\"cm\">  (ColProp.EqE `d (Entry.int (42 + 21))) : ColProp</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>EDIT: Added parenthetical syntax</p>",
        "id": 263059502,
        "sender_full_name": "Mac",
        "timestamp": 1638215532
    }
]