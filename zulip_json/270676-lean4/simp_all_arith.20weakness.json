[
    {
        "content": "<p>While I was writing my translation of chapter 8 CPDT to Lean I wrote the following proof for an RbTree theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Color</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">Color</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"o\">:</span> <span class=\"n\">Color</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">RbTree</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">RbTree</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">RbTree</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"n\">c1</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">RbTree</span> <span class=\"n\">c2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">RbTree</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">n.succ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RbTree.depth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"n\">t1</span> <span class=\"n\">_</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">f</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">f</span> <span class=\"n\">t2</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"n\">t1</span> <span class=\"n\">_</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">f</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">f</span> <span class=\"n\">t2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RbTree.depth_min</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">depth</span> <span class=\"n\">Nat.min</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.min</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Nat.le_succ_of_le</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.min</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The goals I'm trying to prove after the <code>split</code>s are obviously quite trivial, just one lemma and an induction hypothesis away but using <code>simp_all_arith</code> I wasn't able to solve them, can we improve in this regard? Or is this out of scope for <code>simp_all_arith</code>?</p>",
        "id": 282361816,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1652546908
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.le_min_iff</span><span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.min</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.min</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RbTree.depth_min</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">RbTree</span> <span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">depth</span> <span class=\"n\">Nat.min</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all_arith</span><span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_succ_of_le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282364203,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1652550342
    }
]