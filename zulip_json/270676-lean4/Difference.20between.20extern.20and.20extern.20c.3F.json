[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"foo_impl\"]</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">@[extern c \"bar_impl\"]</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>This generates two different forward declarations, with the forward declaration of <code>bar</code> being <em>incorrect</em> (it assumes that <code>bar</code> has two parameters, while in the runtime, the <code>(h: Prop)</code> ought to have been erased):</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bar_impl</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// wrong</span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// right</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Lean compiler output</span>\n<span class=\"c1\">// Module: compile</span>\n<span class=\"c1\">// Imports: Init</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#if defined(__clang__)</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#elif defined(__GNUC__) &amp;&amp; !defined(__CLANG__)</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-but-set-variable\"</span>\n<span class=\"cp\">#endif</span>\n<span class=\"cp\">#ifdef __cplusplus</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"cp\">#endif</span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l___private_compile_0__foo___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bar_impl</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l___private_compile_0__bar___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l___private_compile_0__foo___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l___private_compile_0__bar___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar_impl</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">initialize_Init</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">_G_initialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">initialize_compile</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_G_initialized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"n\">_G_initialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">initialize_Init</span><span class=\"p\">(</span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_io_result_is_error</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">lean_dec_ref</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#ifdef __cplusplus</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#endif</span>\n</code></pre></div>\n<p>So what's the precise semantic difference between <code>@[extern ...]</code> and <code>@[extern c ...]</code>?</p>",
        "id": 321191966,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673624622
    },
    {
        "content": "<p>part of the story is described in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ExternAttrData#doc\">docs4#Lean.ExternAttrData</a></p>",
        "id": 321193300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673624984
    },
    {
        "content": "<p>another part is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.isExternC#doc\">docs4#Lean.isExternC</a></p>",
        "id": 321193626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673625060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would you consider the above as a miscompile? The file does not compile, since the number of arguments in the forward declaration for <code>bar_impl</code>does not match the number of arguments <code>bar_impl</code> is invoked with (eg. <code>x_3 = bar_impl(x_1);</code>).</p>",
        "id": 321194552,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673625272
    },
    {
        "content": "<p>yes, it's a bug</p>",
        "id": 321194617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673625285
    },
    {
        "content": "<p>OK, I'll forge a patch.</p>",
        "id": 321194651,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673625294
    },
    {
        "content": "<p>I think the buggy calculation is happening in <code>get_extern_borrowed_info</code> in the C++</p>",
        "id": 321194845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673625346
    },
    {
        "content": "<p>Hmm, I suspect the error is at <a href=\"https://github.com/leanprover/lean4/blob/9b1f5c4df4d07c83bd7b692ed725dacaf829a763/src/Lean/Compiler/ExternAttr.lean#L128-L131\"><code>isExternC</code> at <code>src/Lean/Compiler/ExternAttr.lean</code></a></p>",
        "id": 321195184,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673625420
    },
    {
        "content": "<p>(the pattern match <code>some { entries := [ ExternEntry.standard ``all _ ], .. } =&gt; true</code> seems too specific, it needs to handle the other possible ways of expressing <code>extern</code> that's described in the docstring)</p>",
        "id": 321195605,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673625514
    }
]