[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Equiv.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equ</span> <span class=\"o\">:</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">to</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">--why does tactic state display 5 goals if cursor is here?</span>\n    <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Why do I get 5 goals displayed after the last-but-one <code>rfl</code>? The proof is fine.</p>",
        "id": 289842981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657998601
    },
    {
        "content": "<p>If you use the <code>trace_state</code> tactic you can see there is only one goal really around here in its output. As to why the goal view is doing this I don't really know but given the fact that you are probably using VSCode and I am using Emacs it's most likely an issue with the language server in the Lean compiler (although merely a cosmetic one of course)</p>",
        "id": 289843572,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657999432
    }
]