[
    {
        "content": "<p>Hello!</p>\n<ol>\n<li>How do people navigate the code base? I want to know all the functions I can call on a <code>List</code> - how can I do that?</li>\n<li>What do people recommend as good starting <code>theorem</code> examples in Lean4 to get started? I'm looking at the <code>Advent-of-code-lean4</code> repo and that's cool, but I haven't found other repos that are building up code alongside the proofs. Any recommendations? I've started looking at <code>lean4/src/Std/Data/</code>, and proving basic properties of those data structures seems neat.<br>\nThanks!</li>\n</ol>",
        "id": 234211940,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618253969
    },
    {
        "content": "<ol>\n<li>So far, I'm using \"grep\" (aka vscode find in files) to find the files that deal with <code>List</code> and browse around</li>\n<li>You are going to run into lots and lots of problems when proving theorems about programs right now. (See also \"Proving findLeast\" thread.) The code there might be helpful, as well as the language reference on tactics</li>\n</ol>",
        "id": 234215634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255515
    },
    {
        "content": "<p>Lean 3 is much better suited for proving theorems about programs ATM</p>",
        "id": 234215733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255563
    },
    {
        "content": "<p>as well as theorems about random mathematics of course</p>",
        "id": 234215799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255584
    },
    {
        "content": "<p>Even if you ultimately want to prove stuff about a lean 4 program, it might be worthwhile to cut your teeth on lean 3 proving because the infrastructure is much more mature and the skills are very transferrable</p>",
        "id": 234215915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255655
    },
    {
        "content": "<p>you might even be able to mostly transliterate the proof</p>",
        "id": 234215956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255677
    },
    {
        "content": "<p>Generally speaking, these functions will be exactly the ones in the <code>List</code> namespace that have an argument of type <code>List _</code>. I don't know of any supported/maintained search facility for this but here is a starting point for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FindOptions</span> <span class=\"n\">where</span>\n  <span class=\"n\">stage1</span>        <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">checkPrivate</span>  <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">checkInternal</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findCore</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">FindOptions</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">ConstantInfo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">matches</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">opts.stage1</span> <span class=\"k\">then</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₁.foldM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"n\">check</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₂.foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">matches</span><span class=\"o\">)</span> <span class=\"n\">check</span>\n\n  <span class=\"n\">where</span>\n    <span class=\"n\">check</span> <span class=\"n\">matches</span> <span class=\"n\">name</span> <span class=\"n\">cinfo</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">isPrivateName</span> <span class=\"n\">name</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">opts.checkPrivate</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">matches</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">name.isInternal</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">opts.checkInternal</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">matches</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ϕ</span> <span class=\"n\">cinfo</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">matches.push</span> <span class=\"n\">cinfo</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">matches</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">FindOptions</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cinfos</span> <span class=\"bp\">←</span> <span class=\"n\">findCore</span> <span class=\"n\">ϕ</span> <span class=\"n\">opts</span>\n  <span class=\"k\">let</span> <span class=\"n\">cinfos</span> <span class=\"o\">:=</span> <span class=\"n\">cinfos.qsort</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p.name.lt</span> <span class=\"n\">q.name</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">cinfo</span> <span class=\"k\">in</span> <span class=\"n\">cinfos</span> <span class=\"k\">do</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"{cinfo.name} : {← Meta.ppExpr cinfo.type}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">All declarations in namespace 'List':</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">find</span> <span class=\"bp\">λ</span> <span class=\"n\">cinfo</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">List</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isPrefixOf</span> <span class=\"n\">cinfo.name</span>\n</code></pre></div>",
        "id": 234216003,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618255684
    },
    {
        "content": "<p>Oh hey look it's our old friend <code>#print prefix</code></p>",
        "id": 234216198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618255769
    },
    {
        "content": "<p>You can just use auto completion now. It mostly works!</p>",
        "id": 234216923,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618256044
    },
    {
        "content": "<p>Does <code>foo</code> autocomplete to <code>Foo.Bar.foo</code> yet?</p>",
        "id": 234217146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234216923\">said</a>:</p>\n<blockquote>\n<p>You can just use auto completion now. It mostly works!</p>\n</blockquote>\n<p>Cool! Does this work in Emacs? I can't seem to figure out how to trigger it.</p>",
        "id": 234217277,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618256188
    },
    {
        "content": "<p>this will be super helpful for hunting down <code>Lean.?.elabTerm</code> stuff</p>",
        "id": 234217283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256191
    },
    {
        "content": "<p>Oh, also can the hover print the fully qualified name? It's nice to be able to hover over a definition to see the current namespace</p>",
        "id": 234217410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256256
    },
    {
        "content": "<p>(maybe there should be an option for that, I can imagine situations where it is noisy)</p>",
        "id": 234217539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256302
    },
    {
        "content": "<p>Don't you see the current namespace from the bread crumb bar?</p>",
        "id": 234217572,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618256318
    },
    {
        "content": "<p>I see the file path</p>",
        "id": 234217605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256334
    },
    {
        "content": "<p>Oh, hovering over a definition doesn't work</p>",
        "id": 234217882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256451
    },
    {
        "content": "<p>you have to hover on a use of the definition</p>",
        "id": 234217924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256472
    },
    {
        "content": "<p>Hovering over a definition seems a bit redundant, all the information is already there? The breadcrumb bar should look something like <a href=\"/user_uploads/3121/nXGJYxpDJsw-xo2cjjnNLnCA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nXGJYxpDJsw-xo2cjjnNLnCA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nXGJYxpDJsw-xo2cjjnNLnCA/image.png\"></a></div>",
        "id": 234218074,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618256536
    },
    {
        "content": "<p>Mine ends at the <code>.lean</code> part</p>",
        "id": 234218357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256655
    },
    {
        "content": "<blockquote>\n<p>Hovering over a definition seems a bit redundant, all the information is already there?</p>\n</blockquote>\n<p>Ha! Have you forgotten about type inference? Variables?</p>",
        "id": 234218392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234217277\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234216923\">said</a>:</p>\n<blockquote>\n<p>You can just use auto completion now. It mostly works!</p>\n</blockquote>\n<p>Cool! Does this work in Emacs? I can't seem to figure out how to trigger it.</p>\n</blockquote>\n<p>Leo mentioned he was missing <code>company</code>. After that, Ctrl+Space should just work.</p>",
        "id": 234218439,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618256701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234217277\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234216923\">said</a>:</p>\n<blockquote>\n<p>You can just use auto completion now. It mostly works!</p>\n</blockquote>\n<p>Cool! Does this work in Emacs? I can't seem to figure out how to trigger it.</p>\n</blockquote>\n<p>I think I figured it out. Auto-complete is automatic in certain circumstances. There is a delay after pressing <code>&lt;term&gt;.</code> and if you press anything during that delay, it will stop autocomplete from ever showing, and then you need to delete the <code>.</code> and type it again.</p>",
        "id": 234218461,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618256709
    },
    {
        "content": "<p>Oh wait the breadcrumb is working now</p>",
        "id": 234218532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234218392\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hovering over a definition seems a bit redundant, all the information is already there?</p>\n</blockquote>\n<p>Ha! Have you forgotten about type inference? Variables?</p>\n</blockquote>\n<p>I can't even tell if hovering over the definition should or should not show the variables. But it could be useful, yeah.</p>",
        "id": 234218750,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618256816
    },
    {
        "content": "<p>I think it should always show the variables. The only time it should be shown without variables is when you hover over a recursive use of the definition</p>",
        "id": 234219173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618256954
    },
    {
        "content": "<p>I don't actually understand the rules for when definitions need extra args. \"Right of the colon\" doesn't seem to be correct anymore</p>",
        "id": 234219287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257004
    },
    {
        "content": "<p>I have observed that moving a definition from one file to another can cause recursive uses of the definition to need more arguments</p>",
        "id": 234219412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257046
    },
    {
        "content": "<p>so I'm guessing the new rule is that variables are not specified but everything else is</p>",
        "id": 234219469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257071
    },
    {
        "content": "<p>You can sort-of simulate the old right-of-the-colon behavior with a <code>where</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n   <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 234219951,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618257274
    },
    {
        "content": "<p>Thanks for the reccs <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .<br>\nAnother question: Say I can prove that one of my functions holds a certain property. Can Lean4 optimize the performance of that function by using that new information?</p>",
        "id": 234220011,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618257303
    },
    {
        "content": "<p>No</p>",
        "id": 234220167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257360
    },
    {
        "content": "<p>If you want something like that you have to bake it into the definition</p>",
        "id": 234220251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257377
    },
    {
        "content": "<p>There are a few examples of that (I think), like array indexing with <code>Array.get</code> takes an argument of type <code>Fin n</code>, which is a pair of a natural number and a proof that it is in range; in principle that means that the compiler doesn't have to emit bounds checks</p>",
        "id": 234220378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257431
    },
    {
        "content": "<p>You could do some juggling with typeclasses and instance priorities</p>",
        "id": 234220413,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618257451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243947\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234220011\">said</a>:</p>\n<blockquote>\n<p>Another question: Say I can prove that one of my functions holds a certain property. Can Lean4 optimize the performance of that function by using that new information?</p>\n</blockquote>\n<p>There is a long term goal to exploit theorems/proofs in various ways during compilation (maybe interactively), but right now Lean will not magically optimize your code based on a theorem in the environment.</p>",
        "id": 234220471,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618257479
    },
    {
        "content": "<p>You can also use <code>implementedBy</code> to replace a slow definition with a fast one, so for example you can write a slow definition, prove a theorem about it, then write the not-obviously-the-same fast version and use the theorem to prove equivalence and <code>implementedBy</code> to swap it out</p>",
        "id": 234220615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257521
    },
    {
        "content": "<p>Although right now <code>implementedBy</code> is unsafe, in the sense that it doesn't require the two definitions to be equivalent, so your theorem is going to waste</p>",
        "id": 234220847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257613
    },
    {
        "content": "<p>Leo has talked about plans to use <code>simp</code> in the compiler to rewrite slow definitions with fast ones and perform transformations like <code>map f (map g l) = map (f o g) l</code> a la haskell</p>",
        "id": 234221098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257699
    },
    {
        "content": "<p>That approach would be proven correct since it's using an equation that had to be proved</p>",
        "id": 234221253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618257750
    },
    {
        "content": "<p>Wow, Lean people are cooking up cool stuff. Nice!</p>",
        "id": 234221404,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618257811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> another few things that may help -- you can find repos tagging themselves with lean4 in GitHub which I've clicked on a few times just to see -- <a href=\"https://github.com/topics/lean4\">https://github.com/topics/lean4</a></p>",
        "id": 234224976,
        "sender_full_name": "Julian Berman",
        "timestamp": 1618259399
    },
    {
        "content": "<p>Oh, that is handy. Neat!</p>",
        "id": 234225095,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618259426
    },
    {
        "content": "<p>also I think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s mathlib4 noodling repo has some more theorem-y lean4 code -- <a href=\"https://github.com/kbuzzard/mathlib4_experiments\">https://github.com/kbuzzard/mathlib4_experiments</a></p>",
        "id": 234225141,
        "sender_full_name": "Julian Berman",
        "timestamp": 1618259447
    },
    {
        "content": "<p>it's only a file or two, but yeah I flipped through it to learn some tricks myself.</p>",
        "id": 234225191,
        "sender_full_name": "Julian Berman",
        "timestamp": 1618259463
    },
    {
        "content": "<p>Also also I wrote up my own small list of lean4 repos to keep an eye on here: <a href=\"https://github.com/Julian/tree-sitter-lean/issues/1\">https://github.com/Julian/tree-sitter-lean/issues/1</a> (which contains nothing other than what I just shared) :) but if you find good examples I'd love to hear them myself too</p>",
        "id": 234225335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1618259515
    },
    {
        "content": "<p>Alright, so this has been a nice detour - I want to go back to beginner questions.</p>",
        "id": 234385070,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341587
    },
    {
        "content": "<p>I'm trying to implement the basics of Linear Temporal Logic, I think it makes for a nice side project for now.</p>",
        "id": 234385119,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341604
    },
    {
        "content": "<p>I'm using this document as reference: <a href=\"https://www.dc.fi.udc.es/~cabalar/vv/T4-LTL.pdf\">https://www.dc.fi.udc.es/~cabalar/vv/T4-LTL.pdf</a></p>",
        "id": 234385157,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341616
    },
    {
        "content": "<p>It's \"almost\" set theory and propositions with a few more operators sprinkled on top.</p>",
        "id": 234385207,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341635
    },
    {
        "content": "<p>Right now, I want to try and add the definition of a <code>\\Sigma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Std</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Sigma</span> <span class=\"n\">where</span>\n    <span class=\"n\">props</span> <span class=\"o\">:</span> <span class=\"n\">HashSet</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 234385310,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341680
    },
    {
        "content": "<p>After that, I want to try and define the <code>state s</code>, as a function that takes in a set of propositions and returns  a boolean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">HashSet</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 234385352,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618341689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> It doesn't seem like you have asked a question yet, but I'll save you some time to mention that you can't have a <code>HashSet</code> of <code>Prop</code>. You can't hash a <code>Prop</code>, nor can you compare it for equality.</p>",
        "id": 234386245,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342063
    },
    {
        "content": "<p>Ah, thanks <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> yeah I was getting to that.</p>",
        "id": 234386329,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342089
    },
    {
        "content": "<p>ok, so if I have that <code>p q r : Prop</code>, and I want to have them in a Set for easy inclusion comparisons, how could I do that?</p>",
        "id": 234386405,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342125
    },
    {
        "content": "<p>(Also, I don't see many tutorials about using datastructures in Lean, so that would be a nice resource to know about.)</p>",
        "id": 234386536,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342177
    },
    {
        "content": "<p>This is not possible. You probably need to create a DSL/inductive-type for the kinds of Props are you interested in (and define <code>hash</code> and <code>beq</code> on it), and then write a <code>denote</code> function that maps them to actual <code>Prop</code>s if necessary.</p>",
        "id": 234386538,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342177
    },
    {
        "content": "<p>Oh lord.</p>",
        "id": 234386689,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342230
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234386701,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342237
    },
    {
        "content": "<p>It is not so bad, this is a well-trodden path</p>",
        "id": 234386731,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342248
    },
    {
        "content": "<p>And quite clean/elegant</p>",
        "id": 234386748,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342260
    },
    {
        "content": "<p>Ok, that's not too bad then.</p>",
        "id": 234386783,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342274
    },
    {
        "content": "<p>Basically a <code>Prop</code> has no computational content. You can't write executable code that manipulates them directly. You need to \"reify\" them into data that can be manipulated.</p>",
        "id": 234386854,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342320
    },
    {
        "content": "<p>Well all the <code>Prop</code>s I care about are <code>Booleans</code>, I just need them to have different names.</p>",
        "id": 234386960,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342351
    },
    {
        "content": "<p>Maybe I should have a <code>HashSet Bool</code>...</p>",
        "id": 234387064,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342394
    },
    {
        "content": "<p>I don't know what you are trying to do, but my off-the-cusp guess is that you'll want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashSet</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span> <span class=\"o\">(</span><span class=\"n\">HashSet</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LTL</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Property</span>\n  <span class=\"bp\">|</span> <span class=\"n\">reachable</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Property</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sink</span>      <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Property</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Reachable</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Sink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Property.denote</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">reachable</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Reachable</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sink</span> <span class=\"n\">n</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">Sink</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Sigma</span> <span class=\"n\">where</span>\n    <span class=\"n\">props</span> <span class=\"o\">:</span> <span class=\"n\">HashSet</span> <span class=\"n\">Property</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">LTL</span>\n</code></pre></div>",
        "id": 234387304,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342506
    },
    {
        "content": "<p>^ I just made up <code>Reachable</code> and <code>Sink</code>, you would replace those with whatever properties you actually care about</p>",
        "id": 234387511,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618342597
    },
    {
        "content": "<p>Nice, that's super cool you did that. Thanks!</p>",
        "id": 234387556,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342621
    },
    {
        "content": "<p>(This is my first actual dive into Lean4 so I'm taking it slow.)</p>",
        "id": 234387599,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618342641
    },
    {
        "content": "<p>Alright I think this is much more barebones but it might be good enough for what I need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ZZZ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">props</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkZZZ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZZZ</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">props</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>  <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mkZZZ</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 234388807,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618343187
    },
    {
        "content": "<p>Why does the <code>mkZZZ</code> fail?</p>",
        "id": 234388836,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618343197
    },
    {
        "content": "<p>I also tried calling it <code>\\Sigma</code> but Lean complained so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 234388869,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618343212
    },
    {
        "content": "<p>It just doesn't know how to print the result to the screen. Just add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ZZZ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">props</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span> <span class=\"c1\">-- add this</span>\n</code></pre></div>",
        "id": 234389774,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618343560
    },
    {
        "content": "<p>Neat, didn't know about the <code>deriving</code> trick.</p>",
        "id": 234390081,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618343683
    },
    {
        "content": "<p>I now get a <code>term has type ZZZ Bool / failed to syntehsize Lean.Eval ?m.2068</code> prompt.</p>",
        "id": 234390197,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618343729
    },
    {
        "content": "<p>It works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ZZZ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">props</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkZZZ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZZZ</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">props</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>  <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mkZZZ</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">]</span> <span class=\"c1\">-- prints { props := #[true, false] }</span>\n</code></pre></div>\n<p>Note: I am using a very recent commit 292bab5a11dc05e019068a579a42eac251bf587f</p>",
        "id": 234390590,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618343838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243947\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234388869\">said</a>:</p>\n<blockquote>\n<p>I also tried calling it <code>\\Sigma</code> but Lean complained so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>You can name your structure <code>Sigma</code> if you are in a namespace. In the example I posted above, I declare <code>Sigma</code> inside <code>LTL</code> namespace.</p>",
        "id": 234390711,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618343889
    },
    {
        "content": "<p>Ugh, this is so weird.</p>",
        "id": 234391624,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344180
    },
    {
        "content": "<p>the <code>import ... open ...</code> lines don't work for me either.</p>",
        "id": 234391723,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344208
    },
    {
        "content": "<p>The example in <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234390590\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Beginner.20questions/near/234390590</a> does not require any imports nor opens.</p>",
        "id": 234391984,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618344318
    },
    {
        "content": "<p>Yes - I tried using a <code>HashSet String</code> for the time being.</p>",
        "id": 234392066,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344358
    },
    {
        "content": "<p>the <code>import</code> is underlined and says <code>expected command</code>.</p>",
        "id": 234392142,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344382
    },
    {
        "content": "<p>It's been a while since I looked at this, but <a href=\"https://github.com/GaloisInc/lean-protocol-support/blob/cabfa3abedbdd6fdca6e2da6fbbf91a13ed48dda/galois/temporal/temporal.lean\">here</a> is a link to how we formalized temporal logic in Lean 3.  It's in terms of properties over traces.</p>",
        "id": 234392205,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1618344413
    },
    {
        "content": "<p>Oh neat, thanks a lot <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span></p>",
        "id": 234392241,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344428
    },
    {
        "content": "<p>Oh no way, I was just building this to show it off to some Galois people on twitter later <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234392282,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344453
    },
    {
        "content": "<p>We also defined a data structure for <a href=\"https://github.com/GaloisInc/lean-protocol-support/blob/cabfa3abedbdd6fdca6e2da6fbbf91a13ed48dda/galois/sequent/ltl.lean#L43-L50\">LTL formulas</a> that was polymorphic over the underlying state predicates.</p>",
        "id": 234392442,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1618344504
    },
    {
        "content": "<p>That's pretty cool stuff.</p>",
        "id": 234392665,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344612
    },
    {
        "content": "<p>I see there's no Until / Release operators yet.</p>",
        "id": 234392722,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618344637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span>  Yes, I noticed that as well.  We have it in the semantics file.  I don't actually recall what the formula datatype was used for actually.</p>",
        "id": 234395129,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1618345731
    }
]