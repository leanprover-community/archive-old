[
    {
        "content": "<p>In this photo <a href=\"/user_uploads/3121/VIGGG_iMppqIteuBwCTpHVs5/image.png\">image.png</a>  it wraps the value of 88 mod 5, but I don't really want that . I would prefer it to not typecheck, like in Idris. Is there another version of <code>Fin</code> with that behavior?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VIGGG_iMppqIteuBwCTpHVs5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VIGGG_iMppqIteuBwCTpHVs5/image.png\"></a></div>",
        "id": 274890112,
        "sender_full_name": "Joseph O",
        "timestamp": 1646943705
    },
    {
        "content": "<p>You could implement one, the translation of numerals to types is controlled by the <code>OfNat</code> type class</p>",
        "id": 274890243,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646943770
    },
    {
        "content": "<p>But why is it not default?</p>",
        "id": 274890389,
        "sender_full_name": "Joseph O",
        "timestamp": 1646943850
    },
    {
        "content": "<p>The simple answer is \"to match the behavior of lean 3\"</p>",
        "id": 274893142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646945471
    },
    {
        "content": "<p>You could also make a mathematical argument if <code>FIn n</code> is supposed to be numbers <code>mod n</code> then <code>12 mod 10</code> should be <code>2</code></p>",
        "id": 274894662,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646946287
    },
    {
        "content": "<p>But it shouldn't</p>",
        "id": 274894859,
        "sender_full_name": "Joseph O",
        "timestamp": 1646946387
    },
    {
        "content": "<p>Why? The equivalence class of 12 in the <code>mod 10</code> relation exists.</p>",
        "id": 274895829,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1646946916
    },
    {
        "content": "<p>You cant just say it shouldnt, this is how  numbers mod n work in mathematics, just because some other language has some other opinion on what <code>Fin</code> represents doesnt mean that we have to follow it</p>",
        "id": 274896132,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646947090
    },
    {
        "content": "<p>I wasn't contradicting how mod worked. So it seems that <code>Fin n</code> represents a mod system of <code>n</code>.</p>",
        "id": 274897271,
        "sender_full_name": "Joseph O",
        "timestamp": 1646947687
    },
    {
        "content": "<p>Also, by analogy with Lean3, an alternative possibility for <code>fin n</code> would probably be absorbing addition.  In particular <code>n + n</code> would typecheck and be equal to <code>n</code>.</p>",
        "id": 274901672,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646949787
    },
    {
        "content": "<p>I do not think that there is in Lean something that does not typechecks when you are out of bounds.  The fact that functions need to be total seems an obstacle to \"not typechecking sometimes\".</p>",
        "id": 274901685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646949790
    },
    {
        "content": "<p>It is possible for lean 4 to have a type which only supports some numbers, although you have to do the computation in the typeclass system so that might not be great</p>",
        "id": 274902084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646950009
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_not_le</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 274903366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646950484
    },
    {
        "content": "<p>I look forward to having ℕ subtraction being undefined when it should be negative!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 274903681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646950633
    },
    {
        "content": "<p>This doesn't work as well when the numbers aren't concrete, though. For nat subtraction that would be bad because you wouldn't be able to write <code>a - b</code>  where <code>a</code> and <code>b</code> are variables</p>",
        "id": 274903966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646950791
    },
    {
        "content": "<p>Sure, anyway, after the initial shock of being able to compute <code>3-4</code> to</p>\n<ul>\n<li>obtain a natural number,</li>\n<li>and moreover the natural number <code>0</code></li>\n</ul>\n<p>i have grown used to it and would probably prefer the garbage values to pain involving typeclasses!</p>",
        "id": 274904271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646950953
    },
    {
        "content": "<p>At the beginning it seemed a little a joke: \"I am formalizing mathematics to not make mistakes. For instance, I can prove that <code>2-4=0</code> and that <code>7/0=0</code>\".</p>",
        "id": 274904567,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646951112
    },
    {
        "content": "<p>Is there an implicit coercion from Nat to Fin n in Lean 3? I think this really only is an issue with numeric literals, since I don't think a coercion exists</p>",
        "id": 274904587,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646951132
    },
    {
        "content": "<p>In the case of <code>Fin'</code> it's probably fine since as you say you would only care if you want to write a literal, and <code>1 : Fin n</code> doesn't make sense anyway (although I can imagine that being annoying if, say, <code>n</code> is a prime number)</p>",
        "id": 274904770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646951247
    },
    {
        "content": "<p>for nat subtraction it wouldn't really work though because the <code>Sub</code> typeclass is accessed whenever you have a <code>-</code> in the expression</p>",
        "id": 274904860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646951288
    },
    {
        "content": "<p>Why are the bodies of the instances product types? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 274922197,
        "sender_full_name": "Joseph O",
        "timestamp": 1646963567
    },
    {
        "content": "<p>Also, what does <code>OfNat (Fin' n) i</code> do</p>",
        "id": 274922231,
        "sender_full_name": "Joseph O",
        "timestamp": 1646963609
    },
    {
        "content": "<p>as well as the body of the instance. Im not really sure what any of those instances do</p>",
        "id": 274922240,
        "sender_full_name": "Joseph O",
        "timestamp": 1646963629
    },
    {
        "content": "<p>An <code>instance</code> is a proof/construction of an element of a <code>class</code>, which is a special kind of <code>structure</code>, which is essentially a generalized tuple type</p>",
        "id": 274922288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646963652
    },
    {
        "content": "<p>In this case we are creating an inhabitant of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a></p>",
        "id": 274922327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646963713
    },
    {
        "content": "<p>Actually, now that you mention it, I'm surprised that what I wrote typechecks. Normally I would have needed to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_not_le</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)⟩⟩</span>\n</code></pre></div>\n<p>which is probably easier to explain</p>",
        "id": 274922459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646963837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Did you know about this behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 274922507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646963882
    },
    {
        "content": "<p>But to get back to your question <span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>: The instance has the form <code>⟨⟨i, h⟩⟩</code> where the first set of brackets is destructuring the <code>OfNat</code> class to produce a goal of <code>Fin' n</code>, and the second set is unpacking <code>Fin' n</code> which is defined to be <code>Fin n</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin#doc\">docs4#Fin</a>) which is a tuple of an element, here <code>i</code>, and a proof that <code>i &lt; n</code></p>",
        "id": 274922719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646964029
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>here, pos just returns a proof that n is greater than 0?</p>",
        "id": 274922790,
        "sender_full_name": "Joseph O",
        "timestamp": 1646964086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274922719\">said</a>:</p>\n<blockquote>\n<p>But to get back to your question <span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span>: The instance has the form <code>⟨⟨i, h⟩⟩</code> where the first set of brackets is destructuring the <code>OfNat</code> class to produce a goal of <code>Fin' n</code>, and the second set is unpacking <code>Fin' n</code> which is defined to be <code>Fin n</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin#doc\">docs4#Fin</a>) which is a tuple of an element, here <code>i</code>, and a proof that <code>i &lt; n</code></p>\n</blockquote>\n<p>Would i understand this all better if i read TPIL4?</p>",
        "id": 274922853,
        "sender_full_name": "Joseph O",
        "timestamp": 1646964122
    },
    {
        "content": "<p>The purpose of the instance <code>OfNat (Fin' n) i</code> is a signal to lean's parser. When you write <code>3 : Fin 5</code>, it expands the <code>3</code> to something like <code>OfNat.ofNat (nat_lit 3)</code> where <code>nat_lit 3</code> is a \"raw\" nat literal (these are primitive in the syntax) and <code>ofNat</code> has an additional hidden argument of type <code>OfNat (Fin' 5) (nat_lit 3)</code> that is inferred by typeclass inference. Since we have declared this <code>instance</code>, typeclass inference will try to apply it, resulting in the subgoal <code>IsPos (5 - 3)</code>. It will then try to unify this with <code>IsPos (Nat.succ ?n)</code>, and lean's unifier can solve the equation <code>5 - 3 = Nat.succ ?n</code> to <code>?n := 1</code>, so the numeral typechecks</p>",
        "id": 274923011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646964274
    },
    {
        "content": "<p><code>IsPos n</code> is a class which is equivalent to <code>0 &lt; n</code> (hence the name), but it is a <code>class</code> which means it can be used in typeclass inference. You can't have an argument like <code>instance [0 &lt; n] : MyClass (foo n)</code> directly</p>",
        "id": 274923146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646964380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274922853\">said</a>:</p>\n<blockquote>\n<p>Would i understand this all better if i read TPIL4?</p>\n</blockquote>\n<p>The answer is usually \"yes\" to this kind of question</p>",
        "id": 274923190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646964432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274922719\">said</a>:</p>\n<blockquote>\n<p>But to get back to your question <span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span>: The instance has the form <code>⟨⟨i, h⟩⟩</code> where the first set of brackets is destructuring the <code>OfNat</code> class to produce a goal of <code>Fin' n</code>, and the second set is unpacking <code>Fin' n</code> which is defined to be <code>Fin n</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin#doc\">docs4#Fin</a>) which is a tuple of an element, here <code>i</code>, and a proof that <code>i &lt; n</code></p>\n</blockquote>\n<p>But why are you nesting tuples?</p>",
        "id": 274924077,
        "sender_full_name": "Joseph O",
        "timestamp": 1646965352
    },
    {
        "content": "<p>Because <code>OfNat A i</code> is a tuple containing <code>A</code>, so <code>OfNat (Fin n) i</code> is a tuple containing <code>Fin n</code> which is itself a tuple containing a natural number and a proof that it is less than <code>n</code></p>",
        "id": 274924359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646965623
    },
    {
        "content": "<p>Why <code>[IsPos (n - i)]</code> in the last instance?</p>",
        "id": 274924682,
        "sender_full_name": "Joseph O",
        "timestamp": 1646965956
    },
    {
        "content": "<p>We want the typeclass problem to be solvable iff <code>i &lt; n</code>, so one way to do that without too many steps is to compute <code>n - i</code> and if it is nonzero then <code>i &lt; n</code></p>",
        "id": 274925164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646966487
    },
    {
        "content": "<p>The set of things we can compute this way is somewhat limited, but natural number inequalities happen to be provable this way</p>",
        "id": 274925368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646966679
    },
    {
        "content": "<p>we probably won't be able to have a type which only admits numerals which are prime numbers</p>",
        "id": 274925414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646966743
    },
    {
        "content": "<p>But also, to be clear: this is totally an abuse of the typeclass and unification algorithms and I don't recommend it. There are better ways to do this with fewer downsides</p>",
        "id": 274925601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646966952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"♯\"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 274925711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967035
    },
    {
        "content": "<p>That is clean</p>",
        "id": 274925762,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967088
    },
    {
        "content": "<p>But Im not sure how I would utilize it with functions</p>",
        "id": 274925820,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967133
    },
    {
        "content": "<p>This one works on primes too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isPrime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prime</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">isPrime</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♯\"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">3</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">4</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">5</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">6</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">12</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">37</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 274925853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274925601\">said</a>:</p>\n<blockquote>\n<p>But also, to be clear: this is totally an abuse of the typeclass and unification algorithms and I don't recommend it. There are better ways to do this with fewer downsides</p>\n</blockquote>\n<p>I mean, I still wish I understood it. I will probably have to come back to this thread later on</p>",
        "id": 274925962,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274925853\">said</a>:</p>\n<blockquote>\n<p>This one works on primes too:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isPrime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prime</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">isPrime</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♯\"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">3</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">4</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">5</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">6</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">12</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"bp\">♯</span><span class=\"mi\">37</span> <span class=\"c1\">-- ok</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why do you need to use the do dsl?</p>",
        "id": 274925975,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967347
    },
    {
        "content": "<p>Here is an approach using only functions instead of notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fin.mk'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk'</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk'</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk'</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk'</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 274925982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967362
    },
    {
        "content": "<p>Interesting</p>",
        "id": 274926026,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967381
    },
    {
        "content": "<p>what does <code>by decide</code> tactic do?</p>",
        "id": 274926035,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967392
    },
    {
        "content": "<p>I don't need the do DSL, I use it because it is nice but you can write the same loop in other ways</p>",
        "id": 274926043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967402
    },
    {
        "content": "<p>The <code>by decide</code> tactic proves any decidable proposition that evaluates to <code>true</code></p>",
        "id": 274926068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967454
    },
    {
        "content": "<p>In this case the purpose of the <code>isPrime</code> function was to give an implementation that can be executed to determine primality of a number suitable for <code>by decide</code></p>",
        "id": 274926127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967490
    },
    {
        "content": "<p>decidable propositions are also marked by a typeclass <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs4#Decidable</a></p>",
        "id": 274926140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967516
    },
    {
        "content": "<p>basically, a decidable proposition is one equivalent to a (computable) <code>Bool</code> value</p>",
        "id": 274926189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967585
    },
    {
        "content": "<p>and all the basic stuff like <code>a &lt; b</code> on natural numbers is decidable so lean knows how to evaluate it even though syntactically it has type <code>Prop</code> not <code>Bool</code></p>",
        "id": 274926333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274925711\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"♯\"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">♯</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So fin has an instance of Decidable?</p>",
        "id": 274926428,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967727
    },
    {
        "content": "<p><code>Prop</code>s in general can be undecidable, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isTwinPrime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime</span> <span class=\"n\">p</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">isPrime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">isTwinPrime</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>If you find a way to decide this proposition you will win fame and fortune</p>",
        "id": 274926450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967747
    },
    {
        "content": "<p>Not Fin, the thing being decided there are propositions like <code>3 &lt; 5</code> and <code>5 &lt; 5</code></p>",
        "id": 274926477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967799
    },
    {
        "content": "<p>If you replace <code>by decide</code> with <code>by {}</code>, lean will give an error showing the proposition it is trying to solve</p>",
        "id": 274926567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646967908
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-TRBBm9WalyB8QWEF7K63UOH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-TRBBm9WalyB8QWEF7K63UOH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-TRBBm9WalyB8QWEF7K63UOH/image.png\"></a></div>",
        "id": 274927496,
        "sender_full_name": "Joseph O",
        "timestamp": 1646969105
    },
    {
        "content": "<p>I would like to start from the beginning. What is this typeclass instance doing, and also what really is the purpose of <code>IsPos</code>, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 274928052,
        "sender_full_name": "Joseph O",
        "timestamp": 1646969820
    },
    {
        "content": "<p>I feel like this would be useful for me in the future</p>",
        "id": 274928061,
        "sender_full_name": "Joseph O",
        "timestamp": 1646969828
    },
    {
        "content": "<p>No need to explain the second instance a second time.</p>",
        "id": 274928087,
        "sender_full_name": "Joseph O",
        "timestamp": 1646969867
    },
    {
        "content": "<p>But I will try to utilize the simpler solutions</p>",
        "id": 274928132,
        "sender_full_name": "Joseph O",
        "timestamp": 1646969884
    },
    {
        "content": "<p>The typeclass instance makes it so that when lean wants to solve a problem of the form <code>IsPos (Nat.succ ?n)</code>, it will find that proof. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Writing <code>foo</code> here elaborates to <code>@foo _</code> where the <code>_</code> is a proof of <code>IsPos (Nat.succ 2)</code>, and we are asking the typeclass inference system to go find a proof using the declared instances. It will come back with <code>myInst 2</code>, assuming that the name of that instance was <code>myInst</code> (it has an automatically generated name, but you can name it with <code>instance myInst : IsPos (Nat.succ n) := ⟨Nat.succ_pos _⟩</code>).</p>",
        "id": 274929983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646971949
    },
    {
        "content": "<p>The purpose of the <code>IsPos</code> typeclass is to make it so that typeclass inference can solve problems of the form \"is this a nonzero natural number?\"</p>",
        "id": 274930007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646971996
    },
    {
        "content": "<p>The second instance makes use of this class to ask \"is <code>n - i</code> a nonzero natural number?\", which is equivalent to \"Is <code>i &lt; n</code>?\"</p>",
        "id": 274930087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646972067
    },
    {
        "content": "<p>The point is that we are trying to get typeclass inference to answer this \"Is <code>i &lt; n</code>?\" question because this is the necessary component to make fin numerals work the way you expect: we want <code>3 : Fin 5</code> to work but not <code>5 : Fin 3</code>, and in general <code>i : Fin n</code> for numerals <code>i</code> and <code>n</code> should work exactly when <code>i &lt; n</code></p>",
        "id": 274930184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646972177
    },
    {
        "content": "<p>Ah thanks</p>",
        "id": 274967953,
        "sender_full_name": "Joseph O",
        "timestamp": 1647001779
    },
    {
        "content": "<p>how would I go about fixing this error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 274987111,
        "sender_full_name": "Joseph O",
        "timestamp": 1647011151
    },
    {
        "content": "<p>Make the instance :-) We have it in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 274989279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647012167
    },
    {
        "content": "<p>Thanks. I will just translate that to Lean 4.</p>",
        "id": 275010585,
        "sender_full_name": "Joseph O",
        "timestamp": 1647021779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasZero</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_pos</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>it has a different name in lean 4?</p>",
        "id": 275010918,
        "sender_full_name": "Joseph O",
        "timestamp": 1647021914
    },
    {
        "content": "<p>I don't know whether the Lean 4 type class inference system will be smart enough to know that <code>length(a::as)=succ(something)</code> either</p>",
        "id": 275010948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647021934
    },
    {
        "content": "<p>Yeah, in Lean 4 you use this <code>OfNat</code> thing instead. I don't know the details of that either.</p>",
        "id": 275010982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647021955
    },
    {
        "content": "<p>well that didnt exactly work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_pos</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))⟩⟩</span>\n</code></pre></div>",
        "id": 275013051,
        "sender_full_name": "Joseph O",
        "timestamp": 1647022894
    },
    {
        "content": "<p>How would I go about making this instance?</p>",
        "id": 275015604,
        "sender_full_name": "Joseph O",
        "timestamp": 1647024125
    },
    {
        "content": "<p>I'm late to this thread and not a Lean 4 expert; can you post a mwe? I don't even know what <code>Fin'</code> is.</p>",
        "id": 275015884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647024283
    },
    {
        "content": "<p>Here you go</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_not_le</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))⟩⟩</span>\n</code></pre></div>",
        "id": 275017679,
        "sender_full_name": "Joseph O",
        "timestamp": 1647025001
    },
    {
        "content": "<p>That doesn't work because you never told Lean the type of <code>as</code>.</p>",
        "id": 275022609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647026985
    },
    {
        "content": "<p>and when you do, it doesn't work for the reason that the error explains: right you the second component of <code>⟨0, _⟩</code> is the statement <code>0 &lt; length...</code>, as opposed to its proof.</p>",
        "id": 275022818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647027087
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n</code></pre></div>",
        "id": 275022963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647027179
    },
    {
        "content": "<p>Ah thank you</p>",
        "id": 275023913,
        "sender_full_name": "Joseph O",
        "timestamp": 1647027685
    },
    {
        "content": "<p>Now that the instance is made, the error should go away in this function, but it isn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.get''</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 275024132,
        "sender_full_name": "Joseph O",
        "timestamp": 1647027779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 275024151,
        "sender_full_name": "Joseph O",
        "timestamp": 1647027789
    },
    {
        "content": "<p>Rotten luck -- type class inference can't find it, by the looks of things. I know nothing about how Lean 4 type class inference works I'm afraid</p>",
        "id": 275024434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647027901
    },
    {
        "content": "<p>Hint: you need to write <code>instance : OfNat (Fin' (List.length (a :: as))) (nat_lit 0)</code></p>",
        "id": 275024890,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647028098
    },
    {
        "content": "<p><code>[OfNat i 0]</code> looks like nonsense -- maybe remove it?</p>",
        "id": 275025273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647028301
    },
    {
        "content": "<p>Ah yeah. That was part of my previous attempts.</p>",
        "id": 275030493,
        "sender_full_name": "Joseph O",
        "timestamp": 1647030954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275024890\">said</a>:</p>\n<blockquote>\n<p>Hint: you need to write <code>instance : OfNat (Fin' (List.length (a :: as))) (nat_lit 0)</code></p>\n</blockquote>\n<p>Why did that fix it though?</p>",
        "id": 275030689,
        "sender_full_name": "Joseph O",
        "timestamp": 1647031060
    },
    {
        "content": "<p>Also, now the function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.get''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as.get''</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>has the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"bp\">?</span><span class=\"n\">m.1019</span>\n</code></pre></div>",
        "id": 275031050,
        "sender_full_name": "Joseph O",
        "timestamp": 1647031257
    },
    {
        "content": "<p>You know what to do then :-)</p>",
        "id": 275037984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647035309
    },
    {
        "content": "<p>You understand the error, right? You defined <code>Fin'</code> so it's now your problem. If <code>i : Fin' n</code> then what does <code>i + 1</code> mean? No idea -- you didn't tell me what + meant, or what 1 meant.</p>",
        "id": 275038331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647035401
    },
    {
        "content": "<p>I see. I think i have a fix</p>",
        "id": 275067035,
        "sender_full_name": "Joseph O",
        "timestamp": 1647045632
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_H5aGosLdBgCH5M6igINI3Cn/image.png\">image.png</a> Well thats strange. How do people match on <code>Nat.succ i</code> then.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_H5aGosLdBgCH5M6igINI3Cn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_H5aGosLdBgCH5M6igINI3Cn/image.png\"></a></div>",
        "id": 275067230,
        "sender_full_name": "Joseph O",
        "timestamp": 1647045892
    },
    {
        "content": "<p>Also, for a MWE, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fin'.succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.succ</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 275067246,
        "sender_full_name": "Joseph O",
        "timestamp": 1647045907
    },
    {
        "content": "<p>Fin.succ is not a constructor of the Fin datatype (whcih you could see by looking at its definition) thus it and any further definition cannot just be matched upon like this.</p>",
        "id": 275090779,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647082860
    },
    {
        "content": "<p>then, what alternative solutions lie?</p>",
        "id": 275097393,
        "sender_full_name": "Joseph O",
        "timestamp": 1647092181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> Note that in other systems (e.g, Agda and Idris), <code>Fin n</code> is an inductive datatype with two constructors. In Lean, it is essentially a subtype of <code>Nat</code>, i.e, a pair containing: a <code>Nat</code>, and a proof that it is smaller than <code>n</code>. You can use <code>match</code> to \"access\" this structure. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span> <span class=\"n\">as</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Here is the same definition without the anonymous constructor notation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">Fin.mk</span> <span class=\"mi\">0</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">Fin.mk</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>We can also define <code>Fin n</code> as it is defined in other systems and then match on <code>Fin.succ</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Ex</span> <span class=\"c1\">-- Using namespace `Ex` to avoid name collision with the Lean `Fin`</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Fin</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">Fin.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">Fin.succ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span> <span class=\"n\">as</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ex</span>\n</code></pre></div>",
        "id": 275098168,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647093355
    },
    {
        "content": "<p>Ah i see. Tho, it would still be the wrapping version I think</p>",
        "id": 275111364,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111304
    },
    {
        "content": "<p>Also, why did you decide not to consider the <code>| nil,  i</code> case anymore?</p>",
        "id": 275111439,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111364\">said</a>:</p>\n<blockquote>\n<p>Ah i see. Tho, it would still be the wrapping version I think</p>\n</blockquote>\n<p>You can still use the wrapping if you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span> <span class=\"n\">as</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 275111497,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111439\">said</a>:</p>\n<blockquote>\n<p>Also, why did you decide not to consider the <code>| nil,  i</code> case anymore?</p>\n</blockquote>\n<p>Lean 4 can prove it is unreachable.</p>",
        "id": 275111511,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111530
    },
    {
        "content": "<p>But it is reachable? Like what if someone gives <code>List.get [] 8</code></p>",
        "id": 275111543,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111580
    },
    {
        "content": "<p>Also, I have this error again, <code>failed to synthesize instance\n  OfNat (Fin' (List.length [1, 5, 4])) 7</code></p>",
        "id": 275111740,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111543\">said</a>:</p>\n<blockquote>\n<p>But it is reachable? Like what if someone gives <code>List.get [] 8</code></p>\n</blockquote>\n<p>It is not. You will not be able to do that. The type <code>Fin [].length</code> is not inhabited.</p>",
        "id": 275111805,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111756
    },
    {
        "content": "<p>That would mean they are passing an element of type <code>Fin 0</code> and that is equivalent to the emtpy type and thus impossible to do</p>",
        "id": 275111807,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647111759
    },
    {
        "content": "<p>Empty type. Ok i see.</p>",
        "id": 275111878,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111511\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111439\">said</a>:</p>\n<blockquote>\n<p>Also, why did you decide not to consider the <code>| nil,  i</code> case anymore?</p>\n</blockquote>\n<p>Lean 4 can prove it is unreachable.</p>\n</blockquote>\n<p>This is also a thing that I've been wondering about for a bit, how does it actually automagically construct this proof? Can you explain it/point me to the implementation?</p>",
        "id": 275111882,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647111861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111740\">said</a>:</p>\n<blockquote>\n<p>Also, I have this error again, <code>failed to synthesize instance\n  OfNat (Fin' (List.length [1, 5, 4])) 7</code></p>\n</blockquote>\n<p>I did not add <code>OfNat</code> instances in my example.  I just showed you how to define the <code>get</code> function.</p>",
        "id": 275111883,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111862
    },
    {
        "content": "<p>Right but I already have the OfNat instance</p>",
        "id": 275111897,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n</code></pre></div>",
        "id": 275111904,
        "sender_full_name": "Joseph O",
        "timestamp": 1647111905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111511\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111439\">said</a>:</p>\n<blockquote>\n<p>Also, why did you decide not to consider the <code>| nil,  i</code> case anymore?</p>\n</blockquote>\n<p>Lean 4 can prove it is unreachable.</p>\n</blockquote>\n<p>This is also a thing that I've been wondering about for a bit, how does it actually automagically construct this proof? Can you explain it/point me to the implementation?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Match/Match.lean#L148-L152\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Match/Match.lean#L148-L152</a></p>",
        "id": 275111919,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111904\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This instance is for <code>0</code> only.</p>",
        "id": 275111970,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647111980
    },
    {
        "content": "<p>That looks quite a lot easier than I imagined <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 275111981,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647112006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111970\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275111904\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This instance is for <code>0</code> only.</p>\n</blockquote>\n<p>Well, does that mean I have to do it manually for every literal?</p>",
        "id": 275112068,
        "sender_full_name": "Joseph O",
        "timestamp": 1647112095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> I did not read the whole thread. I think this kind of instance is not the way to go. You could add another instance for the <code>Nat.succ</code> case, but I see it as an abuse of the typeclass mechanism. Moreover, you will have to do it for many other functions. These two are for <code>List.length</code>. <code>Fin</code> is like a subtype. So we often have to synthesize proofs. We can use tactics to synthesize the proofs.  Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>We can also create helper notation if we have to do it a lot.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"#(\"</span> <span class=\"n\">a</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">get</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- Error</span>\n</code></pre></div>",
        "id": 275112661,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647112862
    },
    {
        "content": "<p>Ah cool, thanks</p>",
        "id": 275122850,
        "sender_full_name": "Joseph O",
        "timestamp": 1647128917
    },
    {
        "content": "<p>So i rewrote my nth function with this new <code>Fin'</code>, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">αs.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">αs.get'</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.nth</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but, <br>\nwhen i try to run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>, it gives this error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">nth</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">!!</span><span class=\"s2\">\"2\"</span><span class=\"bp\">!!</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">!!</span><span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Float</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List.get'</span> <span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Float</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Float</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.MetaEval</span> <span class=\"o\">(</span><span class=\"n\">List.get'</span> <span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Float</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Float</span><span class=\"o\">])</span> <span class=\"o\">})</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span> <span class=\"n\">implementing</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Repr</span><span class=\"bp\">`</span> <span class=\"kd\">class</span> <span class=\"n\">also</span> <span class=\"n\">implements</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Lean.MetaEval</span><span class=\"bp\">`</span> <span class=\"kd\">class</span>\n</code></pre></div>",
        "id": 275126649,
        "sender_full_name": "Joseph O",
        "timestamp": 1647135428
    },
    {
        "content": "<p>What's the definition of <code>List.get'</code>? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 275128564,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647138665
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 275129620,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647140535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.get'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as.get'</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 275129845,
        "sender_full_name": "Joseph O",
        "timestamp": 1647140936
    },
    {
        "content": "<p>The error message says you need to tell Lean how to display/print the result.</p>",
        "id": 275130048,
        "sender_full_name": "Chris B",
        "timestamp": 1647141260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> During typeclass resolution, Lean only unfolds definitions tagged as <code>[reducible]</code>. The motivation is to control the cost of this procedure. The result type of your example depends on <code>List.get'</code>. Thus, Lean fails to build the <code>Repr</code> instance for the type. Here is a working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">List.get'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get'</span> <span class=\"n\">as</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HList.nth</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">αs.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">αs.get'</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.nth</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"#(\"</span> <span class=\"n\">a</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"⟫\"</span>  <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⟪</span> <span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.nil</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⟪</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.cons</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">HList.nil</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⟪</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.cons</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">⟪$</span><span class=\"n\">as</span><span class=\"o\">,</span><span class=\"bp\">*⟫</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275130294,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647141675
    },
    {
        "content": "<p>Another trick you can use is to tell Lean what type containing the <code>List.get'</code> reduces too. The type checker will make sure you provided the correct type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>You can also define your own identity function where all arguments are explicit.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">the</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 275131125,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647143119
    },
    {
        "content": "<p>I pushed a small improvement to the <code>#eval</code> command. Now, when it fails to construct the <code>MetaEval</code> instance, it reduces the result type and tries again. The next nighly build should have this improvement, and your example will work without any tricks.</p>",
        "id": 275131646,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647144008
    },
    {
        "content": "<p>I also added this example to the test suite: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/hlistOverload.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/hlistOverload.lean</a></p>",
        "id": 275131830,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647144219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275131830\">said</a>:</p>\n<blockquote>\n<p>I also added this example to the test suite: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/hlistOverload.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/hlistOverload.lean</a></p>\n</blockquote>\n<p>Im honored, though how were you still able to use the brackets? I remember when I was creating the macro, it would give me an error saying that <code>[]</code> was already taken</p>",
        "id": 275150812,
        "sender_full_name": "Joseph O",
        "timestamp": 1647174322
    },
    {
        "content": "<p>ah, you gave it a name. Got it. Ive always wanted to use the brackets</p>",
        "id": 275150968,
        "sender_full_name": "Joseph O",
        "timestamp": 1647174496
    },
    {
        "content": "<p>Ah, its actually the <code>kind</code> tag.</p>",
        "id": 275150997,
        "sender_full_name": "Joseph O",
        "timestamp": 1647174548
    },
    {
        "content": "<p>I will keep that in mind for my future macros, thanks</p>",
        "id": 275151002,
        "sender_full_name": "Joseph O",
        "timestamp": 1647174559
    },
    {
        "content": "<p>Do you mind explaining why this error? <a href=\"/user_uploads/3121/ir97eyHX-2u9mwgvHGPLOm6F/image.png\">image.png</a> <br>\nit has to do with using HList</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ir97eyHX-2u9mwgvHGPLOm6F/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ir97eyHX-2u9mwgvHGPLOm6F/image.png\"></a></div>",
        "id": 275159502,
        "sender_full_name": "Joseph O",
        "timestamp": 1647184462
    },
    {
        "content": "<p>Does the notation work outside of <code>match</code>? For instance, in <code>#check [1, \"2\"]</code>?</p>",
        "id": 275160530,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647185897
    },
    {
        "content": "<p>Might it be because there is some <code>ToString</code> instance for <code>Nat</code>? (just guessing)</p>",
        "id": 275160566,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647185974
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/LNRXjtQDtHHKrP1POkk2LFT9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LNRXjtQDtHHKrP1POkk2LFT9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LNRXjtQDtHHKrP1POkk2LFT9/image.png\"></a></div>",
        "id": 275160634,
        "sender_full_name": "Joseph O",
        "timestamp": 1647186044
    },
    {
        "content": "<p>And the same if you don't explicitely annotate the type in <code>check</code>?</p>",
        "id": 275160698,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186151
    },
    {
        "content": "<p>It can't decide whether Im refering to list or hlist <a href=\"/user_uploads/3121/qiwSBat_Y19o0BZZu5kex2Q5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qiwSBat_Y19o0BZZu5kex2Q5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qiwSBat_Y19o0BZZu5kex2Q5/image.png\"></a></div>",
        "id": 275160814,
        "sender_full_name": "Joseph O",
        "timestamp": 1647186342
    },
    {
        "content": "<p>Or maybe a better experiment to test the <code>ToString</code> speculation, would <code>#check ([1, \"2\"] : List String)</code> also work? (I'm not really sure that what I'm saying makes sense)</p>",
        "id": 275160818,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186348
    },
    {
        "content": "<p>Oh, so it seems that's it then</p>",
        "id": 275160864,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186379
    },
    {
        "content": "<p>1 can be implicitely converted to the String \"1\"</p>",
        "id": 275160877,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186413
    },
    {
        "content": "<p>Same error <a href=\"/user_uploads/3121/nHUpMASmrJvJvDdv_c5ztUEL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nHUpMASmrJvJvDdv_c5ztUEL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nHUpMASmrJvJvDdv_c5ztUEL/image.png\"></a></div>",
        "id": 275160880,
        "sender_full_name": "Joseph O",
        "timestamp": 1647186416
    },
    {
        "content": "<p>Maybe if you write <code>(1 : Nat)</code> inside the list notation? Though I'm skeptical, it is probably the same thing</p>",
        "id": 275161126,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186810
    },
    {
        "content": "<p>Sorry, I don't know how to fix this, we'll have to wait for someone who knows better. At least it seems that we've figured out the root cause</p>",
        "id": 275161181,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647186876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>  You have to get the most recent nightly build. The support for overloaded notations in patterns has been implemented a few days ago.</p>",
        "id": 275161969,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647187753
    },
    {
        "content": "<p>Ah I see. Let me update.</p>",
        "id": 275161975,
        "sender_full_name": "Joseph O",
        "timestamp": 1647187772
    },
    {
        "content": "<p>Huh, seems like im on the latest.</p>",
        "id": 275162047,
        "sender_full_name": "Joseph O",
        "timestamp": 1647187890
    },
    {
        "content": "<p><code>leanprover/lean4:nightly-2022-03-09</code></p>",
        "id": 275162099,
        "sender_full_name": "Joseph O",
        "timestamp": 1647187930
    },
    {
        "content": "<p>I also have to use the same version as mathlib, or else I get errors.</p>",
        "id": 275162185,
        "sender_full_name": "Joseph O",
        "timestamp": 1647188050
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly\\bin\\lake.exe print-paths Init Mathlib.Data.Nat.Basic` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly\\bin\\lean.exe .\\lean_packages\\mathlib\\.\\.\\Mathlib\\Init\\Logic.lean -R .\\lean_packages\\mathlib\\.\\. -o .\\lean_packages\\mathlib\\.\\build\\lib\\Mathlib\\Init\\Logic.olean -i .\\lean_packages\\mathlib\\.\\build\\lib\\Mathlib\\Init\\Logic.ilean -c .\\lean_packages\\mathlib\\.\\build\\ir\\Mathlib\\Init\\Logic.c</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">371</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">decidable_of_decidable_of_iff'</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">377</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">decidable_of_decidable_of_iff'</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">455</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.10918</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">456</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.10918</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">453</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">if_ctx_simp_congr_prop'</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">460</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.11110</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">461</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">if_ctx_simp_congr_prop'</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">458</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">if_simp_congr_prop'</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">480</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.11607</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">481</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.11607</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Mathlib</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">475</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">dif_ctx_simp_congr'</span>\n\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly\\bin\\lean.exe exited with status 1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">build</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>its honestly really annoying tbh</p>",
        "id": 275162300,
        "sender_full_name": "Joseph O",
        "timestamp": 1647188215
    },
    {
        "content": "<p>This is the latest <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-03-13\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-03-13</a><br>\nI just added your example to the test suite: <a href=\"https://github.com/leanprover/lean4/commit/672a889c83cfc00a07a78a28a9d9d99ae1a41162\">https://github.com/leanprover/lean4/commit/672a889c83cfc00a07a78a28a9d9d99ae1a41162</a></p>",
        "id": 275162319,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647188256
    },
    {
        "content": "<p>It works now, thanks!</p>",
        "id": 275162397,
        "sender_full_name": "Joseph O",
        "timestamp": 1647188385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275162185\">said</a>:</p>\n<blockquote>\n<p>I also have to use the same version as mathlib, or else I get errors.</p>\n</blockquote>\n<p>Recent changes in Lean seem to have broken Mathlib 4. It will be fixed soon.</p>",
        "id": 275162445,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647188404
    },
    {
        "content": "<p>Mathlib4 has been updated to today's nightly now</p>",
        "id": 275165559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647192605
    },
    {
        "content": "<p>Small questions:</p>\n<ol>\n<li>What does <code>Nat.lt_of_succ_lt_succ</code> do, and why was it used here <code>| a::as, ⟨i+1, h⟩ =&gt; get as ⟨i, Nat.lt_of_succ_lt_succ h⟩</code>?</li>\n<li>What does <code>Nat.succ_pos</code> do?</li>\n<li>Why did lean need this instance, </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n</code></pre></div>\n<p>and how exactly in the second argument of the <code>Fin'</code> working in this instance?<br>\n4</p>",
        "id": 275166686,
        "sender_full_name": "Joseph O",
        "timestamp": 1647194254
    },
    {
        "content": "<p>Sorry for all the questions, but Im quite new to this way of programming</p>",
        "id": 275166692,
        "sender_full_name": "Joseph O",
        "timestamp": 1647194271
    },
    {
        "content": "<p>If only the functions had docstrings. But that's ok.</p>",
        "id": 275168448,
        "sender_full_name": "Joseph O",
        "timestamp": 1647196662
    },
    {
        "content": "<p>The core team is doing so much work already <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 275168508,
        "sender_full_name": "Joseph O",
        "timestamp": 1647196704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275168448\">said</a>:</p>\n<blockquote>\n<p>If only the functions had docstrings. But that's ok.</p>\n</blockquote>\n<p>Awaiting your diff <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 275168520,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647196741
    },
    {
        "content": "<p>I would if I knew what they did lol</p>",
        "id": 275168599,
        "sender_full_name": "Joseph O",
        "timestamp": 1647196836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275166686\">said</a>:</p>\n<blockquote>\n<p>What does <code>Nat.lt_of_succ_lt_succ</code> do, and why was it used here <code>| a::as, ⟨i+1, h⟩ =&gt; get as ⟨i, Nat.lt_of_succ_lt_succ h⟩</code>?</p>\n</blockquote>\n<p>The type of <code>Nat.lt_of_succ_lt_succ</code> should tell you everything about it; it just says that <code>n + 1 &lt; m + 1</code> implies <code>n &lt; m</code>.<br>\nSimilar for <code>Nat.succ_pos</code>, the type gives you all the information.</p>\n<p><code>get</code> expects something of type <code>Fin as.length</code>, which is a structure that contains a <code>Nat</code> and a proof that this nat is <code>&lt; as.length</code></p>",
        "id": 275175710,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647206572
    },
    {
        "content": "<p>In mathlib we give docstrings to all our definitions but to very few of our proofs for precisely this reason: the type of the proof tells you what it's a proof of.</p>",
        "id": 275176687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647208124
    },
    {
        "content": "<p>Ok, but the question unanswered: <code>Why did lean need this instance?</code></p>",
        "id": 275183361,
        "sender_full_name": "Joseph O",
        "timestamp": 1647217559
    },
    {
        "content": "<p>Refer back to <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/274923011\">here</a>. The <code>OfNat (Fin' (List.length (a :: as))) (nat_lit 0)</code> instance means that when interpreting <code>0</code> as an element of <code>Fin' (List.length (a :: as))</code> it will use this instance to supply the value</p>",
        "id": 275188137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647224808
    },
    {
        "content": "<p>without it, <code>0 : Fin' (List.length (a :: as))</code> will not typecheck</p>",
        "id": 275188158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647224855
    },
    {
        "content": "<p>and with it, this expands to <code>⟨0, (Nat.succ_pos _ : Nat.lt 0 (List.length (a :: as)))⟩ : Fin' (List.length (a :: as))</code></p>",
        "id": 275188218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647224918
    },
    {
        "content": "<p>Ah I see. But what about any other literal?</p>",
        "id": 275188396,
        "sender_full_name": "Joseph O",
        "timestamp": 1647225156
    },
    {
        "content": "<p>I remember that they are handled.</p>",
        "id": 275188421,
        "sender_full_name": "Joseph O",
        "timestamp": 1647225183
    },
    {
        "content": "<p>No other literal will work in the type <code>Fin' (List.length (a :: as))</code>, as you can observe</p>",
        "id": 275189939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647227392
    },
    {
        "content": "<p>Like Leo said, this instance only works for <code>0</code></p>",
        "id": 275189993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647227417
    },
    {
        "content": "<p>And indeed it wouldn't be reasonable for any other literal to work because <code>1</code> might not actually be in the type if <code>as</code> is the empty list</p>",
        "id": 275190019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647227456
    },
    {
        "content": "<p>if <code>as = []</code> then this type is <code>Fin' 1</code> which only has a <code>0</code></p>",
        "id": 275190028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647227470
    },
    {
        "content": "<p>So maybe you want an instance for <code>1 : Fin' (List.length (a :: b :: as))</code> as well, and this just gets back to why this is a terrible idea</p>",
        "id": 275190084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647227543
    },
    {
        "content": "<p>So then why did my code work?</p>",
        "id": 275226589,
        "sender_full_name": "Joseph O",
        "timestamp": 1647259809
    },
    {
        "content": "<p>I remember I made a function with a generic type that needed to be added, and it need an <code>[OfNat a  0]</code> instance as well. Why does it only need to know 0? Is this all the information it needs? What does the <code>OfNat</code> instance tell about a type?</p>",
        "id": 275226813,
        "sender_full_name": "Joseph O",
        "timestamp": 1647260022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275189939\">said</a>:</p>\n<blockquote>\n<p>No other literal will work in the type <code>Fin' (List.length (a :: as))</code>, as you can observe</p>\n</blockquote>\n<p>Besides 0?</p>",
        "id": 275226882,
        "sender_full_name": "Joseph O",
        "timestamp": 1647260057
    },
    {
        "content": "<p>Ok so i was trying to decipher this part of one of the instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.lt_of_not_le</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So far I have:<br>\nNat.lt_of_not_le takes in two nats and a proof of <code>~ a &lt;= b</code>, and returns a proof that <code>b &lt; a</code>.  I don't know where you are giving in the two nats, but <code>fun h =&gt; ne_of_gt IsPos.pos (Nat.sub_eq_zero_iff_le.2 h)</code> is the proof of <code>~ a &lt;= b</code>, which is evident from the type signature <code>n ≤ i → False</code> (I have no idea how the <code>n</code> and <code>i</code> get in the signature.  In the body, you then prove that <code>a /= b</code> by giving in a proof of <code>b &lt; a</code> to <code>Nat.ne_of_gt</code> (where are you giving in the two nats). I don't know what the <code>IsPos.pos</code> arg is doing there, as it is only proving that <code>0 &lt; n</code>,  and after that you are taking the second element of  <code>Nat.sub_eq_zero_iff_le</code> which is <code>Nat.sub_eq_zero_of_le</code> and giving in h which I have which has a signature of <code>n &lt;= i</code>, which we are trying to prove false. in short, i have no idea how this is working</p>",
        "id": 275286926,
        "sender_full_name": "Joseph O",
        "timestamp": 1647286219
    },
    {
        "content": "<p>First thing you need to know is that lean has implicit arguments, so if you give <code>~ a &lt;= b</code> to <code>Nat.lt_of_not_le</code>, it can figure out the <code>a</code> and <code>b</code> itself</p>",
        "id": 275288749,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647287255
    },
    {
        "content": "<p>If <code>h</code> is a term of type <code>n &lt;= i</code>, then <code>Nat.sub_eq_zero_iff_le.2 h</code> is a term of type <code>n - i = 0</code>.<br>\n<code>ne_of_gt</code> takes a term of type <code>x &gt; y</code> (not sure what they are here) and gives a term of type <code>x /= y</code> or <code>x = y → false</code>; if you then apply that to an equality (<code>n - i = 0</code>), you get <code>false</code>.<br>\nSo I'm guessing <code>x = n - i</code>, <code>y = 0</code>, so <code>IsPos.pos</code> must be <code>x - i &gt; 0</code>?</p>",
        "id": 275289631,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647287735
    },
    {
        "content": "<p>yeah</p>",
        "id": 275289719,
        "sender_full_name": "Joseph O",
        "timestamp": 1647287773
    },
    {
        "content": "<p>Does that connect a few dots? :)</p>",
        "id": 275289726,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647287777
    },
    {
        "content": "<p>I have to read it again but yeah</p>",
        "id": 275289749,
        "sender_full_name": "Joseph O",
        "timestamp": 1647287791
    },
    {
        "content": "<p>:)</p>",
        "id": 275289756,
        "sender_full_name": "Joseph O",
        "timestamp": 1647287797
    },
    {
        "content": "<p>offtopic: I remember being mind blown by these crazy types when I only knew simple types like <code>int</code>, <code>float</code>, <code>string</code> etc</p>",
        "id": 275291139,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647288250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 275456000,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647392322
    },
    {
        "content": "<p>Wait, so this whole time</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>what the equivalent of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)))⟩⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_not_le</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 275456025,
        "sender_full_name": "Joseph O",
        "timestamp": 1647392353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Fin.20without.20wrapping/near/275289631\">said</a>:</p>\n<blockquote>\n<p>If <code>h</code> is a term of type <code>n &lt;= i</code>, then <code>Nat.sub_eq_zero_iff_le.2 h</code> is a term of type <code>n - i = 0</code>.<br>\n<code>ne_of_gt</code> takes a term of type <code>x &gt; y</code> (not sure what they are here) and gives a term of type <code>x /= y</code> or <code>x = y → false</code>; if you then apply that to an equality (<code>n - i = 0</code>), you get <code>false</code>.<br>\nSo I'm guessing <code>x = n - i</code>, <code>y = 0</code>, so <code>IsPos.pos</code> must be <code>x - i &gt; 0</code>?</p>\n</blockquote>\n<p>yeah so now the only thing i don't understand is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ne_of_gt</span> <span class=\"n\">IsPos.pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_eq_zero_iff_le.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275456055,
        "sender_full_name": "Joseph O",
        "timestamp": 1647392391
    },
    {
        "content": "<p>What is your question about it?</p>",
        "id": 275459095,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647395723
    },
    {
        "content": "<p>Do you know that <code>f a b</code> is actually <code>(f a) b</code>, where f is a function that takes a and returns another function that takes b?<br>\nAlso, that <code>x ≠ y</code>is really a function that takes a proof of <code>x = y</code>to false?</p>",
        "id": 275471591,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647412023
    }
]