[
    {
        "content": "<p>Equality of types is a dangerous thing in dependent type theory. <del>The theorem might not even be true! In the \"cardinality\" model of type theory, every countably infinite type (e.g. <code>Vector 1</code>, <code>Vector 2</code>, <code>Vector 37</code> etc) is under the hood just defined to be (a type synonym for) <code>Nat</code> with the right structure on top, and in this model <code>Vector 1 = Vector 2</code> by abuse of definitional equality.</del>(the cardinality of <code>Vector n</code> is <code>k^n</code> where <code>k</code> is the cardinality of <code>Char</code> so this is fine)</p>",
        "id": 316961852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671546165
    },
    {
        "content": "<p>Injectivity of type formers is generally false in lean, which means it probably won't be as easy to prove as <code>this_one_works</code>. In this case, your best bet would probably be to use some form of cardinality argument.</p>",
        "id": 316961897,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1671546179
    },
    {
        "content": "<p><del>The cardinality argument doesn't work because all <code>Vector n</code> have the same cardinality for n &gt; 0.</del></p>",
        "id": 316961980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671546205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think <code>Char</code> is finite</p>",
        "id": 316962031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671546222
    },
    {
        "content": "<p>It is finite</p>",
        "id": 316962162,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1671546256
    },
    {
        "content": "<p>Oh apologies! In which case Arthur is correct, and that will teach me to read the question properly. Probably Johan is also correct though in that the theorem is probably annoying to prove and also not useful.</p>",
        "id": 316962211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671546268
    },
    {
        "content": "<p>That's alright, but I do agree that it's most probably unprovable for vectors containing terms of a non-finite type</p>",
        "id": 316962419,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1671546330
    },
    {
        "content": "<p>Right -- if <code>Char</code> were replaced with <code>Nat</code> then I think the theorem will be unprovable (that was my original incorrect reading of the question)</p>",
        "id": 316962789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671546427
    },
    {
        "content": "<p>In this case here, <code>Char</code> is encoded with <code>UInt32</code>s, which are themselves encoded with a <code>Fin</code> type, which means some form of basic formalization of the cardinality of finite types would make the proof pretty straightforward. Perhaps cardinals may have already been ported to Mathlib4, in which case it would be best to make use of it for this proof IMO</p>",
        "id": 316963442,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1671546612
    },
    {
        "content": "<p>Unfortunately my real Vector type is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">vnil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">vcons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And <code>α</code> is definitely not finite. I'll try something else, thank you for your help!</p>",
        "id": 316964196,
        "sender_full_name": "David Hamelin",
        "timestamp": 1671546842
    },
    {
        "content": "<p>You could prove the theorem under the hypothesis <code>[finite α]</code></p>",
        "id": 316967670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671547765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"566134\">David Hamelin</span> has marked this topic as resolved.</p>",
        "id": 316967686,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671547768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20injectivity.20of.20inductive.20type.20function/near/316967670\">said</a>:</p>\n<blockquote>\n<p>You could prove the theorem under the hypothesis <code>[finite α]</code></p>\n</blockquote>\n<p>I will try this as a last resort, but I think what I'm trying to prove should be true even if <code>α</code> is not finite</p>",
        "id": 316968137,
        "sender_full_name": "David Hamelin",
        "timestamp": 1671547888
    },
    {
        "content": "<p>As I already tried to explain (and crossed out earlier), there is a model of type theory where your theorem is false (if alpha is infinite), and hence your theorem cannot be provable in Lean even if it happens to be true in Lean's model of type theory (because Lean proofs will apply in all models of Lean's type theory).</p>",
        "id": 316970827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671548580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20injectivity.20of.20inductive.20type.20function/near/316970827\">said</a>:</p>\n<blockquote>\n<p>As I already tried to explain (and crossed out earlier), there is a model of type theory where your theorem is false (if alpha is infinite), and hence your theorem cannot be provable in Lean even if it happens to be true in Lean's model of Lean's type theory (because Lean proofs will apply to all models of Lean's type theory).</p>\n</blockquote>\n<p>Yes, I do understand that the theorem <code>no_idea</code> cannot be proved in general. </p>\n<p>When I said \"what I'm trying to prove\" I referred to another bigger theorem that would have been solved by this lemma. Sorry for the confusion</p>",
        "id": 316973672,
        "sender_full_name": "David Hamelin",
        "timestamp": 1671549360
    }
]