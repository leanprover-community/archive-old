[
    {
        "content": "<p>I am getting an error trying to define the ToString instance of my Term here: <code>Failed to synthesize instance  ToString Term</code>.</p>\n<p>Does this just mean I can't define the ToString instance and used it at the same time and that I need to extract the toString logic as a separate definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Dup</span> <span class=\"o\">(</span><span class=\"n\">nam0</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name1</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Let</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">argm</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ctr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">U32</span> <span class=\"o\">(</span><span class=\"n\">numb</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Op2</span> <span class=\"o\">(</span><span class=\"n\">oper</span> <span class=\"o\">:</span> <span class=\"n\">Operation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val0</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val1</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Dup</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"dup {n0} {n1} = {e} {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Let</span> <span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"let {n} = {e}; {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"λ{n} {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({f} {a})\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Ctr</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.U32</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Op2</span> <span class=\"n\">op</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({op} {v0} {v1})\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Dup</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"dup {n0} {n1} = {e} {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Let</span> <span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"let {n} = {e}; {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"λ{n} {b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({f} {a})\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Ctr</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.U32</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.Op2</span> <span class=\"n\">op</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({op} {v0} {v1})\"</span>\n</code></pre></div>",
        "id": 272456676,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1645218010
    },
    {
        "content": "<p>I seems that you can't. Here's a hack that allows you to use the <code>s!</code> notation recursively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">toStr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">toStr</span><span class=\"o\">⟩</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Dup</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"dup {n0} {n1} = {e} {b}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Let</span> <span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"let {n} = {e}; {b}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"λ{n} {b}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.App</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({f} {a})\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Ctr</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.U32</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Term.Op2</span> <span class=\"n\">op</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({op} {v0} {v1})\"</span>\n    <span class=\"n\">toStr</span>\n</code></pre></div>\n<p>But it only gives you a <code>partial instance</code>. Maybe you can prove it terminating somehow, but I don't know how.</p>",
        "id": 272462208,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645221010
    },
    {
        "content": "<p>Thank you!</p>\n<p>So, even though there are a few cases that are not recursive, the inductive type can always be infinite. It seems that unless I can add some sort of tree height check or something like that I would never be able to prove termination (assuming I understand your point correctly)</p>\n<p>In this case, shouldn't <code>partial</code> be enough to define my instance without the alternative you provided?</p>",
        "id": 272464016,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1645221849
    },
    {
        "content": "<p>Since the recursive calls occur only on smaller terms, it should be possible to somehow prove termination, I just don't know how.</p>",
        "id": 272504094,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645260244
    },
    {
        "content": "<p>Should <code>partial</code> be enough to do the job? I don't know. Currently, the new instance gets registered only when the command is completed. Maybe the <code>instance</code> command could be extended to allow this recursive behavior.</p>",
        "id": 272504159,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645260344
    }
]