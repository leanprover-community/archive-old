[
    {
        "content": "<p>I do competitive programming. I need to submit Lean 4 code to online judges. Online judges don't support Lean 4 so I have to find a way to wrap Lean 4 in a more common language. For example, if there is an easy way to compile Lean 4 code to WebAssembly, I could just do it and wrap the WebAssembly code in Node.js. Alas, there isn't. The most popular online judge is Codeforces. To view the list of languages Codeforces supports, head over to <a href=\"https://codeforces.com/contest/1281/status\">https://codeforces.com/contest/1281/status</a> and click the \"Any language\" drop-down box. Could you give me some hacky ideas that I can attempt so I can submit Lean code there?</p>\n<p>Codeforces runs on Windows. Other online judges mostly run on Linux.</p>",
        "id": 291210518,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659022651
    },
    {
        "content": "<p>If you're feeling motivated, I believe it's possible to generate Haskell code from Lean 4 code via metaprogramming. That is, you create a Lean 4 program that runs <code>Lean.Elab.runFrontend</code> on a Lean 4 source and then you work your way through the environment that's generated</p>",
        "id": 291225112,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659029013
    },
    {
        "content": "<p>An <code>Environment</code> is mainly a set of \"constants\": axioms, theorems, definitions, inductives etc</p>",
        "id": 291225293,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659029078
    },
    {
        "content": "<p>This is not too simple though. You want to make sure that your Lean 4 source doesn't make use of things that are implemented externally via FFI so everything you're transpiling is implemented in Lean 4 itself.</p>\n<p>Also, the environment contains a lot of things that you won't need. So you better start your transpilation routine from some <code>main</code> function and dig the environment on demand</p>",
        "id": 291228750,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659030809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"511228\">@Huỳnh Trần Khanh</span> I guess you could conceivable submit the compiled C code Lean produces?</p>",
        "id": 291233598,
        "sender_full_name": "Mac",
        "timestamp": 1659033237
    },
    {
        "content": "<p>Doesn't the generated code depend on a runtime library? I guess we also need to copy and paste the runtime library too as well right?</p>",
        "id": 291286946,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659075137
    },
    {
        "content": "<p>Also, I can't submit too much code.</p>",
        "id": 291286953,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659075158
    },
    {
        "content": "<p>Here's a concrete challenge. Solve <a href=\"https://codeforces.com/problemset/problem/4/A\">this problem</a> with Lean. Then tell me how you do it.</p>",
        "id": 291287207,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659075492
    },
    {
        "content": "<p>If this is not possible, I still have another hack. I'll make my own programming language! And then I'll make a transpiler into Lean and a transpiler into C++. It's not ideal but I have too much free time and I'm willing to do anything to make this stuff work. This is a new frontier after all.</p>\n<p>I just want to kiss deep embedding goodbye.</p>",
        "id": 291287621,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659076017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291225112\">said</a>:</p>\n<blockquote>\n<p>If you're feeling motivated, I believe it's possible to generate Haskell code from Lean 4 code via metaprogramming. That is, you create a Lean 4 program that runs <code>Lean.Elab.runFrontend</code> on a Lean 4 source and then you work your way through the environment that's generated</p>\n</blockquote>\n<p>Doesn't that assume that the semantics of (non-tactic) lean code embed faithfully in haskell? A cursory google suggests haskell doesn't really support dependent types</p>",
        "id": 291303421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659089156
    },
    {
        "content": "<p>Honestly, if I'm good enough to follow Arthur's approach then I might as well join the Lean development team. It's probably as complex as making a new compilation target. And we know all too well how arduous this work is...</p>",
        "id": 291305298,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659090594
    },
    {
        "content": "<p>I mean translating to Haskell is a new compilation target :P </p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291303421\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291225112\">said</a>:</p>\n<blockquote>\n<p>If you're feeling motivated, I believe it's possible to generate Haskell code from Lean 4 code via metaprogramming. That is, you create a Lean 4 program that runs <code>Lean.Elab.runFrontend</code> on a Lean 4 source and then you work your way through the environment that's generated</p>\n</blockquote>\n<p>Doesn't that assume that the semantics of (non-tactic) lean code embed faithfully in haskell? A cursory google suggests haskell doesn't really support dependent types</p>\n</blockquote>\n<p>We can already translate Lean code to semantically equivalent C code so I dont see why we shouldn't be able to build Haskell code, just because the original source was Lean doesnt mean the dependent types have to be preserved as the C backend shows</p>",
        "id": 291305471,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659090742
    },
    {
        "content": "<p>I was reading the suggestion as \"it's a straightforward 1:1 mapping\", which I'm sure is not really true at all for the C compilation</p>",
        "id": 291305516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659090805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"511228\">@Huỳnh Trần Khanh</span>, have you taken a look at the C code output to see how viable using it would be?</p>",
        "id": 291305537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659090840
    },
    {
        "content": "<p>The C output is really not nice to the reader, all variable names are replaced with <code>xN</code> where <code>N</code> is some number, constructors are referred to by numbers etc. And it is also quite long so the \"too much code\" criteria will hit sooner or later I assume.</p>",
        "id": 291305737,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659091000
    },
    {
        "content": "<p>To demonstrate this is the first few lines of C in the main function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">_lean_main</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">{</span>\n<span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n<span class=\"n\">x_2</span> <span class=\"bp\">=</span> <span class=\"n\">lean_get_stdin</span><span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_3</span> <span class=\"bp\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">x_3</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_4</span> <span class=\"bp\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">x_4</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_5</span> <span class=\"bp\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"o\">(</span><span class=\"n\">x_3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">x_5</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">x_3</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_6</span> <span class=\"bp\">=</span> <span class=\"n\">lean_apply_1</span><span class=\"o\">(</span><span class=\"n\">x_5</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputLine</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"n\">kilos</span> <span class=\"o\">:=</span> <span class=\"n\">inputLine.toNat</span><span class=\"bp\">!</span>\n  <span class=\"k\">if</span> <span class=\"n\">kilos</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Yes\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"No\"</span>\n</code></pre></div>\n<p>If you are wondering, the x_1 it is pulling through to getStdin etc. is indeed <code>RealWorld</code>.</p>",
        "id": 291306174,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659091371
    },
    {
        "content": "<p>Ugh. All the refcount calls, and also there is the runtime library that I need to copy and paste too. </p>\n<blockquote>\n<p>The size of the file with the source code shouldn't exceed 64 kilobytes. <a href=\"https://codeforces.com/blog/entry/4088\">https://codeforces.com/blog/entry/4088</a></p>\n</blockquote>",
        "id": 291306785,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659091747
    },
    {
        "content": "<p>Is there a condition that <code>kilos</code> should be at least 4, in the question?  In the solution?  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 291306944,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659091861
    },
    {
        "content": "<p>Will the massive amount of code prevent us from solving <a href=\"https://codeforces.com/problemset/problem/4/A\">Watermelon</a>? Too bad I still don't have Lean 4 installed on my machine, maybe this evening (read: in a few hours) I can get this sorted out.</p>",
        "id": 291306958,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659091870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291306944\">said</a>:</p>\n<blockquote>\n<p>Is there a condition that <code>kilos</code> should be at least 4, in the question?  In the solution?  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>You have to check for that.</p>",
        "id": 291307101,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659091967
    },
    {
        "content": "<p>if the weight is less than 4 or the weight is odd then no, otherwise yes</p>",
        "id": 291307139,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659091994
    },
    {
        "content": "<p>That's the solution</p>",
        "id": 291307142,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659091998
    },
    {
        "content": "<p>The problem statement says you need to handle any integer from 1 to 100</p>",
        "id": 291307285,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092069
    },
    {
        "content": "<p>Right, but the proposed solution seems to give the wrong answer for input 2.</p>",
        "id": 291307321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659092094
    },
    {
        "content": "<p>What do you mean? The answer is no for 2.</p>",
        "id": 291307475,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092192
    },
    {
        "content": "<p>Indeed, but I <em>think</em> that the code that Henrik sent will answer yes.</p>",
        "id": 291307532,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659092238
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291307536,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> could you fix the bug in your solution and then submit it to Codeforces?</p>",
        "id": 291307668,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092348
    },
    {
        "content": "<p>That won't work it requires an <code>#include &lt;lean/lean.h&gt;</code> at the top</p>",
        "id": 291307702,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659092385
    },
    {
        "content": "<p>You can post the C code and I'll submit it for you.</p>",
        "id": 291307703,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291307702\">said</a>:</p>\n<blockquote>\n<p>That won't work it requires an <code>#include &lt;lean/lean.h&gt;</code> at the top</p>\n</blockquote>\n<p>Yeah so you need to copy and paste the entire runtime library too...</p>",
        "id": 291307786,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092425
    },
    {
        "content": "<p>Not just the header, I guess even the whole implementation...</p>",
        "id": 291307828,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659092455
    },
    {
        "content": "<p>Exactly^^</p>",
        "id": 291307835,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659092463
    },
    {
        "content": "<p>can yo use <a href=\"http://repl.it\">repl.it</a> as an evaluator? I hear they are using nix-shell for their stuff and Lean does have nix support so maybe one can hack something together there.</p>",
        "id": 291307955,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659092528
    },
    {
        "content": "<p>I assume the runtime library in question is <a href=\"https://github.com/leanprover/lean4/tree/f6b6b36f47909fe8a089c16efdb87372154e7efa/src/runtime\">https://github.com/leanprover/lean4/tree/f6b6b36f47909fe8a089c16efdb87372154e7efa/src/runtime</a></p>",
        "id": 291307991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659092560
    },
    {
        "content": "<p>Transpiling a Lean <code>Environment</code> to Haskell shouldn't be <em>too hard</em> either.</p>\n<p>We're doing a translation to a much simpler language called Lurk, but we have an involved step in the middle, which is content-addressing the declarations to an IR of our own: <a href=\"https://github.com/yatima-inc/yatima-lang\">https://github.com/yatima-inc/yatima-lang</a></p>\n<p>If you want you can use that as a reference and go straight to Haskell instead of taking the indirect path we are</p>",
        "id": 291308360,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659092905
    },
    {
        "content": "<p>I think where translating lean code to haskell gets tricky is when you do type computations, for example consider my (currrently compiler bugged but technically valid) code from the IR check thread:</p>",
        "id": 291308414,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659092961
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TupleNTyp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">TupleNTyp</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TupleN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">TupleNTyp</span> <span class=\"n\">n.val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"c1\">--  | 1 =&gt; Solo</span>\n<span class=\"c1\">--  | 2 =&gt; Prod</span>\n<span class=\"c1\">--  | 3 =&gt; fun a b c =&gt; Prod a (Prod b c)</span>\n</code></pre></div>\n<p>there is a translation for this to haskell that involves type families etc. (I got this idea from haskell code, I would have never had that idea myself my haskell foo is limited) but that is of course highly non trivial to do automatically</p>",
        "id": 291308478,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093009
    },
    {
        "content": "<p>I don't know if Haskell supports mutually recursive functions either</p>",
        "id": 291308604,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659093141
    },
    {
        "content": "<p>Oh of course haskell is mutually recursive by default, you can write declarations in whatever order you want</p>",
        "id": 291308618,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093163
    },
    {
        "content": "<p>(Note: techincally not 100% true there are cases where you can trick the haskell type checker into doing certain things that <em>do</em> make order matter but that is besides the point)</p>",
        "id": 291308648,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093192
    },
    {
        "content": "<p>Well, you can always restrict your transpilation to a subset of the source language</p>",
        "id": 291308659,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659093205
    },
    {
        "content": "<p>I would also be interested to see how highly typed things like this: <a href=\"https://github.com/hargoniX/cpdt-lean/blob/main/Cpdt/Chapter2/Typed.lean\">https://github.com/hargoniX/cpdt-lean/blob/main/Cpdt/Chapter2/Typed.lean</a> translate, specifically the <code>inductive</code> definitions and again type computations.</p>",
        "id": 291308765,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093268
    },
    {
        "content": "<p>Yes. Remember that in the end of the day we will be dealing with expressions. So the problem kind of boils down to being able to translate those</p>",
        "id": 291308907,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659093400
    },
    {
        "content": "<p>No, an <code>inductive</code> is not an expression it is an entire thing on its own</p>",
        "id": 291308941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093456
    },
    {
        "content": "<p>Yes, gotta encode indictives in a particular way. But doesn't Haskell have a good support for those already? That's why I mentioned Haskell</p>",
        "id": 291309035,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659093538
    },
    {
        "content": "<p>Inductives and recursors will be tricky</p>",
        "id": 291309077,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659093574
    },
    {
        "content": "<p>AFAIK Haskell has several concepts like their normal <code>data</code>, their GADT <code>data</code>, their <code>type family</code> and probably more that together have at least a great feature overlap with <code>inductive</code> from Lean. Though I'm guessing it is possible since Coq can do code extraction to Ocaml and Haskell already, that's probably where to look at if you want to know how to do this type of stuff</p>",
        "id": 291309373,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659093842
    },
    {
        "content": "<p>Quick question: The Lean runtime library doesn't depend on anything else except the standard C library right?</p>",
        "id": 291309731,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659094114
    },
    {
        "content": "<p>I could hack something up.</p>",
        "id": 291309739,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659094124
    },
    {
        "content": "<p>I swear if this is true then there's a reasonable way to submit code to Codeforces.</p>",
        "id": 291309784,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659094170
    },
    {
        "content": "<p>I believe it does still use GMP for Nat though there are plans to replace that (and they might have already gone through I'm not 100% up to date regarding this)</p>",
        "id": 291309875,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659094223
    },
    {
        "content": "<p>It depends on the C++ standard library too; indeed, the runtime is written in C++ and exposes a C interface</p>",
        "id": 291310437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659094646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291309875\">said</a>:</p>\n<blockquote>\n<p>I believe it does still use GMP for Nat though there are plans to replace that (and they might have already gone through I'm not 100% up to date regarding this)</p>\n</blockquote>\n<p>100% gone, just checked.</p>",
        "id": 291311039,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659095115
    },
    {
        "content": "<p>Also getting back to my previous idea, I think with this <a href=\"https://docs.replit.com/programming-ide/nix-on-replit\">https://docs.replit.com/programming-ide/nix-on-replit</a> it should be possible to just use Sebastian's nix environment for doing Lean on <a href=\"http://repl.it\">repl.it</a> so if there is some competetive programming that allows <a href=\"http://repl.it\">repl.it</a> as a runtime why not use that?</p>",
        "id": 291311193,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659095256
    },
    {
        "content": "<blockquote>\n<p>some competitive programming</p>\n</blockquote>\n<p>Sorry, there isn't.</p>",
        "id": 291311288,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659095314
    },
    {
        "content": "<p>We mostly use Codeforces.</p>",
        "id": 291311299,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659095329
    },
    {
        "content": "<p>I believe I can figure stuff out. Gotta get stuff installed first, brb</p>",
        "id": 291311467,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659095468
    },
    {
        "content": "<p>High level plan: pack everything into one single file, then put the file through some sort of transformation to make it smaller. I'll post more details when I get everything done.</p>",
        "id": 291311748,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659095698
    },
    {
        "content": "<p>Is this type of thing common? Do people often submit in languages not supported by codeforces via transpilation?</p>",
        "id": 291327623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659101897
    },
    {
        "content": "<p>Alternatively; is this a social problem that can be solved by asking CodeForces to add support for Lean4 directly?</p>",
        "id": 291327658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659101919
    },
    {
        "content": "<blockquote>\n<p>Is this type of thing common</p>\n</blockquote>\n<p>Yes, very common.</p>",
        "id": 291327868,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659102021
    },
    {
        "content": "<p>It's possible to ask Codeforces to add support for Lean 4. I just need to make enough noise on the blogs section.</p>",
        "id": 291327922,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659102061
    },
    {
        "content": "<p>Getting them to update regularly, however, is harder.</p>",
        "id": 291327952,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659102076
    },
    {
        "content": "<p>In codingames, folks would get around this by:</p>\n<ul>\n<li>compiling their program to binary (for the target system I guess)</li>\n<li>encode the binary as base85 text</li>\n<li>put the base85 text inside a C++ file with a bit of code to decode and run it.</li>\n</ul>\n<p>The primary use cases were:</p>\n<ul>\n<li>using compiler flags not supported by codingames</li>\n<li>using languages not supported by codingames</li>\n<li>being able to work with multiple files and have them put into a single file at the end</li>\n<li>compressing your code to get it to fit in the file size limits</li>\n</ul>\n<p>It was banded from the live competitions however, since it could be used to break rules, like stealing other peoples code and obfuscate it.</p>\n<p>Here is an example from <a href=\"https://www.codingame.com/forum/t/new-contests-rule/2895\">https://www.codingame.com/forum/t/new-contests-rule/2895</a></p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span><span class=\"cpf\">&lt;fstream&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">constexpr</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">en85</span><span class=\"p\">[]{</span><span class=\"s\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&amp;()*+-;&lt;=&gt;?@^_`{|}~\"</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">de85</span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">Base85_Binary</span><span class=\"p\">{</span><span class=\"s\">\"e??420s#R700000000000suY$0RR91C|p1Q00000KmY&amp;$00000000000000000000Kma%Z0sue&amp;000000RR911poj50000000000002M$00000002M$00000S#1CS00000S#1CS00000001BW000000RR911^@s6Fa`kt00000Fa}`&amp;00000Fa}`&amp;0000000000000000000000000001BW000008dcGSRZv(VKoJcV0000000{vA00{vA00IC2j{pDw4gdfE7y|%5k&lt;e?8OBwrZ#ah&lt;mg*02^c8;+YLrAR8lgjz+e_jGd&lt;!bi&amp;p*Z|gP)vrEP9f-Tqu}Hp&lt;)I?&lt;#{BaOLT&amp;I^&lt;Wp?5c7n5G$E*(xHVj?H9-}Znql!5$?bC{#O(2W2&gt;8Ef+FPx{&gt;SzBe&amp;gG7Y^z87M)&gt;shwaA&gt;?vI&gt;qBUm&lt;Wd)^08_&gt;#FsuM&lt;@c;nQSpWbINd*8H0{{SS)*zFtp_g_lo^`+%Mlb@yS%498#6ABaeO91qYmjU%QP&amp;Phm&gt;-pEym?|u$ZmK8x1hiStq#=uzpO_9AfF|0_xZN7mg)V7aE&lt;!|GZX?NgHXwdw9oq`DDnm%cvs`ng`f2eM48E&gt;w42w1_IJH)e4DKKLw37Mv#*2w#a2Q(V|yA`Xm3A&amp;%)l%Dx2;ZAXp}myw~a!JBCW6`*=b@mZ#-s&lt;lG}@0=xT4;aQheLF`zSXuO1Pjd{hE=3w_Z^deO3lmYWYRwVSzjcP`uL2Bzjvs&amp;3w})EDe-w8g_ZR~%|tR3uP@v%G3@^Vp^GN*#*DO6;uFv4IUl9;B2q$F!cmU3&gt;Dvxx!M;jf)aZz!vC4Gw&amp;_#8{`Ev$oEtt=k7fU)dgaf^7K&lt;&lt;-UUkl=l&amp;h%*F8yJmZnhdS{QRDg&lt;dn*@c88+BOmOY+Kp8Y3Map42~o(hWIkG+m#p`9ka9s*U9rs#GTcPTy58RW$QSQepl$9sT(&amp;R|hj%MnqW{(8K_;L-RlgGv&lt;V4!`Yd8#Ql6BBQBHa|bV#cE-NBBJmmA==+S1U?wF0Tq-W&amp;}l2Ih&lt;v^k$82s00Fk1I7D!+_DlLmZ3pyfl?Hm&lt;JROzj0F%`=Js24Y8&lt;b-C7u8Ey`v?t&gt;^X!aOZ&amp;!GE$n0gXpXDLiE&amp;IF(p}=2$O7riG=he&gt;HsSd6nb2ZpH9V5e+4#NUu*#dL`j&gt;g(=6U$JSqkAe;m*8W?seFqAQtt2nub9QN{G}zVQa!h1{ubBWde6-tKEEX3f};Ds_%%m(olC~X+l9fBb_qvB7d%qxFYGvhB)ySl-6mc(7piVk$L1C!6?LsM-bGx4Kq?Vi_N7++Lr^j7Z_T!9&amp;^TX&gt;Z$b`iEN&amp;!BV-&lt;L@n8GLUb!cz~W!|L_8-Oq@pzqOi$e1(&gt;YDtB+GC~#8K0iz=&gt;(65ZrqrH$=W}MUQ$4`Q|7);{HDvlt$Z@j8tqRxF&lt;8I1Il2&gt;Re3&gt;i&gt;Qq-%&lt;LE8t2h-nQrru+euZ4nU49CP&lt;?4caPIK7bZiVj?5N%wlX6u%?{-g{*6CZj&lt;*!3@8Z;5%bifG+G1RRp*A%_5goJw*!j=g30Kl=4$d=;r8v}&lt;3F$o+ZcV~?yT5Xw87D)hWr2H`0#iBz0fslH3?7a|zM)PyFb}5=&lt;jqqb91)CWNol;3p}CEx_b4Wp&gt;g1Y4DQY=g=091dzGxgHww)&gt;iz{pz+&lt;(Y7?aR`K~NB7eB&lt;-~EHPz&gt;^f?VX3~LtUZTp)fAs;0x0G&amp;Bnh$8R^5Tnq4&amp;JqUhtnY5YFz72BvQIIyX;tD-6P9OCr3BhC{9%enoXD3^yq(4X%%&amp;&amp;LtK$3_;YUv?qx^N}P0dBy&gt;`o-5=FVaYVxATn)qyGSArjM&gt;;C!Ju9WFXdhLL1O3$F!e+!0GmehmaMNjXceH$D$&amp;r{3%#fPy_N~Sw3vyu&lt;ms04ImT(P8xhhp+A!%##E&gt;LBA%Drj%Ls?QKN)ZJTET{UZ5p=&lt;_?&gt;gUDcqRbZfq7xY1wcqeq}Z{D1xyb`#f;xu0%X^x49;b&amp;4J+&amp;u~$Ma_*&gt;MFeRn$iLp&gt;AAfKC||;C6Gz?vNx^@JTxYRFR%q&gt;aUmW3Du3=;T!NlY7P$LmGeci$bSDO#_4gfS7-~I`5pXOd&gt;fZ!0r{YyO~x3#_6Vgl5n2S$z5J2?2r|}_k&gt;tp)!s@)MtaFPKvl{Ks2iC{XH6lLnBNKb$a_03sv;96Sq;z%LW&lt;~SzuvVw?zPYQTB%4Fyb{;|R;)fA=F5aCBJ}kbFsDtX#veW5zk}S_y`gj9)#yc^P-!deJ7ADXbSs~pT*()B?n@Va$(W|Q~V&amp;x@uT=#4v5Da7IUW}Y!#5Q!DJjuSG5{yC-D!NfZ41F1sL^Eo4P3bt=O5q9iXi#QL=RNJ}s7tLFPq!BX`*Dcv8X2hk$DaS8$b`WdT3Vt61mq$M3eVK-+BEU(521X5NOMdaYbc5R1v5{iS8&amp;_Hj&lt;&gt;^QtAUfTI^Zp7*D$qnwc&lt;-^fXTlCa(^}=Jc%(jsow9j45ePA#y9rrBwB1;-A3p4+5Cj3@}HkjX_{t&lt;Bb+*0N9$DWnMldVa$yCSQcVU&amp;VOP=VM$7i(KR)?bqiL&amp;r8C5|eU!xC9ib$&amp;V%j&gt;i|YGG{s^eCzW0&gt;JX&gt;@Y&amp;`CRr5}&amp;GC$2oHF{lE_^&gt;9&lt;L(6V5h6fdHog0^04i6IXu2sgxl70Fb@|(nqo(SiaywnF^l`mQ-#XATtYq9LGEg)!w;v?z}ia14AfJg4@$(T!&gt;_UzJxUE7?vF^=Hx==#S)q%&amp;|%R}ax+6x0okzr`g(*K)m$A}!IVy&lt;w_HunpyRsB@`HueE;cKy%PkNsC?&gt;b;i`6k_8*G&gt;yp49xEnZ3N_l)7%gTPktQ|Fp4taFB7HH38aT#?FlI${WXgI&lt;C1EJVRRAHJ(OO0&amp;GoonC{kem$5YEVeVL3_|Zg0$L!I#CfaNeodE%4*)A#d+b+N|`huyr?H)=MQ9X3{gb&lt;ErdJloLbJ`^x5Bl5N{?X94?3E2Pe}&gt;hUIczO}srDmoamd&amp;rjjh&amp;Y?EB)7dsK0to&amp;2r3^z?&amp;$!1H3RAtCEs+ueRzQ5UKx$B5Pt&lt;yn(eiKqM&lt;=vzEplv~F_VHm0gOLSm;EU&gt;n)UcDOG^`_R+2~enGc`SV&gt;OH*fiL)GypF3V2!DNM6Lm|i?LEGq%X2K2Mud{%K(sQYzp7Njy0BmL&amp;XDa4W?{Y+CosfZEIkCoeP_--$GXE1Wdb|htW9ViZ%$*_@+NDfCXqB8vEtgKS0;=cQC&gt;`cfNv(NZH~e36ND_?Yh__*{d9@8uPL`P2h1dEBAu&amp;atOAhhR94^XvDz&amp;FZ;Xj9r0UQkS?e0Ew)ZNt%R12=HP?50OivG&amp;&lt;Y|&lt;73#6Qr)lFt5%s$x1NE}syXtY#=T+CEq#f@{x7h-rPPo?6W1yEtba^gzmnN{PWYGYhd6Ej2u#i)V#Cn)ZUd5qx&lt;_&amp;)2C`ub6X#}+4@&gt;i8xqK1Kw5E8)zCUpnIL5pZ$Su7BgLA&amp;%D8{!8HyoaS*=u%ZniK%zn&lt;QIW_dIIbq&lt;uEs^KAdB+Nab-RPdM{%6)(T*+YOqlIX3dSyqYxRBfM(9D&amp;MF7$odyVH2T7jb`r-)7cD}G^REUY|LJMB5wo(q#{l{w$bBbOxM?Fg!nNu*43})TMwEB;}U9SB#*&gt;_~#hL&gt;(&gt;mhVu6@=C=&lt;KpJ-et81uZb}qQ%m=2B4PS{{AW^E5y2D7V-_xCAk`!1ej-;SyT*MN8~9&lt;&amp;(43;2pvtnp3-bjHb&amp;AiA}&gt;mK&amp;mYV`dB{eKGC*0^vM8dPCi})&gt;e9)AKa}&gt;=p|@oNSa-Bp=DVvK(|;G-Z(1S;S;Lp&lt;Ym!+_6#)l$d1p8z_N~$&gt;arb3F~$zi1lx{10=SX0Srr+Hb+ksi{*S;r#fNpT&amp;k_uh=KRY|ut5MgK9-GZErU#R6)4Y0NBr!R?UAnu-bctUdr;$D#|)s5m~EGGvEYA;WM_y_v&gt;v^m^#TP;4WRDavJ5kNCXt7T8{G;m%b63PoD|DoO&gt;boB*$eVQ?NrDnapPnY0W&lt;+&lt;_%*9m%a{+Bx9Sn$m$_Am`~ShSeBOI#)1h0V`pwxck&lt;Q;9{S#{fD@$!R?kRE2{=deeBB0_-6P&gt;Efsqs7b0x={zf-_U`SMSeLuI;AoZi8F=0Ez{0i%=pp^ECA)vlf|IUZFT=cx7|O$(K2ib$qh}+;I|&amp;@mJ*I&gt;TA~!I1Yf`g2enn&lt;rjVhKP`c+t7;Cy88Z6ooxFA3bO|+#6W|_i@BqAgLU@X~+b+6?EWD;HLMQc(9Fj?sngkA@vChDuaS^Z&lt;-Us1C@byQ#+zbEedp5erV~OStc&lt;`F&lt;w&amp;@KMR2SxMzK2wunXnZ&gt;OJmtfAbpkeLhc$a6%q13(J()t2MIEQtFzHW&lt;26&gt;!Vmbk&lt;x|tDJ1h(KPG4hmj5&gt;KsCdd#itArx9H8n+TSHeT0WA1ixk&gt;XmR8!ve6nHI&gt;XDg_Jje!$r^JWRLRkzuG7sn#yv}w[...]iLi)1!WqeCjVC=8CyN#Vr#JU1S2hN6F|ig88$dQ${2&gt;RsU$q$-{Ob#i2h$gaKJ2F5i6Fc-)tYJ&lt;4gUUYy{q&amp;Tip+O~F$NfTT0rE$r6*=1t;qI~lYB4xPlaVz)iar9wPVB~`39)XVZEMvjFojsPIS$*&amp;mvXqpU&amp;I|M;Bb~H&amp;5MMG3yUYfj95tIj8}aVmNt^vTt4xpvCEYH`ijw&gt;Uk#&lt;@m=2^sYNS1mw=3TaySI{l?&amp;9-D@Xc02X)7~|%F!4J`Ii#u^Xmk`FF9cQ&gt;9KXIdZQ84~5Qi8-oGNL+@@QJMMM54VU|J-&gt;WHBIT{3hml=Y%;w=iZL@Hg@DFPHE`mjW0^Mq7j6)Y$+3|J?djiKcsQKkR%3&gt;H|e&lt;2N$=Q!Twnm0wSUHAb+sp`&gt;gwShBr&amp;-1m{qw%HmAR={vK+(*i*mvseI)kI8?1=(%K0?+BcX+6CAq$`kMvCB;lX7y-YmGQ!lQpmS%6#r+vXaW5F1!tPgek#;97aaQUqtkcPm6d~cu1q#U+gtuA?wR0&gt;!`XcB&gt;Hq7FcnUPThogQCH&amp;&amp;b)H6B)a&amp;l3{0Zl&lt;Yz#1=3A-Fo@NanO5QT_%o;8NZPME^qL=t|&lt;Z*s2*^tc05WE;WGllM}PL-o~owzMBK?r6w@Pfl&amp;CFP#sysIDnHWqPOeDK`ByS$q?Zq&lt;x?Ds4&lt;^ZYfXbpJ*#~LJ@D8I3OD)23mRnW=B#k-tXP(4fxLDR9*xB{GzF|%0&lt;$u)3g9$ijveqjwlCZV_&amp;@h%ci=P3pYX}&gt;=oDkf^$ivXsvy_SkDb$MM|&gt;Rsi)%fnf@DyfR$Ka|91*XMclg(TRA8CPKc;1O3&lt;#05u@`zt77ovo{pl)LKaPaYcs#c{fv*7uE$8&amp;H;)Z?jhtsI2iHZRr8#0KOg`Xp=3xVYI;ri3&lt;tq_CW|NbXUHySZye8M=vX)o&amp;)Bx8QF@po*2!gMX?v&gt;IzG8%PhrzL{r&gt;ooS0SXa6c+FXFN`7BE`M^(T6tgv&amp;SdM|*PbYhd-E)k8u&lt;sc&amp;uiQh~Go#-J5YdKJE+2cb^`Z09aLXmIj6HKWz`w+$JSS&gt;DK`7y-}^_0MWK**c5gB&amp;A`YcN(nhdQp1Ad&lt;I2YX|H9IK+X{B&gt;5#6A{Ms9g25Q;4rlR9t=xG&amp;A1FXTOst{~80uh(`&gt;)S{l#~rQGZ&lt;D5+b~+gINCsKuhs+$uYmQ(v&gt;aWu4@wVmW`CNt&lt;`C$4$Zf&amp;V@BThXUR6ki_5-K3&amp;Cb)MeXVz}6xhoFQ&amp;C^PQli3^E&gt;&lt;yHtqd2t7$1Or7{)56gwBqoM)Z$?jB-yCA6?uYBo%~JRCP&amp;l6=u4w?3WKIt(&lt;GdfHq&gt;ewZts%8Y9+t;GT*sZ9z_{noz17yMNs&amp;S4^{&amp;WT^mZN~7oKT^=&gt;o$xGbqdGa2+pDhHlw4lkTHEbbvhX4QobP50f7XSbN4gdfE7y|$RaDDy%u8^TX6TMS5owNdC${YZw2LJ%g0RR9F0000O0{{RF)HPN3(ySE8#o?IA)wc%1&gt;?tG*2{B(?NvHVKVAzcM-;cM5YWS!GP?En(sJTAQ6wsXJMD}8qP`4P}z1KP?1^YlaF4kSTGWN)*nwGRS3}_dkH2(SpZtXPr;&lt;^VH8Q1#C0dlPHT_1&amp;gg014cxFe2bqi8n_Gn4Iiw~vkA$^2Fj40m2{a;44G4NecD-nDyM9$@r7{ZWsDu$PDLT&gt;E8FtHj`o-nW~_qehB~Z73velzeNtwRDpJ#DO2rxEn5O4qHJ*K~kc+LV!1&gt;dAFeVkpf(krq?sV?=ya`i&gt;}ZeZt6NkaJE)15eu$h-zIWZ!|rM=36$#t&lt;^)w7PMAxmjN0f#tI=wkGCsM_oLhbVor4XO8^m?sel_a#O=~FCX6TjZ7I)MN+oMI0+(&lt;FnGS~iaL4|0Fa0_4xm0w+U4HOEs&amp;a@&amp;WY_pp%Ushf{Rs2d-IzA5CBL3PQYqki1gDK&gt;+h9$EhC&lt;svxCfgEc554;~8@Cmckj@*CDUPKaz&gt;X)CUOg#l7EFMcl74&amp;{k@cM~Wc%7DRpYmtr3TpMAhHnR5T7SZ8Xju3qe|R8%6d#+!q%T7;=I9G!5Nb{HKT-q00000RZv(V00000RZv(V4Hgaxj3w4*B2_z+s0RQ5%&gt;e)a00{vANd*90yZ`_I\"</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">decode_85</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">base85_string</span><span class=\"p\">){</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">str_ptr</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">str_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">base85_string</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()){</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">){</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"o\">=</span><span class=\"n\">base85_string</span><span class=\"p\">[</span><span class=\"n\">str_ptr</span><span class=\"o\">++</span><span class=\"p\">];</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">de</span><span class=\"p\">{</span><span class=\"n\">de85</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]};</span><span class=\"n\">acc</span><span class=\"o\">=</span><span class=\"n\">acc</span><span class=\"o\">*</span><span class=\"mi\">85</span><span class=\"o\">+</span><span class=\"n\">de</span><span class=\"p\">;}</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"p\">;</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">){</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">acc</span><span class=\"o\">%</span><span class=\"mi\">256</span><span class=\"p\">;</span><span class=\"n\">acc</span><span class=\"o\">/=</span><span class=\"mi\">256</span><span class=\"p\">;</span><span class=\"n\">sub</span><span class=\"o\">+=</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);}</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span><span class=\"n\">sub</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span><span class=\"n\">out</span><span class=\"o\">+=</span><span class=\"n\">sub</span><span class=\"p\">;}</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">85</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"p\">{</span><span class=\"n\">en85</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]};</span><span class=\"n\">de85</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">;}</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">Program_Binary</span><span class=\"p\">{</span><span class=\"n\">decode_85</span><span class=\"p\">(</span><span class=\"n\">Base85_Binary</span><span class=\"p\">)};</span><span class=\"n\">ofstream</span><span class=\"w\"> </span><span class=\"n\">Program_File</span><span class=\"p\">(</span><span class=\"s\">\"Binary\"</span><span class=\"p\">,</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">trunc</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Program_File</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">Program_Binary</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span><span class=\"n\">Program_Binary</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"n\">Program_File</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s\">\"chmod a+x Binary\"</span><span class=\"p\">);</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s\">\"./Binary\"</span><span class=\"p\">);};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 291328123,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659102160
    },
    {
        "content": "<p>Good thing it's not banned on Codeforces provided that the original source code is included in a comment.</p>",
        "id": 291328227,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659102222
    },
    {
        "content": "<p>Oh, I see, you already considered this above.</p>",
        "id": 291329492,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659102866
    },
    {
        "content": "<p>I don't see where that was mentioned above; mind linking the message?</p>",
        "id": 291330634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659103416
    },
    {
        "content": "<p>Is there a standard way to cross compile Lean code for another platform, say, Windows? If not, I'll keep monkey patching stuff.</p>",
        "id": 291331225,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659103727
    },
    {
        "content": "<p>My plan is I'll manually compile the runtime, then I'll replace the leanc binary with a dumb script that calls the cross compilation toolchain.</p>",
        "id": 291331513,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659103902
    },
    {
        "content": "<p>Have you heard of a C compiler that simply merge all files?</p>",
        "id": 291331516,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103903
    },
    {
        "content": "<p>somebody used it to sumbit Nim script as C</p>",
        "id": 291331609,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103942
    },
    {
        "content": "<p>Can't remember the name. There is one for C++ as well.</p>",
        "id": 291331660,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103965
    },
    {
        "content": "<p>I've seen people use Python scripts that topologically sort #includes...</p>",
        "id": 291331763,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104013
    },
    {
        "content": "<p>There is one in the AtCoder Library as well.</p>",
        "id": 291331913,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104074
    },
    {
        "content": "<p>This stuff is crazy I think my brain is melting</p>",
        "id": 291332236,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104251
    },
    {
        "content": "<p>When I did programming contests in python, I had a cool tool of mine which turned a big project into a single file.  <a href=\"https://github.com/jasonrute/modulize\">https://github.com/jasonrute/modulize</a></p>",
        "id": 291332262,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659104262
    },
    {
        "content": "<p>Rust has cargo-equip</p>",
        "id": 291332444,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Submit.20Lean.20code.20on.20online.20judges/near/291330634\">said</a>:</p>\n<blockquote>\n<p>I don't see where that was mentioned above; mind linking the message?</p>\n</blockquote>\n<p>I was just referring to Mac mentioning that you could use the compiled c code and <del>Huynh</del> Khanh responding that it requires also including the runtime libraries which may not be easy.  (The base85 stuff wasn’t explicitly mentioned, but it also seems <del>Huynh</del> Khanh is familiar with the standard tricks in this area.)</p>",
        "id": 291332843,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659104567
    },
    {
        "content": "<p>My first name is Khanh btw.</p>",
        "id": 291332903,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104595
    },
    {
        "content": "<p>Most people who don't know me well get this wrong <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 291332991,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659104638
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291343765,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659109835
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291343790,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659109851
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291343809,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659109860
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291344111,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659110011
    },
    {
        "content": "<p>Sorry, compiled the wrong file. My plan didn't work.</p>",
        "id": 291348051,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659111823
    },
    {
        "content": "<p>I'll go to bed and tomorrow I'll change course.</p>",
        "id": 291357420,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659116600
    },
    {
        "content": "<p>My next plan is to have leanc emit inline assembly so I can embed in C++</p>",
        "id": 291357545,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659116646
    },
    {
        "content": "<p>I tried embedding the executable in a base64 string.</p>",
        "id": 291408846,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659159276
    },
    {
        "content": "<p>The unfortunate truth is the executable is way too big.</p>",
        "id": 291408849,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659159288
    },
    {
        "content": "<p>I guess it's not feasible to submit Lean after all.</p>",
        "id": 291408861,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659159309
    },
    {
        "content": "<p>Experiment failed. At the end of the day, the size limit is the biggest obstacle.</p>",
        "id": 291408949,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659159385
    }
]