[
    {
        "content": "<p>I'm going to be manually porting mathlib on Thursday nights on the discord for the next few months. Today I'm doing <code>logic.basic</code>. Here's something which we have a nice trick for in Lean 3: can I pull off the same trick in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in Lean 3 produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">fact.out</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>(note the round brackets in <code>fact.out</code> caused, bizarrely, by the square brackets after <code>out</code>). Is there a way to do this in Lean 4 or should I just roll my own <code>Fact.out</code>?</p>",
        "id": 236725752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619722292
    },
    {
        "content": "<p>Slightly counterintuitively, you now need to use <code>{}</code> for explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">out</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 236729385,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619723746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.60fact.60.20trick/near/236725752\">said</a>:</p>\n<blockquote>\n<p>I'm going to be manually porting mathlib on Thursday nights on the discord for the next few months. </p>\n</blockquote>\n<p>I wonder if you can get someone to write a CI script that verifies you really did port the entire file?</p>",
        "id": 236760950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619737576
    },
    {
        "content": "<p>not yet, because I only did about 1/3 of it :-) <a href=\"https://github.com/kbuzzard/mathlib4_experiments/blob/master/mathlib4/Logic/basic.lean\">https://github.com/kbuzzard/mathlib4_experiments/blob/master/mathlib4/Logic/basic.lean</a> .</p>",
        "id": 236800021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619769953
    },
    {
        "content": "<p>Sure -- but having a script that tells you exactly what you haven't done yet is even better. :-)</p>",
        "id": 236802308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619771277
    }
]