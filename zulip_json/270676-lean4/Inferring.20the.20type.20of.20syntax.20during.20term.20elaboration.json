[
    {
        "content": "<p>While writing a term elaborator, let's say I have to match on syntax of the form <code>$xs,*</code> where the <code>xs</code> are terms. How do I infer the types of these <code>xs</code> in context? Do I need to run <code>elabTerm</code> on them first (somehow), then use <code>Lean.Meta.inferType</code> on the resulting Expr's? Or is there a special way to do this within <code>TermElab</code> somehow?</p>",
        "id": 307416467,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667342670
    },
    {
        "content": "<p>If you match on <code>$xs,*</code>, then you will get an <code>xs : TSepArray `term \",\"</code>.  This is still <code>Syntax</code>, so you will indeed need to elaborate it first.</p>",
        "id": 307416809,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667342840
    },
    {
        "content": "<p>Ideally, you should only run <code>elabTerm</code> once on every syntax object.  That's why there is no elabTerm+inferType combo.</p>",
        "id": 307416868,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667342880
    },
    {
        "content": "<p>Right—I was indeed worried about elaborating more than once. That said, I do need the types...hmmm. I wonder what the best way to proceed is.</p>\n<p>Would I risk throwing away important information that might be used to infer the types if I simply, say, turned <code>TSepArray</code> into an <code>Array Syntax</code> somehow and mapped <code>elabTerm · none</code> over it, then inferred the types from those expressions? (Would that even be the right way to do it?)</p>",
        "id": 307418068,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667343432
    },
    {
        "content": "<p>Or is there a way to \"elaborate in place\" somehow, by, I suppose...re-inserting elaborated expressions into syntax with a note that they've been elaborated and don't need to be elaborated further below that node? (It seems like the ladder of abstraction only goes up, from Syntax to Expr, so I'm guessing maybe not, but worth a shot...)</p>",
        "id": 307418518,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667343641
    }
]