[
    {
        "content": "<p>In the past few days, I was trying to make a package for socket programming, but some problems arise immediately.</p>\n<ol>\n<li>We cannot write platform-specific and feature-specific code in Lean 4 now. I'm referring to something like<code>#ifdef</code> in C/C++ and <code>#[cfg(...)]</code> in Rust. For example, some address families are not available on every platform, it would be useful to specify the platform like this (may be in other formats):</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AddressFamily</span>\n  <span class=\"bp\">|</span> <span class=\"n\">net</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inet6</span>\n  <span class=\"bp\">|</span> <span class=\"kd\">@[feature = \"unix\"]</span> <span class=\"kd\">@[platform \"windows â‰¥ 10\" \"unix\" \"macos\"]</span> <span class=\"n\">unix</span>\n</code></pre></div>\n<p>Is it possible to do such things in the Lean elaboration process? (I'm not familiar with it. Any learning resources that I can start from?)</p>",
        "id": 255229216,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1632840573
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 255229911,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1632840829
    },
    {
        "content": "<ol start=\"2\">\n<li>Lean does not have a low level data representation that can interoperate with C. In Rust, the <code>#[repr(C)]</code> can be used, and we can directly pass the struct to C functions.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">sa_family</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">sa_data</span>: <span class=\"p\">[</span><span class=\"n\">c_char</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In Lean, we have to write a wrapper for every structure and every function to make them \"boxed\", which involves a bunch of <code>lean_ctor</code> functions, which is quite frustrating and inconvenient for quick exploration.</p>",
        "id": 255232388,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1632841650
    },
    {
        "content": "<p>By the way, the usage of <code>Task</code> and <code>AsyncList</code> is a bit confusing for me. Could anyone brief me about how to write multithreading or coroutine  program in Lean? :D</p>",
        "id": 255234258,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1632842269
    }
]