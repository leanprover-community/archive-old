[
    {
        "content": "<p>I'm trying to define custom syntax but don't want the keyword to be parsed somewhere else. Lean seems to have a parser for that, <code>Parser.nonReservedSymbol</code>, but it doesn't seem to work if I declare it with the <code>syntax</code> syntax: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">keywordParser</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.nonReservedSymbol</span> <span class=\"s2\">\"keyword\"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">keywordParser</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[foo|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">keyword</span><span class=\"o\">]</span> <span class=\"c1\">-- error: expected foo</span>\n</code></pre></div>\n<p>I've seen the uses in Lean itself use some <code>@[builtinAttrParser]</code> annotations and <code>leading_parser</code>, but adding does doesn't seem to help (and I have no idea what they mean). Can someone tell me what I'm doing wrong? Thanks!</p>",
        "id": 302644425,
        "sender_full_name": "Andr√©s Goens",
        "timestamp": 1665060624
    },
    {
        "content": "<p>This is the magical <code>(behavior := both)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">both</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"keyword\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[foo|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">keyword</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This option makes the syntax category parse leading identifiers as non-reserved symbols (and also as identifiers, if no non-reserved symbol matches). Imo this should be the default.</p>\n<p>Also, note the <code>&amp;\"bla\"</code> notation, which is a nicer way to write <code>Parser.nonReservedSymbol \"bla\"</code>. In general, syntax is one area where I wouldn't look too much at the Lean 4 codebase itself. It largely uses low-level APIs instead of the nice syntax declarations, quotations and such. Look at mathlib4 code instead.</p>",
        "id": 302661339,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1665065368
    }
]