[
    {
        "content": "<p>How can I see the attributes attached to a declaration? In Lean 3 I could see them with <code>#print</code>.</p>",
        "id": 313748620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670114027
    },
    {
        "content": "<p>I hadn't realised that this would be so complicated. What's happening in practice is that I'm trying to understand the behaviour of <code>to_additive</code> and tags, and the only tags I'm interested in inspecting on a declaration are <code>simp</code>, <code>norm_cast</code> and <code>coe</code>. I'm having to construct examples to check whether tags are there because I can't just look to see what's going on.</p>",
        "id": 313825296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670168761
    },
    {
        "content": "<p>I know how to go the other way around in a particular case.</p>\n<p>Here is a command checking if an instance declaration is marked as <code>default_instance</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mycommand1</span><span class=\"o\">)</span> <span class=\"s2\">\"#is_default_instance\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[command_elab mycommand1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">isDefaultInstanceCommand</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"bp\">$</span><span class=\"n\">declId</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">declId.getId</span>\n\n  <span class=\"c1\">-- We can get list of all default instances with:</span>\n  <span class=\"k\">let</span> <span class=\"n\">di</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">defaultInstanceExtension.getState</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">defaultInstances</span>\n\n  <span class=\"c1\">-- to check if `decl` is a default instance we simply do:</span>\n  <span class=\"k\">let</span> <span class=\"n\">is_default_instance</span> <span class=\"o\">:=</span> <span class=\"n\">di.any</span> <span class=\"bp\">λ</span> <span class=\"n\">className</span> <span class=\"n\">listOfInstancesAndPrio</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">listOfInstancesAndPrio.any</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">instName</span><span class=\"o\">,</span> <span class=\"n\">prio</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instName</span> <span class=\"bp\">=</span> <span class=\"n\">decl</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Declaration {decl} is default instance: {is_default_instance}\"</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">instHAdd</span>  <span class=\"c1\">-- true</span>\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">HAdd</span>      <span class=\"c1\">-- false</span>\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">instAddFloat</span> <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>However the approach is quite specialized for <code>default_instance</code> attribute, for another attribute it would look a bit different. It is not even clear that the corresponding <code>PersistentEnvExtension</code> has to hold the necessary information.</p>\n<p>The chapter on attributes in the meta programming book seems to be empty :( It would be great to have an explanation of <code>TagAttribute</code>, <code>ParametricAttribute</code>, <code>EnumAttributes</code> and what are environment extensions and how are attributes connected.</p>",
        "id": 313840764,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670177185
    },
    {
        "content": "<p>I think this functionality (list all attributes for a given constant) is still missing. In Lean 3, the attribute architecture makes this easy to do; in Lean 4, it needs specific support which has not been written yet.</p>\n<p>If you're interested in a closed collection of attributes, you can write, for each of them, a function which checks whether the attribute was applied to the constant. The details vary depending on how the attribute stores its data, but it'll be broadly similar to Tomas' example. I would expect such functions to already exist for certain attributes.</p>",
        "id": 313935664,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670237533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/313840764\">said</a>:</p>\n<blockquote>\n<p>The chapter on attributes in the meta programming book seems to be empty :( It would be great to have an explanation of <code>TagAttribute</code>, <code>ParametricAttribute</code>, <code>EnumAttributes</code> and what are environment extensions and how are attributes connected.</p>\n</blockquote>\n<p>I'll put this on the todo list, but I'm quite busy right now. Maybe over Christmas.</p>",
        "id": 313935845,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670237594
    },
    {
        "content": "<p>Oh, I see there was already a long discussion about this in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/to_additive.20and.20coe\">#mathlib4 &gt; to_additive and coe</a></p>",
        "id": 313937652,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670238147
    },
    {
        "content": "<p>I believe that even if you have a specific attribute, it is hard to check whether it is attached to a declaration. Some attributes don't record to which declarations they are attached. For example, this information is hard to get for <code>@[ext]</code>, unless you want to navigate the whole <code>DiscTree</code>.</p>",
        "id": 315236456,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670780183
    },
    {
        "content": "<p>I have a std4 PR for folding <code>DiscrTree</code>s but yeah, O(n) membership query is not great. <code>SimpTheorems</code> uses a <code>DiscrTree</code> plus one or two <code>HashMap</code>s to support erasing and efficient membership queries and I use the same approach for Aesop. Maybe it would be worth packaging this up into a data structure.</p>",
        "id": 315326911,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670839181
    },
    {
        "content": "<p>I think a better approach for membership queries is to use the tag attribute's data structure, since that adds no startup cost</p>",
        "id": 315327919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670839522
    },
    {
        "content": "<p>Oh interesting, I didn't know about this optimisation.</p>",
        "id": 315351966,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670847103
    }
]