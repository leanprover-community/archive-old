[
    {
        "content": "<p>It is not clear to me when should I use <code>def</code> vs <code>abbrev</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">PairCtx</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">[(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">)])</span> <span class=\"o\">:</span> <span class=\"n\">PairCtx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>    <span class=\"n\">PairCtx2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">[(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">)])</span> <span class=\"o\">:</span> <span class=\"n\">PairCtx2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286841366,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655761497
    },
    {
        "content": "<p>you can in fact always use <code>def</code>, <code>abbrev</code> is a shortcut for a <code>def</code> tagged with <code>@[reducible]</code> which has the very nice effect of allowing type class synthesis to look through your definition (it normally wouldnt do this)</p>\n<p>This means if you are for example defining a custom monad stack and use <code>abbrev</code> it will automatically infer the <code>Monad</code> instance for this type while if you use <code>def</code> it won't.</p>",
        "id": 286841674,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655761791
    },
    {
        "content": "<p>Reducible definitions should be avoided unless necessary, because lean will have to unfold these a lot, and if you have multiple layers of reducible definitions the terms that lean is working with can get really big really fast.</p>\n<p>To your question, although they are actually definitions, so they will be represented as written as long as they are not unfolded, it is easy for unification or other operations to end up unfolding these definitions and so the underlying definition will show up. By comparison, if you use <code>notation</code> to define an abbreviation, it is really erased at parse time so there is no difference between it and the definition it abbreviates.</p>",
        "id": 286931437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655825561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as unresolved.</p>",
        "id": 286935109,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655826828
    }
]