[
    {
        "content": "<p>What is the Lean 4 analogue of <code>#print notation</code>?</p>\n<p>I ask because I was just completely confused when porting some logic.basic stuff from Lean 3 to Lean 4 and I was all over the shop trying to deal with a <code>heq</code> lemma and ultimately it was because <code>==</code> turns out not to mean <code>HEq</code> in Lean 4 but <code>BEq</code>, boolean equality.</p>\n<p>PS I see now that I could at least have discovered that <code>==</code> wasn't <code>HEq</code> by using the pretty printer to discover that <code>HEq</code> is <code>≅</code>, a design decision which the mathematicians might be quite interested in...</p>",
        "id": 236715310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619718120
    },
    {
        "content": "<p>Yeah I would like to know as well. I was sleuthing through the Lean4 code base and couldn't find anything</p>",
        "id": 236724759,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619721879
    },
    {
        "content": "<p>I would be in favor of using no notation for <code>HEq</code></p>",
        "id": 236731265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619724529
    },
    {
        "content": "<p>that should make it clear which one is preferred</p>",
        "id": 236731342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619724561
    },
    {
        "content": "<p>(of course people can reintroduce their own notation if they like, in which case <code>≅</code> as a local or scoped notation will not be nearly as contentious)</p>",
        "id": 236731641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619724669
    },
    {
        "content": "<p>That looks more like isomorphism than equality to me.</p>",
        "id": 236731897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619724772
    },
    {
        "content": "<p>In mathematics it is used as a relation on types not terms, so it looks funny to me, but on the other hand we've already seen that notation in computer science and mathematics clashes sometimes (eg <code>=&gt;</code> )</p>",
        "id": 236746116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619730422
    },
    {
        "content": "<p>there is always <code>===</code>...</p>",
        "id": 236751614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619732208
    },
    {
        "content": "<p>Regarding the original question, we should soon have go-to-definition and on-hover documentation for arbitrary syntax, including notations (someone still has to write all those doc comments afterwards of course...). I assume that would more than make up for the lack of the command?</p>",
        "id": 236795247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619766893
    },
    {
        "content": "<p>The Lean 3 syntax also doesn't make as much sense in Lean 4 since it is much less focused on tokens to begin with (see e.g. per-parser precedence).</p>",
        "id": 236795396,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619766990
    },
    {
        "content": "<p>Yes, go-to-definition would certainly solve my initial problem! I have also really got to internalise this \"if you can't figure it out, get grepping through the source code\" approach, which is not something I instinctively do because I was spoilt by Lean 3's more mature state when I started learning it. Thanks.</p>",
        "id": 236797132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619768174
    },
    {
        "content": "<p>I worte a custom command &lt;<a href=\"https://gist.github.com/pcpthm/b88152daeeb684948d768766a49f2534\">https://gist.github.com/pcpthm/b88152daeeb684948d768766a49f2534</a>&gt; but I think go-to-definition is a better solution.</p>",
        "id": 236804521,
        "sender_full_name": "pcpthm",
        "timestamp": 1619772672
    },
    {
        "content": "<p>Thanks! So now I can do `#print_notation \"a == b\" and it tells me where to look in the lean 4 repo to see the definition of the notation (as opposed to grepping for the symbol where of course you also end up with all the uses of it).</p>",
        "id": 236810631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619776212
    }
]