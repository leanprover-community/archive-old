[
    {
        "content": "<p>I'm starting a series of blog posts on Lean 4 here: <a href=\"http://outlace.com/Lean_part_1.html\">http://outlace.com/Lean_part_1.html</a><br>\nI'm trying to assume the fewest number of prerequisites so it starts very basic.</p>",
        "id": 288465888,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1656982978
    },
    {
        "content": "<p>First piece of feedback is that the grey on that light blue hurts my eyes a bit. You might want to increase the contrast between those two colors</p>",
        "id": 288466097,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656983239
    },
    {
        "content": "<p>Good point, thank you- I will work on that<br>\nUpdate: fixed</p>",
        "id": 288466355,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1656983597
    },
    {
        "content": "<p>Also generally style wise we write our types LikeThis, our functions likeThis and our proofs like_this name wise. So your nat should be Nat. Your nat_id natId and so on.</p>\n<p>Since that collides with builtins you can just let your blog happen in an example workspace so nothing bad happens.</p>\n<p>And UX wise if I open your page on mobile its zoomed in so far per default I can't see ~1/3 of the page.</p>\n<p>But both of those are just minor annoyances, the actual content looks good to me!</p>",
        "id": 288487238,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657005060
    },
    {
        "content": "<p>Thanks for the feedback! I’ll try to update the code style when I get a chance. I can’t reproduce your mobile issue as it loads and looks fine on my phone even tried different browsers.</p>",
        "id": 288531078,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1657028490
    },
    {
        "content": "<p>So as I'm writing these posts I'm realizing I'm still confused about some basic things.<br>\nConsider the identity function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"c1\">-- {α : Type u_1} → α → α</span>\n</code></pre></div>\n<p>It is polymorphic over the input type α.</p>\n<p>If I change it to (not sure why one would want to do this):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"c1\">-- ∀ {α : Prop}, α → α</span>\n</code></pre></div>\n<p>My understanding is that whenever I see <code>∀</code>, I'm dealing with a dependent function type. But I thought <code>id</code> here is just polymorphic, not a dependent function type like <code>(x : α) → P x</code>?</p>",
        "id": 289121256,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1657483327
    },
    {
        "content": "<p>Both denote a dependent function type, it's just that it is convention to use universal quantification once <code>Prop</code> comes into play and the other notation otherwise, the concept of a polymorphic function doesn't really exist separately from a dependent one in Lean. All functions in Lean are created equal.</p>",
        "id": 289121286,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657483405
    },
    {
        "content": "<p><code>id</code> is dependent in the first argument; <code>id := (α : Prop) → P α</code> where <code>P α := α → α</code></p>",
        "id": 289121355,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657483467
    },
    {
        "content": "<p>Okay, that's what I was thinking, since the output type will depend on the input type. But I then I got confused because in Haskell it's basically the same but Haskell doesn't have dependent types</p>",
        "id": 289121363,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1657483498
    },
    {
        "content": "<p>Wait Haskell doesn't have dependent types? What is stuff like <code>head :: forall a. List a -&gt; a</code> then?</p>",
        "id": 289121434,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657483590
    },
    {
        "content": "<p>Polymorphic, which is a subset of what is possible in dependent types. THe essential difference is that in dependent type theories your types can refer to <em>values</em> and not just other types</p>",
        "id": 289121445,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657483631
    },
    {
        "content": "<p>Ah I see, thanks</p>",
        "id": 289121485,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1657483682
    },
    {
        "content": "<p>Posted part 2: <a href=\"http://outlace.com/Lean_part_2.html\">http://outlace.com/Lean_part_2.html</a><br>\nFeedback is appreciated! to catch any misstatements or other errors early</p>",
        "id": 289143174,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1657514728
    }
]