[
    {
        "content": "<p>I've been reading up on the term elaboration implementation in order to see how it works and its special thing seems to be the creation of \"synthetic metavariables\" in order to postpone execution of the elaborator that is currently running to a later point in time so some type inference can figure stuff out or w/e. As far as I understand it the difference between synthetic and plain metavariables, is that syntheticones have a way attached to them that they are meant to be solved with, the <code>SyntheticMVarKind</code>. (is this correct)?</p>\n<p>The things I'm wondering are:</p>\n<ul>\n<li>there is a kind <code>tactic</code>, my first thought was that this is what is used whenever we meet a tactic block so term elaboration can setup the tactic environment and call the tactic block but why do we do this with another meta variable instead of straight away running the tactic block?</li>\n<li>where do non synthetic meta variables come from, for example when I have a call to a generic function I can see in the elaboration trace that initially the type parameters are meta variables as well, I'm guessing non synthetic ones since the way to close them isn't exactly obvious from the beginning?  Who is responsible for creating and closing those, for the closing part I'm guessing the type inference algorithm (where does that live?))?</li>\n</ul>",
        "id": 280744955,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1651337359
    },
    {
        "content": "<blockquote>\n<p>(is this correct)?</p>\n</blockquote>\n<p>There are more details, but the big picture you have described is correct.</p>\n<blockquote>\n<p>we do this with another meta variable instead of straight away running the tactic block?</p>\n</blockquote>\n<p>When we process the <code>by ...</code>, the local context and target type are often full of metavariables. These holes are usually only filled with information we obtain elaborating the rest of the declaration.</p>\n<blockquote>\n<p>where do non synthetic meta variables come from,</p>\n</blockquote>\n<p>Implicit <code>{ .. }</code> arguments, and they are \"filled\" by solving typing constraints (i.e., invoking <code>isDefEq</code>).</p>",
        "id": 280745504,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651338100
    }
]