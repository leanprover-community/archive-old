[
    {
        "content": "<p>I have experimented with formalizing olympiad problem statements on top of the mathport <code>.olean</code> files, and have found that elaborating concrete arithmetic expressions is the biggest pain point by far. The issues might be solvable by removing the <code>outParam</code> annotation on the result types for the heterogeneous operators, or perhaps they will require a custom elaborator to solve. But before thinking too deeply about fixes, I thought it would be best to work out a spec of what idioms are critical to support. Here is a very preliminary proposal: <a href=\"https://gist.github.com/dselsam/4fbc7234db7fd4349ffa940bafd6edda\">https://gist.github.com/dselsam/4fbc7234db7fd4349ffa940bafd6edda</a> Currently, only a few of the examples in the gist work. Thoughts? Missing idioms of import?</p>",
        "id": 233195445,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617640003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- There should be no subtraction on ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"c1\">-- (should fail)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- (should fail)</span>\n</code></pre></div>\n<p>This seems... disruptive</p>",
        "id": 233207675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617645994
    },
    {
        "content": "<p>Could you mark all of the examples with an indication of whether they fail or not?</p>",
        "id": 233207764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617646052
    },
    {
        "content": "<p>alternatively, could you post a version that works without mathlib (using stubbed out instances and such)</p>",
        "id": 233207850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617646090
    },
    {
        "content": "<p>I added \"fails\" annotations to the gist for now. I can post a no-mathlib version this evening.</p>",
        "id": 233208559,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617646460
    },
    {
        "content": "<p>Here's a list of examples that fail at least one of lean 3 and lean 4. I guess we should focus on the \"fails in lean 4, not lean 3\" ones; many of the \"fails both\" are because the relevant instance doesn't exist in mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Adding with one-side coercion on the left, no expected type</span>\n<span class=\"k\">#check</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"c1\">-- ℤ -- fails both</span>\n<span class=\"k\">#check</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"c1\">-- ℚ -- fails both</span>\n<span class=\"k\">#check</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- ℝ -- fails both</span>\n\n<span class=\"c1\">-- Raising to same-type powers (no expected type)</span>\n<span class=\"k\">#check</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"c1\">-- fails both</span>\n<span class=\"k\">#check</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">q</span> <span class=\"c1\">-- fails both</span>\n\n<span class=\"c1\">-- Raising numerals to powers (no expected type)</span>\n<span class=\"k\">#check</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"c1\">-- fails both</span>\n<span class=\"k\">#check</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">q</span> <span class=\"c1\">-- fails both</span>\n<span class=\"k\">#check</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">x</span> <span class=\"c1\">-- fails in lean 3, not lean 4</span>\n\n<span class=\"c1\">-- Raising nats to powers (no expected type)</span>\n<span class=\"k\">#check</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"n\">z</span> <span class=\"c1\">-- fails both</span>\n<span class=\"k\">#check</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"n\">q</span> <span class=\"c1\">-- fails both</span>\n<span class=\"k\">#check</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"n\">x</span> <span class=\"c1\">-- fails both</span>\n\n<span class=\"c1\">-- Dividing by numerals (with expected type ≥ ℚ)</span>\n<span class=\"c1\">-- TODO: different notation for nat-div and rat/real-div? (or just no notation for nat.div)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails both</span>\n\n<span class=\"c1\">-- Dividing by nats (with expected type ≥ ℚ)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails both</span>\n\n<span class=\"c1\">-- II. Polynomials</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Constants should work with coerced expected type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 3, not lean 4</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 3, not lean 4</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 3, not lean 4</span>\n\n<span class=\"c1\">-- Variables to numeral powers should work with expected type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n\n<span class=\"c1\">-- Variables to nat powers should work with expected type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n\n<span class=\"c1\">-- Standard-form polynomials should work with regular expected type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n\n<span class=\"c1\">-- Standard-form polynomials should work with coerced expected type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails both</span>\n\n<span class=\"c1\">-- Standard-form polynomials should work without expected type</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x₂</span> <span class=\"c1\">-- fails in lean 4, not lean 3</span>\n\n<span class=\"c1\">-- Standard-form polynomials should work with coerced constants without expected type</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails both</span>\n</code></pre></div>",
        "id": 233210145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617647191
    },
    {
        "content": "<p>Based on the failure patterns, it seems like lean 4 is using a different order for deciding where to insert coercion arrows</p>",
        "id": 233210233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617647244
    },
    {
        "content": "<p>I thought this issue was fixed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"c1\">-- ℤ -- fails both</span>\n</code></pre></div>",
        "id": 233210407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617647316
    },
    {
        "content": "<p>Here is a version that does not depend on mathlib: <a href=\"https://gist.github.com/dselsam/98f8febef01cca03a41d2dafcc876bba\">https://gist.github.com/dselsam/98f8febef01cca03a41d2dafcc876bba</a> (fail annotations refer to e863376be1552562d0d7ee9c7f13fd5a2d51d9e0)</p>",
        "id": 233248991,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617668274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/elab.20goals.20for.20concrete.20arith/near/233210407\">said</a>:</p>\n<blockquote>\n<p>I thought this issue was fixed?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"c1\">-- ℤ -- fails both</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It is fixed, and works in the gist I just posted that does not depend on mathlib. They failed in the original version that imports all of mathlib due to <code>Coe</code> synth queries timing out.</p>",
        "id": 233250578,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617669570
    }
]