[
    {
        "content": "<p>I've found a example where #reduce does not seem to terminate<br>\nConsider defining a recursive function using <code>Acc</code>(the accessibility predicate provided by Lean's standard library, used to define well-foundedness)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">select</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hrec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n         <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Acc.intro</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">motive</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">select</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp_arith</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.div_le_self</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ltwfrel</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel.wf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Now try to use these utilities and <code>Acc.rec</code> to define a recursive function, and evaluate it on some natural numbers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"mi\">126</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"mi\">127</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It produces the correct results. However, the following command fails with error <code>maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried <code>set_option maxRecDepth 3000</code> and it still fails, then I tried <code>set_option maxRecDepth 5000</code> and Lean crashed.<br>\nDoes it mean that #reduce might not terminate, or the required recursion depth for this example is just too large for Lean to handle?</p>",
        "id": 294448023,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661005462
    },
    {
        "content": "<p>Mario did explain in a previous thread that reduce does per se always terminate but has a \"galactic complexity bound\" so with real world computers it is quite easily possible to run out of resources.</p>\n<p>Now whether your thing is a bug and wrongfully doesn't terminate I don't know...generally speaking <code>#reduce</code> is not something the vast majority of Lean users will ever use either, we usuall stick to <code>#check</code> for types and <code>#eval</code> for values</p>",
        "id": 294448783,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1661005921
    },
    {
        "content": "<p>Thanks. I think that in most cases #check and #eval is enough (I used #reduce only to inspect partial applications).</p>",
        "id": 294453869,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661008754
    },
    {
        "content": "<p>As to whether this is a bug or it just takes too long to terminate, I think there is some evidence suggesting the former (I'm just guessing). For example it terminates when given an exact value, but does not terminate when give a variable, as shown in the examples. Moreover, the command <code>#reduce ltwf_rel 4</code> also succeeds.</p>",
        "id": 294454641,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661009212
    },
    {
        "content": "<p>I think it's actually the latter, and the culprit is <code>Hrec</code></p>",
        "id": 294455875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661009976
    },
    {
        "content": "<p>just <code>#reduce Hrec</code> times out</p>",
        "id": 294455904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661009987
    },
    {
        "content": "<p><code>simp_arith</code> surely produces a giant term</p>",
        "id": 294455957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661010004
    },
    {
        "content": "<p>you are better off writing \"hand crafted\" terms if you want <code>#reduce</code> to terminate in the same century</p>",
        "id": 294456020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661010040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">div2'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div2'_le</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">div2'</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">div2'</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">select</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">div2'</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Hrec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Acc.intro</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_of_le</span> <span class=\"n\">div2'_le</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">succ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ltwf_rel</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel.wf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">Hrec</span>\n<span class=\"k\">#reduce</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this terminates after all</p>",
        "id": 294457416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661010904
    },
    {
        "content": "<p>Thanks. I didn't expect it to turn out like this......</p>",
        "id": 294457949,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661011208
    },
    {
        "content": "<p>I found that there is an easier way to make it terminate</p>",
        "id": 294459102,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661011883
    },
    {
        "content": "<p>We only need to avoid using tactics like <code>simp_arith</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hrec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.div_le_self</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294459198,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661011936
    },
    {
        "content": "<p>Then these reductions terminate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">Hrec</span>\n<span class=\"k\">#reduce</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">motive</span> <span class=\"n\">Hrec</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ltwf_rel</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294459231,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661011964
    },
    {
        "content": "<p>But the term is still large and the result doesn't seem useful...</p>",
        "id": 294459431,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661012098
    },
    {
        "content": "<p>Oh, maybe an even easier way is to declare <code>Hrec</code> as  a <code>theorem</code>. Then the result makes some sense.</p>",
        "id": 294459595,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661012213
    }
]