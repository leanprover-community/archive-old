[
    {
        "content": "<p>I get the following error when running <code>forallTelescope</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>uncaught exception: (deterministic) timeout at 'whnf', maximum number of heartbeats (50000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)\n</code></pre></div>\n<p>I am a bit confused about this, I thought that <code>forallTelescope</code> doesn't reduce the expression at all, as opposed to <code>forallTelescopeReducing</code>.</p>\n<p>I can reproduce this when I run <code>forallTelescope</code> on all declarations of <code>mathlib3port</code> (current commit - <code>9b3a383</code>). Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Core</span>\n<span class=\"c1\">-- you need to clone and `lake build` mathlib3port in the right directory to run this</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"../mathlib3port/build/lib\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"../mathlib3port/lean_packages/lean3port/build/lib/\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"../mathlib3port/lean_packages/mathlib/build/lib/\"</span><span class=\"o\">]</span>\n    <span class=\"n\">importModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathbin</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">CoreM.toIO</span> <span class=\"o\">(</span><span class=\"n\">MetaM.run'</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₁.toArray.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">decls.forM</span> <span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">nm.isInternal</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">nm</span>\n      <span class=\"k\">let</span> <span class=\"n\">isprop</span> <span class=\"bp\">←</span> <span class=\"n\">forallTelescope</span> <span class=\"n\">info.type</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.isProp</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{nm}: {isprop}\"</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Note: when I replace <code>forallTelescope</code> by a structural recursion on the expression, I don't get an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Core</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">piCodomain</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">piCodomain</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Expr</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"../mathlib3port/build/lib\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"../mathlib3port/lean_packages/lean3port/build/lib/\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"../mathlib3port/lean_packages/mathlib/build/lib/\"</span><span class=\"o\">]</span>\n    <span class=\"n\">importModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathbin</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">CoreM.toIO</span> <span class=\"o\">(</span><span class=\"n\">MetaM.run'</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₁.toArray.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">decls.forM</span> <span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">nm.isInternal</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">nm</span>\n      <span class=\"k\">let</span> <span class=\"n\">isprop</span> <span class=\"bp\">←</span> <span class=\"n\">info.type.piCodomain.isProp</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{nm}: {isprop}\"</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is this the expected behavior (for complicated enough expressions)?</p>",
        "id": 268703407,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642690486
    },
    {
        "content": "<p><code>forallTelescope</code> may need to reduce domains to check for type classes. Which should be cheap, but it might accumulate.</p>",
        "id": 268705377,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642691192
    },
    {
        "content": "<p>The heartbeat limit is mostly for interactive use, you can set it to some higher number (or 0) in the <code>CoreM.toIO</code> call</p>",
        "id": 268705758,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642691321
    },
    {
        "content": "<p>Thanks! Both of those options indeed solve the problem. <br>\nI didn't know that the number of heartbeats was for the whole <code>CoreM.toIO</code> call instead of each <code>whnf</code> call individually.</p>",
        "id": 268707924,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642692078
    },
    {
        "content": "<p>I believe it's because <code>whnf</code> is regarded as a helper function to be used in larger modules that define a \"heartbeat scope\". For example TC resolution is a scope.</p>",
        "id": 268708327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642692211
    }
]