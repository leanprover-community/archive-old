[
    {
        "content": "<p>I have Vec defined like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vec'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Vec'</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec'</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vec</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">Vec'</span>\n</code></pre></div>\n<p>but I would like to have <code>Vec : Nat -&gt; Type -&gt; Type</code> as an inductive type directly. Is this possible?</p>",
        "id": 289569278,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657790867
    },
    {
        "content": "<p>The syntax for inductive types requires all parameters to occur before indices. In your definition α is a parameter and n is an index. If you reverse the order, then α is forced to be an index and that causes a universe bump:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A.Vec</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B.Vec</span> <span class=\"o\">:</span>  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"mi\">0</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A.Vec</span> <span class=\"c1\">-- Type u_1 → Nat → Type u_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">B.Vec</span> <span class=\"c1\">-- Nat → Type u_1 → Type (u_1+1)</span>\n</code></pre></div>",
        "id": 289574723,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1657794859
    },
    {
        "content": "<p>But that results in an universe bump, which is quite undesirable.</p>",
        "id": 289574776,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657794913
    },
    {
        "content": "<p>In ancient times, both <code>A.Vec</code> and <code>B.Vec</code> would have a universe bump since the colon was the division between parameters and indices. The current behavior is already much improved.</p>",
        "id": 289575396,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1657795389
    },
    {
        "content": "<p>Having mixed parameters and indices would require some deep changes. For example, in the <a href=\"https://github.com/leanprover/lean4/blob/09c4af26fce85559202a9c8a65837da88fefcd5e/src/Lean/Declaration.lean#L201\"><code>InductiveVal</code> structure</a>, only the number of indices is recorded, which is sufficient since they are necessarily last.</p>",
        "id": 289575868,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1657795697
    },
    {
        "content": "<p>I see, there are probably some deep theoretical reasons for it but for me such universe bumb would be unacceptable.</p>",
        "id": 289586370,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657802319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244748\">ohhaimark</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20Vec.20as.20inductive.20with.20length.20as.20first.20argument/near/289569278\">said</a>:</p>\n<blockquote>\n<p>but I would like to have <code>Vec : Nat -&gt; Type -&gt; Type</code> as an inductive type directly. Is this possible?</p>\n</blockquote>\n<p>Why not just use an abbreviation? That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Vec'</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 289614064,
        "sender_full_name": "Mac",
        "timestamp": 1657815556
    },
    {
        "content": "<p>That's isomorphic to the flip suggestion they made no?</p>",
        "id": 289614100,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657815578
    },
    {
        "content": "<p>No, <code>flip</code> is a <code>def</code> not an <code>abbrev</code> (and is not marked <code>@[reducible]</code>) and neither is their <code>def Vec</code>, so their shorthand is not reducible, whereas the <code>abbrev</code> is  (which, of course, matters for things like typeclasses).</p>",
        "id": 289614467,
        "sender_full_name": "Mac",
        "timestamp": 1657815739
    },
    {
        "content": "<p>The only thing is that you don't get the generated definitions. Speaking of which, is there a wildcard export like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Vec</span>\n  <span class=\"kn\">export</span> <span class=\"n\">Vec'</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Vec</span>\n</code></pre></div>",
        "id": 289660856,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657839282
    },
    {
        "content": "<p>Sadly, no</p>",
        "id": 289661462,
        "sender_full_name": "Mac",
        "timestamp": 1657839658
    }
]