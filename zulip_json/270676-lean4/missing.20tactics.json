[
    {
        "content": "<p>In Lean 3 I could make cheap and dirty tactics with the <code>\\[tac...]</code> trick. I see that Lean 4 doesn't have a <code>split</code> tactic yet, but my users (who never write term mode proofs) will be used to this. What is the Lean 4 version of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.split</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">And.intro</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>?</p>",
        "id": 231495523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616515246
    },
    {
        "content": "<p>See <a href=\"https://leanprover.github.io/lean4/doc/tactics.html#extensible-tactics\">https://leanprover.github.io/lean4/doc/tactics.html#extensible-tactics</a> :)</p>",
        "id": 231495790,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616515322
    },
    {
        "content": "<p>Sorry. I read through the entire manual about a month ago but stuff doesn't stick in my brain like it used to.</p>",
        "id": 231497869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616516016
    },
    {
        "content": "<p>This is great -- I now have <code>split</code>, <code>left</code> and <code>right</code>. Can I get <code>cases (h : p \\and q) with hp hq</code> this way? Where can I read about how to do this? Or should I just wait?</p>",
        "id": 231499144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616516478
    },
    {
        "content": "<p>Do you not like the built-in Lean 4 <code>cases</code> tactic (found on the same page)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 231573099,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616552579
    },
    {
        "content": "<p>Wait, that is <code>\\or</code>...</p>",
        "id": 231573121,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616552605
    },
    {
        "content": "<p>Ok, yeah, I guess the built in version of <code>cases (h : p \\and q)</code> is a bit awkward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 231575027,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616554305
    },
    {
        "content": "<p>Yes I don't like it because by default it doesn't name variables and in the examples you give the user needs to know the names of the constructors eg inl and intro. Mathematicians can use this software in a way which involves knowing nothing about what's going on under the hood you see, not even knowing what an inductive type or a constructor is for example.</p>",
        "id": 231593826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616571457
    },
    {
        "content": "<p>By the way, you don't have to know <code>intro</code> in the <code>And</code> example, this is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 231594142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616571738
    },
    {
        "content": "<p>I think I will port <code>rcases</code> for this stuff</p>",
        "id": 231594186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616571789
    },
    {
        "content": "<p>In my personal experience, <code>cases</code> was a very good tactic to have at the beginning.  Now that I am more familiar with the system, I tend to prefer <code>rcases</code>, but I was intimidated by it, when I was starting to use Lean.</p>",
        "id": 231594291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616571872
    },
    {
        "content": "<p><code>let</code> can be used to destruct a term (but it leaves unnamed hypothesis in the local context currently):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Also, <code>intro</code> accepts patterns:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It is missing \"or patterns\" of <code>rcases</code> / <code>rintro</code>, though.</p>",
        "id": 231594487,
        "sender_full_name": "pcpthm",
        "timestamp": 1616572067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347012\">@pcpthm</span>  We already have intro+match notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 231735897,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1616636392
    },
    {
        "content": "<p>Ah, I didn't think about combining <code>intro</code> and the pattern patching syntax in that way.</p>\n<p>While I experimenting with this kind of code I found this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n  <span class=\"c1\">-- Can I remove duplication from the proof above?</span>\n  <span class=\"c1\">-- Using the \"preprocessing\" tactics feature of `cases`, I get an error \"alternative 'inl' is not\"</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span>\n\n  <span class=\"c1\">-- I cannot use the patternless form of `cases` either because I cannot access resulting hypotheses:</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"bp\">???;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>  <span class=\"c1\">-- Can I refer to the unnamed variable?</span>\n\n  <span class=\"c1\">-- it is ugly but works</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With mathlib <code>rintro</code> the above example can be written concisely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Or without using the `rfl` feature</span>\n<span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231798737,
        "sender_full_name": "pcpthm",
        "timestamp": 1616678509
    },
    {
        "content": "<p>You can use <code>simp_all</code> to use all hypotheses: <code>cases h &lt;;&gt; simp_all</code></p>",
        "id": 231799457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616678791
    },
    {
        "content": "<p>This also worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h'</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231799566,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616678839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/missing.20tactics/near/231799457\">said</a>:</p>\n<blockquote>\n<p>You can use <code>simp_all</code> to use all hypotheses: <code>cases h &lt;;&gt; simp_all</code></p>\n</blockquote>\n<p>That is an another new tactic I missed. Thank you!</p>",
        "id": 231799614,
        "sender_full_name": "pcpthm",
        "timestamp": 1616678860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/missing.20tactics/near/231799566\">said</a>:</p>\n<blockquote>\n<p>This also worked for me:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h'</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>More simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>just worked for me. It is a surprise and I didn't know <code>cases</code> works this way. It almost looks like goals are in superposition or something. I don't quite understand how it works yet.</p>\n<p>&lt;del&gt;Unfortunately <code>simp_all</code> fails with an error message \"unknown free variable '_uniq.1038'\" for some reason:&lt;/del&gt;<br>\nEdit: I updated Lean to current master and it now works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 231801084,
        "sender_full_name": "pcpthm",
        "timestamp": 1616679415
    },
    {
        "content": "<blockquote>\n<p>&lt;del&gt;Unfortunately simp_all fails with an error message \"unknown free variable '_uniq.1038'\" for some reason:&lt;/del&gt;<br>\nEdit: I updated Lean to current master and it now works!</p>\n</blockquote>\n<p>I fixed a bug that produced this error message last night. <del>Could you please try the <code>master</code> branch?</del></p>",
        "id": 231812974,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1616683339
    }
]