[
    {
        "content": "<p>Hi, I currently rewriting code from <a href=\"http://adam.chlipala.net/cpdt/\">CPDT</a> and stuck with stack machine semantic proof.<br>\nI have several questions about lean:</p>\n<ul>\n<li>How can I make non-opaque alias for type.</li>\n<li>Is there any tactic for automatic proofs like <a href=\"https://github.com/lukaszcz/coqhammer\">sauto</a>.</li>\n</ul>\n<p>There's also a problem with actual proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Instr</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"n\">bop</span> <span class=\"o\">:</span> <span class=\"n\">BinOp</span>\n<span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"n\">ih₁</span> <span class=\"o\">:</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e₁</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e₁</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Click</span> <span class=\"n\">to</span> <span class=\"n\">join</span> <span class=\"n\">video</span> <span class=\"n\">call</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">meet.jit.si</span><span class=\"bp\">/</span><span class=\"mi\">185444530925654</span><span class=\"o\">)</span>\n<span class=\"n\">ih₂</span> <span class=\"o\">:</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e₂</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e₂</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e₁</span> <span class=\"bp\">++</span> <span class=\"o\">([</span><span class=\"n\">iBinOp</span> <span class=\"n\">bop</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span>\n    <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">binOpDenote</span> <span class=\"n\">bop</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In this proof context lean doesn't want to rewrite with ih₂, but this expression obviously has an appropriate type and works fine with simple rewrite tactic in coq.<br>\nThere's a link to <a href=\"https://gist.github.com/remimimimi/261f951d72dc1b3d035756ea4478d926#file-stackmachine-lean-L97\">full code</a></p>",
        "id": 266755348,
        "sender_full_name": "Remi",
        "timestamp": 1641256951
    },
    {
        "content": "<p>There's no hammer equivalent in Lean4. You can make a non-opaque alias with either <code>abbrev &lt;name&gt; := ..</code>or <code>@[reducible] def &lt;name&gt; := ..</code>.</p>",
        "id": 266757540,
        "sender_full_name": "Chris B",
        "timestamp": 1641258127
    },
    {
        "content": "<p>w.r.t. <code>sauto</code>, There's <code>library_search</code>, but it's not as beefy as other proof search stuff.</p>",
        "id": 266757747,
        "sender_full_name": "Chris B",
        "timestamp": 1641258279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463969\">@Remi</span> I'd expect <code>ih_1</code> and <code>ih_2</code> to have the form <code>Forall (p:List Instr)</code>, if they had that form, then simp or rewrite should likely work.</p>",
        "id": 266757895,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1641258388
    },
    {
        "content": "<p>Right, <code>ih₂</code> is about some specific program <code>p</code>, but the goal is about some different program built from <code>p</code>, so <code>ih₂</code> doesn't apply.</p>",
        "id": 266758288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641258752
    },
    {
        "content": "<p>A bit hard to guess without context, but maybe you want to generalize <code>p</code> before doing an induction.</p>",
        "id": 266758304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641258766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">compileCorrect'</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Instr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"n\">generalizing</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">binOp</span> <span class=\"n\">bop</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compile</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exprDenote</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e₁</span> <span class=\"bp\">++</span> <span class=\"o\">([</span><span class=\"n\">iBinOp</span> <span class=\"n\">bop</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih₂</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds now.</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266758372,
        "sender_full_name": "Chris B",
        "timestamp": 1641258838
    },
    {
        "content": "<p>ah whoops, I missed that there was a link to the code!</p>",
        "id": 266758507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641258945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span>  Can you explain what differs your code from mine?</p>",
        "id": 266758622,
        "sender_full_name": "Remi",
        "timestamp": 1641259034
    },
    {
        "content": "<p>The <code>generalizing</code> bit in <code>induction e generalizing p</code>.</p>",
        "id": 266758637,
        "sender_full_name": "Chris B",
        "timestamp": 1641259059
    },
    {
        "content": "<p>It changes the inductive hypotheses.</p>",
        "id": 266758708,
        "sender_full_name": "Chris B",
        "timestamp": 1641259097
    },
    {
        "content": "<p>Oh, now I understand.<br>\nThank's everyone for the help!</p>",
        "id": 266758728,
        "sender_full_name": "Remi",
        "timestamp": 1641259124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463969\">@Remi</span> btw stuff to the right of the colon gets generalized automatically, some people find that more intuitive. This achieves the same result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">compileCorrect'</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Instr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n</code></pre></div>",
        "id": 266758824,
        "sender_full_name": "Chris B",
        "timestamp": 1641259213
    },
    {
        "content": "<p>There's full proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">compileCorrect'</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Instr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">programDenote</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">programDenote</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">exprDenote</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"n\">generalizing</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">binOp</span> <span class=\"n\">bop</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compile</span><span class=\"o\">,</span> <span class=\"n\">exprDenote</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">programDenote</span><span class=\"o\">,</span> <span class=\"n\">instrDenote</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 266763159,
        "sender_full_name": "Remi",
        "timestamp": 1641263986
    },
    {
        "content": "<p>Way to go. By the way, where did you see that syntax for addressing the induction cases with <code>.</code> instead of <code>| constructor .. =&gt; </code>?</p>",
        "id": 266765048,
        "sender_full_name": "Chris B",
        "timestamp": 1641266349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#basic-tactics\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#basic-tactics</a></p>",
        "id": 266765936,
        "sender_full_name": "Remi",
        "timestamp": 1641267431
    }
]