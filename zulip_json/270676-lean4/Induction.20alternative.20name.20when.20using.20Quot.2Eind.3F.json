[
    {
        "content": "<p>What is the induction alternative name when using <code>Quot.ind</code>? Leaving it blank works fine as in this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"n\">using</span> <span class=\"n\">Quot.ind</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What should that blank be? <code>mk</code> doesn't work...</p>",
        "id": 250811977,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1629999998
    },
    {
        "content": "<p>I believe the alternative names for the <code>induction</code> tactic come from the names of the arguments for the recursor.  <code>Quot.ind</code> doesn't name the induction hypothesis however:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Quot.ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>Judging by the <code>case a</code> heading for the tactic state at the <code>sorry</code>, it seems that Lean has decided to give it the name <code>a</code> (I wasn't able to figure out where this happens <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/Induction.lean\">in the induction tactic</a> though). So, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"n\">using</span> <span class=\"n\">Quot.ind</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250815534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630001453
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Quot.ind'</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Quot.ind</span> <span class=\"n\">mk</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"n\">using</span> <span class=\"n\">Quot.ind'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250815770,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630001545
    }
]