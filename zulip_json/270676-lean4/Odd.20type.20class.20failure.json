[
    {
        "content": "<p>I have encountered this odd type class synthesis failure. I do not even know how to describe it, but it is an odd mix of reducible definition and a class in the assumption of another class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>           <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">S.α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span>    <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">foo'.α</span> <span class=\"o\">:=</span> <span class=\"n\">instAddNat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar'</span> <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Bar.toAdd</span> <span class=\"n\">foo</span>      <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Anyone has any idea why is <code>example (X) [Bar  X foo]  : Add X := by infer_instance</code> failing to synthesize an instance?</p>",
        "id": 264638922,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639336593
    },
    {
        "content": "<p>Looks like Lean doesn't see the two occurrences of <code>⟨Nat⟩</code> as the same. It works if you change <code>foo</code> like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>    <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo'</span>\n</code></pre></div>\n<p>The error is still strange IMHO.</p>",
        "id": 264640012,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639338194
    },
    {
        "content": "<p>Oh, it works if <code>S</code> is an <code>outParam</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>                      <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">S.α</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span>    <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">foo'.α</span> <span class=\"o\">:=</span> <span class=\"n\">instAddNat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar'</span> <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Bar.toAdd</span>          <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 264640262,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639338510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198266\">Sebastian Reichelt</span> <a href=\"#narrow/stream/270676-lean4/topic/Odd.20type.20class.20failure/near/264640012\">said</a>:</p>\n<blockquote>\n<p>Looks like Lean doesn't see the two occurrences of <code>⟨Nat⟩</code> as the same. It works if you change <code>foo</code> like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>    <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo'</span>\n</code></pre></div>\n<p>The error is still strange IMHO.</p>\n</blockquote>\n<p>Sure, but that way <code>foo.1</code> is not <code>Nat</code> but <code>foo'.1</code> and defeats the whole purpose why <code>foo</code> is <code>abbrev</code>.</p>",
        "id": 264640541,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639338900
    },
    {
        "content": "<blockquote>\n<p>Oh, it works if <code>S</code> is an <code>outParam</code></p>\n</blockquote>\n<p>Interesting, what is going on there?</p>",
        "id": 264640599,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639338979
    },
    {
        "content": "<p>Another solution is to add: <code>instance {X a} [Add a] [Bar X ⟨a⟩] : Add X := Bar.toAdd ⟨a⟩</code></p>",
        "id": 264640698,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639339111
    },
    {
        "content": "<p>I hope someone more knowledgeable will chime in, but roughly speaking if you have an instance of <code>Bar X foo</code> in your context and want to synthesize <code>Add X</code>, Lean needs to infer the argument <code>foo</code>. Making the parameter an <code>outParam</code> causes it to always be inferred.<br>\nOne important piece of the puzzle may be this: <code>[Bar X foo]</code> with <code>Bar X foo</code> extending <code>Add X</code> doesn't act like having <code>[Add X]</code> in your context. Instead, the instance of <code>Add X</code> is found by type class search, so first of all <code>Bar X foo</code> needs to be found in that particular call to <code>infer_instance</code>.</p>",
        "id": 264641344,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639339887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Odd.20type.20class.20failure/near/264640599\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh, it works if <code>S</code> is an <code>outParam</code></p>\n</blockquote>\n<p>Interesting, what is going on there?</p>\n</blockquote>\n<p>Without <code>outParam</code> on <code>[Add S.α]</code>, it is a normal parameter of the the typeclass. That is, <code>Bar</code> is polymorphic in <code>Add (S.α)</code>.</p>",
        "id": 264641353,
        "sender_full_name": "Mac",
        "timestamp": 1639339903
    }
]