[
    {
        "content": "<p>Hi guys,</p>\n<p>I'm trying to write a parser for alphanumerical names similar to <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's <a href=\"https://youtu.be/TgHISG-81wM?t=3271\">text parser</a>. I copied it for the most part part, but I'm getting an error when I use it in my syntax.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TgHISG-81wM\" href=\"https://youtu.be/TgHISG-81wM?t=3271\"><img src=\"https://uploads.zulipusercontent.net/9d1af530a43b3ec479fb70497feb1cd4592d65a8/68747470733a2f2f692e7974696d672e636f6d2f76692f5467484953472d3831774d2f64656661756c742e6a7067\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"name\"</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">takeWhile1Fn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.isAlphanum</span><span class=\"o\">)</span> <span class=\"s2\">\"Invalid name\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"bp\">;</span>\n    <span class=\"n\">mkNodeToken</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span> <span class=\"n\">startPos</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n<span class=\"o\">}</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"pql!\"</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">labelmatcher</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">formatter</span> <span class=\"n\">for</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">collectTokens</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">collectKinds</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">firstTokens</span> <span class=\"o\">:=</span> <span class=\"n\">FirstTokens.unknown</span> <span class=\"o\">},</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">takeWhile1Fn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char.isAlphanum</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"s2\">\"Invalid name\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"bp\">;</span>\n    <span class=\"n\">mkNodeToken</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span> <span class=\"n\">startPos</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">}</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>The stringLit parser works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"pql!\"</span> <span class=\"n\">strLit</span> <span class=\"o\">(</span><span class=\"n\">labelmatcher</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>What does the error mean?</p>",
        "id": 299919609,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1663754083
    },
    {
        "content": "<p>I'm on leanprover/lean4:v4.0.0-m4</p>",
        "id": 299921073,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1663754599
    },
    {
        "content": "<p>The full definition of the parser is at <a href=\"https://github.com/leanprover/lean4/blob/3e83e28e8f7a81931ef4d6c77b797a60fcfdf5a3/tests/playground/webserver/Webserver.lean#L100-L108\">https://github.com/leanprover/lean4/blob/3e83e28e8f7a81931ef4d6c77b797a60fcfdf5a3/tests/playground/webserver/Webserver.lean#L100-L108</a>, though other parts of that file would need to be updated for current Lean versions</p>",
        "id": 299925437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663756461
    }
]