[
    {
        "content": "<p>I was trying to allow antiquotes in my custom syntax extensions (to get a sort of \"template\" syntax). I can make it work for individual syntax extensions manually by just passing the identifiers along in the macros, kind of like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">paramident</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">decl</span>\n\n<span class=\"n\">syntax</span>  <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">paramident</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"£\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">paramident</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"var\"</span> <span class=\"n\">paramident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">paramident</span> <span class=\"o\">:</span> <span class=\"n\">decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[decl|\"</span> <span class=\"n\">decl</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">£</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.TSyntax.Compat</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">paramident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">paramident</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bar\"</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">£</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- (\"bar\", \"foo\")</span>\n</code></pre></div>\n<p>This seems to have two disadvantages, however: </p>\n<p>- I couldn't quite figure out how to use <code>$</code> for my custom antiquotations (but I guess <code>£</code> works here as well, it's got a sense of irony there)<br>\n  - It's not very generic: I'd have to do this for every possible subterm in my syntax if I want to be able to replace it.</p>\n<p>Looking at the code that does the antiquotation for Lean it seems that there's already a <a href=\"https://github.com/leanprover/lean4/blob/8f4ad15a47e94db31a1c7a350b3a38787180465c/src/Lean/Parser/Basic.lean#L1796\">parser generator for antiquotations</a> that but it's <a href=\"https://github.com/leanprover/lean4/blob/8f4ad15a47e94db31a1c7a350b3a38787180465c/src/Lean/Elab/Syntax.lean#L327\">not exposed to the syntax extensions</a>. Would it make sense to add that there to be able to define places where we can use antiquotes to custom syntax (in a similar way to e.g. <code>sepBy</code>)? It doesn't seem to be easily doable in a project-specific/library way.</p>",
        "id": 290539670,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658509666
    },
    {
        "content": "<p>It is possible to use the built-in antiquotations for your own syntax as well.  For example in quote4, you can write <code>q($x + $y)</code> and the <code>$x</code> is used for custom purposes.  The only downside is that you have zero control over where the antiquotations are allowed (they are allowed anywhere you'd be able to write them in a syntax quotation e.g. <code>[decl $foo]</code> would be valid syntax).</p>",
        "id": 290541391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658510411
    },
    {
        "content": "<p>oh, interesting, and how do you do that?</p>",
        "id": 290542562,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658510908
    },
    {
        "content": "<p>that's actually exactly what I want to allow, although what I was suggesting could give more fine control</p>",
        "id": 290542642,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658510950
    },
    {
        "content": "<p>You can look in the souce code for inspiration: <a href=\"https://github.com/gebner/quote4/blob/06023076e5b41510171b43d82cbfabc82b2fd5dd/Qq/Macro.lean#L420-L421\">https://github.com/gebner/quote4/blob/06023076e5b41510171b43d82cbfabc82b2fd5dd/Qq/Macro.lean#L420-L421</a></p>\n<p>You don't need to do anything to enable the antiquotations.  You just need to handle them when going through the syntax tree with the <code>antiquotKind?</code> etc. functions.</p>",
        "id": 290543081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658511163
    },
    {
        "content": "<p>oh, I see, so you define and manually call your own parser <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I guess that should also work (although I'm a bit scared of looking into that code) thanks for the inspiration :)</p>",
        "id": 290543928,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658511552
    },
    {
        "content": "<p>No custom parser just a custom macro rule.  I think in your case something like the following (completely untested) should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">paramident</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">stx.isAntiquotKind</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">stx.getAntiquotTerm.isIdent</span> <span class=\"k\">then</span>\n      <span class=\"n\">quote</span> <span class=\"n\">stx.getAntiquotTerm</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Macro.throwUnsupported</span>\n</code></pre></div>",
        "id": 290544764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658511978
    },
    {
        "content": "<p>oh, that look pretty neat, thanks <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> ! (I'll try that and post the full example later for reference)</p>",
        "id": 290547005,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658513044
    },
    {
        "content": "<p>So I was trying to adapt his example to use antiquotes, but ran into the following error that I am struggling to debug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">decl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">incQuotDepth</span> <span class=\"c1\">-- incQuotDepth : Parser → Parser</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[decl|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"c1\">-- error: parser 'incQuotDepth' was not found???</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> any ideas as to why Lean claims <code>incQuotDepth</code> is missing?</p>",
        "id": 290549036,
        "sender_full_name": "Mac",
        "timestamp": 1658514040
    },
    {
        "content": "<p><code>incQuotDepth</code> is no longer necessary</p>",
        "id": 290549081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658514070
    },
    {
        "content": "<p>I was trying to get this to work too for this simple example and I can't figure it out. Apparently the antiquoted term is not of that kind then, but gets a derived \"pseudo antiquot\" kind ,<code>paramident.pseudo.antiquot</code> in the example and a corresponding error <code>elaboration function for 'paramident.pseudo.antiquot' has not been implemented\n</code>.  I can't seem to find a way to implement the parser for that, as neither of the ways I'd think works, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">paramident.pseudo.antiquot</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[macro paramident.pseudo.antiquot]</span>\n<span class=\"kd\">def</span> <span class=\"n\">parseParamIdent</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">paramidentantiq</span><span class=\"o\">)</span> <span class=\"s2\">\"$\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">paramident</span>\n<span class=\"kd\">@[macro paramidentantiq]</span>\n<span class=\"kd\">def</span> <span class=\"n\">parseParamIdent</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n</code></pre></div>",
        "id": 290606816,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658572548
    },
    {
        "content": "<p>I guess because the <a href=\"https://github.com/leanprover/lean4/blob/f6211b1a74690daadce3f1466127d06fbc97a287/src/Lean/Parser/Syntax.lean#L67\">kind annotation takes an ident</a>, and the <code>@[macro ...]</code> annotation seems to only want explicitly-named syntax, not these derived kinds</p>",
        "id": 290607042,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658572811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> Requiring <code>TSyntax.Compat</code> should be a big red flag suggesting that you're doing something wrong. Indeed you can't just return a <code>paramident</code> as a <code>term</code>, because it's not a <code>term</code>. The appropriate solution for that is to add a separate syntax for interpreting paramident, in which case antiquotations can naturally be implemented as cancelling out the surrounding quotation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">paramident</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">decl</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">paramident</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"var\"</span> <span class=\"n\">paramident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">paramident</span> <span class=\"o\">:</span> <span class=\"n\">decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[decl|\"</span> <span class=\"n\">decl</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[paramident|\"</span> <span class=\"n\">paramident</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x.raw.isAntiquot</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">x.raw.getAntiquotTerm</span> <span class=\"k\">else</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">paramident</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bar\"</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">decl</span><span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- (\"bar\", \"foo\")</span>\n</code></pre></div>",
        "id": 290867930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658827862
    },
    {
        "content": "<p>Thanks for the explanation <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>! I Does that mean we (now) shouldn't use the <code> backtick (syntax_cat|...) </code> pattern in macro rules? And do we then need an extra <code>syntax</code> for every nonterminal (i.e. <code>syntax_cat</code>) to take it to a <code>term</code>? Because strictly speaking that extra syntax should be unnecessary, right? We're just using it to define the macros there (and we might even not want to expose that). I thought we could define macros between arbitrary <code>syntax_cat</code>s</p>",
        "id": 290875200,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658832601
    },
    {
        "content": "<p>A macro from some custom syntax category into itself is fine (though Lean won't ever call it by itself, you need <code>expandMacros</code> for that). A macro from one category into another doesn't make sense to me, the resulting syntax tree will not be well-formed.</p>",
        "id": 290875533,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658832800
    }
]