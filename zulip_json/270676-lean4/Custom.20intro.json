[
    {
        "content": "<p>Is it possible to extend the <code>intro</code> tactic to more complex types? If so, how does one extend it?</p>",
        "id": 230194619,
        "sender_full_name": "Mac",
        "timestamp": 1615674859
    },
    {
        "content": "<p>The <code>rintro</code> tactic in mathlib might give you some inspiration. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/rcases.html#tactic.rintro\">https://leanprover-community.github.io/mathlib_docs/tactic/rcases.html#tactic.rintro</a></p>\n<p>It looks like there's some built-in support for this kind of thing in Lean 4: <a href=\"https://leanprover.github.io/lean4/doc/tactics.html?highlight=intro#pattern-matching\">https://leanprover.github.io/lean4/doc/tactics.html?highlight=intro#pattern-matching</a></p>",
        "id": 230195769,
        "sender_full_name": "Chris B",
        "timestamp": 1615676316
    },
    {
        "content": "<p>I am looking to extend <code>intro</code> by perform actions on the object before binding, not pattern matching on the resulting binding. More specifically. for my type <code>T</code>, I want to make <code>intro a</code> expand to <code>apply f; intro a</code></p>",
        "id": 230202078,
        "sender_full_name": "Mac",
        "timestamp": 1615684226
    }
]