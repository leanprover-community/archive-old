[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">throwError</span><span class=\"bp\">!</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>In the console it works properly:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean metam-test.lean\n\nmetam-test.lean:4:0: error: <span class=\"nb\">test</span>\n<span class=\"m\">4</span>\n</code></pre></div>\n<p>But in VS Code only “processing...” appears on “#eval (throwError! …)” line. Is it OK?</p>",
        "id": 224889067,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1612280801
    },
    {
        "content": "<p>I can reproduce this in VS Code but not in Emacs, which is quite strange</p>",
        "id": 224890224,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612281210
    },
    {
        "content": "<p>I noticed a similar behavior when I was playing with the int mod crash</p>",
        "id": 224891742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612281726
    },
    {
        "content": "<p>Maybe the file worker crashes and it displays the last diagnostic?</p>",
        "id": 224892466,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612282008
    },
    {
        "content": "<p>is <code>throwError!</code> something explicitly in the monad or is this some runtime primitive?</p>",
        "id": 224892727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612282102
    },
    {
        "content": "<p>Okay no, the file worker doesn't actually crash, it just gets stuck</p>",
        "id": 224892944,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612282192
    },
    {
        "content": "<p>In the following snippet VSCode seems to get stuck too, when everything is fine in the console:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">hello</span><span class=\"o\">)</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"kd\">@[commandElab «hello»]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHello</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElab</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"hello!\"</span>\n\n<span class=\"n\">hello</span>\n<span class=\"k\">#check</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 225389823,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1612592426
    },
    {
        "content": "<p>And even in this version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[commandElab «hello»]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHello</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElab</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 225389904,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1612592640
    },
    {
        "content": "<p>After restarting “pure ()”-version becomes OK, but adding “IO.println” in elaborator breaks file checking every time.</p>",
        "id": 225390339,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1612593475
    },
    {
        "content": "<p>The language server communicates via stdout, so that's expected</p>",
        "id": 225398498,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612600347
    }
]