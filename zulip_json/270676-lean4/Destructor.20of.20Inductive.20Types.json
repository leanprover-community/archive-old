[
    {
        "content": "<p>I was a Coq user and have just begun working on a project in Lean. I'm trying to understand Lean based on my experience with Coq, and encountered multiple problems related to destructors of inductive types.<br>\nIn Coq, there is a <code>match ... in ... return ... with | ... | ... | ...</code> clause which does dependent pattern matching, and recursors of inductive types are defined using the <code>match ... in ... return ... with | ... | ... | ...</code> clause and the <code>fix</code> keyword.<br>\nOn the contrary, (it seems to me that) the match expressions in Lean are defined using recursors of the inductive types, and the recursor <code>&lt;indtype&gt;.rec</code> is \"atomic\".  However, the behaviour of Lean's <code>match ... with | ... | ... | ...</code> clause and structural recursion makes me very confused.</p>\n<p>The first thing that confuses me is that Lean sometimes does not recognize decreasing arguments of recursive functions. Consider <code>Acc</code> (the accessibility predicate, used to define well-foundedness)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Acc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In Coq, the predicate is defined as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Acc_intro</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">x.</span>\n</code></pre></div>\n<p>and the destructor of this predicate is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Definition</span> <span class=\"n\">Acc_rect'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">fix</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">struct</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Acc_intro</span> <span class=\"n\">_</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>However, when I tried to define the same thing in Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Acc_rec'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n               <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                       <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Ry</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"n\">Ry</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                       <span class=\"o\">(</span><span class=\"n\">Rx</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">Rx</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Acc.intro</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">Hr</span> <span class=\"n\">Ry</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Acc_rec'</span> <span class=\"n\">motive</span> <span class=\"n\">H</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"n\">Hr</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It produces the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n    <span class=\"n\">Acc_rec'</span>\n  <span class=\"k\">with</span> <span class=\"n\">errors</span>\n  <span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>which (if I'm right) indicates that it didn't recognize the decreasing argument <code>(t : Acc r a)</code>.<br>\nI know that the predicate <code>Acc.rec</code> is automatically generated by Lean and there is no need to define it by hand. But the problem is that Lean did not recognize the decreasing argument, which makes me confused.</p>",
        "id": 294428943,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660995296
    },
    {
        "content": "<p>Yes, lean's equation compiler does not support direct structural recursion</p>",
        "id": 294454003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661008832
    },
    {
        "content": "<p>which is counterintuitive since this is the simplest kind of recursion. It supports \"bounded recursion\", which is like structural recursion except it also allows doing  multiple layers of inductive constructors at once, and well founded recursion which is where you recurse on a well founded type with a measure function</p>",
        "id": 294454292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661008974
    },
    {
        "content": "<p>However, neither of those methods apply here: bounded recursion only works for \"regular inductives\" which are not in Prop, and well founded recursion in default configuration will attempt to use recursion on a natural number \"height\" function which is not powerful enough to show Acc is well founded</p>",
        "id": 294454472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661009094
    },
    {
        "content": "<p>The simplest way to do direct structural recursion in lean is to use the <code>induction</code> tactic instead of the equation compiler</p>",
        "id": 294454510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661009128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Acc_rec'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n               <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                       <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Ry</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"n\">Ry</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                       <span class=\"o\">(</span><span class=\"n\">Rx</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">Rx</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">Hr</span> <span class=\"n\">Ry</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ih</span> <span class=\"n\">y</span> <span class=\"n\">Hr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">a'</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294454715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661009260
    }
]