[
    {
        "content": "<p>I am trying to write a code action that converts a tactic proof to the corresponding term-mode proof, using the <code>elabByTactic</code> function at the core. Here is an MWE of the code so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Server</span> <span class=\"n\">Lsp</span> <span class=\"n\">RequestM</span>\n\n<span class=\"kd\">@[codeActionProvider]</span>\n<span class=\"kd\">def</span> <span class=\"n\">showTermCodeAction</span> <span class=\"o\">:</span> <span class=\"n\">CodeActionProvider</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">params</span> <span class=\"n\">_snap</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">readDoc</span>\n  <span class=\"k\">let</span> <span class=\"n\">text</span> <span class=\"o\">:=</span> <span class=\"n\">doc.meta.text</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">edit</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">TextEdit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- the current position in the text document</span>\n    <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"n\">text.lspPosToUtf8Pos</span> <span class=\"n\">params.range.end</span>\n    <span class=\"c1\">-- the node of the infotree containing the current position</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">_snap.infoTree.findInfo</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">contains</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"Infotree not found\"</span>\n    <span class=\"k\">match</span> <span class=\"n\">info.stx</span> <span class=\"k\">with</span>\n    <span class=\"c1\">-- TODO allow docstrings</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">typ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">byTactic</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">pptrm</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">typ</span>\n        <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n        <span class=\"k\">let</span> <span class=\"n\">trm</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabByTactic</span> <span class=\"n\">tac</span> <span class=\"n\">typ</span>\n        <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n        <span class=\"k\">let</span> <span class=\"n\">trm</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"n\">trm</span>\n        <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n        <span class=\"n\">PrettyPrinter.delab</span> <span class=\"n\">trm</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">stop</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tac.raw.getRange</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"Failed to obtain range\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">EIO.toIO</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"Code action failed\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"n\">_snap.runTermElabM</span> <span class=\"n\">doc.meta</span> <span class=\"n\">pptrm</span><span class=\"o\">⟩</span>\n      <span class=\"n\">return</span> <span class=\"o\">{</span>\n        <span class=\"n\">range</span> <span class=\"o\">:=</span>\n            <span class=\"o\">⟨</span><span class=\"n\">text.leanPosToLspPos</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">text.toPosition</span> <span class=\"n\">start</span><span class=\"o\">,</span>\n            <span class=\"n\">text.leanPosToLspPos</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">text.toPosition</span> <span class=\"n\">stop</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">newText</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"n\">output.raw.reprint.get</span><span class=\"bp\">!</span>\n      <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.throwServerError</span> <span class=\"s2\">\"Parsing input failed. Input must be a `theorem` or `def` with a tactic proof.\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ca</span> <span class=\"o\">:</span> <span class=\"n\">CodeAction</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">title</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Show the term corresponding to the tactic proof.\"</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"s2\">\"quickfix\"</span> <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[{</span>\n    <span class=\"n\">eager</span> <span class=\"o\">:=</span> <span class=\"n\">ca</span><span class=\"o\">,</span>\n    <span class=\"n\">lazy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">ca</span> <span class=\"k\">with</span>\n      <span class=\"n\">edit</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">WorkspaceEdit.ofTextEdit</span> <span class=\"n\">params.textDocument.uri</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"n\">edit</span><span class=\"o\">}</span>\n    <span class=\"o\">}]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xyz</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>While the code action interface works fine, the <code>byTactic</code> portion of the proof is replaced by a meta-variable instead of the expected term. This is despite using <code>instantiateMVars</code> and <code>synthesizeSyntheticMVarsNoPostponing</code> at various places. The error persists even on replacing <code>$tac:byTactic</code> with <code>by $tacs:tacticSeq</code> in the code above.</p>\n<p>The error might be because of the <code>elabByTactic</code> (and the associated private function <code>mkTacticMVar</code>), but I have not been able to find any examples of using <code>elabByTactic</code> either in the Lean4 source code or here on Zulip.</p>\n<p>Any help in diagnosing this issue will be greatly appreciated.</p>",
        "id": 318958355,
        "sender_full_name": "Anand Rao",
        "timestamp": 1672651677
    },
    {
        "content": "<p>Try <code>evalTactic</code> instead of <code>elabByTactic</code>. You might also need to use something like <code>withoutModifyingState</code> to ensure that your elaboration doesn't leak out.</p>\n<p>Then again, does this require elaboration at all? I would have guessed that when the code action is run, the <code>by</code> block has already been elaborated and the term is available. But I don't know the code actions API, so I could be wrong there.</p>",
        "id": 318981697,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672661717
    },
    {
        "content": "<p>Thanks for the suggestion. I think you're right about the term already being computed. I will dig into <code>Snapshots.Snapshot.tacticCache</code> further, which seems to store this information.</p>",
        "id": 318995876,
        "sender_full_name": "Anand Rao",
        "timestamp": 1672667379
    },
    {
        "content": "<p>No, the info tree is the correct source for this</p>",
        "id": 318998582,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672668440
    },
    {
        "content": "<p>Thanks, I will try exploring or adapting <code>InfoTree.goalsAt?</code>.</p>",
        "id": 319030665,
        "sender_full_name": "Anand Rao",
        "timestamp": 1672680552
    }
]