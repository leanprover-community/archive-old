[
    {
        "content": "<p>Is there an easy way to prove <code>bar</code> below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span>\n  <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">py</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">x</span> <span class=\"n\">px</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">y</span> <span class=\"n\">py</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In Lean 3, the <code>congr'</code> tactic works, but I have been unable to find anything like that in Lean 4.</p>",
        "id": 288588005,
        "sender_full_name": "David Renshaw",
        "timestamp": 1657052891
    },
    {
        "content": "<p><code>by cases hab; rfl</code> works here. (You can do <code>subst x</code> instead of <code>cases hab</code> if you want.)</p>",
        "id": 288588486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657053114
    },
    {
        "content": "<p>or <code>by simp [hab]</code></p>",
        "id": 288588610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657053156
    },
    {
        "content": "<p>thanks!</p>",
        "id": 288588814,
        "sender_full_name": "David Renshaw",
        "timestamp": 1657053254
    }
]