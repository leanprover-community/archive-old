[
    {
        "content": "<p>Hello! Sorry if I use Zulip wrong, or if this is answered elsewhere - I'm new to both Lean 4 and Zulip.</p>\n<p>I am trying to write one of my standard first projects in a dependently typed language, which is a little simply typed lambda calculus. Part of this is the definition of a little universe, with contexts given as lists of codes and environments defined by recursion over contexts. When I try to write a \"lookup\" function to project a value out of an environment, the equation compiler fails because the type of my index pattern (which ensures that the context is non-empty) doesn't seem to refine the index of the environment type.</p>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Idx</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">here</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">::</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">there</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"n\">γ</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Idx</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">::</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T.nat</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T.func</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">val</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">t</span> <span class=\"bp\">×</span> <span class=\"n\">env</span> <span class=\"n\">ts</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">Idx</span> <span class=\"n\">γ</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">val</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ρ</span><span class=\"o\">),</span> <span class=\"n\">here</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ρ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">there</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lookup</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>The error that I get is on the pattern <code>(v, ρ)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ρ</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1145</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.1148</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.1154</span> <span class=\"bp\">?</span><span class=\"n\">u.1153</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">env</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>which looks to me like <code>γ</code> isn't being refined by <code>here</code>. Do I need to do anything special to make this work?</p>\n<p>Thank you!</p>",
        "id": 254598160,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1632428322
    },
    {
        "content": "<p><code>here</code> is being interpreted as a pattern variable; you want <code>Idx.here</code> for the constructor (or use <code>open Idx</code>).</p>\n<p>I have an old version of Lean 4, so it could be different now, but I also had to swap the order of the arguments to get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"n\">γ</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">env</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">val</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Idx.here</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Idx.there</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lookup</span> <span class=\"n\">i</span> <span class=\"n\">ρ</span>\n</code></pre></div>",
        "id": 254599570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632428824
    },
    {
        "content": "<p>Thanks for the help! That makes perfect sense. I also have to put the index first to  get it to go through.</p>",
        "id": 254599992,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1632429008
    },
    {
        "content": "<p>Hi David! Note that if you put the index first, Lean even gives you a (subtle) hint: <code>here</code> will be highlighted like other variables, while constants like <code>Idx.here</code> are not highlighted. Unfortunately that doesn't work when putting the index second because it aborts before even elaborating the second pattern, so there is no semantic highlighting. But as you found out, that order doesn't quite work anyway.</p>",
        "id": 254609223,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632432903
    }
]