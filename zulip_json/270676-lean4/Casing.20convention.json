[
    {
        "content": "<p>Has there been a final consensus on casing conventions?<br>\nI thought I'd read about it in some thread, but I can't find it anymore.<br>\nIn particular, I'm interested in the conventions for the following items:</p>\n<ul>\n<li>Types (<code>UpperCamelCase</code>?)</li>\n<li>Non-type definitions (<code>lowerCamelCase</code>?)</li>\n<li>Theorems (something involving underscores?)</li>\n</ul>",
        "id": 258195430,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634650608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> you are on the right track. The current conventions (as I understand them) are:</p>\n<ul>\n<li>Things in <code>Type</code>/<code>Sort</code>: UpperCamelCase</li>\n<li>Normal definitions: lowerCamelCase</li>\n<li>Theorems/keywords: lower_snake_case</li>\n</ul>",
        "id": 258219043,
        "sender_full_name": "Mac",
        "timestamp": 1634658553
    },
    {
        "content": "<p>At some point we'll need to work out the convention for \"Bundled things with a <code>category</code> instance\", possibly SHOUTING. e.g. in Lean3 we had <code>group</code> vs <code>Group</code>. Now that <code>group</code> is <code>Group</code>, we need something new for the category of (bundled) groups. I'm not particularly keen on SHOUTING, but it is used in the literature. An alternative is to ask for more allowed characters in identifiers, and use <code>𝖦𝗋𝗈𝗎𝗉</code> (unicode san serif), but that has type-ability concerns!</p>",
        "id": 258268667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634676218
    },
    {
        "content": "<p>A simpler alternative that I have used in... other provers is <code>GroupCat</code></p>",
        "id": 258297739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634692191
    },
    {
        "content": "<p><code>\\mathbf{Group}</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p>If backslash were allowed in identifiers, <code>\\Group</code> wouldn't be that crazy. (That's a combination of how I'd write it anyway in LaTeX and how apparently the Arend theorem prover uses backslashes to indicate keywords.) <em>Edit:</em> Oh right, that will play havoc with input for the Lean extensions for VS Code and Emacs...</p>",
        "id": 258301711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634695637
    },
    {
        "content": "<p>𝕲𝖗𝖔𝖚𝖕 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258325159,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634715533
    },
    {
        "content": "<p>I guess this is how the 19th century German greats wrote categories</p>",
        "id": 258335446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634720940
    },
    {
        "content": "<p>How would you handle this?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">EvenNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isEven</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">EvenNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 258830053,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1635004626
    },
    {
        "content": "<p>The <code>...</code> is relevant. Assuming <code>is_even</code> is a proof of a proposition, it should be snake cased</p>",
        "id": 258831055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635005894
    }
]