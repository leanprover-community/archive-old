[
    {
        "content": "<p>Is there some way to convert a String to a Float? I'm trying to take Floats as inputs to my binary</p>",
        "id": 254161150,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632205737
    },
    {
        "content": "<p>I see a toString for Float but no ofString</p>",
        "id": 254161245,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632205810
    },
    {
        "content": "<p>hm maybe passing the values via sci notation would be the easiest</p>",
        "id": 254161310,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632205867
    },
    {
        "content": "<p>Are you asking about <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>?</p>",
        "id": 254163742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632207786
    },
    {
        "content": "<p>yes</p>",
        "id": 254164681,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632208339
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/String.20to.20Float\">#general &gt; String to Float</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span></p>",
        "id": 254169316,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632211236
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254180630,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1632217782
    },
    {
        "content": "<p>There are a couple of methods in <code>Meta</code> which may help: there is <code>decodeScientificLitVal?</code>which gives components and the typeclass <code>OfScientific</code> that has a <code>float</code> instance.</p>",
        "id": 254201585,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1632228840
    },
    {
        "content": "<p>Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getFloat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Syntax.decodeScientificLitVal</span><span class=\"bp\">?</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Float.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">getFloat</span> <span class=\"s2\">\"3.1415\"</span> <span class=\"c1\">-- gives some 3.141500</span>\n</code></pre></div>",
        "id": 254202267,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1632229119
    },
    {
        "content": "<p>Here is a somewhat hacky solution that none-the-less gets the job done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Json.Parser.num</span> <span class=\"n\">s.mkIterator</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Parsec.ParseResult.success</span> <span class=\"n\">_</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Except.ok</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Float.ofInt</span> <span class=\"n\">res.mantissa</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"bp\">-</span> <span class=\"n\">Float.ofNat</span> <span class=\"n\">res.exponent</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Parsec.ParseResult.error</span> <span class=\"n\">it</span> <span class=\"n\">err</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"offset {it.i.repr}: {err}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">parse</span> <span class=\"s2\">\"1.3\"</span> <span class=\"c1\">-- Except.ok 1.300000</span>\n</code></pre></div>",
        "id": 254228428,
        "sender_full_name": "Mac",
        "timestamp": 1632238810
    },
    {
        "content": "<p>Thanks Mac!</p>",
        "id": 254231317,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632239798
    }
]