[
    {
        "content": "<p>As far as I can tell (please correct me if I'm mistaken) <code>parameter</code> from Lean 3 no longer exists in Lean 4. <br>\nIf that's the case, I'm curious as to why this is the case. Was it a conscious decision that <code>parameter</code> did more harm than good? I remember it being quite recommeded against and rarely used in Lean 3, and I myself filled a project with <code>parameter</code>s at one point and regretted it afterwards. Or was it simply deemed not high priority or not worth the effort?</p>",
        "id": 271697869,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644685217
    },
    {
        "content": "<p>What is <code>parameter</code> I've never heard of it before.</p>",
        "id": 271698010,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644685366
    },
    {
        "content": "<p>I think <code>parameter</code> was broken in Lean 3. Lean 4 is making many language features into library features. <code>parameter</code> is an example where you can define your own in a module.</p>",
        "id": 271698013,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644685370
    },
    {
        "content": "<p><code>parameter</code> is like <code>variable</code> but in your definitions, inside the same section, you don't have to / don't get to specify an argument for that variable.</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"c1\">-- y is implicitly fixed</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- we can't pass in `y+1`</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271698097,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644685478
    },
    {
        "content": "<p>To someone used to object oriented programming, this can look a bit like class variables where you don't have to write <code>this-&gt;myVar</code>, you can simply refer to it as <code>myVar</code>.</p>",
        "id": 271698212,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644685598
    },
    {
        "content": "<p>I tried to use it in mathlib, but it doesn’t affect what you write in tactics, which made it less useful than I hoped for</p>",
        "id": 271698264,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644685677
    },
    {
        "content": "<p>Yes, that's the big issue with it</p>",
        "id": 271698338,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644685752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/parameter/near/271698212\">said</a>:</p>\n<blockquote>\n<p>To someone used to object oriented programming, this can look a bit like class variables where you don't have to write <code>this-&gt;myVar</code>, you can simply refer to it as <code>myVar</code>.</p>\n</blockquote>\n<p>Interesting, I didn't think of this way of seeing it, but yeah. I mostly saw it is a counterpart for the pen and paper mathematical custom of saying \"throughout this section, let x be something\".  And then it is never specified as an argument of functions, but it still is in reality</p>",
        "id": 271698450,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1644685922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/parameter/near/271698013\">said</a>:</p>\n<blockquote>\n<p>I think <code>parameter</code> was broken in Lean 3. Lean 4 is making many language features into library features. <code>parameter</code> is an example where you can define your own in a module.</p>\n</blockquote>\n<p>That seems not at all obvious to me. Part of the reason why <code>parameter</code> did not work as seamlessly as it should in lean 3 is because it was <em>not</em> integrated into all parts of the system, it was basically just a notation that was stored in a weird place in the environment that was not always queried. Which means that the solution would be to make sure that it <em>is</em> properly part of the system, and librarification doesn't seem likely to help here.</p>",
        "id": 271714137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644706519
    },
    {
        "content": "<p>I did not try to implement it myself but I remember <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> early on (2019?) expressing the hope it could be implemented by users. </p>\n<p>Trying to implement a different section-based notation, it doesn't look obvious to implement for me either. It might involve highjacking the elaborator of every command in a given section.</p>",
        "id": 271714936,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644707759
    },
    {
        "content": "<p>Are there cases when we wished we could use it in mathlib? I was quite happy operating without it</p>",
        "id": 271718391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644712944
    },
    {
        "content": "<p>You can certainly get used to working without it, but you can get used to not having a lot of things. There are plenty of places where it is useful to fix some variables for a section (or longer) and not have to pass them into everything</p>",
        "id": 271733602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644738897
    },
    {
        "content": "<p>I'm not referring to lean 3 <code>parameter</code> exactly, but rather something that operates roughly like it. Lean 3 <code>parameter</code> has a lot of issues that make it not live up to its goals, but I think that's an implementation issue rather than a design issue</p>",
        "id": 271733669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644739024
    },
    {
        "content": "<p>Not being able to reopen <code>parameter</code>s is another issue that limits their applicability</p>",
        "id": 271733682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644739070
    },
    {
        "content": "<p>Kevin, I remember I wished parameters when working on LTE. On paper you really think: I'm fixing some Breen-Deligne data and I don't want to mention it again in this section.</p>",
        "id": 271737040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644744445
    },
    {
        "content": "<p>That is true. Perhaps I'm falling into the trap Mario suggests -- if you don't have something and know how to work around it you don't miss it</p>",
        "id": 271743065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644754122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/parameter/near/271733682\">said</a>:</p>\n<blockquote>\n<p>Not being able to reopen <code>parameter</code>s is another issue that limits their applicability</p>\n</blockquote>\n<p>I think this point is the crux of the problem - Lean 3's <code>parameter</code>s even if worked perfectly, was really just a poor man's module system. But I still think that with only a little syntax sugar, we can get pretty close to <em>actual</em> module systems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- define basic parameterized module</span>\n<span class=\"c1\">-- adapted from https://agda.readthedocs.io/en/v2.6.0.1/language/module-system.html</span>\n<span class=\"c1\">-- but you should really just use `variable {α : Type} [LE α] [DecidableRel (α := α) (· ≤ ·)]`</span>\n<span class=\"c1\">-- in actual Lean code</span>\n<span class=\"n\">module</span> <span class=\"n\">Sorting</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- takes syntax like no problem</span>\n  <span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">ys</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">sort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Sorting</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Sorting.sort</span>  <span class=\"c1\">-- [self : Sorting] → List Sorting.α → List Sorting.α</span>\n<span class=\"c1\">-- hmm, slightly suspicious output</span>\n\n<span class=\"c1\">-- module application</span>\n<span class=\"n\">module</span> <span class=\"n\">SortingNat</span> <span class=\"o\">:=</span> <span class=\"n\">Sorting</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">SortingNat.sort</span>  <span class=\"c1\">-- List Sorting.α → List Sorting.α</span>\n<span class=\"c1\">-- still a bit suspicious... but perfectly usable after a little reduction</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">SortingNat.sort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- re-open module</span>\n<span class=\"c1\">-- I don't think Agda or Coq let you do this?</span>\n<span class=\"n\">module</span> <span class=\"n\">Sorting</span>\n  <span class=\"k\">#check</span> <span class=\"n\">le</span>  <span class=\"c1\">-- α → α → Bool</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">revSort</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"n\">xs</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">reverse</span>\n<span class=\"kd\">end</span> <span class=\"n\">Sorting</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">SortingNat.revSort</span>  <span class=\"c1\">-- List Sorting.α → List Sorting.α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">module</span> <span class=\"n\">SortingInt</span> <span class=\"o\">:=</span> <span class=\"n\">Sorting</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Implementation</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import Lean\nopen Lean.Parser.Command\n\nmacro &quot;module&quot; n:ident params:structFields : command =&gt;\n  -- may want better error message when using the wrong case\n  if params[0].getArgs.isEmpty then\n    `(namespace $n\n      variable [self : $n])\n  else\n    `(class $n:ident where $params:structFields\n      namespace $n\n      variable [self : $n])\n\nmacro &quot;module&quot; n:ident &quot; := &quot; mod:ident args:term:arg+ : command =&gt;\n  `(def $n : $mod := ⟨$args.getArgs,*⟩)\n\nmacro &quot;open&quot; &quot;module&quot; n:ident &quot; := &quot; mod:ident args:term:arg+ : command =&gt;\n  `(def $n : $mod := ⟨$args.getArgs,*⟩\n    local instance : $mod := $n\n    open $mod:ident)\n</code></pre></div>\n</div></div>",
        "id": 271747258,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644760492
    },
    {
        "content": "<p>Nice! It looks like the first time you write <code>module Foo</code>, you have to list all the parameters already. If you wanted to use <code>parameter</code> as one would <code>variable</code>, you'd need to customize the elaborator of <code>end</code>, right? Could you use an extension to accumulate all the parameters declared in that section? The alternative I can see is to declare the syntax as <code>\"module \" ident  (!\"end \" (command &lt;|&gt; parameter))* \"end \" ident</code>. Which would allow us to manipulate the environment before and after the elaboration of each command. Something tells me that might be overly complex and that there might be a simpler way of getting the default elaborators to understand <code>parameter</code> correctly.</p>",
        "id": 271749165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644763289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/parameter/near/271698097\">said</a>:</p>\n<blockquote>\n<p><code>parameter</code> is like <code>variable</code> but in your definitions, inside the same section, you don't have to / don't get to specify an argument for that variable</p>\n</blockquote>\n<p>I am resurrecting this thread because it was just mentioned in <a href=\"#narrow/stream/270676-lean4/topic/constant.2C.20variable.2C.20parameter/near/290410993\">this recent topic</a> and I have a question about this discussion. From the description here, was Lean 3's <code>parameter</code> just syntactic sugar for what is essentially a reader monad?</p>",
        "id": 290437376,
        "sender_full_name": "Mac",
        "timestamp": 1658439419
    },
    {
        "content": "<p>To demonstrate what I mean by adapting the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- parameter (y : Nat)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">yM</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Nat</span> <span class=\"n\">Id</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">yM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">read</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">yM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"c1\">-- y is implicitly fixed</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- we can't pass in `y+1` (?)</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar''</span> <span class=\"o\">:=</span> <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- but we actually can</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar'''</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- in two ways</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290437973,
        "sender_full_name": "Mac",
        "timestamp": 1658439782
    },
    {
        "content": "<p>You can use both for similar purposes but <code>parameter</code> (if it's implemented correctly) has no way of supporting the reader's <code>local : (r -&gt; r) -&gt; m a -&gt; m a</code> function.</p>",
        "id": 290438706,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1658440214
    }
]