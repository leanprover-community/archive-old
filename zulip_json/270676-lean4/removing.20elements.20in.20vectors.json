[
    {
        "content": "<p>Hello... I'm playing with vectors and I managed to implement various interesting bits.<br>\nHowever, I am completely stuck with the following apparently simple problem (it <em>is</em> a simple problem for classical lists).<br>\nFirst, I uses the definition of vectors found in the TPL4 book (chapter 7):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vnil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vcons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I then define a function returning the number of occurrences of an element in a vector:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nb_occ</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">vnil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">vcons</span> <span class=\"n\">b</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">nb_occ</span> <span class=\"n\">a</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n                                    <span class=\"k\">else</span> <span class=\"n\">nb_occ</span> <span class=\"n\">a</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>And then there is the removal operation :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vremove</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">nb_occ</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- ... my version is too ugly (and long) to show</span>\n</code></pre></div>\n<p>I managed to implement this function, and test it so that it seems to be ok, although with rather<br>\nugly proofs embarked to satisfy the return type.<br>\n... And all my tentatives to demonstrate the following theorem failed ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">remove_occ</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n  <span class=\"n\">nb_occ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">vremove</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Of course, I have chosen this as a rather challenging exercise (ahem ... for students) ... but I challenged myself a little bit too much in the meantime. While still working on a solution, I think it is a good (if not time-consuming) exercise to play with type-level computations so I have decided to share ... the burden  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 298008059,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662740093
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vector.occ</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">occ</span> <span class=\"n\">x</span> <span class=\"n\">v'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">occ</span> <span class=\"n\">x</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vector.remove</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Vector.cons</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">h3</span> <span class=\"bp\">▸</span> <span class=\"n\">res</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"n\">ys</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">h3</span> <span class=\"bp\">▸</span> <span class=\"n\">res</span>\n</code></pre></div>\n<p>This would be my shot at a definition, theorems are left as an exercise to the reader :P (though I haven't validated they are actually provable yet myself but they sound reasonable to me)</p>",
        "id": 298011944,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1662741227
    },
    {
        "content": "<p>My solution is uglier ... but without the <code>sorry</code>'s <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 298016646,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662742750
    },
    {
        "content": "<p>Here's a sorry free proof using the new <code>Std</code> library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vector.occ</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">occ</span> <span class=\"n\">x</span> <span class=\"n\">v'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">occ</span> <span class=\"n\">x</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Vector.occ_le</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">occ</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">occ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vector.remove</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">occ</span> <span class=\"n\">r</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Vector.cons</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">occ</span><span class=\"o\">,</span> <span class=\"n\">eq_true</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_add_right</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span>\n    <span class=\"k\">else</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">occ</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_comm</span> <span class=\"o\">(</span><span class=\"n\">Vector.occ_le</span> <span class=\"bp\">..</span><span class=\"o\">)]</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 298018606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662743375
    },
    {
        "content": "<p>Of course you can write this a lot simpler if you construct the length at the same time as the vector:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Vector.remove</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Vector.cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span> <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"n\">r</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The type <code>Σ i, Vector α i</code> is basically just <code>List α</code>, and this function is <code>List.filter</code></p>",
        "id": 298020615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662744170
    },
    {
        "content": "<p>Thx <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! The sigma types went very smoothly as far as stating &amp; proving theorems is concerned. However, at some point one would like to convert a <code>⟨n, xs⟩</code> of type <code>Σ i, Vector α i</code> to a  <code>Vector α n</code> ... because I have other functions expecting vectors and not sigma types. But I never went that far and I can now progress so thank you again!</p>",
        "id": 298354472,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662978910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506086\">@Frederic Peschanski</span> you can use <code>.2</code> for that</p>",
        "id": 298355027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662979143
    },
    {
        "content": "<p>Maybe it was not clear enough, after removing all occurrences of an element in a vector, I would like to propagate in the type the fact that the size is now <code>n - nb_occ r xs</code>  (well, going back to my initial problem).</p>",
        "id": 298355577,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662979365
    },
    {
        "content": "<p>You can prove that as a theorem; that particular expression isn't likely to have good definitional properties anyway so it doesn't make much difference whether it is spelled <code>n - nb_occ r xs</code> or <code>(remove r xs).1</code></p>",
        "id": 298356520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662979754
    },
    {
        "content": "<p>Yeah, maybe I have the wrong perspective but maybe naively I would like to type-check and compile an expression such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">vappend</span> <span class=\"o\">(</span><span class=\"n\">vremove</span> <span class=\"n\">a</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vremove</span> <span class=\"n\">b</span> <span class=\"n\">v2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>with<code>vappend :: Vector A n1 -&gt; Vector A n2 -&gt;  Vector A (n1 + n2)</code><br>\nIsn't this a legitimate situation ?   (while playing with dependent types at least).</p>",
        "id": 298362647,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662982344
    },
    {
        "content": "<p>that's fine, although you would have to write it as <code>(vappend (vremove a v1).2 (vremove b v2).2)</code> as I described it</p>",
        "id": 298362739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982391
    },
    {
        "content": "<p>you could easily make <code>vremove a v1 := (vremoveAux a v1).2</code> if that bothers you though</p>",
        "id": 298362808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982426
    },
    {
        "content": "<p>but note that in that scenario <code>(vappend (vremove a v1).2 (vremove b v2).2)</code> would be a term of type <code>Vector A ((vremove a v1).1 + (vremove b v2).1)</code></p>",
        "id": 298362974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982485
    },
    {
        "content": "<p>I'm not familiar with sigma types but that's convincing indeed, thank you again.</p>",
        "id": 298364462,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1662983106
    },
    {
        "content": "<p>Well, I was rethinking a little bit about this.<br>\nWhy for the append operation the common signature is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">vappend</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>rather than using a dependent pairs then ?</p>\n<p>To me, dependent pairs are useful when things can only be known at runtime, like when you want to read a vector contents from disk (this is the motivating example for dependent pairs in the Idris book). But in the removal operation the sizes and required computation are known at compile-time. Of course addition is simpler to handle than the number of occurrences of an element in a vector but it is still something you can precisely deal with.<br>\n(sorry for the insistence...)</p>",
        "id": 301253605,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1664376653
    },
    {
        "content": "<p>When Mario said \"The type <code>Σ i, Vector α i</code> is basically just <code>List α</code>\", it's a strong statement -- you could even <em>define</em> <code>List α</code> to be that sigma type. So, if you define <code>vappend</code> using dependent pairs you have <code>append : List A -&gt; List A -&gt; List A</code>.</p>\n<p>Many times it seems to be easier using a list type and then proving the lists have the expected lengths than to deal with the dependent type issues with vectors (for example, the non-associativity of <code>vappend</code> is somewhat annoying, though surmountable).</p>",
        "id": 301259449,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664378202
    },
    {
        "content": "<p>Of course, I agree for the particular case of vectors, it's not a practical example ... However the same issue would likely occur in other, more interesting situations... I mean, at some point you want to perform calculation in (dependent) types</p>",
        "id": 301263885,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1664379292
    },
    {
        "content": "<p>(this is probably the old debate between internal vs. external validation ?)</p>",
        "id": 301264112,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1664379346
    },
    {
        "content": "<p>(I see that my messages are inconsistent ... it is not  always necessary to know things at compilation time even if it is possible, but sometimes that's what you want)</p>",
        "id": 301264441,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1664379446
    },
    {
        "content": "<p>I wonder if what's going on with <code>Vector</code> is that the length of a list often isn't that important, so it's not usually worth using <code>Vector</code>. The <code>Vector.remove</code> function seems ill-matched due to how much it depends on values you might only know at runtime.</p>\n<p>Another sort of list-like dependent type that I think is more interesting/useful is one for paths in a directed graph (a.k.a. morphisms in a category generated by some objects and arrows):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Path</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">v</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>Then the append function would be something of the type <code>Path.append : Path edges u v -&gt; Path edges v w -&gt; Path edges u w</code>. That is, you can only compose paths with compatible endpoints.</p>\n<p>I saw a version of this with Haskell GADTs in the Hoopl library, to help you at compile time create well-formed basic blocks. Another situation you could use this for is having <code>α</code> be a type of program states and having <code>edges u v</code> consist of basic program steps that carry state <code>u</code> to state <code>v</code>, so then <code>Path.append</code> corresponds to composing two programs with compatible states.</p>",
        "id": 301270033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664380975
    }
]