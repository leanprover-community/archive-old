[
    {
        "content": "<p>Does anyone have advice for debugging when a rewrite pattern fails to match? Turning on pp.explicit and trying to compare visually gets tedious really fast.</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Foldable'.Correct.fold'</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Size.size</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Indexed.nth</span> <span class=\"n\">c</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}])</span> <span class=\"o\">[]</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">τ</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Size.size</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Indexed.nth</span> <span class=\"n\">c</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.Mem</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"n\">Foldable'.Correct.fold'</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Size.size</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">Indexed.nth</span> <span class=\"n\">c</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}])</span> <span class=\"o\">[])</span>\n</code></pre></div>\n<p>Without increasing verbosity, no difference is visible, but turning on <code>pp.explicit</code> gives me huge terms that require way too much effort to compare</p>",
        "id": 296225962,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661895791
    },
    {
        "content": "<p>Sometimes turning on <code>trace.Meta.isDefEq</code> can be helpful, but usually the trace is huge, hard to navigate and read :(</p>\n<p>So yeah, I would like to know a better way as well</p>",
        "id": 296228357,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1661897013
    },
    {
        "content": "<p>One thing you can try is to write down a theorem that does not hold but rewrites only a subexpression, like <code>(fun  acc x h =&gt; acc ++ ...) = (fun acc x h =&gt; default)</code> and try rewriting with that. Does it work? Or does it fail?</p>",
        "id": 296228922,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1661897318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Are you using VS Code? The new trace visualization stuff is really cool (many thanks to Gabriel).<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/379PoQXInPE9MP27I5nrF_xN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/379PoQXInPE9MP27I5nrF_xN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/379PoQXInPE9MP27I5nrF_xN/image.png\"></a></div>",
        "id": 296229570,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661897685
    },
    {
        "content": "<p>I'm Emacs user, but I have installed VS Code just because of the new tracing :) It is really cool!</p>\n<p>However, I was debugging some problem in my TC instances and unfortunately the messages were not folding as I expected, the trace was too big that it was freezing VS Code. Also the option <code>synthInstamce.subgoal</code> disappeared :( I have to look into it again, write down what I struggled with and create mwe.</p>\n<p>Hopefully the message folds better for <code>isDefEq</code>.</p>",
        "id": 296230232,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1661898116
    },
    {
        "content": "<p>Good night! I'm installing Lean for the first time and I already have a version of python on my machine. How should I proceed?</p>",
        "id": 296232969,
        "sender_full_name": "Emanuel Kywal",
        "timestamp": 1661899940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"531561\">@Emanuel Kywal</span> Do you want to use Lean 3 (and mathlib)? If so, you probably want to start a new thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a></p>\n<p>Or, if you want to use Lean 4, then creating a new thread in this stream (<a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>) for your questions is a better way to go</p>",
        "id": 296234137,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661900726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  Yes, it's Lean 3 and mathlib. thank you!</p>",
        "id": 296234738,
        "sender_full_name": "Emanuel Kywal",
        "timestamp": 1661901103
    }
]