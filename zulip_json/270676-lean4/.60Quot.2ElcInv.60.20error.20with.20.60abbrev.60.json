[
    {
        "content": "<p>I am facing an issue with <code>Quot.lcInv</code> when using <code>Quot.lift</code> on a type that is an <code>abbrev</code> (on <code>lean4:nightly-2022-10-03</code>). I have made an M(N)WE replicating the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Natural</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Natural.Rel</span> <span class=\"o\">:</span> <span class=\"n\">Natural</span> <span class=\"bp\">→</span> <span class=\"n\">Natural</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">parity</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Natural</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Natural.Rel</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Natural.isEven</span> <span class=\"o\">:</span> <span class=\"n\">Natural</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isEven</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mod2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot</span> <span class=\"n\">Natural.Rel</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Natural.isEven_invariant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">Natural</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Natural.Rel</span> <span class=\"n\">n</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n.isEven</span> <span class=\"bp\">=</span> <span class=\"n\">n'.isEven</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mod2.IsOne</span> <span class=\"o\">:</span> <span class=\"n\">Mod2</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.lift</span> <span class=\"n\">Natural.isEven</span> <span class=\"o\">(</span><span class=\"n\">Natural.isEven_invariant</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When I try to use <code>Quot.lift</code> in the last line, I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">LCNF</span> <span class=\"n\">application</span>\n  <span class=\"n\">Quot.lcInv</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span> <span class=\"n\">Natural.Rel</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Natural</span> <span class=\"bp\">→</span> <span class=\"n\">Natural</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The root of the issue seems to be the distinction between <code>Natural</code> and <code>Nat</code> created by the <code>abbrev</code>. To be sure, I created another version without <code>abbrev</code>, which works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat.Rel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">parity</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.Rel</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.isEven</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isEven</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mod2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot</span> <span class=\"n\">Nat.Rel</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.isEven_invariant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Rel</span> <span class=\"n\">n</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n.isEven</span> <span class=\"bp\">=</span> <span class=\"n\">n'.isEven</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mod2.IsOne</span> <span class=\"o\">:</span> <span class=\"n\">Mod2</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.lift</span> <span class=\"n\">Nat.isEven</span> <span class=\"o\">(</span><span class=\"n\">Nat.isEven_invariant</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd be grateful for help in resolving this issue.</p>",
        "id": 305298986,
        "sender_full_name": "Anand Rao",
        "timestamp": 1666339393
    }
]