[
    {
        "content": "<p>Could <code>lake</code> support <code>lake build Mathlib/Data/Fin/Basic.lean</code> besides <code>lake build Mathlib.Data.Fin.Basic</code>?<br>\nThe benefit is that this allows tab completion in shells.</p>",
        "id": 317427133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671733597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> ?</p>",
        "id": 317428672,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1671734124
    },
    {
        "content": "<p>Now they've been summoned I can also ask what the difference, if any, is between <code>lake build Mathlib.Data.Fin.Basic</code> and <code>lake build +Mathlib.Data.Fin.Basic</code></p>",
        "id": 317428964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671734238
    },
    {
        "content": "<p>my guess is that the former is just ambiguous with other kinds of references but this is fine in most cases</p>",
        "id": 317429474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671734411
    },
    {
        "content": "<p>It may help to write a nice shell completion def for lake (either in the interim, but probably regardless). It's been awhile since I had to trawl through the completion docs, but e.g. this start on a zsh completion script at least seems to complete <code>lake build</code> appropriately (via dots, using directories to get candidates):</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\">#compdef lake</span>\n\n<span class=\"nb\">local</span> <span class=\"nv\">curcontext</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$curcontext</span><span class=\"s2\">\"</span> state <span class=\"nv\">ret</span><span class=\"o\">=</span><span class=\"m\">1</span>\n\n_lake_commands<span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"nb\">local</span> -a <span class=\"nv\">commands</span><span class=\"o\">=(</span>\n    <span class=\"s1\">'new:create a Lean package in a new directory'</span>\n    <span class=\"s1\">'init:create a Lean package in the current directory'</span>\n    <span class=\"s1\">'build:build targets'</span>\n    <span class=\"s1\">'update:update dependencies'</span>\n    <span class=\"s1\">'upload:upload build artifacts to a GitHub release'</span>\n    <span class=\"s1\">'clean:remove build outputs'</span>\n    <span class=\"s1\">'script:manage and run workspace scripts'</span>\n    <span class=\"s1\">'scripts:shorthand for `lake script list`'</span>\n    <span class=\"s1\">'run:shorthand for `lake script run`'</span>\n    <span class=\"s1\">'serve:start the Lean language server'</span>\n    <span class=\"s1\">'env:execute a command in the workspace'</span><span class=\"s2\">\"'\"</span><span class=\"s1\">'s environment'</span>\n    <span class=\"s1\">'exe:build an exe and run it in the workspace'</span><span class=\"s2\">\"'\"</span><span class=\"s1\">'s environment'</span>\n  <span class=\"o\">)</span>\n\n  _describe -t commands <span class=\"s1\">'command'</span> commands <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span>\n<span class=\"o\">}</span>\n\n_arguments -C -A <span class=\"s2\">\"--version\"</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'--version[print version and exit]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-h --help)'</span><span class=\"o\">{</span>-h,--help<span class=\"o\">}</span><span class=\"s1\">'[print help of the program or a command and exit]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-d --dir)'</span><span class=\"o\">{</span>-d,--dir<span class=\"o\">}</span><span class=\"s1\">'[use the package configuration in a specific directory]:directory:_files -/'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-f --file)'</span><span class=\"o\">{</span>-f,--file<span class=\"o\">}</span><span class=\"s1\">'[use a specific file for the package configuration]:file:_files'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-q --quiet)'</span><span class=\"o\">{</span>-q,--quiet<span class=\"o\">}</span><span class=\"s1\">'[hide progress messages]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-v --verbose)'</span><span class=\"o\">{</span>-v,--verbose<span class=\"o\">}</span><span class=\"s1\">'[print out additional logging information]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-l --lean)'</span><span class=\"o\">{</span>-l,--lean<span class=\"o\">}</span><span class=\"s1\">'[specify the `lean` command used by Lake]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-k --key)'</span><span class=\"o\">{</span>-k,--key<span class=\"o\">}</span><span class=\"s1\">'[set the configuration file option named key]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'--old[only rebuild modified modules (ignore transitive deps)]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'(-U --update)'</span><span class=\"o\">{</span>-U,--update<span class=\"o\">}</span><span class=\"s1\">'[update manifest before building]'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'1: :_lake_commands'</span> <span class=\"se\">\\</span>\n  <span class=\"s1\">'*:: :-&gt;args'</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">ret</span><span class=\"o\">=</span><span class=\"m\">0</span>\n\n<span class=\"k\">case</span> <span class=\"nv\">$state</span> <span class=\"k\">in</span>\n  args<span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nv\">$words</span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n      build<span class=\"o\">)</span>\n        <span class=\"nb\">local</span> -a lean_files lean_modules\n        <span class=\"nv\">lean_files</span><span class=\"o\">=(</span>**.lean<span class=\"o\">(</span>:r<span class=\"o\">))</span>\n        <span class=\"nv\">lean_modules</span><span class=\"o\">=(</span><span class=\"si\">${</span><span class=\"nv\">lean_files</span><span class=\"p\">//</span><span class=\"se\">\\/</span><span class=\"p\">/.</span><span class=\"si\">}</span><span class=\"o\">)</span>\n        _multi_parts . lean_modules\n        <span class=\"p\">;;</span>\n    <span class=\"k\">esac</span>\n      <span class=\"p\">;;</span>\n<span class=\"k\">esac</span>\n\n<span class=\"k\">return</span> ret\n</code></pre></div>\n<p>You can enable it by basically putting it on your <code>fpath</code>, assuming you already have completions enabled in zsh. E.g. I did so here: <a href=\"https://github.com/Julian/dotfiles/commit/b00712eaa551f126f783b50718cf547a3e37bc86\">https://github.com/Julian/dotfiles/commit/b00712eaa551f126f783b50718cf547a3e37bc86</a></p>\n<p>I'm sure there's probably what to improve there but just to show the basic idea (and you can generate more of that I think too from lake's --help output)</p>",
        "id": 317607965,
        "sender_full_name": "Julian Berman",
        "timestamp": 1671814703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20.3Cpath.3E/near/317428964\">said</a>:</p>\n<blockquote>\n<p>Now they've been summoned I can also ask what the difference, if any, is between <code>lake build Mathlib.Data.Fin.Basic</code> and <code>lake build +Mathlib.Data.Fin.Basic</code></p>\n</blockquote>\n<p>Nothing. The later (the <code>+</code>) just exists to disambiguate between modules and targets with the same name  (e.g., <code>Mathlib</code> the module and <code>Mathlib</code> the <code>lean_lib</code>).</p>",
        "id": 317634359,
        "sender_full_name": "Mac",
        "timestamp": 1671825797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20.3Cpath.3E/near/317427133\">said</a>:</p>\n<blockquote>\n<p>Could <code>lake</code> support <code>lake build Mathlib/Data/Fin/Basic.lean</code> besides <code>lake build Mathlib.Data.Fin.Basic</code>?<br>\nThe benefit is that this allows tab completion in shells.</p>\n</blockquote>\n<p>With some work, yes. There are some design wrinkles to note, though. The most immediate being that the <code>/</code> is currently already used for packages (e.g., <code>doc-gen4/coreDocs </code> will build the <code>coreDocs</code> target of <code>doc-gen4</code>). Also, the source tree need not be top-level. For instance, if modules are stuck in a <code>src</code> directory should <code>src/Foo/Bar.lean</code> or <code>Foo/Bar.lean</code> build <code>Foo.Bar</code>?  However, with some time, I am confident a good design could be found. Feel free to create an issue with feature request on the Lake repository and I will put it on my todo list (or, if someone else wants to take a crack at, I willing to review PRs).</p>",
        "id": 317635246,
        "sender_full_name": "Mac",
        "timestamp": 1671826274
    }
]