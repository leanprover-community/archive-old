[
    {
        "content": "<p>I have used lean3 for about a year and am new to lean4. I made an inductive datatype when I discovered curious behavior: lean4 seems to make an argument implicit when I've written it to be explicit. See the MWE below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MWE</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">MWE</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Have to specify the first Nat in the type of the term, and not as an arg</span>\n<span class=\"kd\">def</span> <span class=\"n\">mwe₁</span> <span class=\"o\">:</span> <span class=\"n\">MWE</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">MWE.id</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- Doesn't work: complains that a \"function [was] expected\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">mwe₂</span> <span class=\"o\">:=</span> <span class=\"n\">MWE.id</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Is there a reason why lean4 is setting the first argument as an implicit one?</p>",
        "id": 287103186,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1655926884
    },
    {
        "content": "<p>doesn't work for me on <code>leanprover/lean4:nightly-2022-06-20</code></p>",
        "id": 287103363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655926975
    },
    {
        "content": "<p>this compiles without errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MWE</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">MWE</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mwe₁</span> <span class=\"o\">:</span> <span class=\"n\">MWE</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">MWE.id</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">mwe₂</span> <span class=\"o\">:=</span> <span class=\"n\">MWE.id</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 287103399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655927001
    },
    {
        "content": "<p>it might be <a href=\"https://github.com/leanprover/lean4/pull/1156\">lean4#1156</a> which was fixed in <code>leanprover/lean4:nightly-2022-05-26</code></p>",
        "id": 287103577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655927103
    },
    {
        "content": "<p>Oh, huh. I checked <code>lake</code>, and it says I'm running version 4.0.0, so maybe this is solved in a later build. I will update my version and see if that fixes things.</p>",
        "id": 287103646,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1655927137
    },
    {
        "content": "<p>Your linked issue on GitHub may very well be the underlying problem.</p>",
        "id": 287103678,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1655927157
    },
    {
        "content": "<p>you should put the lean version you want in the <code>lean-toolchain</code> file</p>",
        "id": 287103750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655927185
    },
    {
        "content": "<p>Yep, that solved my issue. Thanks for the quick and super specific response!</p>",
        "id": 287103955,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1655927318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424407\">Cayden Codel</span> has marked this topic as resolved.</p>",
        "id": 287104117,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655927406
    }
]