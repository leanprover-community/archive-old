[
    {
        "content": "<p>I've noticed during my development on doc-gen4 that when I commit some logic error in my handling of e.g. <code>HashMap</code>and try to access a key that is not there nailing even the location of the error down (especially when the HashMap is not in the spot I just edited but somewhere else and this error is a side effect of the change I made) is kind of hard due to the fact that <code>panic!</code> only knows about the location it was called it but not actually the entire backtrace. With my current knowledge of Lean I can also see that it's very convenient to have panic work this way because you can just determine this location easily at compile time but I was wondering whether it would be feasible to actually print a full backtrace? This would make my life soooo much easier when I eventually mess up again.</p>",
        "id": 272851658,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645556778
    },
    {
        "content": "<p>You can always run the program in a debugger and set a breakpoint on <code>lean_panic_fn</code>.</p>",
        "id": 272852679,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645557214
    },
    {
        "content": "<p>You could also try setting the environment variable <code>LEAN_ABORT_ON_PANIC</code> (on the official nightlies).  I believe libc++ produces backtraces for uncaught exceptions.</p>",
        "id": 272852843,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645557287
    },
    {
        "content": "<p>I don't think lean has any support for language level backtraces. It would definitely be nice</p>",
        "id": 272852891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557309
    },
    {
        "content": "<p>it's pretty painful to get a backtrace in haskell, it's opt in with a magic typeclass. Not sure if lean would suffer similar issues</p>",
        "id": 272853081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557382
    },
    {
        "content": "<p>Probably a better strategy is just to use the C stack and demangle the names</p>",
        "id": 272853336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557483
    },
    {
        "content": "<p>I think the big issue in Haskell is laziness, the actual stack trace at the time of execution has little relation to nested calls in the source.  In Lean we could indeed look at the C stack (and the interpreter!).</p>",
        "id": 272853362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645557503
    },
    {
        "content": "<p>In the interpreter, I guess it's possible to directly produce the backtrace</p>",
        "id": 272853403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557518
    },
    {
        "content": "<p>Typically the interpreter is interleaved with native functions, so ideally you'd want both.</p>",
        "id": 272853429,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645557536
    },
    {
        "content": "<p>Yeah I kind of expected it's non trivial to acutally do it in lean :/ the Rust backtrace/unwind machinery (its the only other I know) is also kinda complex.</p>",
        "id": 272853612,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645557616
    },
    {
        "content": "<p>I think rust is just wrapping libunwind</p>",
        "id": 272853652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557644
    },
    {
        "content": "<p>But the debugger is a good idea, I'll try that in the future!</p>",
        "id": 272853665,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645557653
    },
    {
        "content": "<p>which I guess we could do too</p>",
        "id": 272853672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557656
    },
    {
        "content": "<p>Yeah they do but there is also some degrees of platform specific logic, for example under OpenBSD libunwind does work but for the longest time it would just print \"unknown function\" n times (for stack depth n) until I fixed it in the unwind wrapper so there is apparently some non trivial piece of platform specific code involved at least in Rust.</p>",
        "id": 272853791,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645557715
    },
    {
        "content": "<p>maybe Lean doesnt suffer from this since we are just C code</p>",
        "id": 272853845,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645557724
    },
    {
        "content": "<p>I wonder if it is possible to integrate the VM stack with libunwind.</p>",
        "id": 272853968,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645557779
    },
    {
        "content": "<p>Apparently the state of the art is to capture both the native stack as well as the interpreter stack(s) and then merge them.  <a href=\"https://www.benfrederickson.com/profiling-native-python-extensions-with-py-spy/\">https://www.benfrederickson.com/profiling-native-python-extensions-with-py-spy/</a></p>",
        "id": 272854707,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645558151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/backtrace.20for.20panic!/near/272853665\">said</a>:</p>\n<blockquote>\n<p>But the debugger is a good idea, I'll try that in the future!</p>\n</blockquote>\n<p>Use libunwind and add debug information (DWARF) when compiling. This can be done with #line macro in C.</p>",
        "id": 295415782,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661517986
    },
    {
        "content": "<p>Make sure to emit row+column</p>",
        "id": 295416251,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661518152
    }
]