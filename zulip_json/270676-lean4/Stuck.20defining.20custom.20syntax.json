[
    {
        "content": "<p>I am trying to implement a custom syntax in Lean for the first time.</p>\n<p>I am stuck on one problem:  I would like to reuse <code>rule_ctr</code> in two different contexts so I extracted out its definition from the <code>rule_term</code> into its own syntax cat. However, when implementing <code>rule_term</code> with <code>macro_rules</code>, how do I delegate to the rule_ctr macro_rules?</p>\n<p>Right now I get: <code>expected 'numLit', 'rule_term' or numeral</code></p>\n<p>Here is a #MWE (see <code>HERE!</code> for where the error occurs):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Syntax</span>\n<span class=\"c1\">-- ------</span>\n\n<span class=\"c1\">-- rule ::=</span>\n<span class=\"c1\">-- | rule_ctr = rule_term</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rule</span>\n\n<span class=\"c1\">-- rule_ctr ::=</span>\n<span class=\"c1\">-- | (ctr term term ...)      # a constructor</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rule_ctr</span>\n\n<span class=\"c1\">-- rule_term ::=</span>\n<span class=\"c1\">-- | λvar. term               # a lambda</span>\n<span class=\"c1\">-- | (term term)              # an application</span>\n<span class=\"c1\">-- | rule_ctr</span>\n<span class=\"c1\">-- | num                      # a machine int</span>\n<span class=\"c1\">-- | let var = term; term     # a local definition</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rule_term</span>\n\n<span class=\"c1\">-- rule_ctr</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_ctr</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"n\">rule_term</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">rule_ctr</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_ctr</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">arg</span><span class=\"bp\">*</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- rule_term</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_term_lam</span><span class=\"o\">)</span> <span class=\"s2\">\"λ\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\".\"</span> <span class=\"n\">rule_term</span> <span class=\"o\">:</span> <span class=\"n\">rule_term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_term_app</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">rule_term</span> <span class=\"n\">rule_term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">rule_term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_term_ctr</span><span class=\"o\">)</span> <span class=\"n\">rule_ctr</span> <span class=\"o\">:</span> <span class=\"n\">rule_term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_term_num</span><span class=\"o\">)</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rule_term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rule_term_let</span><span class=\"o\">)</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">rule_term</span> <span class=\"n\">rule_term</span> <span class=\"o\">:</span> <span class=\"n\">rule_term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_term</span><span class=\"bp\">|</span> <span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">var</span> <span class=\"bp\">.</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">rule_term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_term</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">rule_term</span> <span class=\"bp\">$</span><span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"n\">rule_term</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ctr</span><span class=\"o\">:</span><span class=\"n\">rule_ctr</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>       <span class=\"c1\">-- &lt;==== HERE!</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">lit</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_term</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"n\">rule_term</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">rule_term</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- rule</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rule_ctr</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">rule_term</span> <span class=\"o\">:</span> <span class=\"n\">rule</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">arg</span> <span class=\"bp\">*</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">rule_term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"c1\">-- translation from rules to terms</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[rules|\"</span> <span class=\"n\">rule</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">rules</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">:</span><span class=\"n\">rule</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 274822918,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646912394
    },
    {
        "content": "<p>Humm, or maybe I dont need to explicitly do this in rule_term?</p>",
        "id": 274823427,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646912743
    },
    {
        "content": "<p>There is some confusion between the syntax category <code>rule_ctr</code> and the <code>syntax</code> declaration of the same name. You should not use syntax categories if you don't plan to extend them with more than one syntax declaration, use a syntax abbreviation instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">rule_ctr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"n\">rule_term</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span>\n</code></pre></div>",
        "id": 274823767,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646912964
    },
    {
        "content": "<p>You also do not usually need to name <code>syntax</code> declarations</p>",
        "id": 274823934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646913066
    },
    {
        "content": "<p>Thanks for the feedback.</p>\n<p>(1) \"There is some confusion between the syntax category rule_ctr and the syntax declaration of the same name\" - I see! Sorry, I missed that.</p>\n<p>(2) I see that there is one difference between<code>syntax rule_ctr := \"(\" ident rule_term* \")\"</code> and <code>syntax \"(\" ident rule_term* \")\" : rule_ctr</code> in the elaborated term: the first uses <code>Lean.ParserDescr.nodeWithAntiquot</code> and the second <code>Lean.ParserDescr.node</code>. Did I just gained the ability to antiquote rule_ctr by using your suggestion?</p>\n<p>(3) This seems to be a good rule of thumb: \"should not use syntax categories if you don't plan to extend them with more than one syntax declaration\".</p>\n<p>(4) One consequence of this change to <code>syntax rule_ctr := \"(\" ident rule_term* \")\"</code> is that the compiler rejects:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_ctr</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">rule_term</span><span class=\"bp\">*</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with <code>expected rule_ctr</code>.</p>",
        "id": 274828051,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646915585
    },
    {
        "content": "<p>2) Syntax categories are also valid antiquotation kinds, so there's not really any change compared to a single-rule category<br>\n4) This is true, but is it even the case that you want the same expansion of <code>rule_ctr</code> in both places in the grammar?</p>",
        "id": 274838102,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646920807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20defining.20custom.20syntax/near/274838102\">said</a>:</p>\n<blockquote>\n<p>4) This is true, but is it even the case that you want the same expansion of <code>rule_ctr</code> in both places in the grammar?</p>\n</blockquote>\n<p>I will have to think about this probably as I go through with this. But initially, I thought that the rule_ctr would always construct the same term and so I could avoid duplicating the macro_rules item. But it is not that important except understanding/learning.</p>",
        "id": 274865887,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646932322
    },
    {
        "content": "<p>Since you already have a <code> `[rules| ] </code> interpretation construct, I assume your syntax will expand as part of such macros, not by itself, in which case it shouldn't matter whether <code>rule_ctr</code> is a category or not.</p>",
        "id": 274867051,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646932885
    },
    {
        "content": "<p>Ok, making progress.</p>\n<p>How do I create a quoted <code>$name</code>? I.e. for a constructor <code>(Add 1 2)</code> I would like to create a syntax transformer that generates <code>Term.Ctr \"Add\" ...</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_ctr</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">rule_term</span><span class=\"bp\">*</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Term.Ctr</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 274890279,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646943801
    },
    {
        "content": "<p>This did it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rule_ctr</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">rule_term</span><span class=\"bp\">*</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Term.Ctr</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">name.getId.toString</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 274896173,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646947117
    }
]