[
    {
        "content": "<p>I was looking at Prelude.lean and became a bit confused by the docstring and apparent implementation of Array.push. The docstring/implementation are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Push an element onto the end of an array. This is amortized O(1) because</span>\n<span class=\"sd\">`Array α` is internally a dynamic array.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[extern \"lean_array_push\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Array.push</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">List.concat</span> <span class=\"n\">a.data</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>As best as I can tell, the Lean implementation that's written here is linear (both data and List.concat are linear with respect to the size of the array). But the docstring indicates Array.push is amoritized O(1). I'm assuming the discrepancy has to do with whether Array.push is called as an external C++ function, or whether Lean is using the provided Lean def.</p>\n<p>In what circumstances can I assume that Array.push is amortized O(1), and in what circumstances should I expect it to take linear time? Are there any configuration options I should be using to make sure I'm using the faster implementation?</p>",
        "id": 296439356,
        "sender_full_name": "Josh Clune",
        "timestamp": 1661975734
    },
    {
        "content": "<p>The extern implementation is used by the interpreter and compiler, and the lean implementation is used by the kernel</p>",
        "id": 296439548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661975809
    },
    {
        "content": "<p>so you will see the lean implementation when using <code>unfold</code> or <code>rfl</code></p>",
        "id": 296439612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661975834
    },
    {
        "content": "<p>Okay, thanks for the clarification.</p>",
        "id": 296439907,
        "sender_full_name": "Josh Clune",
        "timestamp": 1661975951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436568\">Josh Clune</span> has marked this topic as resolved.</p>",
        "id": 296439911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661975953
    },
    {
        "content": "<p>Hmm this got me thinking. Could <code>Array</code> return it's capacity? I guess it would have to be of type <code>Trunc Nat</code>. I do not have immediate use for it, but it might be useful.</p>",
        "id": 296442253,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1661976933
    },
    {
        "content": "<p>That would be nice. It does sound feasible: the most precise type we could give it is <code>Squash {n : USize // a.size &lt;= n}</code>, except that this reveals a dirty secret we want to keep out of pure code which is that arrays have bounded length</p>",
        "id": 296442688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661977106
    },
    {
        "content": "<p>Ohh I didn't know that Lean 3 <code>trunc</code> is Lean 4 <code>Squash</code>. </p>\n<p>Yeah having there <code>USize</code> would allow for inconsistency. Any issue with <code>Squash {n : Nat // a.size &lt;= n }</code>?</p>",
        "id": 296451697,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1661980802
    }
]