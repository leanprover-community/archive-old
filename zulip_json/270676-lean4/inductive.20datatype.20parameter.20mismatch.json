[
    {
        "content": "<p>I'm getting a message that I don't quite understand. I have the following inductively-defined proposition: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">instantaneousExecution</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">instantaneousExecution</span> <span class=\"n\">σ</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">ctx</span>\n <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span><span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ctx₁</span> <span class=\"n\">ctx₂</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n         <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">⇓ᵢ</span> <span class=\"o\">(</span><span class=\"n\">σ₁</span><span class=\"o\">,</span> <span class=\"n\">ctx₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n         <span class=\"n\">instantaneousExecution</span> <span class=\"n\">σ₁</span> <span class=\"n\">ctx₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">ctx₂</span> <span class=\"bp\">→</span>\n         <span class=\"n\">instantaneousExecution</span> <span class=\"n\">σ</span> <span class=\"n\">ctx</span> <span class=\"n\">σ₂</span> <span class=\"n\">ctx₂</span>\n</code></pre></div>\n<p>And Lean4 tells me: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">datatype</span> <span class=\"kd\">parameter</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">σ₁</span>\n<span class=\"n\">expected</span>\n  <span class=\"n\">σ</span>\n</code></pre></div>\n<p>But I don't understand why it expects the first parameter (<code>σ</code>) there. I'd assume those are the parameters to the constructor <code>instantaneousExecution</code>,  and in the end I am defining an implicit function from the first parameter by the last <code>→  instantaneousExecution σ ctx σ₂ ctx₂</code>. What's the flaw in my reasoning here?</p>\n<p>If I try to reduce this to a simpler example, looking for a #MWE, then it works fine, e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">constructor</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ</span> <span class=\"n\">σ₁</span>\n</code></pre></div>\n<p>works perfectly fine. Am I not doing the same thing above? Do the type parameters to the type matter (<code>Reactor</code> and <code>Context</code> in the example above)? There's also some (not shown) typeclasses for some of these variables (like <code>υ</code>), but that shouldn't matter either, should it?</p>\n<p>Thanks!</p>",
        "id": 270011184,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1643625804
    },
    {
        "content": "<p>What you're doing is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">constructor</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ</span> <span class=\"n\">σ₁</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span>\n</code></pre></div>\n<p>You need to make <code>σ</code> an index instead of a parameter (by moving it to the right of the colon in the declaration) if you want it to be able to vary.</p>",
        "id": 270013001,
        "sender_full_name": "Chris B",
        "timestamp": 1643626680
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">instantaneousExecution</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span>  <span class=\"n\">Context</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span>  <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>You can keep the labels like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">instantaneousExecution</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 270013205,
        "sender_full_name": "Chris B",
        "timestamp": 1643626772
    },
    {
        "content": "<p>Fwiw the 'why' is that you get different recursors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- indexed</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">X.rec</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">recursor X.rec : ∀ {motive : (a a_1 : ℕ) → X a a_1 → Prop},</span>\n<span class=\"cm\">  (∀ {a : ℕ}, motive a a (_ : X a a)) →</span>\n<span class=\"cm\">    (∀ {a : ℕ} (b : ℕ) (a_1 : X a b), motive a b a_1 → motive a (Nat.succ b) (_ : X a (Nat.succ b))) →</span>\n<span class=\"cm\">      ∀ {a a_1 : ℕ} (t : X a a_1), motive a a_1 t</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- param</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Y.rec</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">recursor Y.rec : ∀ {a : ℕ} {motive : (a_1 : ℕ) → Y a a_1 → Prop},</span>\n<span class=\"cm\">  motive a (_ : Y a a) →</span>\n<span class=\"cm\">    (∀ (b : ℕ) (a_1 : Y a b), motive b a_1 → motive (Nat.succ b) (_ : Y a (Nat.succ b))) →</span>\n<span class=\"cm\">      ∀ {a_1 : ℕ} (t : Y a a_1), motive a_1 t</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 270014237,
        "sender_full_name": "Chris B",
        "timestamp": 1643627253
    }
]