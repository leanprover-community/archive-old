[
    {
        "content": "<p>I am curious as to why the tuple syntax <code>(a,b,*)</code> isn't used for the anonymous constructor instead of the esoteric <code>⟨a,b,*⟩</code>. Currently, the tuple syntax is used for constructing a <code>Prod</code>, but the anonymous constructor can also build <code>Prod</code>. There is also the specific use case where the expected type is unknown and one wants a <code>Prod</code>. But  that could also be covered by having the anonymous constructor syntax default to <code>Prod</code> in such cases. Thus, there seems to be immense benefit in having the tuple syntax just be the anonymous constructor syntax.</p>",
        "id": 245475774,
        "sender_full_name": "Mac",
        "timestamp": 1625853232
    },
    {
        "content": "<p>I often use <code>⟨a⟩</code> and <code>⟨⟩</code> which would be problematic with round brackets <code>()</code></p>",
        "id": 245475965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625853327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Tuple.20vs.2E.20Anon.20Ctor/near/245475965\">said</a>:</p>\n<blockquote>\n<p>I often use <code>⟨a⟩</code> and <code>⟨⟩</code> which would be problematic with round brackets <code>()</code></p>\n</blockquote>\n<p>The <code>()</code> is already is another special syntax  (for  constructing<code>PUnit</code>) that could also be replaced with the anonymous constructor (since it can also construct <code>PUnit</code> and could default it in the case of an unknown expected type).</p>",
        "id": 245476426,
        "sender_full_name": "Mac",
        "timestamp": 1625853533
    },
    {
        "content": "<p>The <code>(a)</code> is somewhat of a concern. However, there are already places in Lean where <code>(a)</code> is distinct from <code>a</code>, so it could still represent the anonymous constructor.  However, for the same reason, it could cause clashes. Thus, alternatively, I would propose that could be the one place where the esoteric <code>⟨⟩</code> brackets are keep (i.e., leave it as <code>⟨a⟩</code>), since that is something of a special case.</p>",
        "id": 245476752,
        "sender_full_name": "Mac",
        "timestamp": 1625853660
    },
    {
        "content": "<p>Rust uses <code>(a,)</code> for 1-tuples</p>",
        "id": 245499491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625865005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Tuple.20vs.2E.20Anon.20Ctor/near/245499491\">said</a>:</p>\n<blockquote>\n<p>Rust uses <code>(a,)</code> for 1-tuples</p>\n</blockquote>\n<p>Oh yeah, I've seen that before! With that solution, the tuple syntax could be use for anonymous constructors of  any size without much trouble.</p>",
        "id": 245521518,
        "sender_full_name": "Mac",
        "timestamp": 1625878821
    }
]