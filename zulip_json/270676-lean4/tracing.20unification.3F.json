[
    {
        "content": "<p>Is there a tracing option for debugging the unifier?</p>",
        "id": 230420400,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615843184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"c1\">-- for expressions</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isLevelDefEq</span> <span class=\"n\">true</span> <span class=\"c1\">-- for universe levels</span>\n</code></pre></div>\n<p>It is currently a \"tsunami\" of trace messages.<br>\nRecall that we can now use <code>set_option</code> in subterms and tactics, and it helps to filter the number of messages.<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a.succ.succ</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a.succ.succ.succ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>We are planning to provide a simple API for filtering/query the trace messages. <span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span> I am curious if you have suggestions.</p>",
        "id": 230422665,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615844273
    },
    {
        "content": "<p>Hmm, I don't have any suggestions yet, I think I need more experience first.  I guess the thing I actually want is some sort of point-and-click or debugger-like experience, where I can click on some part of an error message.  For example, in <a href=\"https://github.com/leanprover/lean4/issues/352\">https://github.com/leanprover/lean4/issues/352</a> , the experience I would have liked to have had is that, on getting \"failed to synthesize instance\", I could click somewhere on it and get the instance trace (perhaps folded, or something, for easier navigation), and then when I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"n\">CoeSort.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Cat1.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">,</span> <span class=\"n\">u2</span><span class=\"o\">}</span>\n        <span class=\"bp\">?</span><span class=\"n\">m.492</span> <span class=\"bp\">=?=</span> <span class=\"n\">CoeSort.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.494</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.495</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">u.494</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Cat1.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.494</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.495</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.494</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"n\">failure</span>\n</code></pre></div>\n<p>I could click on the <code>=?=</code> problem and get a unification trace for this problem/failure.</p>\n<p>Alas, this is not a \"simple API\" :-P</p>\n<p>(Tangentially, I think a view I'm coming to hold is that if something in lean fails only due to universes not matching, that's a cause for concern.  I kind-of want a version of error-message-reporting where universe issues are propagated more.)</p>",
        "id": 230424343,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615845134
    }
]