[
    {
        "content": "<p>Hi! I am stuck in a challenge of the meta world.<br>\n<a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Parser.lean#L21\">Here</a> you can see <code>es</code>, which is of <code>List Expression</code>. And then <a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Parser.lean#L23\">here</a> I was able to call the <code>Expression.app</code> constructor, whose second argument is a term of type <code>NEList Expression</code>.</p>\n<p><code>NEList α</code> is basically a non-empty <code>List α</code>. I then used the function <code>List.toNEList</code> to instantiate the term of type <code>NEList Expression</code>. However, the second argument is a proof that the first argument (of type <code>List Expression</code>) is not empty.</p>\n<p>In the <code>Parser</code> code it's pretty straightforward, as you can see. But I'm stuck trying to do the same in the meta world. <a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Meta.lean#L31\">Here</a> I was able to create a term of type <code>List Expression</code>. Now I want to use <code>mkAppM</code>, calling the <code>List.toNEList</code> function. But I don't know how to elaborate the expression for the second argument. Is it possible? If so, how?</p>\n<p>Sorry if the text was too long. I hope I was able to provide enough context for my question <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 277484352,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648850952
    },
    {
        "content": "<p>Many of the primitive tactics are formulated in <code>MetaM</code> and work by taking a <code>MVarId</code> as a parameter and may return one or many <code>MVarId</code>s. You can start by creating a mvar with the right type <br>\nusing <code>Lean.Meta.mkFreshExprMVar</code> and then call your elaborating function that you may have written in <code>MetaM</code> (and use <code>liftMetaM</code> to make it compatible with <code>TermElabM</code>). If you prefer writing the elaboration in <code>TacticM</code>, you start the same way by creating a mvar and passing it as a parameter to <code>Lean.Elab.Tactic.run</code>. </p>\n<p>That should get you started. For more details, I would need to know what your plan is for building that proof automatically.</p>",
        "id": 277486380,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1648852441
    },
    {
        "content": "<p>The small goal is to simply be able to call the <code>Expression.app</code> constructor (it requires a proof). The big goal is being able to see (and test) my interpreter with an easy way to instantiate terms of type <code>Program</code> by using an unified syntax. Like <a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Meta.lean#L80\">this</a></p>",
        "id": 277487394,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648853265
    },
    {
        "content": "<p>Are you saying that my answer is not getting you there or is that a separate question?</p>",
        "id": 277488085,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1648853718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> the issue is that, in the <code>Parser</code> code, I have <code>h</code> granted by the result of <a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Parser.lean#L22\"><code>if h : ¬ es.isEmpty</code></a>. In the meta code, I also have <a href=\"https://github.com/arthurpaulino/FunnyLang/blob/40530d63918038d8fbba136245afe1577c08b316/FunnyLang/Meta.lean#L30\"><code>if h : ¬ es.isEmpty</code></a> but <code>es</code> is of type <code>List Expr</code>. Whereas in the Parser, <code>es</code> is of type List Expression</p>",
        "id": 277488175,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648853771
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277488213,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648853813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/creating.20proofs.20in.20.60TermElabM.60/near/277488085\">said</a>:</p>\n<blockquote>\n<p>Are you saying that my answer is not getting you there or is that a separate question?</p>\n</blockquote>\n<p>I'm saying that your answer, as I understood it, would help me building the proof in a \"tactic-like\" fashion. But in this scenario I would like to build a proof (as an <code>Expr</code>) of the fact that my <code>List Expression</code> is not empty, but all I have is the hypothesis that my <code>List Expr</code> is not empty</p>",
        "id": 277488507,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648854027
    },
    {
        "content": "<p>We know that <code>l</code> is not the empty list in your example. Then, <code>mkListLit</code> produces a <code>List.cons</code> application. Thus, we can prove that is not empty using reflexivty.<br>\nAnother trick is to completely avoid proofs and use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.toNEList'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">uno</span> <span class=\"n\">a</span>\n   <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">toNEList'</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here is an example. It is based on fragments of your code base.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NEList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.toNEList</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">l.isEmpty</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b.isEmpty</span>\n      <span class=\"k\">then</span> <span class=\"n\">NEList.cons</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"n\">b.toNEList</span> <span class=\"n\">h</span>\n      <span class=\"k\">else</span> <span class=\"n\">NEList.uno</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.notEmpty_of_eq_false</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.isEmpty</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">l.isEmpty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.toNEList'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">uno</span> <span class=\"n\">a</span>\n   <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">toNEList'</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expression</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">declare_syntax_cat</span>                    <span class=\"n\">expression</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">expression</span><span class=\"bp\">*</span>            <span class=\"o\">:</span> <span class=\"n\">expression</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">expression</span> <span class=\"s2\">\" ) \"</span>       <span class=\"o\">:</span> <span class=\"n\">expression</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabStringOfIdent</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkStrLit</span> <span class=\"n\">id.getId.toString</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elabExpression</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">expression</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">es</span> <span class=\"bp\">←</span> <span class=\"n\">es.data.mapM</span> <span class=\"n\">elabExpression</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">es.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span>  <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"n\">es</span>    <span class=\"c1\">-- term of type `List Expression`</span>\n      <span class=\"k\">let</span> <span class=\"n\">h</span>  <span class=\"bp\">←</span> <span class=\"n\">mkEqRefl</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.isEmpty</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span>     <span class=\"c1\">-- h  := (Eq.refl (List.isEmpty &lt;l&gt;))</span>\n      <span class=\"k\">let</span> <span class=\"n\">hn</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.notEmpty_of_eq_false</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>  <span class=\"c1\">-- hn := (List.notEmpty_of_eq_false &lt;l&gt; &lt;h&gt;)</span>\n      <span class=\"k\">let</span> <span class=\"n\">nl</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.toNEList</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span>             <span class=\"c1\">-- nl := (List.toNEList &lt;l&gt; &lt;hn&gt;)</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Expression.app</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elabStringOfIdent</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nl</span><span class=\"o\">]</span>   <span class=\"c1\">-- app &lt;n&gt; &lt;nl&gt;</span>\n    <span class=\"k\">else</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Expression.var</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elabStringOfIdent</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#test1\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">expression</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"n\">none</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabExpression</span> <span class=\"n\">e</span>\n    <span class=\"n\">check</span> <span class=\"n\">e</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elabExpression'</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">expression</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">es</span> <span class=\"bp\">←</span> <span class=\"n\">es.data.mapM</span> <span class=\"n\">elabExpression</span>\n    <span class=\"k\">match</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"o\">::</span><span class=\"n\">es</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span>  <span class=\"bp\">←</span> <span class=\"n\">mkListLit</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"n\">es</span>\n      <span class=\"k\">let</span> <span class=\"n\">nl</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.toNEList'</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Expression.app</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elabStringOfIdent</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nl</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Expression.var</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elabStringOfIdent</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#test2\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">expression</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"n\">none</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabExpression'</span> <span class=\"n\">e</span>\n    <span class=\"n\">check</span> <span class=\"n\">e</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">test2</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 277489958,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648855290
    },
    {
        "content": "<p>Wow Leo, thank you SO MUCH for the deeply thought answer!</p>",
        "id": 277490162,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648855442
    },
    {
        "content": "<p>BTW, note that your parser is parsing <code>foo a b</code> as <code>foo (a b)</code>.</p>",
        "id": 277490432,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648855706
    },
    {
        "content": "<p>Yeah, I'm experimenting with some tricks that should allow me to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"bp\">#</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>As well as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n  <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>       <span class=\"bp\">#</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 277490672,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648855967
    },
    {
        "content": "<p>Added these just because why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isEq</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">isEq</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">uno</span>  <span class=\"n\">a</span>   <span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>          <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ListToNEListIsEqList</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">isEq</span> <span class=\"o\">(</span><span class=\"n\">as.toNEList</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">isEq</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a'</span> <span class=\"n\">as'</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">as'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">isEq</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">isEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NEListToListEqList</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">as.toNEList</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>           <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">NEList.toList</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">as'</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">as'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">NEList.toList</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.toNEList</span><span class=\"o\">,</span> <span class=\"n\">NEList.toList</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 277501907,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648868600
    }
]