[
    {
        "content": "<p>We have been working on a tool for AI based translation from natural language to Lean 4 with a convenient interface. </p>\n<ul>\n<li>A quick demo of this in action: <a href=\"/user_uploads/3121/bQwsTTGBwfPefG9t47jPkBuA/leanaide-translation.gif\">leanaide-translation.gif</a> <div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bQwsTTGBwfPefG9t47jPkBuA/leanaide-translation.gif\" title=\"leanaide-translation.gif\"><img src=\"/user_uploads/3121/bQwsTTGBwfPefG9t47jPkBuA/leanaide-translation.gif\"></a></div></li>\n<li>A brief video: <a href=\"https://youtu.be/_NMquXd0Qos\">https://youtu.be/_NMquXd0Qos</a><div class=\"youtube-video message_inline_image\"><a data-id=\"_NMquXd0Qos\" href=\"https://youtu.be/_NMquXd0Qos\"><img src=\"https://uploads.zulipusercontent.net/621e28c0c412a676cb68a9c27fbc9e9f2714fe15/68747470733a2f2f692e7974696d672e636f6d2f76692f5f4e4d7175586430516f732f64656661756c742e6a7067\"></a></div></li>\n</ul>\n<p>The code is at <a href=\"https://github.com/siddhartha-gadgil/LeanAide\">https://github.com/siddhartha-gadgil/LeanAide</a>.  The Lean code was written by <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> and myself, and is part of a collaboration with <span class=\"user-mention\" data-user-id=\"439607\">@Ayush Agrawal</span> <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> and Navin Goyal.</p>\n<h2>Quickstart</h2>\n<p>Our translation is based on Codex, to use which you need an OpenAI key. We also use a server for <em>sentence similarity</em>. To get started please configure environment variables using the following bash commands or equivalent in your shell:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span> <span class=\"nv\">LEANAIDE_IP</span><span class=\"o\">=</span><span class=\"s2\">\"34.100.184.111:5000\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">OPENAI_API_KEY</span><span class=\"o\">=</span>&lt;your-open-ai-key&gt;\n</code></pre></div>\n<p>Build this repository with the following commands</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake build mathlib\nlake build\n</code></pre></div>\n<p>After this open the folder in VS code (or equivalent) with Lean 4 and go to the file <code>LeanCodePrompts/TranslateExample.lean</code>. Place the cursor anywhere on one of the comments below and invoke the <em>code action</em> to translate by clicking on the <em>lightbulb</em>or using <code>ctrl-.</code></p>\n<p>You can add your own comments and try to translate using the same method. In general, you can <code>import LeanCodePrompts.CodeActions</code> in a lean file and use the code-action to translate. You should usually also include <code>import Mathbin.All</code> to include the (partly broken) binary port of <code>mathlib</code>. </p>\n<p>In case translation fails please look at the troubleshooting section in the  <a href=\"https://github.com/siddhartha-gadgil/LeanAide#readme\">README</a> or ping us here.</p>\n<h2>How this works</h2>\n<p>The translation is based on <strong>Codex</strong> with <em>input-dependent prompting</em> and <em>post-processing</em>. Our steps are:</p>\n<ul>\n<li>given a natural language statement to be translated we find similar doc-strings in <code>mathlib</code> and build a <em>prompt</em> roughly with these and the corresponding code, with the natural language statement to be translated appended in the guise of a doc-string.</li>\n<li>the prompt is sent to the Codex server, which returns a bunch of <em>completions</em> (we specify <code>:=</code> as the <em>termination token</em>).</li>\n<li>these are then post-processed: we (attempt to) translate identifiers from Lean 3 to Lean 4, do some auto-correction, and filter out those that fail to <em>elaborate</em>.</li>\n</ul>\n<p>More details are in a <a href=\"https://mathai2022.github.io/papers/17.pdf\">note</a> at the <a href=\"https://mathai2022.github.io/papers/\">2nd Math AI workshop</a> and in more detail (along with related work) in a <a href=\"https://arxiv.org/abs/2211.07524\">preprint</a>.</p>\n<h2>Limitations and road-map</h2>\n<p>We have a reasonable success rate with typical doc-strings with translations that are valid for the present state of the <em>binary port</em> of <code>mathlib</code>. We plan to work on many improvements, including</p>\n<ul>\n<li>translating to definitions as well as theorems,</li>\n<li>handling more complex mathematical idioms,</li>\n<li>more generally improving our success rate,</li>\n<li>using the info-panel to offer many choices to the user,</li>\n<li>using the translation of identifiers from mathlib3port and Lean's fuzzy finder in place of (or in addition to) our (hacky) translation and auto-correction.</li>\n</ul>\n<p>We further plan to migrate to <code>mathlib4</code> as the target once its coverage is adequate. So suggestions, feature requests, contributions are most welcome over the next few months as we hope this tool moves to practical usability.</p>\n<h2>Thanks</h2>\n<p>This work was only possible because of a lot of help we got here from the Lean community. We also got help from a few collaborators at Microsoft Research and Microsoft. Support to host the sentence similarity server comes from Google cloud research credits.</p>",
        "id": 312761465,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669693230
    }
]