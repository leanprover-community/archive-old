[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Vector.cons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Vector.cons</span> <span class=\"mi\">5</span> <span class=\"n\">Vector.nil</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Vector.cons 3 (Vector.cons 5 Vector.nil) : Vector Nat (0 + 1 + 1)</span>\n</code></pre></div>\n<p>Why does it stay <code>(0 + 1 + 1)</code> and not get reduced to <code>2</code>?</p>",
        "id": 289613567,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1657815355
    },
    {
        "content": "<p>When you say that <code>cons</code> outputs a <code>Vector α (n+1)</code>, that's syntactic. But types will reduce if you assign, cast, or otherwise compare for equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Vector.cons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Vector.cons</span> <span class=\"mi\">5</span> <span class=\"n\">Vector.nil</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But also what set of expressions do you expect would simplify? Would <code>n+0</code> simplify? What about <code>0+n</code>, which is equal but not definitionally equal?</p>",
        "id": 289614470,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1657815741
    },
    {
        "content": "<p>Counter question: Why should Lean eagerly reduce the type here without a real need to do so in say a compare operation. As we know reducing a term can be costly if the term is complex enough.</p>",
        "id": 289614539,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657815781
    }
]