[
    {
        "content": "<p>Watch JuliaCon 2022 Keynote (<a href=\"https://youtu.be/s6pjxCuNGjc\">https://youtu.be/s6pjxCuNGjc</a>) by Jeremy Howard.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"s6pjxCuNGjc\" href=\"https://youtu.be/s6pjxCuNGjc\"><img src=\"https://uploads.zulipusercontent.net/a41dbad5808bc6422f499cd5680c35b689d146aa/68747470733a2f2f692e7974696d672e636f6d2f76692f7336706a7843754e476a632f64656661756c742e6a7067\"></a></div><p>Some interesting thoughts that may be useful to help Lean grow as a Language and ecosystem.</p>",
        "id": 291258589,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1659046045
    },
    {
        "content": "<p>What do you think will be the main challenges for Lean to gain wider popularity?</p>\n<p>I see there might be problems with:</p>\n<ul>\n<li>lack of libraries: this is a problem for any starting language</li>\n<li>overselling verification: people already interested in verification are already using Lean, Coq, Agda, ... They are small in number and just need to be convinced to switch to Lean. In my opinion, Lean is wonderful language even if you are not interested in proofs.</li>\n<li>do notation and monadic programing: if you are not a Haskell programmer the do notation is a bit strange. Similar to Haskell, the is a potential that the doc/libraries will be littered with math mumbo jumbo impenetrable for normal people.</li>\n<li>custom syntax: I love the extensibility of Lean's syntax. However, I can see how every library creator will go nuts, define their own DSL, and using Lean will effectively requite learning dozens of poorly documented languages.</li>\n</ul>",
        "id": 291301028,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1659087451
    },
    {
        "content": "<p>I think debugging is high up there, and one of the important historical problems with Julia.</p>",
        "id": 291393481,
        "sender_full_name": "Tom",
        "timestamp": 1659137840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291301028\">said</a>:</p>\n<blockquote>\n<p>What do you think will be the main challenges for Lean to gain wider popularity?<br>\n[...]</p>\n<ul>\n<li>custom syntax: I love the extensibility of Lean's syntax. However, I can see how every library creator will go nuts, define their own DSL, and using Lean will effectively requite learning dozens of poorly documented languages.</li>\n</ul>\n</blockquote>\n<p>While I agree with your other points, I think this point is a common concern that I doubt will be as bad as people think. Lean has very good editor integration for its custom syntax (highlighting, hovers, go-to-def, docstrings), so much so that I think using custom syntax will become second nature just like using functions, subroutines, objects, and classes are at the moment (all of which were rather revolutionary when they were first introduced). </p>\n<p>Custom syntax also has the potential advantage to allow the expression of concepts in a way that is more natural to the topic in question, which can often improve readability over bare-metal functions. Thus, it may turn out that poorly documented code using custom syntax is actually easier to understand than equivalent poorly documented functions. Admittedly though, if the syntax of the topic is too esoteric, it may conversely become harder for people unfamiliar with the subject to understand even if it is easier for those more familiar.</p>",
        "id": 291395098,
        "sender_full_name": "Mac",
        "timestamp": 1659139679
    },
    {
        "content": "<p>This is something I've already mentioned to Leo in a conversation we had... I believe that languages can get extra traction with examples of problems/solutions that require involved code in most situations but are solved with brevity and elegance in the language in question.</p>\n<p>My background is the traditional software engineering industry, where people use JavaScript, Python, C++, Java etc. And in my experience, Lean 4 has helped me with issues that would have given me way more headaches in other languages.</p>\n<p>But I don't know enough to tell where Lean is wrt other FP languages like Haskell or Clojure. The ecosystem is still small, but that's the obvious answer.</p>\n<p>Also, I know, for instance, that people are deploying verified code with Coq + code extraction out there. What does Lean 4 offer to facilitate the life of those people? And I believe that they'll ask for more fundamental improvements besides the easiness of cutting off the extraction step</p>",
        "id": 291396215,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659141123
    },
    {
        "content": "<p>Regarding the Coq part, right now not really much, the Coq proving eco system is huge, if these people wanna maintain their level of research and not rewrite the proof libraries there already are for program verification they have no reason to look at Lean at the moment really.</p>",
        "id": 291396428,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659141430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I wonder if it would be feasible to embed Coq in Lean?</p>",
        "id": 291397512,
        "sender_full_name": "Mac",
        "timestamp": 1659142909
    },
    {
        "content": "<p>That way Lean could use all (or at least many( of Coq's packages.</p>",
        "id": 291397563,
        "sender_full_name": "Mac",
        "timestamp": 1659142947
    },
    {
        "content": "<p>The type theories are certainly <em>very</em> close and I believe someone somewhere already made a Lean -&gt; Coq thingy let me try to dig it out</p>",
        "id": 291397572,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659142979
    },
    {
        "content": "<p><a href=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\">https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581</a> there it is</p>",
        "id": 291397630,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659143045
    },
    {
        "content": "<p>So yeah...sounds possible to me although I would have no clue where to start</p>",
        "id": 291397651,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659143108
    },
    {
        "content": "<p>This is a... complicated question, and the simple answer is that if you want a fully proof preserving shallow translation then no it's not possible in either direction. That post has to turn off a lot of coq kernel checks (including some that are critical for soundness) to make the proofs go through</p>",
        "id": 291398297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659144021
    },
    {
        "content": "<p>You can get an approximate translation for most of the language though</p>",
        "id": 291398321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659144077
    },
    {
        "content": "<p>A mathport style source-to-source translation from coq would be really cool and much more useful I think</p>",
        "id": 291398400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659144161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291398400\">said</a>:</p>\n<blockquote>\n<p>A mathport style source-to-source translation from coq would be really cool and much more useful I think</p>\n</blockquote>\n<p>Yeah, this was more of what I was suggesting. However, my though was more along the lines of a DSL than a single pass transpilation.</p>",
        "id": 291404759,
        "sender_full_name": "Mac",
        "timestamp": 1659153133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291395098\">said</a>:</p>\n<blockquote>\n<p>While I agree with your other points, I think this point is a common concern that I doubt will be as bad as people think....</p>\n</blockquote>\n<p>Very good point, I'm quite curious how it will turn out.</p>\n<p>My latest unpleasant experience was when you updated Lake's DSL. I needed to specify particular revision with<code>require</code> and I missed the <code>@\"rev\"</code> in the <a href=\"https://github.com/leanprover/lake#syntax-of-require\">example</a>, it is burried in the middle of a very long command. I was confused for couple of minutes and I tried few random things before I got it working.<br>\nIf the dependency would be specified with a structure, code completion would guide me on how to set it up. Maybe I just need to learn how to use editor go-to for custom syntax.</p>",
        "id": 291413574,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1659166526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291413574\">said</a>:</p>\n<blockquote>\n<p>If the dependency would be specified with a structure, code completion would guide me on how to set it up.</p>\n</blockquote>\n<p>How so? There is code completion for structures? I have never seen that while coding Lean thus far.</p>",
        "id": 291437006,
        "sender_full_name": "Mac",
        "timestamp": 1659197357
    },
    {
        "content": "<p>Sorry, it might not be code completion per se, but I could easily look up the structure definition with go-to. I expect that there would be an inductive type to specify dependency location with constructors for GitHub repo, local folder, ... And there the code completion would help me.</p>",
        "id": 291439557,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1659200089
    },
    {
        "content": "<p>Quite ofthen when I run go-to on some custom syntax it takes me to some code about generic elaboration in the main Lean codebase.</p>",
        "id": 291439664,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1659200194
    },
    {
        "content": "<p>But also, we should definitely implement completion inside structure instances</p>",
        "id": 291439987,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659200626
    },
    {
        "content": "<blockquote>\n<p>If the dependency would be specified with a structure, code completion would guide me on how to set it up. Maybe I just need to learn how to use editor go-to for custom syntax.</p>\n</blockquote>\n<p>I agree with some of Tomas's points. DSLs are great when done right, but they can easily be overdone to the point of zero readability. On the completion note, I think it would be very cool if we had <em>completion</em> for some forms of custom syntax. E.g. if the parser optionally expects a keyword, that could show up as a possible completion. I imagine it would get complicated and heuristic-y very quickly, but it might be better than nothing.</p>",
        "id": 291440254,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659200947
    },
    {
        "content": "<p>That sounds more like structural editing - suggesting just the next valid keywords is not terribly helpful I think, you really want to see the full alternatives in the grammar at this point, including alternatives that do <em>not</em> expect any further tokens. And there are some interesting modern implementation of structural editing that make it look actually practical, e.g. <a href=\"https://twitter.com/disconcision/status/1545085997972692992\">https://twitter.com/disconcision/status/1545085997972692992</a>. But probably not something we should invest time on for Lean anytime soon...</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/disconcision/status/1545085997972692992\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/d6c301cd24213cf3d4c70a1c22946f87595cd64f/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313531363234323233313330303037393632302f4f3644356148795f5f6e6f726d616c2e6a7067\"></a><p>3 years later: <a href=\"https://twitter.com/dm_0ney\">@dm_0ney</a> and I, finally staring down the barrel of a multilingual structured editor with character-for-character text entry <a href=\"https://t.co/wHuQ9idMcw\">https://twitter.com/disconcision/status/1143367568796921858</a> <a href=\"https://t.co/PkD9D4perB\">https://twitter.com/disconcision/status/1545085997972692992/video/1</a></p><span>- andrew🦆blinn (@disconcision)</span></div></div>",
        "id": 291440890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659201682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291398297\">said</a>:</p>\n<blockquote>\n<p>This is a... complicated question, and the simple answer is that if you want a fully proof preserving shallow translation then no it's not possible in either direction. That post has to turn off a lot of coq kernel checks (including some that are critical for soundness) to make the proofs go through</p>\n</blockquote>\n<p>Are you talking about just Gallina here or also Vernacular + Ltac(/2)? I could imagine that a decent subset of Gallina could be directly translated into Lean (leaving out stuff like coinduction)</p>",
        "id": 291442014,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659202956
    },
    {
        "content": "<p>I think it's different if you want to use libraries like <a href=\"https://iris-project.org/\">Iris</a> and you actually want to build something using them as a library, or if you \"just\" want the proofs of some statements to build op on them</p>",
        "id": 291442128,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659203079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291439664\">said</a>:</p>\n<blockquote>\n<p>Quite ofthen when I run go-to on some custom syntax it takes me to some code about generic elaboration in the main Lean codebase.</p>\n</blockquote>\n<p>In my testing, all go-tos on Lake syntax take me to the Lake codebase (a decent amount of syntax also has docstrings). If it doesn't, that feels like a bug. I know that I often have the mentioned problem with builtin Lean syntax, but that is because the syntax is builitin and extra work has to be done to add the proper go-to location to the syntax (which was often not done -- its has gotten better with new release, though, in some cases).</p>",
        "id": 291443423,
        "sender_full_name": "Mac",
        "timestamp": 1659204711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291442014\">said</a>:</p>\n<blockquote>\n<p>Are you talking about just Gallina here or also Vernacular + Ltac(/2)? I could imagine that a decent subset of Gallina could be directly translated into Lean (leaving out stuff like coinduction)</p>\n</blockquote>\n<p>I was talking about Gallina, not tactics. The later comment about source-to-source translation was about tactics. It is true that a decent subset of Gallina can be translated, but a decent subset is not good enough to make whole files typecheck because you have to worry about the entire library that lead to them being in the subset, and that's almost certainly not going to be the case</p>",
        "id": 291454645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659220716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291301028\">said</a>:</p>\n<blockquote>\n<ul>\n<li>lack of libraries: this is a problem for any starting language</li>\n</ul>\n</blockquote>\n<p>Indeed and it is a chicken and egg problem. One way to mitigate this would be to make it quite easy to reuse libraries/packages from other, more mature and widespread languages. For example, it would be great to be able to add a cargo dependency to a Lean/lake project.</p>\n<blockquote>\n<ul>\n<li>overselling verification: people already interested in verification are already using Lean, Coq, Agda, ... They are small in number and just need to be convinced to switch to Lean. In my opinion, Lean is wonderful language even if you are not interested in proofs.</li>\n</ul>\n</blockquote>\n<p>I know close to nothing about verification, but coming from the programming side, I see value in being able to program in Lean and iteratively prove more and more properties about it. It would be even better if this collaboration could span multiple people/teams (different expertises).</p>\n<blockquote>\n<ul>\n<li>custom syntax: I love the extensibility of Lean's syntax. However, I can see how every library creator will go nuts, define their own DSL, and using Lean will effectively requite learning dozens of poorly documented languages.</li>\n</ul>\n</blockquote>\n<p>Yes, I share the concern. However, if Lean can make sure that all the capabilities available to core language features (syntax highlighting, go-to-definitions, hovers, doc strings) are also available out of the box for custom DSLs, this could become a real differentiation. Maybe it is already so to a great extent?</p>\n<p>In fact, I find Racket's lead a good example on how Lean could fine tune features to make it a better 'language of languages'. My guess is that this is/was already in the devs mind since I even found (unused) <code>#lang</code> (a mechanism that Racket uses to better isolate and control the zoo of languages available) parsing code in one of the .cpp source files :-)</p>",
        "id": 291640219,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1659391887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291301028\">said</a>:</p>\n<blockquote>\n<ul>\n<li>overselling verification: people already interested in verification are already using Lean, Coq, Agda, ... They are small in number and just need to be convinced to switch to Lean. In my opinion, Lean is wonderful language even if you are not interested in proofs.</li>\n</ul>\n</blockquote>\n<p>As someone with a more software background, I like Lean because I can express invariants in my code, <em>especially</em> if I can't prove them yet.</p>\n<p>It's nice to never write a comment like <code>(* NOTE: Requires some complicated condition on the inputs to behave correctly *)</code> and instead to just write the condition as a hypothesis. Huge advantage IMO over other functional languages, even if you aren't interested in proofs.</p>\n<p>(I guess there are also lots of people that aren't even interested in correctness, let alone proofs, but I don't think that's the target audience anyways...)</p>",
        "id": 291647018,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1659396950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/FYI.3A.20Thoughts.20on.20a.20broader.20Julia.20.28Lean.3F.29.20usage/near/291443423\">said</a>:</p>\n<blockquote>\n<p>In my testing, all go-tos on Lake syntax take me to the Lake codebase ...</p>\n</blockquote>\n<p>It was most likely a learned helplessness from my experience with custom syntax elsewhere.</p>\n<p>I just want to mention that what I described was in no way a critique of Lake. It is more of an example what someone inexperienced might struggle with when dealing with custom syntax.</p>",
        "id": 291651078,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1659400283
    }
]