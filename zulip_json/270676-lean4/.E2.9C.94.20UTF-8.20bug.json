[
    {
        "content": "<p>Every programmers most favorite topic, strings!:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"↔ \"</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n</code></pre></div>\n<p>this returns a list with the arrow as well as a whitespace, the length is also reported as two, however if you use <code>find</code> to search for that whitespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"↔ \"</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">Char.isWhitespace</span>\n</code></pre></div>\n<p>you get back a 3.</p>\n<p>I originally found this while trying to turn string of the form whitespace + characters + whitespace into a triple of (whitespaces, chars, whitespaces) like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">splitWhitespaces</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">front</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">pushn</span> <span class=\"sc\">' '</span> <span class=\"o\">(</span><span class=\"n\">s.find</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">Char.isWhitespace</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.trimLeft</span>\n  <span class=\"k\">let</span> <span class=\"n\">back</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">pushn</span> <span class=\"sc\">' '</span> <span class=\"o\">(</span><span class=\"n\">s.length</span> <span class=\"bp\">-</span> <span class=\"n\">s.find</span> <span class=\"n\">Char.isWhitespace</span><span class=\"o\">)</span>\n  <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"n\">s.trimRight</span>\n  <span class=\"o\">(</span><span class=\"n\">front</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">back</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">splitWhitespaces</span> <span class=\"s2\">\" ↔ \"</span>\n</code></pre></div>\n<p>where the fact that <code>find</code> returns something greater than <code>length</code> fucks up the calculation of back of course. This also only seems to happen if the middle character is a special UTF-8 one, with stuff such as <code>=</code> it works correctly.</p>",
        "id": 266057718,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640435769
    },
    {
        "content": "<p><code>String.find</code> returns <code>String.Pos</code>, which is documented as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A byte position in a `String`. Internally, `String`s are UTF-8 encoded.</span>\n<span class=\"sd\">Codepoint positions (counting the Unicode codepoints rather than bytes)</span>\n<span class=\"sd\">are represented by plain `Nat`s instead.</span>\n<span class=\"sd\">Indexing a `String` by a byte position is constant-time, while codepoint</span>\n<span class=\"sd\">positions need to be translated internally to byte positions in linear-time. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>You can convert from UTF-8 offset to codepoint offset via <code>String.offsetOfPos</code>.</p>",
        "id": 266057976,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640436280
    },
    {
        "content": "<p>That did indeed work out \\o/</p>",
        "id": 266058033,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640436381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 266058035,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640436386
    }
]