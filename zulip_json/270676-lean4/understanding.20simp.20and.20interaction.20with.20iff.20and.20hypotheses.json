[
    {
        "content": "<p>Consider the following example, <code>pbind_eq_some_iff</code>, which is a mwe of <code>pbind_eq_some</code>, in porting in <code>Mathlib.Data.Option.Basic</code> for mathlib4.  Some questions: why is the only working proof here the one that is <code>simp only ... &lt;;&gt; intro h &lt;;&gt; simp at h</code>? Why does just <code>simp</code> not work? Does one need the new <code>simp_intros</code>? Why does the <code>simp at *</code> version not work? That issue is regardless of whether the intro-d hypothesis named or not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mem_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">pbind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pbind_eq_some_imp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.pbind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- why does this not work when the `imp` version does?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pbind_eq_some_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.pbind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"c1\">-- doesn't work all the way</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pbind_eq_some_iff'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.pbind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pbind</span><span class=\"o\">,</span> <span class=\"n\">false_iff</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- why does this not work when the previous `intro h, simp at h` did?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pbind_eq_some_iff''</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.pbind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pbind</span><span class=\"o\">,</span> <span class=\"n\">false_iff</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"c1\">-- also red line is here and not at `simp at *`</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- doesn't work</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Option</span>\n</code></pre></div>",
        "id": 305718573,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666565170
    },
    {
        "content": "<p>In Lean 3 there was something like <code>simp {something:=tt}</code> which would do the intros for you</p>",
        "id": 305750901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666590473
    },
    {
        "content": "<p>you mean <code>simp {contextual := tt}</code>?</p>",
        "id": 305752593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591814
    },
    {
        "content": "<p>that's spelled <code>simp (config := {contextual := true})</code> now</p>",
        "id": 305752605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591830
    },
    {
        "content": "<p>I never really understood whether that was <code>simp_intros</code> or whether it just happened to do what <code>simp_intros</code> did</p>",
        "id": 305752683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666591906
    },
    {
        "content": "<p>Oh, simp_intros is something else</p>",
        "id": 305752692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591918
    },
    {
        "content": "<p>maybe that's what you want here, I didn't read closely</p>",
        "id": 305752735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591928
    },
    {
        "content": "<p><code>simp {contextual := tt}</code> will make use of hypotheses that enter the context when it \"rewrites under binders\"</p>",
        "id": 305752778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591962
    },
    {
        "content": "<p>so for example <code>\\forall (h : a = b), a + a = 1</code> will simp to <code>\\forall (h : a = b), b + b = 1</code></p>",
        "id": 305752828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666591999
    }
]