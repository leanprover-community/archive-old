[
    {
        "content": "<p>Assume I have a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.TacticInfo#doc\">docs4#Lean.Elab.TacticInfo</a> object <code>info</code> and I get some Syntax object derived from part of <code>info.stx</code>. Can I elaborate this to an <code>Expr</code>?</p>",
        "id": 321863574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673970844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you know about the above question? Is there a magic monad lifting or hidden state to save me or should a I somehow recreate a <code>TermElabM</code> context by hand?</p>",
        "id": 321885597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673976599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what are you trying to do using this? The syntax for a <code>TacticInfo</code> is generally going to be a tactic which you could evaluate with <code>evalTactic</code>. But you should generally not have to do this.</p>",
        "id": 321889534,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673977766
    },
    {
        "content": "<p><code>evalTactic</code> is even worse than <code>elabTerm</code> from this point of view since it needs to be in the <code>TacticM</code> monad, right?</p>",
        "id": 321890621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978063
    },
    {
        "content": "<p>The context is trying to translate a tactic proof into natural language.</p>",
        "id": 321890706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978093
    },
    {
        "content": "<p>So there's a syntactic term embedded in <code>info.stx</code> and you want to (re-)elaborate it?</p>",
        "id": 321890878,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673978147
    },
    {
        "content": "<p>What <code>Expr</code> do you expect to get out of this? The code of the tactic metaprogram being run? The target / goal type? Something else?</p>",
        "id": 321890995,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673978174
    },
    {
        "content": "<p>Yes. It would be even better to access the result of the prior elaboration but I guess this isn't recorded anywhere.</p>",
        "id": 321891075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978200
    },
    {
        "content": "<p>It should be, there should be a <code>TermInfo</code> node nested in the tactic node</p>",
        "id": 321891196,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673978237
    },
    {
        "content": "<p>Are we talking about a set of specific tactics?</p>",
        "id": 321891294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673978268
    },
    {
        "content": "<p>For instance if you have in you proof <code>apply my_quantified_assumption my_object</code> then I want the expression corresponding to <code>my_quantified_assumption my_object</code>.</p>",
        "id": 321891633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/elaborating.20from.20InfoTree/near/321891196\">said</a>:</p>\n<blockquote>\n<p>It should be, there should be a <code>TermInfo</code> node nested in the tactic node</p>\n</blockquote>\n<p>Oh indeed!</p>",
        "id": 321891954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978413
    },
    {
        "content": "<p>I didn't open enough nested stuff!</p>",
        "id": 321891998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978425
    },
    {
        "content": "<p>So this was a stupid question, I'm sorry.</p>",
        "id": 321892091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978449
    },
    {
        "content": "<p>That's the advantage of using Emacs, I don't have tree nodes I can open to begin with</p>",
        "id": 321892318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673978505
    },
    {
        "content": "<p><code>trace.Elab.info</code> is not currently collapsible however! It shows the whole thing at once.</p>",
        "id": 321893245,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673978736
    },
    {
        "content": "<p>Actually I don't know how to get a nice tree in VSCode. We have code dumping xml that I then open in Firefox.</p>",
        "id": 321893439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978784
    },
    {
        "content": "<p>Can you display collapsible InfoTrees in VSCode?</p>",
        "id": 321893491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673978807
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/issues/1678\">https://github.com/leanprover/lean4/issues/1678</a>  The built-in visualization options aren't great yet.</p>",
        "id": 321893624,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673978849
    },
    {
        "content": "<p>Thanks Wojciech and Sebastian anyway. I should be unstuck now.</p>",
        "id": 321894248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673979062
    }
]