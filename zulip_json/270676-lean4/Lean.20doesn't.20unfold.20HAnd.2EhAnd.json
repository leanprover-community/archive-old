[
    {
        "content": "<p>The <code>rfl</code> in the second line in the following code produces an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0x10</span> <span class=\"bp\">*</span> <span class=\"mi\">0x10</span> <span class=\"bp\">=</span> <span class=\"mi\">0x100</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0x10</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0x10</span> <span class=\"bp\">=</span> <span class=\"mi\">0x10</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>What is the difference between these operators?<br>\nI note that the second is a definitional equality as the following compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0x10</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0x10</span> <span class=\"bp\">=</span> <span class=\"mi\">0x10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">pattern</span> <span class=\"n\">HAnd.hAnd</span><span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"n\">Nat.land</span>\n</code></pre></div>",
        "id": 320138427,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673229338
    },
    {
        "content": "<p>This is because <code>Nat.bitwise</code> used by the definition of <code>Nat.land</code> is using a well-founded recursion. My understanding is that reduction of a well-founded recursion is possibly non-terminating and thus isn't applied blindly.<br>\nI also want to know what is the best way to deal with such functions.</p>",
        "id": 320154497,
        "sender_full_name": "pcpthm",
        "timestamp": 1673244669
    },
    {
        "content": "<p>That sounds right. I tried providing a hand-made instance and verified the following compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">land'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">Nat.le.refl</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"bp\">$</span> <span class=\"k\">calc</span>\n        <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.add_div_right</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"n\">_</span>       <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"n\">_</span>       <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AndOp</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">land'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0x10</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0x10</span> <span class=\"bp\">=</span> <span class=\"mi\">0x10</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 320165090,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673250863
    },
    {
        "content": "<blockquote>\n<p>reduction of a well-founded recursion is possibly non-terminating</p>\n</blockquote>\n<p>I was surprised that the following takes 4-5 seconds to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0xFF</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0xFF</span> <span class=\"bp\">=</span> <span class=\"mi\">0xFF</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">whnf</span>\n</code></pre></div>",
        "id": 320165970,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673251263
    },
    {
        "content": "<p>IMHO, <code>Nat.bitwise</code> should be written without well-founded recursion.</p>",
        "id": 320166670,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673251568
    },
    {
        "content": "<p>If you are using mathlib4, there is a version called bitwise' whose definition is lean3 style. Perhaps that helps?</p>",
        "id": 320181599,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1673257160
    },
    {
        "content": "<p>There are corresponding land', lor', etc.</p>",
        "id": 320181853,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1673257220
    },
    {
        "content": "<p>I checked the source of <code>Mathlib4/Init/Data/Nat/Bitwise.lean</code> in mathlib4. It looks depending on <code>binaryRec</code> which uses well-founded recursion, right?</p>",
        "id": 320194009,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673260942
    },
    {
        "content": "<p>True. Normally when using bitwise,  <code>unfold</code> followed by cases  works</p>",
        "id": 320202636,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1673263818
    },
    {
        "content": "<p>Are there any technique to handle such functions with elaborator/tactic? For example, it is boring and actually hard to prove things like <code>0xFEEDFFFFFFFF &amp;&amp;&amp; 0xFFFFDEADFFFF &amp;&amp;&amp; 0xFFFFFFFFBEEF = 0xFEEDDEADBEEF</code> by unfolding definitions by hand.  With the current implementation of <code>Nat.land</code>, it is, I think, hard also for Lean compiler since it takes a lot of time and memories.</p>",
        "id": 320369423,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673319151
    },
    {
        "content": "<p>This is a job for <code>norm_num</code></p>",
        "id": 320370886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673320470
    },
    {
        "content": "<p>it's not a high priority though :(</p>",
        "id": 320370945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673320536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433695\">Jun Yoshida</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20unfold.20HAnd.2EhAnd/near/320166670\">said</a>:</p>\n<blockquote>\n<p>IMHO, <code>Nat.bitwise</code> should be written without well-founded recursion.</p>\n</blockquote>\n<p>(I think doing it structurally would be waaaay slower, since IIRC the kernel has special handling for div/mod on nats?)</p>",
        "id": 320370958,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673320558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20unfold.20HAnd.2EhAnd/near/320370886\">said</a>:</p>\n<blockquote>\n<p>This is a job for <code>norm_num</code></p>\n</blockquote>\n<p>Cool! It enables \"proof by (tedious) computation\" that I sometimes see in papers. Thank you for letting me know. Yet, I have to tell the plugin how to handle with bit operators...</p>",
        "id": 320373459,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673323049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20unfold.20HAnd.2EhAnd/near/320370958\">said</a>:</p>\n<blockquote>\n<p>(I think doing it structurally would be waaaay slower, since IIRC the kernel has special handling for div/mod on nats?)</p>\n</blockquote>\n<p><code>Nat.land</code>, <code>Nat.lor</code>, ... are anyway implemented by C codes, so I think they can be more \"proof-oriented\" in Lean codes.</p>",
        "id": 320373706,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673323286
    },
    {
        "content": "<p>I found that Lean server (in VS code REPL) crashes with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0xFEEDFFFFFFFF</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0xFFFFDEADFFFF</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">0xFFFFFFFFBEEF</span> <span class=\"bp\">=</span> <span class=\"mi\">0xFEEDDEADBEEF</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 320374035,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673323565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433695\">Jun Yoshida</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20unfold.20HAnd.2EhAnd/near/320373706\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20unfold.20HAnd.2EhAnd/near/320370958\">said</a>:</p>\n<blockquote>\n<p>(I think doing it structurally would be waaaay slower, since IIRC the kernel has special handling for div/mod on nats?)</p>\n</blockquote>\n<p><code>Nat.land</code>, <code>Nat.lor</code>, ... are anyway implemented by C codes, so I think they can be more \"proof-oriented\" in Lean codes.</p>\n</blockquote>\n<p>Not exactly. The C code for <code>Nat.land</code> et al is only used by the compiler, not the kernel, so if you are trying to use it in a proof by <code>rfl</code> or <code>by decide</code> you still have to care about the performance of the lean model of the operation.</p>",
        "id": 320376280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673326058
    },
    {
        "content": "<p>Only <code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>&lt;</code> on <code>Nat</code> are overridden in the kernel as well as the compiler</p>",
        "id": 320376330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673326096
    },
    {
        "content": "<p>Ah, that is right. I am sorry for my imprecise statement. I am not sure that well-founded recursion is faster than stractural recursion from kernel point of view. In my experience, wf seems slower.</p>",
        "id": 320377062,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673326850
    },
    {
        "content": "<p>It is more complex. More importantly, it often simply <em>doesn't reduce</em> due to hitting a <code>theorem</code>, which is treated the same as <code>opaque</code> and will block reduction to a constructor. Reducing proofs by well founded recursion requires reducing the proof of well foundedness, so this usually gets stuck</p>",
        "id": 320378120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673327769
    },
    {
        "content": "<p>And with those large nats I would imagine that doing 2^48 reduction steps would not be performant in the kernel, compared to doing 48 steps + reducing the well-foundedness proof</p>",
        "id": 320383109,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673331756
    },
    {
        "content": "<p>You can implement it as doing 48 steps without reducing any well-foundedness proof by doing structural induction on a fuel variable. Even if the initial value of the fuel variable is 2^48 or so it won't step any more than necessary because the kernel works from the outside in using whnf to evaluate stuff so if 48 steps of recursion suffices then it won't work out the rest</p>",
        "id": 320386476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673333942
    },
    {
        "content": "<p>which looks like what <span class=\"user-mention silent\" data-user-id=\"433695\">Jun Yoshida</span> 's <code>land'</code> function is doing</p>",
        "id": 320386617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673334014
    },
    {
        "content": "<p>Ahh I see, sorry for misunderstanding</p>",
        "id": 320388449,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673335009
    },
    {
        "content": "<p>Thank you for elaborating my example. Yes, every well-founded recursion w.r.t. <code>Nat.lt</code> can be transformed into a structural recursion in the same idea. But, writing examples, I realized that the resulting functions become complicated and far from the straightforward implementation. I now agree that definitions should be kept concise. Reduction is not always the best way to prove equations.</p>",
        "id": 320448225,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673356744
    },
    {
        "content": "<p>So, what should I do is probably to write the proof of <code>hAnd_eq_land' : ∀ (x y : Nat), x &amp;&amp;&amp; y = land' x y</code> and to do something like <code>rw [hAnd_eq_land']; cong =&gt; lhs; whnf</code>.</p>",
        "id": 320448637,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673356855
    },
    {
        "content": "<p>Thank you for comments and advice.</p>",
        "id": 320448836,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1673356912
    },
    {
        "content": "<p>I think another way to spell <code>congr =&gt; lhs; whnf</code> is <code>rfl</code></p>",
        "id": 320504027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673371633
    }
]