[
    {
        "content": "<p>I'm a bit over my skis working on basic lemmas for <code>Rat</code>. In Lean 3 <code>mathlib</code>, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/rat/defs.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/rat/defs.lean</a> most of the really basic lemmas are defined in terms of <code>num_denom_cases_on'</code>, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">num_denom_cases_on'</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_mk</span> <span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">zero_mk</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and <code>num_denom_cases_on'</code> is defined in terms of <code>num_denom</code>, which relies on some definitional and implementation behavior that's different in Lean 4 (e.g., there's no <code>pnat</code>) and in terms of operators I don't understand (e.g. what's '/.'?)</p>\n<p>In general <code>rat</code> and <code>Rat</code> are heavily pre-optimized, and <code>add</code> is inherently pretty complicated.</p>\n<p>Some hints on the best Lean 4 equivalent for <code>num_denom_cases_on'</code> for the Lean 4 version of <code>Rat</code> would be greatly welcome.</p>",
        "id": 307014127,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667169023
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat#doc\">docs4#Rat</a> does this work?</p>",
        "id": 307014317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667169193
    },
    {
        "content": "<p>So it looks like all the data has been defined (addition, subtraction etc) but none of the proofs?</p>",
        "id": 307014409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667169254
    },
    {
        "content": "<p>Why not just sorry the proofs and make the <code>ring</code> instance?</p>",
        "id": 307014727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667169560
    },
    {
        "content": "<p>That would advance my project for sure but create a poor PR. If I had pointers to the hard bits I’d be happy to do the grunt work for a PR.</p>",
        "id": 307015801,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667170569
    },
    {
        "content": "<p>I think we have transitioned to the point in mathlib4 where PRs should either be</p>\n<ol>\n<li>ports of entire files from mathlib3, faithfully preserving all their content and organisation</li>\n<li>ad-hoc ports of material <em>only</em> if it is supporting tactic implementation.</li>\n</ol>",
        "id": 307016274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667170965
    },
    {
        "content": "<p>So the ideal way to work on <code>data/rat/defs.lean</code> is first to run</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>cd src\nleanproject import-graph --to data.rat.defs --exclude-tactics --port-status --reduce data.rat.defs.pdf\n</code></pre></div>\n<p>inside the mathlib repository.</p>",
        "id": 307016394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667171074
    },
    {
        "content": "<p>This produces <a href=\"/user_uploads/3121/TcC4kTW3IWeyeThxgvOCmTgR/data.rat.defs.pdf\">data.rat.defs.pdf</a></p>",
        "id": 307016451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667171144
    },
    {
        "content": "<p>What’s confusing is that this has moved to Std4 &amp; the implementation details are just different enough that it’s not a mechanical port….</p>",
        "id": 307016692,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667171368
    },
    {
        "content": "<p>Oh dear, I hadn't realised <code>Rat</code> was in <code>Std</code> already!</p>",
        "id": 307016966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667171670
    },
    {
        "content": "<p>Maybe the right choice is actually to backport this definition to mathlib3, so we can resume the \"mechanical port\".</p>",
        "id": 307016989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667171711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/Hints.20for.20foundations.20for.20lemmas.20on.20Rat/near/307014127\">said</a>:</p>\n<blockquote>\n<p>in terms of operators I don't understand (e.g. what's '/.'?)</p>\n</blockquote>\n<p>Realized that this is <code>localized \"infix (name := rat.mk) </code> /. <code>:70 := rat.mk\" in rat</code> so I can just use <code>Rat.mk</code>.</p>",
        "id": 307022947,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667178205
    },
    {
        "content": "<p>I'm sorta making progress here, but I'm confused.</p>\n<p>Given that <code>/.</code> means <code>rat.mk</code> and <code>rat.mk</code> is sorta 'mkRat' in Lean 4 <code>Std4</code> (sorta because <code>mathlib</code> <code>rat</code> is defined in terms of <code>int</code> and <code>pnat</code>, where as <code>Rat</code> is <code>Int</code> and <code>Nat</code> &amp; <code>rat.mk</code> is <code>int -&gt; int -&gt; rat</code> whereas <code>mkRat</code> is <code>Int -&gt; Nat -&gt; Rat</code>, I decided to try to rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">num_denom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">a.num</span> <span class=\"bp\">/.</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">mk_nat</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk_nat</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mk_pnat</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">num_den</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">},</span> <span class=\"n\">mkRat</span> <span class=\"n\">a.num</span> <span class=\"n\">a.den</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mkRat</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mkRat</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but the <code>net_of_gt</code> simplification isn't working, and it's confusing to me why it should work in <code>mathlib</code></p>\n<p>It's spelled</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"bp\">▸</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in <code>mathlib</code></p>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_of_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_irrefl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In Lean 4</p>\n<p>Since the type of <code>h</code> is … OH(!) the types in <code>mathlib</code> and Lean 4 differ.</p>\n<p>In <code>mathlib</code> the corresponding type is <code>0 &lt; denom</code> and in Lean 4 it's <code>den ≠ 0</code> so back to the mines.</p>",
        "id": 307031864,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667187839
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">num_den</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">},</span> <span class=\"n\">mkRat</span> <span class=\"n\">a.num</span> <span class=\"n\">a.den</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mkRat</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">maybeNormalize</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>closes the goal</p>\n<p>Progress.</p>",
        "id": 307032208,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667188193
    },
    {
        "content": "<p>I also now think I understand what that <code>simp</code> step is doing -- it's leading <code>Lean</code> down the path of understanding that <code>mkRat</code> is already pre-normalized by hypothesis.</p>",
        "id": 307032555,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667188625
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat\">docs#rat</a></p>",
        "id": 307036805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667192600
    },
    {
        "content": "<p>You've made the assertion more than once that in loan 3 <code>rat</code> is defined using <code>pnat</code> but I don't think it's true.</p>",
        "id": 307036871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667192675
    },
    {
        "content": "<p><code>rat</code> itself doesn't use <code>pnat</code>, but <code>rat.mk</code> uses <code>rat.mk_pnat</code></p>",
        "id": 307037522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667193189
    },
    {
        "content": "<p>Right -- the builtin constructor for rat is not <code>rat.mk</code>, it's <code>rat.mk'</code></p>",
        "id": 307037610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667193278
    },
    {
        "content": "<p>ah yeah, maybe we should do that too, so we can use <code>Rat.mk</code> for the smart constructor</p>",
        "id": 307037666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667193341
    },
    {
        "content": "<p>The current lean 4 file is based not on the original <code>data.rat.basic</code> but on lean 4's <code>Lean.Rat</code>, which has slightly more efficient operations. We should try to make it align with mathlib better where it's reasonable to do so</p>",
        "id": 307037775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667193432
    },
    {
        "content": "<p>We also have another tool for replacements, <code>@[csimp]</code> lemmas, which allow us to use a naive and simple-to-reason-about definition as the official definition and sequester the messy and efficient definition to an auxiliary. I don't usually bother though unless we care about the defeqs</p>",
        "id": 307038007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667193599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Hints.20for.20foundations.20for.20lemmas.20on.20Rat/near/307036871\">said</a>:</p>\n<blockquote>\n<p>You've made the assertion more than once that in loan 3 <code>rat</code> is defined using <code>pnat</code> but I don't think it's true.</p>\n</blockquote>\n<p>Sorry, you are correct - as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> notes, the path to construction goes through <code>pnat</code> but the <code>rat</code> itself is in terms of <code>nat</code> plus the assertion <code>pos : 0 &lt; denom</code></p>",
        "id": 307132129,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667229262
    },
    {
        "content": "<p>Should the Lean 4 equivalent of <code>/.</code> for <code>Rat</code> be an <code>HDiv</code>?</p>",
        "id": 307142954,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667232319
    },
    {
        "content": "<p>And…, how does one spell <code>@[elab_as_eliminator]</code> in Lean 4?</p>",
        "id": 307144416,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667232738
    },
    {
        "content": "<p><code>@[elabAsElim]</code></p>",
        "id": 307146724,
        "sender_full_name": "David Renshaw",
        "timestamp": 1667233435
    },
    {
        "content": "<p><code>@[elab_as_elim]</code> for recent nightlies -- the naming convention for attributes has reverted to snake_case.</p>",
        "id": 307152166,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667234770
    },
    {
        "content": "<p>The update in this adventure is that things are going mostly well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.num</span> <span class=\"bp\">=</span> <span class=\"n\">q.num</span> <span class=\"bp\">∧</span> <span class=\"n\">p.den</span> <span class=\"bp\">=</span> <span class=\"n\">q.den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">p.num</span> <span class=\"bp\">=</span> <span class=\"n\">q.num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p.den</span> <span class=\"bp\">=</span> <span class=\"n\">q.den</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.ext_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">num_den</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">},</span> <span class=\"n\">mkRat</span> <span class=\"n\">a.num</span> <span class=\"n\">a.den</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mkRat</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">maybeNormalize</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">num_den'</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mkRat</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">num_den.symm</span>\n\n<span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : Rat, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `mkRat n d` with `d ≠ 0` and coprime `n`, `d`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span> <span class=\"kd\">def</span> <span class=\"n\">num_denom_cases_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n.natAbs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">n</span>  <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n\n <span class=\"sd\">/-- Define a (dependent) function or prove `∀ r : Rat, p r` by dealing with rational</span>\n<span class=\"sd\">numbers of the form `n /. d` with `d ≠ 0`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span> <span class=\"kd\">def</span> <span class=\"n\">num_denom_cases_on'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">num_denom_cases_on</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But things that should be easy like the analogue of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">/.</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mk</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>end up being terrifying.</p>",
        "id": 307220891,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667258548
    },
    {
        "content": "<p>I'm close, I think.</p>\n<p>After</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_zero</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span> <span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">maybeNormalize</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs</span><span class=\"o\">,</span> <span class=\"n\">Nat.gcd_zero_left</span><span class=\"o\">,</span> <span class=\"n\">Int.zero_div</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm down to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>which, since I already handled the zero case in the first <code>cases</code> branch, and since <code>Nat.succ n</code> is always &gt; 0, should resolve down to <code>mk 0 1=0</code> which should close by <code>rfl</code> but I'm stuck in how to tell Lean that.</p>",
        "id": 307246289,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667278027
    },
    {
        "content": "<p>Assuming there's not yet a <code>splitIfs</code> tactic in lean 4, you want to do cases on n=0 and use <code>if_pos</code> and <code>if_neg</code> or whatever they're called in lean 4</p>",
        "id": 307256501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667285811
    },
    {
        "content": "<p><a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/307019140\">There might be <code>split_ifs</code></a></p>",
        "id": 307256866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667286010
    },
    {
        "content": "<p>Yes, <code>split_ifs</code> landed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/508\">mathlib4#508</a>.</p>",
        "id": 307259000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667287339
    },
    {
        "content": "<p>Is <code>split_ifs</code> mostly intended for porting and otherwise should be covered by core <code>split</code> (which also handles <code>match</code>) in most cases? It would be great if such overlaps would be discussed in the doc strings.</p>",
        "id": 307293688,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667303056
    },
    {
        "content": "<p>It is briefly mentioned in the doc-string at <a href=\"https://github.com/leanprover-community/mathlib4/pull/508/files#diff-42751ffdb8743d3ea4b619276a2600ccc8dd8476d972087dfcddb3bbfe52dc58R77\">https://github.com/leanprover-community/mathlib4/pull/508/files#diff-42751ffdb8743d3ea4b619276a2600ccc8dd8476d972087dfcddb3bbfe52dc58R77</a>.</p>\n<p>Perhaps it would be worthwhile to go through the test file, and annotate the use cases for which the core <code>split</code> suffices.</p>",
        "id": 307309145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667308866
    },
    {
        "content": "<p>Now I see that I should have taken care of this case earlier.</p>\n<p>That branch descends from<br>\n<code>Nat.gcd (Int.natAbs 0) (Nat.succ n)=1</code> so it suffices to prove <code>∀ n, Nat.gcd (Int.natAbs 0) (Nat.succ n) ≠ 1</code></p>",
        "id": 307327947,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667313733
    },
    {
        "content": "<p>Oh, but that's not true.</p>",
        "id": 307332814,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667314977
    },
    {
        "content": "<p>It is, however, only true in the exact case where the theorem is true.</p>",
        "id": 307332979,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667315034
    },
    {
        "content": "<p>You generally don't want to unfold multiple definitions in a single theorem, so this should be broken into multiple theorems. I came up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Rat</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Int.ofNat_zero</span> <span class=\"n\">Int.ofNat_one</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">maybeNormalize_eq</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"n\">den</span> <span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">den_nz</span> <span class=\"n\">reduced</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">maybeNormalize</span> <span class=\"n\">num</span> <span class=\"n\">den</span> <span class=\"n\">g</span> <span class=\"n\">den_nz</span> <span class=\"n\">reduced</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">den</span> <span class=\"o\">:=</span> <span class=\"n\">den</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">den_nz</span><span class=\"o\">,</span> <span class=\"n\">reduced</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">maybeNormalize</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">normalize_zero</span> <span class=\"o\">(</span><span class=\"n\">nz</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normalize</span> <span class=\"mi\">0</span> <span class=\"n\">d</span> <span class=\"n\">nz</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">Int.zero_div</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">nz</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_zero</span> <span class=\"o\">:</span> <span class=\"n\">mkRat</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">mkRat</span><span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 307358722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667322107
    },
    {
        "content": "<p>I love this!</p>",
        "id": 307362919,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667323271
    },
    {
        "content": "<p>So update:</p>\n<p>1) I hope my adventures here are useful -- aspirationally, I'd like to post a PR, but this may be beyond my capabilities at current levels of learning; less aspirationally, I'm hopeful that my struggles here in the differences between Lean 4 <code>Std4</code> and <code>mathlib</code> are helpful for the eventual refactor and reconciliation -- if this is all distracting, I'm happy to self-mute<br>\n 2) I realize now most of the heavy lifting in the core lemmas in <code>mathlib</code> is done in theorems like <code>add_def</code> that prove the behavior and invariants of the core operations and those go through <code>lift_binop_eq</code>which has a particularly hairy signature...<br>\n3) The signature of <code>rat</code> is in terms of <code>int</code>/<code>nat</code> with appropriate constraints on nonzero denominator, but the constructor goes <code>mk_pnat</code> and most of the <code>/.</code> heavy lifting is through <code>rat.mk</code> that is <code>int -&gt; int -&gt; rat</code>, and addressing that variation to Lean 4 makes signature modification for <code>lift_binop_eq</code> particularly hairy (that theorem assumes everything is <code>int</code>)</p>\n<p>I <em>think</em> the pathway here is to recreate the <code>mathlib</code> equivalent for an <code>Int -&gt; Int -&gt; Rat</code> constructor,  &amp; try to port <code>lift_binop_eq</code> but happy to take any feedback....</p>",
        "id": 307598228,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667415530
    },
    {
        "content": "<p>(FWIW, I think that core <code>Std4.Rat</code> should have the helper APIs and invariant lemmata on the core operations, and with that in place, proving the various algebraic lemmata  in, say <code>Std4.Rat.Basic</code> would be pretty trivial.)</p>",
        "id": 307600440,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667416302
    }
]