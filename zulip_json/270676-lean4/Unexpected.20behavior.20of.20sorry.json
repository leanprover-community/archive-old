[
    {
        "content": "<p>I got really badly tripped over by the fact that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>does not behave the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In particular, I find surprising that this proofs passes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">done</span>  <span class=\"c1\">-- rfl succeeds</span>\n</code></pre></div>\n<p>and this fails as expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">done</span>  <span class=\"c1\">-- rfl fails</span>\n</code></pre></div>\n<p>Is this expected behavior?</p>",
        "id": 297242127,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662390876
    },
    {
        "content": "<p>It is certainly well known and there are regular threads about this here on Zulip.</p>",
        "id": 297242492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662391047
    },
    {
        "content": "<p>I guess it boils down to if we want this work or not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 297242508,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662391056
    },
    {
        "content": "<p>I see, it is not known to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> and I didn't stumble on such a thread yet.</p>",
        "id": 297242625,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662391096
    },
    {
        "content": "<p>Making <code>isDefEq</code> nonreflexive sounds like a perfect recipe for disaster, even if it's restricted to the elaborator</p>",
        "id": 297242743,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662391157
    },
    {
        "content": "<p>We don't have to make <code>isDefEq</code> nonreflexive.  We'd only need to make the <code>sorry</code> elaborator nondeterministic (i.e., returns a different expression every time).</p>",
        "id": 297242792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662391186
    },
    {
        "content": "<p>Yes return different expression every time and also capture local variables. </p>\n<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>would expand to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">F.sorry</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">F.sorry</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 297243258,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662391417
    },
    {
        "content": "<p>There could be quite a few local variables! But it's an interesting suggestion.</p>",
        "id": 297243543,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662391508
    },
    {
        "content": "<p>It might not be so bad as the variable capture is not necessary for propositional sorry.</p>",
        "id": 297245590,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662392338
    },
    {
        "content": "<p>The moral I've always taken from this story is \"don't ever sorry definitions and then start writing proofs about them, because the proofs might break later\"</p>",
        "id": 297263858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662401991
    },
    {
        "content": "<p>That is exactly what I have learned the hard way <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 297264618,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662402421
    }
]