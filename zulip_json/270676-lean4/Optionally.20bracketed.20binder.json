[
    {
        "content": "<p>A basic macro question that came up in the new members stream, I'll ask a more appropriate question here. I tried to define a macro for <code>assume</code> from Lean3. I came up with this, which works, but requires brackets in <code>assume (h : p) h</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"assume\"</span> <span class=\"n\">var</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"n\">exp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">exp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I make the brackets optional, like they are in <code>fun</code>?</p>",
        "id": 262932025,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638110109
    },
    {
        "content": "<p>The example might be problematic since it is not clear how to separate <code>p</code> from <code>t</code> in <code>assume h : p t</code>, but suppose I wanted to defined something like <code>\\Pi</code> from Lean3 as an alias for <code>\\forall</code>, which takes a comma there, so that the separation is clear.</p>",
        "id": 262932353,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638110540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329243\">@Horatiu Cheval</span>  If you take a look at <a href=\"https://github.com/leanprover/lean4/blob/a9317760e7f2078eaded999794c58cf4a11d99c9/src/Lean/Parser/Term.lean#L147-L153\">the definition of <code>fun</code> in the Lean 4 source</a>, you can discover that it uses <code>funBinder</code> instead of <code>bracketedBinder</code> in its parser. Thus, you can do the same like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"assume \"</span> <span class=\"n\">var</span><span class=\"o\">:</span><span class=\"n\">funBinder</span> <span class=\"s2\">\", \"</span> <span class=\"n\">exp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">exp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262933957,
        "sender_full_name": "Mac",
        "timestamp": 1638112895
    },
    {
        "content": "<p>However, if you want your macro to more closely mirror standard syntax, you will probably want <code>assume</code> to accept multiple binders like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"assume\"</span> <span class=\"n\">vars</span><span class=\"o\">:</span><span class=\"n\">many1</span><span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">funBinder</span><span class=\"o\">)</span> <span class=\"s2\">\", \"</span> <span class=\"n\">exp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vars.getArgs</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">exp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- def foo : Nat → Nat → Nat := fun x y =&gt; 0</span>\n</code></pre></div>",
        "id": 262934199,
        "sender_full_name": "Mac",
        "timestamp": 1638113180
    },
    {
        "content": "<p>That's great, thank you! I noticed that file myself but I couldn't manage to find my way through it</p>",
        "id": 262939408,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638121083
    }
]