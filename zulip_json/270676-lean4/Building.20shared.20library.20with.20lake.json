[
    {
        "content": "<p>How do I properly build and use shared library with lake? I have set <code>defaultFacet := PackageFacet.sharedLib</code> this creates <code>Package.so</code>. </p>\n<p>I then try to load <code>Package.so</code> using <code>dlopen</code> in another program, but I'm getting <code>undefined symbol: l_Lean_instInhabitedExpr</code>. Clearly it does not load <code>libleanshared.so</code> properly where this symbol is. Is  <code>Package.so</code>  linked against  <code>libleanshared.so</code> by default or do I have to specify that?</p>\n<p>My <code>LD_LIBRARY_PATH</code> points to the directory where <code>libleanshared.so</code> is, so it should not be a problem that the program can't find it.</p>",
        "id": 268316514,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642454700
    },
    {
        "content": "<p>If <code>ldd Package.so</code> doesn't list <a href=\"http://libleanshared.so\">libleanshared.so</a>, you can try adding <code>-lleanshared</code> as a linker flag.</p>",
        "id": 268317220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642455379
    },
    {
        "content": "<p>Yes, adding </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-L~/.elan/toolchains/leanprover--lean4---nightly-2022-01-12/lib/lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-lleanshared\"</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>solved the problem.</p>",
        "id": 268317850,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642456071
    },
    {
        "content": "<p>Now I'm facing different error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">environment</span> <span class=\"n\">extension</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">ext'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">used</span>\n</code></pre></div>",
        "id": 268317935,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642456151
    },
    {
        "content": "<p>The problem seems to be that I'm loading and executing the shared library in a loop.</p>\n<p>On the first run the library gets loaded and executed correctly. However, on the second load, running:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize_Package</span><span class=\"o\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>fails. I'm probably not correctly cleaning up after the first run. How do I do that?</p>",
        "id": 268319101,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457109
    },
    {
        "content": "<p>Module initializers <em>should</em> be idempotent. But... why are you loading the same library in a loop?</p>",
        "id": 268319207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642457183
    },
    {
        "content": "<p>I want to use Lean as a scripting language in a different program. I should reload the library only when to code changes, but for now I reload it on every execution.</p>",
        "id": 268319308,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457286
    },
    {
        "content": "<p>Also I'm confused about <code>lean_initialize()</code> and <code>lean_initialize_runtime_module()</code> the first one does not work, the second one does.</p>",
        "id": 268319427,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457408
    },
    {
        "content": "<p>It sounds like you didn't unload <code>libleanshared.so</code></p>",
        "id": 268319677,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642457642
    },
    {
        "content": "<p>Ohh how do I do that?</p>",
        "id": 268319738,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457689
    },
    {
        "content": "<p>I'm not loading it manually.</p>",
        "id": 268319767,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457716
    },
    {
        "content": "<p>I should be calling <code>dlclose</code> ...</p>",
        "id": 268319839,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642457770
    },
    {
        "content": "<p>The problem might be that I'm writing a plugin <code>Plugin.so</code> to one program that loads <code>Package.so</code>. Both <code>Plugin.so</code> and <code>Package.so</code> needs <code>libleanshared.so</code> as the plugin calls initalization of lean, lean_io_mk_world, etc.</p>\n<p>Thus when I unload <code>Package.so</code> it does not unload  <code>libleanshared.so</code>  as it is still needed by <code>Plugin.so</code>.</p>",
        "id": 268322444,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642459953
    },
    {
        "content": "<p>Yes it was indeed the problem. Unfortunately, to create <code>Plugin.so</code> I can't link against lean static libraries because they are not compiled with <code>-fPIC</code>, so when I want to use any function from <code>lean.h</code> I have to dynamically load it.</p>",
        "id": 268323229,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642460544
    },
    {
        "content": "<p>Dynamically loaded <code>lean_dec_ref</code> causes crash, so I can't clean up any lean_object and my program leaks memory :/</p>",
        "id": 268326735,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642463898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20shared.20library.20with.20lake/near/268322444\">said</a>:</p>\n<blockquote>\n<p>The problem might be that I'm writing a plugin <code>Plugin.so</code> to one program that loads <code>Package.so</code>. Both <code>Plugin.so</code> and <code>Package.so</code> needs <code>libleanshared.so</code> as the plugin calls initalization of lean, lean_io_mk_world, etc.</p>\n<p>Thus when I unload <code>Package.so</code> it does not unload  <code>libleanshared.so</code>  as it is still needed by <code>Plugin.so</code>.</p>\n</blockquote>\n<p>Then I think you're stuck. There is no way to undo the mutable changes loading <a href=\"http://Package.so\">Package.so</a> did to the data in <a href=\"http://libleanshared.so\">libleanshared.so</a> if you cannot unload them both. You should never link the same library both dynamically and statically.</p>",
        "id": 268357868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642494755
    },
    {
        "content": "<p>But I still don't know where the error actually stems from. Do you initialize an environment extension in <a href=\"http://Package.so\">Package.so</a>?</p>",
        "id": 268358033,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642494858
    },
    {
        "content": "<p>What does \"initialize environment extension\" mean? Is it the call <code>initialize_Package</code>?</p>",
        "id": 268364282,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642498112
    },
    {
        "content": "<p>No, it would need to be a call to <code>register*EnvExtension</code>. I hope we don't actually have one named <code>ext</code> (and if we did, it shouldn't be loaded twice if it's part of <a href=\"http://libleanshared.so\">libleanshared.so</a>).</p>",
        "id": 268367677,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642499971
    },
    {
        "content": "<p>Note that mathlib4 has an <code>ext</code> extension.</p>",
        "id": 268367909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642500060
    },
    {
        "content": "<p>Ah yes, a different meaning of \"ext\" :) . <del>Disabling <code>builtin_initialize</code> via <a href=\"https://github.com/leanprover/lean4/pull/959\">https://github.com/leanprover/lean4/pull/959</a> might be of interest then.</del> I guess it's not a builtin then.</p>",
        "id": 268368148,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642500197
    },
    {
        "content": "<p>Then a better answer is that the attribute registration should only happen in a \"compile time\" phase while you are only interested in running the plugin in a \"run time\" phase. Some day I hope Lean will be able to express that...</p>",
        "id": 268368547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642500390
    },
    {
        "content": "<p>I have made a mock up of my situation, unfortunately I was unable to recreate the <code>invalid environment extension</code> error. But I still have problems with memory leaks:</p>\n<p><a href=\"https://github.com/lecopivo/leanPluginTest\">https://github.com/lecopivo/leanPluginTest</a></p>\n<p>Build and run instructions are in the readme.</p>\n<p>This example has a main application <code>main</code> that loads a plugin <code>plugin</code> and the plugin loads <code>package</code> made with Lean. The main function of the package is called over and over in an infinite loop.</p>\n<p>There are two versions, <code>main</code> and <code>main2</code></p>\n<ol>\n<li><code>main</code> is where <code>plugin</code> does not link <code>libleanshared</code> to avoid the problems I had. However, I have problems calling <code>lean_dec_ref</code> to clean up memory. Running <code>./main</code> causes segmentation fault after a moment.</li>\n<li><code>main2</code> is where <code>plugin2</code> links <code>libleanshared</code>. This should be the case where I had the problem with environment extension. However, I'm unable to reproduce it here,  as Gabriel pointed out it might be a problem with Mathlib(I will test that). This version does not cause segmentation fault but leaks memory.</li>\n</ol>",
        "id": 268371521,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642502090
    },
    {
        "content": "<p>And yes I'm using mathlib4 in my real code. The environment extension error might be connected to that.</p>",
        "id": 268372207,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642502446
    },
    {
        "content": "<p>A simple inclusion of mathlib4, <a href=\"https://github.com/lecopivo/leanPluginTest/tree/mathlib\">https://github.com/lecopivo/leanPluginTest/tree/mathlib</a> . I'm getting <code>../lib/Package.so: undefined symbol: initialize_Mathlib_Data_UInt</code> not sure what is going wrong. Definitely not reproducing the old error.</p>",
        "id": 268372901,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642502784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20shared.20library.20with.20lake/near/268372901\">said</a>:</p>\n<blockquote>\n<p>A simple inclusion of mathlib4, <a href=\"https://github.com/lecopivo/leanPluginTest/tree/mathlib\">https://github.com/lecopivo/leanPluginTest/tree/mathlib</a> . I'm getting <code>../lib/Package.so: undefined symbol: initialize_Mathlib_Data_UInt</code> not sure what is going wrong. Definitely not reproducing the old error.</p>\n</blockquote>\n<p>That sounds like a bug in Lake</p>",
        "id": 268376916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642505168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20shared.20library.20with.20lake/near/268371521\">said</a>:</p>\n<blockquote>\n<p>This version does not cause segmentation fault but leaks memory.</p>\n</blockquote>\n<p>Hmm yes, I probably should have thought of this sooner. Lean shared libraries are simply not made to ever be unloaded. Perhaps they could be, but right now they aren't.</p>",
        "id": 268377247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642505396
    },
    {
        "content": "<p>I would really love to use Lean as a scripting language in an another program. I can probably load each new version of a script as a different  library, not ideal but should work. Maybe I can use Lean's interpreter, but then I'm not sure how could I wrap the program's C++ API into Lean functions.</p>",
        "id": 268379332,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642506663
    },
    {
        "content": "<p>Ok I'm not sure what is going on but now I can reproduce the <code>invalid environment extension</code> error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"c1\">--branch mathlib https://github.com/lecopivo/leanPluginTest.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">leanPluginTest</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"kn\">export</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/lib/lean</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">;</span> <span class=\"n\">mkdir</span> <span class=\"n\">debug</span><span class=\"bp\">;</span> <span class=\"n\">cd</span> <span class=\"n\">debug</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">../..</span>\n<span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j</span>\n<span class=\"bp\">./</span><span class=\"n\">main2</span>\n</code></pre></div>\n<p>Running <code>./main</code> works fine until it seg faults.</p>",
        "id": 268380477,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642507436
    },
    {
        "content": "<p>And when you remove <code>import Mathlib</code> from <code>Package.lean</code> then <code>main2</code> works 'fine'(well it leaks memory)</p>",
        "id": 268380771,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642507566
    },
    {
        "content": "<p>Yes, if you load mathlib twice without unloading libleanshared, that is expected</p>",
        "id": 268380915,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642507662
    },
    {
        "content": "<p>How important is it to run <code>lean_io_mark_end_initialization</code>,  <code>lean_init_task_manager</code> or <code>lean_finalize_task_manager</code> I have no clue what any one of these is doing.</p>",
        "id": 268381767,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642508128
    },
    {
        "content": "<p>As I have to load every function from <code>lean.h</code> dynamically, the only way to get <code>lean_dec_ref</code> was to dynamically load <code>lean_dec_ref_cold</code> then then defined my <code>lean_dec_ref</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">auto</span> <span class=\"n\">lean_dec_ref</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"bp\">&amp;</span><span class=\"o\">](</span><span class=\"n\">lean_object</span> <span class=\"bp\">*</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">LEAN_LIKELY</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"bp\">-&gt;</span><span class=\"n\">m_rc</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">o</span><span class=\"bp\">-&gt;</span><span class=\"n\">m_rc</span><span class=\"c1\">--;</span>\n      <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"bp\">-&gt;</span><span class=\"n\">m_rc</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">lean_dec_ref_cold</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 268381949,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642508216
    },
    {
        "content": "<p>I have updated the repository with working <code>lean_dec_ref</code>, this way I have more or less reproduced main function that gets generated by lean. However running <code>main</code> still segfaults after a while, I have no clue what to do now to fix that.</p>",
        "id": 268383046,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642508830
    },
    {
        "content": "<p>And it segfaults after 1024 iterations what a coincidence :D</p>",
        "id": 268384518,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642509603
    }
]