[
    {
        "content": "<p>How do you define a term elaborator for a manually-defined parser (via e.g. <code>def myParser : Parser := ...</code>? With <code>syntax</code>, you can use <code>syntax (name := myNodeName) ...</code> and then write <code>@[termElab myNodeName]</code>â€”but I'm not sure how to attach a <code>SyntaxNodeKind</code> to what's consumed by a manually-defined parser. (I would have expected the <code>SyntaxNodeKind</code> to be <code>myParser</code>, but it doesn't seem to be created automatically.)</p>",
        "id": 307639663,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667435126
    },
    {
        "content": "<p>Usually the best approach is to use <code>elab_rules</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"my_syntax\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">elab_rules</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">my_syntax</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span>\n</code></pre></div>",
        "id": 307640368,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667435657
    },
    {
        "content": "<blockquote>\n<p>I would have expected the SyntaxNodeKind to be myParser, but it doesn't seem to be created automatically.</p>\n</blockquote>\n<p>Right, you need to create the node explicitly.  We usually do this with the <code>leading_parser</code> macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myParser</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This will add a node (with the parser declaration name as the syntax kind), and also a <code>$foo:myParser</code> antiquotation.</p>",
        "id": 307641738,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667436822
    },
    {
        "content": "<p>Hmmmâ€¦I am using <code>leading_parser</code>, but it still doesnâ€™t like <code>@[termElab myParser]</code>. <code>#check</code> shows that I do have access to the parser I defined, so itâ€™s not something sillyâ€¦Iâ€™ll investigate a bit! Should I expect that <code>elab</code> will recognize it as a valid <code>SyntaxNodeKind</code> while <code>@[termElab â€¦]</code> wonâ€™t?</p>",
        "id": 307642908,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667437856
    },
    {
        "content": "<p>Please post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>",
        "id": 307643691,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667438677
    },
    {
        "content": "<p>Ah! Thanks for asking me toâ€”I figured it out while trying to make the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. I hadn't marked the parser with the attribute <code>@[termParser]</code>, so <code>termElab</code> didn't know that this parser parsed terms! ðŸ™ƒ</p>",
        "id": 307645578,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667440331
    }
]