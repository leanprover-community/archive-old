[
    {
        "content": "<p>how do people use io in lean?<br>\nlets say i read a file. the type is <code>IO String</code>, so i cant pass that into a function that takes string. how can I come across that? also getting a random item of a list is super annoying</p>",
        "id": 274484777,
        "sender_full_name": "Joseph O",
        "timestamp": 1646703453
    },
    {
        "content": "<p>I think what you're experiencing is not exactly <code>IO</code> frustration, but monadic programming frustration.</p>\n<p>If you have <code>a : M α</code> where <code>M</code> is some monad, say <code>IO</code>, and you're inside a <code>do</code> block, then you can do <code>let a' : α ← a</code>.</p>",
        "id": 274485109,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646703743
    },
    {
        "content": "<p>hmm. I can try</p>",
        "id": 274485150,
        "sender_full_name": "Joseph O",
        "timestamp": 1646703792
    },
    {
        "content": "<p>Or if you have a function <code>f : α → τ</code> for some type <code>τ</code>, then you can do <code>let t : τ := f (← a)</code></p>",
        "id": 274485292,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646703923
    },
    {
        "content": "<p>but in this function, i have to return an io monad </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getRandomSentence'</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fconts</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">FS.readFile</span> <span class=\"n\">filename</span>\n  <span class=\"n\">fconts.split</span> <span class=\"o\">(</span><span class=\"bp\">·=</span><span class=\"sc\">'\\n'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274485535,
        "sender_full_name": "Joseph O",
        "timestamp": 1646704150
    },
    {
        "content": "<p>this gives an error</p>",
        "id": 274485544,
        "sender_full_name": "Joseph O",
        "timestamp": 1646704158
    },
    {
        "content": "<p>You need to be inside <code>IO</code> in order to call <code>readFile</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getRandomSentence'</span> <span class=\"o\">(</span><span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fconts</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">FS.readFile</span> <span class=\"n\">filename</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">fconts.split</span> <span class=\"o\">(</span><span class=\"bp\">·=</span><span class=\"sc\">'\\n'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, <code>split</code> returns a <code>List</code>, not an <code>Array</code></p>",
        "id": 274485794,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646704427
    },
    {
        "content": "<p>Ok, but I dont want to return an <code>IO (List String)</code></p>",
        "id": 274485872,
        "sender_full_name": "Joseph O",
        "timestamp": 1646704490
    },
    {
        "content": "<p>What type do you want?</p>",
        "id": 274486016,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646704647
    },
    {
        "content": "<p>Just <code>List String</code></p>",
        "id": 274486024,
        "sender_full_name": "Joseph O",
        "timestamp": 1646704659
    },
    {
        "content": "<p>Yeah, I'm getting flashbacks of my own frustrations from two months ago</p>",
        "id": 274486120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646704750
    },
    {
        "content": "<p><a href=\"https://www.cis.upenn.edu/~cis194/spring13/lectures/08-IO.html\">https://www.cis.upenn.edu/~cis194/spring13/lectures/08-IO.html</a></p>",
        "id": 274486134,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1646704772
    },
    {
        "content": "<p>That is not possible, as such a value would break basically everything</p>",
        "id": 274486139,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646704775
    },
    {
        "content": "<p>if a function needs to do IO, its return type will be wrapped in <code>IO</code></p>",
        "id": 274486198,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646704805
    },
    {
        "content": "<p>you can unwrap that with do-notation, but your other function will also have its type wrapped with <code>IO</code>, as it (transitively) needs to do IO</p>",
        "id": 274486318,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646704856
    },
    {
        "content": "<p>this is insane</p>",
        "id": 274487921,
        "sender_full_name": "Joseph O",
        "timestamp": 1646706689
    },
    {
        "content": "<p>well, sorta</p>",
        "id": 274488010,
        "sender_full_name": "Joseph O",
        "timestamp": 1646706765
    },
    {
        "content": "<p>Well, although it's a very bad practice, you can use <a href=\"https://github.com/xubaiw/lean4/blob/841d51a7e62b3b09d6ba21044d756827e9baa2da/src/Init/System/IO.lean#L77-L90\"><code>unsafeIO</code></a>. </p>\n<p>It seems that you are using an external file to produce random sentences in Lean, so you can also read the file at compile time to ensure that it exists (see <a href=\"https://github.com/xubaiw/Unicode.lean/blob/4accab20a27685882c3e18548a20b56b25d14e07/Unicode/Includes.lean#L16-L46\">this</a> for example).</p>",
        "id": 274488899,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646707730
    },
    {
        "content": "<p>I have no idea what you are doing there lol</p>",
        "id": 274489334,
        "sender_full_name": "Joseph O",
        "timestamp": 1646708179
    },
    {
        "content": "<p>It creates a new term <code>include_str%</code> which functions the same as <code>include_str!</code> macro in Rust (you seem to have a rust background?)</p>\n<p>So for your case you can use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sentences</span> <span class=\"o\">:=</span> <span class=\"n\">include_str</span><span class=\"bp\">%</span> <span class=\"s2\">\"&lt;path to your file&gt;\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRandomSentence</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">sentences.splitOn</span> <span class=\"sc\">'\\n'</span>\n</code></pre></div>",
        "id": 274489833,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646708639
    },
    {
        "content": "<p>Different monads can give you access to different computational resources. The <code>IO</code> monad gives you access to file reading and writing (and other cool things). But once you start a computation that relies on being in a certain monad, everything that depends on it will need to be in that monad too (or in a higher level monad, but don't worry about it for now)</p>",
        "id": 274489894,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646708673
    },
    {
        "content": "<p>Defining the return type of a function as <code>IO foo</code> is how you say in Lean \"this computation happens inside <code>IO</code>\"</p>",
        "id": 274490030,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646708843
    },
    {
        "content": "<p>And requiring such type is how Lean chains monadic computations</p>",
        "id": 274490122,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646708912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/io.20fustration/near/274489833\">said</a>:</p>\n<blockquote>\n<p>It creates a new term <code>include_str%</code> which functions the same as <code>include_str!</code> macro in Rust (you seem to have a rust background?)</p>\n<p>So for your case you can use:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sentences</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">include_str</span><span class=\"bp\">%</span> <span class=\"s2\">\"&lt;path to your file&gt;\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRandomSentence</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">sentences.splitOn</span> <span class=\"sc\">'\\n'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I honestly don't know what <code>include_str</code> macro does, but it sounds like what I need</p>",
        "id": 274490880,
        "sender_full_name": "Joseph O",
        "timestamp": 1646709559
    },
    {
        "content": "<p>Ah yes, it is</p>",
        "id": 274490895,
        "sender_full_name": "Joseph O",
        "timestamp": 1646709587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/io.20fustration/near/274488899\">said</a>:</p>\n<blockquote>\n<p>Well, although it's a very bad practice, you can use <a href=\"https://github.com/xubaiw/lean4/blob/841d51a7e62b3b09d6ba21044d756827e9baa2da/src/Init/System/IO.lean#L77-L90\"><code>unsafeIO</code></a>. </p>\n</blockquote>\n<p>It's not just bad practice: keep in mind that if you use <code>unsafeIO</code> then the compiler will frequently miscompile your code, because it relies on the assumption that pure functions are pure</p>",
        "id": 274491776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646710314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/io.20fustration/near/274487921\">said</a>:</p>\n<blockquote>\n<p>this is insane</p>\n</blockquote>\n<p>If you think that, you're probably misunderstanding how this approach works. It's really not that different from marking functions as <code>pure</code> or <code>impure</code> with a special keyword. Note that, outside of higher order functions, you'll never want to take <code>IO _</code> as an argument.</p>",
        "id": 274529694,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646739823
    },
    {
        "content": "<p>What type of function is include_str% in lean?</p>",
        "id": 274535739,
        "sender_full_name": "Joseph O",
        "timestamp": 1646743700
    },
    {
        "content": "<p>It isn't a function. It is a macro that gets expanded to the contents of a file at compile-time.</p>",
        "id": 274535915,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646743804
    },
    {
        "content": "<p>It expands into a string literal.</p>",
        "id": 274536209,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646743996
    },
    {
        "content": "<p>Oh that’s cool. Where can I find such other macros?</p>",
        "id": 274536369,
        "sender_full_name": "Joseph O",
        "timestamp": 1646744062
    },
    {
        "content": "<p>Unfortunately, there is no such a place, but actually it's almost everywhere, and many parts of Lean itself is implemented with it (namespace, section, etc...) Just search for <code>builtinCommandElab</code> in lean4 source code (and the whole <code>Lean.Elab</code> module).</p>\n<p>If you want to find some other examples, this GH search may be useful <a href=\"https://github.com/search?q=language%3ALean+termelab&amp;type=code\">https://github.com/search?q=language%3ALean+termelab&amp;type=code</a>. </p>\n<p>There is also a youtube <a href=\"https://www.youtube.com/watch?v=hxQ1vvhYN_U&amp;t=2569s\">video</a> on Lean4 metaprogramming. But it's not a comprehensive guide. You may look at some Lean 3 meta programming tutorials to get inspiration.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"hxQ1vvhYN_U\" href=\"https://www.youtube.com/watch?v=hxQ1vvhYN_U&amp;t=2569s\"><img src=\"https://uploads.zulipusercontent.net/51061c99c0c5303ed7520c4159839fb27d6b4c2b/68747470733a2f2f692e7974696d672e636f6d2f76692f68785131767668594e5f552f64656661756c742e6a7067\"></a></div>",
        "id": 274538015,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646744922
    },
    {
        "content": "<p>I would say I’m actually quite a bit familiar with the macros</p>",
        "id": 274538512,
        "sender_full_name": "Joseph O",
        "timestamp": 1646745174
    },
    {
        "content": "<p>But also, how did you find out about the macro?</p>",
        "id": 274538588,
        "sender_full_name": "Joseph O",
        "timestamp": 1646745228
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> <a href=\"/user_uploads/3121/BRhYjdxRPD0FOyZFZBVzLYjN/image.png\">image.png</a> <a href=\"/user_uploads/3121/2ls_3Mu0HwA9k5pX3URaHlLN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BRhYjdxRPD0FOyZFZBVzLYjN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BRhYjdxRPD0FOyZFZBVzLYjN/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2ls_3Mu0HwA9k5pX3URaHlLN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2ls_3Mu0HwA9k5pX3URaHlLN/image.png\"></a></div>",
        "id": 274539827,
        "sender_full_name": "Joseph O",
        "timestamp": 1646745871
    },
    {
        "content": "<p>looks like it's not built into Lean, check the link posted earlier</p>",
        "id": 274541981,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646747077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/io.20fustration/near/274538588\">said</a>:</p>\n<blockquote>\n<p>But also, how did you find out about the macro?</p>\n</blockquote>\n<p>I wrote it for doc-gen4 and it was copied to xubai's project for his purposes, as explained in the github link</p>",
        "id": 274576682,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646761282
    },
    {
        "content": "<p>The frustration you are experiencing is because Lean knows that \"if f calls g, and g talks to the outside world, then f talks to the outside world\". Many other languages do not know this, which makes their happy-paths simpler and easier to write, usually at the cost of having bizarre runtime errors when anything goes wrong. If the filesystem flakes out, for example, most languages will just throw an exception or something; Lean forces you to indicate that you know your function is vulnerable to filesystem flakiness, and propagate that knowledge to all your callers, by using the <code>IO</code> monad.</p>",
        "id": 274733477,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1646851443
    },
    {
        "content": "<p>And there are best practices on how to structure code with and without IO in that you want to try and keep IO in the \"outer\" shell of your application and the pure part inside it. Well, otherwise your whole app will be in IO. But I am no help here.</p>\n<p>I think the whole assumption here is that the upside of this outweighs the difficulties.</p>",
        "id": 274734201,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646851778
    },
    {
        "content": "<p>For example doc-gen4 performs its analysis step inside the <code>MetaM</code> monad (which is quite a beefed up version of <code>IO</code> for meta programming) and does every little bit it of meta analysis there, then it spits out some result type and hands that over to the HTML generator which works in another much weaker monad (a <code>Reader</code> one) and simply presents the results of the analysis so the application has one part that can actually interact with the real world and another half that just presents the data</p>",
        "id": 274734710,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646852016
    }
]