[
    {
        "content": "<p>Chapter 3 of TPIL, in the section \"Introducing Auxiliary Subgoals\" mentions that</p>\n<p>\"internally, the expression have h : p := s; t produces the term (fun (h : p) =&gt; t) s.\"</p>\n<p>However, earlier in the book, it's mentioned that <code>let</code> is strictly more powerful from a type inference point of view.  What's the reasoning for this rewrite to a lambda application rather than a let binding?</p>\n<p>Thanks!</p>",
        "id": 297024735,
        "sender_full_name": "Tom",
        "timestamp": 1662230535
    },
    {
        "content": "<p><code>let</code> is more powerful because it makes the value <code>s</code> available while checking <code>t</code>. <code>have</code> is meant to be used for proofs, which are irrelevant, so the specific <code>s</code> does not matter.</p>",
        "id": 297088357,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662290367
    },
    {
        "content": "<p>Hi Sebastian,</p>\n<p>I am sure I understand your explanation yet.</p>\n<p>Is your point that the <code>h</code> in <code>have h: s</code> always has to be a term (value) of type <code>Prop</code> (and not some higher Sort), and hence dependent types don't come into play (hence the distinction/type checking advantages will not ultimately matter?)</p>\n<p>During my reading of TPiL, I have always been able to use <code>let</code> wherever I've seen <code>have</code> and as such, I've only viewed the distinction as purely a proof readability/convention tool.  Is there something more to it?  Is there something about <code>let</code> which makes the implementation of e.g. proof irrelevance more difficult?</p>\n<p>Thanks.</p>",
        "id": 297278944,
        "sender_full_name": "Tom",
        "timestamp": 1662413025
    },
    {
        "content": "<p><code>Prop</code>s can be dependent types, e.g. <code>forall a, a+a=2*a</code>.</p>",
        "id": 297312108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662446949
    },
    {
        "content": "<p>The difference between <code>let</code> and <code>have</code> is that <code>let</code> remembers the definition of the term, and <code>have</code> just remembers the type. So for example after <code>have a : Nat := 3</code>, you'll find that <code>a = 3</code> is unprovable. But with <code>let</code> it'll be <code>rfl</code>.</p>",
        "id": 297312345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662447097
    },
    {
        "content": "<p>Thank you, Kevin; I think you are referring to the proof irrelevance that Sebastian mentioned, correct?<br>\nI'll think about this some more and come back once I've had the chance to explore the internals a bit more; I'll either be able to articulate my question better or will have answered my own question.</p>",
        "id": 297505019,
        "sender_full_name": "Tom",
        "timestamp": 1662508582
    }
]