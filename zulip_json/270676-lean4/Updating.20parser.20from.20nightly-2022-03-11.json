[
    {
        "content": "<p>Hello,</p>\n<p>I'm currently in the process of trying to update a parser in Lean4 from nightly-2022-03-11 to the current nightly (nightly-2022-08-22). I know that there have been quite a few changes in the past several months, but I'm struggling to identify what exactly needs to be done to get the parser working as it used to.</p>\n<p>Here's a minimal(ish) example that does work how I intend it to in nightly-2022-03-11:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">TPTP_file</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">tff_type</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">tff_atomic_type</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">defined_type</span> <span class=\"o\">:=</span> <span class=\"s2\">\"$\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">defined_type</span> <span class=\"o\">:</span> <span class=\"n\">tff_atomic_type</span>\n<span class=\"n\">syntax</span> <span class=\"n\">tff_atomic_type</span> <span class=\"o\">:</span> <span class=\"n\">tff_type</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">tff_annotation</span> <span class=\"o\">:=</span> <span class=\"s2\">\",\"</span> <span class=\"n\">rawIdent</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">TPTP_input</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"tff\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">rawIdent</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"type\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">rawIdent</span> <span class=\"s2\">\":\"</span> <span class=\"n\">tff_type</span> <span class=\"n\">tff_annotation</span> <span class=\"bp\">?</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\".\"</span> <span class=\"o\">:</span> <span class=\"n\">TPTP_input</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">TPTP_input</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">TPTP_file</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"BEGIN_TPTP\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">TPTP_file</span> <span class=\"s2\">\"END_TPTP\"</span> <span class=\"n\">proof</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">input</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">input</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">TPTP_input</span><span class=\"bp\">|</span> <span class=\"n\">tff</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"n\">type</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">tff_type</span> <span class=\"bp\">$</span><span class=\"n\">annotation</span><span class=\"o\">:</span><span class=\"n\">tff_annotation</span> <span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">ty</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tff_type</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">tff_atomic_type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Successfully recognized {ty} as a tff_atomic_type\"</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tff_type</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Failed to recognize {ty} as a tff_atomic_type\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"s2\">\"Unreached code\"</span>\n  <span class=\"n\">Macro.throwError</span> <span class=\"s2\">\"Unreached code\"</span>\n\n<span class=\"n\">BEGIN_TPTP</span> <span class=\"n\">mytest</span> <span class=\"c1\">-- Output: Successfully recognized (tff_atomic_type_ (defined_type \"$\" `tType)) as a tff_atomic_type</span>\n  <span class=\"n\">tff</span><span class=\"o\">(</span><span class=\"n\">box_type</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">box</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tType</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">END_TPTP</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This code will successfully recognize <code>$tType</code> as what I call a tff_atomic_type. If I try to run the same code in the current nightly, the macro will fail to typecheck due to changes that have been made to the Syntax/TSyntax types. If I use <code>TSyntax.Compat</code> to resolve those type checking errors, then my macro will no longer recognize <code>$tType</code> as a tff_atomic_type. Here's the code (only two lines have been added: opening TSyntax.Compat and casting s to Syntax):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">TPTP_file</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">tff_type</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">tff_atomic_type</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">defined_type</span> <span class=\"o\">:=</span> <span class=\"s2\">\"$\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">defined_type</span> <span class=\"o\">:</span> <span class=\"n\">tff_atomic_type</span>\n<span class=\"n\">syntax</span> <span class=\"n\">tff_atomic_type</span> <span class=\"o\">:</span> <span class=\"n\">tff_type</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">tff_annotation</span> <span class=\"o\">:=</span> <span class=\"s2\">\",\"</span> <span class=\"n\">rawIdent</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">TPTP_input</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"tff\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">rawIdent</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"type\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">rawIdent</span> <span class=\"s2\">\":\"</span> <span class=\"n\">tff_type</span> <span class=\"n\">tff_annotation</span> <span class=\"bp\">?</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\".\"</span> <span class=\"o\">:</span> <span class=\"n\">TPTP_input</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">TPTP_input</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">TPTP_file</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"BEGIN_TPTP\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">TPTP_file</span> <span class=\"s2\">\"END_TPTP\"</span> <span class=\"n\">proof</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">input</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">input</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">TPTP_input</span><span class=\"bp\">|</span> <span class=\"n\">tff</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"n\">type</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">tff_type</span> <span class=\"bp\">$</span><span class=\"n\">annotation</span><span class=\"o\">:</span><span class=\"n\">tff_annotation</span> <span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">ty</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tff_type</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">tff_atomic_type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Successfully recognized {ty} as a tff_atomic_type\"</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tff_type</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Failed to recognize {ty} as a tff_atomic_type\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"s2\">\"Unreached code\"</span>\n  <span class=\"n\">Macro.throwError</span> <span class=\"s2\">\"Unreached code\"</span>\n\n<span class=\"n\">BEGIN_TPTP</span> <span class=\"n\">mytest</span> <span class=\"c1\">-- Output: Failed to recognize (tff_type.pseudo.antiquot \"$\" [] `tType []) as a tff_atomic_type</span>\n  <span class=\"n\">tff</span><span class=\"o\">(</span><span class=\"n\">box_type</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">box</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tType</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">END_TPTP</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is the way I'm handling Syntax/TSyntax casting incorrect? Are there other things that I'm doing wrong that aren't resulting in a typechecking error but are causing the parser to not work as intended? More generally, is there any resource/document I could look at describing the parser changes that have been made since nightly-2022-03-11? Thanks!</p>",
        "id": 294745820,
        "sender_full_name": "Josh Clune",
        "timestamp": 1661193400
    },
    {
        "content": "<p>There are two relevant changes here: for <code>TSyntax</code>, it is sufficient to replace <code>s[0]</code> with <code>s.raw[0]</code>. The more fundamental change is that antiquotations are now allowed everywhere, which collides with your <code>defined_type</code> syntax.</p>",
        "id": 294759119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661198744
    },
    {
        "content": "<p>I suppose one simple workaround would be to just handle Lean antiquotations as if they were <code>defined_type</code>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">if</span> <span class=\"n\">ty.raw.isAntiquot</span> <span class=\"k\">then</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">ty.raw.getAntiquotTerm.getId</span>\n</code></pre></div>",
        "id": 294759567,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661198920
    }
]