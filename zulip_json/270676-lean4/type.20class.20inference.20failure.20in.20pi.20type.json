[
    {
        "content": "<p>In the thread a few days ago about <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20inference.20looping\">typeclass inference looping</a>, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20inference.20looping/near/319276740\">mentioned</a> another example which had been causing problems in the same mathlib4 PR.  This one is a failure of typeclass inference.</p>",
        "id": 319532519,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672906090
    },
    {
        "content": "<p>I have now made that example import-free and <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=variable%20%7B%CE%B1%20%3A%20Type%7D%0Avariable%20%7BR%20%3A%20Type%7D%0A%0Aclass%20Zero%20%28%CE%B1%20%3A%20Type%29%20%3A%3D%0A%28%20zero%20%3A%20%CE%B1%20%29%0A%0Anotation%20%60%20%E2%97%AF%20%60%20%3A%3D%20Zero.zero%0A%0Aclass%20SMul%20%28R%20%CE%B1%20%3A%20Type%29%20%3A%3D%0A%28%20smul%20%3A%20R%20%E2%86%92%20%CE%B1%20%E2%86%92%20%CE%B1%20%29%0A%0Ainfixr%20%60%20%E2%80%A2%20%60%3A73%20%3A%3D%20SMul.smul%0A%0Aclass%20SMulZeroClass%20%28R%20%CE%B1%20%3A%20Type%29%20%5BZero%20%CE%B1%5D%20extends%20SMul%20R%20%CE%B1%20%3A%3D%0A%28%20smul_zero%20%3A%20%E2%88%80%20r%20%3A%20R%2C%20r%20%E2%80%A2%20%28%E2%97%AF%20%3A%20%CE%B1%29%20%3D%20%E2%97%AF%20%29%0A%0Anamespace%20pi%0Avariable%20%7BI%20%3A%20Type%7D%0Avariable%20%7Bf%20%3A%20I%20%E2%86%92%20Type%7D%0A%0Ainstance%20instZero%20%5B%E2%88%80%20i%2C%20Zero%20%28f%20i%29%5D%20%3A%20Zero%20%28%E2%88%80%20i%20%3A%20I%2C%20f%20i%29%20%3A%3D%20%E2%9F%A8fun%20_%2C%20%E2%97%AF%E2%9F%A9%0A%0Ainstance%20instSMul%20%5B%E2%88%80%20i%2C%20SMul%20R%20%28f%20i%29%5D%20%3A%20SMul%20R%20%28%E2%88%80%20i%20%3A%20I%2C%20f%20i%29%20%3A%3D%20%E2%9F%A8fun%20s%20x%20i%2C%20s%20%E2%80%A2%20x%20i%E2%9F%A9%0A%0Ainstance%20%28R%29%20%5B%E2%88%80%20i%2C%20Zero%20%28f%20i%29%5D%20%5B%E2%88%80%20i%2C%20SMulZeroClass%20R%20%28f%20i%29%5D%20%3A%0A%20%20%20%20SMulZeroClass%20R%20%28%E2%88%80%20i%2C%20f%20i%29%20%3A%3D%0A%20%20%7B%20pi.instSMul%20with%0A%20%20%20%20smul_zero%20%3A%3D%20fun%20_%2C%20funext%20%24%20fun%20_%2C%20SMulZeroClass.smul_zero%20_%20%7D%0A%0Aend%20pi%0A\">checked</a> that it works in Lean 3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\" ◯ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Zero.zero</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">◯</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">◯</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instZero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">◯</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">pi.instSMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulZeroClass.smul_zero</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n    <span class=\"c1\">-- failed to synthesize instance SMulZeroClass R (f x✝)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pi</span>\n</code></pre></div>",
        "id": 319532526,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672906098
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/issues/2011\">https://github.com/leanprover/lean4/issues/2011</a> for this.</p>",
        "id": 319671414,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672952313
    },
    {
        "content": "<p>As a workaround you can remove <code>pi.instSMul with</code>.</p>",
        "id": 319673430,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672953124
    }
]