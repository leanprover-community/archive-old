[
    {
        "content": "<p>How do I write a macro which captures something like <code>\"x\" + \"y\"</code> into an abstract syntax tree? Currently, it appears to cause a typeclass lookup for the <code>HAdd</code> typeclass. Here's a minimal example of what I want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Controlling typeclass resolution versus macros</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Arith</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">Arith</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Arith</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Arith</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Symbol</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Arith</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span>  <span class=\"n\">arith</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"fromArith% \"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">sym</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.Symbol</span> <span class=\"bp\">$</span><span class=\"n\">sym</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.Add</span> <span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"arith\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">arith</span>  <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Arith</span> <span class=\"o\">:=</span> <span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">arith</span> <span class=\"n\">baz</span> <span class=\"bp\">-&gt;</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"y\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>I would like the answer to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Arith</span> <span class=\"o\">:=</span>\n<span class=\"n\">Arith.Add</span> <span class=\"o\">(</span><span class=\"n\">Arith.Symbol</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Arith.Symbol</span> <span class=\"s2\">\"y\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I currently get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add.lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"bp\">?</span><span class=\"n\">m.1645</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Arith</span> <span class=\"o\">:=</span>\n<span class=\"n\">Arith.Symbol</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255492398,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1632958257
    },
    {
        "content": "<p>I think you have to specify the precedence here, because in the expression <code>fromArith% \"x\" + \"y\"</code> it could mean either <code>fromArith% (\"x\" + \"y\")</code> or <code>(fromArith% \"x\") + \"y\"</code>, and it seems lean is going for the latter interpretation, which is not what you want</p>",
        "id": 255492626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632958409
    },
    {
        "content": "<p>Additionally, you have an ambiguity due to the <code>syntax term : arith</code> rule, since then even <code>fromArith% (\"x\" + \"y\")</code> can be interpreted as <code>fromArith% (\"x\" + \"y\" : term)</code></p>",
        "id": 255493055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632958681
    },
    {
        "content": "<p>Testing reveals that this latter version is how it is actually getting interpreted</p>",
        "id": 255493340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632958880
    },
    {
        "content": "<p>The simplest fix is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">strLit</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"fromArith% \"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">sym</span><span class=\"o\">:</span><span class=\"n\">strLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.Symbol</span> <span class=\"bp\">$</span><span class=\"n\">sym</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.Add</span> <span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"arith\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">arith</span>  <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Arith</span> <span class=\"o\">:=</span> <span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">arith</span> <span class=\"n\">baz</span> <span class=\"bp\">-&gt;</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"y\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz</span>\n</code></pre></div>",
        "id": 255493501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632958994
    },
    {
        "content": "<p>Ah, <code>strLit</code> is handy to know. I wonder if there's a place to find all of the core syntax categories?</p>",
        "id": 255493603,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1632959052
    },
    {
        "content": "<p>If you want to use identifiers, you can add the following lines after Mario's example above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">«</span><span class=\"n\">arith</span><span class=\"bp\">»</span>  <span class=\"c1\">-- Have to use french quotes since `arith` is now a keyword</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.Symbol</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x.getId</span><span class=\"o\">)))</span>\n\n<span class=\"n\">arith</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"bp\">«</span><span class=\"n\">arith</span><span class=\"bp\">»</span> <span class=\"c1\">-- escape for embedding terms into `Arith`</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromArith</span><span class=\"bp\">%</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"n\">arith</span> <span class=\"n\">boo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">{</span><span class=\"n\">foo</span><span class=\"o\">}</span>\n<span class=\"k\">#print</span> <span class=\"n\">boo</span>\n</code></pre></div>",
        "id": 255493686,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632959129
    }
]