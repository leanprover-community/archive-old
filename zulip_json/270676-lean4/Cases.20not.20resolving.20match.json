[
    {
        "content": "<p>In the following (contrived) example ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Raw</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Raw.toThing</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Thing.one</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>   <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Thing.two</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Thing.three</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing.rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"n\">x</span>   <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Raw.one</span> <span class=\"n\">x</span>   <span class=\"bp\">→</span> <span class=\"n\">rawEquiv</span> <span class=\"n\">t</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>   <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">two</span> <span class=\"n\">x</span>   <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Raw.two</span> <span class=\"n\">x</span>   <span class=\"bp\">→</span> <span class=\"n\">rawEquiv</span> <span class=\"n\">t</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">three</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Raw.three</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">rawEquiv</span> <span class=\"n\">t</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>... I'm trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Thing.toThing_rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r.toThing</span> <span class=\"bp\">→</span> <span class=\"n\">t.rawEquiv</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>If I do ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">cases</span> <span class=\"n\">r</span>\n<span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span>\n  <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Raw.toThing</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>... I get ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Raw.one</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which is nice in that it gives me <code>x✝ = x✝¹</code>, but I also need <code>r = Raw.one x✝¹</code> and <code>t = one x✝</code>.<br>\nSo I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span>\n  <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n    <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Raw.toThing</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>... which gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span>\n<span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Raw.one</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.one</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">one</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.two</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">two</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.three</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">three</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Raw.one</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But no matter what I do, I can't reduce the <code>match</code> expression to get <code>x✝ = x✝¹</code>.</p>\n<p>Why does adding the proof labels <code>h₁</code> and <code>h₂</code> remove the ability to resolve the <code>match</code>?</p>",
        "id": 260036475,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1635876992
    },
    {
        "content": "<p>I was able to solve the first case like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Thing.toThing_rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r.toThing</span> <span class=\"bp\">→</span> <span class=\"n\">t.rawEquiv</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">x1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">x2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Raw.toThing</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">rawEquiv.one</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"n\">x2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"n\">x2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Although the proof state after apply <a href=\"http://rawEquiv.one\">rawEquiv.one</a> looks a bit weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Goals</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">one.one.a</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">one</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"bp\">?</span><span class=\"n\">one.one.x</span>\n\n<span class=\"n\">case</span> <span class=\"n\">one.one.a</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Raw.one</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">Raw.one</span> <span class=\"bp\">?</span><span class=\"n\">one.one.x</span>\n\n<span class=\"n\">case</span> <span class=\"n\">one.one.x</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>But lean figures out the meta variable out itself based on my use of the refl tactic it seems?</p>",
        "id": 260042563,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1635879835
    },
    {
        "content": "<p>Printing out the definition of the partial theorems shows that Lean deduces a different motive when the labels are added for some reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Thing.toThing_rawEquiv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r.toThing</span> <span class=\"bp\">→</span> <span class=\"n\">t.rawEquiv</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span>\n  <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">t</span>\n    <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Raw.toThing</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Thing.toThing_rawEquiv</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem Thing.toThing_rawEquiv : ∀ (t : Thing) (r : Raw), t = Raw.toThing r → Thing.rawEquiv t r :=</span>\n<span class=\"cm\">fun t r h =&gt;</span>\n<span class=\"cm\">  Raw.casesOn (motive := fun t_1 =&gt; r = t_1 → Thing.rawEquiv t r) r</span>\n<span class=\"cm\">    (fun x h_1 =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun r =&gt; t = Raw.toThing r → Thing.rawEquiv t r)</span>\n<span class=\"cm\">        (fun h =&gt; sorryAx (Thing.rawEquiv t (Raw.one x))) (Eq.symm h_1) h)</span>\n<span class=\"cm\">    (fun x h_1 =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun r =&gt; t = Raw.toThing r → Thing.rawEquiv t r)</span>\n<span class=\"cm\">        (fun h =&gt; sorryAx (Thing.rawEquiv t (Raw.two x))) (Eq.symm h_1) h)</span>\n<span class=\"cm\">    (fun x h_1 =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun r =&gt; t = Raw.toThing r → Thing.rawEquiv t r)</span>\n<span class=\"cm\">        (fun h =&gt; sorryAx (Thing.rawEquiv t (Raw.three x))) (Eq.symm h_1) h)</span>\n<span class=\"cm\">    (Eq.refl r)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Thing.toThing_rawEquiv'</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Raw</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r.toThing</span> <span class=\"bp\">→</span> <span class=\"n\">t.rawEquiv</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span>\n  <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n    <span class=\"n\">case</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Raw.toThing</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Thing.toThing_rawEquiv'</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem Thing.toThing_rawEquiv' : ∀ (t : Thing) (r : Raw), t = Raw.toThing r → Thing.rawEquiv t r :=</span>\n<span class=\"cm\">fun t r h =&gt;</span>\n<span class=\"cm\">  Raw.casesOn (motive := fun t_1 =&gt; r = t_1 → Thing.rawEquiv t r) r</span>\n<span class=\"cm\">    (fun x h =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun x =&gt; r = x → Thing.rawEquiv t x) (fun h₁ =&gt; sorryAx (Thing.rawEquiv t (Raw.one x)))</span>\n<span class=\"cm\">        (Eq.symm h) (Eq.refl r))</span>\n<span class=\"cm\">    (fun x h =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun x =&gt; r = x → Thing.rawEquiv t x) (fun h₁ =&gt; sorryAx (Thing.rawEquiv t (Raw.two x)))</span>\n<span class=\"cm\">        (Eq.symm h) (Eq.refl r))</span>\n<span class=\"cm\">    (fun x h =&gt;</span>\n<span class=\"cm\">      Eq.ndrec (motive := fun x =&gt; r = x → Thing.rawEquiv t x) (fun h₁ =&gt; sorryAx (Thing.rawEquiv t (Raw.three x)))</span>\n<span class=\"cm\">        (Eq.symm h) (Eq.refl r))</span>\n<span class=\"cm\">    (Eq.refl r)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 260044401,
        "sender_full_name": "Mac",
        "timestamp": 1635880729
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 260102138,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1635928513
    }
]