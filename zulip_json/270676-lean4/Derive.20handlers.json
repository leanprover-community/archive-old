[
    {
        "content": "<p>I'm trying to write a derive handler for my class. If I minimize my example, I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkCLIArgRecordInstanceHandler</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"n\">builtin_initialize</span>\n  <span class=\"n\">Lean.Elab.registerBuiltinDerivingHandler</span> <span class=\"bp\">`</span><span class=\"n\">CLIArgRecord</span>\n    <span class=\"n\">mkCLIArgRecordInstanceHandler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">field1</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">CLIArgRecord</span>\n<span class=\"c1\">-- default handlers have not been implemented yet, class: 'CLIArgRecord' types: [CLI.Derive.Foo]</span>\n</code></pre></div>\n<p>I get an error on the declaration of <code>Foo</code> even if I move it to a separate file, I get the same error. What am I missing?</p>",
        "id": 267469986,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641835111
    },
    {
        "content": "<p>Can you add the imports too?</p>",
        "id": 267496345,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641847150
    },
    {
        "content": "<p>Certainly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Util</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n</code></pre></div>\n<p>but I think only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Util</span>\n</code></pre></div>\n<p>are relevant</p>",
        "id": 267496616,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641847297
    },
    {
        "content": "<p>Where is <code>CLIArgRecord</code>? I couldn't find it on the <a href=\"https://github.com/leanprover/lean4/search?q=CLIArgRecord\">Lean 4 repo</a></p>",
        "id": 267496967,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641847467
    },
    {
        "content": "<p>It's my definition, sorry</p>",
        "id": 267497645,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641847826
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">StreamReader</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">StreamReader</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StreamReader</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">StreamReader</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">StreamReader</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CLIArgRecord</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">StreamReader</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">usageString</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>",
        "id": 267497683,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641847849
    },
    {
        "content": "<p>Is this relevant to the derive handler working or not?</p>",
        "id": 267497702,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641847861
    },
    {
        "content": "<p>I'm not sure... I just wanted to get rid of the <code>unknown constant 'CLIArgRecord'</code> error</p>",
        "id": 267497772,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641847896
    },
    {
        "content": "<p>Maybe an empty class would be sufficient</p>",
        "id": 267497883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641847943
    },
    {
        "content": "<p>Ah, seems like you're hitting a temporary dead end <a href=\"https://github.com/leanprover/lean4/blob/929aafa4c807943f9fbcf92cc53fd1775c4eaf6c/src/Lean/Elab/Deriving/Basic.lean#L28\">here</a></p>",
        "id": 267498242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641848153
    },
    {
        "content": "<p>That function just throws the exception right away</p>",
        "id": 267498325,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641848182
    },
    {
        "content": "<p>It is called <a href=\"https://github.com/leanprover/lean4/blob/929aafa4c807943f9fbcf92cc53fd1775c4eaf6c/src/Lean/Elab/Deriving/Basic.lean#L34-L35\">here</a> If the handler is found or if it returns true, that shouldn't happen</p>",
        "id": 267500052,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641848920
    },
    {
        "content": "<p>Actually, it's probably the other branch. If the handler returns <code>true</code> unconditionally, we should see something happening. For some reason, the handler doesn't make it into the table or it's not found when I look it up</p>",
        "id": 267500878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641849260
    },
    {
        "content": "<p>My <code>builtin_initialize</code> block doesn't seem to get run. Is it something I have to use from a separate package?</p>",
        "id": 267502181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641849858
    },
    {
        "content": "<p>Searching for calls of <code>registerBuiltinDerivingHandler</code> in the <a href=\"https://github.com/leanprover/lean4/search?q=registerBuiltinDerivingHandler\">Lean 4 repo</a>, sometimes it's followed by a call to <code>registerTraceClass</code>. I'm not sure if it's related though</p>",
        "id": 267502484,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641849991
    },
    {
        "content": "<p>It shouldn't be. That's just for registering tags for tracing. If you register <code>myTag</code>, then <code>set_option trace.myTag true</code> with turn on the printing of information where you used that tag.</p>",
        "id": 267503405,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641850356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/Derive.20handlers/near/267502181\">said</a>:</p>\n<blockquote>\n<p>My <code>builtin_initialize</code> block doesn't seem to get run. Is it something I have to use from a separate package?</p>\n</blockquote>\n<p>My guess is that it has something to do with building before being able to use it</p>",
        "id": 267503888,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641850578
    },
    {
        "content": "<p>From my experience when dealing with the FFI, <a href=\"https://github.com/arthurpaulino/NumLean/blob/9a136348c1e9a869a76f39cdfd57f77c9cada3f6/NumLean/NLMatrix.lean#L12\">this line</a> doesn't do much on the Lean 4 server. It only does something when my code is built and I run it</p>",
        "id": 267504581,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641850837
    },
    {
        "content": "<p>In the context of my repo, however, <code>init</code> is a constant marked with <code>extern \"nl_initialize\"</code>, so that can very well be why I need to build it first.</p>",
        "id": 267505311,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641851068
    },
    {
        "content": "<p>But if you do <code>lake build</code>, does it get run?</p>",
        "id": 267505353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641851100
    },
    {
        "content": "<p>It definitely runs when I call <code>./bla</code> (the executable file)</p>",
        "id": 267505421,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641851155
    },
    {
        "content": "<p>Because derive handler requires <code>builtin_initialize</code>, I'm wondering if I need a stricter separation, like using the derive handler as a plugin. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, would you care to shed some light here?</p>",
        "id": 267506222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641851591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> are you sure you can't just use <code>initialize</code>? Despite their names, many of the functions with <code>Builtin</code> in the name do not actually require a <code>buitlin_initialize</code>.</p>",
        "id": 267509697,
        "sender_full_name": "Mac",
        "timestamp": 1641853167
    },
    {
        "content": "<p>Yes, here's the error I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">register</span> <span class=\"n\">deriving</span> <span class=\"n\">handler</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">be</span> <span class=\"n\">registered</span> <span class=\"n\">during</span> <span class=\"n\">initialization</span>\n</code></pre></div>",
        "id": 267510145,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641853401
    },
    {
        "content": "<p>Isn't this just the usual issue with <code>builtin_initialize</code>? You can't use it in the same file it is defined. Try putting the example inductive in another file</p>",
        "id": 267526661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641865131
    },
    {
        "content": "<p>He mentioned that he tried that</p>",
        "id": 267527057,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641865496
    },
    {
        "content": "<p><code>builtin_initialize</code> is run in executables and plugins only. It would be good to have a regular attribute for registering non-builtin derive handlers.</p>",
        "id": 267554885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641892593
    },
    {
        "content": "<p>Ok so if I write a derive handler in a library, I need to load that library as a plugin. Does lake allow me to do that?</p>",
        "id": 267613689,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641921220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Pushed <a href=\"https://github.com/leanprover/lean4/commit/d953ac8d0d1514b3d84d724ef4a6042213253c80\">https://github.com/leanprover/lean4/commit/d953ac8d0d1514b3d84d724ef4a6042213253c80</a><br>\nIt contains a small example. Not fully tested, if you find problems, please create an issue on GitHub.</p>",
        "id": 267619609,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1641923576
    },
    {
        "content": "<p>Great! That's really helpful! Thank you</p>",
        "id": 267623291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641925033
    },
    {
        "content": "<p>update: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I tried it and it works like a charm! Thanks again!</p>",
        "id": 268294384,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1642438696
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268294479,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642438757
    }
]