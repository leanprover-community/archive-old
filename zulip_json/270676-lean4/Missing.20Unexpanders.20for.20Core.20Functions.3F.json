[
    {
        "content": "<p>I noticed that Lean is missing unexpanders for a lot of basic functions. For example, <code>Array.empty</code> and <code>Array.push</code>. Is there any reasons why defining unexpanders like the following would be a problem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[appUnexpander Array.empty]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandArrayEmpty</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[appUnexpander Array.push]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandArrayPush</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 238922236,
        "sender_full_name": "Mac",
        "timestamp": 1621109388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> What problem are you trying to solve? Notation already unexpands nicely. Why would you want to unexpand <code>push</code>es that way?</p>",
        "id": 238922579,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621109769
    },
    {
        "content": "<p>Note: <code>Array</code> notation is defined in terms of <code>List</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- List.toArray List.nil : Array Nat</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- List.toArray (List.cons 1 List.nil) : Array Nat</span>\n</code></pre></div>",
        "id": 238923103,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621110332
    },
    {
        "content": "<p>The goal is to pretty-print sequence of pushes. The reason why this is relevant is that sequences of pushes are often used to construct arrays in some macro code (and such arrays end up being less than pretty).</p>",
        "id": 238923185,
        "sender_full_name": "Mac",
        "timestamp": 1621110432
    },
    {
        "content": "<p>how about reducing the result explicitly, rather than having the pretty-printer do it?</p>",
        "id": 238923241,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621110489
    },
    {
        "content": "<p>Maybe <code>Array</code> is a bad example. A better example of something that does not get pretty printed ever is <code>Name</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"n\">foo.bar</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Name.mkStr (Name.mkStr Name.anonymous \"foo\") \"bar\" : Name</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I would hope it would be pretty-printed as <code>`foo.bar </code>.</p>",
        "id": 238923269,
        "sender_full_name": "Mac",
        "timestamp": 1621110553
    },
    {
        "content": "<p>Also, fyi,  using <code>#reduce</code> on an <code>Array</code> doesn't result in a pretty literal either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> { data := [2, 3] }</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 238923373,
        "sender_full_name": "Mac",
        "timestamp": 1621110624
    },
    {
        "content": "<p>I don't know why the devs decided to represent Array literals this way, but given that decision, I think it would be confusing to have different representations of arrays that all pretty-print the same way.</p>",
        "id": 238923487,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621110762
    },
    {
        "content": "<p>I meant <del>reducing</del>converting the array to whatever the canonical representation is, which is currently the <code>List.toArray &lt;list&gt;</code> representation.</p>",
        "id": 238923548,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621110798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Missing.20Unexpanders.20for.20Core.20Functions.3F/near/238923548\">said</a>:</p>\n<blockquote>\n<p>I meant <del>reducing</del>converting the array to whatever the canonical representation is, which is currently the <code>List.toArray &lt;list&gt;</code> representation.</p>\n</blockquote>\n<p>Unfortunately, that is often not possible. Many built-in pieces use the <code>push</code> representation and thus errors are not very pretty. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">badArrayQuote</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Syntax</span>\n  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  type mismatch</span>\n<span class=\"cm\">    do</span>\n<span class=\"cm\">      let info ← MonadRef.mkInfoFromRefPos</span>\n<span class=\"cm\">      let scp ← getCurrMacroScope</span>\n<span class=\"cm\">      let mainModule ← getMainModule</span>\n<span class=\"cm\">      pure</span>\n<span class=\"cm\">          (node (Name.mkStr Name.anonymous \"term#[_,]\")</span>\n<span class=\"cm\">            (Array.push</span>\n<span class=\"cm\">              (Array.push (Array.push Array.empty (atom info \"#[\"))</span>\n<span class=\"cm\">                (node (Name.mkStr Name.anonymous \"null\")</span>\n<span class=\"cm\">                  (Array.push</span>\n<span class=\"cm\">                    (Array.push</span>\n<span class=\"cm\">                      (Array.push Array.empty</span>\n<span class=\"cm\">                        (node (Name.mkStr Name.anonymous \"numLit\") (Array.push Array.empty (atom info \"2\"))))</span>\n<span class=\"cm\">                      (atom info \",\"))</span>\n<span class=\"cm\">                    (node (Name.mkStr Name.anonymous \"numLit\") (Array.push Array.empty (atom info \"3\"))))))</span>\n<span class=\"cm\">              (atom info \"]\")))</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    ?m.1784 Syntax : Type</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    Syntax : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 238923754,
        "sender_full_name": "Mac",
        "timestamp": 1621111011
    },
    {
        "content": "<p>In fact, the above is a great example of why both <code>Array</code> and <code>Name</code> unexpanders would be quite desirable.</p>",
        "id": 238923768,
        "sender_full_name": "Mac",
        "timestamp": 1621111037
    },
    {
        "content": "<p>The ones I've written on my own produce the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">prettyBadArrayQuote</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Syntax</span>\n  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  do</span>\n<span class=\"cm\">    let info ← MonadRef.mkInfoFromRefPos</span>\n<span class=\"cm\">    let scp ← getCurrMacroScope</span>\n<span class=\"cm\">    let mainModule ← getMainModule</span>\n<span class=\"cm\">    pure</span>\n<span class=\"cm\">        (node `«term#[_,]»</span>\n<span class=\"cm\">          #[atom info \"#[\",</span>\n<span class=\"cm\">            node `«null» #[node `«numLit» #[atom info \"2\"], atom info \",\", node `«numLit» #[atom info \"3\"]],</span>\n<span class=\"cm\">            atom info \"]\"])</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.51556 Syntax : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Syntax : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>which is much cleaner in my opinion.</p>",
        "id": 238923850,
        "sender_full_name": "Mac",
        "timestamp": 1621111116
    },
    {
        "content": "<p>That is a good example, thanks. I agree it would be nice for these to pretty-print as they do with your proposed unexpanders. I am still a little concerned about having different <code>Array</code> representations all rendering the same way though. Perhaps the <code>Array.push</code> representation can become the standard?</p>",
        "id": 238924091,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621111428
    },
    {
        "content": "<p>I can understand the qualms with having the <code>toArray</code> and <code>push</code> print the same way. </p>\n<p>However, I would note that <code>Array.empty</code> and <code>List.toArray []</code> are defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Array.empty</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.toArray</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So I don't think there would be as much as problem for them to print the same way.</p>",
        "id": 238924414,
        "sender_full_name": "Mac",
        "timestamp": 1621111783
    },
    {
        "content": "<p>For my particular example (quoting), I think the pretty printing issues boil down to the fact that the <code>Quote</code> instance for <code>Array</code> and <code>Name</code> don't use the current canonical representation of those types (<code>Array</code> uses  <code>empty</code>/<code>push</code> instead of <code>toArray</code> and <code>Name</code> uses <code>mkStr</code> instead of a name literal). This could be resolved by either changing the current canonical representation to match <code>Quote</code> or changing <code>Quote</code> to match the current canonical representation.</p>",
        "id": 238925741,
        "sender_full_name": "Mac",
        "timestamp": 1621113118
    },
    {
        "content": "<p>Yeah, I'm not satisfied with the pretty printed macro output either. Printing defeq things the same way is not a good idea though since tactics like <code>simp</code> don't work modulo defeq. Probably we should just move <code>List.toArray</code> to <code>Prelude</code> so we can use it in the quotation implementation.</p>",
        "id": 238957838,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621150883
    },
    {
        "content": "<blockquote>\n<p>Printing defeq things the same way is not a good idea though since tactics like simp don't work modulo defeq.</p>\n</blockquote>\n<p>Also there could be a performance or even behavior difference if one is a <code>implementedBy</code> constant and the other is the lean model (which is the case here re: <code>Array.empty</code> vs <code>List.toArray []</code>)</p>",
        "id": 238967079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621161168
    },
    {
        "content": "<p><code>List.toArray</code> actually is the faster one here (if everything is inlined) because it uses <code>Array.mkEmpty</code> with an appropriate capacity</p>",
        "id": 238967258,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621161313
    }
]