[
    {
        "content": "<p>I was really surprised today when I saw the performance regression because <code>trace[Elab.info] \"{&lt;- tree.format}\"</code> unconditionally evaluated <code>tree.format</code>.  I would've expected <code>trace[...]</code> to evaluate its arguments lazily, it's a macro after all (and clearly Sebastian thought so as well).<br>\nAre there any reasons not to make <code>trace[...]</code> lazy? That is, a change like this: <a href=\"https://github.com/gebner/lean4/commit/bcfc00b6165dc0c4f1bb718d691bfc3f3f7ae258#diff-4e819de9d9430729a749ddb68313d355c5f04dce7dfb81e9924661414ad3d1b2\">https://github.com/gebner/lean4/commit/bcfc00b6165dc0c4f1bb718d691bfc3f3f7ae258#diff-4e819de9d9430729a749ddb68313d355c5f04dce7dfb81e9924661414ad3d1b2</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"trace[\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">s.getKind</span> <span class=\"bp\">==</span> <span class=\"n\">interpolatedStrKind</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">cls</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">id.getId</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.isTracingEnabledFor</span> <span class=\"n\">cls</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">Lean.addTrace</span> <span class=\"n\">cls</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243501262,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624360587
    },
    {
        "content": "<p>Hmm, I hadn't considered a separate <code>doElem</code> macro</p>",
        "id": 243501792,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624360949
    }
]