[
    {
        "content": "<p>I'm trying out lean4, and have managed to run into a problem that makes me think I'm just trying something dumb. I'd really appreciate if someone could get me unstuck.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">box</span>\n<span class=\"kd\">def</span> <span class=\"n\">unbox</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">box</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>yields the message:<br>\n<code>box.lean:5:4: error: invalid pattern, constructor or constant marked with '[matchPattern]' expected</code><br>\nThis isn't what I'm actually trying to do, but I kept minimizing and ended up with this. I'm using a fresh install of Lean (version 4.0.0-m2, commit 26dda3f63d88, Release).  Clearly I must be trying to do something the wrong way, though I'm unclear what, as I've been checking what I'm trying to write against tests in the lean4 repository, such as <a href=\"https://github.com/leanprover/lean4/blob/v4.0.0-m2/tests/lean/match1.lean\">https://github.com/leanprover/lean4/blob/v4.0.0-m2/tests/lean/match1.lean</a> </p>\n<p>Thanks to anyone who can help get me sorted out</p>",
        "id": 241433251,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1622745182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418116\">Colin Gordon</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20with.20basic.20pattern.20matching.3F/near/241433251\">said</a>:</p>\n<blockquote>\n<p>I'm trying out lean4, and have managed to run into a problem that makes me think I'm just trying something dumb. I'd really appreciate if someone could get me unstuck.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">box</span>\n<span class=\"kd\">def</span> <span class=\"n\">unbox</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">box</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>yields the message:<br>\n<code>box.lean:5:4: error: invalid pattern, constructor or constant marked with '[matchPattern]' expected</code><br>\nThis isn't what I'm actually trying to do, but I kept minimizing and ended up with this. I'm using a fresh install of Lean (version 4.0.0-m2, commit 26dda3f63d88, Release).  Clearly I must be trying to do something the wrong way, though I'm unclear what, as I've been checking what I'm trying to write against tests in the lean4 repository, such as <a href=\"https://github.com/leanprover/lean4/blob/v4.0.0-m2/tests/lean/match1.lean\">https://github.com/leanprover/lean4/blob/v4.0.0-m2/tests/lean/match1.lean</a> </p>\n<p>Thanks to anyone who can help get me sorted out</p>\n</blockquote>\n<p>I think the right input here is <code>box.mk</code> instead of <code>mk</code> in the match</p>",
        "id": 241434140,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622745585
    },
    {
        "content": "<p>but you might also want to use the nightlies instead of the stable release (which is quite old in comparison)</p>",
        "id": 241434202,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622745604
    },
    {
        "content": "<p>Thanks! That does indeed fix that, and now I'm off to go debug a universe issue in what I was originally trying to do.  I'm curious though, why there are cases in the tests that work without those qualifications, such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Sum.str</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"some \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"none\"</span>\n</code></pre></div>\n<p>which typechecks just fine without using <code>Option.some</code> etc.</p>",
        "id": 241435133,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1622746071
    },
    {
        "content": "<p>Because some and none are exported to be in the global namespaces. You can also say \"open box\" to open that namespace, or say \"open box in def ...\" to open it solely local to the body of the definition</p>",
        "id": 241435998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622746437
    },
    {
        "content": "<p>cf. <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L985\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L985</a> and the corresponding docs for lean 3 where it works the same way: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=export#more-on-namespaces\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=export#more-on-namespaces</a></p>",
        "id": 241436116,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622746480
    },
    {
        "content": "<p>Thanks, both of you!</p>",
        "id": 241436149,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1622746500
    }
]