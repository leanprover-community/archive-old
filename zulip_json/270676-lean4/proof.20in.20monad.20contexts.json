[
    {
        "content": "<p>Recently, I am analyzing an algorithm from a logical point of view and have a question. Are there any ways to prove <code>p : α → Prop</code> for a value <code>m α</code> inside the monad context (i.e. <code>do</code> block) of a monad <code>m</code>?<br>\nHere is an example: how can I fill the following <code>sorry</code>, where <code>i &lt; tableB.size</code> is required?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">tableA</span> <span class=\"n\">tableB</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tableA.size</span> <span class=\"bp\">=</span> <span class=\"n\">tableB.size</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exampleConvert</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mi</span> <span class=\"bp\">←</span> <span class=\"n\">tableA.findIdxM</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">mi.toMonad</span>\n  <span class=\"n\">return</span> <span class=\"n\">tableB</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know if-then-else does the trick in this case, but is there no use of the term <code>h</code> above?</p>",
        "id": 315505636,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1670903138
    },
    {
        "content": "<p>You should pack the proof together with the value. Ideally <code>a.findIdxM?</code> would return <code>... (Fin a.size)</code> to do that.</p>",
        "id": 315538678,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670921740
    },
    {
        "content": "<p>I don't think there's a nice way to do that without adjusting <code>findIdxM?</code>, though in this case you should just use <code>findIdx?</code> and prove that if it returns an index, it is in bounds, with which you can construct the <code>Fin</code> after the fact</p>",
        "id": 315538957,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670921845
    },
    {
        "content": "<p>In this specific example, you are right; <code>findIdx?</code> (or <code>getIdx?</code>) is the right function to use. I wonder if there are general method to fill</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x₁</span> <span class=\"bp\">←</span> <span class=\"n\">operation₁</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ... -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">xₙ</span> <span class=\"bp\">←</span> <span class=\"n\">operationₙ</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x₁</span> <span class=\"c\">/-</span><span class=\"cm\"> ... -/</span> <span class=\"n\">xₙ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nextOperation</span> <span class=\"n\">x</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>If <code>n=1</code>, we can consider a \"lift\" of <code>operation</code> to a term of type <code>m (Subtype p)</code> as you pointed out; thank you. I however have no idea when <code>n≧2</code>.</p>",
        "id": 315611462,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1670943761
    },
    {
        "content": "<p>By \"lift\" above, I mean a term <code>operation' : m (Subtype p)</code> such that <code>Subtype.val &lt;$&gt; operation' = operation</code>.</p>",
        "id": 315612226,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1670943957
    },
    {
        "content": "<p>I think it would be an interesting general problem? If the monad turns out to be a modality we have modal type theories for that (and we can simulate the modal type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">□</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\square A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord amsrm\">□</span><span class=\"mord mathnormal\">A</span></span></span></span> by <code>[Lock] -&gt; A</code> where <code>Lock</code> is a magical opaque proposition.</p>",
        "id": 315625735,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670947562
    },
    {
        "content": "<p>There shoule be some analogy to modality: e.g. this <a href=\"https://www.sciencedirect.com/science/article/pii/S0304397596001697\">paper</a>, while I am not sure how it works in the problem above. For example, I do not think a monad <code>m : Type _ → Type _</code> directly induce a \"modal operator\"<code>Prop → Prop</code> in general.</p>",
        "id": 315631277,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1670948991
    },
    {
        "content": "<p>Doesn't F# have some method for lifting propositions within the monad to propositions about the monadic value? I haven't read the F# monads paper but it might be worth looking into</p>",
        "id": 316714929,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671448037
    },
    {
        "content": "<p>(I've been thinking about this a lot, and this is a question of interest for some professors at Carnegie Mellon... I'd love any papers/resources about this if anyone has any)</p>",
        "id": 316715127,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671448113
    },
    {
        "content": "<p>Do you mean F*?</p>",
        "id": 316721091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671450131
    },
    {
        "content": "<p>Err, yes <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> 6am brain...</p>",
        "id": 316723264,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671450966
    },
    {
        "content": "<p>Thank you for commenting. I took a glance at papers around F* and found its solution to the problem interesting. I will learn around Hoare logic and Dijkstra monads.</p>",
        "id": 317814146,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1671962476
    },
    {
        "content": "<p>I also found that the problem in the question above is subtle for general monads. Indeed, to fill <code>sorry</code> above, we need to lift <code>x : m α</code> to <code>xh : m (Subtype p)</code> for the given predicate <code>p : α → Prop</code> so that <code>Subtype.val &lt;$&gt; xh = x</code>. As any proofs are erased from structures at compile-time, the term <code>xh</code> should be determined as soon as it turns out the lift is possible. For this, <code>Functor.map (f:=m) (α:=Subtype p) Subtype.val</code> must be injective, though it is not in general. For example, for a locally connected topos (e.g. the sheaf topos over a locally connected space, or the topos of quivers), there is a monad that maps objects to the set of connected components, which does not preserve monomorphisms in general.</p>",
        "id": 317815776,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1671963400
    },
    {
        "content": "<p>Since any functor preserves split monomorphisms, <code>Classical.choice</code> may help. However, I suspect that it breaks computability.</p>",
        "id": 317816033,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1671963602
    },
    {
        "content": "<p>Anyway, this shows that we need some extra structures in addition to monads.</p>",
        "id": 317816349,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1671963804
    }
]