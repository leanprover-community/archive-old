[
    {
        "content": "<p>The following MWE triggers unreachable code in the latest nightly (nightly-2022-05-04):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"sd\">/-- A curried function of exactly `n` arguments; `α → ... → α → β` -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">CurriedFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">CurriedFun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n\n<span class=\"sd\">/-- A curried type function of `n` arguments, i.e., `Type u → Type u → ... → Type u` -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">CurriedTypeFun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">CurriedFun</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- In my actual code, `GenTypeFun` is distinct from `CurriedTypeFun`, and `m` is used -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">GenTypeFun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"o\">:=</span> <span class=\"n\">CurriedFun</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">asCurried</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">GenTypeFun</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CurriedTypeFun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>   <span class=\"mi\">0</span>    <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">τ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asCurried</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">asCurried</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"bp\">'</span><span class=\"n\">unreachable'</span> <span class=\"n\">code</span> <span class=\"n\">was</span> <span class=\"n\">reached</span>\n\n<span class=\"bp\">'</span><span class=\"n\">unreachable'</span> <span class=\"n\">code</span> <span class=\"n\">was</span> <span class=\"n\">reached</span>\n</code></pre></div>\n<p>Note that my code triggers the same error without <code>sorry</code>'s, those are not the issue.</p>\n<p>Termination should be easy to prove, it just recurses on <code>n</code>, but adding the termination hint does not fix the issue.</p>",
        "id": 281159704,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1651673077
    },
    {
        "content": "<p>The issue seems to be with the simultaneous match on <code>n</code> and <code>m</code>, the following code works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asCurried</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">GenTypeFun</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CurriedTypeFun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n                <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">τ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asCurried</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281164821,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1651675156
    },
    {
        "content": "<p>Pushed a fix for this <a href=\"https://github.com/leanprover/lean4/commit/16ed5a321366b08b9dadcc59d6f35da281c8b8cb\">https://github.com/leanprover/lean4/commit/16ed5a321366b08b9dadcc59d6f35da281c8b8cb</a></p>",
        "id": 281169789,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651677063
    }
]