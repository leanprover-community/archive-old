[
    {
        "content": "<p>I remember being positively surprised by how snappy the language server was in 4.0.0-M1.<br>\nBut now there seems to be a one second delay before you get any response from lean.</p>",
        "id": 224472084,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611927999
    },
    {
        "content": "<p>That would most likely be <a href=\"https://github.com/leanprover/lean4/pull/285\">https://github.com/leanprover/lean4/pull/285</a> :)<br>\nWe haven't fine-tuned the delay yet, and it also feels much longer than that sometimes, not sure about that yet</p>",
        "id": 224472369,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611928197
    },
    {
        "content": "<p>I believe Lean waits until you haven't typed anything for a second.  So the delay can even be infinitely long.</p>",
        "id": 224473580,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611928819
    },
    {
        "content": "<p>I think something more like 200ms is appropriate - slow enough that if you are in the middle of typing it doesn't try to elaborate all the time but picking up as soon as you stop or slow down</p>",
        "id": 224474106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611929034
    },
    {
        "content": "<p>100ms would be great since that's about when people notice a delay but that's too fast for typing so you probably won't get much benefit from a delay that shourt</p>",
        "id": 224474215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611929076
    },
    {
        "content": "<p>Yeah, we should definitely give a lower delay a try</p>",
        "id": 224474245,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611929098
    },
    {
        "content": "<p>As well as actually cancelling elaboration tasks</p>",
        "id": 224474343,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611929155
    },
    {
        "content": "<p>In lean 3 we use 100ms.</p>",
        "id": 224474406,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611929169
    },
    {
        "content": "<p>(And 200ms for the orange progress bars.)</p>",
        "id": 224474435,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611929186
    },
    {
        "content": "<p>The lean 3 delay is actually just for the error messages.  Processing starts immediately after each keystroke.</p>",
        "id": 224474497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611929220
    },
    {
        "content": "<p>yeah, rather than delaying the processing you can just cancel the previous elaboration, although that causes issues if the processing delay is long because then the user doesn't get any response until they stop and wait</p>",
        "id": 224474620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611929282
    },
    {
        "content": "<p>I haven't tried having a bounded number of in-flight requests (greater than one), that might work to get the best of both worlds</p>",
        "id": 224474966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611929419
    },
    {
        "content": "<p>We do allow parallel requests up to the hardware thread count. There's nothing easy about (timely) cancelling elaboration tasks though.</p>",
        "id": 224475240,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611929554
    },
    {
        "content": "<p>Is it worth making this time configurable via an editor setting?</p>",
        "id": 224499517,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611938642
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 224500506,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611939004
    },
    {
        "content": "<p>Yeah, the plan is to make it an editor option. Users should also be able to set it to 0 in which case elaboration is launched immediately, but beware that this will absolutely eat up your CPU. Personally I don't find it useful to see diagnostics for every half-typed word, so I would use at least 200ms.</p>",
        "id": 224514721,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611945061
    },
    {
        "content": "<p>There is a post on Stack Exchange that I think might be helpful <a href=\"https://ux.stackexchange.com/a/110444\">https://ux.stackexchange.com/a/110444</a></p>",
        "id": 224616566,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612057885
    },
    {
        "content": "<p>And the <a href=\"https://lawsofux.com/laws/doherty-threshold/\">Doherty Threshold</a> article linked there suggests &lt; 400ms is necessary to make Lean \"addictive\"... I am very far from an expert on this but 500ms seems like a very long default value from my recent experience.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/Has.20Lean.204.20gotten.20slower.3F/near/224616566\">said</a>:</p>\n<blockquote>\n<p>There is a post on Stack Exchange that I think might be helpful <a href=\"https://ux.stackexchange.com/a/110444\">https://ux.stackexchange.com/a/110444</a></p>\n</blockquote>",
        "id": 224624692,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612071534
    },
    {
        "content": "<p>Would it be at all feasible to maybe prioritize elaboration?  e.g., You may want the current declaration and visible declarations to be elaborated quickly, but happy to queue up inferring effects on other definitions until more time has passed.</p>",
        "id": 225114628,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1612408962
    },
    {
        "content": "<p>I've been thinking about exploring this in a vscode plugin I'm working on for another language.</p>",
        "id": 225114713,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1612409074
    },
    {
        "content": "<p>It wasn't prioritization per se, but in Lean 3 we have a mode to elaborate only on-screen content. Bringing that to Lean 4 would necessitate extending the LSP.</p>",
        "id": 225133026,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612428869
    },
    {
        "content": "<p>Lean 3 <em>both</em> prioritizes visible declarations (by default), and has a mode to only elaborate on-screen content (you can click on the \"(checking visible files)\" in the status bar and change it to \"visible lines\", or \"visible lines and above\", or a few other options).</p>",
        "id": 225133566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612429232
    },
    {
        "content": "<p>Unfortunately this is less useful than it could be, because Lean 3 can't lower the priority of a task again.  So once something has been on screen, Lean will prioritize it even if you switch to another file.  I was really happy to see this in Lean 4: files just stop elaborating when you switch to another file, and then continue when you switch back.</p>",
        "id": 225133785,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612429369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> in Lean 3, if you close a tab in VScode, is it still high prio? (And once you reopen it?)</p>",
        "id": 225133971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612429484
    },
    {
        "content": "<p>I don't remember precisely, but I think it remains high prio.</p>",
        "id": 225134629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612429902
    },
    {
        "content": "<p>aha, that might explain some crazy experiences I had, that were only fixed by restarting the server.</p>",
        "id": 225134796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612430007
    },
    {
        "content": "<blockquote>\n<p>Bryan Gin-ge Chen: Is it worth making this time configurable via an editor setting?</p>\n</blockquote>\n<p>This should <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/25\">now</a> be possible in the <del>next</del> (current) <code>vscode-lean4</code> release.</p>",
        "id": 240398105,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1622066854
    }
]