[
    {
        "content": "<p>I just found this bug on <code>leanprover/lean4:nightly-2022-04-26</code>:</p>\n<p>If you paste the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo \"</span> <span class=\"o\">(</span><span class=\"s2\">\" bar \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It fails, as expected. But then if you type in the exclamation mark by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo \"</span> <span class=\"o\">(</span><span class=\"s2\">\" bar \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It fails again with the same error, but this failure is unexpected.<br>\nThen if you erase <code>id</code> and type it out again - or if you just edit it in any way, leaving at least a valid name for the <code>ident</code> syntax reference - it suddenly works</p>",
        "id": 280237640,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650991745
    },
    {
        "content": "<p>The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>elaboration function for 'antiquot' has not been implemented\n</code></pre></div>\n<p>And from a working state, you can erase the exclamation mark and type it out again to trigger the error</p>",
        "id": 280237859,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650991842
    },
    {
        "content": "<p>I named this thread <code>antiquot bug</code> but I don't really know if this is an appropriate name</p>",
        "id": 280238071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650991926
    },
    {
        "content": "<p>Yes, it's a bad interaction between the antiquotation syntax and the language server</p>",
        "id": 280238384,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650992061
    },
    {
        "content": "<p>Not sure if this is relevant, but I'm using the <code>lean4</code> extension version <code>v0.0.71</code></p>",
        "id": 280238747,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650992235
    },
    {
        "content": "<p>Should be fixed with <a href=\"https://github.com/leanprover/lean4/tree/829c81d67751b837bb292ae6e7999c4cb7488106/\">https://github.com/leanprover/lean4/tree/829c81d67751b837bb292ae6e7999c4cb7488106/</a></p>",
        "id": 280319590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651048914
    }
]