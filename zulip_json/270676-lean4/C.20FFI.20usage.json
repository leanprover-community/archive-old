[
    {
        "content": "<p>I'm trying to link the BLAKE3 library in C to Lean FFI with extern. My attempt so far is:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// private fields</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which I tried in Lean to represent as an opaque type :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Blake3Hasher</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Which seems to work.<br>\nAnd the initialization function:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_init</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in Lean I tried this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher_init\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">initHasher</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Blake3Hasher</span>\n</code></pre></div>\n<p>But when I try to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_version\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">version</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>For this c header:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nf\">blake3_version</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/nix/store/9abmq17hg5gia3r2h748ps8dm8m3r884-LeanPlay.LeanVersion-c/LeanPlay/LeanVersion.c:820:21: error: called object type 'lean_object *' is not a function or function pointer\nx_1 = blake3_version();\n      ~~~~~~~~~~~~~~^\n1 error generated.\n</code></pre></div>\n<p>How do I link this correctly?</p>",
        "id": 256393196,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1633518615
    },
    {
        "content": "<p>There is no automatic conversion between <code>char *</code> and <code>String</code>, so you will need to implement a wrapper function <code>lean_object * lean_blake3_version(lean_object * unit)</code>/<code>constant version : Unit -&gt; String</code> anyway</p>",
        "id": 256393847,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633519020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/256393196\">said</a>:</p>\n<blockquote>\n<p>which I tried in Lean to represent as an opaque type :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Blake3Hasher</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Which seems to work.</p>\n</blockquote>\n<p>This will break when the runtime tries to increment or decrement the RC of such an object. See <code>lean_external_object</code>, incl. some prior discussions in this stream, for wrapping external resources in Lean objects.</p>",
        "id": 256394481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633519383
    },
    {
        "content": "<p>FYI: two steps of using <code>lean_external_object</code></p>\n<ol>\n<li>Initialization</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_external_class</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_finalizer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// cleanup code such as</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_foreach</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// used for `for in`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">blake3_initialize</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// must be called beforehand</span>\n<span class=\"w\">    </span><span class=\"c1\">// Often I wrap this in an external function and call it with `builtin_initialize` from Lean.</span>\n<span class=\"w\">    </span><span class=\"c1\">// There is another way of calling this each time in `lean4-papyrus`.</span>\n<span class=\"w\">    </span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_register_external_class</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher_finalizer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher_foreach</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_initialize\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">blake3Init</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n\n<span class=\"n\">builtin_initialize</span> <span class=\"n\">blake3Init</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Creation and Usage (usually wrapped into some <code>box</code> and <code>unbox</code> convenience function)</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nf\">blake3_hasher_box</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_external</span><span class=\"p\">(</span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nf\">blake3_hasher_unbox</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">lean_get_external_data</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And note that <code>blake3_hasher_box</code> should be used on heap allocated <code>blake3_hasher *</code>.</p>",
        "id": 256397486,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633521046
    },
    {
        "content": "<p>You can also refer to the <code>IO.FS.Handle</code> example in Lean source code <a href=\"https://github.com/leanprover/lean4/blob/08c2c31fcd74f53d4b1d81bee92a16a369738d91/src/Init/System/IO.lean#L147-L223\">here</a>.</p>",
        "id": 256398107,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633521378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Creating an external class for each C struct is annoying when there're a lot of them. Although <code>[unbox]</code> is noop now, will it be possible in the future that  we can directly unbox a Lean <code>structure</code> into C <code>struct</code> by marking it with <code>attribute [unbox]</code>?</p>",
        "id": 256401010,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633522777
    },
    {
        "content": "<p>Perhaps, but how to then pass it as a pointer is also unclear</p>",
        "id": 256402036,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633523284
    },
    {
        "content": "<p>I have considered several ways of using external <code>struct</code>.</p>\n<ol>\n<li>The first is to simply use the <code>lean_external_class</code> and <code>constant</code>. This is easy to use but it makes the <code>struct</code> completely opaque. We cannot have some proof on it. And since constant cannot be <code>Inhabited</code>, every thing returned have to be <code>IO</code> or <code>Option</code> or something else even if we just want to access the struct field.</li>\n<li>The second one is to use a plain Lean inductive. We can use <code>@[extern] def</code> to access the struct field, but this creates a big overhead when we need to pass the struct back and forth (e.g. epoll or IOCP).</li>\n<li>The third way is to define our own lean_objects, like the standard <code>lean_sarray_object</code>, <code>lean_string_object</code>. But this seems impossible because each of them use a different tag.</li>\n</ol>\n<p>None of them is satisfactory enough, and the most elegant and least overhead approach I can come up with is to directly use <code>struct</code> internally on FFI <code>structure</code>s.</p>",
        "id": 256403022,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633523796
    },
    {
        "content": "<p>Can the overhead in 2. be eliminated via LTO?</p>",
        "id": 256403583,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633524053
    },
    {
        "content": "<p>Runtime representation and Lean representation (<code>constant</code>/<code>inductive</code>) should be mostly orthogonal design decision</p>",
        "id": 256403768,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633524128
    },
    {
        "content": "<p>I think the overhead is mostly in \"translating\" . Can LTO optimize this away?</p>\n<p>Take <code>poll</code> (or <code>WSAPoll</code>) as example.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">pollfd</span><span class=\"w\"> </span><span class=\"n\">fds</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"kt\">nfds_t</span><span class=\"w\"> </span><span class=\"n\">nfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">timeout</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">pollfd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kt\">int</span><span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"p\">;</span><span class=\"w\">       </span><span class=\"cm\">/* file descriptor */</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kt\">short</span><span class=\"w\">  </span><span class=\"n\">events</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"cm\">/* events to look for */</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kt\">short</span><span class=\"w\">  </span><span class=\"n\">revents</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"cm\">/* events returned */</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The Lean side can be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PollFd</span> <span class=\"n\">where</span>\n  <span class=\"n\">fd</span> <span class=\"o\">:</span> <span class=\"n\">FileDesc</span>\n  <span class=\"n\">events</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">PollEvent</span>  <span class=\"c1\">-- where PollEvent is a enum inductive</span>\n  <span class=\"n\">revents</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">PollEvent</span>\n\n<span class=\"kd\">@[extern \"lean_poll\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">poll</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"o\">(</span><span class=\"n\">IO.Ref</span> <span class=\"n\">PollFd</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">USize</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">USize</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>The <code>lean_poll</code> function has to convert <code>PollFd</code> to <code>pollfd</code> to feed and then convert it back to return (overhead: the creation of <code>pollfd</code> and modifying the <code>Array</code>). Also, each events and revents has to be <code>and</code>ed out to turn them into array of PollEvents instead of checking bit needed only.</p>",
        "id": 256406371,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633525252
    },
    {
        "content": "<p>Ah, I assumed you meant to make the constructor and all field accessors <code>@[extern]</code>, like we e.g. do with <code>String</code>. Then the Lean type doesn't really exist at runtime. But the C type still has to be wrapped in a <code>lean_object</code> or somehow be transferred unboxed.</p>",
        "id": 256433852,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633535269
    },
    {
        "content": "<p>I think for structs behind pointers or arrays the most realistic solution for now is to write a metaprogram that translates a C structure declaration to raw accesses of a <code>ByteArray</code></p>",
        "id": 256434220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633535377
    },
    {
        "content": "<p>and/or an of an <code>unsafe</code> <code>Pointer</code> type, which we do not have yet</p>",
        "id": 256434395,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633535428
    },
    {
        "content": "<p>I considered whether </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SomeClassRef</span> <span class=\"n\">where</span>\n        <span class=\"n\">addr</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n\n<span class=\"kd\">@[extern \"lean_create_class_ref\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">SomeClassRef.create</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">SomeClassRef</span>\n</code></pre></div>\n<p>could work, then each function could just cast the address to a struct pointer and operate on this (as this is already unboxed by the compiler). But it would require to track the lifetime manually and in say IO, which isn't very elegant. I like the approach in lean-papyrus by <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> , which distinguishes between OwnerPtr and WeakPtr properly, but such an implementation can be only done in a sufficiently powerful language like C++ / Rust and not in a C.</p>",
        "id": 256449440,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633540969
    },
    {
        "content": "<p>Using a call to buildLeanPackage:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>      <span class=\"ss\">blake3Mod =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n        <span class=\"ss\">name =</span> <span class=\"s2\">\"Blake3\"</span><span class=\"p\">;</span>\n        <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/src</span><span class=\"p\">;</span>\n        <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n        <span class=\"ss\">linkFlags =</span> <span class=\"p\">[</span> <span class=\"s2\">\"-v -l</span><span class=\"si\">${</span>blake3-c<span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"p\">];</span>\n        <span class=\"ss\">staticLibDeps =</span> <span class=\"p\">[</span> blake3-c <span class=\"p\">];</span>\n      <span class=\"p\">};</span>\n</code></pre></div>\n<p>The first few lines of the generated C code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Lean compiler output</span>\n<span class=\"c1\">// Module: Blake3</span>\n<span class=\"c1\">// Imports: Init</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#if defined(__clang__)</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#elif defined(__GNUC__) &amp;&amp; !defined(__CLANG__)</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-but-set-variable\"</span>\n<span class=\"cp\">#endif</span>\n<span class=\"cp\">#ifdef __cplusplus</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"cp\">#endif</span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_hasherFinalize___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_hasherUpdate___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_version</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_init_derive_key</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_initHasher___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_version</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">uint16_t</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_BLAKE3__BLOCK__LEN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_initHasherDeriveKey___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_hasherFinalizeSeek___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_initHasherKeyed___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_finalize_seek</span><span class=\"p\">(</span><span class=\"kt\">uint64_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">uint16_t</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_BLAKE3__MAX__DEPTH</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">uint16_t</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_BLAKE3__KEY__LEN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">uint16_t</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_BLAKE3__OUT__LEN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_init</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_version___closed__1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_finalize</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_internalVersion___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_init_derive_key_raw</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_init_keyed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_initHasherDeriveKeyRaw___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">uint16_t</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_BLAKE3__CHUNK__LEN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ....</span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Blake3_internalVersion___boxed</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">blake3_version</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Full example code here: <a href=\"https://github.com/Anderssorby/LeanPlay\">https://github.com/Anderssorby/LeanPlay</a><br>\nBut this causes the errors:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_internalVersion___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:83: undefined reference to `blake3_version'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_initHasher___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:108: undefined reference to `blake3_hasher_init'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_initHasherKeyed___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:116: undefined reference to `blake3_hasher_init_keyed'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_initHasherDeriveKey___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:124: undefined reference to `blake3_hasher_init_derive_key'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_initHasherDeriveKeyRaw___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:134: undefined reference to `blake3_hasher_init_derive_key_raw'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_hasherUpdate___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:144: undefined reference to `blake3_hasher_update'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_hasherFinalize___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:154: undefined reference to `blake3_hasher_finalize'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `l_Blake3_hasherFinalizeSeek___boxed':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:166: undefined reference to `blake3_hasher_finalize_seek'\n/nix/store/hy3lz2vfv9qq2v5jz9nzlx6mmiaq79rj-binutils-2.35.1/bin/ld: /nix/store/nh3mbs8n9iarlbjx32fmd2b771bqx5v4-Blake3-cc/Blake3.o: in function `_init_l_Blake3_version___closed__1':\n/nix/store/dckyffc4s94gg47nb7xrr69xn4l441fc-Blake3-c/Blake3.c:92: undefined reference to `blake3_version'\n</code></pre></div>\n<p>What am I missing? Should there be a header file inclusion at the  top of this file somehow?</p>",
        "id": 256587057,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1633617056
    },
    {
        "content": "<p>That's from the linker, so it's not header files. Can you post the linker cmdline? Should it be <code>linkFlags = [ \"-v\" \"-l...\" ];</code>?</p>",
        "id": 256587906,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633617363
    },
    {
        "content": "<p>I forgot about <code>staticLibDeps</code> btw. If <code>blake3-c</code> directly contains a <code>.a</code> file, you shouldn't need the <code>-l</code> argument.</p>",
        "id": 256588457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633617559
    },
    {
        "content": "<p>Linker cmdline:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code> <span class=\"s2\">\"/nix/store/ri0cphpgg739axdzgiwl3grawj6nlykg-ccache-links-wrapper-/bin/ld\"</span> --eh-frame-hdr -m elf_x86_64 -o /nix/store/d7q4n09gwnmyan3b1hxjjzswqkg4sn69-leanplay/bin/leanplay /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/crt1.o /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/crti.o /nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib/gcc/x86_64-unknown-linux-gnu/10.3.0/crtbegin.o -L/nix/store/fx58y0jdzd2xggdy0pqag2ffj72l7w33-gmp-6.2.1/lib -L/nix/store/12j5q4qa7f1h5qcxy47hycl18m6ych4f-Init-lib -L/nix/store/v7a28x16z8afha1nyrx5wi28v8mynccd-Std-lib -L/nix/store/60fckhkp33hnb35da605spn3m28h1vd3-Lean-lib -L/nix/store/fmam7m6307bwyjqx351y13j6js204xgq-leancpp/lib/lean -L/nix/store/hbqyp5xq6yi4sw5lm22i22sqyffvzi0n-leanshared -L/nix/store/1nzq03jahnla4gibxc8jmhbqi5j808ib-leanc/lib -L/nix/store/1nzq03jahnla4gibxc8jmhbqi5j808ib-leanc/lib/lean -L/nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib -L/nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib/gcc/x86_64-unknown-linux-gnu/10.3.0 -L/nix/store/lg104nh0szci8slz5z6494m457jm5y3p-gcc-10.3.0-lib/x86_64-unknown-linux-gnu/lib -L/nix/store/d3r0hhgljsp0nk5n4ra2k2ykvjyah96z-clang-12.0.1-lib/lib -L/nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib -L/nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib/gcc/x86_64-unknown-linux-gnu/10.3.0 -L/nix/store/lg104nh0szci8slz5z6494m457jm5y3p-gcc-10.3.0-lib/x86_64-unknown-linux-gnu/lib -L/nix/store/d3r0hhgljsp0nk5n4ra2k2ykvjyah96z-clang-12.0.1-lib/lib -L/nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib64/gcc/x86_64-unknown-linux-gnu/10.3.0 -L/nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib64/gcc/x86_64-unknown-linux-gnu/10.3.0/../../../../lib64 -L/nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib64/gcc/x86_64-unknown-linux-gnu/10.3.0/../../.. -dynamic-linker<span class=\"o\">=</span>/nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/ld-linux-x86-64.so.2 -dynamic-linker<span class=\"o\">=</span>/nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/ld-linux-x86-64.so.2 /nix/store/2cwkzhb0k8k1mn206kzh91kcsqc3rcgz-LeanPlay-lib/libLeanPlay.a /nix/store/1b3sx4l56s2sw5clwzca2ab9z69xfhnj-Blake3-lib/libBlake3.a /nix/store/12j5q4qa7f1h5qcxy47hycl18m6ych4f-Init-lib/libInit.a /nix/store/50waard4c0nfjrrmiwwv0nd2l0xpcm29-Lake-lib/libLake.a /nix/store/60fckhkp33hnb35da605spn3m28h1vd3-Lean-lib/libLean.a /nix/store/yz4r96wavknfijbbnif9kc0zq85zfxp8-Leanpkg-lib/libLeanpkg.a /nix/store/v7a28x16z8afha1nyrx5wi28v8mynccd-Std-lib/libStd.a --start-group -lleancpp -lLean --end-group --start-group -lInit -lStd -lleanrt --end-group -lstdc++ -lm -lgmp -ldl -lgcc --as-needed -lgcc_s --no-as-needed -lpthread -lc -lgcc --as-needed -lgcc_s --no-as-needed /nix/store/cj8kp411lblbdm4qj94s14h99dx1pv4b-gcc-10.3.0/lib/gcc/x86_64-unknown-linux-gnu/10.3.0/crtend.o /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/crtn.o\n</code></pre></div>",
        "id": 256669290,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1633651641
    },
    {
        "content": "<p>The blake3-c is a .so file I think. I had troubles compiling to a .a static file.</p>",
        "id": 256669453,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1633651782
    },
    {
        "content": "<p>I only see a <code>/nix/store/1b3sx4l56s2sw5clwzca2ab9z69xfhnj-Blake3-lib/libBlake3.a</code> in that cmdline. Does <code>nm</code> says that that file contains <code>blake3_version</code>?</p>",
        "id": 256745241,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633702204
    },
    {
        "content": "<p><code>linkFlags = [ blake3-c ];</code> works. I have to say though that putting a .so, or really any file, directly into Nix' <code>$out</code> instead of making that a folder is highly unconventional :) .</p>",
        "id": 256766128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633710546
    },
    {
        "content": "<p>Now if only all bug reports were as easily reproducible as <code>nix build .#executable</code> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> ...</p>",
        "id": 256766387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633710626
    },
    {
        "content": "<p>I'm getting a segmentation fault when running <code>nix build .#tests</code> for my blake3 bindings.<br>\n<a href=\"https://github.com/yatima-inc/lean-blake3\">https://github.com/yatima-inc/lean-blake3</a><br>\nFull output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nix</span> <span class=\"n\">build</span> <span class=\"bp\">.#</span><span class=\"n\">tests</span> <span class=\"bp\">-</span><span class=\"n\">vL</span>\n<span class=\"n\">building</span> <span class=\"bp\">'/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p6prlan0h9mlhkb9wbsg5cx8gmfxpda8</span><span class=\"bp\">-</span><span class=\"n\">Tests.HashString.drv'...</span>\n<span class=\"n\">Tests.HashString</span><span class=\"bp\">&gt;</span> <span class=\"n\">bash</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">7</span><span class=\"o\">:</span>     <span class=\"mi\">7</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault</span>      <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"n\">dumped</span><span class=\"o\">)</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">$</span><span class=\"n\">out</span><span class=\"bp\">/$</span><span class=\"n\">oleanPath</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"bp\">/$</span><span class=\"n\">cPath</span> <span class=\"bp\">$</span><span class=\"n\">leanPath</span> <span class=\"bp\">$</span><span class=\"n\">leanFlags</span> <span class=\"bp\">$</span><span class=\"n\">leanPluginFlags</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">builder</span> <span class=\"n\">for</span> <span class=\"bp\">'/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p6prlan0h9mlhkb9wbsg5cx8gmfxpda8</span><span class=\"bp\">-</span><span class=\"n\">Tests.HashString.drv'</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">139</span><span class=\"bp\">;</span>\n       <span class=\"n\">last</span> <span class=\"mi\">1</span> <span class=\"n\">log</span> <span class=\"n\">lines</span><span class=\"o\">:</span>\n       <span class=\"bp\">&gt;</span> <span class=\"n\">bash</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">7</span><span class=\"o\">:</span>     <span class=\"mi\">7</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault</span>      <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"n\">dumped</span><span class=\"o\">)</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">$</span><span class=\"n\">out</span><span class=\"bp\">/$</span><span class=\"n\">oleanPath</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"bp\">/$</span><span class=\"n\">cPath</span> <span class=\"bp\">$</span><span class=\"n\">leanPath</span> <span class=\"bp\">$</span><span class=\"n\">leanFlags</span> <span class=\"bp\">$</span><span class=\"n\">leanPluginFlags</span>\n       <span class=\"n\">For</span> <span class=\"n\">full</span> <span class=\"n\">logs</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"bp\">'</span><span class=\"n\">nix</span> <span class=\"n\">log</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p6prlan0h9mlhkb9wbsg5cx8gmfxpda8</span><span class=\"bp\">-</span><span class=\"n\">Tests.HashString.drv'.</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"n\">dependencies</span> <span class=\"n\">of</span> <span class=\"n\">derivation</span> <span class=\"bp\">'/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">waq526gdyni9bim6cqgzgj5j78dq6v25</span><span class=\"bp\">-</span><span class=\"n\">Tests</span><span class=\"bp\">-</span><span class=\"n\">depRoot.drv'</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"n\">dependencies</span> <span class=\"n\">of</span> <span class=\"n\">derivation</span> <span class=\"bp\">'/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">rxwqmvssr2di81i17bvk5f2nn7c2wk5c</span><span class=\"bp\">-</span><span class=\"n\">Tests</span><span class=\"bp\">-</span><span class=\"n\">depRoot.drv'</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 257690160,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634301294
    },
    {
        "content": "<p>The type of the function doesn't seem to match the C function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher_update\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">hasherUpdate</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Hasher</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm not surprised that you get a segfault when converting <code>void</code> to <code>blake3_hasher *</code>.</p>",
        "id": 257690585,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301489
    },
    {
        "content": "<p>True, but how do I correctly translate this mutable function?</p>",
        "id": 257691053,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634301721
    },
    {
        "content": "<p>I was hoping lean would give me a warning or somehow figure out how to link this signature correctly. How can I manage the c code generation to behave as I want?</p>",
        "id": 257691243,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634301815
    },
    {
        "content": "<p>It would be great if there was a lean-bindgen</p>",
        "id": 257691407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634301878
    },
    {
        "content": "<p>I would do the usual <code>implementedBy</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">HasherPointed</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hasher</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">HasherPointed.type</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Hasher</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">HasherPointed.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[extern \"blake3_hasher_update\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">hasherUpdateExtern</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">unsafeIO'</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">unsafeIO</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span> <span class=\"n\">e.toString</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">hasherUpdateImpl</span> <span class=\"o\">(</span><span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeIO'</span> <span class=\"k\">do</span>\n    <span class=\"n\">hasherUpdateExtern</span> <span class=\"n\">hasher</span> <span class=\"n\">input</span> <span class=\"n\">length</span>\n    <span class=\"n\">hasher</span>\n\n<span class=\"kd\">@[implementedBy hasherUpdateImpl]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">hasherUpdate</span> <span class=\"o\">(</span><span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span>\n</code></pre></div>",
        "id": 257691427,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301891
    },
    {
        "content": "<p>There is probably an easier way to launder <code>IO</code> functions, but I can't remember it right now.</p>",
        "id": 257691466,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301908
    },
    {
        "content": "<p>it shouldn't be hard to write something to read the lean type and produce a plausible looking C header</p>",
        "id": 257691468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634301911
    },
    {
        "content": "<p>If we're already generating C code, then we could just do inline-c.lean</p>",
        "id": 257691544,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301953
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/inline-c\">https://hackage.haskell.org/package/inline-c</a></p>",
        "id": 257691612,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301968
    },
    {
        "content": "<p>An <code>unsafe</code> term-mode macro would also be convenient.</p>",
        "id": 257691652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634301988
    },
    {
        "content": "<p>Is there a way to write entire C functions in lean? I recall seeing some way to do this with little snippets like <code>(float)(x + y)</code> but I would rather not do a whole function like that</p>",
        "id": 257691714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302019
    },
    {
        "content": "<p>but it would be nice to be able to write the shim from lean ABI to a normal looking C function in a bit of lean code</p>",
        "id": 257691814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302071
    },
    {
        "content": "<blockquote>\n<p>recall seeing some way to do this with little snippets like (float)(x + y) but I would rather not do a whole function like that</p>\n</blockquote>\n<p>There's no law that requires you to write that string manually. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  If you're willing to use gcc, then you can even define functions in that string:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">my_function</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And then we could make Lean macros that expand into that attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inlineC</span>\n    <span class=\"n\">float</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">cosf</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>Other options include generating a C source file as a side effect, or adding support to lean for extra C source code output.</p>",
        "id": 257692800,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634302533
    },
    {
        "content": "<p>Yeah, I thought about using <code>({ ... })</code> here, but it would be nice to have something more \"official\" from the compiler</p>",
        "id": 257693239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302735
    },
    {
        "content": "<p>Generating a C source file sounds like it would be hell for <code>lake</code></p>",
        "id": 257693433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302811
    },
    {
        "content": "<p>The other interesting question is how to add <code>#include &lt;...&gt;</code>, I'm not sure if that's possible atm.</p>",
        "id": 257693621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634302880
    },
    {
        "content": "<p>I think the ideal low level interface would just be something like <code>Compiler.addIncludeFile \"windows.h\"</code> or <code>Compiler.addCFunction \"float foo() { return 42; }\"</code> which just gets added to the list of functions to emit for the current file</p>",
        "id": 257693882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302979
    },
    {
        "content": "<p>This also depends  heavily on which direction one wants Lean to go. PR <a href=\"https://github.com/leanprover/lean4/pull/694\">#694</a> is all about removing inline C code from Lean (so it can support other backends -- such as LLVM). I think adding an inline C dialect would be moving further in a direction that Lean probably doesn't want to go.</p>",
        "id": 257693969,
        "sender_full_name": "Mac",
        "timestamp": 1634303028
    },
    {
        "content": "<p>Tough, if the idea is that such inline C would generate a separate C file that is compiled and linked into the package separately rather than be part of the current C emitter that would probably still be supportable by alternative backends. Thus, such an approach may still be feasible.</p>",
        "id": 257694542,
        "sender_full_name": "Mac",
        "timestamp": 1634303277
    },
    {
        "content": "<p>This procedure with an IO binding and an unsafeIO' to convert it into a pure function could be made into a general bind_gen-like macro.</p>",
        "id": 257694619,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634303305
    },
    {
        "content": "<p>Well, <code>hasherUpdate</code> in that snippet isn't really <em>safe</em>; it modifies the hasher in-place, so it's not referentially transparent</p>",
        "id": 257694748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634303376
    },
    {
        "content": "<p>A correct implementation should check the refcount and make a copy if it is shared first</p>",
        "id": 257694876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634303422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/257691427\">said</a>:</p>\n<blockquote>\n<p>I would do the usual <code>implementedBy</code> </p>\n</blockquote>\n<p>I was also under the impression using <code>unsafeIO</code> was heavily discouraged. Is that right, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>",
        "id": 257694944,
        "sender_full_name": "Mac",
        "timestamp": 1634303454
    },
    {
        "content": "<p>Ok, so the lean compiler can't detect such problems?</p>",
        "id": 257695142,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634303537
    },
    {
        "content": "<p>no</p>",
        "id": 257695200,
        "sender_full_name": "Mac",
        "timestamp": 1634303570
    },
    {
        "content": "<p>The lean compiler is barely involved. The shim would normally be the one to handle this</p>",
        "id": 257695225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634303583
    },
    {
        "content": "<p>It is weird to me that your extern function doesn't have more <code>lean_object *</code> in it</p>",
        "id": 257695315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634303624
    },
    {
        "content": "<p>Correct me if I'm wrong, but I think the right companion to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher_update\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">hasherUpdate</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hasher</span> <span class=\"o\">:</span> <span class=\"n\">Hasher</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Hasher</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257695936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634303908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Thinking about it some more, I don't think we can get away from usage of C in conjunction with lean. The whole lean API is written in C; how are you going to deal with <code>lean_unbox</code>, <code>lean_inc</code> etc otherwise?</p>",
        "id": 257696603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304196
    },
    {
        "content": "<p>For writing code that works with lean FFI, you either have to write C or something about as complicated that binds to all these functions</p>",
        "id": 257696755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/257696603\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Thinking about it some more, I don't think we can get away from usage of C in conjunction with lean. The whole lean API is written in C; how are you going to deal with <code>lean_unbox</code>, <code>lean_inc</code> etc otherwise?</p>\n</blockquote>\n<p>But the C API is just linked in. It's source language is irrelevant. Lean can emit whatever it wants without that mattering.</p>",
        "id": 257697888,
        "sender_full_name": "Mac",
        "timestamp": 1634304804
    },
    {
        "content": "<p>But that is not the signature I have and I don't want to change stuff in the BLAKE3 c implementation.</p>",
        "id": 257697922,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634304823
    },
    {
        "content": "<p>that's why there is a shim</p>",
        "id": 257697951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> you need to write glue code to translate between the two</p>",
        "id": 257698015,
        "sender_full_name": "Mac",
        "timestamp": 1634304853
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> what language should the shim be written in?</p>",
        "id": 257698035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304864
    },
    {
        "content": "<p>Theoretically it can be anything that understands the C ABI, but I don't think we want to be writing LLVM</p>",
        "id": 257698104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> C is fine.  But so is C++/C#/Rust/whatever. The shim is also linked in, it source language is relevant.</p>",
        "id": 257698119,
        "sender_full_name": "Mac",
        "timestamp": 1634304906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Is there no way around? Some functionality in lean for specifying this perhaps?</p>",
        "id": 257698268,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634304973
    },
    {
        "content": "<p>I agree with you, but you have to make a choice somehow, and ideally one that doesn't make building it a nightmare</p>",
        "id": 257698274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It is important that this not just a me issue, there are multiple other people writing alternative backends for Lean. After all, PR <a href=\"https://github.com/leanprover/lean4/pull/694\">#694</a> wasn't mine.</p>",
        "id": 257698294,
        "sender_full_name": "Mac",
        "timestamp": 1634304987
    },
    {
        "content": "<p>Separate linking is a fine technical solution, but the build tool needs to understand what's going on</p>",
        "id": 257698360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/257698268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Is there no way around? Some functionality in lean for specifying this perhaps?</p>\n</blockquote>\n<p>Sadly, at the moment, the answer to this is a big no. Lean unfortunately currently supports very few external types (directly). Just uint8/16/32/64 and double -- that's it.</p>",
        "id": 257698437,
        "sender_full_name": "Mac",
        "timestamp": 1634305059
    },
    {
        "content": "<p>Gabriel's solution with inline C seems plausible for the present</p>",
        "id": 257698574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/257698360\">said</a>:</p>\n<blockquote>\n<p>Separate linking is a fine technical solution, but the build tool needs to understand what's going on</p>\n</blockquote>\n<p>Yeah, and <code>lake</code> already does.</p>",
        "id": 257698589,
        "sender_full_name": "Mac",
        "timestamp": 1634305112
    },
    {
        "content": "<p>How does lake handle this now?</p>",
        "id": 257698652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305150
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/tree/master/examples/ffi\">https://github.com/leanprover/lake/tree/master/examples/ffi</a></p>",
        "id": 257698686,
        "sender_full_name": "Mac",
        "timestamp": 1634305165
    },
    {
        "content": "<p>I kind of want to try Lean + Rust FFI now</p>",
        "id": 257698969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> So the solution of <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> would not work? I'm wondering how to proceed with this now.</p>",
        "id": 257699293,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634305395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/257698574\">said</a>:</p>\n<blockquote>\n<p>Gabriel's solution with inline C seems plausible for the present</p>\n</blockquote>\n<p>I think an inline C solution that produced a separate C shim that was compiled and linked separately could be quite desirable . For one, It would keep the C source and Lean bindings tied together in the source. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"n\">c</span> <span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">cosf</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>would compile to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"frob\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"nf\">frob</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cosf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257700219,
        "sender_full_name": "Mac",
        "timestamp": 1634305769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> I think Mac's solution is easier to work from since it's a complete worked example and I imagine you will have a decent amount of shim code, not to mention linking with the blake headers</p>",
        "id": 257700438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305843
    },
    {
        "content": "<p>Is this valid source?<br>\nI see in the generated C code that it generates <code>lean_object *</code> for all non-trivial types.</p>",
        "id": 257700517,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634305875
    },
    {
        "content": "<p><code>lean_obj_arg</code> is used for all types except \"unboxed\" scalar types, which means basically <code>USize</code>, <code>UInt64</code>, <code>UInt32</code>, <code>Float</code> and maybe a few others</p>",
        "id": 257700672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305926
    },
    {
        "content": "<p>and <code>b_lean_obj_arg</code> is used when the object is \"borrowed\" i.e., defined with <code>(foo : @&amp; Foo)</code> -- which means the caller does not increment the reference counter.</p>",
        "id": 257701048,
        "sender_full_name": "Mac",
        "timestamp": 1634306073
    },
    {
        "content": "<p>But I don't see entirely how to use this solution. Do I have to create an entire intermediary c-lib that includes lean.h?</p>",
        "id": 257701257,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634306151
    },
    {
        "content": "<p>yes</p>",
        "id": 257701521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634306253
    },
    {
        "content": "<p>well, a file at least</p>",
        "id": 257701553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634306268
    },
    {
        "content": "<p>it should probably be compiled at least to a static library as each dependent of your library will also need to link it in.</p>",
        "id": 257701808,
        "sender_full_name": "Mac",
        "timestamp": 1634306360
    },
    {
        "content": "<p>Where is <code>lean.h</code> anyway? The one in the source depends on <code>config.h</code> that doesn't exist, and I can't find any file called <code>lean.h</code> in the nightlies</p>",
        "id": 257703205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634306832
    },
    {
        "content": "<blockquote>\n<p>[whole discussion about \"could we have API interfaces without C?\"]</p>\n</blockquote>\n<p>I don't think that we be a big problem as long as we have enough \"intrinsics\", i.e., IO functions that operate on pointers, that can access refcounts, etc.  And also a way to link to libraries and call exported functions.  <a href=\"https://docs.python.org/3/library/ctypes.html\">ctypes</a> works quite well in python.</p>",
        "id": 257703208,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634306834
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h\">https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h</a></p>",
        "id": 257703808,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634307043
    },
    {
        "content": "<p>I know about that, I'm asking how to make a C compiler approved <code>lean.h</code></p>",
        "id": 257703886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307072
    },
    {
        "content": "<p><code>lean.h</code> contains <code>#include &lt;lean/config.h&gt;</code> and there is no file called <code>config.h</code> in the distribution</p>",
        "id": 257703980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307122
    },
    {
        "content": "<p>there is a <code>config.h.in</code> that is apparently built into <code>config.h</code> but I don't want to build lean from source</p>",
        "id": 257704111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307167
    },
    {
        "content": "<p>Looks fine to me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span>\n<span class=\"n\">config.h</span>  <span class=\"n\">lean.h</span>  <span class=\"n\">lean_gmp.h</span>  <span class=\"n\">version.h</span>\n</code></pre></div>",
        "id": 257704164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634307196
    },
    {
        "content": "<p>that's odd:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">-</span><span class=\"n\">al</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/lib/lean/src/include/lean/</span>\n<span class=\"n\">total</span> <span class=\"mi\">8</span>\n<span class=\"n\">drwxr</span><span class=\"bp\">-</span><span class=\"n\">xr</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"n\">mario</span> <span class=\"n\">mario</span> <span class=\"mi\">4096</span> <span class=\"n\">Sep</span> <span class=\"mi\">29</span> <span class=\"mi\">01</span><span class=\"o\">:</span><span class=\"mi\">47</span> <span class=\"bp\">./</span>\n<span class=\"n\">drwxr</span><span class=\"bp\">-</span><span class=\"n\">xr</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"mi\">3</span> <span class=\"n\">mario</span> <span class=\"n\">mario</span> <span class=\"mi\">4096</span> <span class=\"n\">Sep</span> <span class=\"mi\">29</span> <span class=\"mi\">01</span><span class=\"o\">:</span><span class=\"mi\">47</span> <span class=\"bp\">../</span>\n</code></pre></div>",
        "id": 257704381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307270
    },
    {
        "content": "<p>Latest as well?</p>",
        "id": 257704472,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634307312
    },
    {
        "content": "<p>yes</p>",
        "id": 257704540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307335
    },
    {
        "content": "<p>Do I have to fill in the <code>lean_object*</code> struct by hand? Or is there an easier way of doing this?</p>",
        "id": 257704774,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634307425
    },
    {
        "content": "<p>use <code>lean_alloc_external</code> to create one, and <code>lean_is_exclusive</code> to do the copy on write stuff</p>",
        "id": 257705019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> no, you use one of the API methods to create objects of <code>lean_object*</code> -- which you use depends on what object you are trying to construct.</p>",
        "id": 257705087,
        "sender_full_name": "Mac",
        "timestamp": 1634307536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Not sure what to say...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"n\">unchanged</span> <span class=\"bp\">-</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">66</span><span class=\"n\">fcfcce3716</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n\n<span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"bp\">.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/include/lean/</span>\n<span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r-- 259 sebastian  1 Jan  1970 config.h</span>\n<span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r-- 73k sebastian  1 Jan  1970 lean.h</span>\n<span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r-- 551 sebastian  1 Jan  1970 lean_gmp.h</span>\n<span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"c1\">--r-- 405 sebastian  1 Jan  1970 version.h</span>\n</code></pre></div>",
        "id": 257705213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634307588
    },
    {
        "content": "<p>Oh, that's not the same folder</p>",
        "id": 257705513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307693
    },
    {
        "content": "<p>I was in <code>lib/lean/src/include/lean/</code></p>",
        "id": 257705549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634307707
    },
    {
        "content": "<p>Oh :)</p>",
        "id": 257705576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634307715
    },
    {
        "content": "<p>I've tried this, but how do i go from <code>char *</code> to <code>lean_object *</code>? </p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_SHARED</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">lean_string_mk</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">l_blake3_version</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">blake3_version</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_string_mk</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I can't find any api function for doing this conversion.</p>",
        "id": 257706949,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634308221
    },
    {
        "content": "<p>I think this is what the shim should look like:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// replace with #include &lt;blake3.h&gt;</span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">blake3_hasher</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_copy</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_free</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_external_class</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_finalizer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher_free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_foreach</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">blake3_initialize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_register_external_class</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher_finalizer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher_foreach</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_ensure_exclusive_blake3_hasher</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_is_exclusive</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_external</span><span class=\"p\">(</span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher_copy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_ensure_exclusive_blake3_hasher</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher_update</span><span class=\"p\">(</span><span class=\"n\">lean_get_external_data</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">lean_sarray_cptr</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257707324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634308359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> You should use <code>lean_mk_string</code> not <code>lean_string_mk</code></p>",
        "id": 257707741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634308535
    },
    {
        "content": "<p>There are some lean examples that just inline it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Additional version description like \"nightly-2018-03-11\" -/</span>\n<span class=\"kd\">@[extern c inline \"lean_mk_string(LEAN_SPECIAL_VERSION_DESC)\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">version.getSpecialDesc</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>",
        "id": 257707930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634308612
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257723163,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634314223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Where do I find the header files in the nix build?</p>",
        "id": 257821705,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634380987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> <code>lean-bin-tools-unwrapped</code>, <a href=\"https://github.com/leanprover/lean4/blob/8d10197164830e3e8cbc6ed321e5fe920299c162/nix/bootstrap.nix#L108\">https://github.com/leanprover/lean4/blob/8d10197164830e3e8cbc6ed321e5fe920299c162/nix/bootstrap.nix#L108</a></p>",
        "id": 257823494,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634382825
    },
    {
        "content": "<p>There's also <code>lean-all</code> that is mostly equivalent to the release tarballs, but that is intended more for interactive use than as a build dependency</p>",
        "id": 257823603,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634382930
    },
    {
        "content": "<p>I still have some issues with building. Why doesn't the extern detect the declaration in the c-shim?<br>\nThe full example can be found at <br>\n<a href=\"https://github.com/yatima-inc/lean-blake3\">https://github.com/yatima-inc/lean-blake3</a><br>\nand by running <code>nix build .#tests -L</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tests.HashString</span><span class=\"bp\">&gt;</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Blake3.internalVersion'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_internalVersion___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_internalVersion'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do I need to do some additional linking? Why is there no warning that the linking failed when building just the module?</p>",
        "id": 258232087,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634662740
    },
    {
        "content": "<p>Maybe it's that <code>l_blake3_version</code> declared with <code>static</code>? Static functions are not visible to other files.</p>",
        "id": 258233608,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634663067
    },
    {
        "content": "<p>Didn't work now either.</p>",
        "id": 258238046,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634664529
    },
    {
        "content": "<p><code>nix build .#modRoot</code> does work though</p>",
        "id": 258238883,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634664834
    },
    {
        "content": "<p>But this doesn't require any linking apparently, because it runs without including the static library.</p>",
        "id": 258239632,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634665072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> what is the <code>lean</code> command being used to run these tests?</p>",
        "id": 258245576,
        "sender_full_name": "Mac",
        "timestamp": 1634667078
    },
    {
        "content": "<p>It is essentially leanc and lean using the <code>buildLeanPackage</code> nix function</p>",
        "id": 258245766,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634667147
    },
    {
        "content": "<p>is there any way to get the exact <code>lean</code> inovaction?</p>",
        "id": 258245993,
        "sender_full_name": "Mac",
        "timestamp": 1634667236
    },
    {
        "content": "<p>if you want to use C bindings in at interpretation time you need to pass the package (i.e., <code>Blake3</code>) as a shared library built with <code>leanc -shared</code> to <code>lean</code> as a <code>--plugin</code></p>",
        "id": 258246408,
        "sender_full_name": "Mac",
        "timestamp": 1634667369
    },
    {
        "content": "<p>Thanks that lead me on the right track. I need to use the <code>pluginDeps</code> option to get libraries passed to <code>--plugin</code>. I was using <code>staticLibDeps</code>. This could use a lot more docs.</p>",
        "id": 258257020,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634671536
    },
    {
        "content": "<p>I've added freeing and copy functions to <code>blake3_hasher*</code> even though this is not supported in the original API. How do I wrap this inside a <code>lean_object*</code> so that it can be used within the language?</p>",
        "id": 258358784,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634733432
    },
    {
        "content": "<p>I think it would look like my long post above</p>",
        "id": 258358968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733509
    },
    {
        "content": "<p>Yes, that was very helpful, but how do I extract the data from the <code>lean_external_object*</code> so that I can do a copy or free data?</p>",
        "id": 258359603,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634733731
    },
    {
        "content": "<p>Note that both <code>copy</code> and <code>free</code> are called in the code there</p>",
        "id": 258359681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733772
    },
    {
        "content": "<p>the free function is called in the finalizer that gets passed to <code>lean_register_external_class</code>, and the copy function is called by <code>lean_ensure_exclusive_blake3_hasher</code> which is used in any mutating function</p>",
        "id": 258359813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733840
    },
    {
        "content": "<p>Yes, but those functions needs to be implemented and they are also working on the wrong type. I need to access the external data wrapped inside the <code>lean_object*</code> created by the <code>lean_alloc_external</code>. Is is safe to just do <code>l-&gt;data</code>?</p>",
        "id": 258360599,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634734182
    },
    {
        "content": "<p>I see there is a function for that.</p>",
        "id": 258360732,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634734221
    },
    {
        "content": "<p>I don't follow. Both <code>blake3_hasher_copy</code> and <code>blake3_hasher_free</code> should have natural types there, those are the functions you are supposed to implement</p>",
        "id": 258361110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634734378
    },
    {
        "content": "<p>Is it necessary to assert the type of the <code>lean_object*</code> btw?</p>",
        "id": 258361205,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634734426
    },
    {
        "content": "<p>dunno, are you ok with UB if it's not true?</p>",
        "id": 258361282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634734451
    },
    {
        "content": "<p>In your snippet you used <code>blake3_hasher*</code> but their types are <code>lean_object*</code> I just need to transform form that</p>",
        "id": 258361394,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634734494
    },
    {
        "content": "<p>Could you show your code or a snippet thereof? The code I posted is type correct and passes a C compiler</p>",
        "id": 258361489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634734532
    },
    {
        "content": "<p>I got a lot of warnings when running that.<br>\nMy attempt so far:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cm\">/*</span>\n<span class=\"cm\"> * Copy the contents of the hasher to a new memory location.</span>\n<span class=\"cm\"> */</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_copy</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">lean_get_external_data</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_external</span><span class=\"p\">(</span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\"> * Free the memory for this hasher. This makes all other references to this address invalid.</span>\n<span class=\"cm\"> */</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">blake3_hasher_free</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">blake3_hasher</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">blake3_hasher</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">lean_get_external_data</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// Mark memory as available</span>\n<span class=\"w\">  </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258362476,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634734881
    },
    {
        "content": "<p>I guess I could add this assert at the start of those functions, but is it really necessary?</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">lean_get_external_class</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">g_blake3_hasher_external_class</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258362814,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634735026
    },
    {
        "content": "<p>Now it compiles without warning, but I wonder how to use the lean command correctly (from nix). When building the package I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">terminate</span> <span class=\"n\">called</span> <span class=\"n\">after</span> <span class=\"n\">throwing</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception'</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"n\">what</span><span class=\"o\">():</span>  <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">plugin</span><span class=\"o\">,</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p7pjngnra1z3vr59rxnqgh4kfa3nfbf7</span><span class=\"bp\">-</span><span class=\"n\">libblake3.so</span><span class=\"bp\">/</span><span class=\"n\">libblake3.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">blake3_version</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">bash</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">7</span><span class=\"o\">:</span>     <span class=\"mi\">7</span> <span class=\"n\">Aborted</span>                 <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"n\">dumped</span><span class=\"o\">)</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">$</span><span class=\"n\">out</span><span class=\"bp\">/$</span><span class=\"n\">oleanPath</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"bp\">/$</span><span class=\"n\">cPath</span> <span class=\"bp\">$</span><span class=\"n\">leanPath</span> <span class=\"bp\">$</span><span class=\"n\">leanFlags</span> <span class=\"bp\">$</span><span class=\"n\">leanPluginFlags</span>\n</code></pre></div>\n<p>What sort of <code>--plugin</code> arguments are necessary to link this correctly?</p>",
        "id": 258364903,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634735799
    },
    {
        "content": "<p>Who is calling those functions? Are these functions exposed directly to lean?</p>",
        "id": 258381833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634741535
    },
    {
        "content": "<p><code>blake3_hasher_free</code> definitely looks like a not safe thing to do</p>",
        "id": 258381991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634741590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> </p>\n<p>Some notes:</p>\n<ol>\n<li>It would be wiser to use a function like the following to access the external class:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_external_class</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">get_blake3_hasher_class</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// Use static to make this thread safe by static initialization rules.</span>\n<span class=\"w\">  </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_external_class</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_register_external_class</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">blake3_hasher_finalizer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">blake3_hasher_foreach</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This ensure the class is always properly initialized before use.</p>\n<ol start=\"2\">\n<li>Looking at your code in <a href=\"https://github.com/yatima-inc/lean-blake3/blob/fad8c8e6263c7abb3f0e18f725fa0974e45960b6/c/blake3-shim.c#L41-L43\"><code>blake3-shim.c</code></a>, <code>blake3_hasher_finalizer</code> calls <code>blake3_hashe_free</code> which is just wrong. The finalizer is past the external pointer (i.e., the <code>blake3_hasher</code>) not the <code>lean_object*</code>.</li>\n</ol>",
        "id": 258387185,
        "sender_full_name": "Mac",
        "timestamp": 1634743365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I don't understand. Is the finalizer not supposed to free the memory? I noticed there was a type error there which I have fixed.</p>",
        "id": 258431291,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634758940
    },
    {
        "content": "<p>This doesn't solve my other problem of getting lean to correctly link the plugin.</p>",
        "id": 258431881,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634759172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/258431291\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> I don't understand. Is the finalizer not supposed to free the memory? I noticed there was a type error there which I have fixed.</p>\n</blockquote>\n<p>No, the finalizer is suppose to free memory. My point was simply that the pointer it receives is a the <code>blake3_hasher</code> directly and not its the <code>lean_object</code> that wraps it.</p>",
        "id": 258432629,
        "sender_full_name": "Mac",
        "timestamp": 1634759459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/258431881\">said</a>:</p>\n<blockquote>\n<p>This doesn't solve my other problem of getting lean to correctly link the plugin.</p>\n</blockquote>\n<p>The problem here is that the plugin you are passing is a shared library compiled from the shim itself rather than from the entire Lean module linked with the shim. That is, the plugin is suppose to be the entire <code>Blake3</code> Lean package not just the shim (and thus the package itself doesn't need the plugin).</p>",
        "id": 258432772,
        "sender_full_name": "Mac",
        "timestamp": 1634759513
    },
    {
        "content": "<p>Ok, that is what I suspected. But how do I compile the Blake3 module together with the shim?</p>",
        "id": 258433961,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634759971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> just compile the shim into a static library and pass it an additional static library o the lean package build.</p>",
        "id": 258442944,
        "sender_full_name": "Mac",
        "timestamp": 1634763423
    },
    {
        "content": "<p>That is what I was doing before and it didn't work. Including the staticLib as a dependency to the build command. I'll experiement some more. Where can I find docs and code for the <code>lean</code> command?</p>\n<p>Using <code>get_blake3_hasher_class</code> leads to the error: <code>initializer element is not constant</code>. Is there another way to do this?</p>",
        "id": 258507635,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634805375
    },
    {
        "content": "<p>This is not how the lean source does it. It uses Mario's solution. Is this some new C/C++ feature?</p>",
        "id": 258510418,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634806752
    },
    {
        "content": "<p>It's C++, but I suspect it won't work anyway because the Lean data structures are not yet initialized at that point. It's a classic case of the static initialization order fiasco (except that Lean doesn't use static initialization for this very reason).</p>",
        "id": 258510783,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634806921
    },
    {
        "content": "<p>This is more of a nix question. How do I get this to build correctly?</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>        <span class=\"ss\">blake3-shim =</span> <span class=\"nb\">import</span> <span class=\"o\">.</span><span class=\"l\">/c/default.nix</span> <span class=\"p\">{</span>\n          <span class=\"k\">inherit</span> system pkgs blake3-c lean<span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n        <span class=\"ss\">project =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n          <span class=\"k\">inherit</span> name<span class=\"p\">;</span>\n          <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/src</span><span class=\"p\">;</span>\n          <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n          <span class=\"c1\"># linkFlags = [ blake3-shim.staticLib ];</span>\n          <span class=\"c1\"># staticLibDeps = [ blake3-shim.staticLib ];</span>\n          <span class=\"c1\"># pluginDeps = [ blake3-shim.dynamicLib ];</span>\n        <span class=\"p\">};</span>\n        <span class=\"ss\">tests =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n          <span class=\"ss\">name =</span> <span class=\"s2\">\"Tests\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/tests</span><span class=\"p\">;</span>\n          <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n          <span class=\"ss\">deps =</span> <span class=\"p\">[</span> project <span class=\"p\">];</span>\n          <span class=\"ss\">pluginDeps =</span> <span class=\"p\">[</span> project<span class=\"o\">.</span>sharedLib <span class=\"p\">];</span>\n          <span class=\"ss\">staticLibDeps =</span> <span class=\"p\">[</span> blake3-shim project<span class=\"o\">.</span>staticLib <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n</code></pre></div>\n<p>The blake3-shim build works fine, but building <code>project.executable</code>gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">156</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">called</span> <span class=\"n\">object</span> <span class=\"n\">type</span> <span class=\"bp\">'</span><span class=\"n\">lean_object</span> <span class=\"bp\">*'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">function</span> <span class=\"n\">or</span> <span class=\"n\">function</span> <span class=\"n\">pointer</span>\n<span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">blake3_hasher</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n      <span class=\"bp\">~~~~~~~~~~~~~^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">261</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">called</span> <span class=\"n\">object</span> <span class=\"n\">type</span> <span class=\"bp\">'</span><span class=\"n\">lean_object</span> <span class=\"bp\">*'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">function</span> <span class=\"n\">or</span> <span class=\"n\">function</span> <span class=\"n\">pointer</span>\n<span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">lean_blake3_initialize</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n      <span class=\"bp\">~~~~~~~~~~~~~~~~~~~~~~^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">undeclared</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_HasherPointed'</span>\n<span class=\"n\">l_Blake3_HasherPointed</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_HasherPointed</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n<span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">implicit</span> <span class=\"n\">declaration</span> <span class=\"n\">of</span> <span class=\"n\">function</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_HasherPointed'</span> <span class=\"n\">is</span> <span class=\"n\">invalid</span> <span class=\"k\">in</span> <span class=\"n\">C99</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Wimplicit</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"bp\">-</span><span class=\"n\">declaration</span><span class=\"o\">]</span>\n<span class=\"n\">l_Blake3_HasherPointed</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_HasherPointed</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n                         <span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">343</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">undeclared</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_HasherPointed'</span><span class=\"bp\">;</span> <span class=\"n\">did</span> <span class=\"n\">you</span> <span class=\"n\">mean</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_HasherPointed'</span><span class=\"bp\">?</span>\n<span class=\"n\">lean_mark_persistent</span><span class=\"o\">(</span><span class=\"n\">l_Blake3_HasherPointed</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n                     <span class=\"bp\">^~~~~~~~~~~~~~~~~~~~~~</span>\n                     <span class=\"n\">_init_l_Blake3_HasherPointed</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_HasherPointed'</span> <span class=\"n\">declared</span> <span class=\"n\">here</span>\n<span class=\"n\">l_Blake3_HasherPointed</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_HasherPointed</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n                         <span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">352</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">undeclared</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_initHasher'</span>\n<span class=\"n\">l_Blake3_initHasher</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_initHasher</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n<span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">352</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">implicit</span> <span class=\"n\">declaration</span> <span class=\"n\">of</span> <span class=\"n\">function</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_initHasher'</span> <span class=\"n\">is</span> <span class=\"n\">invalid</span> <span class=\"k\">in</span> <span class=\"n\">C99</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Wimplicit</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"bp\">-</span><span class=\"n\">declaration</span><span class=\"o\">]</span>\n<span class=\"n\">l_Blake3_initHasher</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_initHasher</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n                      <span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">353</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">undeclared</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_initHasher'</span><span class=\"bp\">;</span> <span class=\"n\">did</span> <span class=\"n\">you</span> <span class=\"n\">mean</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_initHasher'</span><span class=\"bp\">?</span>\n<span class=\"n\">lean_mark_persistent</span><span class=\"o\">(</span><span class=\"n\">l_Blake3_initHasher</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n                     <span class=\"bp\">^~~~~~~~~~~~~~~~~~~</span>\n                     <span class=\"n\">_init_l_Blake3_initHasher</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">xn1f3mbdnfymy1cw109axj1jnm85fksy</span><span class=\"bp\">-</span><span class=\"n\">Blake3</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Blake3.c</span><span class=\"o\">:</span><span class=\"mi\">352</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">_init_l_Blake3_initHasher'</span> <span class=\"n\">declared</span> <span class=\"n\">here</span>\n<span class=\"n\">l_Blake3_initHasher</span> <span class=\"bp\">=</span> <span class=\"n\">_init_l_Blake3_initHasher</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>It seems like <code>PointedType</code> assumes that the extern value is a function?</p>",
        "id": 258556457,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634826879
    },
    {
        "content": "<p>In the generated code:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ....</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">_init_l_Blake3_instInhabitedHasher___closed__1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">blake3_hasher</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258557139,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634827089
    },
    {
        "content": "<p>I must probably implement a lean_object in the c-shim to solve this. Any tips on a reference impl? <code>io.cpp</code> perhaps? But that is so big and complicated.</p>",
        "id": 258557628,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634827228
    },
    {
        "content": "<p>It looks like it wants to call a function to initialize a new hasher. Why not just write one?</p>",
        "id": 258557944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634827324
    },
    {
        "content": "<p>You declared the hasher like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"blake3_hasher\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">HasherPointed</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span>\n<span class=\"kd\">def</span> <span class=\"n\">Hasher</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">HasherPointed.type</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Hasher</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">HasherPointed.val</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I can't find any precedent in the lean 4 code base for putting an <code>@[extern]</code> on the pointed type itself. My interpretation of the error is that you should be putting the name of the initialization function in this extern declaration, because it will be called as a function. Given your shim code, I think this should be <code>lean_blake3_initialize</code></p>",
        "id": 258559054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634827682
    },
    {
        "content": "<p>I don't think lean cares at all what the name of the C type is (<code>blake3_hasher</code> in this case). It only ever deals with <code>lean_object*</code> values wrapping a <code>void*</code></p>",
        "id": 258559690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634827903
    },
    {
        "content": "<p>Yeah, as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> said, you should not be putting <code>@[extern\\</code> attributes on types.</p>",
        "id": 258559802,
        "sender_full_name": "Mac",
        "timestamp": 1634827937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/258510418\">said</a>:</p>\n<blockquote>\n<p>This is not how the lean source does it. It uses Mario's solution. Is this some new C/C++ feature?</p>\n</blockquote>\n<p>The difference is that the Lean source has an initializer function that is called by the Lean runtime at startup that sets the global variable. Shims generally don't.</p>",
        "id": 258560149,
        "sender_full_name": "Mac",
        "timestamp": 1634828052
    },
    {
        "content": "<p>Ok, I removed the extern and it helped. I also changed the signature of the constructor to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_blake3_initialize\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">initHasher</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Hasher</span>\n</code></pre></div>\n<p>Which led it to be interpreted as a no argument function not a constant, but now I get this error:<br>\nFor building the <code>#executable</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">blake3</span><span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">fp2h123793bxln4cjxy0mz08sf4nx2m3</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">read</span> <span class=\"k\">in</span> <span class=\"n\">flex</span> <span class=\"n\">scanner</span> <span class=\"n\">failed</span>\n<span class=\"n\">blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">clang</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and for building the <code>#tests</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tests.HashString</span><span class=\"bp\">&gt;</span> <span class=\"n\">lean</span><span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"n\">lookup</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">asz64i34j9hx9sj9ihgmqjy3qzxbf99r</span><span class=\"bp\">-</span><span class=\"n\">Blake3.so</span><span class=\"bp\">/</span><span class=\"n\">Blake3.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">lean_blake3_version</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ nm -D /nix/store/asz64i34j9hx9sj9ihgmqjy3qzxbf99r-Blake3.so/Blake3.so <span class=\"p\">|</span> grep blake3\n                 U l_blake3_hasher_finalize\n                 U l_blake3_hasher_update\n                 U lean_blake3_initialize\n                 U lean_blake3_version\n</code></pre></div>\n<p>So what is going on?</p>",
        "id": 258563515,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634829086
    },
    {
        "content": "<p><code>U</code> means \"undefined\"</p>",
        "id": 258564164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634829284
    },
    {
        "content": "<p>I've never seen the first error before; I would guess that one of the inputs is not a valid object file/archive/...</p>",
        "id": 258564351,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634829353
    },
    {
        "content": "<p>I had put the wrong input as a staticLib. <br>\nNow I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Blake3.internalVersion'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_internalVersion___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_Blake3_internalVersion'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_blake3_version\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">internalVersion</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>This function symbol is defined in <code>Blake3.so</code> but the symbol from the BLAKE3 <code>blake3_version</code> is not.<br>\nWhat am I missing?</p>",
        "id": 258572624,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634832358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> looking at your <a href=\"https://github.com/yatima-inc/lean-blake3/blob/8909d33386423742fa9c62fda3c7ab6b52aa0e5f/flake.nix\"><code>flakes.nix</code></a>, your <code>project</code> and <code>tests</code> setup seems suspect. I would expect them to look more like this:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"ss\">project =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n  <span class=\"k\">inherit</span> name<span class=\"p\">;</span>\n  <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/src</span><span class=\"p\">;</span>\n  <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n  <span class=\"ss\">staticLibDeps =</span> <span class=\"p\">[</span> blake3-shim<span class=\"p\">,</span> blake3-c <span class=\"p\">];</span>\n<span class=\"p\">};</span>\n<span class=\"ss\">tests =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n  <span class=\"ss\">name =</span> <span class=\"s2\">\"Tests\"</span><span class=\"p\">;</span>\n  <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/tests</span><span class=\"p\">;</span>\n  <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n  <span class=\"ss\">deps =</span> <span class=\"p\">[</span> project <span class=\"p\">];</span>\n  <span class=\"ss\">pluginDeps =</span> <span class=\"p\">[</span> project <span class=\"p\">];</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 258572833,
        "sender_full_name": "Mac",
        "timestamp": 1634832430
    },
    {
        "content": "<p>What is blake3 in this context?</p>",
        "id": 258573018,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634832494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> good point, fixed (it would be <code>project</code>)</p>",
        "id": 258573169,
        "sender_full_name": "Mac",
        "timestamp": 1634832556
    },
    {
        "content": "<p>It didn't help. I've tried various variations of this:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>        <span class=\"ss\">tests =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n          <span class=\"ss\">name =</span> <span class=\"s2\">\"Tests\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/tests</span><span class=\"p\">;</span>\n          <span class=\"ss\">debug =</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n          <span class=\"ss\">deps =</span> <span class=\"p\">[</span> project <span class=\"p\">];</span>\n          <span class=\"ss\">pluginDeps =</span> <span class=\"p\">[</span> project<span class=\"o\">.</span>sharedLib <span class=\"p\">];</span>\n          <span class=\"ss\">staticLibDeps =</span> <span class=\"p\">[</span> blake3-c<span class=\"o\">.</span>staticLib blake3-shim<span class=\"o\">.</span>staticLib project<span class=\"o\">.</span>staticLib <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n</code></pre></div>",
        "id": 258574662,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634833097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> what errors are you getting?</p>",
        "id": 258575061,
        "sender_full_name": "Mac",
        "timestamp": 1634833232
    },
    {
        "content": "<p>The same as above</p>",
        "id": 258575135,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634833256
    },
    {
        "content": "<p>Personally, I would have suggested building manually and getting that to work before translating it to Nix.</p>",
        "id": 258575168,
        "sender_full_name": "Mac",
        "timestamp": 1634833273
    },
    {
        "content": "<p>so that you have a better understanding of what is suppose to be happening</p>",
        "id": 258575237,
        "sender_full_name": "Mac",
        "timestamp": 1634833303
    },
    {
        "content": "<p>A manual invocation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>/nix/store/4wrg252zqyr33ayx7f2j2sdy793zh5hx-Tests.HashString-depRoot lean --plugin<span class=\"o\">=</span>/nix/store/s4la9xg9da5yixcxlhdnbflqzygkripl-Blake3.so/Blake3.so tests/Tests/HashString.lean\n</code></pre></div>\n<p>Produces the same error.</p>",
        "id": 258581268,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634835616
    },
    {
        "content": "<p>And <code>nm -g</code> on the .so shows that symbol? Could you post the output?</p>",
        "id": 258582171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634835945
    },
    {
        "content": "<p>I guess not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                 <span class=\"n\">U</span> <span class=\"n\">blake3_hasher_update</span>\n                 <span class=\"n\">U</span> <span class=\"n\">blake3_version</span>\n<span class=\"mi\">00000000000602</span><span class=\"n\">e0</span> <span class=\"n\">T</span> <span class=\"n\">initialize_Blake3</span>\n<span class=\"mi\">0000000000210648</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_BLAKE3__BLOCK__LEN</span>\n<span class=\"mi\">0000000000210650</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_BLAKE3__CHUNK__LEN</span>\n<span class=\"mi\">0000000000210640</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_BLAKE3__KEY__LEN</span>\n<span class=\"mi\">0000000000210658</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_BLAKE3__MAX__DEPTH</span>\n<span class=\"mi\">0000000000210628</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_BLAKE3__OUT__LEN</span>\n<span class=\"mi\">00000000000601</span><span class=\"n\">f0</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_hash</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_blake3_hasher_finalize</span>\n<span class=\"mi\">0000000000060160</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_hasherFinalize___boxed</span>\n<span class=\"mi\">0000000000210688</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_HasherPointed</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_blake3_hasher_update</span>\n<span class=\"mi\">00000000000600</span><span class=\"n\">f0</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_hasherUpdate___boxed</span>\n<span class=\"mi\">00000000000600</span><span class=\"n\">c0</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_initHasher___boxed</span>\n<span class=\"mi\">0000000000210670</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_instBlake3HashToString</span>\n<span class=\"mi\">0000000000210610</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_instInhabitedBlake3Hash</span>\n<span class=\"mi\">0000000000210690</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_instInhabitedHasher</span>\n<span class=\"mi\">0000000000060090</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_internalVersion___boxed</span>\n<span class=\"mi\">000000000005</span><span class=\"n\">ff90</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_unsafeIO_x27</span>\n<span class=\"mi\">000000000005</span><span class=\"n\">fd80</span> <span class=\"n\">T</span> <span class=\"n\">l_Blake3_unsafeIO_x27___rarg</span>\n<span class=\"mi\">00000000002106</span><span class=\"n\">a0</span> <span class=\"n\">B</span> <span class=\"n\">l_Blake3_version</span>\n<span class=\"mi\">00000000000613</span><span class=\"n\">a0</span> <span class=\"n\">T</span> <span class=\"n\">lean_blake3_hasher_update</span>\n<span class=\"mi\">0000000000061360</span> <span class=\"n\">T</span> <span class=\"n\">lean_blake3_initialize</span>\n<span class=\"mi\">0000000000061340</span> <span class=\"n\">T</span> <span class=\"n\">lean_blake3_version</span>\n<span class=\"mi\">00000000000601</span><span class=\"n\">b0</span> <span class=\"n\">T</span> <span class=\"n\">l_panic___at_Blake3_hash___spec__1</span>\n</code></pre></div>",
        "id": 258583572,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634836509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> I just managed to manually build and test your package. However, I need to be afk for an hour or less, so I can can't give the full details. A quick note though:</p>\n<ul>\n<li><code>initHasher</code>/<code>hasherFinalize</code> shoudl be externing <code>lean_hasher_initialize</code> and <code>lean_hasher_finalize</code>. And those need to be properly implemented.</li>\n</ul>",
        "id": 258586468,
        "sender_full_name": "Mac",
        "timestamp": 1634837610
    },
    {
        "content": "<p>Hm. I need more details to do replicate that. Can you post your entire command and changes?</p>",
        "id": 258588045,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634838290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span>  my code is now available here: <a href=\"https://github.com/tydeu/lean-blake3\">https://github.com/tydeu/lean-blake3</a></p>",
        "id": 258595683,
        "sender_full_name": "Mac",
        "timestamp": 1634841217
    },
    {
        "content": "<p>Thanks for the help, but I still can't see what is missing in my nix build compared to your Makefile. Can you see it?</p>",
        "id": 258637886,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634861750
    },
    {
        "content": "<p>I've included all the C code as static libs to the <code>lean</code> command where the Blake3 module is compiled and linked.<br>\nThis leads to no errors, but the essential functions like <code>blake3_version</code> is not included (undefined) in either the shared or static lib. In the nix setup I see that this is included as a <code>-Wl,--no-whole-archive</code> option which is fine I guess, but I would want to be able to include this in the lib.</p>\n<p>When I then try to compile the whole library as an executable and include the static libs as an input to the lean command I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"bp\">&gt;</span> <span class=\"n\">lean</span><span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"n\">lookup</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">bbfzi1v8nb14q1kax5ig6h50wnkpsvx5</span><span class=\"bp\">-</span><span class=\"n\">Blake3.so</span><span class=\"bp\">/</span><span class=\"n\">Blake3.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">blake3_version</span>\n</code></pre></div>\n<p>Why doesn't it look for the symbol in the provided static libs (<code>libblake3.a</code>)?<br>\nThe symbols from the shim are included however so why not <code>libblake3.a</code>?<br>\nHow is this not a bug?</p>",
        "id": 258950471,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1635164352
    },
    {
        "content": "<p>I can't make sense of your description. <code>lean</code> doesn't even take static libraries as input, do you mean <code>leanc</code>? Do you have a flake target to reproduce?</p>",
        "id": 258954508,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635166626
    },
    {
        "content": "<p>As for making native code available to the interpreter, <code>--plugin</code> is not the correct way to do that: <a href=\"#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252821607\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mwe.3A.20plugin.3F/near/252821607</a></p>",
        "id": 258958703,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635168562
    },
    {
        "content": "<p>Yes, sorry, I mean <code>leanc</code> to generate an executable.It might be that I'm missing something obvious, but I haven't found it so far.<br>\nBuild <code>.#tests</code> on <a href=\"https://github.com/yatima-inc/lean-blake3\">https://github.com/yatima-inc/lean-blake3</a> to see the error.</p>",
        "id": 258959174,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1635168802
    },
    {
        "content": "<p>So I can fix this by adding the library to <code>LD_PRELOAD</code>? I guess I need to change the nix source a bit to do this.</p>",
        "id": 258966391,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1635171980
    },
    {
        "content": "<p>Yes, it doesn't have any support for that yet. But I was only able to reproduce the \"could not find native implementation\" error using <code>nix build .#tests</code> fwiw.</p>",
        "id": 258968928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635173074
    },
    {
        "content": "<p>Strange. Are you on the newest version? <br>\nAdding <code>LD_PRELOAD</code> doesn't seem to fix the issue so far.</p>",
        "id": 258988818,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1635181264
    },
    {
        "content": "<p>Is there a FFI documentation?</p>",
        "id": 262274742,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637549349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> sadly, no, not really.</p>",
        "id": 262278034,
        "sender_full_name": "Mac",
        "timestamp": 1637554657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262274742\">said</a>:</p>\n<blockquote>\n<p>Is there a FFI documentation?</p>\n</blockquote>\n<p>There is a simple one in the lean4 repo &lt;<a href=\"https://github.com/leanprover/lean4/blob/master/doc/dev/ffi.md\">https://github.com/leanprover/lean4/blob/master/doc/dev/ffi.md</a>&gt;</p>",
        "id": 262282767,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637561632
    },
    {
        "content": "<p>Thanks! I've been using your socket package as a reference but it is a bit more time consuming trying to reverse engineer and deduct what's going on</p>",
        "id": 262309153,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637582203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> Why do you add the <code>lean_obj_arg w</code> parameter in your functions headers even though you never use <code>w</code>?<br>\nExample: <a href=\"https://github.com/xubaiw/lean4-socket/blob/4b95d1c912852db7e39c6d0f7715927fff6dfa0c/native/native.c#L288\">https://github.com/xubaiw/lean4-socket/blob/4b95d1c912852db7e39c6d0f7715927fff6dfa0c/native/native.c#L288</a></p>",
        "id": 262384116,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637618786
    },
    {
        "content": "<p>The IO monad implicitly passes a so called world parameter into the function so the computation is technically speaking pure since an IO function takes a world and produces a new one where its side effect has happened so lean will pass this world argument to the C function as well. However the C function can essentially fully ignore it since it's ...well C and not a pure functional programming language.</p>",
        "id": 262388515,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637621272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 262388566,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637621286
    },
    {
        "content": "<p>It should also be noted that now that <code>BaseIO</code> exists, you should use it instead of <code>IO</code> in the Lean signature of your FFI binding if the native function  does not produce IO errors.</p>",
        "id": 262406209,
        "sender_full_name": "Mac",
        "timestamp": 1637635429
    },
    {
        "content": "<p>Do I need to update lake?</p>",
        "id": 262407364,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637636621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> for what?</p>",
        "id": 262413412,
        "sender_full_name": "Mac",
        "timestamp": 1637643676
    },
    {
        "content": "<p>To use BaseIO</p>",
        "id": 262449048,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637670781
    },
    {
        "content": "<p>I tried using Lean 4 nightly 2021-11-23 and it gave me access to <code>BaseIO</code>. But I could no longer compile my code because it couldn't link to MySQL lib with <code>-lmysqlclient</code>. Maybe it's a bug?</p>",
        "id": 262449548,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637671106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> what version of Lean were you using before?</p>",
        "id": 262450745,
        "sender_full_name": "Mac",
        "timestamp": 1637671864
    },
    {
        "content": "<p>nightly 2021-10-20</p>",
        "id": 262451635,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637672404
    },
    {
        "content": "<p>Now that the linker is bundled with Lean, it will not automatically search arbitrary system paths for libraries anymore. You can add them explicitly instead, e.g. <code>-L /usr/lib/x86_64-linux-gnu/</code></p>",
        "id": 262451932,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637672538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262451932\">said</a>:</p>\n<blockquote>\n<p>Now that the linker is bundled with Lean, it will not automatically search arbitrary system paths for libraries anymore. You can add them explicitly instead, e.g. <code>-L /usr/lib/x86_64-linux-gnu/</code></p>\n</blockquote>\n<p>Is this what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mySQLLinkArg</span> <span class=\"o\">:=</span> <span class=\"s2\">\"-L /usr/lib/x86_64-linux-gnu/\"</span>\n\n<span class=\"n\">package</span> <span class=\"n\">LeanMySQL</span> <span class=\"o\">(</span><span class=\"n\">pkgDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">leanSoureDir</span>\n  <span class=\"n\">libRoots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Ffi</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLibTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cLibTarget</span> <span class=\"n\">pkgDir</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mySQLLinkArg</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This approach still doesn't work</p>",
        "id": 262453579,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637673479
    },
    {
        "content": "<p>Where's your <code>-lmysqlclient</code>?</p>",
        "id": 262453764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637673568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ find /usr/ -name <span class=\"s1\">'libmysqlclient.a'</span>\n/usr/lib/x86_64-linux-gnu/libmysqlclient.a\n</code></pre></div>",
        "id": 262453808,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637673599
    },
    {
        "content": "<p>With nightly 2021-10-20 I was setting <code>def mySQLLinkArg := \"-lmysqlclient\"</code></p>",
        "id": 262454032,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637673708
    },
    {
        "content": "<p>You need both <code>-l</code> and <code>-L</code></p>",
        "id": 262454119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637673733
    },
    {
        "content": "<p>Do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">LeanMySQL</span> <span class=\"o\">(</span><span class=\"n\">pkgDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">leanSoureDir</span>\n  <span class=\"n\">libRoots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Ffi</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLibTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cLibTarget</span> <span class=\"n\">pkgDir</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-L /usr/lib/x86_64-linux-gnu/\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-lmysqlclient\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 262454476,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637673896
    },
    {
        "content": "<p>It says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">library</span> <span class=\"bp\">-</span><span class=\"n\">lmysqlclient</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262454549,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637673927
    },
    {
        "content": "<p>Does it work without the space after <code>-L</code>? If not, what's the output with <code>\"-v\"</code> added to that list?</p>",
        "id": 262454639,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637673964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262454639\">said</a>:</p>\n<blockquote>\n<p>Does it work without the space after <code>-L</code>? If not, what's the output with <code>\"-v\"</code> added to that list?</p>\n</blockquote>\n<p>It worked. It also worked like this: <code>moreLinkArgs := #[\"-L\", \"/usr/lib/x86_64-linux-gnu/\", \"-lmysqlclient\"]</code></p>",
        "id": 262456245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637674734
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 262456425,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637674819
    },
    {
        "content": "<p>Great! I probably don't have to mention that we still need to find out and decide on the best practices in these regards :) . Explicitly specifying the search path might look like a chore, but it is also an explicit reminder that you now depend on something outside of Lean's/Lake's control, so it might not be all bad.</p>",
        "id": 262456650,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637674921
    },
    {
        "content": "<blockquote>\n<p>so it might not be all bad.</p>\n</blockquote>\n<p>Putting <code>-L /usr/lib/x86_64-linux-gnu/</code> into the linker arguments seems like the most non-portable solution though.  It literally won't work on anything except ubuntu on amd64?  AFAICT none of fedora/archlinux/nixos have that directory.  Not to speak of windows or mac.</p>\n<p>I've said it before, but I think we should use the system linker, at least when we're linking to system libraries.</p>",
        "id": 262457398,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637675299
    },
    {
        "content": "<p>Idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">LeanMySQL</span> <span class=\"o\">(</span><span class=\"n\">pkgDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">leanSoureDir</span>\n  <span class=\"n\">libRoots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Ffi</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLibTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cLibTarget</span> <span class=\"n\">pkgDir</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkLibs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"/usr/lib/x86_64-linux-gnu/libmysqlclient.a\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262458156,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637675682
    },
    {
        "content": "<p>It requires me to be precise and explicit about the libs I'm using. Then the linking can be done according to the system I'm using, but this would be abstracted (invisible) to me</p>",
        "id": 262458429,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637675816
    },
    {
        "content": "<p>On Linux the proper way to figure out include and linking flags is to use pkg-config.  This is what pkg-config prints on two different systems (ubuntu and nixos):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ pkg-config --libs --cflags mysqlclient\n-I/usr/include/mysql -lmysqlclient\n$ pkg-config --libs --cflags mysqlclient\n-I/nix/store/3mzvn84d0wq5bvrq0rp4jxwlmprpqkbx-mariadb-connector-c-3.2.3-dev/include/mariadb/ -L/nix/store/3ca2s5k41m9w6mmk8h68ba0g2b2h1mzl-mariadb-connector-c-3.2.3/lib/mariadb/ -lmariadb\n</code></pre></div>\n<p>Note that it doesn't contain enough information to figure out the directory <code>/usr/lib/x86_64-linux-gnu</code> on ubuntu.  I don't know if there's a portable way to do that.  (And none of that would be an issue if we just used the system linker.)</p>",
        "id": 262460121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637676611
    },
    {
        "content": "<p>Hah, I did hope <code>pkg-config</code> would print out the full path. If we use the system linker, should we completely ignore <code>$LEAN_SYSROOT/lib</code> and take all dependencies from the system?</p>",
        "id": 262464645,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637678624
    },
    {
        "content": "<p>I think that's the best option.  All libraries there should be available on every system (certainly once we've switched away from gmp).  We still need to link from $LEAN_SYSROOT/lib/lean though.</p>",
        "id": 262465098,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637678805
    },
    {
        "content": "<p>Except for libc++ probably <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 262465208,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637678863
    },
    {
        "content": "<p>Oh!</p>",
        "id": 262465244,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637678881
    },
    {
        "content": "<p>I guess that's an argument for removing the C++ dependency. <em>ducks</em></p>",
        "id": 262465326,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637678903
    },
    {
        "content": "<p>Would make some things easier for sure</p>",
        "id": 262465406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637678937
    },
    {
        "content": "<p>Note that it's not an issue when linking dynamically, libc++ is completely hidden inside <a href=\"http://libleanshared.so\">libleanshared.so</a> in that case. Now if there was a convenient way to merge static archives...</p>",
        "id": 262465853,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637679139
    },
    {
        "content": "<p>Alternatively, since this libc++.a <em>is</em> special-purposed for Lean, we put it in lib/lean and call it a day...</p>",
        "id": 262466682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637679529
    },
    {
        "content": "<p>I have to disagree with <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, I do not think that using the system linking is the best idea here. The primary reason for this is that Lake <em>wants</em> to know the exact path of the library. The proper way of adding a native library to a package is (using <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>'s package as an example) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">LeanMySQL</span> <span class=\"o\">(</span><span class=\"n\">pkgDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">leanSoureDir</span>\n  <span class=\"n\">libRoots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Ffi</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLibTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cLibTarget</span> <span class=\"n\">pkgDir</span><span class=\"o\">,</span> <span class=\"n\">inputFileTarget</span> <span class=\"s2\">\"path/to/libmysqlclient.a\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This way Lake generates a trace for the library, allowing it to rebuilding the project if the version of the library (e.g., MySQL) changes and supporting the result being used in content-addressed cloud builds.</p>",
        "id": 262487057,
        "sender_full_name": "Mac",
        "timestamp": 1637688565
    },
    {
        "content": "<p>That makes sense if lake builds the library, but if you link against system libraries (like mysqlclient) then you typically 1) only have shared libraries, 2) you don't know the path the library, and 3) there's also the headers which need to be tracked as well.</p>",
        "id": 262487496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637688734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> It should also be true if Lake did not build the library (and in many cases, ideally, lake <em>would</em> be building the library if possible). Lake, like Nix, is designed (and expects) for its traces to properly represent the change of dependencies (all dependencies).  To your specific points: </p>\n<ol>\n<li>So? You can trace shared libraries as well.</li>\n<li>Hence my point for avoiding system libraries. Use a library you know the path to. Or use tools to figure it out -- like <code>llvm-config</code> for LLVM or more general (but OS specific tools) like <code>brew</code>.</li>\n<li>Yes, include directories should also be traced. I am planning on expanding the current <code>oFileTarget</code> to also take an <code>includeDirs</code> argument that uses targets for include directories. However, in some cases (like with Lean) there may be a better proxy for this trace than just the hash of the whole include directory (e.g., Lean's githash).</li>\n</ol>",
        "id": 262488831,
        "sender_full_name": "Mac",
        "timestamp": 1637689273
    },
    {
        "content": "<p>There's also the fact that if <code>lake</code> requires specific paths (to headers and to their respective libs), at least it's completely predictable and clear. It also gives the developer more freedom (with the cost of having to know where things are).</p>",
        "id": 262490283,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637689806
    },
    {
        "content": "<p>Hm, one problem with this approach of not relying on default system parameters is that the package config would end up being specific to my machine. One wouldn't always be able to clone my repo and just compile it out of the box without making sure that every path is correct in the configuration file. I suppose this is a big con?</p>",
        "id": 262491286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637690276
    },
    {
        "content": "<blockquote>\n<p>One wouldn't always be able to clone my repo and just compile it out of the box without making sure that every path is correct in the configuration file. I suppose this is a big con?</p>\n</blockquote>\n<p>Yes, this is why I'm arguing against hardcoding the /usr/lib/x86_64-linux-gnu path and in favor of using pkg-config.</p>",
        "id": 262491412,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637690323
    },
    {
        "content": "<p>How do other build systems solve this problem? If it were like how you build software on Linux, there could be a \"<code>./configure</code>\" that creates a module containing variables with system-specific paths that the Lakefile then makes use of.  That configure script could use <code>pkg-config</code> if it wants.</p>",
        "id": 262492465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637690770
    },
    {
        "content": "<blockquote>\n<p>in many cases, ideally, lake would be building the library if possible</p>\n</blockquote>\n<p>Emphasis on <em>many</em>.  Some stuff like libzstd e.g. can reasonably be built by lake.  Other libraries must absolutely never be vendored, like e.g. fontconfig (the rust ecosystem gets this horribly wrong, resulting in silently broken builds if the vendored fontconfig is used: <a href=\"https://github.com/servo/libfontconfig/issues/58\">https://github.com/servo/libfontconfig/issues/58</a>).</p>",
        "id": 262492706,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637690890
    },
    {
        "content": "<blockquote>\n<p>How do other build systems solve this problem?</p>\n</blockquote>\n<p>Typically by just calling <code>pkg-config</code> during build on linux on mac (I think), and hoping for the best on windows.  You can (and probably should) do the same in your lakefile.  The issue we have here in Lean is that since two days ago, Lean uses a bundled linker which doesn't find system libraries.</p>",
        "id": 262493179,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637691140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262488831\">said</a>:</p>\n<blockquote>\n<p>You can trace shared libraries as well.</p>\n</blockquote>\n<p>To reliably trace shared libraries, you would have to call, or implement the equivalent of, <code>ldd</code> to find transitive dependencies, which I hope we're not planning to do. That together with the path setup problem, which does not seem to have a sane solution on Linux except for Nix, strongly suggests to me that we should not worry about tracing system files.</p>",
        "id": 262493545,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637691347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262493179\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How do other build systems solve this problem?</p>\n</blockquote>\n<p>Typically by just calling <code>pkg-config</code> during build on linux on mac (I think)</p>\n</blockquote>\n<p>If you're using autoconf, I think traditionally <code>pkg-config</code> is used in the <code>./configure</code> script, which generates the Makefile loaded with the system-specific paths.  Lean packages could rely on something similar, where you have to run a script to create either the Lakefile or some file that the Lakefile includes (if that's possible).</p>",
        "id": 262493563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637691356
    },
    {
        "content": "<p>Btw, it should be possible to \"unbundle\" the bundled linker using <code>-Wl,--sysroot=/</code> (untested)</p>",
        "id": 262493621,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637691369
    },
    {
        "content": "<blockquote>\n<p>You can trace shared libraries as well. [..] include directories should also be traced.</p>\n</blockquote>\n<p>This seems like a reasonable idea.  My complaint was about passing the filename to the linker, not rebuilding when dependencies change.  Even more important than changes in the system library headers are imho changes in headers in the project itself.  It might make sense to call <code>cc -M</code> to figure these out.</p>",
        "id": 262493641,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637691383
    },
    {
        "content": "<p>As a point of reference, bazel doesn't track system libraries either: <a href=\"https://github.com/bazelbuild/bazel/issues/4558\">https://github.com/bazelbuild/bazel/issues/4558</a>  (I don't know what the rationale was.)</p>",
        "id": 262494871,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637692005
    },
    {
        "content": "<blockquote>\n<p>supporting the result being used in content-addressed cloud builds.</p>\n</blockquote>\n<p>The following is a bit biased, and I am putting my mathlib hat on.  It's perfectly okay if using system libraries disables cloud caches (for those targets).  Other systems are going to have different builds of these libraries, and so the cache probably misses anyhow.</p>\n<p>(Note that most ffi stuff will probably depend on libc headers, which are system-specific as well.)</p>\n<p>On the other hand it is absolutely crucial that we can be impure and use caches that are built on a different architecture.  That is, cache oleans and c files built on Linux/amd64 and use them on Darwin/amd64, Windows/amd64, Linux/aarch64, etc. (and maybe even Unknown/wasm)</p>\n<p>If this doesn't work with lake, we can continue to use the current leanproject approach of \"upload a tarball with the oleans for every revision\".  But it would be cool to have more fine-grained caching.</p>",
        "id": 262496222,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637692707
    },
    {
        "content": "<p>What was the motivation for bundling a linker?</p>",
        "id": 262499702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637694426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262496222\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>supporting the result being used in content-addressed cloud builds.</p>\n</blockquote>\n<p>The following is a bit biased, and I am putting my mathlib hat on.  It's perfectly okay if using system libraries disables cloud caches (for those targets).  Other systems are going to have different builds of these libraries, and so the cache probably misses anyhow.</p>\n<p>(Note that most ffi stuff will probably depend on libc headers, which are system-specific as well.)</p>\n</blockquote>\n<p>My point here is that, by tracing the system libraries, the resulting trace would be different for each system configuration so the cloud store can be used -- different system would end up pulling the cached artifact that depends on their system-specific files. Without such components in trace,  the trace for a given dependent would appear the same across platforms resulting in invalid cache fetches. This makes cloud storage infeasible for such builds.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262496222\">said</a>:</p>\n<blockquote>\n<p>On the other hand it is absolutely crucial that we can be impure and use caches that are built on a different architecture.  That is, cache oleans and c files built on Linux/amd64 and use them on Darwin/amd64, Windows/amd64, Linux/aarch64, etc. (and maybe even Unknown/wasm)</p>\n<p>If this doesn't work with lake, we can continue to use the current leanproject approach of \"upload a tarball with the oleans for every revision\".  But it would be cool to have more fine-grained caching.</p>\n</blockquote>\n<p>This is already posisble with Lake  because olean traces are just based on the Lean version and the hash of the Lean input files.</p>",
        "id": 262502165,
        "sender_full_name": "Mac",
        "timestamp": 1637695801
    },
    {
        "content": "<p>Another issue with Lean 4 nightly 2021-11-23: I'm not able to use the <code>string</code> lib.</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"qqq\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Causes <code>error: ld.lld: error: undefined symbol: std::allocator&lt;char&gt;::allocator()</code></p>\n<p>PS: It works on nightly 2021-10-20</p>",
        "id": 262544055,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637726260
    },
    {
        "content": "<p>Probably another lib I need to link against, but I don't know which one</p>",
        "id": 262544799,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637727157
    },
    {
        "content": "<p>C++ code should always be linked using the C++ compiler, i.e. not <code>leanc</code>. You should also link to Lean dynamically in this case (<a href=\"https://github.com/leanprover/lean4/blob/f7decd2d464ab679cb73212fb9674aeb92bfe184/tests/compiler/foreign/Makefile#L14-L15\">https://github.com/leanprover/lean4/blob/f7decd2d464ab679cb73212fb9674aeb92bfe184/tests/compiler/foreign/Makefile#L14-L15</a>).</p>",
        "id": 262573786,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637751909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262499702\">said</a>:</p>\n<blockquote>\n<p>What was the motivation for bundling a linker?</p>\n</blockquote>\n<p>See <a href=\"https://github.com/leanprover/lean4/pull/733#issuecomment-948426757\">https://github.com/leanprover/lean4/pull/733#issuecomment-948426757</a></p>",
        "id": 262574085,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637752082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Sorry I didn't get it. What should I change in the <code>lakefile.lean</code> file?</p>",
        "id": 262585447,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637759175
    },
    {
        "content": "<p>I will be using the <code>2021-10-20</code> version in the meantime</p>",
        "id": 262589717,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637761452
    },
    {
        "content": "<p>Yeah, this thread is about <em>figuring out</em> what Lake should be doing with foreign dependencies :) . That <code>leanc</code> used to be able to correctly compile &amp; link C++ code should be regarded as an unplanned coincidence.</p>",
        "id": 262591462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637762289
    },
    {
        "content": "<p>Is there an example of a lakefile that successfully compiles and links C++ code?</p>",
        "id": 262594547,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637763692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Lake has an <a href=\"https://github.com/leanprover/lake/tree/1bcbc327f678b117ccbfed6f804ad62524a3cfe4/examples/ffi\">FFI example</a> in its repository that does exactly that. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262603911,
        "sender_full_name": "Mac",
        "timestamp": 1637768174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  You could also try to use nix for building and distributing your software. I find this the most universal and plug and play solution for building anything although unorthodox. This is especially true for FFI and needing to compile several languages or ensure build stability.<br>\nAs an example you can use this <a href=\"https://github.com/yatima-inc/lean-blake3\">https://github.com/yatima-inc/lean-blake3</a> which currently points to a PR fork of lean4, but which hopefully will be merged soon.</p>",
        "id": 262606737,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1637769587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I'm using that as a reference but it doesn't work. Here's the lakefile: <a href=\"https://github.com/arthurpaulino/LeanMySQL/blob/master/lakefile.lean\">https://github.com/arthurpaulino/LeanMySQL/blob/master/lakefile.lean</a></p>",
        "id": 262609801,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637770937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> can you elaborate as to the error you are encountering?</p>",
        "id": 262609999,
        "sender_full_name": "Mac",
        "timestamp": 1637771036
    },
    {
        "content": "<p>In short, everything was working fine until I started to make use of <code>string</code> in my C++ code. Now <code>lake build</code> reports a lot of errors like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">data</span><span class=\"o\">()</span> <span class=\"n\">const</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">query_all</span><span class=\"o\">(</span><span class=\"n\">mysql</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"o\">()</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mysql_manage_db</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mysql_manage_db</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n</code></pre></div>",
        "id": 262610484,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637771244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> my guess would be that you need to also link your executable to the C++ standard library then (e.g., via <code>-lstdc++</code> or something like that I believe).</p>",
        "id": 262610924,
        "sender_full_name": "Mac",
        "timestamp": 1637771418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262610924\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> my guess would be that you need to also link your executable to the C++ standard library then (e.g., via <code>-lstdc++</code> or something like that I believe).</p>\n</blockquote>\n<p>Do you mean include <code>\"-lstdc++\"</code> in the <code>moreLinkArgs</code> array? I tried it but it still doesn't work</p>",
        "id": 262618825,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637775124
    },
    {
        "content": "<p>Nevermind, I dropped the C++ code snippets</p>",
        "id": 262632393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637782791
    },
    {
        "content": "<p>So, to consolidate the discussion up to this point, the primary issues with the new <code>leanc</code> seem to be:</p>\n<ul>\n<li>system include paths. If <code>oFileTarget</code> is supposed to be used for FFI wrapper C code, it should use the system compiler (as it already does) but also add the Lean include path (or <code>getCFlags</code>, the only additional flag there is <code>-fPIC</code>)</li>\n<li>system library paths. We could switch to the system linker (via <code>cc</code>) either implicitly when <code>moreLinkArgs</code> is specified or explicitly via some new flags like <code>useSystemLibraries := true</code>. For consistency I'd prefer using <code>leanc</code> with <code>-Wl,--sysroot=/</code> though, if that works. Unclear what that should look like on Windows, but that is also true for the \"system linker\".</li>\n</ul>\n<p>Does that sound about right?</p>",
        "id": 262868754,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638013048
    },
    {
        "content": "<ul>\n<li>C++ is complicated in general and should probably just be avoided for simple FFI wrapper code</li>\n</ul>",
        "id": 262868906,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638013257
    },
    {
        "content": "<p>I agree although I think making C++ more accessible in the future can attract more devs</p>",
        "id": 262878151,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638026257
    },
    {
        "content": "<p>I'm trying to parse a string (?) that was returned from my C code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">constant</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n  <span class=\"o\">⟨[],[]⟩</span>\n</code></pre></div>\n<p>But I'm getting the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Which makes sense. But how can I get the string itself from <code>s</code>?</p>",
        "id": 262878494,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638026735
    },
    {
        "content": "<p>Does <code>let ss : String &lt;- s</code> work?</p>",
        "id": 262879334,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638028046
    },
    {
        "content": "<p>No, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`←`</span> <span class=\"n\">and</span> <span class=\"bp\">`&lt;-`</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span> <span class=\"k\">in</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"k\">do</span><span class=\"bp\">`</span> <span class=\"n\">blocks</span><span class=\"o\">,</span> <span class=\"n\">i.e.</span><span class=\"o\">,</span> <span class=\"n\">blocks</span> <span class=\"n\">where</span> <span class=\"n\">Lean</span> <span class=\"n\">implicitly</span> <span class=\"n\">used</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Id</span><span class=\"bp\">`</span> <span class=\"n\">monad</span>\n</code></pre></div>",
        "id": 262879390,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638028094
    },
    {
        "content": "<p>Ohh I missed that the return type is not <code>IO Table</code>. I don't think you can extract the value then.</p>",
        "id": 262879472,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638028240
    },
    {
        "content": "<p>I tried making the return <code>IO Table</code> but it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">IO</span> <span class=\"n\">Table</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Table</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 262879503,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638028318
    },
    {
        "content": "<p>Hmm interested that <code>IO</code> is restricted to <code>Type</code> and is not defined for <code>Type u</code>. I have very little understanding of universes, so I'm can't help here.</p>",
        "id": 262879661,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638028536
    },
    {
        "content": "<p>Is <code>Table</code> a type you have defined? Can't you make it <code>Type</code> instead of <code>Type 1</code>?</p>",
        "id": 262879710,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638028589
    },
    {
        "content": "<p>This is <code>Table</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Table</span> <span class=\"n\">where</span>\n  <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>",
        "id": 262879720,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638028635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262879710\">said</a>:</p>\n<blockquote>\n<p>Is <code>Table</code> a type you have defined? Can't you make it <code>Type</code> instead of <code>Type 1</code>?</p>\n</blockquote>\n<p>How can I do that?</p>",
        "id": 262879788,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638028713
    },
    {
        "content": "<p>You cannot in this case, your Table contains a List of <code>Type</code> so it has to be one universe higher.</p>",
        "id": 262879902,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638028819
    },
    {
        "content": "<p>What about?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Table</span> <span class=\"o\">(</span><span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>\n<p>But that might make all manipulations very difficult.</p>",
        "id": 262879938,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638028861
    },
    {
        "content": "<p>That would work yes.</p>",
        "id": 262879963,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638028906
    },
    {
        "content": "<p>Or fetching types on the fly with typeclasses </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Table</span> <span class=\"n\">where</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">TableTypes</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Table</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I have no clue how are you using <code>Table</code> so both options might not be feasible/useful.</p>",
        "id": 262880146,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638029083
    },
    {
        "content": "<p>Or if <code>Table</code> is encoding some external database, then you probably want <code>types</code> to encode the external \"types\" of its fields, which are not Lean types anyways</p>",
        "id": 262880167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638029127
    },
    {
        "content": "<p>Very good point! You probably do not have a database filled with arbitrary lean types.</p>",
        "id": 262880221,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638029177
    },
    {
        "content": "<p>So something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DatabaseType</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">tagged</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DatabaseType</span>\n <span class=\"bp\">|</span> <span class=\"n\">indexed</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DatabaseType</span>\n <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n\n<span class=\"c1\">-- To get Lean Type equivalent</span>\n<span class=\"kd\">def</span> <span class=\"n\">DatabaseType.toType</span> <span class=\"o\">:</span> <span class=\"n\">DatabaseType</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">tagged</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n <span class=\"bp\">|</span> <span class=\"n\">indexed</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Table</span> <span class=\"n\">where</span>\n  <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DatabaseType</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>",
        "id": 262880415,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638029456
    },
    {
        "content": "<p>Also regarding this parsing function, you:</p>\n<ul>\n<li>Probably don't need it to be a constant, a def should be fine</li>\n<li>Should probably not take an <code>IO String</code> but instead just a string and then have a function that fetches the string via C and applies the parser to it, this way you don't have to bother with all the IO monad stuff in the parser function</li>\n<li>If the parser might fail probably want to use the <code>Except</code> type as a return value.</li>\n</ul>",
        "id": 262880630,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638029672
    },
    {
        "content": "<p>I'm trying to build this function that returns an <code>Array Float</code> to Lean. In C, I have this <code>arr-&gt;data</code>, which is an array of <code>double</code>. The following code already returns an empty array, but how can I add data to it?<br>\nP.S.: more precisely, data from <code>arr-&gt;data</code>?</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">nl_array</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\">    </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">nl_array</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">lean_nl_array_to_lean_array</span><span class=\"p\">(</span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">arr_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nl_array</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">nl_array</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nl_array_unbox</span><span class=\"p\">(</span><span class=\"n\">arr_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_sarray</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"o\">-&gt;</span><span class=\"n\">length</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264059597,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638905847
    },
    {
        "content": "<p>Maybe you could do a memcpy from your data pointer to the return value of <code>lean_sarray_cptr</code>? Although it returns a <code>uint8_t*</code> so maybe it is intended to be used another way...</p>",
        "id": 264060517,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638906229
    },
    {
        "content": "<p>Right, I've been looking at these, trying to figure out how to use them:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_SHARED</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_push</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_float_array_uset</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_is_exclusive</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_copy_float_array</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_cptr</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_float_array_fset</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_uset</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_unbox</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_float_array_set</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unbox</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">lean_sarray_size</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_uset</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But all tricks I've tried have failed so far</p>",
        "id": 264060970,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638906403
    },
    {
        "content": "<p>I've tried, for instance, <code>return lean_float_array_push(ret, 1.0);</code>, but it's causing a segmentation fault error (I was expecting a <code>#[1.0]</code> in Lean)</p>",
        "id": 264061835,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638906757
    },
    {
        "content": "<p>In the worst case scenario I could return a string and parse it in Lean, but I really want to avoid this approach this time <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 264067520,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638909217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/264060517\">said</a>:</p>\n<blockquote>\n<p>Maybe you could do a memcpy from your data pointer to the return value of <code>lean_sarray_cptr</code>? Although it returns a <code>uint8_t*</code> so maybe it is intended to be used another way...</p>\n</blockquote>\n<p>There's <code>lean_float_array_cptr</code>, as shown in the snippet below</p>",
        "id": 264067778,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638909338
    },
    {
        "content": "<p>Still causing a segmentation fault</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#define external extern \"C\" LEAN_EXPORT</span>\n<span class=\"cp\">#define l_arg b_lean_obj_arg</span>\n<span class=\"cp\">#define l_res lean_obj_res</span>\n<span class=\"cp\">#define l_obj lean_object</span>\n\n<span class=\"n\">external</span><span class=\"w\"> </span><span class=\"n\">l_res</span><span class=\"w\"> </span><span class=\"n\">lean_nl_array_to_lean_array</span><span class=\"p\">(</span><span class=\"n\">l_arg</span><span class=\"w\"> </span><span class=\"n\">arr_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nl_array</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">nl_array</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nl_array_unbox</span><span class=\"p\">(</span><span class=\"n\">arr_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">l_res</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_sarray</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"o\">-&gt;</span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"o\">-&gt;</span><span class=\"n\">length</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">destination</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_cptr</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">destination</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"o\">-&gt;</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Can someone spot what I'm doing wrong?</p>",
        "id": 264090870,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638920521
    },
    {
        "content": "<p>That part looks good at a first glance. With gdb on a executable with debug symbols, it's usually not too hard to pin-point the source of a segfault (at the very least, the stack trace).</p>",
        "id": 264126619,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638953436
    },
    {
        "content": "<p>I've changed my approach but I've encountered a similar issue and the problem was that I had to encapsulate my return with <code>lean_io_result_mk_ok</code> because of the expected return on the Lean side</p>",
        "id": 264141350,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638962361
    },
    {
        "content": "<p>Ah, I tried it again and it didn't work. But I'm noticing something strange:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cm\">/* Scalar arrays */</span><span class=\"w\"></span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"w\">   </span><span class=\"n\">m_header</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">        </span><span class=\"n\">m_size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">        </span><span class=\"n\">m_capacity</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">uint8_t</span><span class=\"w\">       </span><span class=\"n\">m_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">lean_sarray_object</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>m_data</code> is a pointer to a 8 bytes memory cell. This function indeed returns such a pointer:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">lean_sarray_cptr</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_to_sarray</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">m_data</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this is the puzzling part: it's casting a <code>uint8_t*</code> into a <code>double*</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"n\">double</span> <span class=\"bp\">*</span> <span class=\"n\">lean_float_array_cptr</span><span class=\"o\">(</span><span class=\"n\">b_lean_obj_arg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">double</span><span class=\"bp\">*</span><span class=\"o\">)(</span><span class=\"n\">lean_sarray_cptr</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">;</span> <span class=\"bp\">//</span> <span class=\"n\">NOLINT</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Maybe it can cause some trouble?</p>",
        "id": 264195916,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638986976
    },
    {
        "content": "<p>I think the <code>memcpy</code> from <code>double*</code> to (actually) <code>uint8_t*</code> is trampling those bytes with nonsense</p>",
        "id": 264199020,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638988175
    },
    {
        "content": "<p>I did a hack to be able to return a tuple of values from FFI. Maybe this is useful to more people:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cm\">/*</span>\n<span class=\"cm\">SDL.pollEvent : IO $ Prod Bool SDL_Event</span>\n<span class=\"cm\">*/</span><span class=\"w\"></span>\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_sdl_poll_event</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">SDL_Event</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">event</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SDL_PollEvent</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_external</span><span class=\"p\">(</span><span class=\"n\">get_sdl_event_class</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// Constructs a (Bool, SDL_Event) tuple</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I guess you could use <code>lean_alloc_ctor</code> to create arbitrary (type erased and unsafe) inductive values given that you know how the underlying structure and order of the constructors of the type you wish to return.</p>",
        "id": 268918827,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642808440
    },
    {
        "content": "<p>This is how the runtime does things also, so I would say this is \"the right way\" rather than a \"hack\" in the sense of a workaround.</p>",
        "id": 268920096,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642809347
    },
    {
        "content": "<p>Wojciech is correct, using <code>lean_alloc_ctor</code>/<code>lean_ctor_set</code> is exactly how you are suppose to create values of (boxed, non-primitive) inductive types using the Lean C API.</p>",
        "id": 268920496,
        "sender_full_name": "Mac",
        "timestamp": 1642809610
    },
    {
        "content": "<p>I've started making several utility C functions for manipulating and creating erased/primitive lean_objects*. Is there any interest in adding these to the lean4 repo?</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * Unwrap an Option of a lean_object* as data for some</span>\n<span class=\"cm\"> * or NULL (0) for none. Unsafe.</span>\n<span class=\"cm\"> */</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nf\">lean_option_unwrap</span><span class=\"p\">(</span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">some_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_ctor_get</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">some_val</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">foreach_noop</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * Option.some a</span>\n<span class=\"cm\"> */</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">lean_mk_option_some</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * Option.none.</span>\n<span class=\"cm\"> * Note that this is the same value for Unit and other constant constructors of inductives.</span>\n<span class=\"cm\"> */</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">lean_mk_option_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">lean_mk_tuple2</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269755922,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1643384767
    },
    {
        "content": "<p>Does anyone know how I can point Clang in the direction of <code>lean/lean.h</code> so I can use it as a language server?</p>",
        "id": 283199000,
        "sender_full_name": "z battleman",
        "timestamp": 1653176603
    },
    {
        "content": "<p>When working with lean C code you usually want to work with the <code>leanc</code> wrapper around <code>clang</code> that does all of this for you, you can use <code>leanc --print-cflags</code> for it to tell you the flags it uses which does include the include paths for what you're looking for.In my case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">leanc</span> <span class=\"c1\">--print-cflags</span>\n<span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/include -fPIC -fvisibility=hidden</span>\n</code></pre></div>",
        "id": 283199486,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653177446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/283199486\">said</a>:</p>\n<blockquote>\n<p>When working with lean C code you usually want to work with the <code>leanc</code> wrapper around <code>clang</code> that does all of this for you, you can use <code>leanc --print-cflags</code> for it to tell you the flags it uses which does include the include paths for what you're looking for.In my case:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">leanc</span> <span class=\"c1\">--print-cflags</span>\n<span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/include -fPIC -fvisibility=hidden</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah thanks so much!</p>",
        "id": 283199942,
        "sender_full_name": "z battleman",
        "timestamp": 1653178196
    },
    {
        "content": "<p>in general is there any documentation? All these functions  and structs and I'm struggling to figure out how it all fits together <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 283237541,
        "sender_full_name": "z battleman",
        "timestamp": 1653233476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"483794\">@z battleman</span> not yet, I believe. The current focus is on porting mathlib to Lean 4. In the meantime, we use each other's ideas and projects as references. If we put together what everyone has already been able to learn and achieve so far, we have a decent library of shared knowledge. So asking things on Zulip is still the best way to figure things out about FFI for now.</p>",
        "id": 283251451,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653252901
    },
    {
        "content": "<p>Should someone PR an update to the manual, just adding more detail about the ABI?  I'd be happy to do it this week if nobody else can</p>",
        "id": 283271066,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653281343
    },
    {
        "content": "<p>(And I was working with <span class=\"user-mention\" data-user-id=\"483794\">@z battleman</span> earlier, so I can maybe pull from that conversation plus the threads on here to figure out what information to include)</p>",
        "id": 283271195,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653281476
    },
    {
        "content": "<p>Is there some up to date repo that uses a somewhat recent toolchain (less than 1 month old) and has the setup to compile C code and use the FFI? Please share <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 299840998,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663704947
    },
    {
        "content": "<p><a href=\"https://github.com/JamesGallicchio/LeanColls\">LeanColls</a> is pretty up to date :)</p>",
        "id": 299841145,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663704994
    },
    {
        "content": "<p>I think doc-gen4 doesn't work on newer versions of Lean because Lake is more than a month out of date, but everything else is working okay</p>",
        "id": 299841319,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663705071
    },
    {
        "content": "<p>Its broken for 2 reasons, a) I'm focusing more attention on fixing the code generator right now and b) And after checking it out briefly just now indeed that the lake in leanprover/lake seems to be out of date? I see that the leanprover/lean4 repo has some commits that seem to address this? But I don't see where those are stored? According to github: \"This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.\" So unless someone could happen to point me at a working Lake that I don't have to swap out again in a few days/weeks because we switched back to the main repo yet again I guess doc-gen will remain broken for now :(</p>",
        "id": 299848185,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663707943
    },
    {
        "content": "<p>Yeah, I was looking into what it would take to update doc-gen4 and realized Lake was blocking it</p>",
        "id": 299849061,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663708436
    },
    {
        "content": "<p>There's a PR that fixes what is needed to update lake</p>",
        "id": 299849143,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663708469
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/pull/123\">https://github.com/leanprover/lake/pull/123</a> this one</p>",
        "id": 299849184,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663708497
    },
    {
        "content": "<p>anyways, this probably should be in a different thread :p</p>",
        "id": 299849210,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663708515
    },
    {
        "content": "<p>It's blocked on some style bikeshedding in <a href=\"https://github.com/leanprover/lake/pull/122\">https://github.com/leanprover/lake/pull/122</a></p>",
        "id": 299849408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663708618
    },
    {
        "content": "<p>The maintenance PRs have been merged. In general, if something in Lake is causing a road block. @ mention or PM me about it and I will prioritize getting it fixed.  I am currently deep in work on my PhD thesis, so I don't read the Zulip as much as I used to, but I do check my email (which notifies me of @ mentions or PMs) and can usually find the time fix things relatively quickly when necessary.</p>",
        "id": 299859447,
        "sender_full_name": "Mac",
        "timestamp": 1663714292
    },
    {
        "content": "<p>Will do!</p>",
        "id": 299859920,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663714591
    },
    {
        "content": "<p>Hi! I'm trying to make <code>lake build</code> succeed on this branch: <a href=\"https://github.com/yatima-inc/OpenSSL.lean/tree/ap/update-toolchain\">https://github.com/yatima-inc/OpenSSL.lean/tree/ap/update-toolchain</a></p>\n<p>I'm getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>~/dev/lean/OpenSSL.lean λ lake build\nLinking libffi.so\nerror: &gt; /home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/leanc -shared -o ./build/lib/libffi.so -Wl,--whole-archive ./build/lib/libffi.a -Wl,--no-whole-archive -L -lssl -fPIC\nerror: stderr:\nld.lld: error: relocation R_X86_64_PC32 cannot be used against symbol 'stderr'; recompile with -fPIC\n&gt;&gt;&gt; defined in /home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib/glibc/libc.so\n&gt;&gt;&gt; referenced by native.c\n&gt;&gt;&gt;               ffi.o:(handle_error) in archive ./build/lib/libffi.a\n\nld.lld: error: relocation R_X86_64_PC32 cannot be used against symbol 'stderr'; recompile with -fPIC\n&gt;&gt;&gt; defined in /home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib/glibc/libc.so\n&gt;&gt;&gt; referenced by native.c\n&gt;&gt;&gt;               ffi.o:(handle_error) in archive ./build/lib/libffi.a\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nerror: external command `/home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/leanc` exited with code 1\n</code></pre></div>\n<p>Help is appeciated!</p>",
        "id": 299865961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663718900
    },
    {
        "content": "<p>I think you're passing <code>-fPIC</code> to the linker instead of passing it to the compiler</p>",
        "id": 299866433,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663719251
    },
    {
        "content": "<p>How can I pass it to the compiler?</p>",
        "id": 299866703,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663719480
    },
    {
        "content": "<p>There's a <code>moreLeancArgs</code> option, but I haven't tested it</p>",
        "id": 299866792,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663719540
    },
    {
        "content": "<p>I've already tried <code>moreLeancArgs := #[\"-fPIC\"]</code> and it gets to the same error <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 299866837,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663719586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> you need to add <code>\"-fPIC\"</code> to the <code>flags</code> of your <code>ffi.o</code> target.</p>",
        "id": 299869797,
        "sender_full_name": "Mac",
        "timestamp": 1663721916
    },
    {
        "content": "<p>Oh wow, I had tried that but it didn't work because I hadn't called <code>lake clean</code> first. Doing <code>lake clean</code> and then <code>lake build</code> worked</p>",
        "id": 299869966,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663722054
    },
    {
        "content": "<p>Please file an issue on that!</p>",
        "id": 299906289,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663748859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you mean an issue in the Lake repo?</p>",
        "id": 299930372,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663758488
    },
    {
        "content": "<p>Yes. This is not desirable behavior, is it?</p>",
        "id": 299930665,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663758614
    },
    {
        "content": "<p>Not rebuilding the library on flag changes, that is</p>",
        "id": 299930729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663758645
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/issues/126\">https://github.com/leanprover/lake/issues/126</a> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 299949788,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663765262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/262610484\">said</a>:</p>\n<blockquote>\n<p>In short, everything was working fine until I started to make use of <code>string</code> in my C++ code. Now <code>lake build</code> reports a lot of errors like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">data</span><span class=\"o\">()</span> <span class=\"n\">const</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">query_all</span><span class=\"o\">(</span><span class=\"n\">mysql</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"o\">()</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mysql_manage_db</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">ffi.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mysql_manage_db</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libffi.a</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>was a resolution to this ever found? i'm currently trying to link against <a href=\"https://github.com/arminbiere/cadical\">CaDiCaL</a>, which is written in c++, but am getting a bunch of linking errors that look like they're from libstdc++ :(</p>",
        "id": 307471978,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667377587
    },
    {
        "content": "<p>actually, okay, switching the compiler to <code>g++</code> and including an explicit <code>-lstdc++</code> linker flag pushes the errors down to linker complaints about <code>-fPIC</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">james</span><span class=\"o\">]</span> <span class=\"n\">eternity2</span> <span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"c1\">--verbose</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">iterators</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">43</span><span class=\"n\">bbbd68a617a0689d4576b8c26f64209f59cc95</span><span class=\"bp\">`</span>\n<span class=\"n\">Compiling</span> <span class=\"n\">cadical_ffi.c</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">g</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">leancadical.o</span> <span class=\"bp\">./</span><span class=\"n\">ffi</span><span class=\"bp\">/</span><span class=\"n\">cadical_ffi.c</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/include -I /home/james/Projects/cadical/src -O3 -fPIC</span>\n<span class=\"n\">Creating</span> <span class=\"n\">libleancadical.a</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/llvm-ar rcs ./build/lib/libleancadical.a ./build/c/leancadical.o</span>\n<span class=\"n\">Linking</span> <span class=\"n\">libleancadical.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/leanc -shared -o ./build/lib/libleancadical.so -Wl,--whole-archive ./build/lib/libleancadical.a -Wl,--no-whole-archive -L /home/james/Projects/cadical/build -l cadical -l stdc++</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_PC32</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"n\">symbol</span> <span class=\"bp\">'</span><span class=\"n\">stderr'</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/lib/glibc/libc.so</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">solver.cpp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">solver.o</span><span class=\"o\">:(</span><span class=\"n\">CaDiCaL</span><span class=\"o\">::</span><span class=\"n\">Solver</span><span class=\"o\">::</span><span class=\"bp\">~</span><span class=\"n\">Solver</span><span class=\"o\">())</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">cadical</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libcadical.a</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 307473621,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667378240
    },
    {
        "content": "<p>lakefile: <a href=\"https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi/lakefile.lean\">https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi/lakefile.lean</a></p>",
        "id": 307474588,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667378610
    },
    {
        "content": "<p>if anyone has suggestions for potential fixes, let me know!</p>",
        "id": 307474639,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667378638
    },
    {
        "content": "<p>Oh I just realized Arthur was posting about the same issue</p>",
        "id": 307475322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667378925
    },
    {
        "content": "<p>I now understand that the issue was compiling cadical without <code>-fPIC</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> seems to work now</p>",
        "id": 307477084,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667379659
    },
    {
        "content": "<p>Okay, now I'm confused again... For some reason my lean file with the extern'd functions is not linking against the shared library <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 307480083,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667380805
    },
    {
        "content": "<p>Okay, having slept, it seems like the shim file's function names are being mangled by g++. I'm not sure why it's mangling the names at all, given that the file is a <code>.c</code> file, but... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> investigating</p>",
        "id": 307573351,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667408566
    },
    {
        "content": "<p>After playing around with more combinations of settings I have somehow gotten stuck in an even more cryptic linking error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">iterators</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">43</span><span class=\"n\">bbbd68a617a0689d4576b8c26f64209f59cc95</span><span class=\"bp\">`</span>\n<span class=\"n\">Compiling</span> <span class=\"n\">cadical_ffi.c</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">cc</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">leancadical.o</span> <span class=\"bp\">./</span><span class=\"n\">ffi</span><span class=\"bp\">/</span><span class=\"n\">cadical_ffi.c</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/include -I /home/james/Projects/cadical/src -O3 -fPIC</span>\n<span class=\"n\">Creating</span> <span class=\"n\">libleancadical.a</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/llvm-ar rcs ./build/lib/libleancadical.a ./build/c/leancadical.o</span>\n<span class=\"n\">Linking</span> <span class=\"n\">libleancadical.so</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/leanc -shared -o ./build/lib/libleancadical.so -Wl,--whole-archive ./build/lib/libleancadical.a -Wl,--no-whole-archive -L /home/james/Projects/cadical/build -l cadical</span>\n<span class=\"n\">Building</span> <span class=\"n\">Eternity2.AuxDefs</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/lib:./build/lib:./build/lib /home/james/.elan/toolchains/leanprover--lean4---nightly-2022-10-27/bin/lean ./././Eternity2/AuxDefs.lean -R ././. -o ./build/lib/Eternity2/AuxDefs.olean -i ./build/lib/Eternity2/AuxDefs.ilean -c ./build/ir/Eternity2/AuxDefs.c --load-dynlib=libleancadical.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleancadical.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">__gxx_personality_v0</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/lean` exited with code 134</span>\n</code></pre></div>\n<p>Has anyone seen this error before? It's being raised by Lean itself D:</p>",
        "id": 307619774,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667423787
    },
    {
        "content": "<p>You could try linking the dynamic library using <code>-Wl,--no-undefined</code>, which might give a better error message if the symbol is already undefined at that stage</p>",
        "id": 307621701,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667424629
    },
    {
        "content": "<p>That was very helpful, actually! I got cadical building with <code>clang</code>, which is a step in the right direction, and now the linker error seems to be just to do with Lean stuff</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Compiling</span> <span class=\"n\">cadical_ffi.c</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">clang</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">leancadical.o</span> <span class=\"bp\">./</span><span class=\"n\">ffi</span><span class=\"bp\">/</span><span class=\"n\">cadical_ffi.c</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/include -I /home/james/Projects/cadical/src -O3 -fPIC</span>\n<span class=\"n\">Creating</span> <span class=\"n\">libleancadical.a</span>\n<span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/llvm-ar rcs ./build/lib/libleancadical.a ./build/c/leancadical.o</span>\n<span class=\"n\">Linking</span> <span class=\"n\">libleancadical.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">james</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-27/bin/leanc -shared -o ./build/lib/libleancadical.so -Wl,--whole-archive ./build/lib/libleancadical.a -Wl,--no-whole-archive -L/home/james/Projects/cadical/build -lcadical --no-undefined</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">lean_register_external_class</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">cadical_ffi.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">leancadical.o</span><span class=\"o\">:(</span><span class=\"n\">leancadical_initialize</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleancadical.a</span>\n</code></pre></div>\n<p>I'm assuming <code>leanc</code>adds the proper search paths to the clang call to find the lean objects, no?</p>",
        "id": 307655578,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667449487
    },
    {
        "content": "<p>Ah, right. If that is the only remaining error, you can drop the <code>--no-undefined</code> again. <a href=\"https://github.com/leanprover/lean4/blob/5249611d75c18e449c19cb8eaa071d00c3347e44/src/CMakeLists.txt#L330-L332\">https://github.com/leanprover/lean4/blob/5249611d75c18e449c19cb8eaa071d00c3347e44/src/CMakeLists.txt#L330-L332</a></p>",
        "id": 307685172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667467476
    },
    {
        "content": "<p>Hrm, it actually was not the only remaining error... D: my lack of C++ experience is unfortunate here. what flags does the <code>leanc</code> wrapper pass to clang automatically? (if any)</p>",
        "id": 307796125,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667495515
    },
    {
        "content": "<p>I'm gonna see if I can write a makefile to compile the lean generated c files with the shim/dependency, and then I'll work backwards to figure out what the right  setup is in a lakefile</p>",
        "id": 307796738,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667495701
    },
    {
        "content": "<p>You can use <code>leanc -v ...</code> to see the flags</p>",
        "id": 307796862,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667495744
    },
    {
        "content": "<p>I think after a week of trying to get this to compile, my friends and I have thrown in the towel <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> just gonna use an equivalent library written in C</p>\n<p>We're still not entirely sure why we can't get the program to link successfully, but I committed the closest attempt we had here:<br>\n<a href=\"https://github.com/JamesGallicchio/eternity2/tree/cadical-ffi-test\">https://github.com/JamesGallicchio/eternity2/tree/cadical-ffi-test</a><br>\n<code>lake run setup</code> clones the required c++ dependency, and <code>lake build</code> leads to linker error <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span> maybe someone will find the info there useful in the future</p>",
        "id": 308165685,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667666849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497571\">@Parth Shastri</span> is amazing and figured out how to get it running (still not entirely sure why, but it <em>is</em> working)</p>",
        "id": 308216213,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667711588
    },
    {
        "content": "<p>It would be nice to contribute everything you figured out in some kind of documentation.</p>",
        "id": 308235298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667729620
    },
    {
        "content": "<p>We're attempting a Rust &lt;-&gt; C++ &lt;-&gt; Lean FFI setup, and as expected with such a complicated setup, we're running into some tricky compiler issues we were hoping someone may have more knowledge about.</p>\n<p>An example of our attempt can be found here: <a href=\"https://github.com/yatima-inc/FFI.lean\">https://github.com/yatima-inc/FFI.lean</a></p>\n<p>To summarize the attempt, we're trying to bridge Rust &lt;-&gt; C++ by using the CXX crate to generate some <code>.cc</code> files. Those, together with a <code>.cpp</code> \"shim\", are pointed to in the <code>lakefile</code> as external libraries to link to a very simple function: <a href=\"https://github.com/yatima-inc/FFI.lean/blob/d657ecc025c44bb835a9eecafd40e97ab9accaf3/lean/FFI.lean#L1\">https://github.com/yatima-inc/FFI.lean/blob/d657ecc025c44bb835a9eecafd40e97ab9accaf3/lean/FFI.lean#L1</a></p>\n<p>The strange thing is that this fragile setup actually works for one of the teammates <span class=\"user-mention\" data-user-id=\"441012\">@Sam Burnham</span> ! For others, we're all generally running into the same linker error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: stderr:\nlibc++abi: terminating due to uncaught exception of type lean::exception: error loading library, ./build/src/libffi.so: undefined symbol: _ZNSt8ios_base4InitD1Ev\nerror: external command `/home/matej/.elan/toolchains/leanprover--lean4---nightly-2022-12-08/bin/lean` exited with code 134\n</code></pre></div>\n<p>The only discernible difference between our environments is that if I call <code>leanc -v</code> I get some stuff about <code>clang</code>, whereas when Sam runs the same command he sees the same message with <code>clang</code> replaced by <code>gcc</code>. It's just a shot in the dark, but could this difference in compilers be causing the issue?</p>\n<p>If so, is there a way to force <code>leanc</code> to point to a particular C compiler?</p>",
        "id": 315945175,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1671067587
    },
    {
        "content": "<p>Yeah, looks like a C++ stdlib conflict similar to what was reported above, so hopefully something like this should work for you as well: <a href=\"https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi-test/lakefile.lean#L13\">https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi-test/lakefile.lean#L13</a></p>",
        "id": 315987082,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671095108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/315987082\">said</a>:</p>\n<blockquote>\n<p>Yeah, looks like a C++ stdlib conflict similar to what was reported above, so hopefully something like this should work for you as well: <a href=\"https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi-test/lakefile.lean#L13\">https://github.com/JamesGallicchio/eternity2/blob/cadical-ffi-test/lakefile.lean#L13</a></p>\n</blockquote>\n<p>That works for Sam, but for some reason it doesn't seem to make a difference for me and Matej</p>",
        "id": 316040847,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671111052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/307621701\">said</a>:</p>\n<blockquote>\n<p>You could try linking the dynamic library using <code>-Wl,--no-undefined</code>, which might give a better error message if the symbol is already undefined at that stage</p>\n</blockquote>",
        "id": 316046011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671112336
    },
    {
        "content": "<p>Oh, that shows a lot more info:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Linking libffi.so\nerror: &gt; /home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-12-08/bin/leanc -shared -o ./build/src/libffi.so -Wl,--whole-archive ./build/src/libffi.a -Wl,--no-whole-archive -Wl --no-undefined -L ./target/debug -l ffi -lstdc++\nerror: stderr:\nld.lld: error: undefined symbol: std::allocator&lt;char&gt;::allocator()\n&gt;&gt;&gt; referenced by cxx.cc:9 (src/cxx.cc:9)\n&gt;&gt;&gt;               cxx.o:(cxxbridge1$cxx_string$init) in archive ./target/debug/libffi.a\n&gt;&gt;&gt; referenced by cxx.cc:204 (src/cxx.cc:204)\n&gt;&gt;&gt;               cxx.o:(_ZNK4rust10cxxbridge16StringcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEv) in archive ./target/debug/libffi.a\n&gt;&gt;&gt; referenced by cxx.cc:317 (src/cxx.cc:317)\n&gt;&gt;&gt;               cxx.o:(_ZNK4rust10cxxbridge13StrcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEv) in archive ./target/debug/libffi.a\n</code></pre></div>\n<p>There are a lot more errors like this</p>",
        "id": 316068152,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671117963
    },
    {
        "content": "<p>But now this is looking like an error that I had in the past that I couldn't figure out: linking C++ code</p>",
        "id": 316069077,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671118191
    },
    {
        "content": "<p>If you can first link the C++ code into a shared library and then link that with the Lean code, that should be a much easier and robust approach</p>",
        "id": 316070694,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671118589
    },
    {
        "content": "<p>Sorry, is there some working example of a Lean 4 program that uses C++ code and that's compiled with Lake?</p>",
        "id": 316138688,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671137765
    },
    {
        "content": "<p>Yes-- let me get the link......</p>",
        "id": 316710530,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671446504
    },
    {
        "content": "<p>I meant to document this at some point but the end of the semester stepped on those plans <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 316710616,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671446523
    },
    {
        "content": "<p><a href=\"https://github.com/JamesGallicchio/eternity2/blob/main/lean/lakefile.lean\">https://github.com/JamesGallicchio/eternity2/blob/main/lean/lakefile.lean</a></p>\n<p>^ there are lake scripts here that download/build the c++ source for cadical, along with a custom C FFI shim, and patch everything together</p>",
        "id": 316710845,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671446598
    },
    {
        "content": "<p>Some notes:</p>\n<ul>\n<li>I'm not entirely sure why, but <code>libstdc++.so.6</code> needs to be on the linker path for non-mac users, not the generic <code>-lstdc++</code> argument. I'm not sure if this will work for libraries that aren't CaDiCaL</li>\n<li>Using <code>gcc</code> <em>did not</em> work for us, which is why we are compiling cadical+our C shim explicitly with clang. I have tested this on clang 14, but nothing newer/older</li>\n<li>The c++ library's compiled <code>.a</code> <em>needs to be</em> in the <code>build/lib</code> folder when compiling the FFI shim.  you can't add it to the path elsewhere. This is a lake restriction (unless Mac has changed <code>buildStaticLib</code> in the last month)</li>\n<li><code>precompileModules := true</code> seems to break the build process for some systems? I did not investigate this much but if you run into weird issues that might be the culprit</li>\n</ul>",
        "id": 316712266,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671447078
    },
    {
        "content": "<p>Also, this build stack is incredibly fragile and I am scared to change any of it. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 316712624,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671447215
    },
    {
        "content": "<p>Hi all, how can I access a structure attribute in C?<br>\nI have this Lean structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteVector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span>  <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>And this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_byte_vector_to_uint16\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">toUInt16</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteVector</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">UInt16</span>\n</code></pre></div>\n<p>If my input were a simple <code>ByteArray</code>, I would do this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">l_res</span><span class=\"w\"> </span><span class=\"nf\">lean_byte_vector_to_uint16</span><span class=\"p\">(</span><span class=\"n\">l_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"kt\">uint16_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">lean_to_sarray</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">m_data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this will obviously fail for <code>ByteVector</code>s</p>",
        "id": 319503302,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672883172
    },
    {
        "content": "<p>You're lucky: <code>ByteVector n</code> has the same runtime representation as <code>ByteArray</code>.</p>",
        "id": 319503771,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672883641
    },
    {
        "content": "<p>How come?</p>",
        "id": 319503858,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672883700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> To explain more: Lean's runtime will analyze structure fields.</p>",
        "id": 319503869,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672883707
    },
    {
        "content": "<p>In particular, if a structure is \"trivial\" in the sense that it only has <em>one</em> computationally relevant field, then the runtime of that structure will be unboxed to the relevant field</p>",
        "id": 319503895,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672883752
    },
    {
        "content": "<p>Does this mean that my C code will just work?</p>",
        "id": 319503942,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672883765
    },
    {
        "content": "<p>Here, <code>valid</code> has no computational value so the runtime replaces all <code>ByteVector</code>s with <code>ByteArray</code></p>",
        "id": 319503958,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672883793
    },
    {
        "content": "<p>I see, that makes sense</p>",
        "id": 319503971,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672883814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/319503942\">said</a>:</p>\n<blockquote>\n<p>Does this mean that my C code will just work?</p>\n</blockquote>\n<p>Yes (btw this is also why Chars are <code>UInt32</code>s in Lean's runtime)</p>",
        "id": 319503972,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672883815
    },
    {
        "content": "<p>This is also why in core you'll see a lot of stuff like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FVarId</span> <span class=\"n\">where</span>\n  <span class=\"n\">fvarId</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>where it seemingly unnecessarily wraps <code>Nat</code>. But in fact there's no overhead since <code>FVarId</code> is trivial and will unwrap to <code>Nat</code></p>",
        "id": 319504085,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672883913
    },
    {
        "content": "<p>If it weren't unwrapped (ie. the struct had multiple fields), you'd use the <a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L548\"><code>lean_ctor_get</code></a> function :)</p>",
        "id": 319504243,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672884058
    },
    {
        "content": "<p>(BTW, if I wanted to flesh out the FFI API documentation in the manual, what would the process be for that?)</p>",
        "id": 319504380,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672884144
    },
    {
        "content": "<p>How can I use <code>lean_nat_to_size_t</code> from <code>runtime/object.cpp</code> on a C function I am implementing?</p>",
        "id": 319790465,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673014899
    },
    {
        "content": "<p>Since it is not exposed via C FFI I would say you can't in a nice way. I guess you could just pray that the linker finds the symbol during compilation but in general it does not seem to be made for external use as of now.</p>",
        "id": 319791165,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673015100
    },
    {
        "content": "<p>Hmm, so handling <code>Nat</code>s is impractical, right?</p>",
        "id": 319791475,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673015186
    },
    {
        "content": "<p>This will do for now</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"nf\">nat_to_size_t</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_unbox</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">lean_internal_panic_out_of_memory</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm not interested in arbitrarily large values</p>",
        "id": 319795471,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673016397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/319791475\">said</a>:</p>\n<blockquote>\n<p>Hmm, so handling <code>Nat</code>s is impractical, right?</p>\n</blockquote>\n<p>Handling unbounded Nats in C generally is hard <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 319815351,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673022652
    },
    {
        "content": "<p>Yeah, but I meant in terms of reusing the infra that's already set</p>",
        "id": 319818778,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673023700
    },
    {
        "content": "<p>Yeah, we might need a repo for common utility functions and stuff... Out of curiosity, what code are you building an interface to right now?</p>",
        "id": 319819589,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673023951
    },
    {
        "content": "<p>For now:</p>\n<ul>\n<li><a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/ByteArray.lean\"><code>ByteArray</code></a></li>\n<li><a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/UInt.lean\"><code>UInt</code></a></li>\n<li><a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/YatimaStdLib/ByteVector.lean\"><code>ByteVector</code></a></li>\n</ul>",
        "id": 319820353,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673024212
    },
    {
        "content": "<p>The duplicated interfaces are temporary. That's because we haven't migrated our test suites to <code>lspecIO</code> yet. So we are doing tests with the <code>#lspec</code> command for now</p>",
        "id": 319820973,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673024423
    },
    {
        "content": "<p>Ultimately we want to interface with <a href=\"https://docs.rs/neptune/latest/neptune/\">https://docs.rs/neptune/latest/neptune/</a></p>",
        "id": 319821751,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673024689
    }
]