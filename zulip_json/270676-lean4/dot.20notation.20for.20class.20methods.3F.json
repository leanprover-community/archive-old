[
    {
        "content": "<p>Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">a2</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"o\">()</span> <span class=\"c1\">-- error: invalid dotted identifier notation, expected type is not of the form (... → C ...) where C is a constant α</span>\n</code></pre></div>\n<p>Should the dot notation feature also resolve methods in scope for the result type (in this case, methods from A α) automatically?</p>",
        "id": 290415830,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658428562
    },
    {
        "content": "<p>How would you define \"methods in scope\"?</p>",
        "id": 290416214,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658428752
    },
    {
        "content": "<p>I am out of my depth here, but my initial intuition would be to consider only the classes explicitly declared for the return type above.</p>",
        "id": 290417743,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658429374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span>  so you want it to automatically open the namespace? wouldn't that be a bit going against the point of namespaces?</p>",
        "id": 290524104,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503054
    },
    {
        "content": "<p>you can also <code>open</code> the namespace and it will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">a2</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 290524149,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503075
    },
    {
        "content": "<p>No he wants to extend dot notation to respect type classes as well, note that he is doing <code>.a</code> instead of <code>a</code>. We already support this if we have a term: <code>.func a b c</code> and the expected type is known to be a certain <code>T</code> and <code>T.func</code> exists Lean will intelligently translate the term into <code>T.func a b c</code>. The exact point of this notation is that you do not open the namespace but that type inference figures the namespace out for you.</p>\n<p>The thing that is at question is what heuristic to use to also capture type classes on <code>T</code> instead of just functions directly declared on <code>T</code></p>",
        "id": 290524669,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658503275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> yes, exactly what <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> described.</p>\n<p>It is an extra convenience, although I am not sure about the underlying implications. So just a thought.</p>",
        "id": 290524932,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658503372
    },
    {
        "content": "<p>Note that if <code>A</code> is long and you want to avoid typing it, you can usually use dot-notation on the instance itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LongClassName</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">LongClassName</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">i.a</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 290525795,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658503744
    },
    {
        "content": "<p>Ahh, I see. I guess in a lot of cases it coincides, right? At least when I've implemented instances like <code>ToString</code> I do so in that namespace (e.g. <code>A.toString</code>), but for derived instances or examples like yours it seems convienient</p>",
        "id": 290525823,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503756
    }
]