[
    {
        "content": "<p>Here is a quick example. If you have a structure with nested Lean objects you want to wrap:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Your foreach function would look like:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">Foo_foreach</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">lean_apply_1</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">Foo</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">lean_apply_1</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">Foo</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">baz</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The point of this function is to allow the object manager to apply properties (e.g., persistence, multi-threading) to nested lean objects within the wrapped struct.</p>",
        "id": 285627715,
        "sender_full_name": "Mac",
        "timestamp": 1654833199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120163\">He-chien Tsai</span> has marked this topic as resolved.</p>",
        "id": 285628045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654833553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120163\">He-chien Tsai</span> has marked this topic as unresolved.</p>",
        "id": 285628205,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654833710
    },
    {
        "content": "<p>That's clear. Thanks for your help.</p>",
        "id": 285628212,
        "sender_full_name": "He-chien Tsai",
        "timestamp": 1654833716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120163\">He-chien Tsai</span> has marked this topic as resolved.</p>",
        "id": 285628214,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654833720
    }
]