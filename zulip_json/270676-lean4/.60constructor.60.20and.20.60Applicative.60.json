[
    {
        "content": "<p>I'm updating to version <code>4.0.0-nightly-2022-04-16</code>. There's a weird new failure with <code>constructor</code> and <code>Applicative</code>. The same problem doesn't occur with <code>Functor</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n<span class=\"c1\">-- \"4.0.0-nightly-2022-04-16\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Op1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">admit</span>\n<span class=\"c1\">-- no errors</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">constructor</span>\n<span class=\"c1\">-- tactic 'constructor' failed, no applicable constructor found</span>\n<span class=\"c1\">-- F : Type u → Type v</span>\n<span class=\"c1\">-- ⊢ Applicative (Op1 F)</span>\n</code></pre></div>\n<p>Is this already known?</p>",
        "id": 279240567,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650229614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Did it used to work? The <code>constructor</code> tactic is based on the <code>apply</code> tactic, and <code>apply</code> fails if instance implicit arguments cannot be synthesized.<br>\n<code>Functor</code> works because its constructor does not have this kind of argument. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Functor</span>\n<span class=\"k\">#print</span> <span class=\"n\">Applicative</span>\n</code></pre></div>\n<p>One option is to change the <code>apply</code>'s behavior and create new goals for the failed typeclass resolution attempts.</p>",
        "id": 279243725,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650234673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  It did used to work as recently as <code>nightly-2022-04-07</code>. I think the issue is actually that the instance problem used to be solvable. Does the fact that there's an instance for <code>F</code> which is definitionally equal to <code>Op1 F</code> now cause the instance resolution to fail?</p>",
        "id": 279249616,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650244166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I built commit <a href=\"https://github.com/leanprover/lean4-nightly/commit/e5b8d94a658550cebf48f45d9f9ab694fd827004\">https://github.com/leanprover/lean4-nightly/commit/e5b8d94a658550cebf48f45d9f9ab694fd827004</a><br>\nThis was the commit used to build <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-07\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-07</a><br>\nI have also tried <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-06\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-06</a><br>\nIn both cases, your example above failed. Could you please double-check on your side?</p>",
        "id": 279290318,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650291522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Thanks for checking it. It seems like I didn't minimize properly. I'm going to redo it and get back to you.</p>",
        "id": 279456312,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650396068
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 279456468,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650396143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I finally minimized my example properly. The issue was initially about <code>LawfulApplicative</code> but I thought I could simplify it down to <code>Applicative</code>. It doesn't seem to be the case. Here is the faulty code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n<span class=\"c1\">-- leanprover/lean4:nightly-2022-04-16 vs</span>\n<span class=\"c1\">-- leanprover/lean4:nightly-2022-04-07</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Op1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Op1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Functor.map</span> <span class=\"n\">F</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulApplicative</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">constructor</span>\n<span class=\"c1\">-- ././Pkg/Test.lean:30:0: error: tactic 'constructor' failed, no applicable constructor found</span>\n<span class=\"c1\">-- F : Type ?u.1888 → Type ?u.1887</span>\n<span class=\"c1\">-- inst✝¹ : Applicative F</span>\n<span class=\"c1\">-- : LawfulApplicative F</span>\n<span class=\"c1\">-- ⊢ LawfulApplicative (Op1 F)</span>\n</code></pre></div>\n<p>Additionally, if I look closer at the instance synthesis for <code>LawfulApplicative.mk</code>, I get the following in the 04-16 nightly build:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">LawfulApplicative.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ././Pkg/Test.lean:27:7: error: failed to synthesize instance</span>\n<span class=\"c1\">--  LawfulFunctor (Op1 F)</span>\n</code></pre></div>",
        "id": 279949125,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650753421
    },
    {
        "content": "<p>I bisected it back to <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-12\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-04-12</a></p>",
        "id": 279969025,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650787657
    },
    {
        "content": "<p>The eta change sounds like the only remotely applicable change...</p>",
        "id": 279969076,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650787694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Thanks for creating the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.<br>\n<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks for bisecting it. <br>\nThe issue is due to the \"eta for structures\" feature. It allows the TC resolution module to find two different solutions for <code>Functor (Op1 F)</code> in different parts of the search space. If we name the instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">functorInst</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Functor.map</span> <span class=\"n\">F</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">applicativeInst</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Op1</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The TC module will initially find <code>functorInst</code>, and in a different part of the search space, it will also find  <code>applicativeInst |&gt;.toFunctor</code>. These solutions are not definitionally equal, and we get a type mismatch later. The second solution is found using \"eta for structures\". <br>\nThere are different fixes:</p>\n<ul>\n<li>Disable \"eta for structures\" during TC resolution.</li>\n<li>Disable \"eta for classes\" everywhere in the elaborator (we don't need to touch the kernel). Classes are a special kind of structure, but using \"eta\" on them seems to enable us to find noncanonical solutions.</li>\n<li>Disable \"eta for classes\" during TC resolution.</li>\n</ul>",
        "id": 279984801,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650812295
    },
    {
        "content": "<blockquote>\n<p>Disable \"eta for structures\" during TC resolution.</p>\n</blockquote>\n<p>For now, I am going with this fix since it is just one line of code.<br>\nIf we find compelling examples where we want \"eta\" for structures that are not classes during TC resolution, we can implement: Disable \"eta for classes\" during TC resolution.</p>",
        "id": 279985413,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650813254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you have some kind of feeling as to what the consequences of this will be for mathlib?</p>",
        "id": 279985635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650813613
    },
    {
        "content": "<p>Pushed <a href=\"https://github.com/leanprover/lean4/commit/3ad8dcb7ffdc3b01ae326798bf2e3a7e11cd961b\">https://github.com/leanprover/lean4/commit/3ad8dcb7ffdc3b01ae326798bf2e3a7e11cd961b</a></p>",
        "id": 279985729,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650813757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.60constructor.60.20and.20.60Applicative.60/near/279985635\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> do you have some kind of feeling as to what the consequences of this will be for mathlib?</p>\n</blockquote>\n<p>Yes, there's a situation where I think eta <em>might</em> help an otherwise unavoidable diamond; namely the algebra of a subalgebra on itself. The diamond is formed by:</p>\n<ul>\n<li><code>algebra_map S S x = x</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a>)</li>\n<li><code>algebra_map S S x = subtype.mk (id x) x.prop</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra\">docs#subalgebra.algebra</a>? I think the path to this is a little more complicated)</li>\n</ul>\n<p>Of course, this diamond already exists in lean3</p>",
        "id": 279985760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650813801
    },
    {
        "content": "<p>(I guess strictly it's <em>almost</em> unavoidable. We could have a <code>has_reincarnate</code> typeclass that provides an <code>id</code> function  which takes everything apart and puts it back together again, and use that in place of <code>id</code> to avoid this type of problem)</p>",
        "id": 279985836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650813911
    },
    {
        "content": "<p>The code brought me here. I see a contradiction in the documentation: it says</p>\n<blockquote>\n<p>We disable eta for structures that are not classes during TC resolution because it allows us to find unintended solutions.</p>\n</blockquote>\n<p>but below it there is <code>etaStruct := .notClasses</code>, where <code>EtaStructMode.notClasses</code> says</p>\n<blockquote>\n<p>Enable eta only for structures that are not classes.</p>\n</blockquote>\n<p>So is eta disabled or enabled on non-classes?</p>",
        "id": 290473772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658474880
    }
]