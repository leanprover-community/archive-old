[
    {
        "content": "<p>Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">structure</span> <span class=\"n\">MyLawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">Pure</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Action</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">def</span> <span class=\"n\">Action.MyLawfulMonad</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">MyLawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">pure</span>       <span class=\"o\">:=</span> <span class=\"n\">Prod.mk</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This fails on the last line. However, replacing <code>@[class] structure</code> by <code>class</code> succeeds. In Lean 3, both worked.</p>\n<p>To make <code>@[class] structure</code> work, I need to add this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span> <span class=\"kd\">def</span> <span class=\"n\">MyLawfulMonad.Pure</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MyLawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Pure</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">i.pure</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is this a bug?</p>",
        "id": 308945831,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1668071428
    },
    {
        "content": "<p>I would guess that <code>attribute [instance] MyLawfulMonad.toPure</code> would also work</p>",
        "id": 308947350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668071988
    },
    {
        "content": "<p>No, it doesn't.</p>",
        "id": 308949273,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1668072665
    },
    {
        "content": "<p>IIRC <code>@[class] structure</code> was special in Lean 3.  Now it behaves the same as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyLawfulMonad</span> <span class=\"bp\">...</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">MyLawfulMonad</span>\n</code></pre></div>\n<p>(which works the same way in Lean 3 and Lean 4)</p>",
        "id": 309054023,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668105868
    },
    {
        "content": "<p>(Special meaning that the major premise of the projections is <code>[MyLawfulMonad m]</code> instead of <code>(self : MyLawfulMonad m)</code>.)</p>",
        "id": 309054178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668105931
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 309062461,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1668108542
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 309062474,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1668108546
    }
]