[
    {
        "content": "<p>I would expect type class inference to succeed here. I couldn't get it to work in Lean 3 either. What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_note.note</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_note</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"c1\">-- in Lean 3 you can just extend has_note with no extra fields and the problem persists</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfinsupp</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note_and_foo</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"bp\">♩</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>             <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note_and_foo</span> <span class=\"o\">[</span><span class=\"n\">has_note_and_foo</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"bp\">♩</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_note_and_foo</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_note_and_foo</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.has_note_and_foo</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- in Lean 3, removing the instance attribute from `finsupp.has_note` makes inferInstance work</span>\n</code></pre></div>\n<p>Supplementary questions which came up when I was making this: <br>\n(1) I know it's ridiculous but I didn't know how to make a class foo2 extend foo1 and then add no more fields (so foo2 is a copy of foo1). In Lean 3 you can do <code>class foo2 extends foo1.</code>. <br>\n(2) In Lean 3 I could try and debug using <code>set_option trace.class_instances true</code>. How do you say that in Lean 4?<br>\n(3) In Lean 3 I could experiment with removing <code>instance</code> tags from my defs with <code>local attribute [-instance] finsupp.has_zero</code> (which fixes the problem). How do you say that in Lean 4?</p>\n<p>PS <a href=\"#narrow/stream/113488-general/topic/dfinsupp.2Ffinsupp.20type.20class.20issue/near/241300314\">here</a> is the Lean 3 discussion, with some traces.</p>",
        "id": 241318335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622667157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335\">said</a>:</p>\n<blockquote>\n<p>(2) In Lean 3 I could try and debug using <code>set_option trace.class_instances true</code>. How do you say that in Lean 4?</p>\n</blockquote>\n<p>The equivalent seems to now be <code>set_option trace.Meta.synthInstance true</code></p>\n<blockquote>\n<p>(3) In Lean 3 I could experiment with removing <code>instance</code> tags from my defs with <code>local attribute [-instance] finsupp.has_zero</code> (which fixes the problem). How do you say that in Lean 4?</p>\n</blockquote>\n<p>I don't know if you can remove attributes anymore, but manually removing <code>finsupp.has_note</code> and including it into <code>finsupp.has_note_and_foo</code> seems to make the <code>inferInstance</code> succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--instance finsupp.has_note [has_note M] :</span>\n<span class=\"c1\">--  has_note (finsupp α M) := ⟨⟨λ i =&gt; ♩⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note_and_foo</span> <span class=\"o\">[</span><span class=\"n\">has_note_and_foo</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 241324392,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1622670631
    },
    {
        "content": "<p>I'm not sure why exactly typeclass resolution doesn't work, but somehow splitting off <code>has_foo</code> and creating a <code>has_note_and_foo</code> synonym class makes it succeed.  (I'm not recommending anything by posting this.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_note.note</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">where</span>\n  <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">♩</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">♩</span> <span class=\"c1\">-- example axiom that has_note should satisfy</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_foo</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">has_note_and_foo.mk</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp._has_note</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp._has_foo</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ax</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp._has_note</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp._has_foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_foo</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_foo</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ax</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_foo</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">):</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_foo</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">):</span>\n  <span class=\"n\">has_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_foo</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">):</span>\n  <span class=\"n\">has_note_and_foo</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 241328496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1622673280
    },
    {
        "content": "<p>In the Lean 3 use case, note = 0, foo = +, and finsupp and dfinsupp are finitely supported functions.</p>",
        "id": 241329310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622674001
    },
    {
        "content": "<blockquote>\n<p>(1) I know it's ridiculous but I didn't know how to make a class foo2 extend foo1 and then add no more fields (so foo2 is a copy of foo1). In Lean 3 you can do <code>class foo2 extends foo1.</code>. </p>\n</blockquote>\n<p>That sounds like it could be an issue on the lean 4 repo. I have noticed a number of uses of \"1 or more\" in the grammar where \"0 or more\" would be valid, useful and no harder to parse: the fields after <code>where</code> in this case as well as <code>match x with arms+</code> come to mind. There are probably some variations of the <code>where</code> syntax appearing like <code>instance ... where</code>, <code>def ... where</code>, as well as <code>let rec</code>, <code>mutual</code>, <code>variable</code>.</p>",
        "id": 241345942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622692393
    },
    {
        "content": "<p>I think you can do <code>class Foo2 extends Foo1 where</code> now.</p>",
        "id": 241357693,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622706210
    },
    {
        "content": "<p>Weirdly enough, it's impossible to extend the <em>empty</em> structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span>\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n<span class=\"c1\">-- 'Bar' is not a structure</span>\n</code></pre></div>",
        "id": 241357800,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622706280
    },
    {
        "content": "<p>oh, <code>class Bar</code> works?</p>",
        "id": 241357856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622706342
    },
    {
        "content": "<p>I'm surprised it's not <code>class Bar where</code></p>",
        "id": 241357876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622706360
    },
    {
        "content": "<p>Yes!</p>",
        "id": 241357879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622706361
    },
    {
        "content": "<p>Wait, I don't need the <code>where</code> after extends either.  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar</span>\n</code></pre></div>",
        "id": 241357974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622706442
    },
    {
        "content": "<p>Oh! I had sort of assumed Kevin tried that, since it does seem like the style we want to encourage</p>",
        "id": 241358328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622706696
    },
    {
        "content": "<p>I am an idiot</p>",
        "id": 241358969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622707184
    },
    {
        "content": "<p>and indeed <code>inferInstance</code> is still failing even with foo removal</p>",
        "id": 241359048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622707220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> , do you have an idea why typeclass inference fails on <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335</a> ?</p>",
        "id": 241426431,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622742141
    },
    {
        "content": "<p>Here's the foo-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_note.note</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_note</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfinsupp</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note2</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"bp\">♩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>             <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note2</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"bp\">♩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.has_note2</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 241455170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622754873
    },
    {
        "content": "<p>And here's the variant that works -- \"remove <code>finsupp.has_note</code> and bundle it into <code>finsupp.has_note2</code>\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"♩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_note.note</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_note</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfinsupp</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_note2</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"bp\">♩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">[</span><span class=\"n\">has_note</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>             <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_note2</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">note</span>      <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">♩</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- now works</span>\n</code></pre></div>",
        "id": 241455348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622754958
    },
    {
        "content": "<p>I imagine this has to do  with the fact that the original <code>finsupp</code> has two <code>has_note</code> instances, one explicit and one it implicitly acquires through its explicit <code>has_note2</code> instance extending <code>has_note</code>. Lean might not like  these kind of psuedo-diamonds.</p>",
        "id": 241469009,
        "sender_full_name": "Mac",
        "timestamp": 1622762619
    },
    {
        "content": "<p>Those instances are defeq, right? I don't think this is the issue. I think that what you describe happens all over the place in mathlib in lean 3, you make something an additive abelian group and then a ring and this is no problem at all.</p>",
        "id": 241469959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622763338
    },
    {
        "content": "<p>I think it's something to do with the pi type in the class. You can test your hypothesis by removing the pi type and trying to get type class inference to fail without it but still having your pseudo-diamond.</p>",
        "id": 241470232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622763573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">[</span><span class=\"n\">has_note2</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">has_note2</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- ...</span>\n<span class=\"c1\">-- [Meta.synthInstance.tryResolve] has_note2</span>\n<span class=\"c1\">--   (dfinsupp fun (i : ι) =&gt; finsupp (η i) N) =?= has_note2 (dfinsupp fun (i : ?m.1404) =&gt; ?m.1405 i)</span>\n<span class=\"c1\">-- [Meta.synthInstance.tryResolve] failure</span>\n</code></pre></div>\n<p>It appears to be a unification problem involving metavariables under a lambda. It looks like a bug, or at least a regression from lean 3 behavior - here <code>?m.1405 i</code> should be unified with <code>finsupp (η i) N</code> but this is being rejected, and the synthesis fails.</p>",
        "id": 241506248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622796077
    },
    {
        "content": "<p>It's also failing in lean 3</p>",
        "id": 241506732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622796408
    },
    {
        "content": "<p>Should I open an issue?</p>",
        "id": 241506820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622796480
    },
    {
        "content": "<p>Hm, if it fails in lean 3 too then that lowers the chance that it will be fixable, but it's certainly something that Daniel or Leo will want to consider, so I would say yes</p>",
        "id": 241507750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622797102
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/509\">lean4#509</a></p>",
        "id": 241523492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622807139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241426431\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> , do you have an idea why typeclass inference fails on <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335</a> ?</p>\n</blockquote>\n<p>Hey, was away last week. I don't have time to address this now but I took a quick look and my first guess is that it tries to unify: <code>((?m &lt;something&gt;).1 : has_note2 M) =?= (&lt;something-else&gt; : has_note M)</code> and that the solution may be to add special support for unification hints for structures with a single field, i.e. making it so that <code>x.1 =?= y</code> would try <code>x =?= ⟨y⟩</code>.</p>",
        "id": 242094672,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623256669
    },
    {
        "content": "<p>Also, it would be nice to have such hints for structures where all but one field is a Prop.</p>",
        "id": 242095364,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1623256977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/242095364\">said</a>:</p>\n<blockquote>\n<p>Also, it would be nice to have such hints for structures where all but one field is a Prop.</p>\n</blockquote>\n<p>Can you please clarify?</p>",
        "id": 242095602,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623257075
    },
    {
        "content": "<p>NVM: wrong way around.</p>",
        "id": 242100705,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1623259261
    },
    {
        "content": "<p>fixed in <a href=\"https://github.com/leanprover/lean4/pull/521\">lean4#521</a>. Thanks to the devs!</p>",
        "id": 242386704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623436886
    },
    {
        "content": "<p>Does that fix actually help for the dfinsupp case? Wasn't <code>add_zero_class</code> relevant there, which has multiple fields?</p>",
        "id": 242403188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623445565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/242403188\">said</a>:</p>\n<blockquote>\n<p>Does that fix actually help for the dfinsupp case? Wasn't <code>add_zero_class</code> relevant there, which has multiple fields?</p>\n</blockquote>\n<p>The example with <code>dfinsupp</code> posted at <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241455170\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241455170</a> works now as well.</p>",
        "id": 242405315,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623446675
    },
    {
        "content": "<p>Is it likely it would be doable for a lean 3 expert (and obviously not an already busy lean4 dev!) to backport to lean 3? Or does the strategy used to fix this only really exist in lean 4?</p>",
        "id": 242412054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623451181
    },
    {
        "content": "<p>I don't see any obstacle. It is a reasonably local and lightweight change.</p>",
        "id": 242412905,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623452011
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248961197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590435
    }
]