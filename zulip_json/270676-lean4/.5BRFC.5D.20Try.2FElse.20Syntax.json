[
    {
        "content": "<p>One common pattern in control flow when working with <code>Alternative</code> is code like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"c1\">-- first attempt</span>\n<span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"c1\">-- second attempt</span>\n<span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"c1\">-- fallback</span>\n</code></pre></div>\n<p>I propose the following <code>try/else</code> sugar for such control flow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- first attempt</span>\n<span class=\"k\">else</span> <span class=\"n\">try</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- second attempt</span>\n<span class=\"k\">else</span>\n  <span class=\"c1\">-- fallback</span>\n</code></pre></div>\n<p><strong>How does this look to people? Would this be something worth adding?</strong></p>",
        "id": 241471391,
        "sender_full_name": "Mac",
        "timestamp": 1622764645
    },
    {
        "content": "<p>Why not use mfirst?</p>",
        "id": 241481812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622770751
    },
    {
        "content": "<p>Also, for parsers at least, try implies resetting to original parse state on failure. But you don't have to reset.</p>",
        "id": 241481886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622770807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241481886\">said</a>:</p>\n<blockquote>\n<p>Also, for parsers at least, try implies resetting to original parse state on failure. But you don't have to reset.</p>\n</blockquote>\n<p>I am not sure what you are talking about here. I am proposing that try/else be simply syntactic  sugar for <code>&lt;|&gt;</code>/<code>orElse</code> -- what it does will depend upon the definition of <code>&lt;|&gt;</code>/<code>orElse</code> for the type. Also, if I am not mistaken, <code>&lt;|&gt;</code>/<code>orElse</code> for parsers <em>does</em> reset the parser state.  The purposed try/else also pairs well with the existing try/catch syntax  as try/else is essentially just try/catch without error information.</p>",
        "id": 241488788,
        "sender_full_name": "Mac",
        "timestamp": 1622779283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  For a use case like this, I wonder if a variant of the syntax <a href=\"https://learntla.com/tla/expressions/\">TLA has for logical junctions</a> would be useful.  For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;|&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- first attempt</span>\n       <span class=\"c1\">--  second statement first attempt</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- second attempt</span>\n       <span class=\"c1\">--  second statement second attempt</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- fallback</span>\n</code></pre></div>\n<p>This may be more of a pain to implement as it is whitespace sensitive and uses an infix operator in a prefix position, but I've heard from at least one TLA user that they find the syntax really useful for larger expressions.</p>",
        "id": 241493995,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1622786227
    },
    {
        "content": "<p>The Haskell approach I'd probably write the first code is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">asum</span>\n  <span class=\"o\">[</span> <span class=\"k\">do</span> <span class=\"c1\">-- first attempt</span>\n  <span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"c1\">-- second attempt</span>\n  <span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"c1\">-- fallback</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>It isn't that pretty but at least involves less parenthesis.</p>",
        "id": 241494384,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1622786717
    },
    {
        "content": "<p>Just to clarify, the three-part example case was just meant to serve as sophisticated example of the syntax. The most common pattern would problem just be try/else not try/else-try/else. That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span>\n  <span class=\"c1\">-- attempt something</span>\n<span class=\"k\">else</span>\n  <span class=\"c1\">-- fallback</span>\n</code></pre></div>",
        "id": 241495571,
        "sender_full_name": "Mac",
        "timestamp": 1622788169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241493995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>  For a use case like this, I wonder if a variant of the syntax <a href=\"https://learntla.com/tla/expressions/\">TLA has for logical junctions</a> would be useful. </p>\n</blockquote>\n<p>I am a little curious as to why you would suggest a more complicated syntax for this. Why do you prefer this alternative to the proposed try/else? As far as I can see, the proposed try/else syntax seems easier to read and less complicated to parse?</p>",
        "id": 241495998,
        "sender_full_name": "Mac",
        "timestamp": 1622788582
    },
    {
        "content": "<p>If this is just local syntax to use in a few files, then you can use whatever syntax you'd like.<br>\nI am wary of special case syntax that introduces more keywords and doesn't connect syntactically to the underlying operation.  I think it will run into problems as common names get reserved or otherwise complicated grammars.  The TLA syntax has the advantage it generalizes to lots of operators.<br>\ne.g., suppose you use <code>try</code> for this operator.  How does this interact with <code>try</code> in a Lean version of Haskell's <code>Control.Exception</code> or somebody else wanting <code>try-catch</code> or related syntax.<br>\nDoes this answer your question?</p>",
        "id": 241497420,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1622789940
    },
    {
        "content": "<p>For what it's worth the <code>asum</code> approach is more complicated as an expression, but has the advantage of not requiring any special syntax.</p>",
        "id": 241497573,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1622790066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>  But \"try\" and \"else\" are already keywords though? Lean 4 also already has similar special syntax for try/catch. This proposal would be adding 0 new keywords.</p>",
        "id": 241497956,
        "sender_full_name": "Mac",
        "timestamp": 1622790363
    },
    {
        "content": "<p>FWIW, Python has <code>try</code>/<code>except</code> /<code>else</code>, but the else means the opposite of what you're proposing here, which is perhaps a weak argument against your proposal.</p>",
        "id": 241498124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622790488
    },
    {
        "content": "<p>I'll just continue to reiterate that I think a more general approach is preferable to introducing another special syntax for a very specific use case and leave it at that.  It's irrelevant whether there is also other ways to use the particular keywords you've chosen.</p>",
        "id": 241498449,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1622790734
    },
    {
        "content": "<p>If what you're proposing is already possible to write with <code>try/catch</code>, can you add that existing spelling to your top post, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>?</p>",
        "id": 241498986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622791185
    },
    {
        "content": "<p>I'd probably also just express it as functions. Especially if they are monadic, you don't need to care too much about evaluation order (<code>&lt;|&gt;</code> takes care of that too, afaik).</p>\n<p>Once you start getting to the <em>ruleset</em> world, just having a list of functions is probably a good idea and if you have 2-3 cases, the <code>&lt;|&gt;</code> is not necessarily that bad.</p>\n<p>Your motivating example might look much better as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">case1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"k\">let</span> <span class=\"n\">case2</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"k\">let</span> <span class=\"n\">case3</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"n\">case1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">case2</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">case3</span>\n</code></pre></div>\n<p>just an idea...</p>",
        "id": 241499044,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622791211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241498124\">said</a>:</p>\n<blockquote>\n<p>FWIW, Python has <code>try</code>/<code>except</code> /<code>else</code>, but the else means the opposite of what you're proposing here, which is perhaps a weak argument against your proposal.</p>\n</blockquote>\n<p>True, though that else comes after the <code>except</code> so it is meant to semantically read as an <code>else</code> to the <code>except</code> not an <code>else</code> to the <code>try</code> (i.e. <code>try: foo; except e: bar; else: baz</code> reads try <code>foo</code>, if exception <code>e</code> is raised perform <code>baz</code> else do <code>baz</code>). The proposed syntax <code>try foo else bar</code> is meant to be read try <code>foo</code> else do <code>bar</code> (i.e., the else replaces the <code>except</code>/<code>catch</code>). Most importantly, in Python, try/else would be invalid and only try/except/else is valid (I believe). Thus, I think it would be clear enough to programmer coming from Python that something else is going on here.</p>",
        "id": 241499489,
        "sender_full_name": "Mac",
        "timestamp": 1622791590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241498986\">said</a>:</p>\n<blockquote>\n<p>If what you're proposing is already possible to write with <code>try/catch</code>, can you add that existing spelling to your top post, <span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>?</p>\n</blockquote>\n<p>The current try/catch syntax is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span>\n  <span class=\"c1\">-- try stuff</span>\n<span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"c1\">-- fallback with error e</span>\n</code></pre></div>\n<p>However, this syntax only works for monads with a <code>MonadExcept</code>/<code>MonadExceptOf</code> instance (it utilizes the <code>tryCatch</code> function of the typeclass). It does not work with monads with just an <code>Alternative</code> instance (like <code>OptionM</code>). This proposal would bring that same kind of pretty syntax to <code>Alternative</code> (utilizing its <code>orElse</code> method).</p>",
        "id": 241499894,
        "sender_full_name": "Mac",
        "timestamp": 1622791910
    },
    {
        "content": "<p><strong>It seems to me the most common thread among these objections is simply a desire to avoid adding new syntax sugar. I am confused by this. Why are people so hesitant to support new syntax? </strong></p>\n<p>One reason I would think  of is that new syntax is very odd and does not fit with general style of existing builtin-syntax. However, the proposed syntax meshes well with the existing if/else-if/else and try/catch syntax. So, I have a hard time seeing this objection holding.</p>\n<p>Another reason could be a desire to avoid sugar in general. However, Lean is already heavily invested in sugar and especially control flow sugar. So, I don't see why this would be out-of-line with current approach there either.</p>\n<p>What I am missing? Or I am just completely misunderstanding the objections and there something else troubling people?</p>",
        "id": 241501015,
        "sender_full_name": "Mac",
        "timestamp": 1622792651
    },
    {
        "content": "<p>There's nothing stopping you making your own syntax, mathematicians do this all the time. Asking that it be put into core is a completely different question though</p>",
        "id": 241501582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622793023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> one of the worst problems for language development is backwards compatibility. If you ever release a feature, you are basically done and can never ever remove it for the next few decades.</p>\n<p>And people always come up with new abstractions and ways of expressing things, etc. E.g. when C# 1.0 came our around 2002, there were no generics, no lambdas, no <code>async/await</code>. Generics was a missing feature, but lambdas was already a clear new feature that wasn't a thing people necessarily even wanted around C# 1.0 times. Over the years, we have gotten into the many-cores world, so all of the sudden <code>async/await</code> is relevant. These days, they're adding immutability and records, something that in 2002 nobody really even thought about.</p>\n<p>If you are looking at these kinds of time frames, any language additions are a very, very tough sell, because of the legacy they bring.</p>\n<p>Coq is 40 years old, Lisp is going on 70 or something, C++ is around 50. And just consider what computers looked like 50 years ago.</p>\n<p>The other thing to consider is the complexity to learn all the concepts. C++ is often brought up as a horror example of a really complex language. Just consider what the computing landscape will look like in 50 years?</p>\n<p>On the other hand, doing <em>domain-specific</em> extensions / abstractions is perfectly fine, you can use them in one project an <em>not use them</em> in the second. Adding it to the language makes the latter impossible.</p>\n<p>Also there's a finite amount of \"easy English words\", and there is only a small amount of overload you can really cope with...</p>",
        "id": 241501953,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622793277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235513\">Daniel Fabian</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241501953\">said</a>:</p>\n<blockquote>\n<p>If you are looking at these kinds of time frames, any language additions are a very, very tough sell, because of the legacy they bring.</p>\n</blockquote>\n<p>I would argue somewhat with this. While this certainly was true in the old days  -- I remember coding  C#/C++/Java back in 2002 as well ;) -- most languages now have relatively frequent updates cycles that add boatloads of new features and syntax (i.e. C++/Java).</p>\n<p>Still, I do get the point you are making. However, I really don't think this syntax is going into any particularly unexplored territory. It meshes well with existing control flow syntax and pretties up a common pattern -- <code>(do ...) &lt;|&gt; ...</code> is used in the core and I, at least, think <code>try do ... else ...</code> would look much better and be more readable.</p>",
        "id": 241503272,
        "sender_full_name": "Mac",
        "timestamp": 1622794221
    },
    {
        "content": "<p>The other issue is that the devs have clearly got their hands full right now with a ton of other stuff (this is made clear in the comments they've left on the repo about PRs etc) and so probably adding some random syntax sugar which one user likes is not high priority right now. I think it's a more interesting question to ask whether lean 4 is flexible enough for you to be able to implement this yourself.</p>",
        "id": 241504519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622794968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Try.2FElse.20Syntax/near/241504519\">said</a>:</p>\n<blockquote>\n<p>I think it's a more interesting question to ask whether lean 4 is flexible enough for you to be able to implement this yourself.</p>\n</blockquote>\n<p>Well, yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"try \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" else \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Alternative.orElse</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">OptionM.run</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- some 0</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"try \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" else \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">Alternative.orElse</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">OptionM.run</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"c1\">-- some 0</span>\n</code></pre></div>",
        "id": 241506077,
        "sender_full_name": "Mac",
        "timestamp": 1622795957
    },
    {
        "content": "<p>In that case, you should just use this syntax in your project and see if others like it enough to use it too. After it becomes de-facto standard it's much easier to argue for it to be added to core</p>",
        "id": 241506882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622796509
    }
]