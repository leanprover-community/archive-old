[
    {
        "content": "<p>Hi,  Please let me know if there is a better place for these question.  I don't want to be a pest.  I posted this question as follow-up to a question I asked yesterday, feel free to delete either question.</p>\n<p>I am trying to prove the following exercise (trimmed down version) of an exercise in \"Theorem proving in Lean\".  I have posted my best approach.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"k\">from</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">a</span> <span class=\"n\">h2</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h4</span><span class=\"o\">)</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span> <span class=\"c1\">--don't know what I should do here.</span>\n <span class=\"o\">)</span>\n</code></pre></div>\n<p>I need to show (p x) and have  (p a)  for every a  in α.  So this should be sufficient.  How do I tell lean4 to notice this?   Any help will be appreciated.</p>\n<p>There is some discussion about this in the tutorial, (there is a paragraph that reads : As was the case for implication, the propositions-as-types interpretation now comes into play. Remember the introduction and elimination rules for dependent arrow types: and then an example but I can't see how to use it)</p>",
        "id": 292046484,
        "sender_full_name": "kvanvels",
        "timestamp": 1659635556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519925\">@kvanvels</span> just to clarify: you are welcome to ask beginner Lean 4 questions in this stream; indeed it's exactly the right place to ask them.</p>",
        "id": 292068587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659646386
    },
    {
        "content": "<p>As to your question, your goal does not look provable to me; maybe you took a wrong turn? I don't understand your claim \"I have <code>p a</code> for every <code>a</code> in <code>α</code>\"; in your goal state <code>a</code> is a fixed element of <code>α</code>.</p>",
        "id": 292068973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659646602
    },
    {
        "content": "<p>Are you sure the statement has its parentheses in the right place?</p>",
        "id": 292069215,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659646742
    },
    {
        "content": "<p>Oh I think this (with the brackets as they are) isn't true constructively; you'll have to split on whether r is true or false, I don't think you can just follow your nose like you're doing.</p>",
        "id": 292069349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659646807
    },
    {
        "content": "<p>Ah, that works indeed, or on <code>(∀ x, p x)</code> being true or false</p>",
        "id": 292069916,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659647127
    },
    {
        "content": "<p>I found the answer to this exercise in the book.  It is quite a bit more complicated than I expected.    I appreciate the responses.</p>",
        "id": 292078960,
        "sender_full_name": "kvanvels",
        "timestamp": 1659652662
    }
]