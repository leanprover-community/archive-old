[
    {
        "content": "<p>Is there a way to annotate definitions with some variant of <code>@[simp]</code> so that when I do, say <code>simp [$some_db]</code> (or whatever) they get unfolded, but when I just do <code>simp</code> they do not?  Relatedly, is there a variant of <code>simp</code> that unfolds all definitions, or unfolds all definitions except those given in a blacklist?</p>",
        "id": 230575496,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615922844
    },
    {
        "content": "<p>In Lean 3 the answer is \"yes\", there is <code>simp with attr_name</code>. Not sure about Lean 4.</p>",
        "id": 230604074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615933739
    },
    {
        "content": "<p>We have scoped <code>simp</code> lemmas in Lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[scoped simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">ax1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">@[scoped simp]</span> <span class=\"kd\">axiom</span> <span class=\"n\">ax2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- does not use ax1 and ax2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n   <span class=\"kn\">open</span> <span class=\"n\">Foo</span> <span class=\"k\">in</span> <span class=\"n\">simp</span> <span class=\"c\">/-</span><span class=\"cm\"> open Foo for this tactic only -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> open Foo for the following theorem only -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ex3</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 230610522,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615937682
    },
    {
        "content": "<blockquote>\n<p>Is there a way to annotate definitions with some variant of @[simp] so that when I do, say simp [$some_db] (or whatever) they get unfolded, but when I just do simp they do not?</p>\n</blockquote>\n<p>The <code>SimpLemmas</code> datastructure has a set of functions to be unfolded. We were planning to allow users to tag regular definitions with <code>[simp]</code> (and variants <code>[scoped simp]</code> and <code>[local simp]</code>) to indicate they want them to be unfolded.</p>",
        "id": 230610773,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615937876
    },
    {
        "content": "<blockquote>\n<p>Relatedly, is there a variant of simp that unfolds all definitions, or unfolds all definitions except those given in a blacklist?</p>\n</blockquote>\n<p>We were not planning to support this variant. Do you have compelling examples where it is a must-have?</p>",
        "id": 230610906,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615937969
    },
    {
        "content": "<p><code>scoped simp</code> sounds great!</p>",
        "id": 230738272,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616003922
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Relatedly, is there a variant of simp that unfolds all definitions, or unfolds all definitions except those given in a blacklist?</p>\n</blockquote>\n<p>We were not planning to support this variant. Do you have compelling examples where it is a must-have?</p>\n</blockquote>\n<p>I think it is useful sometimes when doing quick-and-dirty debugging of goals, but I can be more systematic about things.</p>",
        "id": 230738366,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616003963
    },
    {
        "content": "<p>How do I put the scoped simp unfolding in a different namespace than the definition?  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n  <span class=\"kd\">@[scoped simp]</span> <span class=\"n\">MyNat</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>or something?</p>",
        "id": 230738583,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616004025
    },
    {
        "content": "<p><code>attribute [scoped simp] MyNat</code> should work, I hope. Except that <code>[simp]</code> currently only works on Props in general.</p>",
        "id": 230739649,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616004423
    },
    {
        "content": "<p>In lean 3 <code>[simp]</code> on a def will instead add <code>[simp]</code> to the def's equation lemmas</p>",
        "id": 230741383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616005086
    },
    {
        "content": "<p>but I guess we don't have equation lemmas ATM</p>",
        "id": 230741430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616005101
    },
    {
        "content": "<p>We should do that eventually, yes :)</p>",
        "id": 230741457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616005111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20databases/near/230741430\">said</a>:</p>\n<blockquote>\n<p>but I guess we don't have equation lemmas ATM</p>\n</blockquote>\n<p>We don't, but simp only needs the \"smart unfolding\" info that is already there</p>",
        "id": 230742383,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616005473
    }
]