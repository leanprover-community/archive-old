[
    {
        "content": "<p>I've got a proof with a lot of cases that look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">constructor_55</span> <span class=\"n\">IA</span> <span class=\"n\">IB</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IA</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IB</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">some_lemma</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>I wanted to automate this with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">I</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span>\n   <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IA</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IB</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">some_lemma</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The problem is, ofc, the variables IA and IB are not bound, and I do not know how to make them bound. Any help?</p>",
        "id": 272193525,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645053531
    },
    {
        "content": "<p>It is hard to tell without seeing the actual goals, but the following tactics may be relevant. They both have doc strings.<br>\n<code>rename</code> and <code>rename_i</code>.</p>",
        "id": 272194647,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645054327
    },
    {
        "content": "<p>Thanks for the quick reply! I'm away from my machine rn, but assuming it works like Coq or such, the problem is that I don't have the initial names for the inductive hypotheses; what I need is an apply * analogue to simp [*]</p>",
        "id": 272196533,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645055857
    },
    {
        "content": "<p>I see that rename_i doesn't have that problem now, but now I've got a new problem: <code>try rename_i A B</code> fails when there's less than two inaccessible variables. Is this a bug? If not, how can I count inaccessible variables (my cases have either 0, 1, 2, or 3; I can handle 0 first but the other ones I don't know how to distinguish)</p>",
        "id": 272206929,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645065175
    },
    {
        "content": "<p>Would it help if you had a tactic that just tries to apply every hyp from the context, using the first that works? (So like <code>assumption</code> but the application doesn't have to close the goal.) I have something like that lying around.</p>\n<p>More generally, this sounds like a problem that my <a href=\"https://github.com/JLimperg/aesop\">Aesop tactic</a> would be a good fit for. It's basically Coq/Isabelle's <code>auto</code> with bells and whistles. It's still unpolished and changing quickly, so I hesitate to recommend it, but if you'd like to try it, I'd be curious to hear whether it works for you.</p>",
        "id": 272234184,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645090485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  that would actually be perfect; as a Lean noob, how do I do this?</p>",
        "id": 272334247,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645137232
    },
    {
        "content": "<p>Also in general is there a nice page where I can see a list of tactics? Those <code>rename</code> tactics were also very helpful, but I don't know where I would have found them if not told about their existence</p>",
        "id": 272334572,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645137438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20variable.20bindings/near/272334247\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>  that would actually be perfect; as a Lean noob, how do I do this?</p>\n</blockquote>\n<p>This info should be in the readme in the Aesop repo. But it's a bit unfriendly right now, mixing implementation and usage, and doesn't have good examples. I'll write a better readme today or early next week. (I'm currently changing a part of the UI as well, so I'd like to wait for that.)</p>",
        "id": 272378486,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645176312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20variable.20bindings/near/272334572\">said</a>:</p>\n<blockquote>\n<p>Also in general is there a nice page where I can see a list of tactics? Those <code>rename</code> tactics were also very helpful, but I don't know where I would have found them if not told about their existence</p>\n</blockquote>\n<p>Afaik no (and I regularly discover new stuff as well). For tactics defined in Core, <code>Init/Notation.lean</code> in the stdlib lists most (all?) tactics. Look for the <code>Parser.Tactic</code> namespace. For mathlib4, check <code>Mathlib/Tactic/*.lean</code>, particularly <code>Basic.lean</code>.</p>",
        "id": 272378832,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645176530
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> is a very good reference.</p>",
        "id": 272397443,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645188664
    },
    {
        "content": "<p>Wow!! #tpil4 is revamped!<br>\nIt's looking great <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>\n<p>Edit: actually, looking at the commit history, I can't find a particularly big commit. But it has very few holes marked with \"TODO: waiting for well-founded support in Lean 4\". Those are the only ones I can find.</p>",
        "id": 272399191,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645189740
    },
    {
        "content": "<p>Leo fixed lots of those TODOs in quite a short time quite a bit ago.</p>",
        "id": 272422167,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1645201259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20variable.20bindings/near/272378486\">said</a>:</p>\n<blockquote>\n<p>This info should be in the readme in the Aesop repo. But it's a bit unfriendly right now, mixing implementation and usage, and doesn't have good examples. I'll write a better readme today or early next week. (I'm currently changing a part of the UI as well, so I'd like to wait for that.)</p>\n</blockquote>\n<p>This took longer than I thought (nothing ever doesn't), but Aesop now has a more friendly README in case you'd like to try it.</p>",
        "id": 273518777,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646066963
    },
    {
        "content": "<p><a href=\"https://github.com/JLimperg/aesop/blob/master/README.md\">https://github.com/JLimperg/aesop/blob/master/README.md</a></p>",
        "id": 273520904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646067722
    },
    {
        "content": "<p>Jannis, did you try to make tests comparing aesop to more specialized tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#continuity\">tactic#continuity</a>? This continuity tactic is potentially very useful but it is so slow that it is not used in practice. I guess it wouldn't take too much patience to build a fake topology library and test aesop here. Maybe with mathport oleans you could even test it on the real lemmas (adding aesop tags and some test in a Lean 4 file importing mathlib oleans).</p>",
        "id": 273522768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646068553
    },
    {
        "content": "<p>I don't know how to properly use the linkifier here. I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#continuity%20/%20continuity\">https://leanprover-community.github.io/mathlib_docs/tactics.html#continuity%20/%20continuity</a>', which sounds to do a specialized subset of what aesop is meant to do.</p>",
        "id": 273523035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646068683
    },
    {
        "content": "<p>I haven't done it yet but this is definitely planned. Aesop should indeed be able to replace these tactics with relatively little additional effort.</p>",
        "id": 273523386,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646068833
    },
    {
        "content": "<p>Do you expect better performance? Or is aesop meant to be an expensive tactic (maybe also outputting a faster tactic call to be replaced with)?</p>",
        "id": 273524454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646069328
    },
    {
        "content": "<p>With <code>continuity</code>, I'd expect good performance because afaict there is not much choice (i.e. for each goal there tends to be at most one lemma that applies), so the search shouldn't branch much. I have a test that proves <code>Even 1000</code> by counting down in increments of 2 and that takes about 1s. Of course there the rule set is very small and entirely deterministic, so not sure how this will translate.</p>\n<p>In general, I'm not sure how Aesop will be used. I'd like to try whether it can be used to solve complex goals with big rule sets as well, and I'll implement a <code>squeeze_simp</code>-like mode to enable this. But maybe it'll turn out that the algorithm is too weak and the tactic always fails on complex goals, in which case it might get relegated to automating <code>continuity</code>-style problems.</p>",
        "id": 273526657,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646070203
    },
    {
        "content": "<p>Do you see any fundamental reasons for why it might be (much) less effective or practical than <code>auto</code> in Isabelle?</p>",
        "id": 273527181,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646070413
    },
    {
        "content": "<p>By the way, I'm planning to take a closer look at it next semester for the second edition our Lean 4 lab with <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>, especially whether it might help students with the final projects</p>",
        "id": 273527427,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646070531
    },
    {
        "content": "<p>No, <code>auto</code> level should be doable. It's a bit hard to tell what exactly <code>auto</code> does because there's no documentation and I've never seriously used Isabelle, but from what I can tell, the basic approach is very similar. Aesop will just need a ton of work setting up all the lemmas (and I'll need to fix a lot of bugs).</p>\n<p>I'd be very curious whether you find it useful for teaching! Though whether it'll help the students or whether they'll be bug-hunting guinea pigs remains to be seen.</p>",
        "id": 273528501,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646070950
    },
    {
        "content": "<p>I can at least tell you that the Isabelle example solution is completely dependent on <code>auto</code> (and a few similar ones like <code>blast</code>) :) . <code>simp</code> only gets you so far in program verification, you really want to do some forward reasoning steps etc. in between.</p>",
        "id": 273528956,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646071126
    },
    {
        "content": "<p>This might already be the case for Aesop, but I should mention that perhaps <code>auto</code>'s best feature is that despite its heuristics, it reports sensible intermediate goals on failure that usually give you a pretty good idea on what lemma to prove &amp; include next</p>",
        "id": 273529264,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646071220
    },
    {
        "content": "<p>Ah, interesting. Do you know whether it does anything smarter than dumping the unsolved goals? Right now I don't have any debugging beyond trace messages, which is not great. (I really need a good MSc student to visualise the traces and the final search tree. I think this could be really nice but I don't want to do it. :P)</p>",
        "id": 273529994,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646071476
    },
    {
        "content": "<p>It might be reporting the furthest safe goal, but I'm not really sure to be honest</p>",
        "id": 273531153,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646071954
    },
    {
        "content": "<p>Ah okay, makes some sense. That I can do as well.</p>",
        "id": 273531769,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646072250
    },
    {
        "content": "<p>I don't know if that's relevant but I have a prototype of Coq-style auto I've been working on, using discrimination tree to index lemmas and combining forward and backward reasoning. I'd be happy to polish it off if that helps</p>",
        "id": 273583180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1646101621
    },
    {
        "content": "<p>Do publish please! I'm interested in your integration of forward reasoning in particular.</p>",
        "id": 273614583,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646128502
    },
    {
        "content": "<p>I'm curious about all this mystery surrounding Isabelle's <code>auto</code>. I understand there is no paper about it.  Is this closed source? Or is it simply very hard to read the code and we don't have access to the author?</p>",
        "id": 273616219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646129319
    }
]