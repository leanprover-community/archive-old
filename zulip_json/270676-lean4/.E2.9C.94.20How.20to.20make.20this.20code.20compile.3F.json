[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- moreover, how to add universe level to make the following compile?</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"o\">((</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">BEq</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"s2\">\"ehy\"</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The above code won't compile, how do i make it work?</p>",
        "id": 322693520,
        "sender_full_name": "Erika Su",
        "timestamp": 1674294969
    },
    {
        "content": "<p>you want what we call a heterogeneous list or HList for short, you can look around in the history of <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> for a few examples</p>",
        "id": 322694263,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674295319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20create.20a.20.22dynamic.22.20list.3F/near/322694263\">said</a>:</p>\n<blockquote>\n<p>you want what we call a heterogeneous list or HList for short, you can look around in the history of <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> for a few examples</p>\n</blockquote>\n<p>Thank you, your advice is helpful. But i am still wondering how to add universe level so that this code can compile.......</p>",
        "id": 322695789,
        "sender_full_name": "Erika Su",
        "timestamp": 1674296031
    },
    {
        "content": "<p>Your syntax is wrong, I think you meant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">BEq</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 322697016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674296557
    },
    {
        "content": "<p>or more normally</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">BEq</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 322697080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674296588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20make.20this.20code.20compile.3F/near/322697016\">said</a>:</p>\n<blockquote>\n<p>Your syntax is wrong, I think you meant:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">BEq</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! It's exactly what i intended.</p>",
        "id": 322697239,
        "sender_full_name": "Erika Su",
        "timestamp": 1674296649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 322697249,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674296655
    },
    {
        "content": "<p>Note that all elements of the list will still have to be from the same universe (or at least lifted into it)</p>",
        "id": 322697376,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674296705
    }
]