[
    {
        "content": "<p>Is it possible to get <code>#eval</code> of a <code>panic!</code> to produce an error or something?</p>",
        "id": 318633756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672423715
    },
    {
        "content": "<p>it does produce an error</p>",
        "id": 318634005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672423847
    },
    {
        "content": "<p>it goes in the output view / you get a popup</p>",
        "id": 318634031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672423860
    },
    {
        "content": "<p>I don't get a popup with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">AAA</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"AAA!\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">AAA</span> <span class=\"c1\">-- 0</span>\n</code></pre></div>",
        "id": 318634177,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672423926
    },
    {
        "content": "<p>I'm not exactly sure where I should look for it in emacs, but I don't see an error anywhere obvious</p>",
        "id": 318634343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672424033
    },
    {
        "content": "<p>in vscode when I paste that in a new file I get a popup \"Lean server printed an error: PANIC at AAA Test:1:17: AAA! backtrace:\" with a button \"show stderr output\" that opens the output panel containing a backtrace</p>",
        "id": 318634578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424125
    },
    {
        "content": "<p>I recall seeing this popup once in VS Code <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> No idea about emacs though. But this is looking like a <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> question</p>",
        "id": 318634706,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672424174
    },
    {
        "content": "<p>That said, <code>#eval</code> already intercepts stdout writes to turn them into diagnostics, it would make sense to also intercept panics and turn them into error diagnostics</p>",
        "id": 318634795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424217
    },
    {
        "content": "<p>that would require some runtime support though, currently panics are logged to stderr and then forgotten, so the server has no way to know that it even happened - it may as well be a panic in the server itself</p>",
        "id": 318634965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424304
    },
    {
        "content": "<p>I'm not sure what would be the xy; I have code that uses <code>assert!</code> to assert invariants and I would like to test it with <code>#eval</code></p>",
        "id": 318635462,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672424551
    },
    {
        "content": "<p>lack of effective panic reporting on emacs is definitely an issue</p>",
        "id": 318635783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424698
    },
    {
        "content": "<p>but I don't know anything about emacs mode so I can't speak to that</p>",
        "id": 318635869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424750
    },
    {
        "content": "<p>I recall they used to be reported in more normal places and it was toned down because it was too disruptive</p>",
        "id": 318636049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424833
    },
    {
        "content": "<p>I still find it extremely weird that the program keeps running after a failing <code>assert!</code></p>",
        "id": 318636308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672424962
    },
    {
        "content": "<p>maybe I should be using some other kind of <code>assert!!</code>?</p>",
        "id": 318636385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672424996
    },
    {
        "content": "<p>do you want it to take down the server?</p>",
        "id": 318636529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425058
    },
    {
        "content": "<p>What happens if you call <code>False.rec</code>? The program surely can't continue after that</p>",
        "id": 318636810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425186
    },
    {
        "content": "<p>oh yeah, that's what I'm talking about...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">myPanic</span><span class=\"bp\">!!</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Empty.rec</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">False.elim</span> <span class=\"n\">lcProof</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">AAA</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">myPanic</span><span class=\"bp\">!!</span> <span class=\"s2\">\"AAA!\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">AAA</span> <span class=\"c1\">-- server crash</span>\n</code></pre></div>\n<p>(don't try this at home)</p>",
        "id": 318637311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425425
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myAssert</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"mi\">7</span> <span class=\"k\">else</span> <span class=\"n\">f.elim</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">myAssert</span> <span class=\"n\">false</span>            <span class=\"c1\">-- 7 !</span>\n</code></pre></div>",
        "id": 318637374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672425466
    },
    {
        "content": "<p>yeah, this is obviously not reliable since it's using UB and lean will optimize away branches leading to <code>False.rec</code></p>",
        "id": 318637531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425527
    },
    {
        "content": "<p>In Haskell <code>error</code> just raises an (imprecise) exception, and ghci will catch and report it</p>",
        "id": 318637699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672425605
    },
    {
        "content": "<p>yeah we've talked about catching panics in other threads, it adds a lot of complexity to the runtime</p>",
        "id": 318637783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425648
    },
    {
        "content": "<p>in lean BaseIO can't throw exceptions at all, that's all layered on in <code>IO</code> which is using the except monad</p>",
        "id": 318637900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425712
    },
    {
        "content": "<p>which kind of precludes throwing IO exceptions from pure code</p>",
        "id": 318637975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425733
    },
    {
        "content": "<p>I think you could have a primitive like <code>catchPanic : BaseIO A -&gt; BaseIO (Except String A)</code> though which catches any panics caused by the input (pure) code (so it's not really an IO exception but essentially plays the same role as one)</p>",
        "id": 318638405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672425938
    },
    {
        "content": "<p>I would think at the least you could kill the thread in a controlled way, and collect the exception from the parent thread</p>",
        "id": 318638931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426164
    },
    {
        "content": "<p>it's not a thread, it's running on the main thread IIRC</p>",
        "id": 318639015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426201
    },
    {
        "content": "<p>Well, that can be changed presumably?</p>",
        "id": 318639079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426216
    },
    {
        "content": "<p>we probably don't want to do that for every use of evalConst</p>",
        "id": 318639121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426240
    },
    {
        "content": "<p>I don't know what evalConst is but I'm sure it can be done for every <code>#eval</code> in the source code at least</p>",
        "id": 318639175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426268
    },
    {
        "content": "<p>Are threads that expensive? In GHC it's pretty reasonable to create a million threads say</p>",
        "id": 318639578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426461
    },
    {
        "content": "<p>there are some other cases where code is run at compile time for an input expression, for example what should <code>by simp (config := panic! \"\")</code> do?</p>",
        "id": 318639611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426482
    },
    {
        "content": "<p>lean's threading mechanism is built around tasks which are on a threadpool. They are relatively cheap, but I don't know how complicated it would be to abort them</p>",
        "id": 318639841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426575
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>rwbarton@operad:/tmp$ ghci -XTemplateHaskell\nGHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help\nPrelude&gt; $( error \"hi\" )\n\n&lt;interactive&gt;:1:1: error:\n    • Exception when trying to run compile-time code:\n        hi\nCallStack (from HasCallStack):\n  error, called at &lt;interactive&gt;:1:4 in interactive:Ghci1\n      Code: error \"hi\"\n    • In the untyped splice: $(error \"hi\")\nPrelude&gt;\n</code></pre></div>",
        "id": 318639923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426625
    },
    {
        "content": "<p>For sure these kinds of issues are not high priority though.</p>",
        "id": 318640096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672426690
    },
    {
        "content": "<p>As an annoying workaround, the <code>assert!'</code> idea isn't too bad. You can make it print the message with <code>dbg_trace</code> and then manually <code>panic!</code> with the same message</p>",
        "id": 318640709,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672426956
    },
    {
        "content": "<p>that doesn't solve the issue that the code continues despite the assertion failure though</p>",
        "id": 318640917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672427050
    },
    {
        "content": "<p>hm, what happens if you print to stderr inside <code>#eval</code>?</p>",
        "id": 318641032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672427108
    },
    {
        "content": "<p>it appears to be indistinguishable from regular print</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">IO.eprintln</span> <span class=\"s2\">\"hi\"</span> <span class=\"c1\">-- hi</span>\n</code></pre></div>",
        "id": 318641200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672427178
    },
    {
        "content": "<p>There's an old TODO for capturing panics during <code>#eval</code> like we do for stderr/out: <a href=\"https://github.com/leanprover/lean4/blob/10d2403e8330d4a5d9539daed77dc30783589870/src/runtime/object.cpp#L100\">https://github.com/leanprover/lean4/blob/10d2403e8330d4a5d9539daed77dc30783589870/src/runtime/object.cpp#L100</a></p>",
        "id": 318655746,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672434943
    }
]