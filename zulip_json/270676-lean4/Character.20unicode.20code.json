[
    {
        "content": "<p>Is there a function in Lean 4 core that can help me detect whether a character is a special Unicode character and to extract its code?</p>\n<p>So alpha would become <code>U-03B1</code> or something</p>",
        "id": 290707954,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658709131
    },
    {
        "content": "<p>Hmm, I believe I can find my way with <a href=\"https://github.com/leanprover/lean4/blob/a62949c49b4f631624fe33315f04b738f0cce349/src/Init/Prelude.lean#L1023\">this</a></p>",
        "id": 290714077,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658717285
    },
    {
        "content": "<p>Yes, Lean characters are Unicode codepoints.  You can use <code>Char.toNat</code> to get the numerical value of the codepoint.  Weirdly enough, we even have a function to turn the numerical value of a <code>Char</code> into a hex string (<code>charToHex</code>), but not the corresponding function for natural numbers. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> </p>\n<p>I don't know what a \"special\" Unicode character is.  Also please be aware that some characters are encoded as a sequence of multiple codepoints.</p>",
        "id": 290734759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658740011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what do you mean by your last sentence?</p>",
        "id": 290751870,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658751892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"üòµ‚Äçüí´\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 290752027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658751987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Character.20unicode.20code/near/290734759\">said</a>:</p>\n<blockquote>\n<p>Weirdly enough, we even have a function to turn the numerical value of a <code>Char</code> into a hex string (<code>charToHex</code>), but not the corresponding function for natural numbers. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>And weirdly enough, turns out that's <em>precisely</em> what I need!</p>",
        "id": 290758151,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658755608
    },
    {
        "content": "<p>I'm confused by the result of <code>charToHex</code> on that smiley face string.  The  <a href=\"https://emojipedia.org/face-with-spiral-eyes/\">face-with-spiral-eyes</a> s made up of 3 unicode code points U+1F635, ‚Äç U+200D and U+1F4AB and indeed the Char.toNat values match this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dump_chars</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">String.data</span> <span class=\"n\">s</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">Char.toNat</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">dump_chars</span> <span class=\"s2\">\"üòµ‚Äçüí´\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">128565</span>\n<span class=\"cm\">8205</span>\n<span class=\"cm\">128171</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>but  charToHex  doesn't look very hex like...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dump_chars</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">String.data</span> <span class=\"n\">s</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">charToHex</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">dump_chars</span> <span class=\"s2\">\"üòµ‚Äçüí´\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">*5</span>\n<span class=\"cm\">*d</span>\n<span class=\"cm\">*b</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is charToHex  is broken?</p>",
        "id": 291254148,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659043619
    },
    {
        "content": "<p>Interesting! Looks like it <a href=\"https://github.com/leanprover/lean4/blob/a2ccf8f122618d1d30916325a0488aca9ad5bf28/src/Init/Data/Repr.lean#L180\">assumes</a> <code>c.toNat &lt;= 255</code>. By the usage in <code>toHexCore</code> below I assume it's only meant to work for low ASCII values, but if so then it shouldn't be in the global namespace.</p>",
        "id": 291255001,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659044108
    },
    {
        "content": "<p>perhaps it needs to be recursive?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">toHex</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"k\">then</span> <span class=\"n\">hexDigitRepr</span> <span class=\"n\">n</span> <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">d2</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">16</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">d1</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">16</span><span class=\"bp\">;</span>\n    <span class=\"o\">(</span><span class=\"n\">toHex</span> <span class=\"n\">d2</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">hexDigitRepr</span> <span class=\"n\">d1</span>\n</code></pre></div>\n<p>(The largest <a href=\"https://en.wikipedia.org/wiki/Code_point\">unicode code point</a> is 10FFFF, so I guess it could be limited to a max of 6 hex digits).</p>",
        "id": 291255207,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1659044215
    }
]