[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I was trying to use doc-gen4 the other day, and I cannot build it due to its dependency on <code>Cli</code> which is far behind lean updates. Any suggestions?</p>",
        "id": 288517484,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1657022607
    },
    {
        "content": "<p>Yeah it's always a little annoying with the breaking nightly changes, getting it to 30-06 already took me half a day to get right and a bunch of PRs and diffs. However due to the fact that the getOp issue is currently very much undecided and might continue to experience breaking changes in the following nightlies and the fact that I'm busy learning for my exams I did not plan on fixing the mess again until this section of Lean has stabilized. I'll get to fixing it at the 24.7 most likely since that's the day after my last exam for this semester so I'll be all free again. By then the nightlies will hopefully be a little more stable again^^</p>\n<p>In the mean time it will just be broken for ~20 days unless someone else fixes it, sorry :/</p>",
        "id": 288517871,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657022802
    },
    {
        "content": "<p>No problem. But do you happen to know which was the last  (or close to last) version that was not broken <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> ? I will checkout that and build (I made a couple of random guesses but failed).</p>",
        "id": 288519876,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1657023750
    },
    {
        "content": "<p>In general when I push something to main it did always build at the time when I pushed if you use the compiler version that is in lean-toolchain (the mentioned 30-06) compiling that from scratch and running it against another project that is using 30-06 (the fact that the compiler versions match up can be quite important in times of frequent change^^) does yield good results on the mini project I use for testing before running it against mathlib:</p>\n<p><a href=\"/user_uploads/3121/WWDSiepoQXJ87xZ8HhWEnQ8K/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WWDSiepoQXJ87xZ8HhWEnQ8K/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WWDSiepoQXJ87xZ8HhWEnQ8K/image.png\"></a></div>",
        "id": 288520488,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657024043
    },
    {
        "content": "<p>Thanks. <br>\nBut presumably since I am using a fairly recent version of lean, if I use something that can handle <code>Cli</code> (which uses <code>OptionM</code> for example) I cannot build. <br>\nI will wait for the eventual stable doc-gen4.</p>",
        "id": 288521343,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1657024469
    },
    {
        "content": "<p>Hopefully after the first real release of Lean the simple-ish libraries doc-gen depends on won't be broken so often anymore and everything will be stable-ish^^</p>",
        "id": 288521743,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657024671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/288517484\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> I was trying to use doc-gen4 the other day, and I cannot build it due to its dependency on <code>Cli</code> which is far behind lean updates. Any suggestions?</p>\n</blockquote>\n<p>Just to be clear, the lean4-cli <code>nightly</code> branch is up to date and <code>main</code> is in sync with the milestone releases.</p>",
        "id": 288542326,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1657033182
    },
    {
        "content": "<p>It's definitely not only related to lean4-cli (if at all) yeah, there is some funky linker issues I'm seeing, other dependencies break due to getOp etc.</p>",
        "id": 288542736,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657033334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/288542326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/288517484\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> I was trying to use doc-gen4 the other day, and I cannot build it due to its dependency on <code>Cli</code> which is far behind lean updates. Any suggestions?</p>\n</blockquote>\n<p>Just to be clear, the lean4-cli <code>nightly</code> branch is up to date and <code>main</code> is in sync with the milestone releases.</p>\n</blockquote>\n<p>Thanks. Good to know that. <br>\nI planned to use lean4-cli  but did not because of seeing the last commit on github being from a while back. I will use it (via the nightly).</p>",
        "id": 288615666,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1657075033
    },
    {
        "content": "<p>Exams done onwards to fixing everything!</p>",
        "id": 290216471,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658312517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> <code>main</code> compiles and works with 07-20 now^^, the documentation for current mathlib4 should deploy within the next few minutes.</p>",
        "id": 290244016,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658327919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> There are mathlib4 versions for 07-19, 07-24 and 07-28. Can you sync a DocGen4 version to one of them (I do not see mathlib4 for 07-20).</p>\n<p>Thanks.</p>",
        "id": 290852277,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658815091
    },
    {
        "content": "<p>I did see the bulid failure yesterday evening yeah I just didn't get to fixing it yet, wait a sec.</p>",
        "id": 290866615,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658826984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> fixed and deploying</p>",
        "id": 290867957,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658827892
    },
    {
        "content": "<p>Thanks</p>",
        "id": 290868157,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658828026
    },
    {
        "content": "<p>Unfortunately I am still not able to build, though probably the issue is with some os-level setup. I am using Ubuntu 20.04. With <code>lake build</code> I get the following error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-24/bin/leanc -shared -o ./lean_packages/CMark/build/cmark/libleancmark.so -Wl,--whole-archive ./lean_packages/CMark/build/cmark/libleancmark.a -Wl,--no-whole-archive</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_PC32</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"n\">symbol</span> <span class=\"bp\">'</span><span class=\"n\">stderr'</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-24/lib/glibc/libc.so</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">buffer.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">buffer.o</span><span class=\"o\">:(</span><span class=\"n\">cmark_strbuf_grow</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cmark</span><span class=\"bp\">/</span><span class=\"n\">libleancmark.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_PC32</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"n\">symbol</span> <span class=\"bp\">'</span><span class=\"n\">stderr'</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-24/lib/glibc/libc.so</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">cmark.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">cmark.o</span><span class=\"o\">:(</span><span class=\"n\">xcalloc</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cmark</span><span class=\"bp\">/</span><span class=\"n\">libleancmark.a</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_PC32</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"n\">symbol</span> <span class=\"bp\">'</span><span class=\"n\">stderr'</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-24/lib/glibc/libc.so</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">cmark.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"n\">cmark.o</span><span class=\"o\">:(</span><span class=\"n\">xrealloc</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cmark</span><span class=\"bp\">/</span><span class=\"n\">libleancmark.a</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any help is appreciated. Maybe I should run lake with some flags to debug further?</p>",
        "id": 290880986,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658836694
    },
    {
        "content": "<p>I already fixed that cmark issue a while ago, you're cloning or updating doc-gen in a wrong way if it still does this, this indicates that the cmark dependency you are using for it is out of date</p>",
        "id": 290883160,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658838151
    },
    {
        "content": "<p>And FYI the fix was to actually add -fPIC to the cmark compilation call, C compiler error messages can actually be useful sometimes :D</p>",
        "id": 290883320,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658838261
    },
    {
        "content": "<p>Thanks. I am nuking the <code>build</code>, <code>lean_packages</code> etc and trying again.</p>",
        "id": 290885503,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658839581
    },
    {
        "content": "<p>I cloned afresh and I am now getting a different error, this time with <code>leanInk</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">cb529041f71a4ea8348628a8c723326e3e4bdecc</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">reference</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">tree</span><span class=\"o\">:</span> <span class=\"n\">cb529041f71a4ea8348628a8c723326e3e4bdecc</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">git</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">128</span>\n</code></pre></div>\n<p>Indeed if I navigate to <code>https://github.com/hargonix/LeanInk/tree/cb529041f71a4ea8348628a8c723326e3e4bdecc</code> I see a warning on Github: \"This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository\"</p>",
        "id": 290886019,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658839918
    },
    {
        "content": "<p>oh shitttt</p>",
        "id": 290888246,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658841105
    },
    {
        "content": "<p>that's totally on me i force pushed over that like 30 min ago on another branch because that diff isn't needed, let me fix that</p>",
        "id": 290888280,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658841122
    },
    {
        "content": "<p>Phew my reflog still got that commit close one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Can you pull and try again now? That was really dumb of me sorry <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span></p>",
        "id": 290889005,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658841497
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> - it builds fine now.</p>",
        "id": 290889413,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658841712
    },
    {
        "content": "<p>Phew, what happened was that LeanInk on its doc-gen branch has a diff to serialize some internal datastructures to Json so i can use them but for the LeanInk link back feature I don't need that anymore so I removed it from that branch in order to avoid having to change the branch name etc...which of course breaks the doc-gen main branch that still relies on its existence /o\\</p>",
        "id": 290889593,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658841788
    },
    {
        "content": "<p>Just ran it on my code (with <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> ) - the output is splendid. Thanks a lot <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> for this.</p>",
        "id": 290890892,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658842378
    },
    {
        "content": "<p>If you want to see another product of doc-gen4 publicly hosted, I have deployed  at  <a href=\"http://math.iisc.ac.in/~gadgil/unit_conjecture//Polylean/TorsionFree.html\">http://math.iisc.ac.in/~gadgil/unit_conjecture//Polylean/TorsionFree.html</a><br>\n(link is not to the top level).</p>",
        "id": 290891690,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658842773
    },
    {
        "content": "<p>Actually for some reason we had not made things doc-strings. Will do so and get better docs.</p>",
        "id": 290891863,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658842855
    },
    {
        "content": "<p><a href=\"http://math.iisc.ac.in/~gadgil/unit_conjecture/Polylean/ModArith.html#instHomomorphismIntFinOfNatNatInstOfNatNatToAddCommGroupToRingInstCommRingIntInstCommRingFinInstNonemptyInstInhabitedFinHAddNatInstHAddInstAddNatOfNatMod2\">http://math.iisc.ac.in/~gadgil/unit_conjecture/Polylean/ModArith.html#instHomomorphismIntFinOfNatNatInstOfNatNatToAddCommGroupToRingInstCommRingIntInstCommRingFinInstNonemptyInstInhabitedFinHAddNatInstHAddInstAddNatOfNatMod2</a></p>\n<p>that's gonna be the longest instance name i've seen so far</p>",
        "id": 290892388,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658843122
    },
    {
        "content": "<p>This was auto-generated right? You probably can't refer to it explicitly whilst staying under the 100 char per line limit</p>",
        "id": 290916438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658851760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/290916438\">said</a>:</p>\n<blockquote>\n<p>This was auto-generated right? You probably can't refer to it explicitly whilst staying under the 100 char per line limit</p>\n</blockquote>\n<p>Yes, auto-generated.</p>",
        "id": 290917411,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658852169
    },
    {
        "content": "<p>That gives me cause to worry about the instance name generator then, since the input is fairly small (at least from the user perspective)</p>",
        "id": 290923168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658854512
    },
    {
        "content": "<p>You might think, why does it matter if instances have long names since they are usually anonymous? But remember that when you are debugging and looking at <code>pp.all</code> output, you will commonly see an instance name like this in a stack with 6 others, repeated hundreds of times in the proof term. Instances tend to dominate the output in this case</p>",
        "id": 290923952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658854818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/290923168\">said</a>:</p>\n<blockquote>\n<p>since the input is fairly small (at least from the user perspective)</p>\n</blockquote>\n<p>I believe this is the problem. The input looks small, but actually isn't. The <code>AddCommGroup.Homoroprhism</code> class has two instance-implicit parameters that have to be synthesized on every use (here for <code>Int</code> and <code>Fin</code>) and those specific instances are what is resulting in the very long name.</p>",
        "id": 290928185,
        "sender_full_name": "Mac",
        "timestamp": 1658856759
    },
    {
        "content": "<p>I don't think the naming system should make use of implicit arguments for this reason</p>",
        "id": 290961364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658872705
    },
    {
        "content": "<p>If the arguments are canonical instances then they are uniquely defined from the other arguments anyway</p>",
        "id": 290961425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658872757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/290928185\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/290923168\">said</a>:</p>\n<blockquote>\n<p>since the input is fairly small (at least from the user perspective)</p>\n</blockquote>\n<p>I believe this is the problem. The input looks small, but actually isn't. The <code>AddCommGroup.Homoroprhism</code> class has two instance-implicit parameters that have to be synthesized on every use (here for <code>Int</code> and <code>Fin</code>) and those specific instances are what is resulting in the very long name.</p>\n</blockquote>\n<p>That is exactly the case - we use a fair amount of typeclass inferences so instances built from other instances.</p>",
        "id": 290975425,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658884145
    },
    {
        "content": "<p>Sorry to bring this up again, but I think something in the last couple weeks might have broken doc-gen4 again. I tried running it on some personal repos and I'm either getting segfault errors or lakefile errors. </p>\n<p>I also tested it on mathlib4 thinking something about my repositories might be messing it up, but I get the following error when running <code>doc-gen4 Mathlib</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">parser</span> <span class=\"kn\">attribute</span> <span class=\"n\">implementation</span> <span class=\"n\">builder</span> <span class=\"n\">arguments</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 292642542,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660073102
    },
    {
        "content": "<p>Does <code>doc-gen4</code> have to be built with the same release as the repository it's going to generate the documentation for?</p>",
        "id": 292642701,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660073173
    },
    {
        "content": "<p>It's a little more intricate than that but generally speaking since Lean is very unstable right now that is usually a good idea. However this is not really enough in this case. What I would have to do here is also upgrade the Lake dependency, I last looked at this on the weekend and there Lake changed its API In a way that I had to figure out new stuff again and to be quite honest I couldn't be bothered to at that time since I saw the same API was again changed in one of the next nightlies :D however I see that mathlib has now pushed further as well so I will reinvestigate...I think I also saw some bugs with LeanInk and what not, I'll see how it goes.</p>\n<p>Either way, yes in general its a good idea to build doc-gen with the same Lean version as the project you are trying to document because of quickly changing API stuff, once we have a Lean stable release this should become much much better. Right now you can basically assume if your project version does not match doc-gens current version it will blow up in at least a significant amount of cases.</p>",
        "id": 292643313,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660073417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> the current nightly breaks the lakefile of <a href=\"https://github.com/xubaiw/CMark.lean/blob/main/lakefile.lean\">https://github.com/xubaiw/CMark.lean/blob/main/lakefile.lean</a> (a doc-gen dependency)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">inputFileTarget'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">fileTargetWithDep'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">inputFileTarget'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">fileTargetWithDep'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">staticLibTarget'</span>\n</code></pre></div>\n<p>are these functions still somewhere? Does it have to be done in a completely different way?</p>\n<p>It also broke your by file facet which I will just remove for now, it is not exactly useful in its own right anyways and if you are still working the API it's just additonal unnecessary maintenance effort</p>",
        "id": 292644342,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660073811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> yeah, the entire API has changed (for all custom builds).</p>",
        "id": 292644575,
        "sender_full_name": "Mac",
        "timestamp": 1660073905
    },
    {
        "content": "<p>Everything now is in a essentially stable final state including facets and excluding, of course, necessary maintenance to fix bugs.</p>",
        "id": 292644787,
        "sender_full_name": "Mac",
        "timestamp": 1660074003
    },
    {
        "content": "<p>s/no/now ?</p>",
        "id": 292644870,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660074033
    },
    {
        "content": "<p>With the addition of library facets, the doc-gen4 <code>docs</code> facet should be implementable on a file and library level.</p>",
        "id": 292644925,
        "sender_full_name": "Mac",
        "timestamp": 1660074061
    },
    {
        "content": "<p>In that case, is there a nice migration path or does there have to happen some fundamental change to CMarks lakefile? I would assume that the lake FFI example shows how to do this type of stuff?</p>\n<p>And my follow up question would have been whether its sensible for me to update doc-gen now or whether you are planning to throw things overboard again in the coming days, then I'd just leave it be as is. But from your remark I'm assuming this is not the case and I can just fix things right now and expect them not to be broken in the next few nightlies right?</p>",
        "id": 292645221,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660074181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292645221\">said</a>:</p>\n<blockquote>\n<p>In that case, is there a nice migration path or does there have to happen some fundamental change to CMarks lakefile? I would assume that the lake FFI example shows how to do this type of stuff?</p>\n</blockquote>\n<p>Unforunately, yes, CMark needs to update to be compatible (the FFI example has been update to show what is necessary, though).</p>",
        "id": 292646621,
        "sender_full_name": "Mac",
        "timestamp": 1660074767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292645221\">said</a>:</p>\n<blockquote>\n<p>or whether you are planning to throw things overboard again in the coming days, then I'd just leave it be as is. But from your remark I'm assuming this is not the case and I can just fix things right now and expect them not to be broken in the next few nightlies right?</p>\n</blockquote>\n<p>Yep I am done with major changes, I will hopefully doing a maintenance release to fix any bugs / missing features at the end of the month, but no more major changes. In fact, I will largely be bowing out of Lean until next Spring/Summer as I have to work on my dissertation. So things are pretty final as they are for the foreseeable future.</p>",
        "id": 292647075,
        "sender_full_name": "Mac",
        "timestamp": 1660074940
    },
    {
        "content": "<p>For the doc-gen4 facets, here is how they should probably look updated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">module_facet</span> <span class=\"n\">docs</span> <span class=\"o\">(</span><span class=\"n\">mod</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">docGen4</span> <span class=\"bp\">←</span> <span class=\"n\">findLeanExe</span><span class=\"bp\">?</span> <span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span>\n    <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"s2\">\"no doc-gen4 executable configuration found in workspace\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">exeJob</span> <span class=\"bp\">←</span> <span class=\"n\">docGen4.exe.fetch</span>\n  <span class=\"k\">let</span> <span class=\"n\">modJob</span> <span class=\"bp\">←</span> <span class=\"n\">mod.leanBin.fetch</span>\n  <span class=\"k\">let</span> <span class=\"n\">buildDir</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root.buildDir</span>\n  <span class=\"k\">let</span> <span class=\"n\">docFile</span> <span class=\"o\">:=</span> <span class=\"n\">mod.filePath</span> <span class=\"o\">(</span><span class=\"n\">buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"doc\"</span><span class=\"o\">)</span> <span class=\"s2\">\"html\"</span>\n  <span class=\"n\">exeJob.bindAsync</span> <span class=\"k\">fun</span> <span class=\"n\">exeFile</span> <span class=\"n\">exeTrace</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">modJob.bindSync</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">modTrace</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">depTrace</span> <span class=\"o\">:=</span> <span class=\"n\">exeTrace.mix</span> <span class=\"n\">modTrace</span>\n    <span class=\"k\">let</span> <span class=\"n\">trace</span> <span class=\"bp\">←</span> <span class=\"n\">buildFileUnlessUpToDate</span> <span class=\"n\">docFile</span> <span class=\"n\">depTrace</span> <span class=\"k\">do</span>\n      <span class=\"n\">proc</span> <span class=\"o\">{</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">exeFile.toString</span>\n        <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"single\"</span><span class=\"o\">,</span> <span class=\"n\">mod.name.toString</span><span class=\"o\">]</span>\n        <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"s2\">\"LEAN_PATH\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getAugmentedLeanPath</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">)]</span>\n      <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">docFile</span><span class=\"o\">,</span> <span class=\"n\">trace</span><span class=\"o\">)</span>\n\n<span class=\"n\">library_facet</span> <span class=\"n\">docs</span> <span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">BuildJob.mixArray</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">lib.recBuildLocalModules</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">docs</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 292647228,
        "sender_full_name": "Mac",
        "timestamp": 1660074998
    },
    {
        "content": "<p>Very cool, I'll fix CMark then and finally switch to the new doc-gen approach as well.</p>\n<p>One more question though, the FFI example demonstrates how to build for a single FFI C target, and as far as I can see targets are identified by name (<a href=\"https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean#L24\">https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean#L24</a>) do you have an example that showcases how one might dynamically generate multiple targets? or should I have one big <code>target</code> that iterates over all C files and builds them</p>",
        "id": 292648126,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660075294
    },
    {
        "content": "<p>Thanks for working on this! I tried to hack away at it to bump it to a more recent nightly, but I obviously got stuck since I didn't know the codebase at all.</p>",
        "id": 292649665,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660075859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292648126\">said</a>:</p>\n<blockquote>\n<p>do you have an example that showcases how one might dynamically generate multiple targets? or should I have one big <code>target</code> that iterates over all C files and builds them</p>\n</blockquote>\n<p>This is non-trivial as what this would really want is a non-Lean <code>LeanLib</code>-like target that specifies the targets to collect. Currently, the simplest solution is just to have one Lake-facing target that collects the builds jobs of the smaller targets. Alternatively, you could do some metaprogramming and generate <code>target</code> declarations for each file to build. The later has the advantage of making the targets accessible to Lake (which provides e.g., CLI support). The former has the advantage of simpler (i.e., no metaprogramming shenanigans).</p>",
        "id": 292650673,
        "sender_full_name": "Mac",
        "timestamp": 1660076265
    },
    {
        "content": "<p>Eh, I would hope nobody wants to build those C files manually...I'll try to get the big target going then and to the rest as build jobs</p>",
        "id": 292651043,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660076413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> looking at CMark's source, it can largely just be an API-to-API translation, there is no real need to reorganize it.</p>",
        "id": 292651260,
        "sender_full_name": "Mac",
        "timestamp": 1660076513
    },
    {
        "content": "<p>One thing to keep in mind is the <code>pkg</code> caveat  for parameterized targets that tripped <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> up in yesterday's <a href=\"#narrow/stream/270676-lean4/topic/Weird.20Lake.20errors/near/292368790\">thread</a>, which he recorded in <a href=\"https://github.com/leanprover/lake/issues/114\">lake#114</a>.</p>",
        "id": 292651579,
        "sender_full_name": "Mac",
        "timestamp": 1660076644
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">System</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">CMark</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cmarkDir</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cmark\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">wrapperDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"wrapper\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">srcNames</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"blocks\"</span><span class=\"o\">,</span> <span class=\"s2\">\"buffer\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cmark_ctype\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cmark\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"commonmark\"</span><span class=\"o\">,</span> <span class=\"s2\">\"houdini_href_e\"</span><span class=\"o\">,</span> <span class=\"s2\">\"houdini_html_e\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"houdini_html_u\"</span><span class=\"o\">,</span> <span class=\"s2\">\"html\"</span><span class=\"o\">,</span> <span class=\"s2\">\"inlines\"</span><span class=\"o\">,</span> <span class=\"s2\">\"iterator\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"latex\"</span><span class=\"o\">,</span> <span class=\"s2\">\"man\"</span><span class=\"o\">,</span> <span class=\"s2\">\"node\"</span><span class=\"o\">,</span> <span class=\"s2\">\"references\"</span><span class=\"o\">,</span> <span class=\"s2\">\"render\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"scanners\"</span><span class=\"o\">,</span> <span class=\"s2\">\"utf8\"</span><span class=\"o\">,</span> <span class=\"s2\">\"xml\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">wrapperName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"wrapper\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">buildDir</span> <span class=\"o\">:=</span> <span class=\"n\">defaultBuildDir</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cmarkOTarget</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">srcName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IndexBuildM</span> <span class=\"o\">(</span><span class=\"n\">BuildJob</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">buildDir</span> <span class=\"bp\">/</span> <span class=\"n\">cmarkDir</span> <span class=\"bp\">/</span> <span class=\"o\">⟨</span> <span class=\"n\">srcName</span> <span class=\"bp\">++</span> <span class=\"s2\">\".o\"</span> <span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcTarget</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">cmarkDir</span> <span class=\"bp\">/</span> <span class=\"o\">⟨</span> <span class=\"n\">srcName</span> <span class=\"bp\">++</span> <span class=\"s2\">\".c\"</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">buildFileAfterDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcTarget</span> <span class=\"bp\">λ</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">cmarkDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n    <span class=\"n\">compileO</span> <span class=\"o\">(</span><span class=\"n\">srcName</span> <span class=\"bp\">++</span> <span class=\"s2\">\"c\"</span><span class=\"o\">)</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"n\">flags</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wrapperOTarget</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IndexBuildM</span> <span class=\"o\">(</span><span class=\"n\">BuildJob</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">buildDir</span> <span class=\"bp\">/</span> <span class=\"n\">wrapperDir</span> <span class=\"bp\">/</span> <span class=\"o\">⟨</span> <span class=\"n\">wrapperName</span> <span class=\"bp\">++</span> <span class=\"s2\">\".o\"</span> <span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcTarget</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">wrapperDir</span> <span class=\"bp\">/</span> <span class=\"o\">⟨</span> <span class=\"n\">wrapperName</span> <span class=\"bp\">++</span> <span class=\"s2\">\".c\"</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">buildFileAfterDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcTarget</span> <span class=\"bp\">λ</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">cmarkDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n    <span class=\"n\">compileO</span> <span class=\"o\">(</span><span class=\"n\">wrapperName</span> <span class=\"bp\">++</span> <span class=\"s2\">\"c\"</span><span class=\"o\">)</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"n\">flags</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">CMark</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">cmark</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"n\">buildDir</span> <span class=\"bp\">/</span> <span class=\"n\">cmarkDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"libleancmark.a\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">oTargets</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">srcNames.mapM</span> <span class=\"o\">(</span><span class=\"n\">cmarkOTarget</span> <span class=\"n\">pkg</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">wrapperOTarget</span> <span class=\"n\">pkg</span><span class=\"o\">]</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"n\">libFile</span> <span class=\"n\">oTargets</span>\n</code></pre></div>\n<p>was completely painless indeed^^ Amazing, Putting this here in case someone has similar needs.</p>",
        "id": 292654401,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660077789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Two more things and you'll be rid off me for quite some time again :D, the main doc-gen still attempts to build the lake root package with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.mkBuildContext</span> <span class=\"n\">ws</span> <span class=\"n\">true</span>\n    <span class=\"o\">(</span><span class=\"n\">ws.root.buildImportsAndDeps</span> <span class=\"n\">imports</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">())</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">Lake.MonadLog.eio</span> <span class=\"n\">ctx</span>\n</code></pre></div>\n<p>which broke again now, I know that the facet will fix this but I'd like to fix the main build first for now and get to the facet multi file stuff when I have more time...is there a quick way to do this right now?</p>\n<p>Secondly my SourceLinker is broken again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">for</span> <span class=\"n\">pkg</span> <span class=\"k\">in</span> <span class=\"n\">ws.packageArray</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">dep</span> <span class=\"k\">in</span> <span class=\"n\">pkg.dependencies</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">dep.src</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Lake.Source.git</span> <span class=\"n\">url</span> <span class=\"n\">commit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">getGithubBaseUrl</span> <span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">commit.getD</span> <span class=\"s2\">\"main\"</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- TODO: What do we do here if linking a source is not possible?</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"https://example.com\"</span><span class=\"o\">,</span> <span class=\"s2\">\"master\"</span><span class=\"o\">)</span>\n      <span class=\"n\">gitMap</span> <span class=\"o\">:=</span> <span class=\"n\">gitMap.insert</span> <span class=\"n\">dep.name</span> <span class=\"n\">value</span>\n</code></pre></div>\n<p><code>pkg.dependencies</code> doesn't seem to be a thing anymore, can I still somehow  construct my gitMap? (This is an issue that I cannot simpl solve with the facet, <code>lake graph</code> would be the proper solution here)</p>\n<p>I know I could start grepping for both in the Lake repo to probably figure out what I want but I figured since I already have you here I might as well ask :P</p>",
        "id": 292657093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660078930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292657093\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Two more things and you'll be rid off me for quite some time again :D, the main doc-gen still attempts to build the lake root package with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.mkBuildContext</span> <span class=\"n\">ws</span> <span class=\"n\">true</span>\n    <span class=\"o\">(</span><span class=\"n\">ws.root.buildImportsAndDeps</span> <span class=\"n\">imports</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">())</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">Lake.MonadLog.eio</span> <span class=\"n\">ctx</span>\n</code></pre></div>\n<p>which broke again now, I know that the facet will fix this but I'd like to fix the main build first for now and get to the facet multi file stuff when I have more time...is there a quick way to do this right now?</p>\n</blockquote>\n<p>Take a look at printPaths to see how to format this: <a href=\"https://github.com/leanprover/lake/blob/6db611df8a814d6a9f8962205384b1659791354a/Lake/CLI/Actions.lean#L35-L37\">https://github.com/leanprover/lake/blob/6db611df8a814d6a9f8962205384b1659791354a/Lake/CLI/Actions.lean#L35-L37</a></p>",
        "id": 292657737,
        "sender_full_name": "Mac",
        "timestamp": 1660079182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292657093\">said</a>:</p>\n<blockquote>\n<p><code>pkg.dependencies</code> doesn't seem to be a thing anymore, can I still somehow  construct my gitMap? (This is an issue that I cannot simpl solve with the facet, <code>lake graph</code> would be the proper solution here)</p>\n</blockquote>\n<p>Package themselves now have a <a href=\"https://github.com/leanprover/lake/blob/6db611df8a814d6a9f8962205384b1659791354a/Lake/Config/Package.lean#L186-L187\"><code>remoteUrl?</code></a> field that you can just use directly.</p>",
        "id": 292658026,
        "sender_full_name": "Mac",
        "timestamp": 1660079309
    },
    {
        "content": "<p>Also, you should probably be defaulting the commit to <code>master</code> rather than <code>main</code>, since that is what Lake does.</p>",
        "id": 292658188,
        "sender_full_name": "Mac",
        "timestamp": 1660079401
    },
    {
        "content": "<p>And the <code>gitTag?</code>is the commit then I assume?</p>",
        "id": 292658265,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660079420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292658188\">said</a>:</p>\n<blockquote>\n<p>Also, you should probably be defaulting the commit to <code>master</code> rather than <code>main</code>, since that is what Lake does.</p>\n</blockquote>\n<p>will do</p>",
        "id": 292658281,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660079428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292658265\">said</a>:</p>\n<blockquote>\n<p>And the <code>gitTag?</code>is the commit then I assume?</p>\n</blockquote>\n<p>Not exactly, the tag is the tag if it the resolved commit has an associated Git tag.</p>",
        "id": 292658335,
        "sender_full_name": "Mac",
        "timestamp": 1660079458
    },
    {
        "content": "<p>How can I get the commit then?</p>",
        "id": 292658391,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660079475
    },
    {
        "content": "<p>You realistically need to read the manifest for this. Your old solution was actually wrong, as the revision in the lakefile is not necessarily related to the revision actually used.</p>",
        "id": 292658560,
        "sender_full_name": "Mac",
        "timestamp": 1660079536
    },
    {
        "content": "<p>Honestly, reading the manifest would probably be the best solution anyway as it has all the package source information in a nice JSON format.</p>",
        "id": 292658653,
        "sender_full_name": "Mac",
        "timestamp": 1660079586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292657093\">said</a>:</p>\n<blockquote>\n<p><code>pkg.dependencies</code> doesn't seem to be a thing anymore, can I still somehow  construct my gitMap? (This is an issue that I cannot simpl solve with the facet, <code>lake graph</code> would be the proper solution here)</p>\n<p>I know I could start grepping for both in the Lake repo to probably figure out what I want but I figured since I already have you here I might as well ask :P</p>\n</blockquote>\n<p>So this is actually something I managed to fix by hand when I was hacking away at trying to get <code>doc-gen4</code> to work. I just <code>cd</code>ed into the package directory, and copied the command from <code>getProjectCommit</code></p>",
        "id": 292658655,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660079588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292658653\">said</a>:</p>\n<blockquote>\n<p>Honestly, reading the manifest would probably be the best solution anyway as it has all the package source information in a nice JSON format.</p>\n</blockquote>\n<p>But this is almost certainly the right solution...</p>",
        "id": 292658737,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660079635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/292658653\">said</a>:</p>\n<blockquote>\n<p>Honestly, reading the manifest would probably be the best solution anyway as it has all the package source information in a nice JSON format.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lake/blob/6db611df8a814d6a9f8962205384b1659791354a/Lake/Load/Manifest.lean#L104-L110\">https://github.com/leanprover/lake/blob/6db611df8a814d6a9f8962205384b1659791354a/Lake/Load/Manifest.lean#L104-L110</a> with this then yes? I can assume the manifest.json always exists in lean_packages (if there are dependencies) after a <code>lake build</code> equivalent right?</p>",
        "id": 292658844,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660079678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> actually, the path of the manifest file is changing due to request <a href=\"https://github.com/leanprover/lake/issues/111\">lake#111</a>. The future-proof way to do this is just read <code>ws.root.manifestFile</code>.</p>",
        "id": 292659277,
        "sender_full_name": "Mac",
        "timestamp": 1660079868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> CI just passed on doc-gen and it worked fine on my local test project so I would assume you can use it again now!</p>\n<p>Thanks a lot for the help Mac!</p>",
        "id": 292663051,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660081604
    },
    {
        "content": "<p>Thank you! I will now give it a shot!</p>",
        "id": 292663398,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1660081771
    },
    {
        "content": "<p>In the latest Mathlib4 building docs with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kdoc</span><span class=\"bp\">=</span><span class=\"n\">on</span> <span class=\"n\">build</span> <span class=\"n\">Mathlib</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"c1\">--verbose</span>\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">Unicode</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">chris</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-08-18/lib:./lean_packages/doc-gen4/build/lib /home/chris/.elan/toolchains/leanprover--lean4---nightly-2022-08-18/bin/lean ./lean_packages/doc-gen4/././DocGen4/Output/DocString.lean -R ./lean_packages/doc-gen4/./. -o ./lean_packages/doc-gen4/build/lib/DocGen4/Output/DocString.olean -i ./lean_packages/doc-gen4/build/lib/DocGen4/Output/DocString.ilean -c ./lean_packages/doc-gen4/build/ir/DocGen4/Output/DocString.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/././</span><span class=\"n\">DocGen4</span><span class=\"bp\">/</span><span class=\"n\">Output</span><span class=\"bp\">/</span><span class=\"n\">DocString.lean</span><span class=\"o\">:</span><span class=\"mi\">131</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">map'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">DocGen4.Output.HtmlM.map'</span>\n  <span class=\"n\">modifyElement</span> <span class=\"n\">e</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HtmlM</span> <span class=\"n\">Element</span>\n</code></pre></div>\n<p>and I get the same thing if I edit <code>lean-toolchain</code> to match what doc-gen4 is using <code>leanprover/lean4:nightly-2022-08-18</code> but I guess I'm a bit surprised doc-gen4 is doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">lake</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/lake\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n</code></pre></div>\n<p>What if master doesn't match <code>leanprover/lean4:nightly-2022-08-18</code> ?  Why isn't doc-gen4 just using whatever version of lake is specified in it's lean-toolchain?</p>",
        "id": 294374677,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660950423
    },
    {
        "content": "<p>It is more nuanced than this doc-gen's <em>real</em> master is working <em>right now</em>. However lake is more clever than to just use the <code>master</code> branch if it is written in the lakefile, it will lock a certain version of the master branch that was at use at the time, doc-gen has already moved on by exactly one important functional and a few CI related commits and one would have to run <code>lake update</code> in mathlib before running it (the changed lockfile in lean_packages/manifest.json could also be a PR to mathlib) </p>\n<p>The reason that lake does only respect the <code>lean-toolchain</code> version from the top level project it is building is (I dont konw this for sure but this would be my first concern), the Lean compiler does not care about backwards compatability across nightlies, if you compile one lean file with todays nightly and another with yesterdays there is absolutely nothing guaranteeing you that they will work together so instead lake will always use one lean version, the one specified in the top level.</p>\n<p>The doc-gen CI does get around this issue with this beautiful line of <code>sed</code>: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/deploy_docs.sh#L26\">https://github.com/leanprover/doc-gen4/blob/main/deploy_docs.sh#L26</a></p>",
        "id": 294397420,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660975795
    },
    {
        "content": "<p>I don't really understand what was discussed in this thread, but wondering if this issue is related:</p>\n<p>My repo's doc generation succeeds locally but was failing on CI, so I now have the CI build the library before building the docs. Both steps succeed.</p>\n<p>I hard-coded the commits for the mathlib/docgen dependencies to ensure everything is on the same Lean version but it seems like a version mismatch bug to me.</p>\n<p>Before pre-compiling library: <a href=\"https://github.com/JamesGallicchio/LeanColls/runs/7946219736?check_suite_focus=true#step:5:69\">https://github.com/JamesGallicchio/LeanColls/runs/7946219736?check_suite_focus=true#step:5:69</a><br>\nNow: <a href=\"https://github.com/JamesGallicchio/LeanColls/runs/7946544943?check_suite_focus=true#step:6:358\">https://github.com/JamesGallicchio/LeanColls/runs/7946544943?check_suite_focus=true#step:6:358</a></p>",
        "id": 294620322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661153527
    },
    {
        "content": "<p>You should use/push the auto generated <code>lean_packages/manifest.json</code> instead of hard pinning dependencies to certain commits.  Looking at your lean-toolchain you are 9 days behind doc-gens current toolchain which can easily cause bugs already, in general you want to always be in sync with the toolchain I used to develop the doc-gen commit you are using, otherwise I can basically guarantee for nothing :P There is also no real point in debugging things at this point for me since it could be anything related to a nightly breaking something still really. </p>\n<p>Anyways I did it either way now xD. After updating your toolchain and pinning everything to <code>master</code>/<code>main</code> in the lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">18</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cat</span> <span class=\"n\">lakefile.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">System</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">leancolls</span> <span class=\"o\">{</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">LeanColls</span> <span class=\"o\">{</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">__dir__</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">LeanColls</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- dev is so not everyone has to build it</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>we now need to run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>to get manifest.json up to date properly. Then run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">build</span> <span class=\"n\">LeanColls</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n</code></pre></div>\n<p>and it will work.</p>\n<p>So yeah if you are observing a bug with doc-gen please always make sure that:</p>\n<ul>\n<li>you are at the latest master</li>\n<li>your toolchain is in sync</li>\n<li>your manifest.json reflects this by running the proper lake update command</li>\n<li>to commit your manifest.json so things are actually reproducible for anyone wanting to help you</li>\n</ul>",
        "id": 294625520,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1661155863
    },
    {
        "content": "<p>That makes sense, thanks! :) Updated and looks like it's working fine now</p>",
        "id": 294632753,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661158928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  that would make an excellent addition to your doc-gen4 readme perhaps...</p>",
        "id": 294799123,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661226971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/290883320\">said</a>:</p>\n<blockquote>\n<p>And FYI the fix was to actually add -fPIC to the cmark compilation call, C compiler error messages can actually be useful sometimes :D</p>\n</blockquote>\n<p>How can I do this? I'm hitting the same error on another repo</p>",
        "id": 299863086,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663716711
    },
    {
        "content": "<p>Take a look at the lakefile of CMark.lean I think it was? Its just adding a compiler option to the c compiler call there really</p>",
        "id": 299889388,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663740367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/299889388\">said</a>:</p>\n<blockquote>\n<p>Take a look at the lakefile of CMark.lean I think it was? Its just adding a compiler option to the c compiler call there really</p>\n</blockquote>\n<p>I tried to mimic it without success.  See <a href=\"https://github.com/leanprover/lake/issues/126\">https://github.com/leanprover/lake/issues/126</a> for more details</p>",
        "id": 299950001,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663765320
    },
    {
        "content": "<p>RE: <a href=\"https://github.com/leanprover/doc-gen4/pull/82\">https://github.com/leanprover/doc-gen4/pull/82</a> is there a reason why doc-gen4 still generates mathlib docs instead of them being generated by the mathlib repo CI? it seems like this is making it harder than necessary to keep doc-gen4 main branch up to date</p>",
        "id": 300684014,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664134023
    },
    {
        "content": "<p>Yes there is a reason, this would break mathlib's CI if doc-gen cannot keep up with their upgrade frequency of the lean compiler and this is not a burden mathlib should take but I should.</p>",
        "id": 300692584,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664141488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> So, poking around, it seems like Lake won't update a dependency if it's locked by a different dependency? And mathilb's <code>manifest.json</code> locks a bunch of packages that <code>doc-gen4</code> depends on, because mathlib's lakefile lists doc-gen4 as a dependency itself</p>",
        "id": 301085386,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664303352
    },
    {
        "content": "<p>but even manually updating <code>lean_packages/mathlib/lean_packages/manifest.json</code> doesn't seem like enough to get doc generation running, since this lake PR hasn't been merged yet: <a href=\"https://github.com/leanprover/lake/pull/127/files\">https://github.com/leanprover/lake/pull/127/files</a></p>",
        "id": 301091946,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664303518
    },
    {
        "content": "<p>Yes that is indeed an issue but I can also not just run <code>lake update</code> in the CI because this might update the <code>std4</code> dependency as well and if mathlib4 doesnt like the master of std4 stuff blows up.</p>",
        "id": 301092133,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664303564
    },
    {
        "content": "<p>Oh yeah this isn't doc-gen4 CI issue. I think lake's handling of transitive dependencies could be improved. And mathlib should be keeping an up to date manifest (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is the manifest being updated without <code>-Kdocs=on</code> set?)</p>",
        "id": 301092803,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664303782
    },
    {
        "content": "<p>I'm not sure why mathlib4 has all those dependencies. As far as I know it doesn't use them at all, but I think lake added them automatically?</p>",
        "id": 301093868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304105
    },
    {
        "content": "<p><code>std4</code> should have zero dependencies (other than lake), and <code>mathlib4</code> should only depend on <code>std4</code></p>",
        "id": 301094014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304139
    },
    {
        "content": "<p>But I was afraid to make changes without some confirmation from someone who understands lake better</p>",
        "id": 301094105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304171
    },
    {
        "content": "<p>Lake added them automatically because doc-gen uses them and lake locks all transitive dependencies.</p>\n<p>My point is, I can run <code>lake -Kdocs=on update</code> to update the manifest so it reflects the changes that doc-gen made to its own dependencies <em>but</em> that might in the process also change the commit hash of std4 and if that is incompatible with mathlib4 stuff will blow up during the build anyways so I'm not really sure how to proceed here.</p>",
        "id": 301094281,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664304228
    },
    {
        "content": "<p>mathlib4 should be using an up to date std4</p>",
        "id": 301094680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304352
    },
    {
        "content": "<p>I will do <code>lake -Kdocs=on update</code> for the <code>bump-09-26</code> branch</p>",
        "id": 301094864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304414
    },
    {
        "content": "<p>it didn't do anything, is that expected?</p>",
        "id": 301094942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304448
    },
    {
        "content": "<p>that is, it used version <a href=\"https://github.com/leanprover/doc-gen4/commit/a2345380e861332fabecc61591cb274e61163a97\">https://github.com/leanprover/doc-gen4/commit/a2345380e861332fabecc61591cb274e61163a97</a></p>",
        "id": 301095097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304500
    },
    {
        "content": "<p>Sure since doc-gen's master didn't change yet that is expected^^ Right now the CI of doc-gen is broken because of the issue updated above so I didn't merge the PR that would fix it yet...if you are saying that I have a guarantee that mathlib4 always uses an up to date std4 I'll add the lake update to the CI and we'll see how that goes,</p>",
        "id": 301095218,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664304549
    },
    {
        "content": "<p>oh oops it's <code>-Kdoc=on</code> for mathlib</p>",
        "id": 301095331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304587
    },
    {
        "content": "<p>we should try to standardize those config flags</p>",
        "id": 301095364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304598
    },
    {
        "content": "<p>I wouldn't say that it's always exactly up to date, but changes are usually propagated within a day</p>",
        "id": 301095542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304655
    },
    {
        "content": "<p>pinning your versions is probably the right thing to do unless it's for a speculative build</p>",
        "id": 301095689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304709
    },
    {
        "content": "<p>It is for a speculative build, the doc-gen CI attempts to slip the new doc-gen into mathlib and build it in order to deploy docs4#, I added the update to the CI now let's see if it passes this time...</p>",
        "id": 301095852,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664304757
    },
    {
        "content": "<p>I think what we need is a way to tell lake update to only update specified packages to the latest version and update other packages only to the versions required</p>",
        "id": 301095955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304795
    },
    {
        "content": "<p>Yes that would be awesome.</p>",
        "id": 301096013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664304822
    },
    {
        "content": "<p>in fact, I think that should be the default behavior, since lake knows which packages are requested by the user and which are transitive dependencies</p>",
        "id": 301096014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304822
    },
    {
        "content": "<p>Maybe worth discussing in <a href=\"#narrow/stream/270676-lean4/topic/.22Perfect.20world.22.20dependency.20management\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.22Perfect.20world.22.20dependency.20management</a> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 301096114,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664304848
    },
    {
        "content": "<p>(Although that still feels a bit like a hacky heuristic, perhaps that's not so perfect-world...)</p>",
        "id": 301096199,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664304878
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/doc-gen4/actions/runs/3138157000/jobs/5097168181\">https://github.com/leanprover/doc-gen4/actions/runs/3138157000/jobs/5097168181</a> stil blowing up  /o\\</p>",
        "id": 301096210,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664304884
    },
    {
        "content": "<p>note: <code>bump-07-26</code>  hasn't merged yet</p>",
        "id": 301096271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664304907
    },
    {
        "content": "<p>It's so hard to parse what this log is saying when mathlib depends on doc-gen4 and doc-gen4 depends on mathlib <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 301096620,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> is it possible to split the CI job out from doc-gen4? and maybe have the mathlib4_docs repo run the CI job nightly?</p>",
        "id": 301096740,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305068
    },
    {
        "content": "<p>How exactly does <code>doc-gen4</code> interact with other projects? Why does it need to be a dependency of mathlib?</p>",
        "id": 301096948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305121
    },
    {
        "content": "<p>Is there some stub that std4 can ship that marks things up such that doc-gen4 has what it needs without having to be a dependency?</p>",
        "id": 301097085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305168
    },
    {
        "content": "<p>I think the idea is that doc-gen4 is a \"dependency\" of your project so that you can have docs as a build target. So, mathlib can generate its documentation by <code>lake -Kdoc=on build mathlib:docs</code></p>",
        "id": 301097125,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305185
    },
    {
        "content": "<p>That sounds like it should be a lake feature</p>",
        "id": 301097249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305214
    },
    {
        "content": "<p>Probably, yeah</p>",
        "id": 301097393,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305267
    },
    {
        "content": "<p>Okay one after the other</p>\n<p>\"and maybe have the mathlib4_docs repo run the CI job nightly?\" I am already doing this already becuase: If mathlib4 pushes an update it does not have a job to push mathlib4_docs because: mathlib4 should not depend on doc-gen4 working all the time</p>\n<p>\"is it possible to split the CI job out from doc-gen4?\" Yes, but for me building the docs of mathlib4 is sort of an integration test since its the only large scale Lean 4 project out there right now</p>\n<p>Mario: It is a dependency because doc-gen4 provides something Mac calls a \"facet\" where I as a dependency can basically provide additional build targets (namely the docs one) to my dependent in order to allow you to build the docs directly yourself from lake without having to:</p>\n<ol>\n<li>clone, build and run doc-gen yourself</li>\n<li>ship doc-gen via elan which would actually require it to work on each nightly of course (and that's effort I cannot do)</li>\n</ol>",
        "id": 301097465,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305302
    },
    {
        "content": "<p>Thinking about how rust does it, it feels like we actually want doc-gen to be part of the core distribution - anyone should be able to get documentation for their project</p>",
        "id": 301097890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305465
    },
    {
        "content": "<p>Now to explain what is confusing me:</p>\n<p>doc-gen does right now compile for me locally with the same nightly as master mathlib4<br>\nmathlib4 obviously also compiles<br>\nbut: If i declare doc-gen as a dependency of mathlib, run lake update and lake build again stuff blows up hard, why is this happening?</p>",
        "id": 301097952,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305490
    },
    {
        "content": "<p>adding it to the bootstrap is not very attractive, but at least we should be able to get it working with high availability somehow</p>",
        "id": 301097970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305496
    },
    {
        "content": "<p>I put the <code>bump-07-26</code> on the queue, so maybe try your test again once it lands</p>",
        "id": 301098111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301097890\">said</a>:</p>\n<blockquote>\n<p>Thinking about how rust does it, it feels like we actually want doc-gen to be part of the core distribution - anyone should be able to get documentation for their project</p>\n</blockquote>\n<p>We can do this, but I cannot make doc-gen4 work every day on my own, somedays its like...Lean broke some syntax so i have to land PRs in the doc-gen dependencies (I got commit permission in some by now which makes this easier), then Mac had some funky idea for Lake again and threw his whole API overboard and I have to rework the Lake integration and then there are of course sometimes just Lean API changes that are there and blow doc-gen up.</p>",
        "id": 301098234,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305587
    },
    {
        "content": "<p>that is one reason to add it to the bootstrap...</p>",
        "id": 301098340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305622
    },
    {
        "content": "<p>Yeah, I don't think the core team has the time to maintain it either right now <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 301098343,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305623
    },
    {
        "content": "<p>I mean if anyone wants to put put up with it in this state we can go ahead and put it into the core distribution but sometimes it takes me like a whole afternoon to break the stuff that's broken again and I don't see where we are pulling the manpower from to make this happen</p>",
        "id": 301098521,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305686
    },
    {
        "content": "<p>I've been trying to update std4, mathlib4 and mathport in \"waves\" where they all use the same nightly to make dependencies easier</p>",
        "id": 301098567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305707
    },
    {
        "content": "<p>maybe doc-gen4 also needs to be part of that</p>",
        "id": 301098590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305717
    },
    {
        "content": "<p>... FWIW, lean4-cli also appears to be broken since 09-25 due to \"LCNF local context contains unused local variable declaration\" errors.</p>",
        "id": 301098687,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1664305752
    },
    {
        "content": "<p>Oh, that's a good one to report</p>",
        "id": 301098733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305772
    },
    {
        "content": "<p>doc-gen4 usually tries to aim at whatever nightly I'm seeing on mathlib4 (because of course: doing meta analysis on the .elan files of mathlib4 is due to API/ABI breaking changes only possible on the same nightly) its just that sometimes I take a while to find time for that</p>",
        "id": 301098792,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301098687\">said</a>:</p>\n<blockquote>\n<p>... FWIW, lean4-cli also appears to be broken since 09-25 due to \"LCNF local context contains unused local variable declaration\" errors.</p>\n</blockquote>\n<p>If you could minimize that and report it to leanprover/lean4 that would be lovely!</p>",
        "id": 301098846,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664305809
    },
    {
        "content": "<p>09-25 broke the world as a way to get feedback on the new code generator</p>",
        "id": 301098856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305812
    },
    {
        "content": "<p>I didn't notice because it's in the example and test files, which don't get built <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 301098874,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1664305818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301098567\">said</a>:</p>\n<blockquote>\n<p>I've been trying to update std4, mathlib4 and mathport in \"waves\" where they all use the same nightly to make dependencies easier</p>\n</blockquote>\n<p>I think this is actually the only setup in which Lake works correctly <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> handling other situations correctly requires much more sophisticated dependency management a la Rust <code>cargo</code>... A project I'd be happy to work on after grad applications are in <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 301099104,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301098856\">said</a>:</p>\n<blockquote>\n<p>09-25 broke the world as a way to get feedback on the new code generator</p>\n</blockquote>\n<p>ooh, that landed? awesome, I was wondering why my <code>inline</code>'d code broke :)</p>",
        "id": 301099226,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664305957
    },
    {
        "content": "<p>No the new code generator isn't active yet as in actively producing the binary, stage 1 of 3 are active and trying to do their job in addition to the current code generator. If you get any issue from updating to this that mentions stuff like \"LCNF\" do report it here we did it exactly because of this</p>",
        "id": 301099339,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664306015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301098234\">said</a>:</p>\n<blockquote>\n<p>then Mac had some funky idea for Lake again and threw his whole API overboard and I have to rework the Lake integration</p>\n</blockquote>\n<p>Sorry, that I do have  a tendency to do that. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 301325150,
        "sender_full_name": "Mac",
        "timestamp": 1664398771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301099104\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301098567\">said</a>:</p>\n<blockquote>\n<p>I've been trying to update std4, mathlib4 and mathport in \"waves\" where they all use the same nightly to make dependencies easier</p>\n</blockquote>\n<p>I think this is actually the only setup in which Lake works correctly <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> handling other situations correctly requires much more sophisticated dependency management a la Rust <code>cargo</code></p>\n</blockquote>\n<p>While true, it should be noted that (outside of bugs) the problem here is not exactly the algorithm. Programmatically, Lake could be adapted rather easily to use a more common dependency algorithm. The main problem is that most of these algorithms are not compatible with Lean. </p>\n<p>For instance, we can't use an NPM or cargo style algorithm because the dependency tree cannot have multiple versions of the same package. Furthermore, due to metaprogramming and the Lean core's frequent changes most updates are not generally backwards compatible meaning there is not as much leeway as there is in other languages for disparate versioning or proper semantic versioning..</p>",
        "id": 301328697,
        "sender_full_name": "Mac",
        "timestamp": 1664399269
    },
    {
        "content": "<p>(Given infinite time,) I would really like to go over lake and find ways to simplify both the API and the internal implementation, but the main blocker is that I don't know how much of lake is considered \"public external API\" / features people are relying on vs things that are only there to hold the rest of it up.</p>",
        "id": 301328719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399281
    },
    {
        "content": "<p>So stuff like documentation about what is public and what is not, and what the public functions are intended to do, is very valuable information</p>",
        "id": 301328827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301328719\">said</a>:</p>\n<blockquote>\n<p>I don't know how much of lake is considered \"public external API\" / features people are relying on vs things that are only there to hold the rest of it up.</p>\n</blockquote>\n<p>This is a problem I actually had as well. That is, in the past, when I broke some things that I though were just \"there to hold the rest of it up\", I found that some users were already relying on them (e.g., mathport early on).</p>",
        "id": 301329025,
        "sender_full_name": "Mac",
        "timestamp": 1664399426
    },
    {
        "content": "<p>Also information about how much use the more elaborate stuff gets in practice</p>",
        "id": 301329036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301329036\">said</a>:</p>\n<blockquote>\n<p>Also information about how much use the more elaborate stuff gets in practice</p>\n</blockquote>\n<p>I would love this data! If we could figure out how to collect it, that would be great!</p>",
        "id": 301329137,
        "sender_full_name": "Mac",
        "timestamp": 1664399478
    },
    {
        "content": "<p>Until v4, I considered the API to be entirely unstable (i.e., only the DSL helpers were the public features). After v4, I consider the build API pretty stable. The one exception being a fix to avoid the <code>Fact</code> in examples like <a href=\"https://github.com/leanprover/lake/issues/114\">lake#114</a> that I hope to include in the next maintenance (which I hope to do soon -- ideally this weekend).</p>",
        "id": 301329611,
        "sender_full_name": "Mac",
        "timestamp": 1664399716
    },
    {
        "content": "<p>There are currently 103 projects listed in <a href=\"https://github.com/topics/lean4\">https://github.com/topics/lean4</a>, we could just pull all the lakefiles</p>",
        "id": 301329618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399718
    },
    {
        "content": "<p>what is the \"Build API\", formally? Is there a specific list of functions you can enumerate?</p>",
        "id": 301329765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399775
    },
    {
        "content": "<p>Is the definition of the monad itself considered part of that public API?</p>",
        "id": 301329809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399803
    },
    {
        "content": "<p>the files in <code>Lake.Build</code> and its imports</p>",
        "id": 301329813,
        "sender_full_name": "Mac",
        "timestamp": 1664399805
    },
    {
        "content": "<p>see that's not a great list, unless you are being very careful about putting <code>private</code> on things</p>",
        "id": 301329888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399849
    },
    {
        "content": "<p>you can't just say \"all dependencies of X\"</p>",
        "id": 301329908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399861
    },
    {
        "content": "<p>that's going to have tons of crap in it</p>",
        "id": 301329921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399870
    },
    {
        "content": "<p>I would not say there is much in Lake that is non-public, most of it is useful in performing some action of some kind that a user might also want to replicate.</p>",
        "id": 301330054,
        "sender_full_name": "Mac",
        "timestamp": 1664399919
    },
    {
        "content": "<p>I would hope it's more like \"the functions <em>in</em> <code>Lake.Build</code> and only that\"</p>",
        "id": 301330058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399922
    },
    {
        "content": "<p>It's okay to have things public and unstable, that just means that users who use the feature have to be prepared for it to change</p>",
        "id": 301330109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399956
    },
    {
        "content": "<p>but messaging around that is very important</p>",
        "id": 301330135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664399974
    },
    {
        "content": "<p>that allows you to draw a line between users who use the stable stuff and can enjoy a relatively pain-free upgrade process, and those who integrate tightly with the lake implementation and are hopefully either pinned or coordinate with lake itself</p>",
        "id": 301330336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400069
    },
    {
        "content": "<p>Yeah, I agree. For me, right now, the unstable parts are: The issue I mentioned around <code>Fact</code> and the package argument to targets/facets, the implementation of logging (but the log methods themselves are stable), the dependency resolution code, and the CLI code.</p>",
        "id": 301330351,
        "sender_full_name": "Mac",
        "timestamp": 1664400078
    },
    {
        "content": "<p>is the CLI itself stable?</p>",
        "id": 301330435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400117
    },
    {
        "content": "<p>All CLI commands mentioned in the <code>lake help</code> are considered stable (i.e., breaking them is a major breaking change).</p>",
        "id": 301330599,
        "sender_full_name": "Mac",
        "timestamp": 1664400185
    },
    {
        "content": "<p>So not things like <code>print-paths</code> as that is tied to whatever is going on in the Lean core (or the undocumented <code>check-self</code> and <code>resolve-deps</code>).</p>",
        "id": 301330673,
        "sender_full_name": "Mac",
        "timestamp": 1664400230
    },
    {
        "content": "<p>Looking at the stuff in <code>Lake.Build.Monad</code>, I don't see a single function people would want to call. <code>Lake.Build.Context</code> has a ton of monads and I really hope users don't have to interact with this. Maybe I'm just lacking imagination, what kind of project would actually use this stuff?</p>",
        "id": 301331030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400409
    },
    {
        "content": "<p><code>Lake.Build.Actions</code>, okay it's a little low level but I can imagine users calling these functions. It would be better to have a simpler API here though</p>",
        "id": 301331228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400509
    },
    {
        "content": "<p>Most of the monads end up being used a some point in a build code, so they are definitely relevant to end users to some degree (at least in what actions they support). Also, to clarify, as I allude to when mentioning logging, the definitions of the monad themselves are unstable (even if the monad itself is).</p>",
        "id": 301331449,
        "sender_full_name": "Mac",
        "timestamp": 1664400597
    },
    {
        "content": "<p><code>Lake.Build.Index</code>, those functions have some intimidating type signatures but I suspect they are actually user-facing.</p>",
        "id": 301331458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400600
    },
    {
        "content": "<p>I'm guessing these functions are where the monad soup comes from</p>",
        "id": 301331560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400632
    },
    {
        "content": "<p>But seriously I would like to see some non-toy code that uses these</p>",
        "id": 301331636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400672
    },
    {
        "content": "<p>It seems like none of the lake tests call any of these functions</p>",
        "id": 301332051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664400853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301331030\">said</a>:</p>\n<blockquote>\n<p>Looking at the stuff in <code>Lake.Build.Monad</code>, I don't see a single function people would want to call. </p>\n</blockquote>\n<p>Essentially all of these functions are needed to run a build from scratch, which a user may wish to do in a Lake script. For example, in the test script <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/291440330\">discussed</a> in another thread.</p>",
        "id": 301332533,
        "sender_full_name": "Mac",
        "timestamp": 1664401079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/301332051\">said</a>:</p>\n<blockquote>\n<p>It seems like none of the lake tests call any of these functions</p>\n</blockquote>\n<p>Yeah, I very lacking in non-trivial test coverage. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  Prior to v4, all of this code was considered internal (hence no tests). Now that the API is key part of v4,, I should add some tests (I just have not got around to doing so). There are some challenges as well: I am still what many of the uses cases of build API would look like, and many of the existing examples (e.g., doc-gen4, alloy, FFI code) have complex dependencies and are thus hard to reduce to tests.</p>",
        "id": 301333540,
        "sender_full_name": "Mac",
        "timestamp": 1664401556
    },
    {
        "content": "<p>One thing that might be nice is to have in the future is some new attributes that record the API characteristics of definitions (e.g., marking the names/types/bodies as stable/unstable).</p>",
        "id": 301334683,
        "sender_full_name": "Mac",
        "timestamp": 1664402025
    },
    {
        "content": "<p>it's easy enough to define an unofficial attribute to that effect and use it on your own API</p>",
        "id": 301335115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664402197
    },
    {
        "content": "<p>Definitely.</p>",
        "id": 301335312,
        "sender_full_name": "Mac",
        "timestamp": 1664402300
    },
    {
        "content": "<p>If you do, put it in a separate repo so I can use the same :) maybe at some point we can have linting that,</p>\n<ul>\n<li>for libraries, ensures \"stable\" identifiers' types only change when the package semver has a major change</li>\n<li>for users, warns usages of unstable types (and maybe unfolding any other package's definition, since terms are super brittle)</li>\n</ul>\n<p>I'm not sure how this would interact particularly with stuff like <code>simp</code> lemmas, but I think with enough careful engineering this could be workable</p>",
        "id": 301338912,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664404000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you remove doc-gen4 from the mathlib lakefile entirely? since the CI isn't building docs anyways, I don't think it should break anything, and it's locking doc-gen4 dependencies (e.g. xubaiw unicode) to month-old revisions, since the doc-gen4 revision is the old one.</p>",
        "id": 302398864,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664953991
    },
    {
        "content": "<p>(after it's removed, I <em>think</em> doc-gen4 CI should be building again)</p>",
        "id": 302398902,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664954023
    },
    {
        "content": "<p>shouldn't the fix be to upgrade it then?</p>",
        "id": 302398919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664954033
    },
    {
        "content": "<p>The upgraded doc-gen4 revision isn't on doc-gen4 main. So I guess you could also switch the lakefile to depend on the <a href=\"https://github.com/leanprover/doc-gen4/tree/upgrade-lean\">upgrade-lean</a> branch of doc-gen4. But if mathlib isn't using doc-gen4 right now it seems overly complicating things for it to still pin dependency versions.</p>",
        "id": 302399184,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664954169
    },
    {
        "content": "<p>Can't this be done on a branch?</p>",
        "id": 302400295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664954702
    },
    {
        "content": "<p>and/or using the config parameter which exists exactly for the purpose</p>",
        "id": 302400364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664954736
    },
    {
        "content": "<p>(which config parameter?)</p>",
        "id": 302400718,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664954901
    },
    {
        "content": "<p>the mathlib lakefile has this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">doc</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"on\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- do not download and build doc-gen4 by default</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>",
        "id": 302400799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664954950
    },
    {
        "content": "<p>AFAICT that's the correct invocation so I'd rather not change it unless the official recommendation changes</p>",
        "id": 302400846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664954974
    },
    {
        "content": "<p>but if you need a mathlib commit that changes it you should be able to do so on a branch</p>",
        "id": 302400980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664955041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/302400799\">said</a>:</p>\n<blockquote>\n<p>the mathlib lakefile has this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">doc</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"on\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- do not download and build doc-gen4 by default</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah, yeah, but the manifest still lists the revisions (and lake doesn't distinguish between manifest entries that are/aren't used when doing dependency resolution)</p>\n<p>I can make a branch and see if I can figure out how to get this unstuck -- could I get push perms on mathlib?</p>",
        "id": 302402679,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664955781
    },
    {
        "content": "<p>Okay I think I'm starting to see an issue here. If I modify the lakefile of mathlib4 like so in my CI:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"doc-gen4\"</span> <span class=\"k\">with</span> <span class=\"n\">NameMap.empty</span>\n</code></pre></div>\n<p>and run <code>lake update</code> with the doc flag on I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">main</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">b07faa65fe58882da6322aa9bfe480509fee8c76</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>Which is indeed master but I am expecting lake here to just use the revision in the doc-gen4 directory which is most definitely not master but the update-lean branch.</p>",
        "id": 302408202,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664957883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> is this behaviour inteded? If it is, how can I force lake to actually use the revision in that directory?</p>",
        "id": 302408241,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664957905
    },
    {
        "content": "<p>I wonder if it'd work for the CI to replace <code>\"main\"</code> in the mathlib lake file with the doc-gen4 commit's git hash</p>",
        "id": 302408995,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958207
    },
    {
        "content": "<p>Most likely yes but then the CI will not be able to review PRs anymore correctly (assumming of course that anyone will ever write significant PRs /o\\)</p>",
        "id": 302409274,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664958304
    },
    {
        "content": "<p>Doesn't the CI have access to the git commit that it is being run on? i.e. on a PR we could inject the PR's git hash</p>",
        "id": 302409529,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958385
    },
    {
        "content": "<p>It <em>would</em> bar you from testing locally which is unfortunate</p>",
        "id": 302409849,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958525
    },
    {
        "content": "<p>Declaring a git dependency in lake requires a URL though...I guess we could try to tickle that one out of <code>git remote get-url</code> as well though...</p>",
        "id": 302409896,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664958550
    },
    {
        "content": "<p>lemme see what the github actions CLI exposes</p>",
        "id": 302409955,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958588
    },
    {
        "content": "<p>The URL can be passed into the script as <code>$GITHUB_SERVER_URL/$GITHUB_REPOSITORY</code>, and the commit hash as <code>$GITHUB_SHA</code></p>",
        "id": 302410397,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958769
    },
    {
        "content": "<p>which might be cleaner than pulling from git log/remote. unsure</p>",
        "id": 302410608,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664958850
    },
    {
        "content": "<p>Hah, of course sed wont like if i just <code>sed -i \"s/\\\"https:\\/\\/github.com\\/leanprover\\/doc-gen4\\\" @ \\\"main\\\"/\\\"$docgen_url\\\" @ \\\"$GITHUB_SHA\\\"/\" lakefile.lean</code> because <code>$docgen_url</code> contains slashes...how do you automatically escape slashes in a variable in a shell script? :D</p>",
        "id": 302411623,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664959228
    },
    {
        "content": "<p>Hah, one could of course also use another delimiter, what a wonderful tool sed is...</p>",
        "id": 302411807,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664959306
    },
    {
        "content": "<p>This is beyond my knowledge. Time to consult the stackoverflow texts.</p>",
        "id": 302412136,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664959415
    },
    {
        "content": "<p>The solution is of course the other delimiter as mentioned above: <code>sed -i \"s|\\\"https://github.com/leanprover/doc-gen4\\\" @ \\\"main\\\"|\\\"$docgen_url\\\" @ \\\"$GITHUB_SHA\\\"|\" lakefile.lean</code></p>",
        "id": 302412252,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664959444
    },
    {
        "content": "<p>You like living dangerously: really the pipe symbol <code>|</code>?  I normally shift to <code>=</code>!</p>",
        "id": 302412489,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664959545
    },
    {
        "content": "<p>My oh my. I'm excited for the day when we can write CLI scripts in Lean instead.</p>",
        "id": 302412667,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664959598
    },
    {
        "content": "<p>Gaaaahh, GITHUB_SHA is not the current commit in a pull request ffs... <a href=\"https://github.com/orgs/community/discussions/26325\">https://github.com/orgs/community/discussions/26325</a></p>",
        "id": 302413179,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664959797
    },
    {
        "content": "<p>corentingiraud coming in clutch <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> this is impressively hard</p>",
        "id": 302413669,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664960024
    },
    {
        "content": "<p>He is lying though (well probably not on purpose) that variable is empty as well for whatever reason.</p>",
        "id": 302416203,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664960997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/302409896\">said</a>:</p>\n<blockquote>\n<p>Declaring a git dependency in lake requires a URL though...</p>\n</blockquote>\n<p>It doesn't have to be a full URL, you can just use a filepath. See, for instance, Lake's own <a href=\"https://github.com/leanprover/lake/blob/2cc00e4e08473939842d823fd753dcac891ab709/examples/git/lakefile.lean\">git example</a>.</p>",
        "id": 302418963,
        "sender_full_name": "Mac",
        "timestamp": 1664962125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken/near/302411623\">said</a>:</p>\n<blockquote>\n<p>Hah, of course sed wont like if i just <code>sed -i \"s/\\\"https:\\/\\/github.com\\/leanprover\\/doc-gen4\\\" @ \\\"main\\\"/\\\"$docgen_url\\\" @ \\\"$GITHUB_SHA\\\"/\" lakefile.lean</code></p>\n</blockquote>\n<p>You could also just pass these vairables to Lean/Lake as configuration options via <code>-K</code> and use <code>get_config</code> to access them. The elements of the syntax support arbitrary terms.</p>",
        "id": 302419302,
        "sender_full_name": "Mac",
        "timestamp": 1664962235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I have another question regarding the update mechanism, so I have convinced lake in mathlib to use the proper doc-gen version now, then I run this in the mathlib repo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kdoc</span><span class=\"bp\">=</span><span class=\"n\">on</span> <span class=\"n\">update</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">Cli</span><span class=\"bp\">`</span>\n<span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">nightly</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">80</span><span class=\"n\">b783a8905a4e8a29ced841abb64f710bc86f06</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">112</span><span class=\"n\">b35fc348a4a18d2111ac2c6586163330b4941</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">leanInk</span><span class=\"bp\">`</span>\n<span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">439303</span><span class=\"n\">af06465824588a486f5f9c023ca69979f3</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">439303</span><span class=\"n\">af06465824588a486f5f9c023ca69979f3</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">upgrade</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">2</span><span class=\"n\">fc57e0eecd031201f9315823daa1cf9cec8e2f3</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">Unicode</span><span class=\"bp\">`</span>\n<span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">main</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">3</span><span class=\"n\">a74ad4a69a3720ad8bd5f50a3233fe393f3f38e</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">25</span><span class=\"n\">b32ef69fd6d8ae34300d51dc0b9403ffb1fd29</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">ecd37441047e490ff2ad339e16f45bb8b58591bd</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">main</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">8</span><span class=\"n\">dc73e59a2e682260bd4b92c0ddee14d36fc6518</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">lake</span><span class=\"bp\">`</span>\n<span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">2</span><span class=\"n\">cc00e4e08473939842d823fd753dcac891ab709</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">6</span><span class=\"n\">cfb4e3fd7ff700ace8c2cfdb85056d59f321920</span><span class=\"bp\">`</span>\n<span class=\"n\">Found</span> <span class=\"n\">dependency</span> <span class=\"bp\">`</span><span class=\"n\">CMark</span><span class=\"bp\">`</span>\n<span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">main</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">8</span><span class=\"n\">c0f9c1b16ee8047813f43b1f92de471782114ff</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">8</span><span class=\"n\">c0f9c1b16ee8047813f43b1f92de471782114ff</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>Why is it just straight up ignoring the versions that doc-gen has locked? For Cli its even using a different branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»`</span> <span class=\"n\">locked</span> <span class=\"bp\">`</span><span class=\"n\">nightly</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">80</span><span class=\"n\">b783a8905a4e8a29ced841abb64f710bc86f06</span><span class=\"bp\">`</span>\n<span class=\"n\">Using</span> <span class=\"bp\">`</span><span class=\"n\">master</span><span class=\"bp\">`</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"mi\">112</span><span class=\"n\">b35fc348a4a18d2111ac2c6586163330b4941</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>why?</p>",
        "id": 302422037,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664963392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  <a href=\"https://github.com/leanprover/lake/issues/119#issuecomment-1249383122\">lake#85 (comment)</a> -- fixing this is part of the updates I am currently work on for v4.1.0.</p>",
        "id": 302422283,
        "sender_full_name": "Mac",
        "timestamp": 1664963484
    },
    {
        "content": "<p>Mhm mhm...well I guess in the mean time I can just delete the manifest.json in hte CI and regenerate it since mario promised std4 wont break <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 302422508,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664963572
    },
    {
        "content": "<p>Hurray: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.RBTree#doc\">docs4#Std.RBTree</a></p>",
        "id": 302434439,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664968544
    }
]