[
    {
        "content": "<p>For builtin notations defined with <code>leading_parser</code> like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromTerm</span>   <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\" from \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n</code></pre></div>\n<p>I find that I can write quotations targeting this syntax class using <code> `(Parser.Term.fromTerm| from $stx)</code>, which is very convenient. But this does not seem to extend to definitions created with the more high level command <code>syntax</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binderIdent</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"_\"</span>\n</code></pre></div>\n<p>Here <code>binderIdent</code> itself has the type <code>Lean.ParserDescr</code>, unlike <code>fromTerm</code> which is a <code>LeadingParser</code>. As a result <code> `(binderIdent| _)</code> doesn't work. I'm also not sure if this command generates a parenthesizer / formatter; it is not in the obvious place if so.</p>",
        "id": 246910790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626991104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20syntax.20with.20quotations/near/246910790\">said</a>:</p>\n<blockquote>\n<p>I'm also not sure if this command generates a parenthesizer / formatter; it is not in the obvious place if so.</p>\n</blockquote>\n<p>It does. See <a href=\"https://github.com/leanprover/lean4/blob/1eee82f745a098773acef51a00bdafac0851146c/src/Lean/Parser.lean#L68\">here</a> for how it generates a <code>Parenthesizer</code> and <a href=\"https://github.com/leanprover/lean4/blob/1eee82f745a098773acef51a00bdafac0851146c/src/Lean/Parser.lean#L99\">here</a> for how it generates a <code>Formatter</code>.</p>",
        "id": 246931301,
        "sender_full_name": "Mac",
        "timestamp": 1627010865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20syntax.20with.20quotations/near/246910790\">said</a>:</p>\n<blockquote>\n<p>Here <code>binderIdent</code> itself has the type <code>Lean.ParserDescr</code>, unlike <code>fromTerm</code> which is a <code>LeadingParser</code>. As a result <code> `(binderIdent| _)</code> doesn't work.</p>\n</blockquote>\n<p>I suspect this is merely an oversight. The problem is simply that <a href=\"https://github.com/leanprover/lean4/blob/1eee82f745a098773acef51a00bdafac0851146c/src/Lean/Parser/Basic.lean#L1819\"><code>evalParserConstUnsafe</code></a> has no case for <code>ParserDescr</code>.</p>",
        "id": 246931740,
        "sender_full_name": "Mac",
        "timestamp": 1627011400
    },
    {
        "content": "<p>Though it is worth noting that adding such a case would require it needing to call something like <a href=\"https://github.com/leanprover/lean4/blob/1eee82f745a098773acef51a00bdafac0851146c/src/Lean/Parser/Extension.lean#L268\"><code>compileParserDescr</code></a>, which would likely  require moving the definition of <code>evalParserConstUnsafe</code> (and, more importantly, <code>parserOfStack</code>) out of <code>Lean.Parser.Basic</code> so that it can import it.</p>",
        "id": 246932069,
        "sender_full_name": "Mac",
        "timestamp": 1627011848
    }
]