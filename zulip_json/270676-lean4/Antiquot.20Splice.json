[
    {
        "content": "<p><em>I'm not sure if this title makes sense.</em><br>\nI'm trying to write a command that transforms something of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">my_cmd</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"kt\">Prop</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IgnoreMe</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>My problem is that I don't know how to do the splicing in the antiquotation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">interface_var</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">interface_var</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">vars</span><span class=\"o\">:</span><span class=\"n\">interface_var</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IgnoreMe</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">???</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a way to use <code>$[ ]*</code> for this?</p>",
        "id": 297723348,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662622731
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">interface_var</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">interface_var</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">vars</span><span class=\"o\">:</span><span class=\"n\">interface_var</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">vars.getElems.map</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">interface_var</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">args.unzip</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IgnoreMe</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 297725792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662623917
    },
    {
        "content": "<p>I've run straight into the next thing I can't figure out <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nLet's say I was trying to build a command <code>my_multi</code> which gets a sequence of lists and then runs <code>my_cmd</code> on each one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">interface_var</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">interface_var</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">interface_scheme</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">interface_var</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">interface_scheme</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getInterfaceVarComponents</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">interface_var</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">×</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">interface_var</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupported</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getInterfaceSchemeVars</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">interface_scheme</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"bp\">$</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">interface_var</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">interface_scheme</span><span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">vars</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">vars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupported</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">scheme</span><span class=\"o\">:</span><span class=\"n\">interface_scheme</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">vars</span> <span class=\"bp\">←</span> <span class=\"n\">getInterfaceSchemeVars</span> <span class=\"n\">scheme</span>\n  <span class=\"k\">let</span> <span class=\"n\">components</span> <span class=\"bp\">←</span> <span class=\"n\">vars.mapM</span> <span class=\"n\">getInterfaceVarComponents</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">ids</span><span class=\"o\">,</span> <span class=\"n\">types</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">components.unzip</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IgnoreMe</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">types</span><span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_multi\"</span> <span class=\"n\">schemes</span><span class=\"o\">:</span><span class=\"n\">interface_scheme</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">my_cmd</span> <span class=\"bp\">$</span><span class=\"n\">schemes</span><span class=\"o\">:</span><span class=\"n\">interface_scheme</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"c1\">-- Error</span>\n</code></pre></div>\n<p>Then the last line here gives me multiple errors, e.g. <code>elaboration function for 'commandMy_cmd_' has not been implemented</code>.<br>\nIs this Lean telling mean that <code>my_cmd</code> is not implemented?</p>",
        "id": 297758646,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662637858
    },
    {
        "content": "<p>That's an ugly (and old) part of the syntax system.</p>",
        "id": 297760730,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662638742
    },
    {
        "content": "<p><code> `(foo) </code> is sadly heavily overloaded.  It can either produce:</p>\n<ul>\n<li>A term quotation (i.e., of category <code>term</code>)</li>\n<li>A command quotation (i.e., of category <code>command</code>), or</li>\n<li>A command list quotation (i.e., mkNullNode of commands)</li>\n</ul>",
        "id": 297760895,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662638804
    },
    {
        "content": "<p>Many places that accept commands also accept these \"command lists\", but not everywhere.  Notably the pretty printer crashes on these hacky command lists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">liftCoreM</span> <span class=\"k\">do</span> <span class=\"n\">ppCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"mi\">0</span> <span class=\"k\">#check</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"n\">foo</span> <span class=\"c1\">-- unknown constant 'null'</span>\n</code></pre></div>\n<p>(even though the quotation has type <code>Syntax.Command</code>)</p>",
        "id": 297761404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662639011
    },
    {
        "content": "<p>More relevant in your case here: the command list version explicitly does not come with an antiquotation (it uses <code>many1NoAntiquot</code>).  So you can't write <code> `($[command]*) </code>, no matter what command it is.</p>",
        "id": 297761587,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662639098
    },
    {
        "content": "<p>With that in mind, the solution is clear: all you need to do is call <code>mkNullNode</code> yourself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_multi\"</span> <span class=\"n\">schemes</span><span class=\"o\">:</span><span class=\"n\">interface_scheme</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">schemes.mapM</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">my_cmd</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 297761901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662639240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297760730\">said</a>:</p>\n<blockquote>\n<p>That's an ugly (and old) part of the syntax system.</p>\n</blockquote>\n<p>Haha, thank you for the history lesson <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>",
        "id": 297763544,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662639913
    }
]