[
    {
        "content": "<p>I am new to lean which is probably why I am struggling with the following problem. I have a definition and I want to prove something that is a direct consequence of beta-reduction after substituting the definition. But the elaborator fails. Can someone help me with what I should be trying (some tactic?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">restrict</span><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>  <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">fn</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">plusOne</span> <span class=\"n\">n</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lem1</span><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">zeroVal</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">7</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">restrict</span> <span class=\"mi\">7</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">plusOne</span> <span class=\"mi\">7</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"n\">_</span>\n</code></pre></div>\n<p>The response I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">zeroVal</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">7</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">restrict</span> <span class=\"mi\">7</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">plusOne</span> <span class=\"mi\">7</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 241531850,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622811963
    },
    {
        "content": "<p>Does <code>rfl</code> work?</p>",
        "id": 241531965,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622812031
    },
    {
        "content": "<p>Thanks a lot. Yes it worked here. Will try where I really wanted it.</p>",
        "id": 241532154,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622812119
    },
    {
        "content": "<p>Worked where I needed it too. Need some more but I have to work on that. Thanks again.</p>",
        "id": 241532406,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622812278
    }
]