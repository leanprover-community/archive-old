[
    {
        "content": "<p>Thanks a lot. Indeed <code>nativeDecide</code> did the trick.</p>",
        "id": 262807966,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1637939877
    },
    {
        "content": "<p>I have no idea why <code>rfl</code> had to do so much work. I know the normal form of <code>eg</code>Soln` is a lot of work, and this was apparently not bypassed. If it is any help, some extracts from my code are below (far from a minimal example I am afraid).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SatSolution</span><span class=\"o\">{</span><span class=\"n\">dom</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}(</span><span class=\"n\">clauses</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">Clause</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">dom</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unsat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">ResolutionTree</span> <span class=\"n\">clauses</span> <span class=\"o\">(</span><span class=\"n\">contradiction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n          <span class=\"n\">SatSolution</span> <span class=\"n\">clauses</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">valuation</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">kw</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dom</span><span class=\"o\">)</span>\n        <span class=\"bp\">→</span> <span class=\"n\">ClauseSat</span> <span class=\"o\">(</span><span class=\"n\">clauses.coords</span> <span class=\"n\">k</span> <span class=\"n\">kw</span><span class=\"o\">)</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SatSolution</span> <span class=\"n\">clauses</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SatSolution.isSat</span><span class=\"o\">{</span><span class=\"n\">dom</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}{</span><span class=\"n\">clauses</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">Clause</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">dom</span><span class=\"o\">}:</span>\n                  <span class=\"o\">(</span><span class=\"n\">sol</span> <span class=\"o\">:</span> <span class=\"n\">SatSolution</span> <span class=\"n\">clauses</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">SatSolution.unsat</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">SatSolution.sat</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>The term <code>eg1Soln</code> is of the form <code>SatSolution.unsat tree</code>. When I apply <code>eval</code> and <code>nativeDecide</code> to <code>eg1Soln.isSat</code> quickly gives <code>false</code> based on the constructor, but <code>rfl</code> seems to not use this and instead compute normal form for <code>eg1Soln</code>.</p>",
        "id": 262808500,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1637940201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 262811219,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637941810
    }
]