[
    {
        "content": "<p>I've been wanting to do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">Option.some</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">cavesys.indexOf</span><span class=\"bp\">?</span> <span class=\"n\">start</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 295421841,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661520135
    },
    {
        "content": "<p>Can be done, and you even have almost the right syntax already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- only works in a do block</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cavesys.indexOf</span><span class=\"bp\">?</span> <span class=\"n\">start</span>\n  <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 295422601,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1661520428
    },
    {
        "content": "<p>What's <code>return</code> used for?</p>",
        "id": 295423687,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661520781
    },
    {
        "content": "<p>Can I use it inside <code>match</code>? I only want to return early for some branches</p>",
        "id": 295423800,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661520819
    },
    {
        "content": "<p><code>return a</code> is equivalent to <code>pure a</code> except that it early-returns (and is therefore a keyword). So if you want an early return in a <code>match</code>, you just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>For the particular case where you want to early-return from all branches except one, you can use the syntax I showed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>   <span class=\"c1\">-- note the parentheses; they are required</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"n\">b</span>\n</code></pre></div>\n<p>This is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>In my example above, I used <code>return</code> in the early-return statement <code>a</code>, but you can put any monadic action there. In particular, I could have used <code>pure</code> as well since the early-returniness of <code>return</code> does not come into play there.</p>",
        "id": 295425315,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1661521302
    },
    {
        "content": "<p>oh, I use <code>.some</code> instead</p>",
        "id": 295427199,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661521817
    },
    {
        "content": "<p>No parentheses needed</p>",
        "id": 295427233,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661521829
    },
    {
        "content": "<p>Without <code>.</code>, binding might not be constructor</p>",
        "id": 295427343,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661521867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">cavesys</span> <span class=\"o\">:=</span> <span class=\"n\">CaveSystem.fromLines</span><span class=\"bp\">?</span> <span class=\"n\">lines</span>\n</code></pre></div>",
        "id": 295427395,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661521887
    },
    {
        "content": "<p>thanks for your info</p>",
        "id": 295427467,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661521904
    },
    {
        "content": "<p>Ah, this must be a recent change; I'm pretty sure the parentheses were required at some point. Thanks!</p>",
        "id": 295427677,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1661521959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">fold</span> <span class=\"o\">:=</span>\n      <span class=\"k\">match</span> <span class=\"n\">line.take</span> <span class=\"mi\">1</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Substring.toString</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FoldAt.left</span> <span class=\"bp\">?</span><span class=\"n\">hole</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"y\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">hol</span>\n      <span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 295451845,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661527751
    },
    {
        "content": "<p>seems like I can't use return here</p>",
        "id": 295451871,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661527759
    },
    {
        "content": "<p>You need a corresponding <code>do</code> for early return</p>",
        "id": 295452252,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661527867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">fold</span> <span class=\"bp\">&lt;-</span>\n      <span class=\"k\">match</span> <span class=\"n\">line.take</span> <span class=\"mi\">1</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Substring.toString</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">foldAt</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"y\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">foldAt</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_other</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">IO.eprintln</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Invalid instruction: {line} ; {_other}\"</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>I solved it</p>",
        "id": 295454562,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1661528536
    }
]