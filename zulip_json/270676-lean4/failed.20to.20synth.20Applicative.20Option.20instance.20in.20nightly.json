[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"kd\">def</span> <span class=\"n\">liftA3</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ζ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">ζ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">z</span>\n\n   <span class=\"k\">#check</span> <span class=\"n\">liftA3</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- leanprover/lean4:stable</span>\n  <span class=\"c1\">--    liftA3 (fun (a a_1 a_2 : Nat) =&gt; a + a_1 + a_2) (some 1) (some 2) (some 3) : Option Nat</span>\n  <span class=\"c1\">-- leanprover/lean4:nightly-2021-12-04</span>\n  <span class=\"c1\">--   failed to synthesize instance</span>\n  <span class=\"c1\">--      Applicative Option</span>\n</code></pre></div>",
        "id": 263707986,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638625216
    },
    {
        "content": "<p>what changed from m2 to nightly that this error is happening ? How to fix the same ?</p>",
        "id": 263708132,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638625348
    },
    {
        "content": "<p><code>Option</code> is not a type that carries instances for Applicative Monad etc. anymore, it has been replaced by <code>OptionM</code> which is basically an <code>OptionT</code> with an <code>Id</code> Monad which makes them definitionally equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so f you tell the liftA3 here that you are actually passing in <code>OptionM Nat</code> it will automatically convert the other <code>Option Nat</code> into <code>OptionM Nat</code> as well, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">liftA3</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>maybe there is an even smarter way to do this? But it can definitely be made to work this way. <span class=\"user-mention\" data-user-id=\"118349\">@Kaushik Chakraborty</span></p>",
        "id": 263709824,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638626644
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 263712985,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638630441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  I see this line <a href=\"https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Init/Control/Option.lean#L72\">here</a> which is what you mentioned above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">OptionM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OptionT</span> <span class=\"n\">Id</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>curious what's the difference between <code>abbrev</code> and <code>def</code> (<code>abbrev</code> is never mentioned in any of the docs) ?</p>",
        "id": 263713742,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638631350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118349\">@Kaushik Chakraborty</span> <code>abbrev</code> makes the definition be immediately inlined in things like typeclass resolution. This means that an <code>abbrev</code> definition will inherit the instances of its right-hand side (e.g., <code>OptionM</code> will inherit the instances of <code>OptionT Id α</code>). A normal <code>def</code>, on the other hand, will not.</p>",
        "id": 263713847,
        "sender_full_name": "Mac",
        "timestamp": 1638631498
    }
]