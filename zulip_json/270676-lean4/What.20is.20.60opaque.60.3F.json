[
    {
        "content": "<p>What does it mean that a constant is defined by <code>opaque</code>? I suspect it's not very deep, but also, I can't seem to find any documentation explaining what it actually is. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 284910228,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654277981
    },
    {
        "content": "<p>To my knowledge an <code>opaque</code> keyword doesn't exist although the compiler does internally use this naming for <code>constant</code> declarations.</p>\n<p>A <code>constant</code> declaration is one that cannot be unfolded (this is the opaque-ness) so it only requires a proof that its type is inhabited in order to keep the system consistent (otherwise it would be an <code>axiom</code>). <code>constant</code>s are a rather rare sight but do have their use cases most commonly in <code>partial def</code>s which are desugared to something that includes a <code>constant</code> and when interacting with the FFI</p>",
        "id": 284911618,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654278744
    },
    {
        "content": "<p>I see, that makes some sense. I'm now confused to what you mean by \"constant,\" though, since there seems to be no reference of it in how Lean defined declarations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Declaration object that can be sent to the kernel. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Declaration</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">axiomDecl</span>       <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">AxiomVal</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">defnDecl</span>        <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">DefinitionVal</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">thmDecl</span>         <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">TheoremVal</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">opaqueDecl</span>      <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">OpaqueVal</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">quotDecl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mutualDefnDecl</span>  <span class=\"o\">(</span><span class=\"n\">defns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DefinitionVal</span><span class=\"o\">)</span> <span class=\"c1\">-- All definitions must be marked as `unsafe` or `partial`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inductDecl</span>      <span class=\"o\">(</span><span class=\"n\">lparams</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nparams</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">InductiveType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">isUnsafe</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>\n<p>Are constants == declarations? Or something more restricted? (Sorry I might be really misunderstanding you here)</p>",
        "id": 284912732,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654279308
    },
    {
        "content": "<p>As i said, the compiler interally calls <code>constant</code>s opaque</p>",
        "id": 284913366,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654279649
    },
    {
        "content": "<p>so the representation here is the <code>opaqueDecl</code></p>",
        "id": 284913375,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654279655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I remember we discussed renaming the <code>constant</code> keyword to <code>opaque</code>. If we still plan on doing that, it would probably be good to do it as soon as possible to minimize migration cost (and definitely before a first official release of Lean 4).</p>",
        "id": 284913640,
        "sender_full_name": "Mac",
        "timestamp": 1654279789
    },
    {
        "content": "<p>It would also remove the discrepancy discussed here.</p>",
        "id": 284913744,
        "sender_full_name": "Mac",
        "timestamp": 1654279831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.60opaque.60.3F/near/284913366\">said</a>:</p>\n<blockquote>\n<p>As i said, the compiler interally calls <code>constant</code>s opaque</p>\n</blockquote>\n<p>Ah ok, I understand now; <code>constant</code> isn't a thing in lean, it's just a human term, which the compiler calls <code>opaque</code> instead.</p>",
        "id": 284914061,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654279993
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 284914122,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654280034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.60opaque.60.3F/near/284914061\">said</a>:</p>\n<blockquote>\n<p>Ah ok, I understand now; <code>constant</code> isn't a thing in lean, it's just a human term, which the compiler calls <code>opaque</code> instead.</p>\n</blockquote>\n<p>No, <code>constant</code> is a thing in Lean. It is a command that declares an <code>opaqueDecl</code> and has a similar syntax to <code>def</code>/<code>axiom</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">opaqueList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 284914283,
        "sender_full_name": "Mac",
        "timestamp": 1654280107
    },
    {
        "content": "<p>There is also a different notion of a constant in the Lean core (e.g., <code>ConstantInfo</code>) that roughly corresponds to any defined symbol.</p>",
        "id": 284914494,
        "sender_full_name": "Mac",
        "timestamp": 1654280195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.60opaque.60.3F/near/284913640\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> I remember we discussed renaming the <code>constant</code> keyword to <code>opaque</code>. If we still plan on doing that, it would probably be good to do it as soon as possible to minimize migration cost (and definitely before a first official release of Lean 4).</p>\n</blockquote>\n<p>I agree. It would be great to have a community consensus on this. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Any thoughts/ideas?</p>",
        "id": 284922999,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1654284367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.60opaque.60.3F/near/284914283\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.60opaque.60.3F/near/284914061\">said</a>:</p>\n<blockquote>\n<p>Ah ok, I understand now; <code>constant</code> isn't a thing in lean, it's just a human term, which the compiler calls <code>opaque</code> instead.</p>\n</blockquote>\n<p>No, <code>constant</code> is a thing in Lean. It is a command that declares an <code>opaqueDecl</code> and has a similar syntax to <code>def</code>/<code>axiom</code>. For example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">opaqueList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh! Ok this is indeed a confusing name discrepancy...</p>",
        "id": 284923225,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654284532
    },
    {
        "content": "<p>Using <code>opaque</code> instead of <code>constant</code> would make all commands match the internal <a href=\"https://github.com/leanprover/lean4/blob/1785ab142e4bc9d3e09a32f8c560b9160aa37a56/src/Lean/Elab/DefView.lean#L19\">definition kind</a> list, and would clarify that it is not the same thing as <code>Expr.const</code>, so I would lean very slightly towards <code>opaque</code>, but this is not a strongly held view.</p>",
        "id": 284926171,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1654286360
    },
    {
        "content": "<p>There is also the complication that <code>constant</code>s are opaque from the kernel's point of view, but they evaluate just fine in the interpreter.</p>",
        "id": 284926438,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1654286514
    }
]