[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Now that I have the method to measure the slowness.... any ideas how to speed this up?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">ar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ar.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- quick and dirty deduplication from pre-sorted array. must not be empty.</span>\n<span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">arr.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">dups</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">arr.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">arr.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.push</span> <span class=\"n\">last</span>\n    <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">arr.toList.drop</span> <span class=\"mi\">1</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"bp\">!=</span> <span class=\"n\">last</span> <span class=\"k\">then</span>\n            <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.push</span> <span class=\"n\">e</span>\n            <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">dups</span> <span class=\"o\">:=</span> <span class=\"n\">dups.push</span> <span class=\"n\">e</span>\n\n    <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">dups</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">dedup'</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">UInt64</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">UInt64</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">arr.qsort</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hash</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">dedup</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 266444764,
        "sender_full_name": "Sofia",
        "timestamp": 1640886148
    },
    {
        "content": "<p>I suspect the toList and new array won't help, in the dedup part. Is hashing the array going to be slow under the usage of quicksort? I don't need any specific sort, I only need a consistent ordering for the dedup. Pointer-level sort would be interesting.</p>",
        "id": 266444881,
        "sender_full_name": "Sofia",
        "timestamp": 1640886252
    },
    {
        "content": "<p>For context. The outer array is on the order of thousands and the inner array is on the order of ~16-64.</p>",
        "id": 266445029,
        "sender_full_name": "Sofia",
        "timestamp": 1640886428
    },
    {
        "content": "<p>Eliminated the <code>toList</code>, no improvement.</p>",
        "id": 266445259,
        "sender_full_name": "Sofia",
        "timestamp": 1640886618
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">arr.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">dups</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">arr.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">Inhabited.default</span>\n\n    <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">arr</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"bp\">!=</span> <span class=\"n\">last</span> <span class=\"k\">then</span>\n            <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.push</span> <span class=\"n\">e</span>\n            <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">dups</span> <span class=\"o\">:=</span> <span class=\"n\">dups.push</span> <span class=\"n\">e</span>\n\n    <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">dups</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266445271,
        "sender_full_name": "Sofia",
        "timestamp": 1640886641
    },
    {
        "content": "<p>Isolated out the dedup part, it isn't the problem. So the issue seems to be in quicksort and/or that hash-based sort.</p>",
        "id": 266445397,
        "sender_full_name": "Sofia",
        "timestamp": 1640886756
    },
    {
        "content": "<p>~1.2s to generate my graph. ~17.5 seconds to sort ~5000 elements !</p>",
        "id": 266445656,
        "sender_full_name": "Sofia",
        "timestamp": 1640886971
    },
    {
        "content": "<p>Is that compiled or interpreted?</p>",
        "id": 266445689,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640887006
    },
    {
        "content": "<p>Compiled.</p>",
        "id": 266445722,
        "sender_full_name": "Sofia",
        "timestamp": 1640887037
    },
    {
        "content": "<p>Make that 8434, not 5000.</p>",
        "id": 266445731,
        "sender_full_name": "Sofia",
        "timestamp": 1640887048
    },
    {
        "content": "<p>That definitely sounds slower than expected. I don't have an immediate suggestion, but <code>perf top</code> is great for getting a quick idea on where time is actually spent (on Linux).</p>",
        "id": 266447546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640888569
    },
    {
        "content": "<p>It is quite late.. I should call the night. I might try <code>perf top</code> tomorrow. Not sure I've ever used <code>perf</code> before. Known about it at least.</p>\n<p>I have a few ideas for how to accelerate the pruning, so we'll see how that goes.</p>\n<p>Thank you. TTYL. o/</p>",
        "id": 266447906,
        "sender_full_name": "Sofia",
        "timestamp": 1640888923
    },
    {
        "content": "<p>Depending on how often <code>qsort</code> calls the comparison function, it might be better to compute the hashes beforehand. But it still doesn't sound like it should be that slow.</p>",
        "id": 266448324,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640889265
    },
    {
        "content": "<p>The current <code>Array.qsort</code> has quadratic time complexity if all elements are equal because the partitioning is not doing a three-way comparison for the pivot &lt;<a href=\"https://en.wikipedia.org/wiki/Quicksort#Repeated_elements\">https://en.wikipedia.org/wiki/Quicksort#Repeated_elements</a>&gt;. I stumbled upon this some time ago but forgot to report it.</p>",
        "id": 266474154,
        "sender_full_name": "pcpthm",
        "timestamp": 1640915831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347012\">@pcpthm</span> Thanks for confirming the issue. I certainly hit this worst case with MANY duplicates. The solution (besides fixing the algorithm) is to just run it more often to keep it small.</p>",
        "id": 266474467,
        "sender_full_name": "Sofia",
        "timestamp": 1640916103
    },
    {
        "content": "<p>A better solution would be to collect sorted short-passes, then order-preserve merge.</p>",
        "id": 266474546,
        "sender_full_name": "Sofia",
        "timestamp": 1640916185
    },
    {
        "content": "<p>ouch, pathological quicksort again <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> why can't we use pattern defeating quicksort? it's fast and its worst case time complexity is O(nlogn) because the algorithm falls back to heapsort when the input is too pathological <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 266476333,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640918545
    },
    {
        "content": "<p>FYI there is a heapSort function in mathlib4</p>",
        "id": 266476503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640918810
    }
]