[
    {
        "content": "<p>I've written an integer type as a subtype of a \"pre-integer\" base type based on whether the base int is in an acceptable normal form.<br>\nNow I'm trying to prove things about my <code>is_norm</code> function, e.g. that a base int of the form <code>succ^n pred</code> is in normal form according to <code>is_norm</code>. I've defined two versions of the <code>is_norm</code> predicate, the first was what first came to mind, but it was seemingly impossible to prove that <code>is_norm (succ^n pred) = true</code> whereas redefining the function using nested functions made it straightforward. Is the lesson here that I should always avoid defining functions that use pattern matching on composed constructors, e.g. <code>succ (pred a)</code> because the resulting proofs are extremely difficult or is there an equally easy proof using my first <code>is_norm</code> function that's just not obvious to me?</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">b_int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">b_int</span>\n\n<span class=\"c1\">-- Initial version, very straightforward definition</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- More elaborate, but ends up making proof way easier?</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_norm''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isSucc</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isPred</span> <span class=\"n\">a</span>\n  <span class=\"n\">where</span>\n  <span class=\"n\">isSucc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isSucc</span> <span class=\"n\">b</span>\n  <span class=\"n\">isPred</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isPred</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">//</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- This is to define a b_int that only uses either succ or pred repeatedly</span>\n<span class=\"kd\">def</span> <span class=\"n\">fun_pow</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">fun_pow</span> <span class=\"n\">b_int.succ</span> <span class=\"mi\">5</span> <span class=\"n\">zero</span> <span class=\"c1\">-- succ (succ (succ (succ (succ zero))))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">zero.pred.succ.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fun_pow_succ_n</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n.succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- Fairly easy to prove with is_norm''</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_n_is_norm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_norm''</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fun_pow_succ_n</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">is_norm''</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">is_norm''.isSucc</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">z₁</span><span class=\"o\">]</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fun_pow_succ_n</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">z₂</span> <span class=\"o\">:</span> <span class=\"n\">is_norm''.isSucc</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"n\">zero</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">is_norm''.isSucc</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">z₂</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">assumption</span>\n\n<span class=\"c1\">-- I have no idea how to prove with the first is_norm:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_n_is_norm2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 241731992,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623045298
    },
    {
        "content": "<p>You just have to do sufficient case splits until the <code>is_norm</code> case is uniquely determined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_n_is_norm2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">fun_pow</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n</code></pre></div>",
        "id": 241741981,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623053233
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 241772916,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623071061
    }
]