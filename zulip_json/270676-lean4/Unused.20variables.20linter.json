[
    {
        "content": "<p>Is there a way to disable <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Linter/Basic.lean\">this</a> recently added linter in the whole Lake package at once (i.e. without adding <code>set_option linter.unusedVariables false</code> everywhere)?</p>",
        "id": 285530023,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1654779684
    },
    {
        "content": "<p>Yes, you should be able to set <code>moreLeanArgs := #[\"-Dlinter.unusedVariables=false\"]</code> in your lakefile. And/or <code>moreServerArgs</code> to disable it in the editor.</p>",
        "id": 285531031,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654780095
    },
    {
        "content": "<p>Yes, it works. Thanks!</p>",
        "id": 285531665,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1654780349
    },
    {
        "content": "<p>Apart from that, we are open to suggestions for improving the lint of course :)</p>",
        "id": 285531821,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654780431
    },
    {
        "content": "<p>One thing that might help (not sure if this is what <span class=\"user-mention silent\" data-user-id=\"197930\">Uranus Testing</span> was dealing with) which I discovered when deploying an unused variables linter of my own is that declarations that use <code>sorry</code> should be exempted from the linter</p>",
        "id": 285533457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654781141
    },
    {
        "content": "<p>I was thinking of excluding those with errors, which I suppose is almost but not quite the same</p>",
        "id": 285534381,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654781522
    },
    {
        "content": "<p>I think that theorems with errors could also be exempted but they are much less likely to be a pervasive \"how do I turn off this linter globally\" problem compared to use of <code>sorry</code></p>",
        "id": 285534639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654781616
    },
    {
        "content": "<p>because usually you won't have hundreds of theorems with errors</p>",
        "id": 285534676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654781633
    },
    {
        "content": "<p>Wow, that's quite a number of <code>sorry</code>s. But it shouldn't hurt excluding them.</p>",
        "id": 285535100,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654781798
    },
    {
        "content": "<p>you must not be watching the <a class=\"stream\" data-stream-id=\"267928\" href=\"/#narrow/stream/267928-condensed-mathematics\">#condensed mathematics</a> stream. :) There are regular reports there on the number of sorrys left and it's in that ballpark; the compiler file I'm working on right now has 203 <code>sorry</code>s in 1400 lines</p>",
        "id": 285536223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654782244
    },
    {
        "content": "<p>Nice. At some point, flycheck-mode would give up just from the number of <code>sorry</code> warnings.</p>",
        "id": 285536424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654782309
    },
    {
        "content": "<p>well, technically it's an axiom called <code>sorry</code> because that many yellow squiggles would drive me nuts</p>",
        "id": 285536559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654782364
    },
    {
        "content": "<p>Understandable, but that complicates making it disable the other linter</p>",
        "id": 285536766,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654782461
    },
    {
        "content": "<p>that's true. I did a file-level disable for my project</p>",
        "id": 285536857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654782484
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1205\">https://github.com/leanprover/lean4/pull/1205</a></p>",
        "id": 285544928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654785657
    },
    {
        "content": "<p>I think that right now we have around 60 sorries in condensed maths</p>",
        "id": 285601403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654812138
    },
    {
        "content": "<p>Just updated Lean and got lots of \"unused variable\" warnings, but I don't quite understand. E.g. I get a warning if I name a type class parameter without using the name within the definition. But if I remove the name, that also changes the interface for <em>users</em> of the definition, in case I want to provide an explicit argument. Should parameters be excluded, maybe?</p>",
        "id": 286642234,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1655546114
    },
    {
        "content": "<p>Why not use <code>_</code> or <code>_a</code> as parameter name? Does the underscore prefix matter for you interface?</p>",
        "id": 286642717,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655546801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198266\">@Sebastian Reichelt</span> Yes, this specific case was left unresolved in the initial implementation. My favorite solution would still be <a href=\"https://github.com/leanprover/lean4/pull/1190#discussion_r889594858\">https://github.com/leanprover/lean4/pull/1190#discussion_r889594858</a> though.</p>",
        "id": 286642896,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655547113
    },
    {
        "content": "<p>(Do you <em>often</em> need to explicitly specify inst-implicit arguments? That seems like an anti pattern)</p>",
        "id": 286644711,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655549433
    },
    {
        "content": "<p>Here's another false positive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sb</span>\n</code></pre></div>",
        "id": 286707123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655641464
    },
    {
        "content": "<p>There also appears to be a separate error where putting the cursor over the commas in the lambda-match yields an infoview error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sb</span>\n   <span class=\"c1\">-- ^</span>\n</code></pre></div>\n<blockquote>\n<p>Error updating: Error fetching goals: {\"stack\":\"Error: unknown constant 'Set._example.match_1'\\n\\tat /home/mario/.vscode/extensions/leanprover.lean4-0.0.78/dist/extension.js:2:542515\\n\\tat /home/mario/.vscode/extensions/leanprover.lean4-0.0.78/dist/extension.js:2:542809\\n\\tat Immediate.&lt;anonymous&gt; (/home/mario/.vscode/extensions/leanprover.lean4-0.0.78/dist/extension.js:2:543171)\\n\\tat processImmediate (node:internal/timers:464:21)\",\"message\":\"unknown constant 'Set._example.match_1'\",\"code\":-32603}. Try again.</p>\n</blockquote>",
        "id": 286707211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655641565
    },
    {
        "content": "<p>Let me guess, the last one doesn't happen with <code>def</code>?</p>",
        "id": 286707433,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655641899
    },
    {
        "content": "<p>The first example looks like <a href=\"https://github.com/leanprover/lean4/issues/1214\">https://github.com/leanprover/lean4/issues/1214</a></p>",
        "id": 286707486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655641968
    },
    {
        "content": "<p>It has some vague resemblance to <a href=\"https://github.com/leanprover/lean4/pull/1214\">lean4#1214</a> but it seems different since in this case the variable doesn't even have a user-given name, and it's also not referred to by name in the body. But possibly a solution to that one would also solve this?</p>",
        "id": 286709130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655644305
    },
    {
        "content": "<p>and yes your guess is right about the second one, it seems like it's looking for a definition that <code>example</code> only temporarily added to the environment</p>",
        "id": 286709196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655644385
    },
    {
        "content": "<p>Here's another example, also possibly from the same issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"c1\">--^ unused variable `n._@.Mathlib.Test._hyg.24`</span>\n</code></pre></div>",
        "id": 286709508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655644824
    },
    {
        "content": "<p>Is that with <a href=\"https://github.com/leanprover/lean4/pull/1221\">https://github.com/leanprover/lean4/pull/1221</a>?</p>",
        "id": 286710715,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655646459
    },
    {
        "content": "<p>I'm on june 17 nightly, so no</p>",
        "id": 286710784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655646574
    },
    {
        "content": "<p>both of these are fixed on june 19 nightly (not the infoview issue though)</p>",
        "id": 286714236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655650863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Unused.20variables.20linter/near/286644711\">said</a>:</p>\n<blockquote>\n<p>(Do you <em>often</em> need to explicitly specify inst-implicit arguments? That seems like an anti pattern)</p>\n</blockquote>\n<p>Sorry, missed this. It happens rarely (sometimes because I want to, sometimes because I can't figure out why type class synthesis fails). But when writing a library, the names are part of the API; that's why I was a little concerned in general (not so much directly related to my code).</p>\n<p>I did run into another issue, though: For some reason, the notation <code>let _ : α ← x</code> fails with <code>expected ':='</code> at the colon. Is that a bug?</p>",
        "id": 286956802,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1655836558
    }
]