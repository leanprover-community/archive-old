[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Temp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"n\">some</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">a'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span>   <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Temp</span>\n</code></pre></div>\n<p>In the above (using the <strong>stable</strong> channel of Lean 4 i.e. 4th milestone release), removing the <code>h' : </code> from <code>min l</code> results in <code>match</code> complaining about the missing case <code>cons, none</code>.  Why does this make a difference?<br>\nAlso, using the nightly version, <code>match</code> complains about the missing case regardless of whether I include <code>h' : </code>.</p>",
        "id": 283035934,
        "sender_full_name": "Raghuram",
        "timestamp": 1653033564
    },
    {
        "content": "<p>The <code>match</code> compiler uses the <code>contradiction</code> tactic before reporting a missing case. When we add the annotation <code>h' : min l</code>, we are instructing the <code>match</code> compiler to add a new hypothesis saying that <code>h' : min l =  &lt;pattern&gt;</code> in each case. The <code>contradiction</code> tactic uses this information when trying to discharge the missing case. In the m4 milestone, in the cases <code>_::_, none</code>, we have <code>h' : min (_::_) = none</code>, which can be detected by the <code>contradiction</code> tactic as contradictory.  Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>Since the m4 release, we have modified how the annotation <code>h' : min l</code> is compiled to address issues raised by users. In the new encoding, in the missing branch, the hypothesis is <code>h' : min l = none</code>. Unfortunately, the <code>contradiction</code> tactic cannot detect the contradiction anymore. Here is a way to handle that using the nightly build.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">min'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>   <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Note that I annotated both discriminants, and the goal for the <code>_::_, none</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"bp\">✝</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p><code>subst h₁</code> transforms the goal into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>which can now be discharged by the <code>contradiction</code> tactic. <br>\nBTW, in the future, we want to allow users to specify their own tactics for detecting \"unreachable\" cases.</p>",
        "id": 283066841,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653052261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Detecting.20match.20case.20unreachability/near/283066841\">said</a>:</p>\n<blockquote>\n<p>When we add the annotation <code>h' : min l</code>, we are instructing the <code>match</code> compiler to add a new hypothesis saying that <code>h' : min l =  &lt;pattern&gt;</code> in each case. The <code>contradiction</code> tactic uses this information when trying to discharge the missing case.</p>\n</blockquote>\n<p>Ah, I see.  I thought that the purpose of that syntax was only to make that fact user-accessible and that match 'knew' it regardless.</p>\n<p>Now that I know this, I thought to check, and the <code>[], none</code> case can actually be omitted too, even without <code>h1</code> or <code>h2</code> (both stable and nightly).</p>",
        "id": 283089061,
        "sender_full_name": "Raghuram",
        "timestamp": 1653061812
    },
    {
        "content": "<p>BTW is <code>subst</code> documented anywhere other than the docstring?  I can't seem to find it in Theorem Proving in Lean 4 or the manual, and I didn't know it existed until now.  (Although in this case <code>rw [h1] at h2;</code> works just as well.)</p>",
        "id": 283090660,
        "sender_full_name": "Raghuram",
        "timestamp": 1653062449
    }
]