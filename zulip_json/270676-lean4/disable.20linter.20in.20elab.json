[
    {
        "content": "<p>When using the <code>elab</code> command to define some new command, is there a way to tell Lean I want to disable the unused variable linter while processing each time this new command will be used?</p>",
        "id": 301318520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664396062
    },
    {
        "content": "<p><code>set_option linter.unusedVariables false</code></p>",
        "id": 301320526,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664396864
    },
    {
        "content": "<p>that is, you should put <code>set_option linter.unusedVariables false</code> <em>inside</em> the generated syntax quotation</p>",
        "id": 301321586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664397292
    },
    {
        "content": "<p>I don't know where is \"<em>inside</em> the generated syntax quotation\"</p>",
        "id": 301322468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664397666
    },
    {
        "content": "<p>My code contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mydecl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">mydecl</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Message\"</span> <span class=\"n\">decls</span><span class=\"o\">:</span><span class=\"n\">mydecl</span><span class=\"bp\">*</span> <span class=\"s2\">\":\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"c1\">-- lots of stuff</span>\n</code></pre></div>\n<p>and I don't want Lean to complain about unused variables when users use this <code>Message</code> command.</p>",
        "id": 301322834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664397837
    },
    {
        "content": "<p>can you make a MWE?</p>",
        "id": 301323357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398049
    },
    {
        "content": "<p>Sorry, I'll work on a MWE</p>",
        "id": 301323704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664398199
    },
    {
        "content": "<p>Here's one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Message\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"n\">goal</span> <span class=\"n\">none</span>\n\n<span class=\"n\">Message</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span> <span class=\"c1\">-- unused variable</span>\n</code></pre></div>",
        "id": 301324464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398480
    },
    {
        "content": "<p>Removing everything indeed doesn't show the bug, so here is a somewhat MWE (I cut of lot so don't try to make sense of this code):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mydecl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">mydecl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getIdent</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">mydecl</span> <span class=\"bp\">→</span> <span class=\"n\">Ident</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mydecl</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getType</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">mydecl</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mydecl</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"sd\">/-- From a term `s` and a list of pairs `(i, t) ; Ident × Term`, create the syntax</span>\n<span class=\"sd\">where `s` is preceded with universal quantifiers `∀ i : t`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">×</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"n\">s</span> <span class=\"n\">tail</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Message\"</span> <span class=\"n\">decls</span><span class=\"o\">:</span><span class=\"n\">mydecl</span><span class=\"bp\">*</span> <span class=\"s2\">\":\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">$</span> <span class=\"n\">mkGoalSyntax</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">decls.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">getIdent</span> <span class=\"n\">decl</span><span class=\"o\">,</span> <span class=\"n\">getType</span> <span class=\"n\">decl</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">$</span> <span class=\"n\">elabTerm</span> <span class=\"n\">g</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">msg</span>\n\n\n<span class=\"n\">Message</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>",
        "id": 301324494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664398497
    },
    {
        "content": "<p>Indeed yours is more minimal <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 301324574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664398525
    },
    {
        "content": "<p>Hopefully my question now makes sense. How do I get rid of this linter here?</p>",
        "id": 301324696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664398565
    },
    {
        "content": "<p>I was going to suggest</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"Message\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">withOptions</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">o.setBool</span> <span class=\"bp\">`</span><span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">elabTerm</span> <span class=\"n\">goal</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>but it doesn't work, the linter runs on the input syntax</p>",
        "id": 301324712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398574
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"Message'\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"n\">goal</span> <span class=\"n\">none</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"Message\"</span> <span class=\"n\">goal</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"n\">Message'</span> <span class=\"bp\">$</span><span class=\"n\">goal</span><span class=\"o\">)</span>\n\n<span class=\"n\">Message</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 301324890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398660
    },
    {
        "content": "<p>there is also a general system in the <code>linter.unusedVariables</code> implementation for blacklisting identifiers in specific positions</p>",
        "id": 301325157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398773
    },
    {
        "content": "<p>And it also works in my real case, thanks!</p>",
        "id": 301325329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664398821
    },
    {
        "content": "<p>which is probably a better solution since it means you can localize the suppression to just the <code>a</code> in the <code>(a : Nat)</code> binders in your example</p>",
        "id": 301325351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398825
    },
    {
        "content": "<p>you can also use a <code>local elab</code> to make it so users can't write the internal syntax</p>",
        "id": 301325433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664398858
    }
]