[
    {
        "content": "<p>I was trying to implement a recursive structure like the one discussed in this thread: <a href=\"#narrow/stream/270676-lean4/topic/Recursive.20Structures\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Recursive.20Structures</a> but wanted to use <code>HashMap</code> instead of <code>List</code>, say something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Package</span>\n  <span class=\"c1\">-- | mk : (deps : List Package) → Package -- works fine</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Package</span> <span class=\"c1\">-- (kernel) arg #1 of 'Package.mk' contains a non valid occurrence of the datatypes being declared</span>\n</code></pre></div>\n<p>I guess there's some reason why the code generator won't work with this. For my purpuses I can just use (the equivalent of) <code>List (Strig × Package)</code>, but I'm curious, why doesn't this work? The error seems quite cryptic</p>",
        "id": 313046318,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669810688
    },
    {
        "content": "<p>Whenever the type you're defining (here <code>Package</code>) appears as an argument to some type function <code>F : Type -&gt; Type</code> in a constructor argument (here <code>F = λ T, Std.HashMap String T</code>, Lean must prove that <code>F</code> is \"strictly positive\". This is necessary to avoid paradoxes. Lean's strict positivity checker is incomplete and doesn't realise that <code>HashMap</code>, which is a rather complex type, is strictly positive.</p>\n<p>If you really want, you can get the desired representation by defining <code>Package</code> as an <code>unsafe inductive</code>, though that way lies much pain.</p>",
        "id": 313057213,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669814134
    },
    {
        "content": "<p>is there a way to manually provide a proof of that, like for termination?</p>",
        "id": 313063206,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669816031
    },
    {
        "content": "<p>Not to my knowledge.</p>",
        "id": 313064507,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669816426
    }
]