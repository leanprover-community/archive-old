[
    {
        "content": "<p>This behavior seems to be a bug in the dependent matcher - <code>MyBool.noConfusion</code> gets passed both an argument for <code>b = .MyTrue</code> and an extra one for <code>u = ()</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyBool</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyTrue</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyFalse</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">MyBool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">isTrue</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">.</span><span class=\"n\">MyTrue</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">τ</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">isTrue</span> <span class=\"n\">τ</span><span class=\"o\">):</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">.</span><span class=\"n\">MyTrue</span> <span class=\"o\">(),</span> <span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- (kernel) function expected</span>\n<span class=\"c1\">--   MyBool.noConfusion (_ : b✝ = MyBool.MyTrue) (_ : u✝ = ())</span>\n</code></pre></div>\n<p>I there is a way to write such a function without first refining <code>τ</code> then <code>h</code>, I'd also like to know.</p>",
        "id": 284634050,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1654100104
    },
    {
        "content": "<p>Thanks for reporting this issue. I pushed a fix for it: <a href=\"https://github.com/leanprover/lean4/commit/32db3161666325b704ef9d4876f9ee9718e03bb2\">https://github.com/leanprover/lean4/commit/32db3161666325b704ef9d4876f9ee9718e03bb2</a></p>",
        "id": 284688026,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1654131601
    }
]