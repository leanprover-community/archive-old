[
    {
        "content": "<p>Given the file <code>Context.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Papyrus</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ContextRef</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">@[extern \"papyrus_context_new\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">ContextRef.new</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ContextRef</span>\n<span class=\"kd\">end</span> <span class=\"n\">Papyrus</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testNew</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Papyrus.ContextRef.new</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">testNew</span>\n</code></pre></div>\n<p>Running it with</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean --run Context.lean\n</code></pre></div>\n<p>Gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Papyrus.ContextRef.new'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_Papyrus_ContextRef_new___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_Papyrus_ContextRef_new'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why is Lean looking for <code>l_Papyrus_ContextRef_new</code> instead of <code>papyrus_context_new</code>?</p>",
        "id": 250036676,
        "sender_full_name": "Mac",
        "timestamp": 1629401231
    },
    {
        "content": "<p>Furthemore, since the function<code>l_Papyrus_ContextRef_new</code> is part of the compiled c file for <code>Context.lean</code>, I would assume that the existence of such an external symbol would actually clash with the definition.</p>",
        "id": 250037932,
        "sender_full_name": "Mac",
        "timestamp": 1629401788
    },
    {
        "content": "<p>Thus I am wondering whether this is a bug and thus if I should submit an issue.</p>",
        "id": 250038128,
        "sender_full_name": "Mac",
        "timestamp": 1629401879
    },
    {
        "content": "<p>Also, I should note the same error appears if <code>ContextRef.new</code> is defined in a import rather than the main file.</p>",
        "id": 250039403,
        "sender_full_name": "Mac",
        "timestamp": 1629402398
    },
    {
        "content": "<p>This is all as intended. The interpreter looks for the boxed Lean definition as it has a homogeneous ABI. Extern declarations must be compiled to be executable.</p>",
        "id": 250045364,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629405242
    },
    {
        "content": "<p>Ah so you have to have the external Lean symbol within the plugin (not just the external symbol). Okay, thanks for the info.</p>",
        "id": 250057090,
        "sender_full_name": "Mac",
        "timestamp": 1629412046
    }
]