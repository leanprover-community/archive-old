[
    {
        "content": "<p>(<a href=\"https://github.com/JasonGross/lean-tools/blob/f7582cbc0a94220ce2128681f3a87e0532b399be/LeanTools/FindBug.lean#L10-L25\">https://github.com/JasonGross/lean-tools/blob/f7582cbc0a94220ce2128681f3a87e0532b399be/LeanTools/FindBug.lean#L10-L25</a>) I'm invoking lean via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">runLean</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Options</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Lean.Environment</span> <span class=\"bp\">×</span> <span class=\"n\">Lean.MessageLog</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.processHeader</span> <span class=\"n\">header</span> <span class=\"n\">opts</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"o\">(</span><span class=\"n\">Elab.Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"n\">opts</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">s.commandState.env</span><span class=\"o\">,</span> <span class=\"n\">s.commandState.messages</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Currently I'm passing in <code>Lean.Options.empty</code>.  Is there something I should be passing in instead so that I don't get <code>error: unknown package 'Init'</code>?</p>",
        "id": 231088351,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616187202
    },
    {
        "content": "<p>Ah. You likely need to call <a href=\"https://github.com/leanprover/lean4/blob/03e3a1cc6b8b574f99ca4310b4fd26f5542c1809/src/Lean/Util/Path.lean#L60\"><code>initSearchPath</code></a> first and give it the path to the stdlib (or do that from outside the process with <code>LEAN_PATH</code>). <code>lean</code> assumes the stdlib is located at <code>../lib/lean</code>, which likely isn't true for your executable.</p>",
        "id": 231089159,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616187595
    },
    {
        "content": "<p>How is it that that <code>lean</code> executable doesn't need me to put the standard library in <code>LEAN_PATH</code>?  Also, how do I find where the stdlib is located?</p>",
        "id": 231089721,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616187825
    },
    {
        "content": "<p>If you're using <code>elan</code> then I guess it's finding a <code>leanpkg.toml</code> nearby . I guess I have a gazillion copies of Lean 3 and a few Lean 4's in <code>~/.elan/toolchains</code></p>",
        "id": 231089923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616187938
    },
    {
        "content": "<p>My <code>leanpkg.toml</code> is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"Syntax\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n</code></pre></div>\n<p>so I don't see how that helps...</p>",
        "id": 231090116,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616188050
    },
    {
        "content": "<p>heh :-) Then probably it's using some default toolchain. Try <code>elan show</code>?</p>",
        "id": 231090230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616188107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"k\">show</span>\n<span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">stable</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">1</span><span class=\"n\">af02dcaca3c</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231090246,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616188120
    },
    {
        "content": "<p>then you're using the copy of Lean in <code>~/.elan/toolchains/leanprover-lean4-nightly</code> I should think.</p>",
        "id": 231090303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616188159
    },
    {
        "content": "<p>So I guess the stdlib is in <code>/home/jgross/.elan/toolchains/leanprover-lean4-nightly/lib/lean/</code></p>",
        "id": 231090308,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616188164
    },
    {
        "content": "<p>I'm no expert on Lean 4 but that was how it worked with Lean 3 and I guess <code>elan</code> didn't change much since then.</p>",
        "id": 231090430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616188219
    },
    {
        "content": "<p>And indeed <code>LEAN_PATH=/home/jgross/.elan/toolchains/leanprover-lean4-nightly/lib/lean/:././build</code> gets me further (thanks <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !) (though I'm still confused about how Lean is managing to figure this out automatically when I call the lean binary but not when I invoke it through the frontend), but now I'm getting <code>error: could not find native implementation of external declaration 'Nat.div'</code></p>",
        "id": 231090537,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616188281
    },
    {
        "content": "<p>Are your running your code in the interpreter or as a compiled binary?</p>",
        "id": 231096622,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616191805
    },
    {
        "content": "<p>Right, there is one more magic incantation necessary: you need to use <code>leanpkg build bin LINK_OPTS=-rdynamic</code> so that the interpreter can find native functions. We should probably gather all this information somewhere...</p>",
        "id": 231097911,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616192650
    },
    {
        "content": "<p>Does this effectively make the linker keep all the symbols from static libs?</p>",
        "id": 231097978,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616192714
    }
]