[
    {
        "content": "<p>My understanding of partial so far has been that the compiler will turn it into a constant + an implemented by pointing to an auto generated  unsafe function. Now it does seem that both the constant and the auto generated function are correct but it is not done via implementedBy as evident by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- partial definition</span>\n  <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Syntax.structEq</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"o\">(</span><span class=\"n\">Compiler.getImplementedBy</span> <span class=\"n\">env</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"n\">i.name</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So how is this actually done internally? I'm guessing that the part of the compiler which is responsible for resolving the connection from constant to partial def is already doing this but my grep-foo is failing me</p>",
        "id": 270895086,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644160976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- partial definition</span>\n  <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Syntax.structEq</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"c1\">-- Check whether there is an unsafe auxiliary definition associated with the opaque constant.</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Compiler.mkUnsafeRecName</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"c1\">-- Replace auxiliary unsafe auxiliary definitions in the value with their original names.</span>\n  <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">i.value.replace</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"n\">constName</span> <span class=\"n\">us</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">originalConstName</span> <span class=\"o\">:=</span> <span class=\"n\">Compiler.isUnsafeRecName</span><span class=\"bp\">?</span> <span class=\"n\">constName</span> <span class=\"k\">then</span> <span class=\"n\">mkConst</span> <span class=\"n\">originalConstName</span> <span class=\"n\">us</span> <span class=\"k\">else</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270896641,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644163176
    },
    {
        "content": "<p>Ahhh so it finds it by this unique name add on instead of implemented by, got it, thanks!</p>",
        "id": 270896758,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644163231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 270896767,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644163236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Not sure whether this feature is relevant for you or not, but Lean 4 can also generate a \"unfold\" theorem for non-partial recursive definitions. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- partial definition</span>\n  <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">List.erase</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">unfoldEqn</span> <span class=\"bp\">←</span> <span class=\"n\">getUnfoldEqnFor</span><span class=\"bp\">?</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">unfoldEqn</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">info.type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">List.erase</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">as</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 270897106,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644163673
    }
]