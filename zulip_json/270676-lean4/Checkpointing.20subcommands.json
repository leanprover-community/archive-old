[
    {
        "content": "<p>When I have a macro that generates multiple commands, would it be possible to have checkpointing between the generated commands?</p>\n<p>Example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.sleep</span> <span class=\"mi\">1000</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"done {n}\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#foo\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">n</span>\n    <span class=\"bp\">#</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span>\n</code></pre></div>\n<p>When I changes <code>#foo 1,2,3,4</code> to <code>#foo 1,2,3,4,5</code> I would like to wait only one second instead of five. Also I when I change <code>#foo 1,2,3,4</code> to <code>#foo 1,42,3,4</code> I want to see \"done 42\" in my Goal View after one seconds instead of four.</p>\n<p>I'm expecting it is not possible for arbitrary macro. I guess this would require for example that <code>#foo 1,2</code> generates the commands in the order i.e. <code>#eval foo 1; #eval foo 2</code> instead of <code>#eval foo 2; #eval foo 1</code></p>\n<hr>\n<p>Here is a concrete example of what I'm dealing with. I'm defining a function <code>conv1d</code> doing one dimensional convolution and I want to derive gradients in all its arguments. The whole definition with the annotations <code>def conv1d ... := ... argument x ... argument w ...</code> is a single big command. There is a sub command <code>adjDiff by &lt;convSeq&gt;</code> that symbolically computes the gradien. The problem is that the Goal View response is fairly poor as each time I change the tactic the whole command needs to be re-elaborated. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">conv1d</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n     <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i'</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i.shift</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">argument</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n    <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span>\n    <span class=\"n\">adjDiff</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">adjointDifferential</span><span class=\"o\">,</span> <span class=\"n\">conv1d</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hold</span><span class=\"o\">,</span> <span class=\"n\">sum_into_lambda</span><span class=\"o\">]</span>\n      <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_swap</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">kron_smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sum_of_kron_2</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n  <span class=\"n\">argument</span> <span class=\"n\">w</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n    <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span>\n    <span class=\"n\">adjDiff</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">adjointDifferential</span><span class=\"o\">,</span> <span class=\"n\">conv1d</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hold</span><span class=\"o\">,</span> <span class=\"n\">sum_into_lambda</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">kron_smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sum_of_kron_2</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n  <span class=\"n\">argument</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n    <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span>\n    <span class=\"n\">adjDiff</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">adjointDifferential</span><span class=\"o\">]</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">conv1d</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Each of <code>hasAdjDiff</code> or <code>adjDiff by &lt;convSeq&gt;</code> generates a new instance or <code>simp</code> theorem.</p>",
        "id": 297336447,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662458038
    },
    {
        "content": "<p>Effectively I want a syntactic family <code>commands</code> which would allow me to define a <code>command</code> that has access to the syntax of the previous commands but not the later ones. With this restriction, I believe that the checkpointing can be done.</p>",
        "id": 297337232,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662458373
    }
]