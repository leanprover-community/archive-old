[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">runST</span> <span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">ST.Prim.mkRef</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ST.Ref</span> <span class=\"n\">σ</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"s2\">\"\"</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">r'.get</span>\n</code></pre></div>\n<p>This doesn't cause any unsoundness that I can tell, but it can be used to cause memory unsafety. This code will just crash the lean server if you run it.</p>",
        "id": 241379716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622721224
    },
    {
        "content": "<p>Looks like another case for <a href=\"https://github.com/leanprover/lean4/issues/418\">https://github.com/leanprover/lean4/issues/418</a></p>",
        "id": 241429509,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622743325
    },
    {
        "content": "<p>I think that rather than <code>private</code>, this needs <code>unsafe</code></p>",
        "id": 241437483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622747102
    },
    {
        "content": "<p>specifically, <code>ST.Ref.mk</code> is unsafe</p>",
        "id": 241437547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622747132
    }
]