[
    {
        "content": "<p>I just noticed that it's a bit tricky to write down a negated <code>Float</code> value in nested arithmetic expressions.  E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Neg.neg</span> <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ^ produces the error `failed to synthesize instance OfScientific Int`</span>\n<span class=\"c1\">-- pointing at `42.0`</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ^ produces the error `failed to synthesize instance OfScientific Int`</span>\n<span class=\"c1\">-- pointing again at `42.0`</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">))</span>\n<span class=\"c1\">-- ^ works fine</span>\n</code></pre></div>\n<p>Is there an inference bias towards <code>Int</code> for <code>Neg.neg</code> usages or similar? (I tried to grep for such a bias in the lean4 repo and nothing jumped out at me...)</p>",
        "id": 223957396,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1611607538
    },
    {
        "content": "<p>Thanks for reporting this issue. I will submit a fix. The issue is due to the priorities of default instances.</p>",
        "id": 223957957,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611607812
    },
    {
        "content": "<p>Pushed <a href=\"https://github.com/leanprover/lean4/commit/d408c835d20b6a2f1eee09804222316b755b2ae2\">https://github.com/leanprover/lean4/commit/d408c835d20b6a2f1eee09804222316b755b2ae2</a></p>",
        "id": 223963289,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611610233
    }
]