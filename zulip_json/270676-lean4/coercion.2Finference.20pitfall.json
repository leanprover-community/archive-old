[
    {
        "content": "<p>What is going on with coercion and type inference that makes the below fail? Is this a bug? If not, why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Bar.toFoo</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">getFoo</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F.foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">getFoo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">bar</span> <span class=\"c1\">-- okay</span>\n<span class=\"k\">#check</span> <span class=\"n\">getFoo</span> <span class=\"n\">bar</span> <span class=\"c1\">-- fails, see below</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  getFoo bar</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  bar</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Bar Nat</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Foo (Bar Nat)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>P.S. I am using <code>Lean 4.0.0-m2</code>.</p>",
        "id": 233396663,
        "sender_full_name": "Mac",
        "timestamp": 1617745964
    },
    {
        "content": "<p>I wouldn't have expected this to work, since the expected type is not known, and a TC query <code>Coe (Bar Nat) (Foo ?m)</code> would not be allowed to assign the <code>?m</code> metavariable. However, I wouldn't have expected it to try to synthesize <code>CoeT (Bar Nat) bar (Foo (Bar Nat))</code>, and I do not immediately see why it unifies the argument to <code>Foo</code> with <code>Bar Nat</code> in the first place. I don't understand what is happening well enough to assess if it is a bug or not though. The current tracing system is pretty good but debugging this kind of thing can still be tricky. Pragmatic note: you don't need to pass <code>A := Nat</code> if the expected type is known, i.e. the following works:  <code>#check (getFoo bar : Nat)</code></p>",
        "id": 233409107,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617753303
    },
    {
        "content": "<p>Is there any way to inform lean that it should fill in the metavariable? (i.e. that <code>Bar A</code> only coerces to <code>Foo A</code> and not to some other <code>Foo B</code>?)</p>",
        "id": 233534798,
        "sender_full_name": "Mac",
        "timestamp": 1617818427
    }
]