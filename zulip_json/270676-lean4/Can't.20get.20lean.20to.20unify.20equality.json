[
    {
        "content": "<p>I'm starting to think I'm crazy.<br>\nWhen I do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">log2_rem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.half_lt_self</span> <span class=\"n\">h_zero</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">log2_rem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">log2_rem_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log2_rem</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.half_lt_self</span> <span class=\"n\">h_zero</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">log2_rem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">log2_rem</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">log2_rem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">log2_rem</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n        <span class=\"n\">let_fun</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"k\">match</span> <span class=\"n\">log2_rem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>even though it's literally just the code copy-pasted</p>",
        "id": 320211249,
        "sender_full_name": "Sebastian Widua",
        "timestamp": 1673266567
    },
    {
        "content": "<p>It's not the same code copy-pasted, because <code>log2_rem</code> in the first example is a self-reference to a thing that doesn't exist yet</p>",
        "id": 320212206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673266840
    },
    {
        "content": "<p>The proof of <code>log2_rem_eq</code> should be <code>rw [log2_rem]</code>, because Lean generates an unfolding lemma that does what you want</p>",
        "id": 320212315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673266874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20get.20lean.20to.20unify.20equality/near/320212206\">said</a>:</p>\n<blockquote>\n<p>It's not the same code copy-pasted, because <code>log2_rem</code> in the first example is a self-reference to a thing that doesn't exist yet</p>\n</blockquote>\n<p>oh is this because I used well-founded recursion here? Good to know</p>",
        "id": 320213372,
        "sender_full_name": "Sebastian Widua",
        "timestamp": 1673267188
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 320213411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673267198
    }
]