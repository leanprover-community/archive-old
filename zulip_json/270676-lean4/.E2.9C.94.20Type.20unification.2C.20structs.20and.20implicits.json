[
    {
        "content": "<p>If we look at <code>takeN</code>'s type with <code>pp.universes</code>, I don't think it's too surprising that Lean has troubles filling in universe levels in this case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n      <span class=\"n\">RSI.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Emit.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n            <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monad.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n              <span class=\"n\">m</span>\n                <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">RSI.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>In particular, note that <code>u_1</code> and <code>u_2</code> occur only inside <code>max</code> terms. Thus Lean would have to solve unification issues such as <code>max ?u_2 ?u_1 =?= max ?u_2' ?u_1'</code> by guessing <code>?u_2 := ?u_2', ?u_1 := ?u_1'</code>, but that is not the correct solution in all cases.</p>",
        "id": 289593530,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657806236
    },
    {
        "content": "<p><code>max</code> is usually introduced when independently defined universe variables become dependent after all. In this case, <code>RSI</code> contains an application of <code>m</code> but is itself used in an <code>m</code> application in the type of <code>takeN</code>, so the input and output universes of <code>m</code> are not independent after all</p>",
        "id": 289595320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657807129
    },
    {
        "content": "<p>Indeed, <code>takeN {m : Type u → Type u} ...</code> resolves the issue</p>",
        "id": 289595519,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657807209
    },
    {
        "content": "<p>Gah, so it was a thinking error. :)</p>",
        "id": 289595599,
        "sender_full_name": "cognivore",
        "timestamp": 1657807254
    },
    {
        "content": "<p>I remember writing <code>max</code> by hand when \"merging\" two independent things, but due to lack of experience, I can't read pp.universes (which is very conveniently printed in error messages) well enough just yet.</p>",
        "id": 289595790,
        "sender_full_name": "cognivore",
        "timestamp": 1657807334
    },
    {
        "content": "<p>Thank you so much, Sebastian, your answers are highly appreciated :)</p>",
        "id": 289595836,
        "sender_full_name": "cognivore",
        "timestamp": 1657807360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 289596056,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657807460
    },
    {
        "content": "<p>You might like to see proofs about lean3 parsers! And the TC-based proof system we built for it. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat_eq_done\">docs#parser.nat_eq_done</a></p>",
        "id": 289603838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Type.20unification.2C.20structs.20and.20implicits/near/289591191\">said</a>:</p>\n<blockquote>\n<p>The current <code>bind</code> constrains you to a single universe anyway, though see also the concurrent thread <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a></p>\n</blockquote>\n<p>Note that this is not necessarily a problem, as one can define a <code>ULiftT</code> transformer and use it as the top-level monad for <code>bind</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ULiftT</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">act</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">act</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bind</span> <span class=\"n\">act.run</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">a.down</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">ULiftT.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">ULiftT.bind</span>\n</code></pre></div>\n<p>As long as the monads one uses can be lifted to the <code>ULiftT m</code> monad, everything can be universe polymorphic.</p>",
        "id": 289621529,
        "sender_full_name": "Mac",
        "timestamp": 1657819016
    },
    {
        "content": "<p>Sadly, the same does not apply to <code>PLift</code>, since the <code>Monad</code> classes are polymorphic over <code>Type</code>, not <code>Sort</code>.</p>",
        "id": 289621612,
        "sender_full_name": "Mac",
        "timestamp": 1657819056
    }
]