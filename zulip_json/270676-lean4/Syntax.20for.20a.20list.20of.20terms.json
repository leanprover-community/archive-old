[
    {
        "content": "<p>I would like to write a tactic which takes a list of expressions, and I think it makes sense for the caller to actually write the list notation.</p>\n<p>That is, I would like the caller to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">my_fancy_tac</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>I would then like to obtain the <code>List Expr</code> obtained elaborating each of these.</p>\n<p>I could do just by asking for a single <code>term</code> at the <code>Syntax</code> level, elaborating that, then decomposing the resulting <code>Expr</code> object to see if it represents a <code>List</code>. But would it be better to express this all at <code>Syntax</code> level? If so, how would I do so?</p>",
        "id": 299929630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663758150
    },
    {
        "content": "<p>I'm not sure here whether I ought to avoid mucking about with <code>Expr</code>s, or avoid rewriting a <code>List</code> parser.</p>",
        "id": 299929768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663758226
    },
    {
        "content": "<p>e.g. the \"single <code>term</code>\" method perhaps looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"my_fancy_tac\"</span> <span class=\"s2\">\"using\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Expr_to_List_Expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">e.getAppFnArgs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">List.cons</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">Expr_to_List_Expr</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">my_fancy_tac</span> <span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">Expr_to_List_Expr</span> <span class=\"n\">e</span>\n    <span class=\"n\">for</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_fancy_tac</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">,</span><span class=\"mi\">57</span><span class=\"o\">]</span> <span class=\"c1\">-- Prints 37 then 57.</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 299929882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663758269
    },
    {
        "content": "<p>What about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"my_fancy_tac\"</span> <span class=\"s2\">\"using\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">my_fancy_tac</span> <span class=\"n\">using</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">es</span> <span class=\"bp\">←</span> <span class=\"n\">ts.getElems.mapM</span> <span class=\"o\">(</span><span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"bp\">·</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"n\">for</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"n\">es</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_fancy_tac</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span>  <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 299974868,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663772183
    }
]