[
    {
        "content": "<p>If I'm in the <a href=\"https://github.com/leanprover/lean4/blob/16320a297faa6041555c1a2897aa556cac677975/src/Lean/Elab/Tactic/Basic.lean#L40\"><code>TacticM</code></a> monad, I get access the <a href=\"https://github.com/leanprover/lean4/blob/16320a297faa6041555c1a2897aa556cac677975/src/Lean/Elab/Tactic/Basic.lean#L26\"><code>Tactic.Context</code></a> by doing <code>← read</code>.<br>\nBut how do I access the inner <code>Term.Context</code>, from the inner <code>TermElabM</code> monad?</p>",
        "id": 305603873,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666486378
    },
    {
        "content": "<p><code>let termCtx &lt;- readThe Term.Context</code></p>",
        "id": 305606120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666488808
    },
    {
        "content": "<p>alternatively <code>&lt;- liftM read</code></p>",
        "id": 305606183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666488859
    },
    {
        "content": "<p>Also, many fields of the context are provided as separate functions like <code>getInfoTrees</code>, and those work even if there are more reader layers afterward</p>",
        "id": 305606244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666488950
    },
    {
        "content": "<p>Cool, this works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Lean.Elab.Term.Context</span>\n</code></pre></div>",
        "id": 305606390,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489087
    },
    {
        "content": "<p>But <code>&lt;- liftM read</code> does not seem to work.</p>",
        "id": 305606396,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489105
    },
    {
        "content": "<p>ah, need parens</p>",
        "id": 305606407,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489129
    },
    {
        "content": "<p><code>     let context (← liftM) read</code></p>",
        "id": 305606412,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489143
    },
    {
        "content": "<p>wait that looks wrong</p>",
        "id": 305606427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489163
    },
    {
        "content": "<p><code>let context &lt;- liftM read</code></p>",
        "id": 305606444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489172
    },
    {
        "content": "<p>oh, right, my <code>liftM</code> thing doesn't work. There's a red squiggle on the next line now...</p>",
        "id": 305606511,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489211
    },
    {
        "content": "<p>Note that this will just get the second reader in the stack, which is probably the TermElabM context</p>",
        "id": 305606519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489226
    },
    {
        "content": "<p>you have to do <code>let context &lt;- liftM &lt;| liftM &lt;| liftM read</code> to go deeper</p>",
        "id": 305606531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489250
    },
    {
        "content": "<p>For yours, I get the error <code>typeclass instance problem is stuck, it is often due to metavariables</code></p>",
        "id": 305606543,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489285
    },
    {
        "content": "<p>which typeclass problem? what code?</p>",
        "id": 305606571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489319
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 305606619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489348
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Parser.Tactic</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Elab.Term.Context</span> <span class=\"c1\">-- works</span>\n     <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"n\">read</span>\n<span class=\"c1\">-- typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"c1\">--  MonadLiftT (?m.265 ctx) TacticM</span>\n<span class=\"c1\">--</span>\n     <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 305606770,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489564
    },
    {
        "content": "<p>hm, I thought that worked without additional hints. You can do it (even less, in fact) with a type ascription:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Elab.Term</span> <span class=\"n\">Parser.Tactic</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305606891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489709
    },
    {
        "content": "<p>hah, I had tried this unsuccessfully:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"n\">Elab.Term.Context</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n</code></pre></div>",
        "id": 305606970,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489807
    },
    {
        "content": "<p>yeah you need to use <code>readThe</code> for that version to work</p>",
        "id": 305606983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666489844
    },
    {
        "content": "<p>Ah, and I see I can add the <code>liftM</code> if I really want to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305607035,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489923
    },
    {
        "content": "<p>I like <code>readThe</code>. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 305607083,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666489959
    }
]