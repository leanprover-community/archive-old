[
    {
        "content": "<p>Is there documentation on <code>termination_by</code> anywhere?<br>\nI've only seen a couple examples here on Zulip and couldn't understand how it works just from that.</p>",
        "id": 266341893,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640781543
    },
    {
        "content": "<p>There is a bit of documentation for the underlying concept called \"well founded recursion\" in Lean 3 and also in other theorem provers since its a very general concept but I'm not aware of any Lean 4 specific documentation.</p>",
        "id": 266342285,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640781904
    },
    {
        "content": "<p>The basic idea is that you have to show that for every recursive function call you perform you call it with a smaller (according to some order relation) value than your input value and if you can prove that it is of course guaranteed that the values continue to decrease until you terminate at some point.</p>",
        "id": 266342403,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640782006
    },
    {
        "content": "<p>I don't think so, it's not in the manual yet. <code>termination_by</code> takes a well-founded relation <code>r</code>, and <code>decreasing_by</code> requires you to show that for whatever argument you're claiming decreases, <code>r recursive_case current_case</code>.</p>\n<p>In this example, the relation is <code>measure (fun ...)</code> which just uses <code>Nat.lt</code>, and the proof goal for <code>decreasing_by</code> is <code>n/10 &lt; n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natPrintAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sink</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span>\n  <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n.digitChar</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">natPrintAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.digitChar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">div_decreasing</span> <span class=\"o\">⟨</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">10</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">h0</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">natPrintAux</span> <span class=\"mi\">123</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 266342534,
        "sender_full_name": "Chris B",
        "timestamp": 1640782147
    },
    {
        "content": "<p>In <code>termination_by</code>, the thing being destructured is a PSigma of all the function arguments, and I'm picking the decreasing one.</p>",
        "id": 266342751,
        "sender_full_name": "Chris B",
        "timestamp": 1640782214
    },
    {
        "content": "<p>If you want to unfold the definition later, you have to write an auxiliary lemma similar to <code>div_eq</code>. For this one it's:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">natPrintAux_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sink</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">natPrintAux</span> <span class=\"n\">n</span> <span class=\"n\">sink</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n.digitChar</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">natPrintAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.digitChar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">natPrintAux</span><span class=\"o\">,</span> <span class=\"n\">natPrintAux._unary</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">WellFounded.fix_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The <code>._unary</code> thing is auto-generated.</p>",
        "id": 266342853,
        "sender_full_name": "Chris B",
        "timestamp": 1640782304
    },
    {
        "content": "<p>You can find a few things in the tests folder at <a href=\"https://github.com/leanprover/lean4/search?q=termination_by\">https://github.com/leanprover/lean4/search?q=termination_by</a> which I've found helpful as additional examples</p>",
        "id": 266348710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640787048
    },
    {
        "content": "<p>You can also look in mathlib4 for inspiration: <a href=\"https://github.com/leanprover-community/mathlib4/blob/560f08f7faa727bf49a4a722e8ef31b080c32a06/Mathlib/Data/BinaryHeap.lean#L57-L71\">https://github.com/leanprover-community/mathlib4/blob/560f08f7faa727bf49a4a722e8ef31b080c32a06/Mathlib/Data/BinaryHeap.lean#L57-L71</a></p>",
        "id": 266349495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640787723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/termination_by/near/266342534\">said</a>:</p>\n<blockquote>\n<p>I don't think so, it's not in the manual yet. <code>termination_by</code> takes a well-founded relation <code>r</code>, and <code>decreasing_by</code> requires you to show that for whatever argument you're claiming decreases, <code>r recursive_case current_case</code>.</p>\n<p>In this example, the relation is <code>measure (fun ...)</code> which just uses <code>Nat.lt</code>, and the proof goal for <code>decreasing_by</code> is <code>n/10 &lt; n</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natPrintAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sink</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span>\n  <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n.digitChar</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">natPrintAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.digitChar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">sink</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">div_decreasing</span> <span class=\"o\">⟨</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">10</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">h0</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">natPrintAux</span> <span class=\"mi\">123</span> <span class=\"o\">[]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What is <code>div_decreasing</code>? I can't find it anywhere.</p>",
        "id": 266367516,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640802430
    },
    {
        "content": "<p>I forgot I defined that in the file. The statement is <code>theorem div_decreasing {n b : Nat} : 2 &lt;= b ∧ b ≤ n → (n / b) &lt; n</code>.</p>",
        "id": 266369239,
        "sender_full_name": "Chris B",
        "timestamp": 1640803911
    },
    {
        "content": "<p>If you need the proof I'll pm it to you, but it's really sloppy. I would just <code>sorry</code> it.</p>",
        "id": 266369500,
        "sender_full_name": "Chris B",
        "timestamp": 1640804107
    },
    {
        "content": "<p>I am a bit confused about what is really checked with <code>termination_by</code>. For example, the following code compiles fine, though there is no <code>unsafe</code> or <code>partial</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bad</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this expected? Should one regard using <code>termination_by</code> without <code>decreasing_by</code> as equivalent to <code>unsafe</code> (but no warning is given). Any clarification is appreciated.</p>\n<p>Thanks.</p>",
        "id": 266917807,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1641377733
    },
    {
        "content": "<p>Doesn't compile fine for me at all, it complains about an unsolved goal <code>x + 1 &lt; x</code>.</p>",
        "id": 266917954,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641377839
    },
    {
        "content": "<p>Thanks. I updated my toolchain (which was from October) and now it fails to compile. Apparently a bug in the past now fixed.</p>",
        "id": 266918940,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1641378533
    },
    {
        "content": "<p>I'm trying to implement a function which generates a range from a bounded Nat (BNat)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">BNat.range</span> <span class=\"o\">{</span><span class=\"n\">min</span> <span class=\"n\">max</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"bp\">$</span> <span class=\"n\">BNat</span> <span class=\"n\">min</span> <span class=\"n\">max</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"kd\">@[specialize]</span> <span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">BNat</span> <span class=\"n\">min</span> <span class=\"n\">max</span> <span class=\"n\">h'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"bp\">$</span> <span class=\"n\">BNat</span> <span class=\"n\">min</span> <span class=\"n\">max</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"k\">then</span>\n      <span class=\"n\">List.cons</span> <span class=\"n\">n</span> <span class=\"bp\">$</span> <span class=\"n\">it</span>\n        <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n.val</span>\n        <span class=\"o\">,</span> <span class=\"n\">isLe</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">,</span> <span class=\"n\">isGe</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n          <span class=\"n\">apply</span> <span class=\"n\">ge_is_le</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n          <span class=\"n\">apply</span> <span class=\"n\">n.isGe</span>\n        <span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">[</span><span class=\"n\">BNat.mk</span> <span class=\"n\">n.val</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">n.isLe</span><span class=\"o\">)</span> <span class=\"n\">n.isGe</span><span class=\"o\">]</span>\n  <span class=\"o\">)</span>\n  <span class=\"n\">it</span> <span class=\"o\">(</span><span class=\"n\">BNat.mk</span> <span class=\"n\">min</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ge_refl</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.snd.snd.snd.val</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I prove that the function will eventually reach <code>n.val = max</code> and terminate?</p>",
        "id": 266933320,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641388205
    },
    {
        "content": "<p>It looks like you'll want to use <code>max - n.val</code> as the measure, as yours is not decreasing.</p>",
        "id": 266936204,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641389991
    },
    {
        "content": "<p>Note that the built-in <code>Range</code> simply uses structural recursion at the cost of an additional parameter, though all this has been written before <code>termination_by</code> existed. <a href=\"https://github.com/leanprover/lean4/blob/64971a1e3cbf00e89e394beb24c6ce9331d85a19/src/Init/Data/Range.lean#L20\">https://github.com/leanprover/lean4/blob/64971a1e3cbf00e89e394beb24c6ce9331d85a19/src/Init/Data/Range.lean#L20</a></p>",
        "id": 266936427,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641390112
    },
    {
        "content": "<p>How does Range.forIn show termination? Or does this not apply to monads?</p>",
        "id": 266936948,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641390418
    },
    {
        "content": "<p>And btw how do I solve this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">a</span>\n<span class=\"n\">h</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Board</span> <span class=\"n\">h</span> <span class=\"n\">w</span> <span class=\"n\">ax</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Why can't I just apply ax somehow and call it a day?</p>",
        "id": 266950882,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641397349
    },
    {
        "content": "<p>Because you will also need the lemma that if a&gt;=1 and b&gt;=1 then a*b&gt;=1 and Lean has to be told that somehow, either explicitly by you or via some tactic which knows this trick.</p>",
        "id": 266951253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641397553
    },
    {
        "content": "<p>By the way, <code>≥</code> is considered evil in mathlib, we only use &lt;= (otherwise we would have to state every lemma about inequalities at least twice)</p>",
        "id": 266951389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641397615
    },
    {
        "content": "<p>I don't think we have a tactic that powerful in Lean 4 yet. You will need to tell Lean the baby steps to get there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_ge_one_of_ge_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This should help you</p>",
        "id": 266951448,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641397656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/termination_by/near/266951389\">said</a>:</p>\n<blockquote>\n<p>By the way, <code>≥</code> is considered evil in mathlib, we only use &lt;= (otherwise we would have to state every lemma about inequalities at least twice)</p>\n</blockquote>\n<p>This is fortunately no longer the case in Lean 4, all the technical issues with <code>≥</code> have been resolved afaict.</p>",
        "id": 266951559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641397705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/termination_by/near/266951448\">said</a>:</p>\n<blockquote>\n<p>I don't think we have a tactic that powerful in Lean 4 yet. You will need to tell Lean the baby steps to get there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_ge_one_of_ge_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This should help you</p>\n</blockquote>\n<p>Then in tactic mode you would do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ge_one_of_ge_one</span> <span class=\"n\">ax.1</span> <span class=\"n\">ax.1</span>\n<span class=\"k\">have</span> <span class=\"n\">ww</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ge_one_of_ge_one</span> <span class=\"n\">ax.2</span> <span class=\"n\">ax.2</span>\n<span class=\"n\">exact</span> <span class=\"n\">mul_ge_one_of_ge_one</span> <span class=\"n\">hh</span> <span class=\"n\">ww</span>\n</code></pre></div>\n<p>Now the challenge is proving <code>mul_ge_one_of_ge_one</code></p>",
        "id": 266953192,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641398441
    },
    {
        "content": "<p>Also how do I use DecidableEq and the decide tactic properly? I keep getting errors that it contains meta variables.</p>",
        "id": 266965511,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641404253
    },
    {
        "content": "<p>Is there any proof of mul_ge_one_of_ge_on in mathlib?</p>",
        "id": 266967062,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641405024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/termination_by/near/266967062\">said</a>:</p>\n<blockquote>\n<p>Is there any proof of mul_ge_one_of_ge_on in mathlib?</p>\n</blockquote>\n<p><code>library_search</code> said <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_le_mul\">docs#one_le_mul</a></p>",
        "id": 266967799,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641405409
    }
]