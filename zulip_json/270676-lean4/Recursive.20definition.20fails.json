[
    {
        "content": "<p>Why does the first definition of <code>trans</code> below fail, but the second succeed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TransClosure</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"kd\">extends</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_left</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trans'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"kd\">extends</span> <span class=\"n\">h₁</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">trans_left</span> <span class=\"n\">h₁</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans_left</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">trans_left</span> <span class=\"n\">h₁</span> <span class=\"bp\">∘</span> <span class=\"n\">trans'</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">TransClosure</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">case</span> <span class=\"bp\">«</span><span class=\"kd\">extends</span><span class=\"bp\">»</span> <span class=\"n\">h₁</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">trans_left</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_left</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">trans_left</span> <span class=\"n\">h₁</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span><span class=\"bp\">ᵢ</span>\n</code></pre></div>\n<p>(<code>#eval Lean.versionString</code>: 4.0.0-nightly-2022-09-29, in case this is a bug.)</p>",
        "id": 301780366,
        "sender_full_name": "Raghuram",
        "timestamp": 1664610050
    },
    {
        "content": "<p>Created an issue for it: <a href=\"https://github.com/leanprover/lean4/issues/1672\">https://github.com/leanprover/lean4/issues/1672</a></p>",
        "id": 301831293,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664635592
    },
    {
        "content": "<p>feel free to track the progress on github for more in-depth discussions.</p>",
        "id": 301939838,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1664719772
    }
]