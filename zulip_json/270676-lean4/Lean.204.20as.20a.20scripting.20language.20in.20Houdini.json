[
    {
        "content": "<p>I got really into FFI :) This time I have managed to use Lean 4 as a <a href=\"https://github.com/lecopivo/HouLean\">scripting language in Houdini</a>, a software similar to Blender. </p>\n<p>Getting this to work required lots of head scratching and wall banging. I would like to share my experience for anyone who might attempt anything similar.</p>\n<p><a href=\"/user_uploads/3121/hQseZiF4fHzYYyUVpD4gLS0F/preview.png\">preview.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hQseZiF4fHzYYyUVpD4gLS0F/preview.png\" title=\"preview.png\"><img src=\"/user_uploads/3121/hQseZiF4fHzYYyUVpD4gLS0F/preview.png\"></a></div><hr>\n<p>Getting Lean as a scripting language in another application(e.g. Houdini) requires creating two dynamic libraries:</p>\n<ol>\n<li>A plugin for the application, in my case <code>libHouLeanCore.so</code>, that gets loaded at the start up and is responsible for loading/unloading Lean and executing Lean code snippets.</li>\n<li>A library for the Lean code snippet, in my case <code>Main.so</code> that has to define a function: <code>def run : Sop Unit := ...</code><br>\nWhere <code>Sop</code> is a monad holding application's context information. If the Lean code is supposed to do anything useful it has to somehow interact with the application. Using monads is likely the best way to do it. For Houdini, <code>Sop</code> stands for \"Shape OPeration\" and it holds a reference to one mutable geometry and multiple references to immutable geometries.</li>\n</ol>\n<p>Let's go over those two components in more detail.</p>\n<hr>\n<p>Application Plugin - <code>libHouLeanCore.so</code></p>\n<ul>\n<li>The job of the application plugin can be summarized as follows:<p>1. Manually load library <code>libleanshared.so</code> from which you need to load function <code>lean_initialize_runtime_module</code> and maybe more if needed.<br>\n     Make sure that you load the library with <code>RTLD_GLOBAL</code>, i.e. <code>dlopen(leanshared_path.c_str(), RTLD_GLOBAL | RTLD_NOW)</code>. As you need your Lean snippet library to see those symbols.</p>\n<p>2. Manually load library <code>Main.so</code> and load functions <code>initialize_Main</code>, <code>l_run</code> and <code>mk_sop_context</code>. The names may vary, <code>initialize_Main</code> depends on your lean file name and <code>l_run</code> is the C function name corresponding to <code>run : Sop Unit</code>. About <code>mk_sop_context</code> later.<br>\n  3. Initialize lean state. I have figured out this by trial and error so like you need to do more. But it seems to be enough to call:<br>\n<code>lean_initialize_runtime_module</code> and <code>initialize_Main</code></p>\n<p>4. Before calling <code>run : Sop Unit</code> we need to create the Sop context. The <code>Sop</code> monad is defined as</p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">SopContext.nonempty</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType</span>\n<span class=\"kd\">def</span> <span class=\"n\">SopContext</span> <span class=\"o\">:=</span> <span class=\"n\">SopContext.nonempty.type</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">SopContext</span> <span class=\"o\">:=</span> <span class=\"n\">SopContext.nonempty.property</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">SopError</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">missingValue</span>\n<span class=\"bp\">|</span> <span class=\"n\">user_error</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Sop</span> <span class=\"o\">:=</span> <span class=\"n\">EStateM</span> <span class=\"n\">SopError</span> <span class=\"n\">SopContext</span>\n</code></pre></div>\n<p>where <code>SopContext</code> is an opaque type that holds a c++ class using <code>lean_external_object</code>. The trouble is that to create lean external object you need some functions from <code>libleanshared.so</code> and those need to be loaded manually. To reduce the headache, I have created a function <code>mk_sop_context</code> in the library <code>Main.so</code>  that accepts a pointer to the c++ context class and returns a pointer <code>lean_external_object</code>.</p>\n<ol start=\"5\">\n<li>Call <code>run : Sop Unit</code>, together with creating the context:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">auto</span> <span class=\"n\">sopContext</span> <span class=\"bp\">=</span> <span class=\"n\">new</span> <span class=\"n\">SopContext</span><span class=\"bp\">;</span>\n<span class=\"n\">sopContext</span><span class=\"bp\">-&gt;</span><span class=\"n\">time</span> <span class=\"bp\">=</span> <span class=\"n\">time</span><span class=\"bp\">;</span>\n<span class=\"n\">sopContext</span><span class=\"bp\">-&gt;</span><span class=\"n\">geo</span> <span class=\"bp\">=</span> <span class=\"n\">geo</span><span class=\"bp\">;</span>\n\n<span class=\"n\">l_run</span><span class=\"o\">(</span><span class=\"n\">mk_sop_context</span><span class=\"o\">((</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"n\">sopContext</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n</code></pre></div>\n<ol start=\"6\">\n<li>Before loading new version of <code>Main.so</code> you have to unload <code>Main.so</code> <strong>and</strong> <code>libleanshared.so</code></li>\n</ol>\n<p>To summarize, the biggest headache and the biggest catch is: the application plugin must <strong>not</strong> link against <code>libleanshared.so</code>. When you are reloading the Lean snippet library <code>Main.so</code> you <strong>have to</strong> unload <code>libleanshared.so</code> otherwise you get a crash. Therefore any function from <code>libleanshared.so</code> that you want to use in the plugin has to be loaded manually.</p>\n<hr>\n<p>Lean Snippet Library - <code>Main.so</code></p>\n<ul>\n<li>The hardest bit in creating <code>Main.so</code> is to make sure that it has all the symbols it needs. It definitely needs symbols from <code>libleanshared.so</code> but the application plugin is responsible for making sure those are available.</li>\n</ul>\n<p>For all other symbols, I took the easy way out and I link everything else statically. There are two main static libraries you want to create</p>\n<ol>\n<li><code>libHouLeanCApi.a</code> - This library contains C interface to Houdini. A simple example of a function:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">houlean_time</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">context</span><span class=\"o\">){</span>\n  <span class=\"n\">auto</span> <span class=\"n\">ctx</span> <span class=\"bp\">=</span> <span class=\"n\">houlean_lean_to_external</span><span class=\"bp\">&lt;</span><span class=\"n\">SopContext</span><span class=\"bp\">&gt;</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"n\">houlean_sop_mk_float</span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"bp\">-&gt;</span><span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Which is defined on Lean level as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"houlean_time\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">Sop</span> <span class=\"n\">Float</span>\n</code></pre></div>\n<ol start=\"2\">\n<li><code>libHouLean.a</code> - This library is created base on lean code and is generated with <code>lake build HouLean:staticLib</code>.<br>\nFor example the above function used <code>houlean_sop_mk_float</code> that turns <code>Float</code> into <code>Sop Float</code>. You want Lean to generate such a function automatically, do this with:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export houlean_sop_mk_float]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Sop.capi.float</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sop</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The disadvantage of using static libraries is that for example linking against matlib4 the <code>Main.so</code> blows up by 6MB. </p>\n<p>For completeness and reference, here are the exact commands I use for turning <code>Main.lean</code> to <code>Main.so</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_PATH</span><span class=\"bp\">=~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">HouLean</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span> <span class=\"n\">lean</span> <span class=\"n\">Main.lean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"n\">Main.c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">Main.olean</span>\n<span class=\"n\">LEAN_PATH</span><span class=\"bp\">=~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">HouLean</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">leanc</span> <span class=\"n\">Main.c</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">Main.o</span>\n<span class=\"n\">leanc</span> <span class=\"n\">Main.o</span> <span class=\"bp\">-</span><span class=\"n\">shared</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">Main.so</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">HouLean</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libHouLean.a</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">HouLean</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">cpp</span><span class=\"bp\">/</span><span class=\"n\">libHouLeanCApi.a</span>\n</code></pre></div>\n<p>Notice that <code>LEAN_PATH</code> is not set for the last command, I was experiencing crashes when I did provide <code>LEAN_PATH=~/Documents/HouLean/build/lib</code>.</p>\n<hr>\n<p>Disclaimer: I'm a Houdini developer. If I was more familiar with Blender I would do it for Blender to make it more accessible. But Houdini has free non-commercial license, so you can play around with it anyway.</p>",
        "id": 280388248,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651082527
    },
    {
        "content": "<p>And of course the point of this exercise if to be able make cool visualizations of simulations made with SciLean <br>\n<a href=\"/user_uploads/3121/lcCSBEdXgxvn63Br7NdEm3Uu/ezgif-5-b6a39d6547.gif\">ezgif-5-b6a39d6547.gif</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lcCSBEdXgxvn63Br7NdEm3Uu/ezgif-5-b6a39d6547.gif\" title=\"ezgif-5-b6a39d6547.gif\"><img src=\"/user_uploads/3121/lcCSBEdXgxvn63Br7NdEm3Uu/ezgif-5-b6a39d6547.gif\"></a></div><p>The whole code implementing this mass spring system is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NonZero</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">p</span><span class=\"bp\">∥²</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥∥</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">∥²</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">∥²</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">solver</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Impl</span> <span class=\"o\">(</span><span class=\"n\">ode_solve</span> <span class=\"o\">(</span><span class=\"n\">HamiltonianSystem</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">-- Unfold Hamiltonian definition and compute gradients</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">HamiltonianSystem</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"n\">autograd</span>\n\n  <span class=\"c1\">-- Apply RK4 method</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ode_solve_fixed_dt</span> <span class=\"n\">runge_kutta4_step</span><span class=\"o\">]</span>\n  <span class=\"n\">lift_limit</span> <span class=\"n\">steps</span> <span class=\"s2\">\"Number of ODE solver steps.\"</span><span class=\"bp\">;</span> <span class=\"gr\">admit</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n  <span class=\"n\">finish_impl</span>\n</code></pre></div>",
        "id": 280411888,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651094089
    },
    {
        "content": "<p>This is fun to play with <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> same system different setup <a href=\"/user_uploads/3121/Uj5B08egaqZPI8PgE_kBAU8P/ezgif-5-dcc0edfbdf.gif\">ezgif-5-dcc0edfbdf.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Uj5B08egaqZPI8PgE_kBAU8P/ezgif-5-dcc0edfbdf.gif\" title=\"ezgif-5-dcc0edfbdf.gif\"><img src=\"/user_uploads/3121/Uj5B08egaqZPI8PgE_kBAU8P/ezgif-5-dcc0edfbdf.gif\"></a></div>",
        "id": 280416451,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651096596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm assuming that your sphere eversion proof can't be turned into a concrete construction like this!</p>",
        "id": 280416685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651096743
    },
    {
        "content": "<p>I have no clue but I doubt that the proof would be constructive to this level btw. few years back there was a paper presenting an algorithm that can turn bunny(or sphere) inside out <a href=\"https://youtu.be/FIVqa794w3U?t=162\">https://youtu.be/FIVqa794w3U?t=162</a> . And the paper's implementation is in Houdini, see <a href=\"https://cseweb.ucsd.edu/~alchern/projects/ShapeFromMetric/\">project page</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"FIVqa794w3U\" href=\"https://youtu.be/FIVqa794w3U?t=162\"><img src=\"https://uploads.zulipusercontent.net/c4ec305b15772ab8bc399b4cd87f800944354400/68747470733a2f2f692e7974696d672e636f6d2f76692f46495671613739347733552f64656661756c742e6a7067\"></a></div>",
        "id": 280417061,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651096925
    },
    {
        "content": "<p>A technical question:  If I have a Lean snippets library <code>Main.so</code> and its function <code>run : Sop Unit</code>. Can the main application execute multiple <code>run : Sop Unit</code> functions in parallel? I guess the questions is, are there any global objects that can be mutated by running <code>run : Sop Unit</code>? If I remember correctly, object's reference counter is set to -1 if it is shared across multiple threads. Since the main application would be doing the parallelism, those reference counters would not be correctly set to -1.</p>\n<p>My expectation is that the main application can not execute multiple <code>run : Sop Unit</code> in parallel. Any ideas how do it? Maybe wrap <code>run</code> inside of another function that would wrap <code>run</code> inside of <code>IO.Process</code>?</p>\n<p>This is a super technical question and probably very few people are familiar with lean internals like this, so maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  knows the answer?</p>",
        "id": 280474866,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651143205
    },
    {
        "content": "<p>Global objects are always threadsafe. If <code>Sop</code> carries any (\"local\") objects, you need to make sure to first call <code>lean_mark_mt</code> on them.</p>",
        "id": 280475213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651143406
    },
    {
        "content": "<p>Right now, <code>Sop</code> contains only a c++ struct wrapped into <code>lean_external_object</code> and each execution of <code>run</code> gets its own unique version.</p>\n<p>Different scenario, if I have two snippet libraries <code>Main1.so</code> and <code>Main2.so</code> then I should be able to safely execute their <code>run</code> function independently without any kind of synchronization, right?</p>",
        "id": 280475856,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651143726
    },
    {
        "content": "<p>I guess my worry is that they share some variables from <code>libleanshared.so</code> but as you said those should be thread-safe.</p>",
        "id": 280476004,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651143806
    },
    {
        "content": "<p>Yes, it shouldn't matter if the functions are from the same shared object or not</p>",
        "id": 280476163,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651143878
    },
    {
        "content": "<p>Kevin, the techniques we use in the sphere eversion project can definitely be turned into a fully effective proof. Convex integration is used to draw all pictures from <a href=\"http://hevea-project.fr/ENIndexHevea.html\">http://hevea-project.fr/ENIndexHevea.html</a>. However we prove such a general theorem that part of the proof isn't fully constructive. Still, we could specialize the proof and make it constructive.</p>",
        "id": 280676637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1651259701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Interesting! If at some point you have something computable I'm happy to make it look pretty <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (assuming it is in Lean 4 ... I have no clue how the porting from Lean 3 is going along)</p>",
        "id": 280695024,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651269869
    },
    {
        "content": "<p>My understanding is that a fully computable version was considered \"too trivial\" / uninteresting and was rejected early on. Surely it is possible to just compute a concrete, say, piecewise linear eversion of an icosahedron or perhaps an even smaller triangulated mesh, and prove that no edges are inverted in the process. I would be interested to know how few vertices you can get away with here</p>",
        "id": 280717675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651295988
    },
    {
        "content": "<p>It's not uninteresting, it's something different that wouldn't achieve the goal of proving that you can formalize abstract differential topology. And what I called a constructive version wasn't a PL version it would be a smooth version involving elementary functions like trigonometric functions and integrals that may not have a nice expression. Then plotting the result would involve numerical analysis and meshing as a post-processing step.</p>",
        "id": 280721773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1651302706
    },
    {
        "content": "<p>Some more fun with Hamiltonian systems:<br>\n<a href=\"https://www.youtube.com/watch?v=qcE9hFPgYkg&amp;ab_channel=Lecopivo\">https://www.youtube.com/watch?v=qcE9hFPgYkg&amp;ab_channel=Lecopivo</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"qcE9hFPgYkg\" href=\"https://www.youtube.com/watch?v=qcE9hFPgYkg&amp;ab_channel=Lecopivo\"><img src=\"https://uploads.zulipusercontent.net/a7ca92f722e7a92457223fc4697ac74815cc19bc/68747470733a2f2f692e7974696d672e636f6d2f76692f7163453968465067596b672f64656661756c742e6a7067\"></a></div><p>Macros in Lean are really cool, I can now annotate function arguments and automatically generate functions derivatives and proofs of smoothness. The Hamiltonian definition for the above system is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">LennardJones</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">minEnergy</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">radius</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">radius</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">∥^</span><span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">}</span>\n  <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">minEnergy</span> <span class=\"bp\">*</span> <span class=\"n\">x'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"n\">isSmooth</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span> <span class=\"n\">adjDiff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Coloumb</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">strength</span> <span class=\"n\">mass</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"n\">strength</span> <span class=\"bp\">*</span> <span class=\"n\">mass</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥^</span><span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">ε</span><span class=\"o\">}</span>\n<span class=\"n\">argument</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"n\">isSmooth</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span> <span class=\"n\">adjDiff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">LJ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">∥²</span><span class=\"o\">)</span>\n  <span class=\"bp\">+</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>   <span class=\"n\">Coloumb</span> <span class=\"n\">ε</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n         <span class=\"bp\">+</span> <span class=\"n\">LennardJones</span> <span class=\"n\">ε</span> <span class=\"n\">LJ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n<span class=\"n\">argument</span> <span class=\"n\">p</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"n\">isSmooth</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span> <span class=\"n\">adjDiff</span>\n<span class=\"n\">argument</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"n\">isSmooth</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span>\n  <span class=\"n\">adjDiff</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">hold</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_into_lambda</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_of_add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The annotation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">argument</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"n\">isSmooth</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">hasAdjDiff</span><span class=\"o\">,</span>\n  <span class=\"n\">adjDiff</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">hold</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_into_lambda</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_of_add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>says under assumption that <code>n≠0</code> and <code>ε≠0</code> do:</p>\n<ul>\n<li><code>isSmooth</code> - prove that function is smooth in <code>x</code></li>\n<li><code>diff</code>- generate a new function that is differential of <code>H</code> w.r.t. <code>x</code> and generate new <code>simp</code> theorem</li>\n<li><code>hasAdjDiff</code> - prove that the differential has adjoint</li>\n<li><code>adjDif by ...</code> - auto differentiation + some custom transformation to fuse sums together to produce more efficient code</li>\n</ul>\n<p>I should play with elaborator that adds these annotations automatically but only if they succeed. However, I'm not sure how to deal with the additional assumptions <code>n≠0</code> and <code>ε≠0</code>.</p>",
        "id": 282413292,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652626955
    },
    {
        "content": "<p>this is epic</p>",
        "id": 292148014,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659703298
    }
]