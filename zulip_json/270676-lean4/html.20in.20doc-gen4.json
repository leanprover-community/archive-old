[
    {
        "content": "<p>I'll take a look into that as soon as I get there then!</p>\n<p>A final question, regarding HTML templating, would it be more reasonable to implement some HTML like DSL in Lean itself and write with that or to implement a custom parser for something like Jinja2 etc. and use external templates? Does it even matter?</p>",
        "id": 263893752,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638815049
    },
    {
        "content": "<p>I would make a DSL in Lean.</p>",
        "id": 263893954,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638815122
    },
    {
        "content": "<p>One of the most annoying things (imho) in jinja2 is that it doesn't check well-formedness of the HTML.  That is you can write <code>&lt;div&gt;&lt;p&gt;{% include \"child.j2\" %}&lt;/p&gt;</code> and you'll only notice that something is wrong once you look at the page in the browser.  This kind of error would immediately become impossible in Lean.</p>",
        "id": 263894248,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638815223
    },
    {
        "content": "<p>I assume JSX/TSX would be a better source of inspiration, though I've never used them</p>",
        "id": 263896259,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638815915
    },
    {
        "content": "<p>You can also look at the webserver demo: <a href=\"https://github.com/leanprover/lean4/blob/7b6732a137a436a64e00f9d319e2a345b517be2d/tests/playground/webserver/Webserver.lean#L172-L174\">https://github.com/leanprover/lean4/blob/7b6732a137a436a64e00f9d319e2a345b517be2d/tests/playground/webserver/Webserver.lean#L172-L174</a></p>",
        "id": 263896612,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638816078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263896259\">said</a>:</p>\n<blockquote>\n<p>I assume JSX/TSX would be a better source of inspiration, though I've never used them</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, note that <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> already wrote a JSX like DSL for Lean 4 in PR <a href=\"https://github.com/leanprover/lean4/pull/723\">#723</a> so you could probably just adapt that.</p>",
        "id": 263896693,
        "sender_full_name": "Mac",
        "timestamp": 1638816121
    },
    {
        "content": "<p>Jinja2 is really great. JSX looks a lot less attractive, but comparing the two is probably meaningless anyway, they have different purposes.</p>",
        "id": 263899272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638817217
    },
    {
        "content": "<p>Interesting how opinions can differ.  What do you like about jinja2 compared to jsx?</p>",
        "id": 263900832,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638817929
    },
    {
        "content": "<p>It's really straightforward to understand and use, and nice to write.</p>",
        "id": 263900902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638817974
    },
    {
        "content": "<p>Note that we use jinja2 a <em>lot</em> on our community website.</p>",
        "id": 263900977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638818013
    },
    {
        "content": "<p>I think that's only a question of experience.  If you have used more jsx then jsx will feel more straightforward.  (As a bonus there's no if-then-else or for or include or filter syntax to learn in jsx, it's literally the same syntax as javascript.  In the Lean DSL, it's literally Lean expressions.)</p>",
        "id": 263901197,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638818108
    },
    {
        "content": "<p>(Did I mention that you have type-checking in your templates?  You'll never forget to declare a filter again.)</p>",
        "id": 263901359,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638818173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263830096\">said</a>:</p>\n<blockquote>\n<p>The delaborator attaches synthetic positions to the generated <code>Syntax</code> objects that can be used to retrieve the original <code>Expr</code>, which you could e.g. check for being an <code>Expr.const</code>, or an application thereof (<code>Expr.getAppFn</code>) if you also want to e.g. link <code>+</code> to <code>Add.add</code>. The function for looking up the subterm given the position should be <a href=\"https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Lean/Widget/InteractiveCode.lean#L39\">https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Lean/Widget/InteractiveCode.lean#L39</a>, though apparently it is currently unused (because a TypeScript version is used instead in the client?).</p>\n</blockquote>\n<p>The association between Syntax elements and their source Exprs is currently unused because it is subsumed by the <code>InfoTree</code> output. Basically the delaborator will give you back a Syntax together with an RBMap from positions within this syntax to <code>Elab.Info</code> objects, as in <a href=\"https://github.com/leanprover/lean4/blob/7b6732a137a436a64e00f9d319e2a345b517be2d/src/Lean/Widget/InteractiveCode.lean#L82\">here</a>. You can then query this RBMap and in your example at the ℕ syntax tree it will contain something like (iirc) <code>Elab.Info.ofTermInfo</code> with an <code>expr</code> whose value is <code>Nat : Type</code>.</p>",
        "id": 263923826,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1638824413
    },
    {
        "content": "<blockquote>\n<p>The delaborator attaches synthetic positions to the generated <code>Syntax</code> objects <em>that can be used to retrieve the original <code>Expr</code></em>, [...] The function for looking up the subterm given the position should be [<code>Lean.Widget.traverse</code>] apparently it is currently unused [...]</p>\n</blockquote>\n<p>I forgot to comment on this remark, but I have to warn you that it is only half-true.  Such a function could work for direct subterms (for example <code>a + 0</code> as a subterm of <code>42 * (a+0)</code>), but the pretty-printer also produces syntax which does not directly correspond to subterms.  These have a dedicated position called <code>nextExtraPos</code>.</p>\n<p>And this is not just a theoretical possibility: core Lean already makes use of this feature.  Namely when pretty-printing structure instances: the expression <code>A.mk 42</code> is printed as <code>{ a := 42 }</code>.  The field name <code>a</code> is not a subterm of the original expression, but it has information attached.  Users can also add their own delaborators which may even have whole expressions and not just identifiers on these non-existing positions.</p>\n<p>As Wojciech said, please just use the <code>InfoTree</code> output instead.  The current <code>Lean.Widget.traverse</code> implementation also silently returns the wrong(?) result for these non-existing positions, so avoid it.</p>",
        "id": 264131942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638956445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263896693\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263896259\">said</a>:</p>\n<blockquote>\n<p>I assume JSX/TSX would be a better source of inspiration, though I've never used them</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>, note that <span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> already wrote a JSX like DSL for Lean 4 in PR <a href=\"https://github.com/leanprover/lean4/pull/723\">#723</a> so you could probably just adapt that.</p>\n</blockquote>\n<p>Its making progress with Lean/JSX: <br>\n<a href=\"/user_uploads/3121/0y8n_1kNSna4RNxmfypwy9mS/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0y8n_1kNSna4RNxmfypwy9mS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0y8n_1kNSna4RNxmfypwy9mS/image.png\"></a></div><p>Also working with that DSL was an absolute joy, basically everything I wanted just worked <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> \\o/</p>",
        "id": 264766729,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639427928
    },
    {
        "content": "<p>I also hope its fine I'm basically copy pasting the css and js files from doc-gen? They are both under apache2 after all...</p>",
        "id": 264766838,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639427989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> You <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4/near/264464665\">recently said</a> that we wouldn't need to rely on something like Read the Docs. Do you have other ideas to make the task of hosting documentation easy and accessible?</p>",
        "id": 264772409,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639430898
    },
    {
        "content": "<p>Right now its just a static webpage so you could even put it on github pages if you wanted to.</p>",
        "id": 264772518,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639430967
    },
    {
        "content": "<p>But then you'd need a <code>...github.io</code> repository for every project?<br>\nOr push <code>doc</code> folders to a centralized <code>.github.io</code> repository and separate by path (like <code>arthurpaulino.github.io/proj1</code>, <code>arthurpaulino.github.io/proj2</code>, ...)</p>",
        "id": 264772683,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639431043
    },
    {
        "content": "<p>That's at least how mathlib is doing it right now. <a href=\"https://github.com/leanprover-community/mathlib_docs\">https://github.com/leanprover-community/mathlib_docs</a>. I would imagine that if lean actually takes off to the point where a lot of people are interested in the rendered and searchable documentation of libraries (right now I can only think of mathlib4 and the lean compiler itself + maybe this stdlib++ thing we have been talking about) a service like <a href=\"https://docs.rs\">https://docs.rs</a> would eventually emerge.</p>",
        "id": 264773391,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639431466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263923826\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/263830096\">said</a>:</p>\n<blockquote>\n<p>The delaborator attaches synthetic positions to the generated <code>Syntax</code> objects that can be used to retrieve the original <code>Expr</code>, which you could e.g. check for being an <code>Expr.const</code>, or an application thereof (<code>Expr.getAppFn</code>) if you also want to e.g. link <code>+</code> to <code>Add.add</code>. The function for looking up the subterm given the position should be <a href=\"https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Lean/Widget/InteractiveCode.lean#L39\">https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Lean/Widget/InteractiveCode.lean#L39</a>, though apparently it is currently unused (because a TypeScript version is used instead in the client?).</p>\n</blockquote>\n<p>The association between Syntax elements and their source Exprs is currently unused because it is subsumed by the <code>InfoTree</code> output. Basically the delaborator will give you back a Syntax together with an RBMap from positions within this syntax to <code>Elab.Info</code> objects, as in <a href=\"https://github.com/leanprover/lean4/blob/7b6732a137a436a64e00f9d319e2a345b517be2d/src/Lean/Widget/InteractiveCode.lean#L82\">here</a>. You can then query this RBMap and in your example at the ℕ syntax tree it will contain something like (iirc) <code>Elab.Info.ofTermInfo</code> with an <code>expr</code> whose value is <code>Nat : Type</code>.</p>\n</blockquote>\n<p>I saw that in the Widget module you use this <code>TaggedText</code> type with <code>CodeTokens</code> so I decided to take a look at that as well but I'm facing a slight isuee, for a type such as: <code>IO ℕ</code> it produces (the info's themselves are replaced with 1s so i can actually pretty print it):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Widget.TaggedText.tag</span>\n  <span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Widget.TaggedText.append</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Widget.TaggedText.text</span> <span class=\"s2\">\"IO \"</span><span class=\"o\">,</span> <span class=\"n\">Lean.Widget.TaggedText.tag</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Lean.Widget.TaggedText.text</span> <span class=\"s2\">\"ℕ\"</span><span class=\"o\">)])</span>\n</code></pre></div>\n<p>so with these tagged things it seems like the information about what <code>IO</code> itself actually is is attached to the entire application of <code>IO</code> (and indeed the <code>Expr</code> associated with this group is an application so that's perfectly fine) but for my purposes it would of course be better if the information about the type <code>IO</code> was attached there as well and not just represented as a <code>TaggedText.text</code> so I tried to take another step back and look at the output of format but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Std.Format.group</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.Format.group</span>\n    <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span>\n      <span class=\"mi\">2</span>\n      <span class=\"o\">(</span><span class=\"n\">Std.Format.tag</span>\n        <span class=\"mi\">1</span>\n        <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n          <span class=\"o\">(</span><span class=\"n\">Std.Format.group</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"IO\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.FlattenBehavior.fill</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n            <span class=\"o\">(</span><span class=\"n\">Std.Format.line</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">Std.Format.group</span>\n              <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.tag</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"ℕ\"</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"n\">Std.Format.FlattenBehavior.fill</span><span class=\"o\">))))))</span>\n    <span class=\"o\">(</span><span class=\"n\">Std.Format.FlattenBehavior.fill</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.Format.FlattenBehavior.fill</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Format already associates this tag info with the entire application instead of just the single type as well...so now I'm kind of lost which datastructure I want to operate on to actually get information I want? Shall I operate on the raw <code>Syntax</code> output for this? I'm just asking so I don't go down a rabbit hole just to learn that it was pointless all the time.</p>",
        "id": 265442814,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639860738
    },
    {
        "content": "<p>Or maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has an idea about this?</p>",
        "id": 265535298,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639990080
    },
    {
        "content": "<p>From what I can tell the delaborator doesn't add any information to syntax trees produced for constants yet.</p>",
        "id": 265536168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639990645
    },
    {
        "content": "<p>That's because this feature has so far only been used for the interactive widgets, where we want information for the whole application and not the head symbol.</p>",
        "id": 265536259,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639990686
    },
    {
        "content": "<p>What I think should happen:</p>\n<ol>\n<li>Call annotateCurPos&amp;addTermInfo from delabConst.</li>\n<li>Ignore those extra infos in tagExprInfos.</li>\n</ol>",
        "id": 265536538,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639990842
    },
    {
        "content": "<p>Ah so getting this to work properly does actually require some changes in the compiler?</p>",
        "id": 265536892,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639991080
    },
    {
        "content": "<p>AFAICT yes, this requires some changes in lean.</p>",
        "id": 265537060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639991214
    },
    {
        "content": "<p>Do you think this is a change someone (such as me :p) should contribute or should I just open an issue about it?</p>",
        "id": 265537130,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639991276
    },
    {
        "content": "<p>I've outlined the change above, I'd guess it's about ten lines of code or so and should be straightforward. ^^</p>",
        "id": 265537494,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639991534
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Do you also think this is the way to go here?</p>",
        "id": 265537545,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639991564
    },
    {
        "content": "<p>Anything that makes the delaborator match the elaborator more closely sounds reasonable to me</p>",
        "id": 265537606,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639991615
    },
    {
        "content": "<p>I'm very happy to see work on doc-gen4 but I always wonder. How does this interact with the work on <a href=\"https://github.com/insightmind/LeanInk/\">LeanInk</a>? It seems to me there should be at least some overlap. Is there any coordination here?</p>",
        "id": 265543278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639995147
    },
    {
        "content": "<p>There isn't any coordination right now no. If I understood the purpose of Leanink/Alectryon correctly it's a tool, mostly meant for interactively exploring the state of a tactic proof at different steps throughout the proof right? The program itself mainly focuses on obtaining these states from the Lean compiler and handing them over to Alectryon via an export format. So it's basically a tool for taking a look at the internals of a proof.</p>\n<p>Meanwhile the focus of doc-gen4 is to provide more of an external view on a Lean module, ala \"what do I get if I import module XYZ\" and also navigating between modules. I would imagine that both could indeed be combined by e.g. linking from doc-gen4 theorem's to the ink view and maybe from the types etc. used in Alectryon back to doc-gen4? But that sounds like something that would be done when both tools are at least sort of mature themselves.</p>\n<p>What does <span class=\"user-mention\" data-user-id=\"451040\">@Niklas Bülow</span> think about our overlap? And how/if the tools should integrate into each other?</p>",
        "id": 265544121,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639995702
    },
    {
        "content": "<p>Exactly, I think both should be combined. It's annoying in the current Lean 3 doc-gen that you can't easily see proofs, and it's even worse you can't see the body of a definition.</p>",
        "id": 265546483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639997082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/265546483\">said</a>:</p>\n<blockquote>\n<p>can't easily see proofs</p>\n</blockquote>\n<p>For <code>see</code> I am thinking that the proof would be static text inline with the document.</p>\n<p>Are you and/or meaning <code>link to</code> in that one can click on a link if the document is open in a viewer such as an internet browser or PDF reader?</p>",
        "id": 265546828,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639997312
    },
    {
        "content": "<p>I'm sorry, I don't understand the question. By seeing proofs, I mean getting at least as much information on a proof as you can get from within VSCode.</p>",
        "id": 265547349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639997641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/265547349\">said</a>:</p>\n<blockquote>\n<p>By seeing proofs, I mean getting at least as much information on a proof as you can get from within VSCode.</p>\n</blockquote>\n<p>That clarifies it enough that I understand what you mean. Thanks.</p>",
        "id": 265550062,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639999233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/265546483\">said</a>:</p>\n<blockquote>\n<p>Exactly, I think both should be combined. It's annoying in the current Lean 3 doc-gen that you can't easily see proofs, and it's even worse you can't see the body of a definition.</p>\n</blockquote>\n<p>I think making use of LeanInk and Alectryon for doc-gen4 would benefit the generated docs a lot. LeanInk itself just extracts the necessary data from the lean compiler so Alectryon can then generate a website that allows exploring the lean code interactively. doc-gen could use this to embed explorable code snippets of a given proof into the documentation.</p>\n<p>LeanInk currently only extracts the tactic info and displays them at the corresponding location in the code. This implementation is complete. We are now trying to extend the functionality to also display type information and probably the doc-string on hover, similar to the hover popups in VSCode. </p>\n<p>We could probably implement an interface in LeanInk, so it can be used as a dependency more easily. This would allow doc-gen4 to call it directly and maybe give it some additional info (links to other doc pages etc.). Alectryon does offer a way to generate HTML directly from the export format that LeanInk generates, so calling that should be sufficient for the use case.</p>",
        "id": 265619398,
        "sender_full_name": "Niklas Bülow",
        "timestamp": 1640036893
    },
    {
        "content": "<p>It would be really nice to make sure the work you do on LeanInk is not too much tied to Alectryon. Getting all that information out of a Lean file without pretending to be an editor is a really important task. One thing that makes current Alectryon a lot less useful than it could be is that it really work at a single file level, and doesn't include \"jump to definition\" links.</p>",
        "id": 265623089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640039069
    },
    {
        "content": "<p>Sorry, I think I’m not fully understanding what you’re trying to say.</p>",
        "id": 265630295,
        "sender_full_name": "Niklas Bülow",
        "timestamp": 1640044517
    },
    {
        "content": "<p>One (minor) concern that I have is that Alectryon is a Python lib whereas <code>doc-gen4</code> is a pure Lean 4 package, AFAIK. So adding <code>LeanInk</code> as a dependency of <code>doc-gen4</code> would carry out the Python dependency.</p>\n<p>Lean setup, however, already depends on having Python available <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 265638035,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640051018
    },
    {
        "content": "<p>Niklas, could you tell me more precisely what you don't understand? Let's take an example. If you look at <a href=\"https://alectryon-paper.github.io/snippets/ide.html\">https://alectryon-paper.github.io/snippets/ide.html</a>, you can see tactic state everywhere, but there is no way you can see what is the statement of <code>Mult.mult_plus_distr_l</code> or jump to the definition of <code>sum</code>.  This is why I say Alectryon is a great tool, but not enough. So I hope than LeanInk will be able to generate more data, either for consumption by Alectryon or, preferably, for consumption by any other tool.</p>",
        "id": 265665505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640079778
    },
    {
        "content": "<p>Note that I also think we should have more powerful ways to read Lean 4 files. For instance it would be very nice if we could allows users to build alternative implementations of tactics that would probably be a bit slower,  hence unsuitable for interactive use, but would emit more information for LeanInk/doc-gen4.  For a semi-realistic example, each tactic line could also output the constructed partial proof term, as in mathlib's <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a>.</p>",
        "id": 265665832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640079987
    },
    {
        "content": "<p>I don't think that requires changing the tactic though, you can get that information from the tactic state already (so you don't even need to run the proof again).</p>",
        "id": 265665986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640080093
    },
    {
        "content": "<p>I completely agree that it would be awesome to have LeanInk in doc-gen4 and with more features.</p>",
        "id": 265666099,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640080197
    },
    {
        "content": "<p>Gabriel, I don't understand how the tactic static could give you the partial proof term.</p>",
        "id": 265666572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640080492
    },
    {
        "content": "<p>And what I actually have in mind is constructing a natural language proof from a tactic script.</p>",
        "id": 265666616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640080524
    },
    {
        "content": "<blockquote>\n<p>Gabriel, I don't understand how the tactic static could give you the partial proof term.</p>\n</blockquote>\n<p>Goals are represented as metavariables in Lean.  Solving a goal with a proof term is technically the same as assigning the proof term to the metavariable.  And the tactic state contains the meta-variable assignment.  So if you have the tactic state from before and after you can just look if any goal metavariables have been assigned, and that's the partial proof term.</p>",
        "id": 265667201,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640080833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/html.20in.20doc-gen4/near/265665505\">said</a>:</p>\n<blockquote>\n<p>So I hope than LeanInk will be able to generate more data, either for consumption by Alectryon or, preferably, for consumption by any other tool.</p>\n</blockquote>\n<p>Yes, adding more metadata to the output is the plan as Niklas mentioned. See e.g. <a href=\"https://github.com/insightmind/LeanInk/blob/main/test/theorem_proving/009.lean.leanInk.expected\">https://github.com/insightmind/LeanInk/blob/main/test/theorem_proving/009.lean.leanInk.expected</a> for the current output.</p>",
        "id": 265668318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640081580
    },
    {
        "content": "<p>Note that the most fundamental difference between LeanInk and doc-gen is that LeanInk works from the Lean source input (including literate comments in between code) while doc-gen works from the delaborated .olean input. The latter is not inferior, it means that e.g. <code>variable</code>s are inlined into all signatures, which is the right thing to do for API docs. But because both views of the same Lean module are useful, the simplest way to combine their strengths would be to generate both and add links between them, like Haddock does. It would still be nice if they shared the behavior and perhaps implementation of common features such as hover of course.</p>",
        "id": 265669489,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640082298
    },
    {
        "content": "<p>I don't understand why LeanInk couldn't reconstruct the signature with inlined variables.</p>",
        "id": 265671013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640083459
    }
]