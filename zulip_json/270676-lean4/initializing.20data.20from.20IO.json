[
    {
        "content": "<p>Suppose I have a <code>foo : IO Nat</code> that reads a natural number from a text file and I want to load it into a constant <code>const : Nat</code>. How can I do this?</p>\n<p>From the following comment, I got the impression that this it doable via <code>initialize</code>. Did I understand it correctly?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Compiler.20stuck.20computing.20something.2E.2E.2E/near/314465474\">said</a>:</p>\n<blockquote>\n<p><code>initialize foo : HashMap A B &lt;- (bla : IO (HashMap A B))</code></p>\n</blockquote>",
        "id": 314737753,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670522735
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">initialize</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>But this doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">readCache</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"bp\">$</span> <span class=\"n\">Std.RBMap</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MultilinearPolynomial</span> <span class=\"bp\">$</span> <span class=\"n\">Zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">Json.parse</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">⟨</span><span class=\"s2\">\"YatimaStdLib/MLE/cache.json\"</span><span class=\"o\">⟩)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">cachedJson</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">jsonToCachedMLPs</span> <span class=\"n\">cachedJson</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">cache</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">cache</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">multilinearLagrangePolynomialCache</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.RBMap</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MultilinearPolynomial</span> <span class=\"bp\">$</span> <span class=\"n\">Zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">compare</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">readCache</span>\n<span class=\"c1\">-- initialization function 'MLE.initFn._@.YatimaStdLib.MLE.MultilinearExtension._hyg.1040'</span>\n<span class=\"c1\">-- must have type of the form `IO &lt;type&gt;`</span>\n</code></pre></div>",
        "id": 314739133,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670523150
    },
    {
        "content": "<p>Hmm, apparently it's the parameter <code>n</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 314739949,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670523403
    },
    {
        "content": "<p>Yeah, it's not a datum if it has a parameter</p>",
        "id": 314744885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670524796
    },
    {
        "content": "<p>Right, I have another idea in mind that will surely work. Thanks!</p>",
        "id": 314747108,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670525506
    },
    {
        "content": "<p>Is there some known problem with initializing some data types? I haven't been able to make it work for <code>UInt64</code> nor <code>Bool</code>.<br>\nThis is the error fro <code>UInt64</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: &gt; /home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-12-16/bin/leanc -c -o ./build/ir/Cache/IO.o ./build/ir/Cache/IO.c -O3 -DNDEBUG\nerror: stderr:\n./build/ir/Cache/IO.c:9280:21: error: incompatible pointer to integer conversion assigning to 'uint64_t' (aka 'unsigned long') from 'b_lean_obj_res' (aka 'lean_object *') [-Wint-conversion]\nl_Cache_IO_rootHash = lean_io_result_get_value(res);\n                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\nerror: external command `/home/arthur/.elan/toolchains/leanprover--lean4---nightly-2022-12-16/bin/leanc` exited with code 1\n</code></pre></div>\n<p>The error for <code>Bool</code> is similar. It works on the kernel, but not on compiled code</p>",
        "id": 318427595,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672323806
    },
    {
        "content": "<p>Since it works for <code>Nat</code>, I'm doing this as a workaround for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">rootHashFix</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">←</span> <span class=\"n\">getRootHash</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rootHash</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">rootHashFix</span>\n</code></pre></div>",
        "id": 318428543,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672324115
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 318443467,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672329171
    },
    {
        "content": "<p>Yeah that seems to be missing support for unboxed types. THe compiler would have to insert a lean_unbox in this situation.</p>",
        "id": 318443765,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672329282
    },
    {
        "content": "<p>we should definitely fix this in the new compiler and maybe also in the old one if someone is up for that, you can open an issue for it on the compiler repo I think <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 318444609,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672329617
    },
    {
        "content": "<p>There is a compiler repo? Or is it <a href=\"https://github.com/leanprover/lean4\">https://github.com/leanprover/lean4</a> itself?</p>",
        "id": 318445764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672330077
    },
    {
        "content": "<p>The second yes.</p>",
        "id": 318446318,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672330287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1998\">https://github.com/leanprover/lean4/issues/1998</a> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 318448251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672331045
    },
    {
        "content": "<p>Does haskell have a similar function, by the way?</p>",
        "id": 318508779,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672362982
    },
    {
        "content": "<p>I found <a href=\"https://hackage.haskell.org/package/file-embed-0.0.15.0/docs/Data-FileEmbed.html\"><code>Data.FileEmbed</code></a>, which seems to suggest that Template Haskell is the usual way to do compile-time IO</p>",
        "id": 318510043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672364101
    }
]