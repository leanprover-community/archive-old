[
    {
        "content": "<p>I'm considering writing a javascript backend for lean so that we can write frontend code directly in Lean (e.g. doc-gen4).<br>\nThe current design I have come up with is to implement a <code>EmitJs.lean</code> (counterpart to <code>Lean.Compiler.IR.EmitC</code>) code generator and <code>lean.mjs</code> (~ <code>lean.h</code>) for all those <code>@[extern] opaque</code> definitions, and then we can compile each <code>*.lean</code> file to <code>*.mjs</code>.</p>",
        "id": 286455745,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655451436
    },
    {
        "content": "<p>But I got stuck when I try to reuse the <code>extern</code> attribute</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"n\">js</span> <span class=\"s2\">\"thunkPure\"</span><span class=\"o\">]</span> <span class=\"n\">Thunk.pure</span>\n<span class=\"c1\">-- error: invalid attribute 'extern', declaration is in an imported module</span>\n</code></pre></div>\n<p>It seems that all <code>ParametricAttribute</code> are restricted to the same module. Will it be more reasonable to place the restriction on specific attributes rather than on the base type?</p>",
        "id": 286456196,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655451778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> are you working on a public repo somewhere?</p>",
        "id": 286526460,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655490452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I remember you showed me a definition file for the needed Lean JS runtime at some point, but I can't find the link.</p>",
        "id": 286535648,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1655495737
    },
    {
        "content": "<p>I think that's <code>lean.h</code>. It contains the Lean intrinsics which any runtime needs to implement.</p>",
        "id": 286535772,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1655495792
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/52a0de00e4aa6d9cc4cb755f49308186da7fe27a/src/include/lean/lean.h\"><code>lean.h</code></a></p>",
        "id": 286535981,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1655495907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> Yes. I'm going to write the backend in a lean4 fork: <a href=\"https://github.com/xubaiw/lean4-js/tree/js-backend\">https://github.com/xubaiw/lean4-js/tree/js-backend</a>. But I haven't made any commits yet.</p>",
        "id": 286557500,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655511728
    },
    {
        "content": "<p>I wonder how scalar type is identified in lean's c side.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"nf\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">size_t</span><span class=\"p\">)(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">lean_box</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">size_t</span><span class=\"p\">)(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"nf\">lean_unbox</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems that scalar type is just a <code>size_t</code> casted to <code>lean_object*</code> pointer whose last bit is 1. Does this mean that nonscalar lean_object pointer is restricted to be out of the pattern? Is it possible to enforce on a pointer's actual value?</p>",
        "id": 288314769,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656835456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> I have trouble parsing your specific questions, but are you aware of <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c\">https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c</a>?</p>",
        "id": 288314987,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656835855
    },
    {
        "content": "<p>Sorry for my vague expression. I have read about it but still unclear about how it works internally. In other words, why does a <code>Nat</code> pointer have 0 as its lowest bit?</p>",
        "id": 288315764,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656837205
    },
    {
        "content": "<p>I'm porting all of these stuff in javascript, so it's just important to figure out the mechanism :D</p>",
        "id": 288315893,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656837407
    },
    {
        "content": "<p>I got it. So a scalar type is always boxed on the lean side and always unboxed on the backend side. The backend representation doesn't matter as long as we have a method to decide whether it is a scalar one, right?</p>",
        "id": 288316766,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656838749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/Ideas.20about.20a.20JS.20backend/near/288315764\">said</a>:</p>\n<blockquote>\n<p>In other words, why does a <code>Nat</code> pointer have 0 as its lowest bit?</p>\n</blockquote>\n<p>Because <code>lean_object</code> is at least 4-byte aligned (since it starts with an <code>int</code>)</p>",
        "id": 288322254,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656847237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/Ideas.20about.20a.20JS.20backend/near/288316766\">said</a>:</p>\n<blockquote>\n<p>So a scalar type is always boxed on the lean side and always unboxed on the backend side</p>\n</blockquote>\n<p>I'm not sure what you mean by that. The use of \"scalar type\" is also a bit confusing. The IR and runtime know unboxed integer types, and then there is <code>IRType.object</code>, which may be either a tagged \"pointer\" or a true reference to a <code>lean_object</code>.</p>",
        "id": 288322479,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656847561
    }
]