[
    {
        "content": "<p>What is the Lean 4 way to get injectivity of constructors for inductive types? Browsing through Init, it seems that <code>noConfusion</code> is used directly in lots of places where I would normally use injectivity.  Is this the preferred way in Lean 4?</p>",
        "id": 221641695,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609850547
    },
    {
        "content": "<p>it's probably the only currently existing way</p>",
        "id": 221645860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609853601
    },
    {
        "content": "<p>Back before the injection tactic existed that's how you would do it</p>",
        "id": 221645898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609853639
    },
    {
        "content": "<p>(fyi <code>no_confusion</code> <em>is</em> injectivity of constructors, it just has a more confusing type)</p>",
        "id": 221645982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609853703
    },
    {
        "content": "<p>I'm used to having generated <code>.inj</code> theorems. <code>noConfusion</code> works but unfortunately it's not named after what's happening in my brain when I try to use it :)</p>",
        "id": 221646512,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609854070
    },
    {
        "content": "<p>Ah! But the injection tactic does exist!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 221648087,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609855006
    },
    {
        "content": "<p>If it was named after what was happening in your brain when you try to use it it should be called <code>confusion</code> :)</p>",
        "id": 221651835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609857165
    },
    {
        "content": "<p>Wouldn't <code>deConfusion</code> be a great tactic name? Thanks Mario for deConfusing the fun from what I wrote :)</p>",
        "id": 221652972,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609857724
    },
    {
        "content": "<p>I'm not even sure the <code>.inj</code> theorems were originally intended for user use</p>",
        "id": 221653299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609857878
    },
    {
        "content": "<p>I think they get used by <code>simp</code></p>",
        "id": 221653327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609857889
    },
    {
        "content": "<p>Lean 3 <code>tactic.injection</code> is essentially 'find the correct <code>inj</code> lemma and apply it'.</p>",
        "id": 221655024,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609858631
    },
    {
        "content": "<p>You should look up work by Goguen, who popularized \"no junk, no confusion\" in CS a long time ago. That \"no confusion\" is related to injectivity of constructors came later. Goguen was trying to popularize initial algebra semantics, especially amongst people who were anti-category-theory. So nice slogans helped.</p>",
        "id": 221696286,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1609877966
    }
]