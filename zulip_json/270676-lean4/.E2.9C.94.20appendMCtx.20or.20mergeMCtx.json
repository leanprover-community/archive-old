[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.abstractMVars#doc\">docs4#Lean.Meta.abstractMVars</a> :)</p>",
        "id": 308540064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667897112
    },
    {
        "content": "<p>Thanks, I was looking for something like <code>mkLambdaMVars</code> i.e. variant of <code>mkLambdaFVars</code>.</p>",
        "id": 308540603,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667897367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as resolved.</p>",
        "id": 308540621,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667897374
    },
    {
        "content": "<p>And how do I apply fresh mvars? </p>\n<p>My attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">abstractMVars</span> <span class=\"n\">value</span>\n<span class=\"k\">let</span> <span class=\"n\">freshMVars</span> <span class=\"bp\">←</span> <span class=\"n\">Array.mkArray</span> <span class=\"n\">value.numMVars</span> <span class=\"o\">()</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM'</span> <span class=\"n\">value.expr</span> <span class=\"o\">(</span><span class=\"n\">freshMVars.map</span> <span class=\"n\">some</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but that fails if the mvar is an expression and not a type, I could call <code>mkFreshExprMVar none</code> instead but that fails for type mvars. </p>\n<p>I would like to just call <code>mkAppOptM</code> with <code>none</code>s and just add all the new metaviables to the context. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">abstractMVars</span> <span class=\"n\">value</span>\n<span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM'</span> <span class=\"n\">value.expr</span> <span class=\"o\">(</span><span class=\"n\">Array.mkArray</span> <span class=\"n\">value.numMVars</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 308549958,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1667900986
    }
]