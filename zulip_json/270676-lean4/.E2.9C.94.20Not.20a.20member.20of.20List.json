[
    {
        "content": "<p>Thanks! This helped me find my mistake. My previous code was similar to yours:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"n\">hin</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hin</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">List.Mem.head</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hne</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The only difference is that I gave <code>_</code> a name (<code>rest</code>). I get this error when I do that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">missing</span> <span class=\"n\">cases</span><span class=\"o\">:</span>\n<span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.Mem.tail</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Does that mean giving names to constructor arguments can stop some of Lean's automations?</p>",
        "id": 278572508,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1649691431
    },
    {
        "content": "<p>Note that the <code>_</code> in a pattern is not necessarily equivalent to an \"anonymous pattern variable\". Lean can fill the <code>_</code> with an inaccessible pattern (aka a term that is fixed by typing constraints). In the example above, Lean fills it with the inaccessible pattern <code>.([])</code>. That is, the example with the underscore is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hne</span> <span class=\"n\">hin</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hin</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">List.Mem.head</span> <span class=\"bp\">.</span><span class=\"o\">([])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hne</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 278573834,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649691957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417967\">Abdalrhman M Mohamed</span> has marked this topic as resolved.</p>",
        "id": 278574785,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649692329
    }
]