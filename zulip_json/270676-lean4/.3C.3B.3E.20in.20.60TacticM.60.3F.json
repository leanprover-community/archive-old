[
    {
        "content": "<p>In Lean 3's <code>tactic</code> monad, we have both <code>,</code> and <code>;</code> for sequencing. My understanding is that they correspond exactly to <code>,</code> and <code>;</code> in tactic-mode syntax, i.e. <code>,</code> means continue working on the main goal, which <code>;</code> means continue on <em>all</em> newly-produced goals.</p>\n<p>In Lean 4's tactic-mode syntax, we have <code>;</code> (or newline) and <code>&lt;;&gt;</code> fulfilling the same roles. Is there an equivalent to <code>&lt;;&gt;</code> in the <code>TacticM</code> monad?  Previously I've <a href=\"https://github.com/leanprover-community/mathlib4/blob/dd4f8930565fc17125c9e83f72f6ab35aeaac18d/Mathlib/Tactic/SplitIfs.lean#L20-L23\">defined my own combinator</a> for this purpose, but I'm wondering whether I'm missing something that already exists in Core.</p>",
        "id": 315635384,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670950094
    },
    {
        "content": "<p>Your <code>tac_and_then</code> looks a bit off to me in the case where there are multiple goals to start with.</p>",
        "id": 315671151,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1670960462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> coded the following version, which I believe is more faithful to <code>&lt;;&gt;</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">andThenOnSubgoals</span> <span class=\"o\">(</span><span class=\"n\">tac₁</span> <span class=\"n\">tac₂</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">origGoals</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span>\n    <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"n\">setGoals</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span>\n    <span class=\"n\">tac₁</span>\n    <span class=\"k\">let</span> <span class=\"n\">subgoals₁</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">newGoals</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">subgoal</span> <span class=\"k\">in</span> <span class=\"n\">subgoals₁</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">assigned</span> <span class=\"bp\">←</span> <span class=\"n\">MVarId.isAssigned</span> <span class=\"n\">subgoal</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"n\">assigned</span> <span class=\"k\">then</span>\n        <span class=\"n\">setGoals</span> <span class=\"o\">[</span><span class=\"n\">subgoal</span><span class=\"o\">]</span>\n        <span class=\"n\">tac₂</span>\n        <span class=\"k\">let</span> <span class=\"n\">subgoals₂</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n        <span class=\"n\">newGoals</span> <span class=\"o\">:=</span> <span class=\"n\">newGoals</span> <span class=\"bp\">++</span> <span class=\"n\">subgoals₂</span>\n    <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">newGoals</span> <span class=\"bp\">++</span> <span class=\"n\">List.tail</span> <span class=\"n\">origGoals</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315671247,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1670960499
    },
    {
        "content": "<p>(This was written for LoVe, so could be golfed quite a bit.)</p>",
        "id": 315781743,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671013392
    }
]