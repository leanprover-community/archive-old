[
    {
        "content": "<p>In the following example, I wasn't expecting <code>Foo</code> in the type of <code>Foo.f</code> to elaborate in the <code>Foo</code> namespace.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Foo</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This has the error on line 4, \"type expected, got (Foo : Nat → _root_.Foo)\", suggesting it's seeing <code>Foo.Foo</code> rather than <code>Foo</code>.</p>\n<p>Changing <code>Foo</code> to <code>_root_.Foo</code> is a workaround, but I would have expected elaboration to respect whichever namespace I happened to explicitly be in.</p>\n<p>(I was using the <code>Lean.Data.Xml.Basic</code> module, and it has inductive types whose constructors have the same names.)</p>",
        "id": 311672737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669139109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20namespaces.20in.20elaboration.20of.20type.20of.20function/near/311672737\">said</a>:</p>\n<blockquote>\n<p>(I was using the <code>Lean.Data.Xml.Basic</code> module, and it has inductive types whose constructors have the same names.)</p>\n</blockquote>\n<p>Ok, this is just wrong</p>",
        "id": 311673491,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669139361
    },
    {
        "content": "<p>I meant the constructors have the same names as their corresponding types, which seems fine -- many Haskell data types do that for example.</p>",
        "id": 311673882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669139488
    },
    {
        "content": "<p>Yes, to be clear I meant we should definitely change this. Lean is not Haskell.</p>",
        "id": 311702734,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669148808
    },
    {
        "content": "<p>Coming back to your original post, <code>def Foo.f</code> now behaves like <code>namespace Foo def f</code>, yes.</p>",
        "id": 311703045,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669148911
    },
    {
        "content": "<p>I have to say, when I first learned Haskell I found it super confusing that types and their constructors had the same names. So I'm especially glad we're not adopting this.</p>",
        "id": 311720368,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669155758
    },
    {
        "content": "<p>It only really makes sense if you have separate name spaces for types and terms anyway, which we don't (and now Dependent Haskell doesn't either!)</p>",
        "id": 311777663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669193238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20namespaces.20in.20elaboration.20of.20type.20of.20function/near/311703045\">said</a>:</p>\n<blockquote>\n<p>Coming back to your original post, <code>def Foo.f</code> now behaves like <code>namespace Foo def f</code>, yes.</p>\n</blockquote>\n<p>I'm just reporting this as being surprising. I have an idea of why it's convenient for it to work like this, but I'm not sure I like it applies to the arguments and type of a declaration -- it'd be less surprising if it just applied to the body of a declaration.</p>\n<p>One thing I don't like about it is that if you're adding a declaration that's meant to be used for generalized field notation, then if that object's namespace has a name that shadows another name it becomes more convoluted to refer to that one. There's a pattern we've used in mathlib where there's some predicate, say <code>is_foo</code>, and another predicate, say <code>is_bar</code>, and if <code>is_foo</code> implies <code>is_bar</code> we might have <code>is_bar.is_foo</code> so that if <code>h : is_bar x</code> one can write <code>h.is_foo</code>. Another pattern is that if <code>is_foo (foo x)</code> is true when <code>is_foo x</code> is true, then we define <code>is_foo.foo : is_foo x -&gt; is_foo (foo x)</code>. Here's an example of the latter for <code>set.finite.prod : set.finite s -&gt; set.finite t -&gt; set.finite (set.prod s t)</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.prod\">docs#set.finite.prod</a></p>",
        "id": 311786400,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669196447
    },
    {
        "content": "<p>I'd be happier if there were a construct like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to temporarily change the namespace for a command explicitly. This implicit behavior for <code>def foo.bar</code> means you have to notice small lexical details of the name being defined to make sense of the type of a definition.</p>\n<p>Anyway, it's not a big deal, but I thought I'd mention my experience. It seems like the kind of feature I'm going to be occasionally re-surprised by.</p>",
        "id": 311789021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669197426
    },
    {
        "content": "<p>Oh, I do get surprised by it as well</p>",
        "id": 311791966,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669198429
    }
]