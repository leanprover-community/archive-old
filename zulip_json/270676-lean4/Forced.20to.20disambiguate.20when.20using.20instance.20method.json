[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">compose</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"n\">identity</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">Function</span> <span class=\"n\">where</span>\n  <span class=\"n\">compose</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">identity</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">identity</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>When I run lean on this, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">identity</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.121</span> <span class=\"bp\">?</span><span class=\"n\">m.125</span> <span class=\"bp\">?</span><span class=\"n\">m.125</span>\n</code></pre></div>\n<p>This error was very confusing. Nevertheless, I discovered that changing the last line like this made it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"n\">Function</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>This seems pretty clumsy to me though. Is there a way to get this working without having to explicitely annotate the type of the <code>identity</code> function?</p>",
        "id": 255130880,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632781940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> You need to inform Lean that <code>identity</code> is a <code>Function</code> in some manner as the definition of <code>Category</code> does not entail that.</p>",
        "id": 255132305,
        "sender_full_name": "Mac",
        "timestamp": 1632782717
    },
    {
        "content": "<p>OK. Coming from Agda, this seemed strange to me. Let me parametrize Category by objects and see if it does better.</p>",
        "id": 255132532,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632782838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> Also note that by using a <code>def</code> for <code>Function</code> instead of an <code>abbrev</code>, the arrow (e.g., <code> -&gt;</code>) is not a <code>Category</code>, only <code>Function</code> is.</p>",
        "id": 255132672,
        "sender_full_name": "Mac",
        "timestamp": 1632782918
    },
    {
        "content": "<p>Oh really? That's interesting.</p>",
        "id": 255132784,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632782994
    },
    {
        "content": "<p>A <code>def</code> defines a new type that does not share the instances of its definition, whereas an <code>abbrev</code> defines a type that does.</p>",
        "id": 255132903,
        "sender_full_name": "Mac",
        "timestamp": 1632783052
    },
    {
        "content": "<p>Good to know. So I tried this, but it still complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">Ob</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ob</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">compose</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Hom</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"n\">identity</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">compose</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">identity</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">identity</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 255133121,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632783197
    },
    {
        "content": "<p>Disambiguating it like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>does not help anymore.</p>",
        "id": 255133273,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632783295
    },
    {
        "content": "<p>The problem is that <code>fun a b =&gt; a -&gt; b</code> is not equivalent to the arrow itself.</p>",
        "id": 255133401,
        "sender_full_name": "Mac",
        "timestamp": 1632783368
    },
    {
        "content": "<p>I am not sure whether it is possible to refer to the arrow directly or at very least I don't know how.</p>",
        "id": 255133487,
        "sender_full_name": "Mac",
        "timestamp": 1632783437
    },
    {
        "content": "<p>I see. I guess it's better then to define Category as a struct and be explicit rather than relying on a type classs.</p>",
        "id": 255133660,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632783566
    },
    {
        "content": "<p>In mathlib it is a class but with only <code>Ob</code> as a parameter, and <code>Hom</code> as a field.</p>",
        "id": 255134915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632784219
    },
    {
        "content": "<p>I tried that too. It does not help though.</p>",
        "id": 255187940,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632821824
    },
    {
        "content": "<p>This is a higher-order unification issue, Lean gets stuck at <code>Nat -&gt; Nat =?= ?Hom ?a ?a</code>. <code>identity (Hom := (. -&gt; .)) 7</code> works.</p>",
        "id": 255188866,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632822343
    },
    {
        "content": "<p>Yes. I was trying to make it work without having to disambiguate it.</p>",
        "id": 255189016,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632822414
    },
    {
        "content": "<p>It seems it is not possible.</p>",
        "id": 255189057,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1632822434
    }
]