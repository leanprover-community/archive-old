[
    {
        "content": "<p>In Lean 3 we have things like <a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#conditionally_complete_lattice\">conditionally complete lattices</a> which have a <code>sup</code> (the least upper bound of two things) and a <code>Sup</code> (the least upper bound of a set of things). I've been idly making some lattice theory because I'm thinking about making Lean 4 teaching material for mathematicians. I wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasSup</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>and now I realise that the capitalisation might cause confusion. Does anyone have advice or suggestions on what I should be doing here? </p>\n<p>Of course later on we might well have the same question for <code>group</code> (the structure) and <code>Group</code> (the category).</p>",
        "id": 231494729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616515011
    },
    {
        "content": "<p>For binary/nary, perhaps <code>Sup</code> and <code>NSup</code>, where N means n-ary?</p>",
        "id": 231864057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616701195
    },
    {
        "content": "<p>Then we could even distinguish <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum\">docs#sum</a> from a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a> by calling the latter <code>HasNAdd</code>. Surely no one will be confused by that /s.</p>",
        "id": 231865049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616701578
    },
    {
        "content": "<p>n-ary can (and probably should) be defined in terms of binary.  (As much as I'd like to suggest <code>FinSup</code> as the type class for n-ary suprema.)  Similarly, indexed suprema can be defined from the set suprema.<br>\nProductively speaking, maybe <code>sups</code> (supremum of set) could be an unambigous analogy to <code>supr</code> (supremum of range).</p>",
        "id": 231867299,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616702556
    },
    {
        "content": "<p>I think <code>supS</code> and <code>supR</code> would be better for such an abbreviation, since <code>supr</code> and <code>infi</code> seem to suggest that it's not actually \"supremum of range\" but rather a slightly different abbreviation of \"supremum\"</p>",
        "id": 231875936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616706355
    },
    {
        "content": "<p>We need to decide the names of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup\">docs#sup</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup\">docs#Sup</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr\">docs#supr</a> in mathlib4. We can't use capitalization tricks because there are too many capitalization rules that would interfere. There are notations for those three functions of course, but their name will appear in lemma names. How about: <code>sup</code>, <code>setSup</code>, <code>rgSup</code> where <code>rg</code> is the abbreviation of \"range\"?. Or maybe <code>funSup</code>?</p>",
        "id": 316087005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671122569
    },
    {
        "content": "<p>Note that  I wrote something to get the ball running but I don't have any strong feeling (except for the strong filling that <code>order.complete_lattice</code> should be ported).</p>",
        "id": 316087139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671122611
    },
    {
        "content": "<p>Or <code>iSup</code> and <code>iInf</code> where <code>i</code> stands for indexed, but <code>iInf</code> is painful to read.</p>",
        "id": 316088487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671122999
    },
    {
        "content": "<p>my preference is for <code>sup</code>/<code>sSup</code>/<code>iSup</code> and <code>inf</code>/<code>sInf</code>/<code>iInf</code> , although I don't mind swapping the last pair for <code>supr</code>/<code>infi</code> if it reads better and is more backward compatible</p>",
        "id": 316094872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124618
    },
    {
        "content": "<p>It took me a very long time to get used to the mathlib3 name so I won't insist on backwards compatibility.</p>",
        "id": 316095213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671124702
    },
    {
        "content": "<p>if we wanted to chuck backwards compatibility we could also consider <code>meet</code> /  <code>join</code></p>",
        "id": 316095365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124745
    },
    {
        "content": "<p>that's probably too much of a change though, and the names are famously hard to keep straight</p>",
        "id": 316095497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124784
    },
    {
        "content": "<p>(not sure if sup and inf are much better on that axis though)</p>",
        "id": 316095617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124809
    },
    {
        "content": "<p>What did we call <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Union\">docs#set.Union</a> in mathlib4?</p>",
        "id": 316096069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671124929
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.sUnion#doc\">docs4#Set.sUnion</a></p>",
        "id": 316096336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671125014
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sUnion\">docs#set.sUnion</a></p>",
        "id": 316096357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671125022
    },
    {
        "content": "<p><code>set.Union</code> is the indexed version, which Patrick's convention would rename to <code>iUnion</code> (and similiary for <code>iInter</code>)</p>",
        "id": 316096488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671125051
    },
    {
        "content": "<p>I don't think we made it that far <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 316096497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671125054
    },
    {
        "content": "<p>we have the binary stuff but the indexed operators pull in all of lattice theory</p>",
        "id": 316096614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671125087
    },
    {
        "content": "<p>Much further down the line we have the same naming issue with <code>probability_theory.Indep</code> vs <code>probability_theory.indep</code></p>",
        "id": 316103148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671126790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> mentions <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.coprod\">docs#filter.coprod</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.Coprod\">docs#filter.Coprod</a></p>",
        "id": 316138805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671137808
    },
    {
        "content": "<p>(the other thread is <a href=\"#narrow/stream/287929-mathlib4/topic/complete_lattice.20and.20has_sup/near/316080054\">here</a>)</p>",
        "id": 316139285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671137979
    },
    {
        "content": "<p>/poll operator names<br>\nsup sSup iSup inf sInf iIinf<br>\nsup supS supI inf infS infI<br>\nsup supₛ supᵢ inf infₛ infᵢ<br>\njoin sup iSup meet inf iInf<br>\njoin sup supI meet inf infI</p>",
        "id": 316140442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671138389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, I think your sup sup2 is backwards compared to the other suggestions; you want the 2 subscript for the binary one right?</p>",
        "id": 316141069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671138586
    },
    {
        "content": "<p>Sorry, yes!</p>",
        "id": 316141133,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671138603
    },
    {
        "content": "<p>maybe I got meet/join backwards :)</p>",
        "id": 316141254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671138633
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Join_and_meet\">Wikipedia</a> says Patrick's interpretatio (meet = inf) is correct, but also says those names are the nary operators!</p>",
        "id": 316141600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671138740
    },
    {
        "content": "<p>I have a strong preference for the indices versions over the trailing cap ones because capitalisation is a headache in Lean 4.</p>",
        "id": 316145455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671140046
    },
    {
        "content": "<p>One problem with the indices version is that we will also need to solve the <code>bUnion</code> case (in lemma names, this isn't a new operator) and I think there is no subscript b in unicode</p>",
        "id": 316149017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671141480
    },
    {
        "content": "<p>I don't understand Heather <code>sup₂</code>. We need three variants, right?</p>",
        "id": 316149141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671141513
    },
    {
        "content": "<p><code>bUnion</code> has mostly been replaced by <code>Union₂</code> nowadays anyway.</p>",
        "id": 316149203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671141540
    },
    {
        "content": "<p>There's some remnants that make sense, but it wouldn't be such a loss (as opposed to the situation a year ago, say).</p>",
        "id": 316149313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671141579
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bUnion\">docs#bUnion</a> still has plenty of results</p>",
        "id": 316149484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671141635
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bsupr\">docs#bsupr</a> does too</p>",
        "id": 316149544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671141655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/sup.2FSup/near/316149017\">said</a>:</p>\n<blockquote>\n<p>One problem with the indices version is that we will also need to solve the <code>bUnion</code> case (in lemma names, this isn't a new operator) and I think there is no subscript b in unicode</p>\n</blockquote>\n<p>Arguably the convention for bounded / conditional operations <em>should</em> use a different convention anyway to the binary/set/indexed naming, since this is a property of the lemma not of the operator</p>",
        "id": 316149805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671141740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11516\">#11516</a> is where the convention changed drastically.</p>",
        "id": 316149873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671141769
    },
    {
        "content": "<p>I think this is a problem for @Heather's sup₂ suggestion for the binary sup, since lemmas about the n-ary one applied twice are certainly common.</p>",
        "id": 316150025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671141835
    },
    {
        "content": "<p>I prefer it if declaration names are written with ASCII characters, since I sometimes want to type them outside VSCode , where I don't have easy unicode input (e.g. on the mathlib docs website)</p>",
        "id": 316150837,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671142118
    },
    {
        "content": "<p>Now that capitalization can no longer be used I think we need extra flexibility so you should take the opportunity to configure your computer to type those everywhere.</p>",
        "id": 316151053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671142197
    },
    {
        "content": "<p>Or we should configure the docs to behave like vscode</p>",
        "id": 316151673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671142428
    },
    {
        "content": "<p>I went with <code>sup supₛ supᵢ inf infₛ infᵢ </code></p>",
        "id": 316225006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671184712
    },
    {
        "content": "<p>Then we should rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.sUnion#doc\">docs4#Set.sUnion</a> to match</p>",
        "id": 316226145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671185098
    },
    {
        "content": "<p>We now run into the problem that Lean 4 doesn't have <code>extends ... renaming ...</code>, but we want to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CompleteLinearOrder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span>\n    <span class=\"kn\">renaming</span> <span class=\"n\">max</span> <span class=\"bp\">→</span> <span class=\"n\">sup</span> <span class=\"n\">min</span> <span class=\"bp\">→</span> <span class=\"n\">inf</span>\n</code></pre></div>",
        "id": 316236122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671188201
    },
    {
        "content": "<p>We should just rename <code>min</code> and <code>max</code> in <code>LinearOrder</code></p>",
        "id": 316237132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671188520
    },
    {
        "content": "<p>I wanted to do that in Lean 3, but everything was slowed down because <code>linear_order</code> is in core.</p>",
        "id": 316237242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671188546
    },
    {
        "content": "<p>I like the names <code>min</code> and <code>max</code>.</p>",
        "id": 316237399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671188603
    },
    {
        "content": "<p>For the renaming of fields: I recommend for now to just add the missing fields of <code>LinearOrder</code> manually, and then to declare the instance manually.</p>",
        "id": 316237514,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671188643
    },
    {
        "content": "<p>Renaming the fields has nothing to do with renaming the functions.</p>",
        "id": 316239323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671189234
    },
    {
        "content": "<p>But independently we should make <code>LinearOrder</code> extend <code>Lattice</code></p>",
        "id": 316239458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671189267
    },
    {
        "content": "<p>Okay, I've done <code>CompleteLinearOrder</code> per Floris' suggestion.</p>",
        "id": 316241007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671189731
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder#doc\">docs4#LinearOrder</a> in core/Std4?</p>",
        "id": 316245040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671191125
    },
    {
        "content": "<p>It moved to mathlib.</p>",
        "id": 316246869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671191673
    }
]