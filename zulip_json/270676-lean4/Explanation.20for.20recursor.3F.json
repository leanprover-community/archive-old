[
    {
        "content": "<p>How do I perform mutual induction in LEAN4? I believe <a href=\"#narrow/stream/270676-lean4/topic/induction.20on.20mutual.20inductives.20fails\">that this is not implemented yet</a>, so I'm trying to use elimination principles to write my mutual induction by hand. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr_int</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr_neg</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Block</span>\n  <span class=\"bp\">|</span> <span class=\"n\">block_empty</span><span class=\"o\">:</span> <span class=\"n\">Block</span>\n  <span class=\"kd\">end</span>\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>Asking Lean with  <code>#check Expr.brec_on</code> and <code>#check Expr.below</code> gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expr.below</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n<span class=\"n\">Expr.brecOn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr.below</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.398</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Block</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Block.below</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.399</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.398</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Where can I read more about <code>Expr.below</code> and how to use it? <a href=\"https://github.com/leanprover/tutorial/blob/master/06_Inductive_Types.org#automatically-generated-constructions\">The docs about inductive types</a> say:</p>\n<blockquote>\n<p>Lean also generates the predicate transformer below and the recursor brec_on. It is unlikely that you will ever need to use these constructions directly; they are auxiliary definitions used by the recursive equation compiler we will describe in the next chapter, and we will not discuss them further here.</p>\n</blockquote>\n<p>What I actually want to do is to have an induction principle like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">induction_expr</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mot_expr</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mot_block</span><span class=\"o\">:</span> <span class=\"n\">Block</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- EXPR</span>\n  <span class=\"o\">(</span><span class=\"n\">base_expr_int</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">),</span> <span class=\"n\">mot_expr</span> <span class=\"o\">(</span><span class=\"n\">expr_int</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ind_expr_neg</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">MOT_NEG</span><span class=\"o\">:</span> <span class=\"n\">mot_expr</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"n\">mot_expr</span> <span class=\"o\">(</span><span class=\"n\">expr_neg</span> <span class=\"n\">e</span><span class=\"o\">)):</span>\n  <span class=\"c1\">-- FINAL</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">),</span> <span class=\"n\">mot_expr</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>or some such.</p>",
        "id": 260049126,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1635883071
    },
    {
        "content": "<p>Mutual recursion has been implemented: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/mutwf2.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/mutwf2.lean</a></p>",
        "id": 260059185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635887868
    }
]