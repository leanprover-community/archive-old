[
    {
        "content": "<p>Consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">isInr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">extractNat'</span> <span class=\"c1\">-- (x : String)</span>\n                   <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">⊕</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"c1\">-- := parse (parseRadixNat'Do $ hod x) x)</span>\n                   <span class=\"o\">(</span><span class=\"n\">doesParse</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">pr</span><span class=\"o\">)</span>\n                   <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">pr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">isInr</span> <span class=\"n\">at</span> <span class=\"n\">doesParse</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">doesParse</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">parseRadixNat'Do'</span> <span class=\"o\">(</span><span class=\"n\">_radix</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">⊕</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">input</span> <span class=\"bp\">==</span> <span class=\"s2\">\"23\"</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"mi\">100</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"s2\">\"Menzoberranzan\"</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">⊕</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">⊕</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">φ</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Nat'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">radix</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">valE</span> <span class=\"o\">:=</span> <span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">parseRadixNat'Do'</span> <span class=\"n\">radix</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">doesParse</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"bp\">$</span> <span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">parseRadixNat'Do'</span> <span class=\"n\">radix</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">extractNat'</span> <span class=\"o\">(</span><span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">parseRadixNat'Do'</span> <span class=\"n\">radix</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">doesParse</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Nat'Buggy</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- radix := hod x</span>\n  <span class=\"n\">radix</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">valE</span> <span class=\"o\">:=</span> <span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">parseRadixNat'Do'</span> <span class=\"n\">radix</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">doesParse</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"n\">valE</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">extractNat'</span> <span class=\"n\">valE</span> <span class=\"n\">doesParse</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">high_five</span> <span class=\"o\">:</span> <span class=\"n\">isInr</span> <span class=\"bp\">$</span> <span class=\"n\">demoParse</span> <span class=\"o\">(</span><span class=\"n\">parseRadixNat'Do'</span> <span class=\"mi\">3555</span><span class=\"o\">)</span> <span class=\"s2\">\"23\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bug</span> <span class=\"o\">:</span> <span class=\"n\">Nat'Buggy</span> <span class=\"s2\">\"228\"</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">doesParse</span> <span class=\"o\">:=</span> <span class=\"n\">high_five</span> <span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">bug</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bug.val</span>\n</code></pre></div>\n<p>Instead of complaining that the proof is attached to a wrong String, it binds <code>valE</code> to the value we supply via the theorem.</p>\n<p><code>Nat'</code>, however, behaves well.</p>\n<p>Is there a way to optimise <code>Nat'</code> such that we parse stuff only once and have lean check that \"valE\" from the theorem is the same as the default <code>valE</code>?</p>",
        "id": 299844500,
        "sender_full_name": "cognivore",
        "timestamp": 1663706257
    },
    {
        "content": "<p>To rephrase it shortly: </p>\n<blockquote>\n<p>If a structure depends on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, how to make it also depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> f \\ x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span></span></span></span> without having the user call <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> f \\ x </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span></span></span></span> themselves?</p>\n</blockquote>",
        "id": 300225820,
        "sender_full_name": "cognivore",
        "timestamp": 1663873213
    },
    {
        "content": "<p>Oh, I see what you mean -- I use a <code>Cached</code> type for this, lemme send a link</p>",
        "id": 300226399,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663873403
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Computed.20.20Fields.20feature/near/290148231\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Computed.20.20Fields.20feature/near/290148231</a></p>",
        "id": 300226580,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663873458
    },
    {
        "content": "<p>Wow, will check it out, thank you, James! cc <span class=\"user-mention\" data-user-id=\"514707\">@Ilona Prikule</span></p>",
        "id": 300227121,
        "sender_full_name": "cognivore",
        "timestamp": 1663873617
    }
]