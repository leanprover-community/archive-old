[
    {
        "content": "<p>Is there a way to refer to a proof which is embedded in a dependent type? Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.applyFun</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span><span class=\"n\">_some</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">List.getLast</span><span class=\"bp\">?</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"n\">List.getLast</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Option.isSome</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">examp</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">):</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span><span class=\"n\">_some</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂.what</span>\n</code></pre></div>\n<p>At the bottom, I have <code>h₂: List.getLast l (_ : ¬l = []) = e</code> as a hypothesis, and I'd like to just refer to the anonymous proof which is the second argument to getLast, but I can't figure out how.</p>",
        "id": 321739089,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673917210
    },
    {
        "content": "<p>in mathlib3, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize_hyps\">tactic#generalize_hyps</a> for extracting that out</p>",
        "id": 321739601,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673917622
    },
    {
        "content": "<p>you mean <code>generalize_proofs</code>?</p>",
        "id": 321739659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673917665
    },
    {
        "content": "<p>I just tried <code>generalize_proofs h₂</code> but it seems to have no effect.</p>",
        "id": 321740358,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673918230
    },
    {
        "content": "<p><code>generalize_proofs at h₂</code> I think is the correct spelling, but it fails mysteriously</p>",
        "id": 321740574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673918404
    },
    {
        "content": "<p>I get the error <code>unknown free variable '_uniq.334'</code></p>",
        "id": 321740648,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673918464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">revert</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h'</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>works</p>",
        "id": 321740661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673918483
    },
    {
        "content": "<p>That failure looks like a bug in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.GeneralizeProofs.generalizeProofs#doc\">docs4#Mathlib.Tactic.GeneralizeProofs.generalizeProofs</a> to me</p>",
        "id": 321740691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673918522
    },
    {
        "content": "<p>This is the same issue I was seeing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a></p>",
        "id": 321751449,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673928831
    },
    {
        "content": "<p>And the revert/intro trick works there.</p>",
        "id": 321752934,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673930378
    },
    {
        "content": "<p>Ah, in one place, but not the other.</p>",
        "id": 321753134,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673930561
    }
]