[
    {
        "content": "<p>It probably doesn't need to be a monad since it works pretty well as-is. However, I wonder if there is a reason why it shouldn't be a monad.</p>\n<p>I noticed when I tried to write <code>def foo : Thunk α := do ...</code> but I realized that I needed to write <code>def foo : Thunk α := Id.run do ...</code> and rely on the coercion from <code>α</code> to <code>Thunk α</code>.</p>",
        "id": 321669870,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673883513
    },
    {
        "content": "<p>Of course it \"is\" a monad since there are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Thunk.pure#doc\">docs4#Thunk.pure</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Thunk.bind#doc\">docs4#Thunk.bind</a> (to be pedantic/annoying), but I'm also wondering if there's any reason there shouldn't be a <code>Monad</code> instance.</p>\n<p>Relying on the coercion feels weird since it obscures when computations are happening.</p>",
        "id": 321671227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673883945
    },
    {
        "content": "<p>I just checked that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Thunk</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Thunk.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Thunk.bind</span>\n  <span class=\"n\">map</span>  <span class=\"o\">:=</span> <span class=\"n\">Thunk.map</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Thunk</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_const</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">id_map</span>         <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">bind_assoc</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">bind_map</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">pure_bind</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">pure_seq</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">seqLeft_eq</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">seqRight_eq</span>    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So it really is a monad. There could still be issues related to the special support for <code>Thunk</code> in runtime which would make it ill-behaved.</p>",
        "id": 321679229,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673886483
    },
    {
        "content": "<p>The compiler does not currently know anything about eliminating <code>Thunk.pure _ &gt;&gt;= _</code>. Which to be fair is mostly an issue if you then go on to define <code>ThunkT</code> and get implicit <code>Thunk.pure</code>s from monad lifting everywhere.</p>",
        "id": 321680164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673886828
    },
    {
        "content": "<p>We could easily add that as a rewrite rule for the new compiler <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 321692660,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673891582
    },
    {
        "content": "<p>So it would be mostly harmless and potentially useful to add.  I made a quick PR to add it in Std.</p>",
        "id": 321698433,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673893964
    }
]