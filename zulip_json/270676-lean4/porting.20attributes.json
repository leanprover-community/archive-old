[
    {
        "content": "<p>Would anyone be able to show me how to implement a no-op attribute?</p>",
        "id": 262415239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637645761
    },
    {
        "content": "<p>There are some attributes, particularly <code>@[simps]</code> used widely in mathlib3, that will need to be ported, but not quite yet.</p>",
        "id": 262415288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637645793
    },
    {
        "content": "<p>In the meantime, I'd like to just have a no-op implementation, in the spirit of getting declarations to type-check even if proofs still fail.</p>",
        "id": 262415301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637645826
    },
    {
        "content": "<p>I've had a look at <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s implemention of <code>@[ext]</code> in mathlib4. It seems he has to do something a bit hacky, because attributes aren't natively supported on structures. It leaves me unsure how to proceed. :-(</p>",
        "id": 262415327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637645875
    },
    {
        "content": "<p>I am not sure exactly what you are asking, but to implement a simple no-op tag attribute all you need to do is just register the attribute. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">noopAttr</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">‚Üê</span>\n  <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">noop</span> <span class=\"s2\">\"Example no-op attribute\"</span>\n</code></pre></div>\n<p>You can then use <code>@[noop]</code> as a tag in a file which imports this definition.</p>",
        "id": 262418688,
        "sender_full_name": "Mac",
        "timestamp": 1637650187
    },
    {
        "content": "<p>The best documentation is the lean4 source code: <a href=\"https://github.com/leanprover/lean4/blob/9ae6380b4332f49d5c4770a011e82de682cde624/src/Lean/Attributes.lean\">https://github.com/leanprover/lean4/blob/9ae6380b4332f49d5c4770a011e82de682cde624/src/Lean/Attributes.lean</a><br>\n(There's even comments!)</p>",
        "id": 262426253,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637656878
    },
    {
        "content": "<p>You can also look at the new nolint attribute for more inspiration.</p>",
        "id": 262426293,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637656908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/porting.20attributes/near/262415327\">said</a>:</p>\n<blockquote>\n<p>I've had a look at <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span>'s implemention of <code>@[ext]</code> in mathlib4. It seems he has to do something a bit hacky, because attributes aren't natively supported on structures. It leaves me unsure how to proceed. :-(</p>\n</blockquote>\n<p>This hack is only relevant for structures.  There's literally check in core that says \"throw an error unless the attribute is `class\" for structures.  I meant to report this, but things got in the way and it was easier to workaround.</p>",
        "id": 262426464,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637657002
    }
]