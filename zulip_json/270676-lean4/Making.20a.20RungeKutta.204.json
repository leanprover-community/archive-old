[
    {
        "content": "<p>Hello all!<br>\nI'm trying to dive again into Lean4.<br>\nI was inspired by this post to make a functional RungeKutta4 function <a href=\"https://www.johndcook.com/blog/2016/06/02/ode-solver-as-a-functional-fold/\">https://www.johndcook.com/blog/2016/06/02/ode-solver-as-a-functional-fold/</a></p>\n<p>So far, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Data</span>\n<span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">):=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"k\">let</span> <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foldl</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My problems are the following:</p>\n<ol>\n<li>I don't know how to import <code>sin</code></li>\n<li>I don't know how to use <code>foldl</code></li>\n<li>I don't know how to use the unit testing facilities</li>\n</ol>",
        "id": 242975409,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623908653
    },
    {
        "content": "<p>Please ping if you are answering, thanks!</p>",
        "id": 242975424,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623908685
    },
    {
        "content": "<p>Does that <code>import Data</code> line actually work for you? I'm getting <code>unknown package Data</code> but that might be my setup</p>",
        "id": 242977280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623910823
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">×</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span> <span class=\"bp\">×</span> <span class=\"n\">Float</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"k\">let</span> <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y.sin</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"n\">rk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 242977507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623911061
    },
    {
        "content": "<p>if you want to open <code>sin</code> instead of using projection notation, you can do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">foldl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">rk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 242977558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623911139
    },
    {
        "content": "<p><code>foldl</code> takes its arguments in the opposite order, so you can either use named arguments like <code>init :=</code> here or else swap the arguments</p>",
        "id": 242977631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623911189
    },
    {
        "content": "<p>and in case you are wondering why you are getting <code>-1.1099</code> instead of <code>-0.9527</code> like the blog post, it's because your definition of <code>f</code> uses <code>y*2</code> instead of <code>y^2</code></p>",
        "id": 242977936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623911517
    },
    {
        "content": "<p>Thanks a ton <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , super helpful as always.</p>",
        "id": 243031680,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623942289
    },
    {
        "content": "<p>Next question:  do I  _need_ to specify the type signature of <code>rk</code> that explicitly?</p>",
        "id": 243031777,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623942316
    },
    {
        "content": "<p>You still have to say that <code>f</code> is a function because lean does not try to guess if a function is dependent or not, but other than that you can do without all the types</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"k\">let</span> <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243077609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623960833
    },
    {
        "content": "<p>the <code>return</code> is not necessary and is bad for type inference</p>",
        "id": 243077798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623960914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span></p>",
        "id": 243077815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623960921
    },
    {
        "content": "<p>Oooh, those are very useful tips, thanks a lot! I didn't know about <code>return</code>.</p>",
        "id": 243078481,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623961206
    },
    {
        "content": "<p>Normally you would use <code>return</code> in a <code>do</code> block, although it's not necessary at the last statement</p>",
        "id": 243079198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623961533
    },
    {
        "content": "<p>If you are just creating lets then you don't need <code>do</code></p>",
        "id": 243079305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623961572
    },
    {
        "content": "<p>Ok, Gotcha.</p>",
        "id": 243079336,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623961590
    },
    {
        "content": "<p>lean 4 has <code>where</code> syntax as well, but it doesn't seem to work with local variables introduced by pattern matching</p>",
        "id": 243079509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623961675
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243079790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623961801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> nice, I had only seen the <code>where</code> for structs and types, so I didn't know how to use it.</p>",
        "id": 243079996,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623961858
    },
    {
        "content": "<p>Hmmm - I can't get the final line to work - here is all my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">foldl</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foldl</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243082853,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623963073
    },
    {
        "content": "<p>the last version changes the type of <code>rk</code>, so you would have to use <code>uncurry (rk f)</code> instead of <code>rk</code> in the eval line</p>",
        "id": 243084437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623963777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">foldl</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">rk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Am I missing an export?</p>",
        "id": 243087019,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623965056
    },
    {
        "content": "<p>The manual really needs some updating.</p>",
        "id": 243099005,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972804
    },
    {
        "content": "<p><code>(uncurry (rk f))</code> needs to be in parentheses since otherwise you are passing <code>uncurry</code> and <code>(rk f)</code> separately to <code>foldl</code>; also <code>uncurry</code> probably doesn't exist in lean 4 yet</p>",
        "id": 243099011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972809
    },
    {
        "content": "<p>I keep wanting a <code>Lean4 by example</code> guide</p>",
        "id": 243099016,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972813
    },
    {
        "content": "<p>that's called the lean 4 source code ATM <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 243099029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972829
    },
    {
        "content": "<p>Even looking at the source code is not too helpful - how do you navigate when you want to see what a function does?</p>",
        "id": 243099084,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972856
    },
    {
        "content": "<p>ctrl-click</p>",
        "id": 243099094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972865
    },
    {
        "content": "<p>Use vscode with the lean 4 extension to look at the lean 4 sources</p>",
        "id": 243099114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972887
    },
    {
        "content": "<p>I'm used to searching for unit tests, but I don't think Lean4 has a good system for that.</p>",
        "id": 243099132,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have Lean3 installed in VSCode and Lean4 on Emacs, and that's after a few days of battle with the nix stuff.</p>",
        "id": 243099150,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972936
    },
    {
        "content": "<p>I don't really get how to keep the installations separate.</p>",
        "id": 243099157,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972947
    },
    {
        "content": "<p>There are unit tests in lean 4 but not enough to be usable as an example guide</p>",
        "id": 243099159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972952
    },
    {
        "content": "<p>thanks for your patience, sorry for being a newbie :(</p>",
        "id": 243099196,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623972963
    },
    {
        "content": "<p>I have the lean 4 extension disabled by default and enabled on specific workspaces (like the lean4 repo)</p>",
        "id": 243099222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623972997
    },
    {
        "content": "<p>Oh that's nice.</p>",
        "id": 243099232,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973014
    },
    {
        "content": "<p>I just want a little package that I can make little examples for.</p>",
        "id": 243099241,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973028
    },
    {
        "content": "<p>Like exercism.</p>",
        "id": 243099243,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973031
    },
    {
        "content": "<p>And start to benchmark different solutions.</p>",
        "id": 243099249,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973039
    },
    {
        "content": "<p>I ran into some issues with lean files getting misinterpreted as lean4 if I don't selectively enable the extension</p>",
        "id": 243099250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973043
    },
    {
        "content": "<p>Understandable.</p>",
        "id": 243099262,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> A bit besides the point, but how likely is Lean5 to completely change Lean4 semantics? Do you find much transition pain from Lean3 to Lean4?</p>",
        "id": 243099325,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973098
    },
    {
        "content": "<p>I have no idea whether lean 5 will exist or what it will do</p>",
        "id": 243099333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> hoo boy.</p>",
        "id": 243099386,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973157
    },
    {
        "content": "<p>there is a lot of transition pain from lean 3 to lean 4, but working on fixing that is literally in my job description at the moment</p>",
        "id": 243099393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Oh neat - where at?</p>",
        "id": 243099404,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973184
    },
    {
        "content": "<p>microsoft research</p>",
        "id": 243099420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973201
    },
    {
        "content": "<p>Oh neat, so I guess there's at least 3 people working on Lean4 now? Kudos!</p>",
        "id": 243099474,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973222
    },
    {
        "content": "<p>heh, I'm not on the core team, but my spirit is</p>",
        "id": 243099501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973263
    },
    {
        "content": "<p>Neat.</p>",
        "id": 243099525,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973299
    },
    {
        "content": "<p>I'm working with <span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> on the mathport tool</p>",
        "id": 243099543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Neat!</p>",
        "id": 243099618,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973365
    },
    {
        "content": "<p>Wait, which extension is the good Lean4 extension?</p>",
        "id": 243099626,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973375
    },
    {
        "content": "<p>mhuisi.lean4 I think</p>",
        "id": 243099663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973413
    },
    {
        "content": "<p>no wait, it's leanprover.lean4 now</p>",
        "id": 243099724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973447
    },
    {
        "content": "<p>By the way, it's easy to write uncurry yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">rk</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243099865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623973602
    },
    {
        "content": "<p>Oh neat.</p>",
        "id": 243099906,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973664
    },
    {
        "content": "<p>Ugh, I'm stuck in elan hell again.</p>",
        "id": 243099909,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973675
    },
    {
        "content": "<p>Alright, not worth my sanity to fight this package manager today. thanks though!</p>",
        "id": 243100163,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623973881
    },
    {
        "content": "<p>That uncurry doesn't work btw</p>",
        "id": 243100406,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623974094
    },
    {
        "content": "<p>full example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">k3</span> <span class=\"bp\">+</span> <span class=\"n\">k4</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n  <span class=\"n\">k1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n  <span class=\"n\">k2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k1</span><span class=\"o\">)</span>\n  <span class=\"n\">k3</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n  <span class=\"n\">k4</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y.sin</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">rk</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243100530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623974175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> mmmmm nope, not on my <code>leanprover/lean4:4.0.0</code> version.</p>",
        "id": 243103929,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623976794
    },
    {
        "content": "<p>What's the error? I use nightly</p>",
        "id": 243104002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623976831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>unknown declaration '_eval', failed to synthesize instance.</code></p>",
        "id": 243104261,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977079
    },
    {
        "content": "<p>What does <code>#check</code> give in place of <code>#eval</code>?</p>",
        "id": 243104288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977107
    },
    {
        "content": "<p><code>#check</code> is green</p>",
        "id": 243104327,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977148
    },
    {
        "content": "<p>it says:</p>",
        "id": 243104330,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977152
    },
    {
        "content": "<p>what instance was failed to synthesize?</p>",
        "id": 243104393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977178
    },
    {
        "content": "<p><code>foldl (uncurry (rk f)) (0.0 sorryAx Float) #[num1, num2, num3, num4] 0</code></p>",
        "id": 243104400,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977184
    },
    {
        "content": "<p>Oh, it's probably <code>Repr Float</code></p>",
        "id": 243104402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977185
    },
    {
        "content": "<p>oh wait that looks bad</p>",
        "id": 243104414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977202
    },
    {
        "content": "<p>where did <code>num1</code> come from?</p>",
        "id": 243104455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977237
    },
    {
        "content": "<p>are you using the code as written?</p>",
        "id": 243104463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977246
    },
    {
        "content": "<p>Sorry, I got lazy. The full array is:</p>",
        "id": 243104472,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977262
    },
    {
        "content": "<p><code>#[ 1e-2, 3e-2, 4e-2, 6e-2]</code></p>",
        "id": 243104486,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977279
    },
    {
        "content": "<p>Could you post the code as written and the output as printed?</p>",
        "id": 243104546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977307
    },
    {
        "content": "<p>here ya go</p>",
        "id": 243104611,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977366
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://imgur.com/WEatQq4.png\"><img src=\"https://uploads.zulipusercontent.net/10e14ec6b0cf6d65fefd7a15e3a662974bd39fef/68747470733a2f2f696d6775722e636f6d2f574561745171342e706e67\"></a></div>",
        "id": 243104613,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977368
    },
    {
        "content": "<p>oh, that makes a lot more sense with the comma</p>",
        "id": 243104716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977424
    },
    {
        "content": "<p>it's saying <code>-1.0</code> has an instance problem</p>",
        "id": 243104723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977432
    },
    {
        "content": "<p>so it's probably missing <code>Neg Float</code></p>",
        "id": 243104736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977441
    },
    {
        "content": "<p>and that probably happened some time after 4.0.0 (which is pretty old)</p>",
        "id": 243104763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977463
    },
    {
        "content": "<p>OK, if I swap <code>-1.0 -&gt; 1.0</code> Everything works!</p>",
        "id": 243104792,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977490
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 243104797,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977492
    },
    {
        "content": "<p>I ... don't know how to update the Lean4 here.</p>",
        "id": 243104804,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977504
    },
    {
        "content": "<p><code>elan update leanprover/lean4:nightly</code></p>",
        "id": 243104822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977516
    },
    {
        "content": "<p>I tried to <code>elan update</code> but I got a 404 download error.</p>",
        "id": 243104825,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977517
    },
    {
        "content": "<p>Oh what... now it's downloading.</p>",
        "id": 243104886,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977548
    },
    {
        "content": "<p>Must've mixed up some flags.</p>",
        "id": 243104897,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977566
    },
    {
        "content": "<p>Also, the failed to synthesize instance message should say more about the missing instance if you look at the error detail</p>",
        "id": 243104945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977623
    },
    {
        "content": "<p>Well, I don't get any output in the <code>#eval 2+2</code> now <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 243105077,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977730
    },
    {
        "content": "<p>maybe restart the editor</p>",
        "id": 243105083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623977743
    },
    {
        "content": "<p>(This is Lean4 in Doom emacs.)</p>",
        "id": 243105092,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977749
    },
    {
        "content": "<p>Lemme do that restart.</p>",
        "id": 243105095,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977754
    },
    {
        "content": "<p>Hmm no luck.</p>",
        "id": 243105384,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623977980
    },
    {
        "content": "<p>You know what? The easiest way to set this up is just using the TBA gitpod setup by <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> .</p>",
        "id": 243106214,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623978714
    },
    {
        "content": "<p>Oh, you also have to update the extension</p>",
        "id": 243106641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623979175
    },
    {
        "content": "<p>the communication protocol also changes by lean version</p>",
        "id": 243106698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623979205
    }
]