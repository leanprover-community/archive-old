[
    {
        "content": "<p>While waiting for linarith, is there a clean way to \"rewrite\" a subterm of an inequality if you have an upper bound on it? Something like <code>x &lt;= f y</code> and <code>y &lt;= z</code> ==&gt; <code>x &lt;= f z</code> where <code>f</code> is only ring operations on <code>Nat</code>?</p>",
        "id": 283832497,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653448250
    },
    {
        "content": "<p>(And I guess a tack-on question, how close is linarith to being available?)</p>",
        "id": 283832523,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653448316
    },
    {
        "content": "<p>I don't see any tactic in Lean 3 that would do this either. Maybe linarith was always used in those cases. Would such a tactic be useful? Seems like a fun project to learn metaprogramming with :)</p>",
        "id": 283921085,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653502576
    },
    {
        "content": "<p>I had a proof somewhere that a polynomial with coefficients in ℕ is always monotone and strictly monotone if nonconstant in Lean3.  I'm not sure if I PRed it, nor whether it would be useful for Lean4 at the moment...</p>",
        "id": 283921690,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653502868
    },
    {
        "content": "<p>I can look it up again, but I'm not going to be at a computer again today.</p>",
        "id": 283921729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653502890
    },
    {
        "content": "<p>And then I would need a metaprogram that looks at the goal and extracts the polynomial function of the term</p>",
        "id": 283935675,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653510111
    },
    {
        "content": "<p>Incidentally, I also wrote this, but again in Lean3 and this is certainly did not PR!</p>",
        "id": 283938291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653511609
    },
    {
        "content": "<p>Being in Lean3 is no problem, I'll figure out how to translate it to Lean 4. Send a gist of those two pieces when you get the chance. Thank you!</p>",
        "id": 283942106,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653513696
    },
    {
        "content": "<p>Here is a proof that polynomials with coefficients in <code>ℕ</code> are monotone (and strictly monotone, when non-constant, that you probably do not need):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.monotone</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.inductions</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.polynomial_eval_mono</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f.induction_on</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">eval_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">monotone_const</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">monotone.add</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha.mul</span> <span class=\"n\">monotone_id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">nat.zero_le</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.polynomial_eval_strict_mono</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat_degree_ne_zero_induction_on</span> <span class=\"n\">hf</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hf</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">strict_mono.const_add</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">strict_mono.add</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">a0</span> <span class=\"n\">n0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eval_monomial</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">strict_mono.const_mul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"n\">a0</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">strict_mono_id</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">strict_mono_id.mul</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"n\">n.succ_ne_zero</span><span class=\"o\">)</span> <span class=\"n\">nat.zero_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I will now look for the conversion tool \"polynomial\" to \"eval of a polynomial\"!</p>",
        "id": 283969222,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653539820
    },
    {
        "content": "<p>Ok, I found the conversion!  It probably needs quite a bit of further testing, but you can see an example where it works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.list_vars</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.list_vars</span> <span class=\"bp\">++</span> <span class=\"n\">b.list_vars</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_mul.mul</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.list_vars</span> <span class=\"bp\">++</span> <span class=\"n\">b.list_vars</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"n\">a.list_vars</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"n\">a.list_vars</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_one.one</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_zero.zero</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>           <span class=\"o\">:=</span> <span class=\"n\">a.list_vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>                      <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_poly</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pb</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_mul.mul</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pb</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_mul.mul</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">bit0</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">bit1</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>           <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pa</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_pow.pow</span> <span class=\"o\">[</span><span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_one.one</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">p1</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">p1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_zero.zero</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">p0</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">p0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>                      <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">polynomialize_one</span> <span class=\"o\">(</span><span class=\"n\">tar</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">lv</span> <span class=\"o\">:=</span> <span class=\"n\">tar.list_vars.dedup</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">lv</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"s2\">\"not enough variables\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pX</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.X</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">pol</span> <span class=\"bp\">←</span> <span class=\"n\">to_poly</span> <span class=\"n\">pX</span> <span class=\"n\">tar</span><span class=\"o\">,</span>\n  <span class=\"n\">epol</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">polynomial.eval</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">pol</span><span class=\"o\">],</span>\n  <span class=\"n\">e_eq</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">tar</span><span class=\"o\">,</span> <span class=\"n\">epol</span><span class=\"o\">],</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n  <span class=\"n\">assert</span> <span class=\"n\">n</span> <span class=\"n\">e_eq</span><span class=\"o\">,</span>\n  <span class=\"c1\">--  the list of simp-lemmas may expand.  Once it stabilizes, use `solve_aux` instead</span>\n  <span class=\"bp\">`</span><span class=\"o\">[{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_add</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_bit0</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_bit1</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span>\n        <span class=\"n\">eval_zero</span><span class=\"o\">],</span> <span class=\"n\">done</span> <span class=\"o\">}],</span>\n  <span class=\"n\">nn</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite_target</span> <span class=\"n\">nn</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.clear</span> <span class=\"n\">nn</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"s2\">\"too many variables\"</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">quick</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">rel</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">polynomialize_one</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"n\">polynomialize_one</span> <span class=\"n\">tr</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"not supported\"</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">quick</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.polynomial_eval_mono</span> <span class=\"n\">_</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283993595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653562928
    },
    {
        "content": "<p>If you convert it to Lean4, would you mind sharing the code?  I am trying to learn Lean 4, and this could be a good Rosetta stone for me!</p>",
        "id": 283993653,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653562975
    },
    {
        "content": "<p>Will do :D the proof should be pretty quick, but I don't know any metaprogramming yet so that might have to be a joint learning effort :)</p>",
        "id": 284092114,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653627741
    },
    {
        "content": "<p>Great!  I will be away from lean until Monday, but after that I should be available!</p>",
        "id": 284093224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653629471
    }
]