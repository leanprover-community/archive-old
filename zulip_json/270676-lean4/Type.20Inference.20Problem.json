[
    {
        "content": "<p>I have a scenario where I feel like it should be possible for Lean to infer a type, but it fails.<br>\nThe setup is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">labels</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Schemes</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Values</span> <span class=\"o\">(</span><span class=\"n\">schemes</span> <span class=\"o\">:</span> <span class=\"n\">Schemes</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemes.a.labels</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">schemes.a.type</span> <span class=\"n\">l</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemes.b.labels</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">schemes.b.type</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SchemeM</span> <span class=\"o\">(</span><span class=\"n\">schemes</span> <span class=\"o\">:</span> <span class=\"n\">Schemes</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Values</span> <span class=\"n\">schemes</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Values</span> <span class=\"n\">schemes</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getA</span> <span class=\"o\">{</span><span class=\"n\">schemes</span> <span class=\"o\">:</span> <span class=\"n\">Schemes</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemes.a.labels</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SchemeM</span> <span class=\"n\">schemes</span> <span class=\"o\">(</span><span class=\"n\">schemes.a.type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">values</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">,</span> <span class=\"n\">values.a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That is, <code>getA</code> is an operation in the <code>SchemeM</code> monad which takes a given label <code>l</code> and returns the value for that label.<br>\nThe following demonstrates using this operation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">a₁</span> <span class=\"bp\">|</span> <span class=\"n\">a₂</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">A.scheme</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"n\">type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Empty.scheme</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:=</span> <span class=\"n\">Empty</span>\n  <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nomatch</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exampleSchemes</span> <span class=\"o\">:</span> <span class=\"n\">Schemes</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A.scheme</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Empty.scheme</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SchemeM</span> <span class=\"n\">exampleSchemes</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getA</span> <span class=\"n\">A.a₁</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>The problem is that this fails on the last line with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">getA</span> <span class=\"n\">A.a₁</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">A.a₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.29155.a.labels</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I can fix the issue by explicitly providing the implicit <code>schemes</code> parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SchemeM</span> <span class=\"n\">exampleSchemes</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getA</span> <span class=\"o\">(</span><span class=\"n\">schemes</span> <span class=\"o\">:=</span> <span class=\"n\">exampleSchemes</span><span class=\"o\">)</span> <span class=\"n\">A.a₁</span>\n</code></pre></div>\n<p>But don't understand why type inference is failing, as the return type of the example already explicitly states this (at least according to my vague understanding of how Lean might infer such a parameter). </p>\n<p>Also, if I split up the <code>Schemes</code> and instead write all of the schemes individually, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">labels</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Values</span> <span class=\"o\">(</span><span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemeA.labels</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">schemeA.type</span> <span class=\"n\">l</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemeB.labels</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">schemeB.type</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SchemeM</span> <span class=\"o\">(</span><span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Values</span> <span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Values</span> <span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getA</span> <span class=\"o\">{</span><span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">schemeA.labels</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SchemeM</span> <span class=\"n\">schemeA</span> <span class=\"n\">schemeB</span> <span class=\"o\">(</span><span class=\"n\">schemeA.type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">values</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">,</span> <span class=\"n\">values.a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">a₁</span> <span class=\"bp\">|</span> <span class=\"n\">a₂</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">A.scheme</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"n\">type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Empty.scheme</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span> <span class=\"n\">where</span>\n  <span class=\"n\">labels</span> <span class=\"o\">:=</span> <span class=\"n\">Empty</span>\n  <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nomatch</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SchemeM</span> <span class=\"n\">A.scheme</span> <span class=\"n\">Empty.scheme</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getA</span> <span class=\"n\">A.a₁</span>\n</code></pre></div>\n<p>Is there any way to make the first version work, though?</p>",
        "id": 305367823,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1666362342
    },
    {
        "content": "<p>Right, this is a restriction in how Lean uses the expected type to infer implicit parameters: it only does that when the return type does not mention any explicit parameters. So the presence of <code>l</code> in the return type of <code>getA</code> prevents <code>schemes</code> to be inferred as well. There are a lot of such restrictions documented at <a href=\"https://github.com/leanprover/lean4/blob/9fd433785b35a4a309022db05ec6074da64da209/src/Lean/Elab/App.lean#L273-L310\">https://github.com/leanprover/lean4/blob/9fd433785b35a4a309022db05ec6074da64da209/src/Lean/Elab/App.lean#L273-L310</a>.</p>",
        "id": 305374726,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666364383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> How does the inference of <code>schemeA</code> in the second version of <code>getA</code> work then? The return type also references <code>schemeA.type l</code>.</p>",
        "id": 305379005,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1666365563
    }
]