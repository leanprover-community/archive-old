[
    {
        "content": "<p>In Lean 3, a period can be used to indicate an empty match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">of_tt</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_ff_is_empty</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">empty</span> <span class=\"bp\">.</span>\n</code></pre></div>\n<p>Is there a similar thing in Lean 4? I can make it work using tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">ofTrue</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testFalseIsEmpty</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Since Test has a parameter, using recursors directly is a major pain. Nothing else I tried seems to work.</p>",
        "id": 221635609,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609845729
    },
    {
        "content": "<p>Perhaps I should have waited a few minutes and posted to #lean4</p>",
        "id": 221638542,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1609848119
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/How.20to.20indicate.20empty.20matches.20in.20Lean.204\">#general &gt; How to indicate empty matches in Lean 4</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span></p>",
        "id": 221638608,
        "sender_full_name": "Notification Bot",
        "timestamp": 1609848150
    },
    {
        "content": "<p>I started trying to port logic.basic and got stuck on the very first proof for this reason :)</p>",
        "id": 221638780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609848289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testFalseIsEmpty</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"n\">nomatch</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 221638949,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609848425
    },
    {
        "content": "<p>Zero-case <code>match</code> doesn't exactly work after we removed the <code>end</code> token from it, so a new keyword it is</p>",
        "id": 221638994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609848477
    },
    {
        "content": "<p>We use <code>.</code> in lean3</p>",
        "id": 221639040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609848486
    },
    {
        "content": "<p>Which really is a workaround using a feature no-one uses in any other case. I much prefer this very explicit form.</p>",
        "id": 221639233,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609848686
    },
    {
        "content": "<p>Does it still create equation lemmas? In lean 3 there is a difference between match and def match in the equation lemmas you get out</p>",
        "id": 221639273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609848722
    },
    {
        "content": "<p>Is this equivalent to Agda's solution? They have a separate pattern for impossible matches; in Lean it would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testFalseIsEmpty</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>The paper about Agda's method argued, afair, that having a separate form for this is crucial, particularly when the impossibility only becomes apparent after you've matched on some other things.</p>",
        "id": 221639354,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609848793
    },
    {
        "content": "<p>Obviously we've got by in lean 3 without having to explicitly indicate this, although occasionally lean will miss an impossible case in a dependent pattern match situation like matching on <code>fin 3</code></p>",
        "id": 221639477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609848873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20indicate.20empty.20matches.20in.20Lean.204/near/221639273\">said</a>:</p>\n<blockquote>\n<p>Does it still create equation lemmas? In lean 3 there is a difference between match and def match in the equation lemmas you get out</p>\n</blockquote>\n<p>Equation lemmas are TBD AFAIK. But syntactic equations are expanded to <code>match</code>, so there should not be any difference: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Binders.lean#L415-L442\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Binders.lean#L415-L442</a></p>",
        "id": 221640365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609849559
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> , that is equivalent to Agda's solution.</p>",
        "id": 221695827,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1609877714
    },
    {
        "content": "<blockquote>\n<p>The paper about Agda's method argued, afair, that having a separate form for this is crucial, particularly when the impossibility only becomes apparent after you've matched on some other things.</p>\n</blockquote>\n<p>It is not crucial for Lean since we can have nested (dependent) <code>match</code>-expressions. We also have tactics (i.e., we can always use <code>by cases x</code>).<br>\nI consider this feature as a very low priority.</p>",
        "id": 221698276,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609878971
    },
    {
        "content": "<p>That's fair -- I guess in Lean we can always give the case tree that Agda compiles to. Thanks for the responses!</p>",
        "id": 221699889,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609879919
    }
]