[
    {
        "content": "<p>In Lean 3, there was a neat trick you could use to fold a definition in a proof. You could do <code>rw [&lt;- myDef]</code>. In Lean 4, <code>rw</code> does not seem to be using equational lemmas anymore. Trying the same with <code>simp</code>, you could try <code>simp only [&lt;- myDef]</code> which would give you: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"sc\">'←'</span> <span class=\"n\">modifier</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">myDef'</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">name</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">unfolded</span>\n</code></pre></div>\n<p>Furthermore, it seems like equational lemmas are now declared private so they're not readily available to reference directly in <code>rw</code> or <code>simp</code>. Is there a different way to get the same outcome?</p>",
        "id": 275113818,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647114424
    },
    {
        "content": "<p>Yes, <code>rw</code> is not using equational theorems yet. It is on the TODO list.</p>\n<blockquote>\n<p>it seems like equational lemmas are now declared private </p>\n</blockquote>\n<p>Yes, they are private, and they are generated on demand. Motivation: users that are using Lean as a programming language are not penalized with the performance overhead. </p>\n<blockquote>\n<p>Is there a different way to get the same outcome?</p>\n</blockquote>\n<p>You can force the equational theorems to be regenerated using the following hack.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"generate_eq_thms\"</span> <span class=\"n\">declName</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">section</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">declName</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"n\">generate_eq_thms</span> <span class=\"n\">List.length</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.length._eq_2</span><span class=\"o\">]</span>\n  <span class=\"n\">trace_state</span> <span class=\"c1\">-- lhs was folded</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 275115756,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647117070
    },
    {
        "content": "<p>Nice, thanks! Is it legal to mention <code>List.length._eq_2</code> in <code>rw</code> because you're in the same namespace or does become more generally available once you forced their generation?</p>",
        "id": 275116750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647118547
    },
    {
        "content": "<blockquote>\n<p>does become more generally available once you forced their generation?</p>\n</blockquote>\n<p>This one. The <code>generate_eq_thms</code> command is generating new private theorems, and they are visible in the current file.</p>",
        "id": 275116900,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647118753
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 275117078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647118931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <a href=\"https://github.com/leanprover/lean4/commit/cf0ca026fb2ae24723f325de1cceaaeaeccf3001\">https://github.com/leanprover/lean4/commit/cf0ca026fb2ae24723f325de1cceaaeaeccf3001</a></p>",
        "id": 275119001,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647122054
    },
    {
        "content": "<p>Awesome! Thanks a lot!</p>",
        "id": 275119069,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647122204
    },
    {
        "content": "<p>One question about your implementation: any reason not to use <code>getUnfoldEqnFor?</code> as well, possibly as a fallback if <code>getEqnsFor?</code> doesn't turn up anything?</p>",
        "id": 275120786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647125277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Not sure if people use stuff such as <code>repeat rw [f]</code>. If we also apply the unfold theorem, it may produce nontermination.<br>\nBTW, we have an <code>unfold</code> tactic in Lean 4 for applying the unfold theorems.</p>",
        "id": 275121163,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647125962
    },
    {
        "content": "<p>This might be a good place to borrow from ssreflect. It gives you a bunch of ascii decorations in <code>rewrite</code> and one of them is <code>! myLemma</code> (or <code>3 ! myLemma</code>). That should make <code>repeat rw [f, g, h]</code> less commonly necessary and gives you the opportunity, when using <code>!</code> with a definition, to just refuse to use the unfold lemma.</p>",
        "id": 275121482,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647126396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I am bored today, but not bored enough to implement these decorations :)</p>",
        "id": 275121766,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647126925
    },
    {
        "content": "<p>Haha! I'm sure something better will come up! It's on my list anyway but nowhere near the top</p>",
        "id": 275122048,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647127412
    }
]