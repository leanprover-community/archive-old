[
    {
        "content": "<p>I see there are some concurrency and I/O primitives in Lean4. I haven't digested it yet but I think <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L101\"><code>asTask</code> </a> is sorta like the <code>go</code> statement of <a href=\"https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/\">go statement considered harmful</a>, and <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L114\"><code>Task</code></a> is a structured primitive?</p>",
        "id": 236119403,
        "sender_full_name": "Iocta",
        "timestamp": 1619411951
    },
    {
        "content": "<p>I think it is like the <code>go</code> statement but I disagree with the argument that such a primitive should not be exposed to the language. (I don't think that blogger's views are shared by the majority of language designers.) It is possible to build a scoped thread model on top of the task primitives if you want, but as long as they can be safely and purely exposed I don't see any reason to avoid giving users access to the thread spawn function. (Plus <code>asTask</code> isn't even a pure function so that is even less applicable.)</p>",
        "id": 236127696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619419861
    },
    {
        "content": "<blockquote>\n<p>I don't think that blogger's views are shared by the majority of language designers.</p>\n</blockquote>\n<p>It's a relatively newish idea, but <a href=\"https://kotlinlang.org/docs/coroutines-basics.html\">Kotlin</a>, <a href=\"https://forums.swift.org/t/concurrency-structured-concurrency/41622\">Swift</a>, and <a href=\"https://cr.openjdk.java.net/~rpressler/loom/loom/sol1_part2.html#structured-concurrency\">Java</a> are moving that way or have already.</p>",
        "id": 236128312,
        "sender_full_name": "Iocta",
        "timestamp": 1619420372
    },
    {
        "content": "<p>Actually, looking at the lean 4 code a bit more I think there are actually two kinds of tasks represented by the type <code>Task A</code>. One is pure tasks created by <code>Task.mk</code>. The only thing you can do with these tasks is map/bind them and block on them with <code>Task.get</code>, and they are terminated when the task handle is dropped. So the comparison to <code>go</code> is not correct in this case, because they do not outlive the function</p>",
        "id": 236128327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420385
    },
    {
        "content": "<p>The second kind of task is IO tasks created by <code>asTask</code> and manipulated with the other IO task operations like <code>wait</code> and <code>cancel</code>. These do outlive their caller and so act like <code>go</code>, but it is not difficult to set up a scoped thread approach for them as mentioned</p>",
        "id": 236128786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420508
    },
    {
        "content": "<p>(<a href=\"https://github.com/JuliaLang/julia/issues/33248\">Julia</a>'s talking implementation too)</p>",
        "id": 236128793,
        "sender_full_name": "Iocta",
        "timestamp": 1619420515
    },
    {
        "content": "<p>I don't think any of those examples have nurseries as their <em>only</em> thread primitive, which is what the blogger is talking about</p>",
        "id": 236128882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420565
    },
    {
        "content": "<p>I rather like scoped threads but I don't think they should be the only option</p>",
        "id": 236128902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420581
    },
    {
        "content": "<p><code>Task</code>s are just standard futures available in virtually any stdlib, not structured concurrency</p>",
        "id": 236128956,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619420597
    },
    {
        "content": "<p>The version of scoped threads I'm familiar with from rust is <a href=\"https://docs.rs/crossbeam/0.8.0/crossbeam/fn.scope.html\"><code>crossbeam::scope</code></a></p>",
        "id": 236129078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420697
    },
    {
        "content": "<p>I want to emphasize that this is a library implemented <em>outside</em> the stdlib</p>",
        "id": 236129109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619420722
    },
    {
        "content": "<p>that seems a bit backwards to me. The normal case should be structured, so you need to go out of your way, like adding <code> unstructured </code> or at least an annoyingly long name like <code>IO._spawn_task_without_supervision</code> to do the less-disciplined thing. All the old languages have to support old code, and it's not easy to refactor an unsupervised-task application into structured format (\"callbacks all the way down\") so they provide easy ways to keep existing code running. But new languages can make their normal primitive safer and easier to use. </p>\n<p>Fwiw there are some nice testimonials which I treat as anecdotal evidence, a particularly choice one about the Trio structured concurrency library <a href=\"https://gitter.im/python-trio/general?at=5b53f400e06d7e74099420fb\">is from</a> Donald Stufft who runs the Python Package Index <a href=\"https://pypi.org\">https://pypi.org</a> </p>\n<blockquote>\n<p>I've written Linehaul in uh<br>\nTwisted, gevent, and asyncio<br>\nand now trio<br>\ntrio is the first one I feel like I can actually follow the code without my head hurting<br>\n(and that includes the fact the trio one is also way more configurable and robust, and has retries and everything that none of the others did)</p>\n</blockquote>",
        "id": 236130535,
        "sender_full_name": "Iocta",
        "timestamp": 1619421689
    },
    {
        "content": "<p>Do you actually have an API in mind?</p>",
        "id": 236131382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619422262
    },
    {
        "content": "<p>The designs from imperative languages with exceptions don't transfer especially well</p>",
        "id": 236131426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619422292
    },
    {
        "content": "<p>In particular, \"unstructured\" futures aren't unsafe in the type safety sense</p>",
        "id": 236131540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619422358
    },
    {
        "content": "<p>and the problems with catching exceptions and cancellation in trio don't seem to apply</p>",
        "id": 236131614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619422409
    },
    {
        "content": "<p>I don't have a particular design in mind, but looking around at implementations in haskell, rust, swift, etc may yield some</p>",
        "id": 236132143,
        "sender_full_name": "Iocta",
        "timestamp": 1619422750
    },
    {
        "content": "<p><a href=\"https://blog.softwaremill.com/happy-eyeballs-algorithm-using-zio-120997ba5152\">here's an implementation of happy eyeballs</a> in <a href=\"https://zio.dev/docs/datatypes/core/zio\">scala ZIO</a></p>",
        "id": 236132775,
        "sender_full_name": "Iocta",
        "timestamp": 1619423133
    },
    {
        "content": "<p>the ZIO example doesn't use scoped threads, it seems to be all combinators</p>",
        "id": 236133403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619423494
    },
    {
        "content": "<p>which again don't have to be part of lean core</p>",
        "id": 236133428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619423514
    },
    {
        "content": "<p>the Haskell <a href=\"https://hackage.haskell.org/package/ki\"><code>ki</code></a> library seems to be a better fit for scoped threads in pure functional languages like lean, but I'm not sure the <code>Task</code> primitive is low level enough to support it - one needs to be able to store type erased tasks (i.e. <code>ThreadId</code> in haskell) and be able to cancel tasks using the type erased handle</p>",
        "id": 236133821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619423711
    },
    {
        "content": "<p>I haven't tested but you might be able to cheat by casting a <code>Task A</code> to <code>Task Unit</code> and hopefully <code>IO.cancel</code> doesn't care that the types don't match</p>",
        "id": 236133990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619423798
    },
    {
        "content": "<p>It is worth mentioning at this point that Lean's compiled C code uses <code>goto</code>? XD</p>",
        "id": 236236861,
        "sender_full_name": "Mac",
        "timestamp": 1619468505
    },
    {
        "content": "<p>My point here is about this statement:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/270676-lean4/topic/structured.20concurrency/near/236130535\">said</a>:</p>\n<blockquote>\n<p>that seems a bit backwards to me. The normal case should be structured, so you need to go out of your way, like adding <code> unstructured </code> or at least an annoyingly long name like <code>IO._spawn_task_without_supervision</code> to do the less-disciplined thing.</p>\n</blockquote>\n<p>I would argue it is generally the other way around.  A language primitive should be <strong>primitive</strong>. It should reflect the actual bare-metal implementation as closely as possible. Higher order structures should come later. However, I do agree with your approach of using naming conventions to highlight more primitive operations (Haskell, for example, does this by appending hashtags to its primitive operations).</p>\n<p>It is also worth noting that Lean is not a structured imperative language unlike many of the other languages (like Kotlin, Swift, Java, and even Julia to an extent) you mentioned, thus concepts do not necessarily carry over so easily.</p>",
        "id": 236237840,
        "sender_full_name": "Mac",
        "timestamp": 1619468998
    }
]