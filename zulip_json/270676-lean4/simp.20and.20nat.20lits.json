[
    {
        "content": "<p>I've been noticing some instances where simp occasionally fails to simplify <code>0+n</code> to <code>n</code> such as here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>I found this unusual since <code>Nat.zero_add</code> is a simp lemma! I figured that this was because <code>Nat.zero_add</code> uses the notation <code>0</code> instead of <code>Nat.zero</code>, as illustrated by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>\n<p>So I added this simp lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_add'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_add</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now everything works swimmingly but something about the original issue that still bothers me.</p>\n<p>Although, <code>Nat.zero_add</code> only hooks on the notation <code>0</code>, there is the simp lemma <code>Nat.zero_Eq: Nat.zero = 0</code> to work around that. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- fails (expected)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_Eq</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works (expected)</span>\n</code></pre></div>\n<p>However, <code>Nat.zero_Eq</code> doesn't always trigger as expected as illustrated by these examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works (expected)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- fails (expected)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_Eq</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works (expected)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_Eq</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- fails (unexpected!)</span>\n</code></pre></div>\n<p>So it seems that some intermediate form of zero is generated when unifying <code>1</code> with <code>Nat.succ _</code> and that intermediate form doesn't trigger <code>Nat.zero_Eq</code>.</p>\n<p>Interestingly, there are no issues at all when using <code>Nat.zero_add'</code> instead of <code>Nat.zero_add</code> (and <code>Nat.zero_Eq</code> is no longer needed anywhere).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add'</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add'</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add'</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add'</span><span class=\"o\">,</span> <span class=\"n\">eqSelf</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>\n<p>What is really going on here?</p>",
        "id": 244696716,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1625229903
    },
    {
        "content": "<p>PS: This also works like the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_add'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">no_index</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_add</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 244697568,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1625230406
    },
    {
        "content": "<p>Weirdly interesting...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.zero_Eq</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_eq</span> <span class=\"o\">:</span> <span class=\"n\">no_index</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 244699233,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1625231212
    },
    {
        "content": "<p>Apparently the intermediate form is a raw nat literal which doesn't match <code>Nat.zero</code> nor <code>0</code>. I submitted <a href=\"https://github.com/leanprover/lean4/issues/561\">an issue</a>.</p>",
        "id": 245349396,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1625767555
    }
]