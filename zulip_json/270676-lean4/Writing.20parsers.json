[
    {
        "content": "<p>I've got a couple of related questions about manually-defined parsers (via <code>def myParser : Parser := ...</code>):</p>\n<ol>\n<li>What are the rules around using functions that return parsers within <code>syntax</code> declarations? For example, something like <code>sepByIndent ident \", \" (allowTrailingSep := true)</code> doesn't seem to work in that context, but <code>many(p)</code> is ok (but not <code>many p</code>).  (I couldn't find any info on this in the metaprogramming book.)</li>\n<li>If your parser is too complicated for <code>syntax</code>, how do you then match on syntax that gets parsed by itâ€”or even just extract various pieces? For example, how would you extract the syntax consumed by <code>sepByIndent ...</code> and act on it, say, during elaboration?</li>\n<li>Can you use parsers in antiquotations somehow? For example in <code>$x:ident</code>, <code>ident</code> is a parser; but how do we use more complicated expressions that evaluate to parsers?</li>\n</ol>",
        "id": 307635493,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667432149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> provided one possible answer to number 3 implicitly in <a href=\"#narrow/stream/270676-lean4/topic/Creating.20SyntaxNodeKinds.20for.20parsers\">Creating SyntaxNodeKinds for parsers</a>: if you give a name to your parser using <code>def</code> with <code>leading_parser</code>, i.e. <code>def myParser : Parser := leading_parser ...</code>, then antiquotations of the form<code>$x:myParser</code> will be automatically usable. (Thanks!)</p>",
        "id": 307645894,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667440646
    },
    {
        "content": "<p>To answer your other questions.  Iirc you can use any Parser in a ParserDescr (what <code>syntax</code> produces).  The other way around doesn't work (without criminal energy)</p>",
        "id": 307650289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667444956
    },
    {
        "content": "<p>Parser combinators like many1 work in ParserDescr if you export them using <code>register_parser_alias</code></p>",
        "id": 307651669,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446248
    },
    {
        "content": "<p>That only works for <code>Parser -&gt; Parser</code> and <code>Parser -&gt; Parser -&gt; Parser</code> though.</p>",
        "id": 307651710,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446299
    },
    {
        "content": "<p>sepBy is hard coded</p>",
        "id": 307651721,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446316
    },
    {
        "content": "<p>As for 2: antiquotations are part of the parser. sepBy <em>also</em> parses <code>$x,*</code> and <code>$[x],*</code>.</p>",
        "id": 307651838,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446430
    },
    {
        "content": "<p>For those strings the parser simply produces an antiquotation node.</p>",
        "id": 307651894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446458
    },
    {
        "content": "<p>The syntax matches are hard coded iirc.  You can't define your own antiquotation with a <code>HashMap Name Term</code> for example.</p>",
        "id": 307651967,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667446540
    },
    {
        "content": "<p>The antiquotation kinds do not directly correspond to parsers but to invocations of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.mkAntiquot#doc\">docs4#Lean.Parser.mkAntiquot</a>. <code>syntax :=</code> and <code>leading_parser</code> implicitly introduce this parser, yes.</p>",
        "id": 307682443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667466362
    },
    {
        "content": "<p>That's all very useful info! Thanks! :)</p>",
        "id": 307802715,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667497522
    }
]