[
    {
        "content": "<p>I have some code of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">complicated</span> <span class=\"n\">expr</span><span class=\"bp\">;</span>\n<span class=\"n\">y</span>\n</code></pre></div>\n<p>and would like to pattern match on the value of <code>x</code>. Is there a nice shorthand to use <code>generalize</code> or some other tactic for this, as I'm struggling to just get it to match the LHS of the <code>let</code>-statement</p>",
        "id": 287856050,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1656510561
    },
    {
        "content": "<p>Note that <code>y</code> depends on <code>x</code> here</p>",
        "id": 287856113,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1656510587
    },
    {
        "content": "<p>Can you give a concrete example? Do you mean something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_add</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 287865652,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656514192
    },
    {
        "content": "<p>I didn't know you could use <code>intro</code> that way; but I was thinking more</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 287866153,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1656514360
    },
    {
        "content": "<p>Ok, so like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">47</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">42</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span>\n  <span class=\"k\">show</span> <span class=\"n\">x'</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">47</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't know any way to avoid repeating the \"complicated expr\" (in my example <code>42</code>). Is that what you are asking?</p>",
        "id": 287867985,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656514972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> yep; in this case it's this massive abomination post-<code>simp</code></p>",
        "id": 287868052,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1656515000
    },
    {
        "content": "<p>Do you know about <code>simp (config := { zeta := false })</code>?</p>",
        "id": 287868566,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656515178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> no; but it didn't help; the LHS of the let-statement is obtained by <code>dsimp</code> which for some reason doesn't seem to zeta-expand anyways</p>",
        "id": 287934821,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1656539007
    },
    {
        "content": "<blockquote>\n<p>dsimp which for some reason doesn't seem to zeta-expand anyways</p>\n</blockquote>\n<p>I fixed this issue <a href=\"https://github.com/leanprover/lean4/commit/a639eb185cab63adac2616486c2239a796b7b066\">https://github.com/leanprover/lean4/commit/a639eb185cab63adac2616486c2239a796b7b066</a></p>\n<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> Could you please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 288171105,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656683093
    }
]