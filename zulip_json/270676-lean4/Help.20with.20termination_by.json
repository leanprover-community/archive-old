[
    {
        "content": "<p>I have the following type of <code>Term</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to define and evaluation function on <code>Term</code>s in two steps.<br>\nFirst, I define a single evaluation step (which fails if we try to evaluate an <code>ite</code> with a number as condition):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval₁</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">eval₁</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cond'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ite</span> <span class=\"n\">cond'</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Second, I define a full evaluation by recursion on the single-step evaluation function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t.eval₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t'.eval</span>\n</code></pre></div>\n<p>For the <code>eval</code> function, Lean can't prove termination by itself.<br>\nI know that <code>termination_by</code> exists, but how could I use that (and possible <code>decreasing_by</code>) to show termination here?<br>\nDoes it somehow involve <code>SizeOf</code>?</p>",
        "id": 288403680,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656937870
    },
    {
        "content": "<p>You would use <code>termination_by eval t =&gt; t</code> in order to indicate to Lean that you wish to proof termination by showing that <code>t</code>'s size decreases every step, it will then tell you that it is missing  <code>sizeOf t' &lt; sizeOf t</code> in the ite case which you can give it by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t.eval₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">t'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">t'.eval</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 288405439,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656938841
    },
    {
        "content": "<p>However you will fail to perform this proof since your function does not terminate, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">14</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which will endlessly loop. This will become evident in the proof when you arrive in the case where your input expression was a <code>ite</code> and the condition was a <code>nat</code>, after fully simplifying it presents you with <code>False</code> since you'd have to proof that <code>sizeOf t &lt; sizeOf t</code> in this special case.</p>",
        "id": 288405666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656938953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/288405666\">said</a>:</p>\n<blockquote>\n<p>However you will fail to perform this proof since your function does not terminate, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">14</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which will endlessly loop. This will become evident in the proof when you arrive in the case where your input expression was a <code>ite</code> and the condition was a <code>nat</code>, after fully simplifying it presents you with <code>False</code> since you'd have to proof that <code>sizeOf t &lt; sizeOf t</code> in this special case.</p>\n</blockquote>\n<p>Oh thanks! I was struggling with the proof right now <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 288406007,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656939160
    },
    {
        "content": "<p>You could go full C style here and say that a nat condition evals to true if it is not equal to 0 to avoid this^^</p>",
        "id": 288406223,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656939302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/288406223\">said</a>:</p>\n<blockquote>\n<p>You could go full C style here and say that a nat condition evals to true if it is not equal to 0 to avoid this^^</p>\n</blockquote>\n<p>Haha, I've decided to go with this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval₁</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">eval₁</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cond'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ite</span> <span class=\"n\">cond'</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 288406284,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656939346
    }
]