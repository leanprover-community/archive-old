[
    {
        "content": "<p>I'd like to compute an import adjacency Matrix for doc-gen4 to generate the <code>Imported By</code> and <code>Import</code> parts of the internal navbar. My idea was to somehow obtain the module names that are imported per module and then use the module indices to build an adjacency matrix based on that and use it for said purpose.</p>\n<p>I dug a bit into how the original doc gen does it and it seems there exists a function that can extract an <code>Environment</code> which only represents a single module and then I can just check the imports in that <code>Environment</code> and am done. So I went to search for a similar function in Lean 4 but I couldn't find one so far, does there exist something like this or maybe another way to do what I want?</p>",
        "id": 268126081,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642253700
    },
    {
        "content": "<p>No, doc-gen simply calls <code>lean --deps</code> <a href=\"https://github.com/leanprover-community/doc-gen/blob/3f7734b267ac8119565c9e833e50da16a457e1c7/print_docs.py#L325\">https://github.com/leanprover-community/doc-gen/blob/3f7734b267ac8119565c9e833e50da16a457e1c7/print_docs.py#L325</a></p>",
        "id": 268133943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642264394
    },
    {
        "content": "<p>Ah I was looking at how they do the tactic imported by things: <a href=\"https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L362-L372\">https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L362-L372</a></p>",
        "id": 268134690,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642265317
    },
    {
        "content": "<p>Does this mean without the source files it is impossible to determine which inputs are done, based exclusively on the <code>.olean</code>s?</p>",
        "id": 268134795,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642265417
    },
    {
        "content": "<p><code>readModuleData</code> has the information, but <code>importModules</code> currently discards it except for the main module</p>",
        "id": 268134916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642265575
    },
    {
        "content": "<p>So basically if I wanted to do this with just the oleans we would have to modify <code>Environment</code> to already contain the import data for each module, maybe as a <code>Array (Array ModIdx)</code> (with the outer array being indexed by the module indices as well) and let <code>importModules</code> construct said map based on the <code>readModuleData</code> output? Would that be a reasonable change or should I just use <code>lean --deps</code> on the source files as well?</p>",
        "id": 268135443,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642266095
    },
    {
        "content": "<p>It would not be unreasonable to just expose the <code>Array ModuleData</code> from <code>ImportState</code> in <code>EnvironmentHeader</code>. They are not freed anyway, so there is no overhead.</p>",
        "id": 268135735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642266436
    },
    {
        "content": "<p>I'll get to it!</p>",
        "id": 268136150,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642266926
    }
]