[
    {
        "content": "<p>Why does this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Instruction</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Block</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">index</span>\n</code></pre></div>\n<p>But this doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Instruction</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Block</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">index</span>\n</code></pre></div>\n<p>And what can I do to fix it? I'm trying to translate a haskell program.</p>",
        "id": 277869646,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1649161790
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> is a reference for how backticks work for quoting code on Zulip</p>",
        "id": 277870026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649161940
    },
    {
        "content": "<p>If you put <code>index</code> in that position, it is fixed for the whole definition. You can make it <del>a parameter</del> an <em>index</em> of the inductive type instead, which allows you to substitute it (but puts your definition in <code>Type 1</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Instruction</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Block</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Instruction</span> <span class=\"n\">index</span>\n</code></pre></div>",
        "id": 277870234,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649162042
    },
    {
        "content": "<p>Oh, so this means I need to use universe arguments.</p>",
        "id": 277870578,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1649162169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484617\">Sébastien Michelland</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20definition/near/277870234\">said</a>:</p>\n<blockquote>\n<p>You can make it a parameter of the inductive type instead</p>\n</blockquote>\n<p>What you're describing (<code>index</code> after the colon) is an index; Anders' version (<code>index</code> before the colon) is a parameter. Sorry about the nitpicking but it seems necessary here to avoid confusion.</p>",
        "id": 277870639,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1649162197
    },
    {
        "content": "<p>You're right! I should have checked, thanks for raising it.</p>",
        "id": 277871152,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649162421
    },
    {
        "content": "<p>note that in later versions of lean 4 it will make things indices / parameters regardless of which side of the colon they are on, it does an analysis instead to see what changes</p>",
        "id": 277882710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649167192
    },
    {
        "content": "<p>actually on testing that seems to be only half true: it will turn indices into parameters but not vice versa</p>",
        "id": 277883115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649167304
    },
    {
        "content": "<p>The following thread is relevant:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Simp.20extension/near/276900758\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Simp.20extension/near/276900758</a></p>",
        "id": 277933726,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649187864
    }
]