[
    {
        "content": "<p>I have a datatype which contains an OptionM.<br>\nThough each individual part of my datatype derives DecidableEq, the proof that the whole datatype is DecidableEq does not go through.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bleh</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">dep</span> <span class=\"o\">:</span> <span class=\"n\">bleh</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">decEq</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">bleh.dep</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">bleh.dep</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bleh2</span> <span class=\"n\">where</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bleh2.eqOfVeq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bleh2</span><span class=\"o\">},</span> <span class=\"n\">Eq</span> <span class=\"n\">a.val</span> <span class=\"n\">b.val</span> <span class=\"bp\">→</span> <span class=\"n\">Eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">congrArg</span> <span class=\"n\">bleh2.mk</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">bleh2</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span>\n <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bleh2.eqOfVeq</span> <span class=\"o\">(</span><span class=\"n\">decEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>At (decEq a b) I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">bleh</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236378237,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619544972
    },
    {
        "content": "<p>There appears to be a missing decidability instance for <code>OptionM</code>. If you add it things work as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bleh</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">dep</span> <span class=\"o\">:</span> <span class=\"n\">bleh</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableEqOption</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bleh2</span> <span class=\"n\">where</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">bleh2</span>\n</code></pre></div>",
        "id": 236379000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619545365
    },
    {
        "content": "<p>Hmm then why did the following run?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">decEq</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">bleh.dep</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">bleh.dep</span> <span class=\"o\">:</span> <span class=\"n\">OptionM</span> <span class=\"n\">bleh</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236379717,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619545657
    },
    {
        "content": "<p>because type ascriptions don't actually change the type of anything, the <code>decEq</code> there is seeing two things of type <code>Option bleh</code> and calling the instance for <code>Option</code></p>",
        "id": 236380370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619545883
    },
    {
        "content": "<p>if you use <code>show OptionM bleh from Option.some bleh.dep</code> instead it should call <code>OptionM</code>'s instance</p>",
        "id": 236380547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619545937
    },
    {
        "content": "<p><code>#check (1:Int) + 1</code><br>\nchanges the type, so I am not sure what you mean</p>",
        "id": 236381103,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619546137
    },
    {
        "content": "<p>Also did you find instDecidableEqOption by looking through the c code?</p>",
        "id": 236381740,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619546399
    },
    {
        "content": "<p>In that case <code>(1:Int)</code> was used to help infer what <code>1</code> means, resulting in something like <code>@One.one Int</code> which has type <code>Int</code></p>",
        "id": 236381812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546414
    },
    {
        "content": "<p>I used <code>#synth</code></p>",
        "id": 236381873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546429
    },
    {
        "content": "<p>I originally tried guessing the name but the naming scheme has changed from lean 3</p>",
        "id": 236381954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546452
    },
    {
        "content": "<p>ok</p>",
        "id": 236382059,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619546496
    },
    {
        "content": "<p>here's an example of how type ascription doesn't actually change the type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"c1\">-- foo : Nat</span>\n<span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"n\">Foo</span> <span class=\"k\">from</span> <span class=\"n\">foo</span> <span class=\"c1\">-- (fun (this : Foo) =&gt; this) foo : Foo</span>\n</code></pre></div>",
        "id": 236382346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546597
    },
    {
        "content": "<p>If <code>Foo</code> wasn't defeq to <code>Nat</code> then the first <code>#check</code> would have failed, but other than that and the side effects of unification it doesn't affect the term</p>",
        "id": 236382509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546658
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">mysorry</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">mysorry</span> <span class=\"n\">_</span> <span class=\"c1\">-- mysorry ?m.17 : ?m.17</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">mysorry</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"c1\">-- mysorry Foo : Foo</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">mysorry</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"c1\">-- mysorry Nat : Nat</span>\n</code></pre></div>\n<p>this is the effect you are seeing with the <code>1:Nat</code> example</p>",
        "id": 236382707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619546746
    },
    {
        "content": "<p>I find it interesting that <code>show Foo from foo</code> creates a lambda and an application.<br>\nDo you have any idea how I would write the instDecidableEqOption proof by hand? Right now it is pushing a proof through the Id monad in a way that seems magical to me.</p>",
        "id": 236383361,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547014
    },
    {
        "content": "<p><code>instDecidableEqOption</code> is just a proof that <code>Option A</code> has decidable equality by cases, the Id monad doesn't come up</p>",
        "id": 236383459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547064
    },
    {
        "content": "<p>The observation here is that <code>OptionM A</code> is defeq to <code>Option A</code>, so the proof that <code>Option A</code> has decidable equality is also the proof that <code>OptionM A</code> has decidable equality</p>",
        "id": 236383525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547103
    },
    {
        "content": "<p>That's because <code>OptionM A</code> is <code>OptionT Id A</code> which is <code>Id (Option A)</code> which is <code>Option A</code></p>",
        "id": 236383612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547129
    },
    {
        "content": "<p>I don't see a proof that Option has decidable equality in the lean files?</p>",
        "id": 236384154,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547341
    },
    {
        "content": "<p>it links to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Option</span>\n</code></pre></div>\n<p>in Init.Data.Option.Basic</p>",
        "id": 236384548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547495
    },
    {
        "content": "<p>The <code>#print</code> proof looks a bit more mysterious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instDecidableEqOption.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I guess it's been erased somehow? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you know what's happening here?</p>",
        "id": 236384696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547571
    },
    {
        "content": "<p>also deriving for OptionM doesn't work</p>",
        "id": 236384757,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547600
    },
    {
        "content": "<p>because \"OptionM is not an inductive type\"</p>",
        "id": 236384845,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547623
    },
    {
        "content": "<p>right, because it's not</p>",
        "id": 236384875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547632
    },
    {
        "content": "<p>which is why I thought I needed a separate proof in the first place</p>",
        "id": 236384905,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547639
    },
    {
        "content": "<p>well, mathlib has a derive handler for defs too, which maybe should be upstreamed to lean 4</p>",
        "id": 236384990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619547669
    },
    {
        "content": "<p>with pp.all true</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instDecidableEqOption.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">_private.Init.Data.Option.Basic.0.decEqOption.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 236385771,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547918
    },
    {
        "content": "<p>maybe it is anonymous because of this private bit</p>",
        "id": 236385827,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547941
    },
    {
        "content": "<p>where I have no idea what inst is</p>",
        "id": 236385945,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619547979
    },
    {
        "content": "<p>that's a variable</p>",
        "id": 236385993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548005
    },
    {
        "content": "<p>oh right</p>",
        "id": 236386011,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548014
    },
    {
        "content": "<p>oof I can't <code>#print _private.Init.Data.Option.Basic.0.decEqOption</code>, this is awkward</p>",
        "id": 236386083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548047
    },
    {
        "content": "<p>Cannot #check  _private.Init.Data.Option.Basic.0.decEqOption</p>",
        "id": 236386224,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548100
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">l___private_Init_Data_Option_Basic_0__decEqOption____x40_Init_Data_Option_Basic___hyg_588____at_instDecidableEqOption___spec__1</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">{</span>\n<span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"n\">x_2</span> <span class=\"bp\">=</span> <span class=\"n\">lean_alloc_closure</span><span class=\"o\">((</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)(</span><span class=\"n\">l___private_Init_Data_Option_Basic_0__decEqOption____x40_Init_Data_Option_Basic___hyg_588____at_instDecidableEqOption___spec__1___rarg</span><span class=\"o\">),</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">return</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 236386513,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548209
    },
    {
        "content": "<p>It's not even visible from inside <code>Init.Data.Option.Basic</code>, it looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">instDecidableEqOption.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">_private.0.decEqOption</span><span class=\"bp\">✝.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>it's double protected, it's got the <code>✝</code> too</p>",
        "id": 236386538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548217
    },
    {
        "content": "<p>does cross mean irreducible?</p>",
        "id": 236386676,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548264
    },
    {
        "content": "<p>it means inaccessible</p>",
        "id": 236386709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548277
    },
    {
        "content": "<p>ok</p>",
        "id": 236386729,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548287
    },
    {
        "content": "<p>as in you can't type the name <code>decEqOption</code> and refer to it</p>",
        "id": 236386737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548292
    },
    {
        "content": "<p>The definition exists, but you need tactic hacks to see it</p>",
        "id": 236386848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548331
    },
    {
        "content": "<p>I wonder why the proof of Option decEq is such a secret</p>",
        "id": 236386880,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548342
    },
    {
        "content": "<p>maybe has to do with the staging?</p>",
        "id": 236386956,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548374
    },
    {
        "content": "<p>I'm guessing this is just done by default in the derive handler</p>",
        "id": 236386959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548375
    },
    {
        "content": "<p>but it is not like the c is generated from the derive handler</p>",
        "id": 236387070,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548414
    },
    {
        "content": "<p>The C has nothing to do with it</p>",
        "id": 236387118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548431
    },
    {
        "content": "<p>The derive handler just made a <code>private def</code></p>",
        "id": 236387207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548450
    },
    {
        "content": "<p>ok</p>",
        "id": 236387253,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548463
    },
    {
        "content": "<p>and private defs are a real pain to look at</p>",
        "id": 236387269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548468
    },
    {
        "content": "<p>let alone prove properties about</p>",
        "id": 236387306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619548483
    },
    {
        "content": "<p>ok, so mystery mostly solved</p>",
        "id": 236387308,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619548483
    },
    {
        "content": "<p>ah, I got so close but <code>printIdCore</code> is private</p>",
        "id": 236388848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549157
    },
    {
        "content": "<p>how did you get closer</p>",
        "id": 236388952,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549198
    },
    {
        "content": "<p>eh, I'll just use homebrew <code>#print</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instDecidableEqOption</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">decEqOption</span> <span class=\"o\">:=</span> <span class=\"n\">d.value</span><span class=\"bp\">!.</span><span class=\"n\">bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">getAppFn.constName</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">decEqOption</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">d.value</span><span class=\"bp\">!</span>\n\n<span class=\"c1\">-- fun {α : Type u_1} (x x_1 : Option α) =&gt;</span>\n<span class=\"c1\">--   match x, x_1 with</span>\n<span class=\"c1\">--   | none, none =&gt; isTrue proof_1</span>\n<span class=\"c1\">--   | none, some x =&gt; isFalse (proof_2 x)</span>\n<span class=\"c1\">--   | some x, none =&gt; isFalse (proof_3 x)</span>\n<span class=\"c1\">--   | some a, some b =&gt; if h : a = b then Eq.ndrec (isTrue (proof_4 a)) h else isFalse (proof_5 a b h)</span>\n</code></pre></div>",
        "id": 236389230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549320
    },
    {
        "content": "<p>oh, and the excavation yielded an unexpected observation: that <code>Eq.ndrec</code> shouldn't be there, it should say <code>isTrue (proof_4 a b h)</code>. Kernel computation can sometimes get stuck on that</p>",
        "id": 236389879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549613
    },
    {
        "content": "<p>what is this <code>let decEqOption := d.value!.bindingBody!.bindingBody!.getAppFn.constName</code></p>",
        "id": 236390134,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549745
    },
    {
        "content": "<p>you use that to get the name which you then search for?</p>",
        "id": 236390281,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549806
    },
    {
        "content": "<p>yeah, we know the name is being used in the definition of <code>instDecidableEqOption</code> so I pull it out of the expr</p>",
        "id": 236390341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549839
    },
    {
        "content": "<p>I see</p>",
        "id": 236390392,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549865
    },
    {
        "content": "<p>there is a fancy tactic for doing this in mathlib</p>",
        "id": 236390400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549868
    },
    {
        "content": "<p>how to search for proof_1</p>",
        "id": 236390498,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549901
    },
    {
        "content": "<p>more digging, of course that's private too</p>",
        "id": 236390523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549914
    },
    {
        "content": "<p>maybe the current name.proof_1</p>",
        "id": 236390552,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549929
    },
    {
        "content": "<p>none of these names can be typed explicitly</p>",
        "id": 236390574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549942
    },
    {
        "content": "<p>they contain numeric components as well as hygiene suffixes</p>",
        "id": 236390615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619549964
    },
    {
        "content": "<p>why shouldn't  it be Eq.ndrec (isTrue ...) h</p>",
        "id": 236390624,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619549969
    },
    {
        "content": "<p>no I see, because the output is a decidability proof</p>",
        "id": 236390778,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550025
    },
    {
        "content": "<p>must end in isTrue or isFalse</p>",
        "id": 236390792,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550033
    },
    {
        "content": "<p>because evaluating that expression to a constructor, i.e. <code>isTrue ...</code>, requires evaluating <code>h</code>, which might not work if <code>h</code> uses an axiom</p>",
        "id": 236390795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550035
    },
    {
        "content": "<p>but a = b is decidable itself?</p>",
        "id": 236391075,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550136
    },
    {
        "content": "<p>and h : a = b</p>",
        "id": 236391124,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550164
    },
    {
        "content": "<p>right, which means <code>h</code> is coming from the decidability proof of <code>DecidableEq A</code> which could be anything</p>",
        "id": 236391135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550170
    },
    {
        "content": "<p>it wouldn't be that unusual for an axiom to come up either, for example the proof of <code>DecidableEq (Bool -&gt; Nat)</code> is surely going to use funext</p>",
        "id": 236391347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550245
    },
    {
        "content": "<p>so the issue is that if you prove a type has dec eq using some axioms, inference of Option dec eq might block?</p>",
        "id": 236391367,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550255
    },
    {
        "content": "<p>right</p>",
        "id": 236391382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550263
    },
    {
        "content": "<p>well not inference but rather computation making use of the derived instance on Option</p>",
        "id": 236391479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550305
    },
    {
        "content": "<p>so Option (Bool -&gt; Nat) cannot have dec eq?</p>",
        "id": 236391482,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550306
    },
    {
        "content": "<p>it has dec eq but <code>if x = x then a else b = a</code> won't be <code>rfl</code> when <code>x</code> has type <code>Option (Bool -&gt; Nat)</code></p>",
        "id": 236391641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550371
    },
    {
        "content": "<p>so if you eval to check if a= b where <code>a b : Option (Bool -&gt; Nat)</code> it will block</p>",
        "id": 236391735,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550414
    },
    {
        "content": "<p>yes (in the kernel, not in C)</p>",
        "id": 236391792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550438
    },
    {
        "content": "<p>ok nice</p>",
        "id": 236391808,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619550448
    },
    {
        "content": "<p>the compiler treats <code>Eq.ndrec</code> like an identity function so it doesn't block and it doesn't compute <code>h</code> either</p>",
        "id": 236391940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619550492
    },
    {
        "content": "<p>I tried to instantiate the same solution for EvalMeta (Option a)</p>",
        "id": 236397915,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553161
    },
    {
        "content": "<p>synth tells me to look for instMetaEval</p>",
        "id": 236397954,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553184
    },
    {
        "content": "<p>but instMetaEval or Lean.instMetaEval does not seem to be in scope</p>",
        "id": 236398016,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553218
    },
    {
        "content": "<p>grepping through lean src is similarly unsuccessful</p>",
        "id": 236398040,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553237
    },
    {
        "content": "<p>trying </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instMetaEval</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">d.value</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>hangs</p>",
        "id": 236398422,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553394
    },
    {
        "content": "<p>make sure you have an up to date installation, the issue with empty messages hanging the server has been fixed recently</p>",
        "id": 236399263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619553743
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">LocalSoftware</span><span class=\"bp\">/</span><span class=\"n\">signatures</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">04</span><span class=\"bp\">-</span><span class=\"mi\">27</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">1</span><span class=\"n\">f05f5bf1193</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236399325,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553781
    },
    {
        "content": "<p>It was fixed in the extension, not Lean</p>",
        "id": 236399462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619553830
    },
    {
        "content": "<p>then the question is which extension -- vscode or emacs (I'm using emacs)</p>",
        "id": 236399628,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228135\">Scott Viteri</span> <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236397954\">said</a>:</p>\n<blockquote>\n<p>synth tells me to look for instMetaEval</p>\n</blockquote>\n<p>how did you do this</p>",
        "id": 236399675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619553910
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetaEval</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MetaEval</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>doesn't seem to work for me</p>",
        "id": 236399725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619553928
    },
    {
        "content": "<p>Ah, it never was an issue in Emacs - it would simply show you the line and column and then an empty message afterwards</p>",
        "id": 236399740,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619553934
    },
    {
        "content": "<p><code>#synth Lean.MetaEval (Option Nat)</code></p>",
        "id": 236399753,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553940
    },
    {
        "content": "<p>Ok, then not my issue</p>",
        "id": 236399787,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553957
    },
    {
        "content": "<p><code>#print instMetaEval</code> reveals that it's actually <code>Lean.instMetaEval</code></p>",
        "id": 236399855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619553974
    },
    {
        "content": "<p>hmm tried it</p>",
        "id": 236399885,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619553988
    },
    {
        "content": "<p>you can also use <code> ``instMetaEval</code> to make name resolution kick in</p>",
        "id": 236399890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619553990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236399740\">said</a>:</p>\n<blockquote>\n<p>Ah, it never was an issue in Emacs - it would simply show you the line and column and then an empty message afterwards</p>\n</blockquote>\n<p>Yep, that's exactly what it's doing for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n\n<span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>No hang</p>",
        "id": 236399963,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619554031
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">instMetaEval</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"a\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">d.value</span><span class=\"bp\">!</span>\n<span class=\"c1\">-- fun {α : Type u} =&gt;</span>\n<span class=\"c1\">--   { eval :=</span>\n<span class=\"c1\">--       fun (env : Lean.Environment) (opts : Lean.Options) (a : α) (hideUnit : Bool) =&gt;</span>\n<span class=\"c1\">--         do</span>\n<span class=\"c1\">--           Lean.Eval.eval (fun (x : Unit) =&gt; a) hideUnit</span>\n<span class=\"c1\">--           pure env }</span>\n</code></pre></div>",
        "id": 236399974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554038
    },
    {
        "content": "<p>Oh, Lean.instMetaEval gives a different error message</p>",
        "id": 236399979,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554042
    },
    {
        "content": "<p>I need to implement Eval as well</p>",
        "id": 236400002,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554054
    },
    {
        "content": "<p>although I'm getting <code>Error: index out of bounds</code> in the output window from something</p>",
        "id": 236400010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554056
    },
    {
        "content": "<p>oh, why does `` make it work in the metaprogram?</p>",
        "id": 236400099,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554091
    },
    {
        "content": "<p>That resolves names in the current namespace / <code>open</code></p>",
        "id": 236400185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554129
    },
    {
        "content": "<p>so since <code>Lean</code> is open it resolves to <code>Lean.instMetaEval</code></p>",
        "id": 236400215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554151
    },
    {
        "content": "<p>(I haven't been showing it but my file has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n</code></pre></div>\n<p>at the top)</p>",
        "id": 236400278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554183
    },
    {
        "content": "<p>btw</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n</code></pre></div>\n<p>is throwing a panic for me, is this already reported?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Elab.Command.getBracketedBinderIds</span> <span class=\"n\">Lean.Elab.Command</span><span class=\"o\">:</span><span class=\"mi\">292</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n</code></pre></div>",
        "id": 236400335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554204
    },
    {
        "content": "<p>Fixed my problems with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instDecidableEqOption</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instToStringOption</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Lean.Eval</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Eval</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Lean.instEval</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Lean.MetaEval</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.MetaEval</span> <span class=\"o\">(</span><span class=\"n\">OptionM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Lean.instMetaEval</span>\n</code></pre></div>",
        "id": 236400531,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236400185\">said</a>:</p>\n<blockquote>\n<p>That resolves names in the current namespace / <code>open</code></p>\n</blockquote>\n<p>Ok, and why does #print succeed when #check does not</p>",
        "id": 236400668,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554355
    },
    {
        "content": "<p>not sure what you mean?</p>",
        "id": 236400783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554420
    },
    {
        "content": "<p>these both work for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n<span class=\"k\">#print</span> <span class=\"n\">instMetaEval</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">instMetaEval</span>\n</code></pre></div>",
        "id": 236400858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554451
    },
    {
        "content": "<p>you need the <code>@</code> in check since otherwise it will try to solve a typeclass problem</p>",
        "id": 236400904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619554479
    },
    {
        "content": "<p>ok that was my problem</p>",
        "id": 236401414,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554720
    },
    {
        "content": "<p>didn't read the error</p>",
        "id": 236401420,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554723
    },
    {
        "content": "<p>actually that is not true -- I just had it open somewhere that didn't have \"open Lean Elab\"</p>",
        "id": 236401591,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619554803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236399963\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/OptionM.20and.20DecEq/near/236399740\">said</a>:</p>\n<blockquote>\n<p>Ah, it never was an issue in Emacs - it would simply show you the line and column and then an empty message afterwards</p>\n</blockquote>\n<p>Yep, that's exactly what it's doing for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n\n<span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>No hang</p>\n</blockquote>\n<p>You are right -- I saw that #eval was not underlined, which made me think it was still computing</p>",
        "id": 236403497,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619555699
    }
]