[
    {
        "content": "<p>I have the following function that I want to execute in constant stack: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">serve</span> <span class=\"o\">(</span><span class=\"n\">receiveMsg</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Request</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">emitMsg</span> <span class=\"o\">:</span> <span class=\"n\">Response</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"bp\">←</span> <span class=\"n\">receiveMsg</span> <span class=\"c1\">-- ping?</span>\n  <span class=\"k\">if</span> <span class=\"n\">msg.stop</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span>\n  <span class=\"n\">emitMsg</span> <span class=\"n\">arbitrary</span> <span class=\"c1\">-- pong</span>\n  <span class=\"n\">serve</span>\n</code></pre></div>\n<p>(In and imperative language this would just be a while loop). Experimentally verified, as compiled right now it's not constant-stack. I'm not an expert in FP but a random StackOverflow answer says that \"A monadic computation that refers to itself is never tail-recursive\" (<a href=\"https://stackoverflow.com/a/13384300\">https://stackoverflow.com/a/13384300</a>), so naive tail call optimization seems to be out. Haskell seems to solve this by being lazy and using some magic called <a href=\"https://en.wikipedia.org/wiki/Tail_call#Tail_recursion_modulo_cons\">tail recursion modulo cons</a>. Since Lean isn't lazy, this probably won't work, at least naively.</p>",
        "id": 231416780,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616469411
    },
    {
        "content": "<p>How did you verify that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"test\"</span>\n  <span class=\"n\">test</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"nf\">l_test</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_2</span><span class=\"p\">;</span> <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_3</span><span class=\"p\">;</span>\n    <span class=\"n\">x_2</span> <span class=\"o\">=</span> <span class=\"n\">l_test___closed__1</span><span class=\"p\">;</span>\n    <span class=\"n\">x_3</span> <span class=\"o\">=</span> <span class=\"n\">l_IO_println___at_Lean_instEval___spec__1</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span> <span class=\"n\">x_1</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lean_obj_tag</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_4</span><span class=\"p\">;</span>\n      <span class=\"n\">x_4</span> <span class=\"o\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">x_4</span><span class=\"p\">);</span>\n      <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">);</span>\n      <span class=\"n\">x_1</span> <span class=\"o\">=</span> <span class=\"n\">x_4</span><span class=\"p\">;</span>\n      <span class=\"k\">goto</span> <span class=\"n\">_start</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"kt\">uint8_t</span> <span class=\"n\">x_6</span><span class=\"p\">;</span>\n      <span class=\"n\">x_6</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">lean_is_exclusive</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x_6</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">x_3</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">else</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_7</span><span class=\"p\">;</span> <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_8</span><span class=\"p\">;</span> <span class=\"n\">lean_object</span><span class=\"o\">*</span> <span class=\"n\">x_9</span><span class=\"p\">;</span>\n        <span class=\"n\">x_7</span> <span class=\"o\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">x_8</span> <span class=\"o\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">x_8</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">x_7</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">);</span>\n        <span class=\"n\">x_9</span> <span class=\"o\">=</span> <span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">x_9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x_7</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">x_9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x_8</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">x_9</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 231432520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616485742
    },
    {
        "content": "<p>By getting a stack overflow when calling that function :) and then looking into generated c. But thanks! Your example looks like a disproof of “A monadic computation that refers to itself is never tail-recursive” and I want to understand this better so I’ll go dig deeper.</p>",
        "id": 231469083,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616505892
    },
    {
        "content": "<p>I get stack overflow here &lt;<a href=\"https://github.com/leanprover/lean4/blob/ffef5635bb49a7221b36c0f56a4ae9fe93d2cb85/src/Lean/Data/Json/Parser.lean#L131-L148\">https://github.com/leanprover/lean4/blob/ffef5635bb49a7221b36c0f56a4ae9fe93d2cb85/src/Lean/Data/Json/Parser.lean#L131-L148</a>&gt; when lean is compiled without optimization (C compiler option), e.g. <code>nix build .#debug</code>.<br>\n(Another issue: the stack overflow handler itself overflows the stack while trying to print message here &lt;<a href=\"https://github.com/leanprover/lean4/blob/0a280793c7b386c7a0b1bb65c3de19dd2c39d814/src/runtime/stack_overflow.cpp#L71\">https://github.com/leanprover/lean4/blob/0a280793c7b386c7a0b1bb65c3de19dd2c39d814/src/runtime/stack_overflow.cpp#L71</a>&gt;)</p>",
        "id": 231518548,
        "sender_full_name": "pcpthm",
        "timestamp": 1616523684
    },
    {
        "content": "<p>Did you mean to link to the Windows handler?</p>",
        "id": 231518925,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523858
    },
    {
        "content": "<p>oops, different line. It is Linux</p>",
        "id": 231518992,
        "sender_full_name": "pcpthm",
        "timestamp": 1616523886
    },
    {
        "content": "<p>Ok. So 5000 bytes are not sufficient for printing a simple message? <span aria-label=\"frowning\" class=\"emoji emoji-1f626\" role=\"img\" title=\"frowning\">:frowning:</span></p>",
        "id": 231519119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523948
    },
    {
        "content": "<p>(I've never seen that happen fwiw)</p>",
        "id": 231519211,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523976
    },
    {
        "content": "<p>Perhaps unoptimized build has larger stack frames?</p>",
        "id": 231519309,
        "sender_full_name": "pcpthm",
        "timestamp": 1616524017
    },
    {
        "content": "<p>It definitely does, but that still sounds excessive</p>",
        "id": 231520088,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616524302
    },
    {
        "content": "<p>Whoops, the 5000 bytes are on Windows</p>",
        "id": 231520236,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616524346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>SIGSTKSZ\n\n    This is the canonical size for a signal stack. It is judged to be sufficient for normal uses.\n</code></pre></div>\n<p>Who are we to judge I guess...</p>",
        "id": 231520428,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616524419
    },
    {
        "content": "<p>If you want to try with <code>2 * SIGSTKSZ</code> or something, please go ahead</p>",
        "id": 231521274,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616524718
    },
    {
        "content": "<p>To reproduce: Let <code>replay.txt</code> be &lt;<a href=\"https://gist.github.com/pcpthm/05203a0004f3415f066bc909732b0ea6\">https://gist.github.com/pcpthm/05203a0004f3415f066bc909732b0ea6</a>&gt; and <code>lean --server &lt; replay.txt</code>, where <code>lean</code> is <code>nix build .#debug</code>.<br>\nAlso whether it is printing the <code>Stack overflow detected. Aborting.</code> message seems nondeterministic (sometimes I only get <code>Aborted (core dumped)</code>).</p>",
        "id": 231521548,
        "sender_full_name": "pcpthm",
        "timestamp": 1616524828
    },
    {
        "content": "<p>Update: solved this by implementing something like <a href=\"https://github.com/purescript/purescript-tailrec\">https://github.com/purescript/purescript-tailrec</a> (though I'm half sure I could have reused ForIn from stdlib for this instead of creating a new class).</p>",
        "id": 231574274,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1616553561
    }
]