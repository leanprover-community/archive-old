[
    {
        "content": "<p>First, I think it's really cool that this works as I expect it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FooBar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">FooBar</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive FooBar.{u_1} : Sort u_1 → Sort (max 1 u_1)</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">FooBar.mk : {α : Sort u_1} → (_toBar : Bar α) → Foo _toBar.bar → FooBar α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>However, I don't understand how to make this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">FooBar.eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">FooBar</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f.bar</span> <span class=\"bp\">=</span> <span class=\"n\">g.bar</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">dependent elimination failed, stuck at auxiliary equation</span>\n<span class=\"cm\">  { toBar := _toBar✝, toFoo := _toFoo✝ }.toBar.1 = { toBar := _toBar✝¹, toFoo := _toFoo✝¹ }.toBar.1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there a reason why this shouldn't work?</p>\n<p>PS: I kind of wish this shorthand worked too but this one seems like more of a rabbit hole.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FooBar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">bar</span> <span class=\"n\">where</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 230470332,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1615880303
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">FooBar.eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">FooBar</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f.bar</span> <span class=\"bp\">=</span> <span class=\"n\">g.bar</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 230475093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882812
    },
    {
        "content": "<p>Of course! I see the <code>.1</code> was the hint in the error message... subtle! Thanks!</p>",
        "id": 230475434,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1615883029
    }
]