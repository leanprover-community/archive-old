[
    {
        "content": "<p>I am trying to infer decidable equality for a defined type by unfolding it. In Lean 3, we'd use <code>unfold</code> and <code>apply_instance</code>. In Lean 4, I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inferInstance</span> <span class=\"o\">(</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>This also works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Does anyone know if there is a better idiom to use?</p>",
        "id": 250007927,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1629389185
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 250008215,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1629389302
    },
    {
        "content": "<p><code>inferInstanceAs</code> is probably what you want.</p>",
        "id": 250008340,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629389377
    },
    {
        "content": "<p>It would be nice to have a <code>deriving</code> handler for this</p>",
        "id": 250009275,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629389809
    },
    {
        "content": "<p>Ah, well, the current API doesn't quite allow for that yet</p>",
        "id": 250009490,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629389910
    },
    {
        "content": "<p>Yes, I am also doing the same thing to transfer <code>Repr</code> instances. But two lines of boilerplate is no problem. I am really enjoying Lean 4.</p>",
        "id": 250009955,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1629390147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/inferInstance/near/250009275\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have a <code>deriving</code> handler for this</p>\n</blockquote>\n<p>Actually, this came up in synport. Lean 3 has a deriving handler for this, the \"delta derive handler\", but lean 4 expects deriving handlers to be associated to a particular typeclass, and I don't see a space for fallback handlers</p>",
        "id": 250013184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629391766
    },
    {
        "content": "<p>In Haskell, this type of deriving strategy is called 'newtype deriving'. Even if the current <code>deriving</code> syntax doesn't support it. I imagine one could write a <code>deriving instance C for A from B</code> to which elaborates to something like <code>instance : C A := inferInstanceAs (C B)</code> (for the unary case). There may even be a away to smartly infer <code>B</code>.</p>",
        "id": 250017513,
        "sender_full_name": "Mac",
        "timestamp": 1629393639
    },
    {
        "content": "<p>But that has to work for all <code>C</code></p>",
        "id": 250017647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629393714
    },
    {
        "content": "<p>Also, the syntax expects a unary typeclass which isn't always the case</p>",
        "id": 250017739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629393743
    },
    {
        "content": "<p>Yeah, my example was just a trivial special case. There would be more nuances to getting it to work properly generally.</p>",
        "id": 250017895,
        "sender_full_name": "Mac",
        "timestamp": 1629393819
    }
]