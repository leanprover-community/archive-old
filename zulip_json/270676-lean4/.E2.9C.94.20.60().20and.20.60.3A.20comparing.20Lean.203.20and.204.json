[
    {
        "content": "<p>Nice, thank you!</p>",
        "id": 318249995,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672231852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> has marked this topic as resolved.</p>",
        "id": 318250716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672232154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, I wonder why was the decision [to turn <code> `() </code> from <code>Syntax</code> to <code>Expr</code>] made in Lean 4?</p>",
        "id": 318355030,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672285103
    },
    {
        "content": "<p>you mean from Expr to Syntax?</p>",
        "id": 318355183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672285252
    },
    {
        "content": "<p>Right, fixed!</p>",
        "id": 318356762,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672286961
    },
    {
        "content": "<p>The backtick operator originated in the LISP family of languages, notably Scheme, and it means more or less \"turn this piece of code I just wrote down into a structured representation of its syntax\". Because the type of Lean 4 syntax is <code>Syntax</code>, it makes more sense to have that as output. This is called a <em>quotation</em> and is written like <code> `(2 + 2)</code>; and there are also <a href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language)#Self-evaluating_forms_and_quoting\">antiquotations</a> which are a bit more powerful because if you already have a value representing some syntax, you can splice it into a quasiquotation using an <em>antiquotation</em> <code>$</code>. Suppose <code>someStx := `(2 + 2)</code>. Then <code> `(fun x =&gt; $someStx)</code> is the same as <code>`(fun x =&gt; 2 + 2)</code>. Lean has full quasiquotation support.</p>",
        "id": 318360928,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1672291751
    },
    {
        "content": "<p>Makes sense, thanks!</p>",
        "id": 318361248,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672292073
    }
]