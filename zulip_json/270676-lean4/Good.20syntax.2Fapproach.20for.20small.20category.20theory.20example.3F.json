[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Trying to encode the example in:</span>\n<span class=\"c1\">-- Section 3.4.1 Pulling Back Data along a Functor</span>\n<span class=\"c1\">-- From \"Seven Sketches in Compositionality\"</span>\n<span class=\"c1\">-- https://arxiv.org/pdf/1803.05316.pdf</span>\n<span class=\"c1\">-- They show a small example of an instance functor on the category of Discrete Dynamica Systems getting</span>\n<span class=\"c1\">-- pulled back to the category of Graphs</span>\n\n<span class=\"c1\">-- I'm not sure what to use for the type of the output of last function shown below</span>\n<span class=\"c1\">-- and/or I think I'm just not approaching this in the right way</span>\n<span class=\"c1\">-- Would love some pointers if anybody has time to look -- thanks!</span>\n\n<span class=\"c1\">-- I believe there is no category theory in mathlib4 yet, but all I'm trying to do at the moment</span>\n<span class=\"c1\">-- is make the types that could be used to \"fill out\" a particular instance of Category for this</span>\n<span class=\"c1\">-- small example (not trying to define the category typeclass itself). I run into an issue with</span>\n<span class=\"c1\">-- the definition of the morphism portion of the instance functor, shown below.</span>\n\n<span class=\"c1\">-- Object in the Graph category</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">GrObj</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Arrow</span>\n<span class=\"bp\">|</span> <span class=\"n\">Vertex</span>\n<span class=\"kn\">open</span> <span class=\"n\">GrObj</span>\n\n<span class=\"c1\">-- Morphism in the Graph category</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">GrMor</span><span class=\"o\">:</span> <span class=\"n\">GrObj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">GrObj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_Arrow</span><span class=\"o\">:</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Arrow</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_Vertex</span><span class=\"o\">:</span> <span class=\"n\">GrMor</span> <span class=\"n\">Vertex</span> <span class=\"n\">Vertex</span>\n<span class=\"bp\">|</span> <span class=\"n\">source</span><span class=\"o\">:</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Vertex</span>\n<span class=\"bp\">|</span> <span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Vertex</span>\n<span class=\"bp\">|</span> <span class=\"n\">gcom</span><span class=\"o\">:</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Vertex</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Vertex</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">GrMor</span> <span class=\"n\">Arrow</span> <span class=\"n\">Vertex</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span>   <span class=\"s2\">\" ;_gr \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">GrMor.gcom</span>\n<span class=\"kn\">open</span> <span class=\"n\">GrMor</span>\n\n<span class=\"c1\">-- Object in the Discrete Dynamical System category</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">DDSObj</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">State</span>\n<span class=\"kn\">open</span> <span class=\"n\">DDSObj</span>\n\n<span class=\"c1\">-- Morphism in the Discrete Dynamical System category</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">DDSMor</span><span class=\"o\">:</span> <span class=\"n\">DDSObj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DDSObj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_State</span><span class=\"o\">:</span> <span class=\"n\">DDSMor</span> <span class=\"n\">State</span> <span class=\"n\">State</span>\n<span class=\"bp\">|</span> <span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">DDSMor</span> <span class=\"n\">State</span> <span class=\"n\">State</span>\n<span class=\"bp\">|</span> <span class=\"n\">dcom</span><span class=\"o\">:</span> <span class=\"n\">DDSMor</span> <span class=\"n\">State</span> <span class=\"n\">State</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DDSMor</span> <span class=\"n\">State</span> <span class=\"n\">State</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DDSMor</span> <span class=\"n\">State</span> <span class=\"n\">State</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span>   <span class=\"s2\">\" ;_dds \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DDSMor.dcom</span>\n<span class=\"kn\">open</span> <span class=\"n\">DDSMor</span>\n\n<span class=\"c1\">-- I think no Set in lean4, so try just using an imagined category of Lists of Strings...</span>\n<span class=\"c1\">-- Object in the List Of Strings category</span>\n<span class=\"kd\">def</span> <span class=\"n\">ListObj</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n\n<span class=\"c1\">-- Morphism in the List Of Strings category</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ListMor</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ListObj</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lid</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ListMor</span> <span class=\"n\">l</span> <span class=\"n\">l</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">lfn</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ListMor</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">lcom</span><span class=\"o\">:</span> <span class=\"n\">ListMor</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ListMor</span> <span class=\"n\">l2</span> <span class=\"n\">l3</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ListMor</span> <span class=\"n\">l1</span> <span class=\"n\">l3</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span>   <span class=\"s2\">\" ;_lst \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListMor.lcom</span>\n<span class=\"kn\">open</span> <span class=\"n\">ListMor</span>\n\n<span class=\"c1\">-- Object part of an Instance functor from Graph -&gt; ListOfStrings</span>\n<span class=\"kd\">def</span> <span class=\"n\">IObj</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">DDSObj</span><span class=\"o\">):</span> <span class=\"n\">ListObj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">State</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"s2\">\"one\"</span><span class=\"o\">,</span> <span class=\"s2\">\"two\"</span><span class=\"o\">,</span> <span class=\"s2\">\"three\"</span><span class=\"o\">,</span> <span class=\"s2\">\"four\"</span><span class=\"o\">,</span> <span class=\"s2\">\"five\"</span><span class=\"o\">,</span> <span class=\"s2\">\"six\"</span><span class=\"o\">,</span> <span class=\"s2\">\"seven\"</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Morphism part of an Instance functor from Graph -&gt; ListOfStrings (incomplete, has error)</span>\n<span class=\"c1\">-- def IMor {d1 d2: DDSObj} (f: DDSMor d1 d2): ListMor (IObj d1) (IObj d2) (String -&gt; String) :=</span>\n<span class=\"kd\">def</span> <span class=\"n\">IMor</span> <span class=\"o\">{</span><span class=\"n\">d1</span> <span class=\"n\">d2</span><span class=\"o\">:</span> <span class=\"n\">DDSObj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">sfn</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">DDSMor</span> <span class=\"n\">d1</span> <span class=\"n\">d2</span><span class=\"o\">):</span> <span class=\"n\">ListMor</span> <span class=\"o\">(</span><span class=\"n\">IObj</span> <span class=\"n\">d1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IObj</span> <span class=\"n\">d2</span><span class=\"o\">)</span> <span class=\"n\">sfn</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">l1</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span> <span class=\"o\">:=</span> <span class=\"n\">IObj</span> <span class=\"n\">d1</span>\n  <span class=\"k\">let</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">ListObj</span> <span class=\"o\">:=</span> <span class=\"n\">IObj</span> <span class=\"n\">d2</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id_State</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListMor.lid</span> <span class=\"n\">l1</span>\n\n<span class=\"c1\">-- error message --</span>\n<span class=\"c1\">-- d1d2: DDSObj</span>\n<span class=\"c1\">-- sfn: String → String</span>\n<span class=\"c1\">-- f: DDSMor d1 d2</span>\n<span class=\"c1\">-- l1: ListObj</span>\n<span class=\"c1\">-- l2: ListObj</span>\n<span class=\"c1\">-- ⊢ ListObj</span>\n<span class=\"c1\">-- Messages (1)</span>\n<span class=\"c1\">-- pullback.lean:60:16</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   lid l1</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   ListMor l1 l1 fun s =&gt; s : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ListMor (IObj d1) (IObj d2) sfn : Type</span>\n</code></pre></div>",
        "id": 300675155,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1664127561
    }
]