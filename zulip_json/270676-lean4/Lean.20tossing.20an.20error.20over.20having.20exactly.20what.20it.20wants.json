[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"c1\">-- def exunique (p : α → Prop) := ∃ (x : α), (p x ∧ ∀ y, p y → x = y)</span>\n\n<span class=\"c1\">-- syntax \"∃!\" term \",\" term: term</span>\n<span class=\"c1\">-- macro_rules</span>\n<span class=\"c1\">-- | `(∃! $t:term, $p:term) =&gt; `(exunique (fun $t =&gt; $p))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- many lines and theorems hidden for your convenience</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t6</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">l3</span><span class=\"o\">,</span> <span class=\"n\">l1</span><span class=\"bp\">≠</span><span class=\"n\">l2</span><span class=\"bp\">∧</span><span class=\"n\">l1</span><span class=\"bp\">≠</span><span class=\"n\">l3</span><span class=\"bp\">∧</span><span class=\"n\">l2</span><span class=\"bp\">≠</span><span class=\"n\">l3</span><span class=\"bp\">∧∀</span> <span class=\"n\">p</span><span class=\"o\">,</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l1</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l2</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l3</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">h'a'n'b</span><span class=\"o\">,</span><span class=\"n\">h'a'n'c</span><span class=\"o\">,</span><span class=\"n\">h'b'n'c</span><span class=\"o\">,</span><span class=\"n\">h'n'col</span><span class=\"o\">⟩:=</span><span class=\"n\">i.three</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l'ab</span><span class=\"o\">,</span><span class=\"n\">h'lab'ppty</span><span class=\"o\">,</span><span class=\"n\">h'lab'uq</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h'a'n'b</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l'ac</span><span class=\"o\">,</span><span class=\"n\">h'lac'ppty</span><span class=\"o\">,</span><span class=\"n\">h'lac'uq</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">h'a'n'c</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l'bc</span><span class=\"o\">,</span><span class=\"n\">h'lbc'ppty</span><span class=\"o\">,</span><span class=\"n\">h'lbc'uq</span><span class=\"o\">⟩:=</span> <span class=\"n\">i.one</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h'b'n'c</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">l'ab</span><span class=\"o\">,</span><span class=\"n\">l'ac</span><span class=\"o\">,</span><span class=\"n\">l'bc</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"o\">{</span>\n<span class=\"n\">intro</span> <span class=\"n\">h'lab'lac</span>\n<span class=\"k\">have</span> <span class=\"n\">h'c'lab</span><span class=\"o\">:=</span> <span class=\"n\">Eq.substr</span> <span class=\"n\">h'lab'lac</span> <span class=\"n\">h'lac'ppty</span>\n\n<span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">253</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Eq.substr</span> <span class=\"n\">h'lab'lac</span> <span class=\"n\">h'lac'ppty</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h'lac'ppty</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inc</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l'ac</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inc</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l'ac</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">256</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n<span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">257</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n<span class=\"bp\">././</span><span class=\"n\">Trying.lean</span><span class=\"o\">:</span><span class=\"mi\">258</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>It has the type it expects. What's the problem?</p>",
        "id": 286027320,
        "sender_full_name": "Aron",
        "timestamp": 1655188395
    },
    {
        "content": "<p>It works if you pass the motive explicitly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h'c'lab</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Eq.substr</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inc</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h'lab'lac</span> <span class=\"n\">h'lac'ppty</span>\n</code></pre></div>",
        "id": 286029285,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1655190095
    },
    {
        "content": "<p>Note that <code>rw</code> makes all the motive woes disappear, e.g. <code>rw [←h'lab'lac] at h'lac'ppty</code> works as well.</p>",
        "id": 286059375,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655207758
    },
    {
        "content": "<p>The following section should be useful:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality\">https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality</a></p>\n<blockquote>\n<p>Notice that the second implicit parameter to Eq.subst, which provides the context in which the substitution is to occur, has type α → Prop. Inferring this predicate therefore requires an instance of higher-order unification. In full generality, the problem of determining whether a higher-order unifier exists is undecidable, and Lean can at best provide imperfect and approximate solutions to the problem. As a result, Eq.subst doesn't always do what you want it to. The macro h ▸ e uses more effective heuristics for computing this implicit parameter, and often succeeds in situations where applying Eq.subst fails.</p>\n</blockquote>",
        "id": 286088339,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655219934
    },
    {
        "content": "<p>The macro <code>h ▸ e</code> is quite handy when we are in term-mode (and do not want to switch to tactic-mode and use <code>rw</code>).</p>",
        "id": 286088704,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655220061
    },
    {
        "content": "<p>I usually use rw, but I can't figure out how to assign the hypothesis a new name when I'm done with it.</p>",
        "id": 286097626,
        "sender_full_name": "Aron",
        "timestamp": 1655223644
    },
    {
        "content": "<p>You can always do <code>have new_hypothesis := old_hypothesis</code> if you want a new name, and maybe discard the old hypothesis afterwards (I forgot if there is a tactic that does both)</p>",
        "id": 286104213,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1655226571
    },
    {
        "content": "<p>Or variations thereof like <code>have new_hypothesis : new_statement := by rw [h] at old_hypothesis; assumption</code></p>",
        "id": 286104679,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1655226774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horațiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20tossing.20an.20error.20over.20having.20exactly.20what.20it.20wants/near/286104213\">said</a>:</p>\n<blockquote>\n<p>You can always do <code>have new_hypothesis := old_hypothesis</code> if you want a new name, and maybe discard the old hypothesis afterwards (I forgot if there is a tactic that does both)</p>\n</blockquote>\n<p>There's <code>rename</code> which works somewhat similarly, except you have to specify the type of the old hypothesis, rather than it's name. I think it's mostly intended to work with inaccessible/unnamed hypotheses, but also works here.</p>",
        "id": 286107548,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655228072
    },
    {
        "content": "<p>Good to know!</p>",
        "id": 286107884,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1655228257
    },
    {
        "content": "<p>I've been trying to get <code>rename</code> to work, do you have a use case?</p>",
        "id": 286108046,
        "sender_full_name": "Aron",
        "timestamp": 1655228323
    },
    {
        "content": "<p>And how do you discard hypotheses?</p>",
        "id": 286110580,
        "sender_full_name": "Aron",
        "timestamp": 1655229670
    },
    {
        "content": "<p>In Lean 3 it used to be the <code>clear</code> tactic, applied to the hypothesis to discard. I'm not at my computer right now to check if it's the same in Lean 4.</p>",
        "id": 286110900,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1655229811
    },
    {
        "content": "<p><code>clear</code> also works as described in lean4!</p>",
        "id": 286112593,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655230585
    }
]