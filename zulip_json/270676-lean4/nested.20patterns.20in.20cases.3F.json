[
    {
        "content": "<p>Is there a tactic that allows nested <code>cases</code> such as <code>def x (n : Nat) : Unit := by cases n with | Nat.zero =&gt; _ | Nat.succ (Nat.succ _) =&gt; _ | Nat.succ _ =&gt; _</code></p>",
        "id": 229307658,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615213964
    },
    {
        "content": "<p>Lean 4 has a <code>match</code> tactic. The syntax is similar to <code>match</code> expressions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 229308393,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615214261
    },
    {
        "content": "<p>Hm, <code>match</code>, unlike <code>cases,</code> seems to suffer from the same issues in unifying metavariables with expressions as the non-tactic-mode elaborator (point (3) in <a href=\"https://github.com/leanprover/lean4/issues/337\">https://github.com/leanprover/lean4/issues/337</a>)</p>",
        "id": 229308996,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615214478
    },
    {
        "content": "<p>(I am in fact using <code>cases</code> right now just to get around typing issues with nested patterns in the standard elaborator :-/ .  I expect this will be useful in the future, though, so thanks!)</p>",
        "id": 229309295,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615214596
    }
]