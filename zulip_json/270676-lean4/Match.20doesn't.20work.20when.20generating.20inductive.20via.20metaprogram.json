[
    {
        "content": "<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"gen_structure\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">level_u</span> <span class=\"o\">:=</span> <span class=\"n\">mkLevelParam</span> <span class=\"bp\">`</span><span class=\"n\">u</span>\n  <span class=\"k\">let</span> <span class=\"n\">type_u</span> <span class=\"o\">:=</span> <span class=\"n\">mkSort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkLevelSucc</span> <span class=\"n\">level_u</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">mkInductiveDeclEs</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"o\">[{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId</span>\n    <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">mkForall</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">type_u</span> <span class=\"n\">type_u</span>\n    <span class=\"n\">ctors</span> <span class=\"o\">:=</span> <span class=\"o\">[{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">mk</span>\n      <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">mkForall</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">type_u</span>\n        <span class=\"bp\">&lt;|</span> <span class=\"n\">mkForall</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"bp\">&lt;|</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">id.getId</span> <span class=\"o\">[</span><span class=\"n\">level_u</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">}]</span>\n  <span class=\"o\">}]</span> <span class=\"n\">false</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"n\">e.toMessageData</span> <span class=\"o\">{})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n\n<span class=\"c1\">-- inductive struct.{u} : Type u → Type u | mk : {α : Type u} → α → struct α</span>\n<span class=\"n\">gen_structure</span> <span class=\"n\">struct</span>\n<span class=\"k\">#print</span> <span class=\"n\">struct</span>\n<span class=\"k\">#print</span> <span class=\"n\">struct.rec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">struct</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">struct.mk</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Where last line fails with this error message:</p>\n<div class=\"codehilite\" data-code-language=\"tactic\"><pre><span></span><code>tactic 'cases' failed, not applicable to the given hypothesis\n</code></pre></div>\n<p>Why is that? How can I fix it?<br>\nIt works if I give it the inductive directly (uncomment the inductive line and comment the gen_structure line).<br>\nThanks for suggestions!</p>",
        "id": 283224116,
        "sender_full_name": "Michael Jam",
        "timestamp": 1653213692
    },
    {
        "content": "<p>Your type is missing the <code>casesOn</code> function defined for regular structures <a href=\"https://github.com/leanprover/lean4/blob/56cd6c1ff519d8be39f35875b5bf8719e6101c20/src/Lean/Elab/Structure.lean#L717\">https://github.com/leanprover/lean4/blob/56cd6c1ff519d8be39f35875b5bf8719e6101c20/src/Lean/Elab/Structure.lean#L717</a></p>",
        "id": 283233218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653227518
    }
]