[
    {
        "content": "<p>What is the difference between single = and double ==? I understand that = has type prop, and == has type bool, but I don't really understand what the consequences of that are. Also, is there a boolean equivalent of &gt;= and &lt;=?</p>",
        "id": 319009486,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672671933
    },
    {
        "content": "<p>Really you are asking for the difference between Bool and Prop here. The difference is the following: Bool is the computer science true or false value, Prop is the mathematical idea of a property, while a property can also be both false or true there is a third way, we simply don't know what is the case (for example with open mathematical problems). If we have a certain property <code>hyp : Prop</code> Lean denotes the idea that we have a proof that <code>hyp</code> is either false or true by: <code>proof : hyp</code> or <code>proof : ¬ hyp</code>, the idea here being that <code>hyp</code> is a type and proofs of <code>hyp</code> are values of that type.</p>\n<p>So if we write <code>a = b</code> this denotes the property that <code>a</code> is equal to <code>b</code>, this can be true, false or we don't know whether it is true or false. Now if we have a procedure to decide whether <code>a = b</code> such as for example with <code>a b : Nat</code> we can of course always know whether <code>a</code> is equal to <code>b</code> for any concrete values of <code>a</code> and <code>b</code>. This is where Lean's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs4#Decidable</a> typeclass kicks in. If we have a function to decide a property, that is given <code>hyp : Prop</code> can return true iff we know there is an element <code>proof : hyp</code> or false iff we know there is an element <code>proof : ¬ hyp</code> we can declare an instance of <code>Decidable</code> that then allows us to write code such as <code>if a = b then sorry else sorry</code>(the <code>if then else</code> notation is mostly a wrapper around the <code>Decidable</code> typeclass that is looking for some way to decide the value after <code>if</code> based on a <code>Decidable</code> instance) because the program now has a function to determine whether that property holds or does not.</p>\n<p>Now in the special case of the <code>Decidable</code> instance for <code>n = m</code> where <code>n m : Nat</code> something interesting is done. The instance is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableEqNat#doc\">docs4#instDecidableEqNat</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DecidableEq#doc\">docs4#DecidableEq</a> is just an alias for a certain kind of <code>Decidable</code> things (namely equality on values) the function it uses is: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.decEq#doc\">docs4#Nat.decEq</a> now as you can see this actually uses the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.beq#doc\">docs4#Nat.beq</a> function (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BEq#doc\">docs4#BEq</a> being the typeclass for the <code>==</code> notation).</p>\n<p>So in the special case of <code>Nat</code> and many other types there is actually no difference between <code>=</code> and <code>==</code> at all since their <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DecidableEq#doc\">docs4#DecidableEq</a> instance is merely a verified version of their <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BEq#doc\">docs4#BEq</a> instance, thus usually you can convert back and forth between <code>h : (a == b) = true</code> and <code>h : a = b</code>. There are however exceptions to this and by defining your own weird <code>BEq</code> instance it is of course easy to come up with them yourself. </p>\n<p>To wrap it up, generally speaking <code>a = b</code> means \"mathematically equal\" and <code>a == b</code> means \"computer science equal\"  with both meaning the same in the vast majority of cases.</p>\n<p>Regarding the LE and LT operations what you want to do in this case is also to just use the decidable instances, for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.decLe#doc\">docs4#Nat.decLe</a>. Since <code>if then else</code> is just a wrapper around these we end up being able to just write <code>if a &lt;= b then sorry else sorry</code> in most cases. If you are writing a generic function over some general implementation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LE#doc\">docs4#LE</a> you will have to accompany it with the appropriate instance parameter that your <code>LE</code> instance is decidable</p>",
        "id": 319013345,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672673257
    },
    {
        "content": "<p><code>Bool</code> is a type but <code>Prop</code> is a universe, so they can do different things.</p>",
        "id": 319022393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672676674
    },
    {
        "content": "<p>Thanks for the thorough response!</p>",
        "id": 319114758,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672708815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20equality.20vs.20Prop.20equality/near/319013345\">said</a>:</p>\n<blockquote>\n<p>Prop is the mathematical idea of a property, while a property can also be both false or true there is a third way, we simply don't know what is the case (for example with open mathematical problems). If we have a certain property <code>hyp : Prop</code> Lean denotes the idea that we have a proof that <code>hyp</code> is either false or true by: <code>proof : hyp</code> or <code>proof : ¬ hyp</code>, the idea here being that <code>hyp</code> is a type and proofs of <code>hyp</code> are values of that type.<br>\n</p>\n</blockquote>\n<p>oh, curious, I always thought <code>Prop</code> stood for \"proposition\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 319436873,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1672853674
    },
    {
        "content": "<p>It does. A \"property\"/\"predicate\" would rather be <code>p : α → Prop</code> for some <code>α : Type _</code></p>",
        "id": 319437216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672853803
    }
]