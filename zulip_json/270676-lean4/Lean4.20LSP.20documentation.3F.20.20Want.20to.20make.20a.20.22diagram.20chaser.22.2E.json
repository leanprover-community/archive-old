[
    {
        "content": "<p>Hello!  I want to either interact with Lean4 (or Coq) and the user's Lean4 files using a Web Extension for VSCode and a WebView.  Would the widgets extension do what I need?  I basically need an iframe capability and that iframe will load Quiver CD editor: <a href=\"https://q.uiver.app\">https://q.uiver.app</a> either locally or remote, but I have experience loading it locally in a Django template.   It would be nice to use the latest <a href=\"https://q.uiver.app\">https://q.uiver.app</a> without editing its source code, because varkor the author is always adding features to it.    Anyway, some guidance would be appreciated.  Any idea where I can find more info about the LSP interface used by Lean4 to communicate with VSCode?  What I will do is compare that to Coq's documentation, and determine which one would be easiest to get working first.   Eventually both PA's would be supported.   Ideally, I would like the user to be able to draw a commutative diagram in Quiver and have code be automatically generated that creates those objects in Lean4.  I don't care if this is extremely difficult to do.  I don't care if I'm restricted to R-modules, whatever I can do in this area, I really want to make happen.  This would fall under a \"Visual Diagram Chasing\" software category.</p>",
        "id": 297014542,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662223370
    },
    {
        "content": "<p>The widget system is exactly what enables this kind of use case :) the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">tutorial</a> is your best bet. Btw, I am working on <em>showing</em> but not <em>editing</em> diagrams <a href=\"https://github.com/leanprover-community/mathlib4/pull/363\">here</a></p>",
        "id": 297020427,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662227034
    },
    {
        "content": "<blockquote>\n<p>Ideally, I would like the user to be able to draw a commutative diagram in Quiver and have code be automatically generated that creates those objects in Lean4. I don't care if this is extremely difficult to do.</p>\n</blockquote>\n<p>That's a great attitude, but I also suspect that this will be possible to do (from what I've seen of Lean 4), so I'm super-keen to see what you can come up with!</p>\n<blockquote>\n<p>I don't care if I'm restricted to R-modules</p>\n</blockquote>\n<p>I don't think you will be -- we have a working theory of diagrams in arbitrary abelian categories (as well as a proof that R-modules are an abelian category), which we had to build for, amongst other things, the liquid tensor experiement.</p>\n<p>This would be a much-needed feature. If you look around in Lean 3's maths library you will see that right now it's a huge mouthful to state things like the snake lemma (just a huge list of maps and then a list of statements that various compositions equal other compositions). Any way of packaging these things up in a more visual way would be brilliant.</p>",
        "id": 297021977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662228215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297020427\">said</a>:</p>\n<blockquote>\n<p>The widget system is exactly what enables this kind of use case :) the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">tutorial</a> is your best bet. Btw, I am working on <em>showing</em> but not <em>editing</em> diagrams <a href=\"https://github.com/leanprover-community/mathlib4/pull/363\">here</a></p>\n</blockquote>\n<p>That is awesome!  I will look into those today.</p>",
        "id": 297022896,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662228912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297021977\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ideally, I would like the user to be able to draw a commutative diagram in Quiver and have code be automatically generated that creates those objects in Lean4. I don't care if this is extremely difficult to do.</p>\n</blockquote>\n<p>That's a great attitude, but I also suspect that this will be possible to do (from what I've seen of Lean 4), so I'm super-keen to see what you can come up with!</p>\n<blockquote>\n<p>I don't care if I'm restricted to R-modules</p>\n</blockquote>\n<p>I don't think you will be -- we have a working theory of diagrams in arbitrary abelian categories (as well as a proof that R-modules are an abelian category), which we had to build for, amongst other things, the liquid tensor experiement.</p>\n<p>This would be a much-needed feature. If you look around in Lean 3's maths library you will see that right now it's a huge mouthful to state things like the snake lemma (just a huge list of maps and then a list of statements that various compositions equal other compositions). Any way of packaging these things up in a more visual way would be brilliant.</p>\n</blockquote>\n<p>Thank you for the positive feedback!  I really want to chase diagrams with a computer.  I always mess them up on paper. :)</p>",
        "id": 297022970,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662228965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> What is preventing you from rendering object / arrow labels with KaTeX?  I have experience getting KaTeX called from a Qt/C++ application.  Maybe with enough unicode support, such a thing is not really necessary.  But a button to output to Quiver format would be nice.  Quiver (<a href=\"https://q.uiver.app\">https://q.uiver.app</a>) would in turn export to TikzCD which it does already, so you could design your theory in Lean4 and then publish to paper without having to manually edit text of diagrams which is meant to be a visual editing experience.     Also, I have made several diagram editors so far in my own research, and I found the best way to get things to look right is to align everything to a fixed grid as Quiver does.   If you want to support 3D-looking diagrams, you simply change the grid to isometric tiling (or something like that).</p>",
        "id": 297023549,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662229457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  How does one get/git your code for that?  Might as well not re-invent the wheel :)</p>",
        "id": 297023661,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662229576
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/2uTxuDoYS2p60DnarJ4pC-a2/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2uTxuDoYS2p60DnarJ4pC-a2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2uTxuDoYS2p60DnarJ4pC-a2/image.png\"></a></div><p>Lean4 is not recognizing widget...</p>",
        "id": 297025420,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662231082
    },
    {
        "content": "<p>Are you using a recent version of Lean (4.0.0-m5 or a recent nightly)? What's the error message you're getting?</p>",
        "id": 297025833,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662231374
    },
    {
        "content": "<p>If so, try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Widget</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Widget</span>\n</code></pre></div>\n<p>to the start of your sample code</p>",
        "id": 297026072,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662231540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297026072\">said</a>:</p>\n<blockquote>\n<p>If so, try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Widget</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Widget</span>\n</code></pre></div>\n<p>to the start of your sample code</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/jBXr_nAM-1EW_jK95WViSoea/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jBXr_nAM-1EW_jK95WViSoea/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jBXr_nAM-1EW_jK95WViSoea/image.png\"></a></div><p>Tried adding that import (2 lines), and error message is:</p>\n<p><code>unknown attribute [widget]</code></p>",
        "id": 297026427,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662231832
    },
    {
        "content": "<p>Also on gitpod the Rubiks cube example shows nothing when I hover over #widget</p>",
        "id": 297026765,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232045
    },
    {
        "content": "<p>I think those are two separate errors: Your <code>test1.lean</code> file is not accompanied by a <code>lean-toolchain</code> file, so you're probably getting an old version of Lean when executing your sample, which is independent of the Rubik's cube sample.</p>\n<p>The Rubik's cube sample is not working for the opposite reason: Its <code>lean-toolchain</code> file was recently updated to a \"too new\" version, and this wasn't caught because this particular sample is, as far as I can tell, not tested by CI (cc <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span>).</p>",
        "id": 297027042,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662232226
    },
    {
        "content": "<p>How do I add a lean-toolchain file and why didn't the widgets doc say to do this? :/</p>",
        "id": 297027090,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232278
    },
    {
        "content": "<p>The previous version of Lean used was <code>leanprover/lean4:nightly-2022-08-08</code>, so if you replace the <code>lean-toolchain</code> file by a single line containing <code>leanprover/lean4:nightly-2022-08-08</code> the Rubik's cube example should work.</p>",
        "id": 297027105,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662232295
    },
    {
        "content": "<p>I think the doc doesn't mention it because it assumes your \"default\" lean version is new enough.</p>",
        "id": 297027206,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662232353
    },
    {
        "content": "<p>Can you hit Ctrl+Shift+P and then type \"Select Lean Toolchain\"? If that works (I am not a VSCode user, sorry), then selecting a new enough toolchain should make your <code>test1.lean</code> file work. You can also create a <code>lean-toolchain</code> file with a single linbe containing a particular Lean version (in the above format).</p>",
        "id": 297027261,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662232402
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/WUzWTZOkic-rrBKQFtC6toPf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WUzWTZOkic-rrBKQFtC6toPf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WUzWTZOkic-rrBKQFtC6toPf/image.png\"></a></div>",
        "id": 297027289,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232425
    },
    {
        "content": "<p><code>object file 'c:\\Users\\fruit\\.elan\\toolchains\\leanprover--lean4---nightly-2022-08-08\\lib\\lean\\Init.olean' of module Init does not exist</code></p>",
        "id": 297027307,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297027261\">said</a>:</p>\n<blockquote>\n<p>Can you hit Ctrl+Shift+P and then type \"Select Lean Toolchain\"?</p>\n</blockquote>\n<p>No such tools found in the command pallete</p>",
        "id": 297027447,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232521
    },
    {
        "content": "<p>make sure you are in a lean file</p>",
        "id": 297027483,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662232549
    },
    {
        "content": "<p>Still same issue - last mentioned error message:</p>\n<p><code>object file 'c:\\Users\\fruit\\.elan\\toolchains\\leanprover--lean4---nightly-2022-08-08\\lib\\lean\\Init.olean' of module Init does not exist</code></p>",
        "id": 297027705,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662232743
    },
    {
        "content": "<p>can you change <code>import Lean.Widget</code> to <code>import Lean</code></p>",
        "id": 297027870,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662232897
    },
    {
        "content": "<p>I am stumped, because this file definitely exists in the corresponding nightly archive. Maybe the Windows experts know what's going on (hopefully <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>'s suggestion works). I would just try a different nightly version (the next day's, say).</p>",
        "id": 297027967,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662232984
    },
    {
        "content": "<p>Just to double check, you are using this extension: <a href=\"https://marketplace.visualstudio.com/items?itemName=leanprover.lean4\">https://marketplace.visualstudio.com/items?itemName=leanprover.lean4</a></p>",
        "id": 297027983,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> I'm using the Lean4 that comes up in extensions and it's updated to the latest version.</p>",
        "id": 297028113,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233093
    },
    {
        "content": "<p>What does <code>#eval Lean.versionString</code> give?</p>",
        "id": 297028153,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233132
    },
    {
        "content": "<p>Should be <code>\"4.0.0-nightly-2022-08-08\"</code></p>",
        "id": 297028227,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  4.0.0-nightly-2022-08-09  because I just changed by one day a second ago.</p>",
        "id": 297028284,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233242
    },
    {
        "content": "<p>ok but did you get that from <code>#eval</code>?</p>",
        "id": 297028313,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233267
    },
    {
        "content": "<p>Sometimes vscode can be using a different version if it was manually set with \"Select Lean Toolchain\"</p>",
        "id": 297028389,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233303
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/x9U1qC69v0VjTU_yid_2DvLF/image.png\">image.png</a> <br>\nI think it's working now . No errors.  Is that the normal operation for this helloworld example?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/x9U1qC69v0VjTU_yid_2DvLF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/x9U1qC69v0VjTU_yid_2DvLF/image.png\"></a></div>",
        "id": 297028442,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233341
    },
    {
        "content": "<p>add the line <code>#widget helloWidget .null</code></p>",
        "id": 297028461,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233370
    },
    {
        "content": "<p>click on the <code>#widget</code></p>",
        "id": 297028468,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> yes I see that in the docs now.  It works! :D</p>",
        "id": 297028573,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233429
    },
    {
        "content": "<p>nice!</p>",
        "id": 297028576,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233434
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/t5JRENfUaaXk5gRYuGCSMvSb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/t5JRENfUaaXk5gRYuGCSMvSb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/t5JRENfUaaXk5gRYuGCSMvSb/image.png\"></a></div>",
        "id": 297028577,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233435
    },
    {
        "content": "<p>great!</p>",
        "id": 297028587,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233445
    },
    {
        "content": "<p>So how would I start development on that CD editor by <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  ?</p>",
        "id": 297028627,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233470
    },
    {
        "content": "<p><em>viewer</em></p>",
        "id": 297028638,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233479
    },
    {
        "content": "<p>I'm unsure how to get the code going by that \"commit page\" here:  <a href=\"https://github.com/leanprover-community/mathlib4/pull/363\">https://github.com/leanprover-community/mathlib4/pull/363</a></p>",
        "id": 297028726,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233553
    },
    {
        "content": "<p>I think pull the branch for his <a href=\"https://github.com/leanprover-community/mathlib4/pull/363\">PR</a>, confirm that you can view the diagrams and then start hacking :)</p>",
        "id": 297028730,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233560
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 297028767,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662233594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297028726\">said</a>:</p>\n<blockquote>\n<p>I'm unsure how to get the code going by that \"commit page\" here:  <a href=\"https://github.com/leanprover-community/mathlib4/pull/363\">https://github.com/leanprover-community/mathlib4/pull/363</a></p>\n</blockquote>\n<p>you need to add <a href=\"https://github.com/Vtec234/mathlib4/tree/squares\">his fork</a> as a remote and then check it out</p>",
        "id": 297028787,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> So I use TortoiseGit to clone it, but are there instructions on how to install the extension (another dev version of it) into vscde?</p>",
        "id": 297028800,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233630
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># do this in your mathlib4 directory</span>\ngit remote add vtec git@github.com:Vtec234/mathlib4.git\ngit fetch vtec\ngit checkout squares\n</code></pre></div>",
        "id": 297028807,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297028800\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> So I use TortoiseGit to clone it, but are there instructions on how to install the extension (another dev version of it) into vscde?</p>\n</blockquote>\n<p>You don't need a different version of the vscode extension</p>",
        "id": 297028936,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  where do I do that from?  VScode?</p>",
        "id": 297028984,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233766
    },
    {
        "content": "<p>I tried from Git Bash in windows, and it said I'm not in a git repo</p>",
        "id": 297029008,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233799
    },
    {
        "content": "<p>yeah you need to get mathlib4 first</p>",
        "id": 297029057,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233854
    },
    {
        "content": "<p>I see, I see, let me google for it</p>",
        "id": 297029067,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233864
    },
    {
        "content": "<p>So in a folder where you want to put mathlib, do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">git</span> <span class=\"n\">remote</span> <span class=\"n\">add</span> <span class=\"n\">vtec</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">Vtec234</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"n\">vtec</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">squares</span>\n<span class=\"n\">code</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 297029136,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662233911
    },
    {
        "content": "<p>I downloaded it. But how then do I tell VScode to use that copy of mathlib?</p>",
        "id": 297029185,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662233953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297023549\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> What is preventing you from rendering object / arrow labels with KaTeX?  I have experience getting KaTeX called from a Qt/C++ application.  Maybe with enough unicode support, such a thing is not really necessary.  But a button to output to Quiver format would be nice.  Quiver (<a href=\"https://q.uiver.app\">https://q.uiver.app</a>) would in turn export to TikzCD which it does already, so you could design your theory in Lean4 and then publish to paper without having to manually edit text of diagrams which is meant to be a visual editing experience.     Also, I have made several diagram editors so far in my own research, and I found the best way to get things to look right is to align everything to a fixed grid as Quiver does.   If you want to support 3D-looking diagrams, you simply change the grid to isometric tiling (or something like that).</p>\n</blockquote>\n<p>Note that the object/arrow labels are Lean expressions, and they are interactive (you can click to see the type, go to definition, etc.). Rendering general Lean expressions as LaTeX would be a larger project.</p>",
        "id": 297029234,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662233997
    },
    {
        "content": "<p>See the last sentence <a href=\"https://github.com/penrose/penrose/issues/1057#issuecomment-1166389413\">here</a> for why I didn't use Quiver.</p>",
        "id": 297029333,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662234038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297029185\">said</a>:</p>\n<blockquote>\n<p>I downloaded it. But how then do I tell VScode to use that copy of mathlib?</p>\n</blockquote>\n<p>develop in mathlib4 directly is the easiest way (hit <code>code .</code> in your mathlib4 folder)</p>",
        "id": 297029365,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1662234065
    },
    {
        "content": "<p>brb</p>",
        "id": 297029467,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662234125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  everything seems to be working with your commands except:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"n\">vtec</span>\n<span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span> <span class=\"n\">Permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">publickey</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">read</span> <span class=\"k\">from</span> <span class=\"n\">remote</span> <span class=\"n\">repository.</span>\n\n<span class=\"n\">Please</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">correct</span> <span class=\"n\">access</span> <span class=\"n\">rights</span>\n<span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">repository</span> <span class=\"n\">exists.</span>\n</code></pre></div>\n<p>What public key do I edit on github?  I could generate a new one with puttygen</p>",
        "id": 297030378,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662234904
    },
    {
        "content": "<p>It's weird because I've been gitting code all day, and for some reason for this it doesn't work.</p>",
        "id": 297030732,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235167
    },
    {
        "content": "<p>You could git remote set-url vtec <a href=\"https://github.com/Vtec234/mathlib4\">https://github.com/Vtec234/mathlib4</a></p>",
        "id": 297030766,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662235202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> wow that worked!  I will keep a note file for me with all these commands ...</p>",
        "id": 297030895,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235288
    },
    {
        "content": "<p>(Off-topic: Why would the clone work over SSH but not the fetch? Sure, different remotes, but they're both github repos)</p>",
        "id": 297030903,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662235304
    },
    {
        "content": "<p>Basically the git protocol requires authentication, whereas https only requires it for pushing</p>",
        "id": 297030906,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662235306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  I have written an ArrowStyle class in PyQt5 for a diagram editor of mine (not ready to release), but the arrow styles work beautifully.  I don't know if that would help here other than I could possibly translate the code over to JS</p>",
        "id": 297031050,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235435
    },
    {
        "content": "<p>It supports up to 3 lines, bezier, up to 6 heads, veetail, and dashed/dotted lines for \"there exists\".</p>\n<p><a href=\"https://youtu.be/TSTdyRDvSss\">https://youtu.be/TSTdyRDvSss</a>   Arrow styling starts at 1:20</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TSTdyRDvSss\" href=\"https://youtu.be/TSTdyRDvSss\"><img src=\"https://uploads.zulipusercontent.net/3bbc041a5216e1d91cafd1e15296b7b8432b6fcc/68747470733a2f2f692e7974696d672e636f6d2f76692f54535464795244765373732f64656661756c742e6a7067\"></a></div>",
        "id": 297031135,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235499
    },
    {
        "content": "<p>Arrow styles would be great! To make that work with my widget, you'd indeed need to translate these to some JS code which generates the SVG for Penrose to use</p>",
        "id": 297031419,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662235764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297031419\">said</a>:</p>\n<blockquote>\n<p>Arrow styles would be great! To make that work with my widget, you'd indeed need to translate these to some JS code which generates the SVG for Penrose to use</p>\n</blockquote>\n<p>I'll make a ToDo list for myself.   I think though that perhaps the style should be optional, but a double head will always mean epimorphism, or something like that, if present.</p>",
        "id": 297031502,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  so  how do I test your code?  For example where do I place a lean4 test file or is there an example already somewhere within mathlab4?</p>",
        "id": 297031658,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662235953
    },
    {
        "content": "<p>Well we shouldn't constrain the artistry of the user.  Maybe a double headed arrow could mean other things, but we should have some defaults, and the epimorphism default maps of course to the standard double headed arrow.</p>",
        "id": 297031772,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662236046
    },
    {
        "content": "<p>You need to run <code>lake build widgetCommDiag</code> in the mathlib4 directory (this needs node.js installed), and then you can open <code>CommDiag.lean</code></p>",
        "id": 297031793,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662236083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297031793\">said</a>:</p>\n<blockquote>\n<p>You need to run <code>lake build widgetCommDiag</code> in the mathlib4 directory (this needs node.js installed), and then you can open <code>CommDiag.lean</code></p>\n</blockquote>\n<p>That worked except I'm clicking around on the <code>CommDiag.lean</code> file and am getting:<br>\n<code>Error updating: Error fetching goals: Rpc error: InvalidParams: Incorrect position 'file:///c%3A/Users/fruit/OneDrive/Desktop/Lean4Widgets/mathlib4/Mathlib/Tactic/Widget/CommDiag.lean:175:10' in RPC call.</code></p>\n<p>Once I have it working, what do I do to display something in the infoview?</p>",
        "id": 297032316,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662236524
    },
    {
        "content": "<p>Will come back to this later.  I have to help watch my grandma for a few hours.</p>",
        "id": 297032485,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662236691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297032316\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20LSP.20documentation.3F.20.20Want.20to.20make.20a.20.22diagram.20chaser.22.2E/near/297031793\">said</a>:</p>\n<blockquote>\n<p>You need to run <code>lake build widgetCommDiag</code> in the mathlib4 directory (this needs node.js installed), and then you can open <code>CommDiag.lean</code></p>\n</blockquote>\n<p>That worked except I'm clicking around on the <code>CommDiag.lean</code> file and am getting:<br>\n<code>Error updating: Error fetching goals: Rpc error: InvalidParams: Incorrect position 'file:///c%3A/Users/fruit/OneDrive/Desktop/Lean4Widgets/mathlib4/Mathlib/Tactic/Widget/CommDiag.lean:175:10' in RPC call.</code></p>\n<p>Once I have it working, what do I do to display something in the infoview?</p>\n</blockquote>\n<p>At the top of the file there is an <code>#exit</code> statement that you have to remove, then it should work. There are <code>example</code>s at the bottom which display a diagram.</p>",
        "id": 297033496,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662237661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  what version (nightly) of Lean4 are you using to develop with?  I think it's best to match these, and also:<br>\n<a href=\"/user_uploads/3121/ShVEWCzjDJIIrjnJrPsU2kXE/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ShVEWCzjDJIIrjnJrPsU2kXE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ShVEWCzjDJIIrjnJrPsU2kXE/image.png\"></a></div><p><code>cannot evaluate code because 'sorryAx' uses 'sorry' and/or contains errors</code> is the error - all code up to the first widget declaration works, and then @ [widget] is underscored with red.</p>",
        "id": 297046502,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1662251778
    },
    {
        "content": "<p>What is the error on line 47? When you have mathlib4 open as a folder in vscode, it should always use the right version of Lean as specified in lean-toolchain</p>",
        "id": 297047005,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1662252386
    },
    {
        "content": "<p>Hi Daniel, I just updated to latest mathlib4 which is using <code>leanprover/lean4:nightly-2022-09-05</code> and and tried what you are doing, and it compiles fine, but you will get that error if the javascript file you are pointing to doesn't exist. If this is the problem the error on line 47 should say \"no such file or directory (error code: 2)\".</p>\n<p><a href=\"/user_uploads/3121/CMEqJetbenCJ_SnqI9IdSXbg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CMEqJetbenCJ_SnqI9IdSXbg/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/CMEqJetbenCJ_SnqI9IdSXbg/image.png\"></a></div>",
        "id": 297703920,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1662609294
    }
]