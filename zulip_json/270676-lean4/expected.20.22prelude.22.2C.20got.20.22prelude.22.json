[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Parser.Module.prelude</span><span class=\"bp\">|</span> <span class=\"n\">prelude</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span>\n                              <span class=\"c1\">-- ^^^^^^^ expected 'prelude'</span>\n</code></pre></div>\n<p>Is this an issue involving whether <code>prelude</code> is lexed as a token or an identifier? I notice that it's not a keyword in normal usage.</p>",
        "id": 245903340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626219553
    },
    {
        "content": "<p>same thing happens with <code> `(Parser.Module.import| import $stx:ident)</code></p>",
        "id": 245903744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626219922
    },
    {
        "content": "<p>I think the problem you're having here is that the module header is not parsed the same as the rest of the module. So I am not surprised that quotations don't work for it.</p>",
        "id": 245906167,
        "sender_full_name": "Mac",
        "timestamp": 1626222283
    },
    {
        "content": "<p>On the other hand, the header parser does look like a normal parser, so I can get why one would think they would work normally.</p>",
        "id": 245906268,
        "sender_full_name": "Mac",
        "timestamp": 1626222389
    },
    {
        "content": "<p>Looking deeper, the exact problem seems to be that, by default, \"prelude\" and \"import\" are not part of the token list except in the special case of parsing the module header. This line <a href=\"https://github.com/leanprover/lean4/blob/93a3fd14ad6275c49b362d16781a9be082921ebc/src/Lean/Parser/Module.lean#L43\">here</a> calls <code>Module.updateTokens</code> which adds the header tokens to the token table as can be see in its definition <a href=\"https://github.com/leanprover/lean4/blob/93a3fd14ad6275c49b362d16781a9be082921ebc/src/Lean/Parser/Module.lean#L23-L27\">here</a>. Thus, everywhere else,  the <code>prelude</code> and <code>import</code> (and <code>runtime</code>) tokens do not exist, so you can't use them.</p>",
        "id": 245906551,
        "sender_full_name": "Mac",
        "timestamp": 1626222699
    },
    {
        "content": "<p><del>Btw you probably know this already, but you can hack around this with <code> `(Parser.Module.prelude| $(mkAtom \"prelude\"))</code></del>. Or not, that doesn't create the right <code>node</code>.</p>",
        "id": 245906998,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626223202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  This appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">prelude</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Parser.Module.prelude</span><span class=\"bp\">|</span>\n  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkNode</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Module.prelude</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"prelude\"</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>(You just need to give it the proper kind manually.)</p>",
        "id": 245907626,
        "sender_full_name": "Mac",
        "timestamp": 1626223834
    },
    {
        "content": "<p>sure, but at that point you may as well just write <code>mkNode ``Lean.Parser.Module.prelude #[mkAtom \"prelude\"]</code>, the quotation is useless</p>",
        "id": 245908294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626224637
    },
    {
        "content": "<p>(that's what I'm doing atm)</p>",
        "id": 245908335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626224649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/expected.20.22prelude.22.2C.20got.20.22prelude.22/near/245908294\">said</a>:</p>\n<blockquote>\n<p>sure, but at that point you may as well just write <code>mkNode ``Lean.Parser.Module.prelude #[mkAtom \"prelude\"]</code>, the quotation is useless</p>\n</blockquote>\n<p>True <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span>. I just used the quotation because I wanted to make sure the quotation parser accepted the node.</p>",
        "id": 245909303,
        "sender_full_name": "Mac",
        "timestamp": 1626225835
    },
    {
        "content": "<p>I'm not sure it actually shows that, because I think you can always use <code> `(parser| $stx)</code> and it will just be a no-op</p>",
        "id": 245909616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626226122
    },
    {
        "content": "<p>the syntax will be in whatever kind is the one expected by the given parser</p>",
        "id": 245909643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626226156
    },
    {
        "content": "<p>I thought that might be the case, but <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> example showed that it does do some checking as a simple atom was not atomically wrapped in the parser kind.</p>",
        "id": 245910805,
        "sender_full_name": "Mac",
        "timestamp": 1626227497
    },
    {
        "content": "<p>that's what I mean, it's a no op</p>",
        "id": 245910950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626227677
    },
    {
        "content": "<p>it doesn't know anything about what <code>stx</code> is, so it assumes that it has whatever kind it's supposed to be producing</p>",
        "id": 245910960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626227703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/expected.20.22prelude.22.2C.20got.20.22prelude.22/near/245910960\">said</a>:</p>\n<blockquote>\n<p>it doesn't know anything about what <code>stx</code> is, so it assumes that it has whatever kind it's supposed to be producing</p>\n</blockquote>\n<p>My point was that it <em>did not</em> assume that about the atom, it  specifically said that it wasn't what is was expected. That is, if it was just a no-op, I would expect it to accept <code>(Parser.Module.prelude| $(mkAtom \"prelude\"))</code> since there is nothing wrong type-wise with that. It must be doing at least some form of checking to error there but not in the node case.</p>",
        "id": 245911136,
        "sender_full_name": "Mac",
        "timestamp": 1626227935
    },
    {
        "content": "<p>This works though, and produces malformed syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">prelude</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Parser.Module.prelude</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"prelude\"</span><span class=\"o\">))</span>\n<span class=\"k\">#print</span> <span class=\"n\">prelude</span>\n</code></pre></div>",
        "id": 245911273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626228057
    },
    {
        "content": "<p>Weird, I was getting an error earlier. It was probably just some unrelated syntax mistake I had made that I thought was quotation. XD</p>",
        "id": 245911387,
        "sender_full_name": "Mac",
        "timestamp": 1626228206
    }
]