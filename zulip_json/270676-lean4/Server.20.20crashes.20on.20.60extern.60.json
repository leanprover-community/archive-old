[
    {
        "content": "<p>Piggy backing off my last question, I am trying to run some external definitions at interpretation time. I have made a plugin with said definitions and I can successfully run a file that uses them at interpretation time if I run it directly with the <code>lean</code> binary.  However, the file breaks when run with the server. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"foo\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works as expected when run with normal `lean`, causes server to crash</span>\n</code></pre></div>\n<p>I have verified that the plugin is being loaded (i.e., passing an invalid path causes a server error, but the plugin I give it is accepted without complaint). I suspect this may be related to the fact that such external <code>#eval</code>s crash the server when missing (instead of printing an error that the external is missing like normal <code>lean</code> does). That is, I think the evaluation of external (non-builtin) symbols is broken (in the server) regardless of whether or not the symbol is properly provided.</p>",
        "id": 250061761,
        "sender_full_name": "Mac",
        "timestamp": 1629416148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is this something work reporting as an issue?</p>",
        "id": 250091776,
        "sender_full_name": "Mac",
        "timestamp": 1629448870
    },
    {
        "content": "<p>When you say \"to the server\", that's probably only to the watchdog and not to the file worker, right?</p>",
        "id": 250092099,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629449127
    },
    {
        "content": "<p>And surely there's some stderr output?</p>",
        "id": 250092135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629449148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> </p>\n<p>For the first question, yes, but my understanding of the watchdog code is that it forwards its plugin arguments to worker when it starts it (at least that is my understand of these two lines in <a href=\"https://github.com/leanprover/lean4/blob/49520aa2ee6d39be24e4e50242c241dd098af98a/src/shell/lean.cpp#L535\">lean.cpp</a> and <a href=\"https://github.com/leanprover/lean4/blob/49520aa2ee6d39be24e4e50242c241dd098af98a/src/Lean/Server/Watchdog.lean#L240\">Watchdog.lean</a>.) </p>\n<p>For the second question, no, I don't get any error messages regardless of the existence of the plugin --- the server  just hangs and crashes. This is what makes me suspect a bug at work. As running with program with lean directly work s (and reports an error if the symbol is missing). Also providing an invalid plugin to server does cause it to report an error so I know I am not just missing messages from the server.</p>",
        "id": 250092969,
        "sender_full_name": "Mac",
        "timestamp": 1629449772
    },
    {
        "content": "<p>Ah, that does sound like a bug</p>",
        "id": 250095482,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629450997
    },
    {
        "content": "<p>I submitted an issue to the GitHub (<a href=\"https://github.com/leanprover/lean4/issues/639\">#639</a>). However, after some more testing, I discovered I had provided that wrong plugin file (and thus the symbol was still missing). Providing the proper plugin works. The fact that it hangs with no error when the symbol is missing, though, still seems like a bug worth fixing at some point (hence why I did not close the issue).</p>",
        "id": 250166644,
        "sender_full_name": "Mac",
        "timestamp": 1629490194
    },
    {
        "content": "<p>I believe I discovered the source of the hang (which is a potentially larger bug) and submitted it to GitHub as <a href=\"https://github.com/leanprover/lean4/issues/640\">#640</a>.</p>",
        "id": 250178806,
        "sender_full_name": "Mac",
        "timestamp": 1629497658
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/gekoxk0A14uq_QW1Xtikcn4s/image.png\">image.png</a> <br>\nThis might be a Windows-specific issue (I don't think it's non-Nix specific)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gekoxk0A14uq_QW1Xtikcn4s/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gekoxk0A14uq_QW1Xtikcn4s/image.png\"></a></div>",
        "id": 250178976,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629497785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  what are you running there?</p>",
        "id": 250179132,
        "sender_full_name": "Mac",
        "timestamp": 1629497900
    },
    {
        "content": "<p>Oh! So you are saying the server outputted that (which it never does on my machine)? Ah, then yes it may have something to do with how file handles work on Windows.</p>",
        "id": 250179193,
        "sender_full_name": "Mac",
        "timestamp": 1629497957
    },
    {
        "content": "<p>Might simply be that the standard unhandled exception handler uses stdout under MinGW, which would be weird, but we should definitely catch that exception ourselves anyway.</p>",
        "id": 250179323,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629498041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> It ialmost definitely because it uses stdout -- that is core of the issue I just submitted <a href=\"https://github.com/leanprover/lean4/issues/640\">#640</a> -- \"Writing to C/C++ standard output causes the server file worker to hang\" (on Windows, since that is what I am using XD).</p>",
        "id": 250179444,
        "sender_full_name": "Mac",
        "timestamp": 1629498143
    },
    {
        "content": "<p>I'm just surprised that it doesn't pop up a dialog box or something instead</p>",
        "id": 250179837,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629498528
    },
    {
        "content": "<p>I think the problem is that the stream is locked by something (I imagine the Lean Infoview?) and that is what is causing writing to it to hang (as the file worker is waiting on what it wrote to be read).</p>",
        "id": 250180014,
        "sender_full_name": "Mac",
        "timestamp": 1629498720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, for that matter how should write to the infoview from C++ code? I would imagine it involves writing to the handle for the stdout IO stream. However, that handle is a <code>FILE*</code> and most C++ libraries (like LLVM) don't support writing to <code>FILE*</code> outputs, because that is not a C++ concept. So I don't know how to figure out what is the real Lean standard output stream to write to in C++.</p>",
        "id": 250180276,
        "sender_full_name": "Mac",
        "timestamp": 1629498959
    },
    {
        "content": "<p>I'm not sure what you mean by writing to the info view, its contents are hard-coded until we have widgets. The worker and watchdog communicate via the LSP over regular stdin &amp; stdout, there are no other streams involved.</p>",
        "id": 250180481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629499123
    },
    {
        "content": "<p>Which is the whole reason why it's a bad idea to write non-LSP to stdout in the server process</p>",
        "id": 250180515,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629499169
    },
    {
        "content": "<p>Ah, what I mean is that <code>#eval IO.println \"hello\"</code> writes a message that appears in the infoview. How do I, if possible, perform a similar write from C/C++ code?</p>",
        "id": 250180592,
        "sender_full_name": "Mac",
        "timestamp": 1629499217
    },
    {
        "content": "<p>I initially assumed that jus was a product of writing to stdout that the server worker caught.</p>",
        "id": 250180669,
        "sender_full_name": "Mac",
        "timestamp": 1629499292
    },
    {
        "content": "<p>Oh, you mean in a diagnostic. You'd need to return a string to Lean and print it there.</p>",
        "id": 250180745,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629499331
    },
    {
        "content": "<p>Huh? That's really how? I would think that <code>#eval IO.println \"hello\"</code> would have to be writing to <em>some</em> stream as that is what the code for <code>IO.println</code> does.</p>",
        "id": 250180890,
        "sender_full_name": "Mac",
        "timestamp": 1629499461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Init/System/IO.lean#L149-L151\">https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Init/System/IO.lean#L149-L151</a></p>",
        "id": 250181217,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629499757
    },
    {
        "content": "<p>Ah, so instead of the normal primitive stream, in the server, stdout is a fabricated pure stream the produces diagnostics?</p>",
        "id": 250181464,
        "sender_full_name": "Mac",
        "timestamp": 1629499990
    },
    {
        "content": "<p>Is that what you are saying?</p>",
        "id": 250181489,
        "sender_full_name": "Mac",
        "timestamp": 1629500028
    },
    {
        "content": "<p>Essentially, but it's a bit more localized than that. The stream doesn't know anything about diagnostics. <a href=\"https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Init/System/IO.lean#L541-L542\">https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Init/System/IO.lean#L541-L542</a></p>",
        "id": 250181592,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629500103
    },
    {
        "content": "<p>Ah, is there than a more effective way of printing things in commands? That is, the current chain would be <code>C++ print -&gt; String -&gt; #eval IO.print -&gt;  String -&gt; Diagnostic</code> -- is there a way to remove the middle <code>IO</code> link?</p>",
        "id": 250182711,
        "sender_full_name": "Mac",
        "timestamp": 1629501080
    },
    {
        "content": "<p>Does it matter? In any case, take a look at how <code>#eval</code> does it: <a href=\"https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Lean/Elab/BuiltinCommand.lean#L289\">https://github.com/leanprover/lean4/blob/9686910c72aaf1d39d28792265950b8f9f44880e/src/Lean/Elab/BuiltinCommand.lean#L289</a></p>",
        "id": 250182920,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629501296
    },
    {
        "content": "<p>Well I am printing entire LLVM  IR modules, so outputting a large file multiple times seems rather inefficient. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 250183053,
        "sender_full_name": "Mac",
        "timestamp": 1629501373
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 250183292,
        "sender_full_name": "Mac",
        "timestamp": 1629501645
    },
    {
        "content": "<p>I wanted to say that outputting into the <code>IO.Buffer</code> should be O(1) if it's the only output, but that's not true even after <a href=\"https://github.com/leanprover/lean4/pull/642\">https://github.com/leanprover/lean4/pull/642</a> because we convert between <code>String</code> and <code>ByteArray</code></p>",
        "id": 250203906,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629532443
    }
]