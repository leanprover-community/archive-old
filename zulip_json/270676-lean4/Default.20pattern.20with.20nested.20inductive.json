[
    {
        "content": "<p>I have the inductive type <code>Proof</code> whose constructor <code>nested</code> takes a term of another inductive type (<code>Context</code>). <br>\nWhen pattern-matching on <code>prf : Proof t</code> in the definition of <code>isAny</code> the default pattern <code>| _ =&gt; false</code> does not work as expected (i.e. dealing with the case <code>nested</code>).  In general it seems that if more constructors are present, all the nested ones are ignored by <code>_</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">application</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Context</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Context.insert</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">application</span> <span class=\"n\">u</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Proof</span>  <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">nested</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">C.insert</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isAny</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">prf</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">any</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>The error I get at <code>match</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">missing</span> <span class=\"n\">cases</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Proof.nested</span><span class=\"o\">(</span><span class=\"n\">Context.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and also <code>redundant alternative</code> at <code>|_ =&gt; false</code>. Is there a way I can make this work?</p>",
        "id": 293950633,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1660760209
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 293964639,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660765705
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 293965051,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660765842
    },
    {
        "content": "<p>I'd say this is a bug, the code you wrote should be valid</p>",
        "id": 293966327,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660766348
    },
    {
        "content": "<p>This works for me with the current nightly.</p>",
        "id": 294029996,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660810431
    },
    {
        "content": "<p>Yes, it works for me too after updating. Sorry for the noise.</p>",
        "id": 294044112,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1660816555
    }
]