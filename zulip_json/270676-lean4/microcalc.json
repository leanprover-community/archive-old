[
    {
        "content": "<p>Missing features but super cool that you can write this in Lean itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">calcStep</span>  <span class=\"o\">:=</span> <span class=\"s2\">\"...\"</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"calc \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"n\">calcStep</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">expandCalc</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">rest.size</span> <span class=\"k\">then</span> <span class=\"n\">stx</span> <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"bp\">$</span><span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">rest</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">rest</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">2</span><span class=\"o\">])))</span>\n    <span class=\"n\">expandCalc</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">newStx</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">t2</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pf12</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">expandCalc</span> <span class=\"n\">rest</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">pf12</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">t2</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 225250965,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612489521
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf12</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf23</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf34</span> <span class=\"o\">:</span> <span class=\"n\">t3</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">pf12</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">pf23</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">pf34</span>\n</code></pre></div>",
        "id": 225250970,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612489532
    },
    {
        "content": "<p>Now the \"relation-polymorphic\" version, that allows using other transitive relations besides equality?</p>",
        "id": 225251196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612489754
    },
    {
        "content": "<p>that seems rather hard, since you would need to add a production for any infix operation. Is it possible to have a programmatic parser at the location of the <code>\"=\"</code> that does a lookup into the current set of notations to see what infix ops exist?</p>",
        "id": 225251353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612489898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/microcalc/near/225251196\">said</a>:</p>\n<blockquote>\n<p>Now the \"relation-polymorphic\" version, that allows using other transitive relations besides equality?</p>\n</blockquote>\n<p>I am already exporting Mathlib relation manager attributes, so it wouldn't be hard to replicate the lean3 <code>calc</code> mode. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the trick is to elaborate the expression up until the <code>:</code> (which will resolve notation) and then just grab the operator name.</p>",
        "id": 225254624,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612493115
    },
    {
        "content": "<p>That doesn't work for <code>... &lt;= n</code> though, because that's not a valid expression (nor is <code>&lt;= n</code>)</p>",
        "id": 225254687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493168
    },
    {
        "content": "<p>the syntax associated to the infix operator is something like <code>term \"&lt;=\" term</code> and that doesn't admit either form</p>",
        "id": 225254710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493212
    },
    {
        "content": "<p>Perhaps it's possible to fake it by replacing <code>...</code> in the input with some placeholder that is a term like <code>()</code> and then parse <code>() &lt;= n</code> and postprocess the result</p>",
        "id": 225254840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493330
    },
    {
        "content": "<p>I can replace <code>...</code> with the actual term, i.e. the rhs of the previous line</p>",
        "id": 225255168,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612493669
    },
    {
        "content": "<p>sure, that works too</p>",
        "id": 225255176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493693
    },
    {
        "content": "<p>Do people want the exact same <code>calc</code> as before though? I was only implementing <code>microcalc</code> for fun. I am happy to implement a durable <code>calc</code> if people will use it.</p>",
        "id": 225255193,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612493725
    },
    {
        "content": "<p>I'm not sure how you would go about replacing a term in the input stream though</p>",
        "id": 225255194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493725
    },
    {
        "content": "<p>I'm sure people will want <code>calc</code>, although it's probably not a high priority ATM</p>",
        "id": 225255204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493756
    },
    {
        "content": "<p>I was using calc with &lt;= and &lt; and = for teaching analysis in lean 3 yesterday, but I don't think I've ever used it in the mathlib code I've written</p>",
        "id": 225264891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612505258
    },
    {
        "content": "<p>I use it regularly in mathlib code</p>",
        "id": 225264967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612505372
    },
    {
        "content": "<p>I use it a lot also. One point that was raised earlier is that it would make sense to have a syntax which resembles more closely other syntax, for instance replacing the weird <code>:</code> with <code>:=</code>.</p>",
        "id": 225269426,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612511580
    },
    {
        "content": "<p>Here's one solution for a heterogeneous <code>calc</code> based on a <code>Trans</code> typeclass and <code>...</code> as a term notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">heq</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">h'</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"...\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- enforce indentation of calc steps so we know when to stop parsing them</span>\n<span class=\"n\">syntax</span> <span class=\"n\">calcStep</span> <span class=\"o\">:=</span> <span class=\"n\">colGe</span> <span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"calc \"</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf12</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf23</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf34</span> <span class=\"o\">:</span> <span class=\"n\">t3</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span>\n   <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t5</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf23'</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf45'</span> <span class=\"o\">:</span> <span class=\"n\">t4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasLess</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Less</span> <span class=\"n\">Less</span> <span class=\"n\">Less</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span>\n   <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23'</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45'</span>\n</code></pre></div>",
        "id": 225283676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612522069
    },
    {
        "content": "<p>In fact <code>...</code> is now barely carrying its weight and one should probably just use <code>_</code> directly</p>",
        "id": 225283943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612522245
    },
    {
        "content": "<p>I am really not engaged with Lean 4 at all, because as a mathematician with essentially no programming background but ambitions to do serious mathematics in Lean, all I know is that Lean 4 is basically useless to me until I can have mathlib. However I am <em>extremely</em> impressed with the way that people are doing things like this -- \"oh by the way there's no <code>calc</code> right now, but of course if you want one then you can just knock one up in a few lines of code\". I've never written a line of meta code in my life and I suspect I won't be writing too many macros either, but I can really see that we have something exciting to look forward to.</p>",
        "id": 225284169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612522431
    }
]