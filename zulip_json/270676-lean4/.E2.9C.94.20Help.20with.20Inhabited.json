[
    {
        "content": "<p>I am trying to implement Inhabited for an inductive type parameterized (indexed?) by a Nat, but running into problems.</p>\n<p>Here a my (poor) attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tag</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"mi\">0x0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.nil</span>\n</code></pre></div>\n<p>But I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Tag.nil</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Tag</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Tag</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I think I understand the problem here (instance resolution expects n to be defined upfront so it can't unify n and 0 from .nil?), but I am not sure how to fix it.</p>",
        "id": 290031515,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658183315
    },
    {
        "content": "<p>Your instance claims that <code>Tag n</code> is inhabited for any <code>n</code>. This is because in <code>Inhabited (Tag n)</code> the undefined variable <code>n</code> is captured by the <code>autoImplicit</code> feature and automatically quantified over, as if you had written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.nil</span>\n</code></pre></div>\n<p>However, this is incorrect because <code>Tag.nil</code> is not of type <code>Tag n</code>, but only of type <code>Tag 0</code>. In fact, of all these specializations, <code>Tag 0</code> is the only one that you can prove inhabited. You can do so like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.nil</span>\n</code></pre></div>",
        "id": 290031775,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658183495
    },
    {
        "content": "<p>Is it so that Tag is not a type but a family of types and that Inhabited can only define a default for a specific Tag type (i.e. Tag 0, Tag 1, etc)?</p>\n<p>I am assuming then that I would have to defined an Inhabited for each of the constructors or is there a way to do it for the whole family of types?</p>",
        "id": 290032250,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658183771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484617\">Sébastien Michelland</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20Inhabited/near/290031775\">said</a>:</p>\n<blockquote>\n<p>In fact, of all these specializations, <code>Tag 0</code> is the only one that you can prove inhabited.</p>\n</blockquote>\n<p>Stronger, you can disprove the rest. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 290032751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184135
    },
    {
        "content": "<p>More generally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 290032844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184219
    },
    {
        "content": "<p>Sorry, my example was incomplete ... I have multiple constructors, each with a different Nat.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tag</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"mi\">0x0</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"mi\">0x1</span>\n<span class=\"bp\">|</span> <span class=\"n\">arg</span>  <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"mi\">0x2</span>\n<span class=\"c1\">-- ...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.nil</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.var</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Tag</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Tag.arg</span>\n<span class=\"c1\">-- ...</span>\n</code></pre></div>\n<p>Ideally, the Nat does not even need to be visible outside of the inductive: it is just a way to associate some type level 'data' with the inductive.</p>\n<p>I can't stop thinking I am overdoing this and I should simply have a function <code>def getTag (t : Tag) : Nat</code> instead ...</p>",
        "id": 290033297,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658184542
    },
    {
        "content": "<p>Depending on which indices are valid, it can be possible to define an <code>Inhabited</code> instance for an entire indexed family, but it looks like for your <code>Tag</code> type you'll have to do it on a case-by-case basis.  Is there something that could go in the question marks that's typeclass inference friendly and that would constrain the <code>Nat</code>? <code>instance ??? : Inhabited (Tag n)</code></p>",
        "id": 290033641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184823
    },
    {
        "content": "<p>Are you wanting things to be of type <code>Tag</code> in general? Or are you trying to constrain things so that it's possible for something to require a <code>Tag 37</code> specifically, for example?</p>",
        "id": 290033743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184885
    },
    {
        "content": "<p>With your current approach, if you want to have something that takes an arbitrary tag you'd have to use something like a sigma type.</p>",
        "id": 290033786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184920
    },
    {
        "content": "<p>For example, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Tag</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Tag.nil</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 290033875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658184963
    },
    {
        "content": "<p>I think if you find you'd mainly want to work with <code>Σ n, Tag n</code> that you should switch to using that <code>getTag</code> function.</p>",
        "id": 290034061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658185135
    },
    {
        "content": "<p>Also, it seems from your excerpt with more constructors that you are using the natural number to distinguish between each tag \"type\". That would not be necessary, since constructors are already differentiated -- you can tell them apart by using <code>match</code>.</p>",
        "id": 290034243,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658185284
    },
    {
        "content": "<p>Right. I was trying to encode an 'enum' value for each case, but it is clear now that this is not a good idea ... </p>\n<p>Thank you both for your help!</p>",
        "id": 290034681,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658185572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 290034702,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658185596
    },
    {
        "content": "<p>does Lean auto-generate a projection function if every constructor has the same named field? I think I'm thinking of Why3 but might be useful in Lean too</p>",
        "id": 290034971,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658185807
    },
    {
        "content": "<p>(actually, that's not relevant to this thread, sorry)</p>",
        "id": 290035034,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658185865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484617\">Sébastien Michelland</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Help.20with.20Inhabited/near/290034243\">said</a>:</p>\n<blockquote>\n<p>That would not be necessary, since constructors are already differentiated -- you can tell them apart by using <code>match</code>.</p>\n</blockquote>\n<p>Note that <span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span>'s encoding provides a very different benefit then <code>match</code>:  it allows you to constrain the set of constructors by the type. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"mi\">0x0</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"mi\">0x1</span>\n<span class=\"bp\">|</span> <span class=\"n\">arg</span> <span class=\"o\">{</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">tag</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"mi\">0x2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isVar</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"mi\">0x1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arg</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"c1\">-- all alternatives possible</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getId</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"mi\">0x1</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n<span class=\"c1\">-- no other alternatives needed</span>\n</code></pre></div>",
        "id": 290041228,
        "sender_full_name": "Mac",
        "timestamp": 1658191511
    }
]