[
    {
        "content": "<p>This is more of an unexpected behavior than a bug: we have a large structure, and when it is created we get a runtime assertion failure.  Rebuilding lean with the -DSMALL_ALLOCATOR=OFF option fixes this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Assertion</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sz1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">LEAN_MAX_SMALL_OBJECT_SIZE</span><span class=\"o\">),</span> <span class=\"n\">function</span> <span class=\"n\">lean_alloc_ctor_memory</span><span class=\"o\">,</span> <span class=\"n\">file</span> <span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean.h</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">334</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 224551914,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1611964383
    },
    {
        "content": "<p>The current runtime is assuming \"constructor objects\" have less than 512 bytes. We will remove this restriction. We know statically whether this assumption is true or not, and we can use the regular allocator when it is not.</p>",
        "id": 224552469,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611964895
    },
    {
        "content": "<p>So, the fix will not affect the performance of the generated code when the assumption is true.</p>",
        "id": 224552555,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611964940
    },
    {
        "content": "<p>Yeah, I assumed it was something like that</p>",
        "id": 224552826,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1611965163
    },
    {
        "content": "<p>Pushed <a href=\"https://github.com/leanprover/lean4/commit/d71aab5dc47c41c94bd803a72bb7aee6a6a4099c\">https://github.com/leanprover/lean4/commit/d71aab5dc47c41c94bd803a72bb7aee6a6a4099c</a></p>",
        "id": 224560953,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611974346
    },
    {
        "content": "<p>BTW, the constructor objects in the runtime still have the following limits:</p>\n<ul>\n<li>256 \"pointer\" fields</li>\n<li>1024 bytes for scalar fields </li>\n</ul>\n<p>In principle, we could add a new kind of object (\"fat constructors\") to the runtime. This new kind of object would have a bigger header, and would not have the limitations above. We can decide statically whether we need to use regular or fat constructors. So, there is no performance penalty for people using regular constructors only.<br>\nThat being said, we do not plan to support \"fat constructors\" anytime soon. For this kind of constructor to be useful, we would have to improve the performance of many subsystems.  For example, the kernel-generated recursors are quite expensive for an inductive datatype containing a constructor with more than 200 fields.</p>",
        "id": 224561269,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611974881
    },
    {
        "content": "<p>Thanks!</p>\n<p>For those larger objects, you (or we) could always just nest them, no? </p>\n<p>We had a related problem with the seL4 proofs when we first started trying to prove things about the C code --- the record of local variables was huge, and caused all sorts of (verification) performance problems.  In particular, the lemmas relating to update/update and access/update.  (I think) we ended up modelling records as trees rather than lists, which made things a lot faster.  Probably Lean doesn't have these issues as records are fundamental, although I don't know how you plan on handling structure simplification.</p>",
        "id": 224801848,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1612218116
    }
]