[
    {
        "content": "<p>On <code>leanprover/lean4:nightly-2022-02-02</code>, the following does not compile with an error <code>expected 'abbrev', 'axiom', 'class', 'constant', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'instance', 'macro', 'macro_rules', 'structure', 'syntax' or 'theorem'</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Foo is a function! -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"c1\">-- Error.</span>\n</code></pre></div>\n<p>Removing the preceding comment fixes the issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"c1\">-- Compiles ok.</span>\n</code></pre></div>\n<p>Bug or feature?</p>",
        "id": 270478255,
        "sender_full_name": "František Silváši",
        "timestamp": 1643846112
    },
    {
        "content": "<p>The comment has to come after the <code>open in</code></p>",
        "id": 270478354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643846167
    },
    {
        "content": "<p>otherwise it will be commenting the generated <code>section</code></p>",
        "id": 270478384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643846188
    },
    {
        "content": "<p>Oh so <code>open in</code> creates an ad hoc <code>section</code>, I understand now. Thank you.</p>",
        "id": 270478417,
        "sender_full_name": "František Silváši",
        "timestamp": 1643846211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši</span> has marked this topic as resolved.</p>",
        "id": 270478423,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643846215
    },
    {
        "content": "<p>That seems a bit awkward if the docstring is, say, 20 lines long</p>",
        "id": 270479953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643847113
    },
    {
        "content": "<p>I guess maybe one could argue that only ordinary comments should be that long.</p>",
        "id": 270480059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643847173
    },
    {
        "content": "<p>Some mathlib tactic docstrings are very long, containing examples of usage etc</p>",
        "id": 270480270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643847321
    },
    {
        "content": "<p>I suppose it's not really that awkward, since no one would complain if you wrote <code>section</code>, <code>open Nat</code>, long docstring <code>def ...</code>, <code>end</code>.</p>",
        "id": 270481211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643847928
    },
    {
        "content": "<p>it is a bit unfortunate. I don't think it can be fixed without making <code>open in</code> part of the def syntax though</p>",
        "id": 270481590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643848182
    },
    {
        "content": "<p>It's really not a big deal even if a docstring is long, the set of open namespaces is, at least from personal experience, rarely necessary to understand the code, so it being 'out of sight' is immaterial. It's something I type in for the machine to understand what I'm referring to, humans would know regardless.</p>",
        "id": 270482248,
        "sender_full_name": "František Silváši",
        "timestamp": 1643848578
    }
]