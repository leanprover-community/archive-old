[
    {
        "content": "<p>Here's an <a href=\"https://github.com/bollu/lean-to/blob/master/examples/HelloWorld.ipynb\">example of a Hello World Jupyter notebook</a> that was created with the Jupyter Kernel in the same repo. Note that Github renders Jupyter notebooks by default!</p>\n<h3>Rationale</h3>\n<p>As I understand it, <a href=\"https://github.com/insightmind/LeanInk\">LeanInk</a> is meant for static visualization of Lean4 code+proofs. I wondered if having a Jupyter kernel would complement this in writing \"programming\" style Lean4 code. I wonder what others feel about this, and if it makes sense to develop this further. This was a quick weekend hack to see if this is feasible (seems to be so!)</p>\n<h3>Technical details</h3>\n<p>This is implemented as a large chunk of C++ in <a href=\"https://github.com/bollu/lean-to/blob/02696aa855f35cacbf2c774cef5273d7949626c0/asm-kernel.cpp#L600\"><code>asm-kernel.cpp</code></a> that interacts with Jupyter via ZeroMQ, and a little bit of Lean4 in <a href=\"https://github.com/bollu/lean-to/blob/02696aa855f35cacbf2c774cef5273d7949626c0/REPLLib.lean\"><code>REPLLib.lean</code></a> to run Lean4 commands. Many thanks to <a href=\"https://github.com/arthurpaulino/LeanREPL\"><code>arthurpaulino/LeanREPL</code></a> for the REPL code. </p>\n<h3>Questions</h3>\n<p>I'd like to develop this further for fun, so feature requests would be nice <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. More to the point, I don't want to duplicate work and split the community's attention between the Jupyter kernel and LeanInk, so having a clearer picture of the relationship between the two would be very useful for me!</p>",
        "id": 280022135,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1650863411
    },
    {
        "content": "<p>Just to remark the obvious -- things like this would be really useful for people like me who are teaching this stuff.</p>",
        "id": 280023700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650865113
    },
    {
        "content": "<p>That's a great proof of concept! Well done!</p>",
        "id": 280024006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650865431
    },
    {
        "content": "<p>Very nice to see. Does it suffer the usual Jupyter notebook issue where dependent cells are not updated?</p>\n<p>Julia's Pluto.jl notebook resolves this issue. Might have other things worth looking into. <a href=\"https://github.com/fonsp/Pluto.jl\">https://github.com/fonsp/Pluto.jl</a></p>",
        "id": 280031052,
        "sender_full_name": "Sofia",
        "timestamp": 1650871195
    },
    {
        "content": "<blockquote>\n<p>Pluto offers an environment where changed code takes effect instantly and where deleted code leaves no trace. Unlike Jupyter or Matlab, there is no mutable workspace, but rather, an important guarantee:</p>\n<blockquote>\n<p>At any instant, the program state is completely described by the code you see.</p>\n</blockquote>\n<p>No hidden state, no hidden bugs.</p>\n</blockquote>",
        "id": 280031953,
        "sender_full_name": "Sofia",
        "timestamp": 1650871759
    },
    {
        "content": "<p>If my language/compiler project goes well, I plan to make a Pluto.jl style reactive notebook with a <a href=\"http://Hazel.org\">Hazel.org</a> style editor. All edits produce valid syntax. A program containing holes may still be partially reduced. Likewise type and binding errors become holes. All intermediate editor states are thus useful without heuristics or breaking the LSP's ability to infer types and so on.</p>",
        "id": 280033072,
        "sender_full_name": "Sofia",
        "timestamp": 1650872518
    },
    {
        "content": "<p>I know Lean is somewhat accepting with invalid syntax, but it doesn't go out of its way to inject typed holes in place of binding or type errors. I wonder how difficult this would be to add to Lean...</p>",
        "id": 280034586,
        "sender_full_name": "Sofia",
        "timestamp": 1650873449
    },
    {
        "content": "<p>Or if it'd even be welcome.</p>",
        "id": 280035460,
        "sender_full_name": "Sofia",
        "timestamp": 1650873862
    },
    {
        "content": "<p>I'm very supportive of structure editors, personally, but I didn't find the <a href=\"http://Hazel.org\">Hazel.org</a> editor to be the smoothest experience..... I would happily use a structure editor for Lean if it was as smooth of an experience as using VSCode :P</p>",
        "id": 280035939,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1650874097
    },
    {
        "content": "<p>(This might partly be a symptom of the VSCode extension not having substantial autocomplete options -- once we have e.g. exhaustive match template generation, the need might be even less there)</p>",
        "id": 280036039,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1650874152
    },
    {
        "content": "<p>Hazel certainly could be a lot smoother. I've been thinking more like the traditional auto-complete syntax expansion, maybe even grayed out multiple-choice.</p>",
        "id": 280036730,
        "sender_full_name": "Sofia",
        "timestamp": 1650874538
    },
    {
        "content": "<p>Nice work!!<br>\nThe REPL I wrote (which is not completely authorial either) supports rollbacks exactly for the cases in which an upward cell is executed. In this scenario, my plan would be to reset the cells below it and clean their output.</p>\n<p>I'd recommend keeping a clear use case in mind for the development of the kernel so you knowi what you're aiming at. I wrote the REPL after seeing Tomas' SciLean lib and I thought that eventually we'd be able to process data in Lean. Turns out Jupyter notebooks are great for that because once you run the code to read a dataframe, it's cached in memory so you're free to play with it.</p>\n<p>The downside of a Jupyter notebook is that we don't have the fast interactive response from the server while we're trying to prove theorems for example (which is a big part of Lean's use case)</p>",
        "id": 280052240,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650884364
    },
    {
        "content": "<blockquote>\n<p>Turns out Jupyter notebooks are great for that because once you run the code to read a dataframe, it's cached in memory so you're free to play with it.</p>\n</blockquote>\n<p>I mean, that's true of the Lean language server as well, no? Do you have something in mind we could improve there?</p>",
        "id": 280052625,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650884569
    },
    {
        "content": "<p>Reading a dataframe (say a CSV file) sounds like an IO operation to me. The current limitation I see is that IO calls like read/write files can be run after you compile your Lean code to a binary and run it. We can't, for instance, run a piece of code to read a file and play with its content on the same interface, whereas an interface like Jupyter would be fine for such task</p>",
        "id": 280053442,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650885170
    },
    {
        "content": "<p>(the limitation might be on the combination of VS Code + lean4 plugin rather than on the language server)</p>",
        "id": 280053511,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650885220
    },
    {
        "content": "<p>I even came to the point of envisioning a separate plugin to talk to the language server from Jupyter, similar to what we have for VS Code. So we would have a Lean 4 infoview on Jupyter. But the motivation needs to be strong before that path is crossed because I think it's a long road with a lot of work</p>",
        "id": 280053873,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650885438
    },
    {
        "content": "<p>There is no such limitation, see <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/IncludeStr.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/IncludeStr.lean</a></p>",
        "id": 280054565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650885863
    },
    {
        "content": "<p>Having said that, while I believe the current compilation strategy should ensure the string is loaded exactly once as long as only text below it is changed, this is not true for further computations done on the string, even if they are stored in parameter-less <code>def</code>s. This is a performance optimization in the interpreter we've considered before, but it has been low priority so far.</p>",
        "id": 280054810,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650886035
    },
    {
        "content": "<p>Interesting! But what about plotting things? Jupyter supports having images as the output of cells</p>",
        "id": 280054957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650886114
    },
    {
        "content": "<p>Technically speaking the infoview could support plotting things as well and e.g. pretty print trees as SVGs instead of the more sexp like representation</p>",
        "id": 280055034,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1650886172
    },
    {
        "content": "<p>Makes sense, but it's different from having the plots laid out so people can just scroll down and explore the document.<br>\nI am aware that I'm making a stretch because I am talking about using Lean for a task that has the right tooling already set for Python, R etc. I am just daydreaming :D</p>",
        "id": 280056259,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650886870
    },
    {
        "content": "<p>I experimented with plotting a bit using a hacked lean-vscode that didn't escape html in strings, I thought it was surprisingly nice to just rendered svg in a separate organised pane next to the eval commands, which automatically update when you change code.</p>",
        "id": 280084595,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1650900190
    },
    {
        "content": "<p>This is really cool!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4/near/280052240\">said</a>:</p>\n<blockquote>\n<p>[...] In this scenario, my plan would be to reset the cells below it and clean their output.</p>\n</blockquote>\n<p>This goes against the traditional notebook format where things are executed in order they are input and not in the order of the file contents. I think the traditional notebook format is a bad fit for Lean so a non-traditional notebook format is probably better. The drawback is that I would expect having to constantly battle with the Jupyter core in the implementation. I hope it works out anyway!</p>",
        "id": 280134891,
        "sender_full_name": "FranÃ§ois G. Dorais",
        "timestamp": 1650923777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4/near/280084595\">said</a>:</p>\n<blockquote>\n<p>I experimented with plotting a bit using a hacked lean-vscode that didn't escape html in strings, I thought it was surprisingly nice to just rendered svg in a separate organised pane next to the eval commands, which automatically update when you change code.</p>\n</blockquote>\n<p>Now I'm wondering how hard it would be to hack lean-vscode to show all <code>#eval</code> output in a continuous panel that automatically scrolls to where you are in the document, like what the markdown extension does for previewing your markdown</p>",
        "id": 282691152,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1652814190
    },
    {
        "content": "<p>Is your code in a repository somewhere that I can play around with? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 282691311,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1652814252
    },
    {
        "content": "<p>If i look at my goal view in Emacs the language server is already telling the client/vscode in this case where the messages are coming from line (and even column) wise so If you have some code to sync that scrolling, shouldnt be too hard.</p>",
        "id": 282692035,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1652814515
    },
    {
        "content": "<p>If we get something like that working, + a library for building data visualizations in HTML, + SciLean, + the optimization Sebastian mentioned, I feel like we'd basically have a Lean replacement for jupyter, no?</p>",
        "id": 282692431,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1652814680
    },
    {
        "content": "<p>(Oh, one other \"small\" thing -- making a web extension for VS Code, so that it can be run in the browser...)</p>",
        "id": 282702543,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1652819424
    },
    {
        "content": "<p>In emacs, lsp can highlight subterms and show their types, see attached picture(probably works in VS code too). </p>\n<p><a href=\"/user_uploads/3121/n2wYMe5FdbR9gVZ7Olsh481X/Screenshot-from-2022-05-18-10-17-59.png\">Screenshot-from-2022-05-18-10-17-59.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/n2wYMe5FdbR9gVZ7Olsh481X/Screenshot-from-2022-05-18-10-17-59.png\" title=\"Screenshot-from-2022-05-18-10-17-59.png\"><img src=\"/user_uploads/3121/n2wYMe5FdbR9gVZ7Olsh481X/Screenshot-from-2022-05-18-10-17-59.png\"></a></div><p>Would it be possible to get something similar in the goal view? In particular, I would like to generate appropriate <code>conv</code> command <code>enter [...]</code> to zoom in on such a subterm and rewrite it as user desires.</p>\n<p>Imagined workflow would be that you right click on a subterm and get a menu of potentially operations: simplify, expand, together etc.</p>",
        "id": 282756983,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652863515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> That's certainly part of what the widget framework should accomplish. In Lean 3 there was never widget support for <code>conv</code>, but I'm pretty sure it is on <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>'s radar for Lean 4.</p>",
        "id": 282757762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652863915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4/near/282756983\">said</a>:</p>\n<blockquote>\n<p>In particular, I would like to generate appropriate <code>conv</code> command <code>enter [...]</code> to zoom in on such a subterm and rewrite it as user desires.</p>\n</blockquote>\n<p>This is <em>exactly</em> what one of <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>'s students is working on right now, so... stay tuned!</p>",
        "id": 282758601,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652864421
    },
    {
        "content": "<p>That is, for VS Code (and possibly lean.nvim). No attempts to port widgets to lean4-mode have been made yet.</p>",
        "id": 282758770,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652864497
    },
    {
        "content": "<p>That is amazing! Looking forward trying it out.</p>",
        "id": 282759858,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652865058
    },
    {
        "content": "<p>I have hacked a proof of concept for lean3:</p>\n<p><a href=\"https://github.com/miguelmarco/leankernel\">https://github.com/miguelmarco/leankernel</a></p>\n<p>It works but may be fragile.</p>\n<p>My main problem is that the jupyter notebook paradigm requires a \"clear state\" in the backend when the  answer is given, whereas the lean server works ayncronously. So the jupyter kernel might think that the lean server has finished processing the last request, answer to the frontend, and then some more messages from the lean server might arrive. The heuristic I use for this is to wait for a <code>is_running:False</code>message, and then wait 0.5 seconds without new messages. This introduces a slowdown in the user experience.</p>\n<p>Is there a way to ask the lean server if it is really done processing all the previous requests?</p>",
        "id": 285166433,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1654546706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4/near/285166433\">said</a>:</p>\n<blockquote>\n<p>I have hacked a proof of concept for lean3:</p>\n<p><a href=\"https://github.com/miguelmarco/leankernel\">https://github.com/miguelmarco/leankernel</a></p>\n<p>It works but may be fragile.</p>\n<p>My main problem is that the jupyter notebook paradigm requires a \"clear state\" in the backend when the  answer is given, whereas the lean server works ayncronously. So the jupyter kernel might think that the lean server has finished processing the last request, answer to the frontend, and then some more messages from the lean server might arrive. The heuristic I use for this is to wait for a <code>is_running:False</code>message, and then wait 0.5 seconds without new messages. This introduces a slowdown in the user experience.</p>\n<p>Is there a way to ask the lean server if it is really done processing all the previous requests?</p>\n</blockquote>\n<p>I tried to install your leankernel on windows10 and ubuntu22.04, but both of them didn't work. I think I followed the Readme.md every step of the way. May I ask for a detailed installation tutorial?</p>",
        "id": 289024104,
        "sender_full_name": "Ziyu Zhou",
        "timestamp": 1657347772
    },
    {
        "content": "<p>Did you get an error message?</p>",
        "id": 289025074,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1657349223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4/near/289025074\">said</a>:</p>\n<blockquote>\n<p>Did you get an error message?</p>\n</blockquote>\n<p>It prompts: Failed to start the Kernel. Jupyter log:<br>\n<a href=\"/user_uploads/3121/dHvfkGg_UDC8_x1wAs7m82WA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dHvfkGg_UDC8_x1wAs7m82WA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dHvfkGg_UDC8_x1wAs7m82WA/image.png\"></a></div>",
        "id": 289038716,
        "sender_full_name": "Ziyu Zhou",
        "timestamp": 1657369297
    },
    {
        "content": "<p>There must be something wrong with my installation process, but I cannot check it out. If you could give me an example of a proper installation, especially the environment variable configuration information, I'd appreciate it.</p>",
        "id": 289039115,
        "sender_full_name": "Ziyu Zhou",
        "timestamp": 1657369898
    },
    {
        "content": "<p>Sorry for not answering before. I didn't see the message.</p>\n<p>From what I see, you use conda installation, right?</p>\n<p>I am not familiar with that kind of environments. Maybe there is a specific way to install python packages there?</p>",
        "id": 294489652,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1661036834
    },
    {
        "content": "<p>Actually I used ''pip install .''</p>\n<p>I'm not very familiar with how jupyter kernel works, and it's hard for me to make a reasonable guess as to what went wrong with my installation process. A more detailed installation tutorial may be helpful. Thank you!</p>",
        "id": 294524508,
        "sender_full_name": "Ziyu Zhou",
        "timestamp": 1661074640
    },
    {
        "content": "<p>Sorry again for the delay. Since I finally got some free time, i have taken a look again at this project, and found that it was indeed a problem in the code as it has been published. </p>\n<p>I will try to improve it. Will let you know when it is done.</p>",
        "id": 319462945,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1672862449
    },
    {
        "content": "<p>In the meantime, you can try to edit the <code>kernel.json</code> file to make it look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"argv\"</span><span class=\"o\">:[</span><span class=\"s2\">\"python3\"</span> <span class=\"o\">,</span><span class=\"s2\">\"-m\"</span> <span class=\"o\">,</span> <span class=\"s2\">\"leankernel.leankernel\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"{connection_file}\"</span><span class=\"o\">],</span>\n <span class=\"s2\">\"display_name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Lean\"</span><span class=\"o\">,</span>\n <span class=\"s2\">\"language\"</span><span class=\"o\">:</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">,</span>\n<span class=\"s2\">\"env\"</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n    <span class=\"s2\">\"LEAN_MEMORY\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"4096\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"LEAN_TIME\"</span>  <span class=\"o\">:</span> <span class=\"s2\">\"100000\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"LEAN_BINARY\"</span>  <span class=\"o\">:</span> <span class=\"s2\">\"YOUR_LEAN_BINARY,</span>\n<span class=\"s2\">    \"</span><span class=\"n\">LEAN_PATHFILES</span><span class=\"s2\">\" : \"</span><span class=\"n\">YOUR_PATH_TO_LEAN_FILES</span><span class=\"s2\">\"</span>\n<span class=\"s2\"> }</span>\n<span class=\"s2\">}</span>\n</code></pre></div>",
        "id": 319464328,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1672862938
    }
]