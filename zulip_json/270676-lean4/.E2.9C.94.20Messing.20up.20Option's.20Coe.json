[
    {
        "content": "<p>Your Coe instance can be combined with itself an unbounded number of times, synthesizing larger and larger types. You need to use the right Coe class for instances with an arbitrary source/target type: <a href=\"https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96\">https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96</a></p>",
        "id": 279680481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650547945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Messing.20up.20Option's.20Coe/near/279680481\">said</a>:</p>\n<blockquote>\n<p>Your Coe instance can be combined with itself an unbounded number of times, synthesizing larger and larger types. You need to use the right Coe class for instances with an arbitrary source/target type: <a href=\"https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96\">https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96</a></p>\n</blockquote>\n<p>So assuming I would tend to want a <code>Numbered X</code> to be coerced to an <code>X</code> first, and then have other coercions applied, I would have to use <code>CoeHead</code>?</p>",
        "id": 279681413,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650548449
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 279681714,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650548601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 279681744,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650548614
    }
]