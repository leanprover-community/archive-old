[
    {
        "content": "<p>Consider the macro <code>kvbare</code> which creates custom syntax <code>str ^^^ str</code> to create a key-value tuple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kvbare</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"s2\">\"^^^\"</span> <span class=\"n\">str</span>  <span class=\"o\">:</span> <span class=\"n\">kvbare</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"kvbare% \"</span> <span class=\"n\">kvbare</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">^^^</span>  <span class=\"bp\">$</span><span class=\"n\">j</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobare</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span>  <span class=\"s2\">\"foobare\"</span>  <span class=\"bp\">^^^</span>  <span class=\"s2\">\"barbare\"</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>The above errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">db5df69db460</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'«</span><span class=\"n\">termKvbare</span><span class=\"bp\">%</span><span class=\"n\">_</span><span class=\"bp\">»'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n<span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"s2\">\"foobare\"</span><span class=\"bp\">^^^</span><span class=\"s2\">\"barbare\"</span>\n</code></pre></div>\n<p>I'm quite puzzled as to what's going on since a small change in the macro, which adds a prefix of <code>[</code> and a suffix of <code>]</code> succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kv</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"^^^\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">kv</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"kv% \"</span> <span class=\"n\">kv</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kv</span><span class=\"bp\">%</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">^^^</span>  <span class=\"bp\">$</span><span class=\"n\">j</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">kv</span><span class=\"bp\">%</span> <span class=\"o\">[</span> <span class=\"s2\">\"foo\"</span>  <span class=\"bp\">^^^</span>  <span class=\"s2\">\"bar\"</span> <span class=\"o\">]</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there some way to get the original macro (<code>kvbare</code>) working? If not, what's the problem with it? (lack of prefix/suffix?)</p>",
        "id": 255677265,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633052620
    },
    {
        "content": "<p>The problem is that the pattern </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">^^^</span>  <span class=\"bp\">$</span><span class=\"n\">j</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>is being interpreted as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">kvbare</span> <span class=\"bp\">^^^</span>  <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>Recall that we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">58</span> <span class=\"s2\">\" ^^^ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HXor.hXor</span>\n</code></pre></div>\n<p>To get the behavior you expect, you should write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"bp\">^^^</span>  <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255678092,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633053307
    },
    {
        "content": "<p>In the future, we should display the category of pattern variables when we hover over them in VS Code. I think it will help users to diagnose this kind of problem.</p>",
        "id": 255678315,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633053517
    }
]