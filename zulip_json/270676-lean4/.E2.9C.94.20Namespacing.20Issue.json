[
    {
        "content": "<p>In the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">inductive</span> <span class=\"n\">Raw.Thing</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Raw.Thing.toRealThing</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.Thing.a</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Thing.a</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.Thing.b</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Thing.b</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>... Lean complains on the second to last line, with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">a</span> <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Raw.Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>First of all, I was actually expecting this to work, since <code>Thing</code> is explicitly not <code>Raw.Thing</code>, since <code>Raw.Thing</code> is protected. But perhaps I don't understand how namespaces work well enough.<br>\nSo my question is: how can I clarify that <code>Thing.a n</code> refers to an object of type <code>Thing</code>, not <code>Raw.Thing</code>?</p>",
        "id": 258430519,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634758614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I think the problem is <code>protected</code> only provides one level of protection. That is, within the <code>Raw</code> namespace you need to use <code>Raw.Thing</code> to refer to it. However the problem here is that you are in the <code>Thing</code> namespace (inside <code>Raw</code>) and thus <code>Thing</code> refers to said namespace. I don't know if there is a way to enter a namespace without this effect (i.e., in <code>namespace foo</code>, <code>foo</code> always refers to said foo).</p>",
        "id": 258432091,
        "sender_full_name": "Mac",
        "timestamp": 1634759263
    },
    {
        "content": "<p>However, this may still be a bug (i.e., this may not be an edge case that was not caught and not the desired behavior).</p>",
        "id": 258432345,
        "sender_full_name": "Mac",
        "timestamp": 1634759350
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> is correct, <code>protected</code> only provides one level of protection.<br>\nRecall that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Raw.Thing.toRealThing</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is expanded to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Raw.Thing</span>\n<span class=\"kd\">def</span> <span class=\"n\">toRealThing</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">Raw.Thing</span>\n</code></pre></div>\n<p>To refer to <code>Thing.a</code> and <code>Thing.b</code> from the <code>Raw.Thing</code> namespace, you should use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Raw.Thing.toRealThing</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Raw.Thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.Thing.a</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_root_.Thing.a</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Raw.Thing.b</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_root_.Thing.b</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Another option is to rename <code>Raw.Thing</code> to <code>Thing.Raw</code>.</p>",
        "id": 258433039,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634759611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 258435715,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634760560
    }
]