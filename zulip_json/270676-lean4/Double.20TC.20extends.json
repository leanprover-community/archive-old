[
    {
        "content": "<p>Lets say that we want to define <code>Ring</code> from its two projections on <code>Monoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n  <span class=\"n\">mop</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n  <span class=\"n\">properties</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toAddMonoid</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">a</span>\n  <span class=\"n\">toMulMonoid</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">a</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">toAddMonoid.mop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">toMulMonoid.mop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">toAddMonoid.e</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">toMulMonoid.e</span><span class=\"o\">)</span>\n  <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n  <span class=\"n\">properties</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But it would be nicer to use the <code>extends</code> syntax (I think it will automatically add an instance to deduce Monoid from Ring) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">toAddMonoid</span> <span class=\"o\">:=</span> <span class=\"n\">toMonoid</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">toMulMonoid</span> <span class=\"o\">:=</span> <span class=\"n\">toMonoid_1</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- The same as before</span>\n  <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">toAddMonoid.mop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">toMulMonoid.mop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">toAddMonoid.e</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">toMulMonoid.e</span><span class=\"o\">)</span>\n  <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n  <span class=\"n\">properties</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean generates the fields <code>Ring.toMonoid</code> (as expected) and <code>Ring.toMonoid_1</code>.<br>\nSo it works just as expected? Well, not really...<br>\nWhen defining a <code>Ring</code> instance, we can specify <code>toMonoid</code> but not <code>toMonoid_1</code> and then lean chooses <code>toMonoid_1 := toMonoid</code>.<br>\nWhat am I doing wrong?</p>",
        "id": 262588032,
        "sender_full_name": "Gabriel DORIATH DÖHLER",
        "timestamp": 1637760559
    },
    {
        "content": "<p>Oups I forgot to test one thing: <code>toMonoid_1</code> isn't available in the definition of <code>Ring</code>. So some of the handy notations like <code>mul</code>and <code>one</code> create errors and should instead be declared separately.</p>",
        "id": 262589854,
        "sender_full_name": "Gabriel DORIATH DÖHLER",
        "timestamp": 1637761524
    },
    {
        "content": "<p>You might want to look at how we do this in mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/blob/3d0564ad89b3996f73a499f24f8f92e7b1778323/Mathlib/Algebra/Ring/Basic.lean#L18\">https://github.com/leanprover-community/mathlib4/blob/3d0564ad89b3996f73a499f24f8f92e7b1778323/Mathlib/Algebra/Ring/Basic.lean#L18</a></p>\n<p>We have separate hierarchies for \"additive\" and \"multiplicative\" structures (depending on whether you write them with + or *) and then Ring can extend semigroup twice (once additive, once multiplicative, so there's no clash).  It's the same in Lean 3.</p>",
        "id": 262590325,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637761748
    },
    {
        "content": "<p>I am not an expert in this typeclass stuff but you have defined <code>Monoid</code> to be a class here so lean will expect at most one instance of <code>Monoid α</code> for type class inference to function properly, and you are giving it two. The way we work around this in lean 3 is that we define... What Gabriel just said</p>",
        "id": 262590369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637761769
    },
    {
        "content": "<p>I remember at the time thinking that having two group heirarchies was crazy but now I think it's a stroke of genius. Often in an introductory group theory class someone might intentionally use some exotic character to denote the group law, but in practice mathematicians either use + or * and furthermore they often have a very good reason for their choice</p>",
        "id": 262590618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637761882
    },
    {
        "content": "<p>You could do something like \"extends Monoid a, Monoid (additive a)\"?</p>",
        "id": 262590634,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637761890
    },
    {
        "content": "<p>But then the fields clash anyway</p>",
        "id": 262590735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637761926
    }
]