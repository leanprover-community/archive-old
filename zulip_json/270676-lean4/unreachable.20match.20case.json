[
    {
        "content": "<p>Is it possible to replace the <code>unreachable!</code> with some proof that any other possibility except for <code>bool _</code> is unreachable because the return of <code>Literal.eq</code> is always a <code>Literal.bool</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Literal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"o\">:</span> <span class=\"n\">Bool</span>   <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"o\">:</span> <span class=\"n\">Int</span>    <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>  <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.eq</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"n\">bₗ</span><span class=\"o\">,</span> <span class=\"n\">bool</span>  <span class=\"n\">b</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">bₗ</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">iₗ</span> <span class=\"bp\">==</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">iₗ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"n\">sₗ</span><span class=\"o\">,</span> <span class=\"n\">str</span>   <span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">sₗ</span> <span class=\"bp\">==</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">,</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">bool</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.eq</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 278689716,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649768965
    },
    {
        "content": "<p>There may be various workarounds, but have you considered making <code>Literal</code> (and, presumably, other similar types) \"intrinsically typed\" by parameterizing/indexing it with the type of the value it carries? Then <code>Literal.eq</code> could have type <code>Literal t -&gt; Literal t -&gt; Literal .bool</code>.</p>",
        "id": 278690775,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649769429
    },
    {
        "content": "<p>Whether that is a good idea in the greater context depends on a few other things, e.g. on how complex your type system is.</p>",
        "id": 278690820,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649769455
    },
    {
        "content": "<p>In my case I need all <code>Literal</code>s to be of the same type so I can have, for instance, <code>List Literal</code> with heterogeneous inner types</p>",
        "id": 278690977,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649769514
    }
]