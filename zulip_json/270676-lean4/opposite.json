[
    {
        "content": "<p>So I tried making <code>opposite</code> a structure. It's pretty rough, and a somewhat atypical situation, because we apply it to the objects of a category to form the opposite category, and those appear as parameters of the <code>hom</code> types. So there are many cases where even the statements of existing lemmas no longer type check. Furthermore, the lost definitional equality <code>x.unop.op = x</code> sometimes occurs when <code>x</code> is not a variable but a more complicated expression, such as the application of a functor to an object.</p>",
        "id": 225070059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612381226
    },
    {
        "content": "<p>I guess the way we have dealt with such things elsewhere in the category theory library is to add \"coherence isomorphisms\", in this case between <code>x.unop.op</code> and <code>x</code>, and then provide <code>simp</code> lemmas that say they are the identity if <code>x</code> is of the form <code>y.op</code>, and describing the behavior with respect to functors and inverses and so on.</p>",
        "id": 225070278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612381325
    },
    {
        "content": "<p>It sounds possible, but not that pleasant.</p>",
        "id": 225070296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612381337
    }
]