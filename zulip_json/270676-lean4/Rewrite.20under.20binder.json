[
    {
        "content": "<p>A possibly dumb question, is the following supposed to fail?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- good</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    bar 10 ?n</span>\n<span class=\"cm\">  h : ∀ (m n : Nat), bar 10 n = bar m n</span>\n<span class=\"cm\">  h' : ∀ (n : Nat), bar 10 n = 11</span>\n<span class=\"cm\">  ⊢ false = true -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288839096,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657215156
    },
    {
        "content": "<p>I think so. It's not that <code>rw</code> can't rewrite under binders as sometimes stated, but that it cannot rewrite <em>bound variables</em>, or terms involving them.</p>",
        "id": 288839449,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657215326
    },
    {
        "content": "<p>Okay, is <code>simp only</code> or something else the preferred alternative?</p>",
        "id": 288839723,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657215426
    },
    {
        "content": "<p>Yeah, <code>simp only</code> is the next closest one I'd say</p>",
        "id": 288839782,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657215451
    },
    {
        "content": "<p>Try proving both examples using <code>▸</code> if you want to understand <code>rw</code>'s troubles :)</p>",
        "id": 288839844,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657215473
    },
    {
        "content": "<p>Right, I guess <code>kabstract</code> is not sufficient and we must first intro the binders which <code>rw</code> does not do (?). Thanks!</p>",
        "id": 288840342,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657215659
    },
    {
        "content": "<p><code>rw</code> doesn't know about <code>funext</code>, which would give you the power to indiscriminately rewrite under the binders. <code>simp</code> knows about it though.</p>",
        "id": 288841394,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657216186
    },
    {
        "content": "<p>That's fair, although this particular example does not need <code>funext</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barThm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 'GF256.barThm' does not depend on any axioms -/</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">barThm</span>\n</code></pre></div>",
        "id": 288842310,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657216524
    },
    {
        "content": "<p><code>▸</code> may have been a red herring as it's rewriting the goal, not the hypothesis. You'd need a <code>have</code> to simulate <code>rw</code>.</p>",
        "id": 288842802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657216697
    },
    {
        "content": "<p>Is that a relevant difference? We can also just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">barThm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 288843092,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657216807
    },
    {
        "content": "<p>That is, the corresponding tactic proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h'</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 288843108,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657216817
    },
    {
        "content": "<p>And the doomed term corresponding to <code>rw [h'] at h</code> would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.338</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>As you can see, the missing hole is not allowed to refer to the bound <code>n</code></p>",
        "id": 288843710,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657217078
    }
]