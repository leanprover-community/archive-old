[
    {
        "content": "<p>Lean's Applicative adds 2 new operators that Haskell doesn't seem to have, namely, SeqLeft and SeqRight.  Has anyone written a nice tutorial on what these are exactly?  I see them used heavily in Parsec, but when I try and show trivial examples, it is hard to convey the usefulness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"c1\">-- [4, 6, 4, 6, 4, 6]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"bp\">&lt;*</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- [4, 4, 4, 6, 6, 6]</span>\n</code></pre></div>\n<p>Does anyone have any better trivial examples of the usefulness of *&gt; and *&lt; ?</p>",
        "id": 295143615,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661385508
    },
    {
        "content": "<p>It's a version of the \"discard\" operation. Rather than keeping both results, only the one pointed to is kept, but both are run in the order specified. <code>a *&gt; b</code> is just <code>do let _ &lt;- a; b</code> and <code>a &lt;* b</code> is <code>do let x &lt;- a; let _ &lt;- b; return x</code></p>",
        "id": 295147162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661389267
    },
    {
        "content": "<p>it's very useful for parsers since you can do things like <code>(·,·) &lt;$&gt; tk \"(\" *&gt; parseExpr &lt;*&gt; tk \",\" *&gt; parseExpr &lt;* tk \")\"</code> for parsing a pair</p>",
        "id": 295147268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661389347
    },
    {
        "content": "<p>or just <code>tk \"(\" *&gt; parseExpr &lt;* tk \")\"</code> for a parenthesized expression</p>",
        "id": 295147298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661389391
    },
    {
        "content": "<p>Haskell does have them, by the way: <a href=\"https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Applicative.html#v:-42--62-\">https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Applicative.html#v:-42--62-</a></p>",
        "id": 295147580,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661389760
    },
    {
        "content": "<p>Ah, thanks, should that definition of <code>a *&gt; b</code> be <code>do let _ &lt;- a; let x &lt;- b; return x</code> ? I'm worried that \"&lt;-\" was missing on b in your version or was that deliberate?</p>",
        "id": 295148267,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661390637
    },
    {
        "content": "<p>I added something along the lines that you suggested here:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/8d20458d79231a04d5086e47a8aaa63a6c1495db/doc/monads/applicatives.md\">https://github.com/leanprover/lean4/blob/8d20458d79231a04d5086e47a8aaa63a6c1495db/doc/monads/applicatives.md</a></p>",
        "id": 295149260,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661391874
    },
    {
        "content": "<p>That's the same thing, but you can write it that way if it helps to emphasize the symmetry</p>",
        "id": 295154710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661396932
    },
    {
        "content": "<p>I've added now <a href=\"https://github.com/leanprover/lean4/blob/6ff03893436070cd5b29b080437529dd1fae34a6/doc/monads/monads.md\">part 3, monads.md</a> with an open question of how to explain the Lean Monad Identity law, if we have one that is easy to explain...</p>",
        "id": 295156903,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661399368
    },
    {
        "content": "<p>The left identity rule is <code>bind_pure</code>, and the right identity is <code>pure_bind</code></p>",
        "id": 295157983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661400231
    },
    {
        "content": "<p>(note that haskell's <code>return</code> is lean's <code>pure</code>)</p>",
        "id": 295158037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661400258
    },
    {
        "content": "<p>also note that <a href=\"https://mmhaskell.com/monads/tutorial\">https://mmhaskell.com/monads/tutorial</a> has a typo, the left identity law should say <code>m &gt;&gt;= return = m</code></p>",
        "id": 295158114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661400339
    },
    {
        "content": "<p>You rock!  I was indeed wondering why the left identity rule in the Haskell book didn't have an equality :-)</p>",
        "id": 295288859,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661452751
    }
]