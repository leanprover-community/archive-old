[
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1842\">lean4#1842</a> reports a PANIC that I encountered trying to bump std4/mathlib4 to the latest nightly, so I could finish <code>logic.equiv.defs</code> which is waiting on other fixes to lean4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">List.Pairwise</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">and_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span> <span class=\"n\">hc</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">and_left_comm</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">and_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">and_assoc</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">And.comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pairwise_append</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Pairwise</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">l₁.Pairwise</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">l₂.Pairwise</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">and_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(The proof given here should have unsolved goals, but no panic.)</p>",
        "id": 310516848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668639582
    },
    {
        "content": "<p>(This code seems to work in mathlib4, which is on <code>4.0.0-nightly-2022-11-14</code>; the issue reports that it doesn't work on <code>4.0.0-nightly-2022-11-16</code>)</p>",
        "id": 310517633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668639936
    },
    {
        "content": "<p>This is a fallout from the fix for 1815, which was merged yesterday.</p>",
        "id": 310519869,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668640964
    },
    {
        "content": "<p>Pushed a fix for this.</p>",
        "id": 310531626,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1668648655
    }
]