[
    {
        "content": "<p>We're trying to define custom syntax with negative lookaheads, which are conveniently defined already in Lean. However, we get a strange behavior when combining it with comma-separated syntax. Here's a MWE for context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">args</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kwargs</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">ident</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">kwargs</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">!</span><span class=\"s2\">\"=\"</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\",\"</span> <span class=\"n\">kwargs</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">args</span>\n<span class=\"c1\">-- syntax sepBy(ident, \",\", notFollowedBy(\",\" kwargs)) (\",\" kwargs )? : args</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[args|\"</span> <span class=\"n\">args</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">=</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This will parse the first list <code>foo, bar</code> but not the second, <code>foo, bar=baz</code>. If we change the syntax definition for the explicit <code>sepBy</code> commented above, the first definition stops parsing but it does parse the second.  Does anyone know what's happening/what we're missing? Thanks!<br>\nCC <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 282646093,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652796698
    },
    {
        "content": "<p>It seems to work for me on <code>leanprover/lean4:nightly-2022-05-17</code>, assuming the macro expansion for that piece is defined.</p>",
        "id": 282646823,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1652796986
    },
    {
        "content": "<p>The problem seems to lie on the usage of comma. This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">args</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kwargs</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">ident</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">kwargs</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">!</span><span class=\"s2\">\"=\"</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\"~\"</span> <span class=\"n\">kwargs</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">args</span>\n<span class=\"c1\">-- syntax sepBy(ident, \",\", notFollowedBy(\",\" kwargs)) (\",\" kwargs )? : args</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[args|\"</span> <span class=\"n\">args</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">~</span> <span class=\"n\">bar</span><span class=\"bp\">=</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Simplified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">kwargs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">ident</span><span class=\"o\">),</span><span class=\"bp\">+</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[args|\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\"~\"</span> <span class=\"n\">kwargs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">~</span> <span class=\"n\">q</span><span class=\"bp\">=</span><span class=\"n\">rt</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">=</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282648482,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652797685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> it doesn't work for me on that nightly :/ </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>➜  lean-mlir-frontend git:<span class=\"o\">(</span>master<span class=\"o\">)</span> ✗ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">4</span>.0.0-nightly-2022-05-17, commit 61c7b8b94c9e, Release<span class=\"o\">)</span>\n➜  lean-mlir-frontend git:<span class=\"o\">(</span>master<span class=\"o\">)</span> ✗ lean DSL/Python/MWE.lean\nDSL/Python/MWE.lean:11:11: error: elaboration <span class=\"k\">function</span> <span class=\"k\">for</span> <span class=\"s1\">'«term[args|_]»'</span> has not been implemented\n  <span class=\"o\">[</span>args<span class=\"p\">|</span>foo, bar<span class=\"o\">]</span>\nDSL/Python/MWE.lean:12:26: error: unexpected element\n</code></pre></div>",
        "id": 282650751,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652798637
    },
    {
        "content": "<p>as in, <code>bar</code> won't parse (line 12)</p>",
        "id": 282650953,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652798707
    },
    {
        "content": "<p>Just to make sure, you're expecting the <code>has not been implemented</code> error, right?</p>",
        "id": 282650958,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652798708
    },
    {
        "content": "<p>yep, that one I'm expecting, the <code>unexpected element</code> one I'm not (and they switch with the other syntax definition commented out)</p>",
        "id": 282651044,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652798749
    },
    {
        "content": "<p>While a better solution is not presented, you can keep going with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span>       <span class=\"n\">kwarg</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span>           <span class=\"o\">:</span> <span class=\"n\">kwarg</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">kwarg</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[args|\"</span> <span class=\"n\">kwarg</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">=</span><span class=\"n\">rt</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">=</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But then you will need to manually throw an error for <code>def bar := [args| foo, q=rt, www, bar=baz]</code></p>",
        "id": 282651426,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652798896
    },
    {
        "content": "<p>(I believe you don't want to allow an <code>ident</code> after an <code>ident=ident</code>)</p>",
        "id": 282651612,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652798984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> Here's what works for me so we're clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">args</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kwargs</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">ident</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">kwargs</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">!</span><span class=\"s2\">\"=\"</span><span class=\"o\">),</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\",\"</span> <span class=\"n\">kwargs</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">args</span>\n<span class=\"n\">syntax</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">,</span> <span class=\"n\">notFollowedBy</span><span class=\"o\">(</span><span class=\"s2\">\",\"</span> <span class=\"n\">kwargs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"s2\">\",\"</span> <span class=\"n\">kwargs</span> <span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">args</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[args|\"</span> <span class=\"n\">args</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">args</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">73</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- 73</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">args</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">=</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"c1\">-- 73</span>\n</code></pre></div>\n<p>I un-commented your third line, which gives me two not-been-implemented errors, and then I can implement whatever macro expansion.</p>",
        "id": 282652076,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1652799167
    },
    {
        "content": "<p>As it turns out I wasn't supposed to keep both definitions for <code>args</code>, which is why it worked for me. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 282676097,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1652808128
    },
    {
        "content": "<p>Yep, I mean, the second one (with <code>sepBy</code>) is an attempt to get the first one working. The way I understand the syntax-extension syntax, <code>foo, bar=baz</code> should be parsed by the rule <code>syntax (ident !\"=\"),+ (\",\" (ident \"=\" ident\"),+</code> but that doesn't work. It appears as if the parser doesn't backtrack after trying to parse the first part and seeing the \"=\" to parse the second part, and we don't understand why/how to get around that</p>",
        "id": 282770431,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652871421
    },
    {
        "content": "<p>The problem is that <code>,+</code> (i.e. <code>sepBy</code>) consumes the <code>,</code>, after which it always expects another element (if <code>allowTrailingSep</code> is not set). This looks like the correct behavior in general, we would likely create bad error messages if it just stopped before the separator instead.</p>",
        "id": 282772204,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652872596
    }
]