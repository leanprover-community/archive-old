[
    {
        "content": "<p>I guess if you know what types are allowed you could create a sum type with coercions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Entry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.str</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>... and then have an array of <code>Entry</code>s. </p>\n<p>(I haven't tested this, so I don't know how well the coercions work in practice).</p>",
        "id": 262646679,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637792460
    },
    {
        "content": "<p>This is sounding very much like exactly what I need. Thanks! Let me test it</p>",
        "id": 262646798,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637792544
    },
    {
        "content": "<p>It works!</p>",
        "id": 262647352,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637793013
    },
    {
        "content": "<p>Aced:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Entry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.str</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Float</span> <span class=\"n\">Entry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Entry.float</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">entryToString</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Entry.str</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"'{e}'\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Entry.nat</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">Entry.float</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">entryListToStringList</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Entry</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">l.map</span> <span class=\"n\">entryToString</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">entryListToStringList</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"a\"</span><span class=\"o\">]</span> <span class=\"c1\">-- [\"1\", \"'a'\"]</span>\n</code></pre></div>",
        "id": 262648636,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637794084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 262648689,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637794123
    },
    {
        "content": "<p>I used this stupid thing a while ago, not sure if practical, but maybe it's at least educational.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"kt\">Type</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"n\">τ</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">×</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">×</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.2.2.toString</span> <span class=\"n\">x.2.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">×</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"s2\">\"asdf\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">×</span> <span class=\"n\">ToString</span> <span class=\"n\">τ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.map</span> <span class=\"n\">print</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"n\">foo</span> <span class=\"c1\">-- [\"0\", \"asdf\"]</span>\n</code></pre></div>",
        "id": 262648998,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1637794365
    },
    {
        "content": "<p>Just occurred to me that this thread looks very much like SE threads</p>",
        "id": 262663142,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637810433
    }
]