[
    {
        "content": "<p>Why is Lake hard coded to <a href=\"https://github.com/leanprover/lake/blob/master/Lake/Config/InstallPath.lean#L140\">look for 'cc'</a> to build .c files?  This means on Windows I can't build this really cool lean library that wraps cmark <a href=\"https://github.com/xubaiw/CMark.lean/\">https://github.com/xubaiw/CMark.lean/</a></p>\n<p>But lean toolchain ships clang, and this works, see below, so why can't lake use that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">xubaiw</span><span class=\"bp\">/</span><span class=\"n\">CMark.lean</span><span class=\"bp\">\\</span><span class=\"n\">cmark</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">clovett</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-08-09\\bin\\clang.exe *.c -IC:\\Users\\clovett\\.elan\\toolchains\\leanprover--lean4---nightly-2022-08-09\\include\\clang -I. -c</span>\n</code></pre></div>",
        "id": 294357023,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660940471
    },
    {
        "content": "<p>I checked the sysroot that Lake is using and it looks right</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\\\</span><span class=\"n\">Users</span><span class=\"bp\">\\\\</span><span class=\"n\">clovett</span><span class=\"bp\">\\\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-08-08</span>\n</code></pre></div>\n<p>so I wonder if the problem is this line in Lake is not taking into account the executable on windows is 'clang<strong>.exe</strong>'</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">cc.pathExists</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">cc</span> <span class=\"k\">else</span> <span class=\"s2\">\"cc\"</span>\n</code></pre></div>",
        "id": 294367348,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660945382
    },
    {
        "content": "<p>It looks for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">leanCcExe</span> <span class=\"o\">(</span><span class=\"n\">sysroot</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sysroot</span> <span class=\"bp\">/</span> <span class=\"s2\">\"bin\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"clang\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">withExtension</span> <span class=\"n\">FilePath.exeExtension</span>\n</code></pre></div>\n<p>which sounds to me like it would respect the <code>exe</code>. I do also remember that Mac is working on Windows himself so I would be surprised if this was truly completely broken on Windows.</p>",
        "id": 294367833,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660945655
    },
    {
        "content": "<p>Ah, FilePath.exeExtension, missed that, thanks.</p>",
        "id": 294368493,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660946025
    },
    {
        "content": "<p>Hmmm, weird then that I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">xubaiw</span><span class=\"bp\">/</span><span class=\"n\">CMark.lean</span><span class=\"bp\">/</span>\n<span class=\"n\">cd</span> <span class=\"n\">CMark.lean</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">execute</span> <span class=\"bp\">`</span><span class=\"n\">cc</span><span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>",
        "id": 294368609,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660946068
    },
    {
        "content": "<p>And weirder, Lake InstallPath.lean is finding it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">check</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">findLeanInstall</span><span class=\"bp\">?</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">leanInstall</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">leanInstall.cc.normalize.toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span>  <span class=\"s2\">\"Could not find cc exe\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">c:\\users\\clovett\\.elan\\toolchains\\leanprover--lean4---nightly-2022-08-05\\bin\\clang.exe</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">check</span>\n</code></pre></div>\n<p>Guess I'll have to debug more of Lake to figure out why the cmark *.c files in CMark.lean repo are not trying to use this compiler.  There is nothing customizing the .c buld in the CMark.lean lakefile.lean.  Unfortunately <code>lake build --verbose</code> is no help here...</p>",
        "id": 294369733,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660946758
    },
    {
        "content": "<p>Oh this is weird, in Actions.lean it is hard coded to \"cc\" and \"ar\" and ignores all the above LeanInstall information?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compileO</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">moreArgs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">compiler</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cc\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Compiling {name}\"</span>\n  <span class=\"n\">createParentDirs</span> <span class=\"n\">oFile</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">compiler.toString</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-c\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-o\"</span><span class=\"o\">,</span> <span class=\"n\">oFile.toString</span><span class=\"o\">,</span> <span class=\"n\">srcFile.toString</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">moreArgs</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compileStaticLib</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">libFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">oFiles</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ar</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ar\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Creating {name}\"</span>\n  <span class=\"n\">createParentDirs</span> <span class=\"n\">libFile</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">ar.toString</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"rcs\"</span><span class=\"o\">,</span> <span class=\"n\">libFile.toString</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">oFiles.map</span> <span class=\"n\">toString</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compileSharedLib</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">libFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">linkArgs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linker</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cc\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Linking {name}\"</span>\n  <span class=\"n\">createParentDirs</span> <span class=\"n\">libFile</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">linker.toString</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-shared\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-o\"</span><span class=\"o\">,</span> <span class=\"n\">libFile.toString</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">linkArgs</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compileExe</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">binFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linkFiles</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">linkArgs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">linker</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cc\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogIO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Linking {name}\"</span>\n  <span class=\"n\">createParentDirs</span> <span class=\"n\">binFile</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">linker.toString</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-o\"</span><span class=\"o\">,</span> <span class=\"n\">binFile.toString</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">linkFiles.map</span> <span class=\"n\">toString</span> <span class=\"bp\">++</span> <span class=\"n\">linkArgs</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 294370190,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660947103
    },
    {
        "content": "<p>and as expected when I change these strings to \"clang\" and \"llvm-ar\" everything starts working... just have to remove fPic options from cmake lakefile.lean and leanc gets a link error <code>ld.lld: error: undefined symbol: __chkstk</code> from <code>libleancmark.a</code>...</p>",
        "id": 294376674,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660952294
    },
    {
        "content": "<p>Oh, but weirder and weirder, the lake ffi sample builds just fine in VS Code:<br>\n<a href=\"/user_uploads/3121/XIhQbP1JvV5rn02WgnLY9lss/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XIhQbP1JvV5rn02WgnLY9lss/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XIhQbP1JvV5rn02WgnLY9lss/image.png\"></a></div>",
        "id": 294376974,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660952640
    },
    {
        "content": "<p>Apparently it can build \"c++\" but not \"c\" files...</p>",
        "id": 294377030,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660952657
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/issues/118\">https://github.com/leanprover/lake/issues/118</a></p>",
        "id": 294389592,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660967211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> I am never confused by the discussion here and on <a href=\"https://github.com/leanprover/lake/issues/118\">lake#116</a>. </p>\n<p>First, Lake does not hard code the compiler for building FFI code. Providing a different value for <code>compiler</code> / <code>linker</code> / <code>ar</code> is how you change it. Second, I am on Windows and have built doc-gen4 (which depends on CMark) multiple times successfully. So unless something has changed recently (I admittedly have not built it since the Lake v4 update of doc-gen4), it should be possible to build FFI code just fine on Windows.</p>",
        "id": 294788212,
        "sender_full_name": "Mac",
        "timestamp": 1661215219
    },
    {
        "content": "<p>Never mind, Sebasitan already answered my questions in the bug - I was wrongly thinking the clang we ship in the leantoolchain can also be used to build ffi plugins, but it is not a complete version of clang, it is stripped down minimal just enough to build .lean generated .c code.  So if my ffi plugin contains complex C or C++ code then that version of clang would not be sufficient.  I understand this now.  So ignore my line of questioning about the toolchain clang.</p>",
        "id": 294789992,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661217166
    },
    {
        "content": "<p>However, when I build CMark in MSYS2 then try and use it in vscode I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"k\">with</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">CMark.renderHtml'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_CMark_renderHtml___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_CMark_renderHtml'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294790372,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661217605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the error?</p>",
        "id": 294792635,
        "sender_full_name": "Mac",
        "timestamp": 1661219885
    },
    {
        "content": "<p>Yep, from regular windows command prompt (not MSYS2) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">xubaiw</span><span class=\"bp\">/</span><span class=\"n\">CMark.lean.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">CMark.lean</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>and you should see this:<br>\n<a href=\"/user_uploads/3121/sSdw9GnYo84Tca8r0h_d-nK-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sSdw9GnYo84Tca8r0h_d-nK-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sSdw9GnYo84Tca8r0h_d-nK-/image.png\"></a></div><p>Note that I have Strawberry Perl installed which means I do have a compatible c++ compiler here:<br>\n<a href=\"/user_uploads/3121/yKRsT01SQklK0bNwFUUfk7Z6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yKRsT01SQklK0bNwFUUfk7Z6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yKRsT01SQklK0bNwFUUfk7Z6/image.png\"></a></div><p>So the lake/example/ffi/lib builds fine :<br>\n<a href=\"/user_uploads/3121/ECfPXa3GjxudtXGKcNHZn8Xp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ECfPXa3GjxudtXGKcNHZn8Xp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ECfPXa3GjxudtXGKcNHZn8Xp/image.png\"></a></div><p>and it works in VS Code (so the plugin loads and runs):<br>\n<a href=\"/user_uploads/3121/aeP0ykds3CKNfXn_-oB5fyVV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aeP0ykds3CKNfXn_-oB5fyVV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aeP0ykds3CKNfXn_-oB5fyVV/image.png\"></a></div>",
        "id": 294794899,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661222337
    }
]