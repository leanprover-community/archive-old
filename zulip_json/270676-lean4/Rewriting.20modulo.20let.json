[
    {
        "content": "<p>Is there a reasonable way to do \"rewriting modulo let\"? That is, I want something like <code>rw</code> but which would also try to unify modulo the let-reduction rule (zeta). I have found a custom <code>simp</code> config to kind of work, but it still seems to do a bit more than I want it to (i.e. just rewriting). Btw, this is for use in a tactic so I cannot easily do all the things that I could in this particular interactive proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    f 10 -/</span>\n  <span class=\"c1\">-- rw (config := { transparency := .all }) [this]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">iota</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> k : Nat</span>\n<span class=\"cm\">  this : f 10 = 11</span>\n<span class=\"cm\">  ⊢ 11 = k -/</span>\n  <span class=\"n\">trace_state</span>\n</code></pre></div>",
        "id": 287122484,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1655937109
    },
    {
        "content": "<p>If you <code>intro x</code>, you can use <code>rw</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 287123131,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655937660
    },
    {
        "content": "<p>I did not know that! Thanks!</p>\n<p>At the risk of letting the wrong thing in... should <code>letIn</code> be a pattern? <a href=\"https://media4.giphy.com/media/PA5pAhOp5Y2Qg/giphy.gif?cid=c623cb35q728p49kdltp3pafce2i7qwepc8ch4izndkg6nbi&amp;rid=giphy.gif&amp;ct=g\">https://media4.giphy.com/media/PA5pAhOp5Y2Qg/giphy.gif?cid=c623cb35q728p49kdltp3pafce2i7qwepc8ch4izndkg6nbi&amp;rid=giphy.gif&amp;ct=g</a></p>\n<div class=\"message_inline_image\"><a href=\"https://media4.giphy.com/media/PA5pAhOp5Y2Qg/giphy.gif?cid=c623cb35q728p49kdltp3pafce2i7qwepc8ch4izndkg6nbi&amp;rid=giphy.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/1cdf31e261823687e43341b38f9a38c3d98a6304/68747470733a2f2f6d65646961342e67697068792e636f6d2f6d656469612f5041357041684f7035593251672f67697068792e6769663f6369643d6336323363623335713732387034396b646c7470337061666365326937717765706338636834697a6e646b67366e6269267269643d67697068792e6769662663743d67\"></a></div>",
        "id": 287124550,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1655938798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Rewriting.20modulo.20let/near/287123131\">said</a>:</p>\n<blockquote>\n<p>If you <code>intro x</code>, you can use <code>rw</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Unfortunately this is one of the things I cannot do :) The<code>let</code> actually appears in an equality in a hypothesis. I.e. the goal state has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 287125243,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1655939334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I added two new features to <code>conv</code> mode. I hope they are helpful for your example.<br>\nSee <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a></p>",
        "id": 287137064,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655952122
    },
    {
        "content": "<p>Example: <code>conv at h =&gt; zeta; rw [this]</code></p>",
        "id": 287137138,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655952178
    }
]