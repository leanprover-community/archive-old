[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569709\">Cole Shepherd</span> has marked this topic as unresolved.</p>",
        "id": 313420221,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669951402
    },
    {
        "content": "<p>Having used Idris for a while, a couple of differences I feel:</p>\n<ul>\n<li>The goal of Idris is systems programming, so the book, examples etc are aimed at this. Lean 4 is used for mathematics among other things.</li>\n<li>Lean has many powerful tactics for proving theorems. As I understand Idris is more aimed at \"theorems\" about correctness of low level software, so these are not a priority (or available).</li>\n<li>A couple of things I like about Idris missing I believe so far in Lean:<br>\n    - the hole-filling interface.<br>\n    - splitting off a definition<br>\n    - breaking a variable being in an inductive type into cases via a keyboard shortcut.</li>\n</ul>",
        "id": 313454115,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669972050
    },
    {
        "content": "<p>I would love to see a short demo, link to a description page, or otherwise extended description of the missing features for people like me who don't have any experience in idris and don't know what they are missing</p>",
        "id": 313462840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669975174
    },
    {
        "content": "<p>Will look for one (or make one). Some years since I used Idris so these are not at my fingertips.</p>",
        "id": 313469549,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669977340
    },
    {
        "content": "<p>Nice gifs with this are at <a href=\"https://github.com/zjhmale/vscode-idris/blob/master/FEATURES.md\">https://github.com/zjhmale/vscode-idris/blob/master/FEATURES.md</a>, specifically the ones I mentioned:</p>\n<ul>\n<li><a href=\"https://github.com/zjhmale/vscode-idris/blob/master/FEATURES.md#generate-a-case-split-for-a-pattern-variable\">case split</a></li>\n<li><a href=\"https://github.com/zjhmale/vscode-idris/blob/master/FEATURES.md#attempt-to-fill-out-holes-by-proof-search\">attempt to fill a hole</a></li>\n<li><a href=\"https://github.com/zjhmale/vscode-idris/blob/master/FEATURES.md#create-a-top-level-function-with-a-type-which-solves-the-hole-under-the-cursor\">create top level function</a></li>\n</ul>",
        "id": 313471669,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669978056
    },
    {
        "content": "<p>your links are pointing to the wrong thing</p>",
        "id": 313472006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669978187
    },
    {
        "content": "<p>Oops. Will edit</p>",
        "id": 313472306,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669978287
    },
    {
        "content": "<p>Fixed. </p>\n<p>I can imagine code-actions to have some of these but it will take work.</p>",
        "id": 313472642,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1669978407
    },
    {
        "content": "<p>Yeah, Idris' feature for creating a top level function felt a lot like <code>extract_lemma</code>, except more polished. I loved that feature in Idris.</p>",
        "id": 313523031,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669994661
    },
    {
        "content": "<p>Yeah I would really like to see idris's extract def/lemma for lean.</p>",
        "id": 313526720,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669995627
    },
    {
        "content": "<p>There were many situations in LTE, for example, where the proof just gets way too long/slow and where extracting a sublemma was helpful. Itbwould be really great If the editor was able to do that automatically!</p>",
        "id": 313526927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669995681
    },
    {
        "content": "<p>I have a long list of features I want to implement that are waiting on editor actions that can change the input text, enough that I need to write them down or I'll forget...</p>",
        "id": 313527662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995878
    },
    {
        "content": "<p>We need at least <code>Try this:</code>, plus stuff like auto-filling structure instances, just for feature parity with lean 3</p>",
        "id": 313527949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995958
    },
    {
        "content": "<p>Extracting top-level functions may even be the most tangible goal as it does not require changing existing syntax nor great code formatting</p>",
        "id": 313529448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669996358
    },
    {
        "content": "<p>Here are some other things I want to try that should be possible once we have editor actions:</p>\n<ul>\n<li>Extract a subterm into a definition</li>\n<li>Change a local variable name (LSP \"rename\" action)</li>\n<li>Change a global definition name</li>\n<li>Inline variable</li>\n<li>Replace <code>induction'</code> with <code>induction</code></li>\n<li>Build <code>match</code>/<code>rcases</code>/ <code>intro</code> / <code>rintro</code> application</li>\n<li><code>tidy</code> self-replacement</li>\n<li>Expand macro in-place</li>\n<li>Replace <code>by tac</code> with the generated term</li>\n<li>Move <code>let</code> / <code>let rec</code> into <code>where</code> clause</li>\n<li>Reformat expression in-place</li>\n<li>Any of the hundreds of editor actions in rust-analyzer, e.g. replace <code>if let</code> with <code>match</code> and back</li>\n</ul>",
        "id": 313529544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669996383
    },
    {
        "content": "<ul>\n<li>Auto-insert <code>include</code> line when auto-completing a reference to a declaration which is not imported</li>\n</ul>",
        "id": 313529919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669996481
    },
    {
        "content": "<ul>\n<li>build proof skeleton with <code>case bla a b c =&gt; done</code> or <code>Â· done</code> for all the goals at the current point</li>\n</ul>",
        "id": 313530769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669996730
    },
    {
        "content": "<ul>\n<li>Create an expression to fill a hole that has the right type (results vary based on specificity of type, of course)</li>\n</ul>",
        "id": 313646644,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670055748
    },
    {
        "content": "<ul>\n<li>Generate an entire definition from a type signature</li>\n</ul>",
        "id": 313646722,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670055809
    },
    {
        "content": "<ul>\n<li>Add missing cases to a <code>match</code> expression</li>\n</ul>",
        "id": 313646860,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670055901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'd encourage you to spend 4-5 hours and sit down and properly learn Idris or Agda, because there's useful aspects of their user experience that is easier to experience and feel than it is to have explained or see videos about.</p>",
        "id": 313648190,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670056683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> do you have a recommended tutorial/learning resource for each?  (For someone who knows say functional programming and DTT.)</p>",
        "id": 313683474,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670072891
    },
    {
        "content": "<p>It's been a few years, so this is likely out of date. But the <a href=\"https://idris2.readthedocs.io/en/latest/tutorial/index.html\">official Idris tutorial</a> is fine if you already know Haskell or Lean, and easier if you know some dependent types. To get a sense of the feeling of using it, <a href=\"https://www.youtube.com/watch?v=E7uSsL8r_mU\">this video</a> is a reasonable place to start - try to do the things he's doing. For Agda, I learned by osmosis from others before the current crop of books, but I've heard good things about <a href=\"https://plfa.inf.ed.ac.uk/\">PLFA</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"E7uSsL8r_mU\" href=\"https://www.youtube.com/watch?v=E7uSsL8r_mU\"><img src=\"https://uploads.zulipusercontent.net/919104916e0760be650f08a74afd685bb1f7744d/68747470733a2f2f692e7974696d672e636f6d2f76692f45377553734c38725f6d552f64656661756c742e6a7067\"></a></div>",
        "id": 313684274,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670073235
    },
    {
        "content": "<p>I think their interactive experiences are very similar, and learning one of them is enough to get some of the feeling.</p>",
        "id": 313684408,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670073275
    },
    {
        "content": "<p>The Idris book \"Type Driven development with Idris\" is very well written (a bit long naturally).</p>",
        "id": 313684737,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670073389
    },
    {
        "content": "<p>Yes, that's what I'd recommend to someone who didn't already know dependently-typed programming and wanted to learn Idris.</p>",
        "id": 313684783,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670073417
    },
    {
        "content": "<p>But if you just want to get up to speed quickly to get inspiration for good ideas to implement in Lean, then it is perhaps not the most suited.</p>",
        "id": 313684830,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670073454
    },
    {
        "content": "<p>I'm currently working through <a href=\"https://plfa.github.io/\">PLFA</a>, and it's been a lot of fun.  The first few pages walk through the editor support,  so you wouldn't need to go through the whole thing. But the material has been interesting so far.  (It looks like Wadler has <a href=\"https://github.com/plfa/plfl\">started to translate it to lean</a>.)</p>",
        "id": 313728637,
        "sender_full_name": "Steve Dunham",
        "timestamp": 1670097472
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> has some thoughts on this topic then.</p>",
        "id": 313730463,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670098881
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>Any of the hundreds of editor actions in rust-analyzer, e.g. replace if let with match and back\n</code></pre></div>\n\n</blockquote>\n<p>Rust Clippy architecture for Lean 4?</p>",
        "id": 313732845,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670100617
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9a8ymUG80-_1B0Mju3FUhUxv/idris.png\">idris.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9a8ymUG80-_1B0Mju3FUhUxv/idris.png\" title=\"idris.png\"><img src=\"/user_uploads/3121/9a8ymUG80-_1B0Mju3FUhUxv/idris.png\"></a></div>",
        "id": 313734876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670102377
    },
    {
        "content": "<p>More advanced editor support is something I'd be interested in working towards in Lean 4. I have a bit of experience writing LSP programs for my own language, and I hope I could be of use here.</p>",
        "id": 313744535,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670110420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480750\">@Steve Dunham</span> Delighted that you are enjoying PLFA.<br>\n<span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  Watch this space for PLFL.</p>",
        "id": 313805909,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1670158987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20vs.20Idris.202/near/313734876\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/9a8ymUG80-_1B0Mju3FUhUxv/idris.png\">idris.png</a></p>\n</blockquote>\n<p>As the author of the Idris <code>Elab</code> monad, I agree that Lean 3's was an improvement over my work, and that Lean 4 is even better. But I think that the snide dismissive attitude that some Lean users express towards other systems, rather than a curious and interested one, is not conducive to the development of the field, nor to the development of Lean.</p>",
        "id": 313914699,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670230402
    },
    {
        "content": "<p>At least on my part that seems to have been a weird way of acknowledging prior work. I certainly wouldn't express it that way anymore nowadays, my apologies.</p>",
        "id": 313917149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670231261
    },
    {
        "content": "<p>To be honest I don't even remember anymore what I was referring to. Both systems have some fundamentally different aspects that it's definitely worth studying both of them.</p>",
        "id": 313917339,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670231332
    },
    {
        "content": "<p>I just saw it was 2017... In any case, my recollection is that most of the good ideas were in fact independently invented, because neither of us really knew about each other until the fundamentals were already in place, but the Lean 3 design and execution was better than mine was.</p>",
        "id": 313922922,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670233294
    },
    {
        "content": "<p>Sorry for posting that :-( Yes it was back when the lean chat was about ten people talking privately</p>",
        "id": 313923138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670233392
    },
    {
        "content": "<p>They're certainly shaped by different constraints and approaches - my Idris 1 metaprogramming work was really intended to be used more like Template Haskell is (automated codegen at compile time), rather than like Lean 3's (which was a tactic language). The Lean 4 stuff nicely subsumes both, as well as having some of the nice things from Racket</p>",
        "id": 313923310,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670233459
    },
    {
        "content": "<p>Don't worry about it, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> :)  It stepped on a sore spot for me, which is programming language tribalism. I tend to fall in love with all the languages I use, and want to see them be friends, which makes the normal tendency for people to throw stones at each other into something I perhaps overreact to.</p>",
        "id": 313923788,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670233643
    },
    {
        "content": "<p>(you can also find me on the Haskell subreddit recently chastising someone who was asking why Lean isn't just a waste of time given Idris's existence)</p>",
        "id": 313923981,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670233706
    },
    {
        "content": "<p>When we were talking about Idris in 2017 the lean community was a very different place. I was looking back at old posts for an unrelated reason and ran into it. I am really sorry for posting it.</p>",
        "id": 313924053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670233736
    },
    {
        "content": "<p>It's great to see us all working better together as time marches on</p>",
        "id": 313924633,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670233956
    },
    {
        "content": "<p>I was very guilty of tribalism in the early stages of Lean 3 and got into some trouble over it. Now my thoughts are almost exactly the opposite -- I would love to see other ITP communities trying to do what we are doing with mathlib but because they are far more dominated by computer scientists I've found it hard to drum up enthusiasm there for research level mathematics. I think \"is Lean the best system for mathematics\" is an open problem; what we know is that Lean is the most popular system for mathematics, but that's a different claim.</p>",
        "id": 313924922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670234066
    },
    {
        "content": "<p>The thought experiment in Kent Pitman's 1994 essay <a href=\"http://www.nhplace.com/kent/PS/Lambda.html\">Lambda: The Ultimate Political Party</a> suggests that by being popular for mathematics, Lean will become the best for it. His point is that programming languages (and by extension ITPs) will, over time, adapt to the values of their user communities. As he puts it:</p>\n<blockquote>\n<p>Languages are a reflection of the community they serve. They become the way we express process, and so they inform our sense of what processes we expect.</p>\n</blockquote>\n<p>But time will tell!</p>",
        "id": 313926284,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670234502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20vs.20Idris.202/near/313527662\">said</a>:</p>\n<blockquote>\n<p>I have a long list of features I want to implement that are waiting on editor actions that can change the input text, enough that I need to write them down or I'll forget...</p>\n</blockquote>\n<p>To come back to this, what do you mean by \"editor actions that can change the input text\"? We <a href=\"https://github.com/leanprover/lean4/blob/0b243f0ca33e1f6a2948c94896b22b2f304ac4c8/tests/lean/interactive/codeaction.lean\">can already</a> register custom code actions that edit the file. The only substantial missing piece is syntax-aware edits; currently it is just strings so it's easy to emit something that doesn't parse. But it's no worse than Lean 3's infra for this afaik.</p>",
        "id": 314139834,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670280523
    },
    {
        "content": "<p>Why is the syntax not available to the tactic? Isn't this already in the <code>Syntax</code> info? I'm not sure what the state of the rest of the file is, whether it is still unparsed or whether this is being run in the server with a global view.</p>\n<p>I am aware we have an MVP implementation, but I would like to see at least one real code action shipping before I'm ready to start building all those other actions</p>",
        "id": 314149265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670285243
    },
    {
        "content": "<p>I expect that syntax-awareness will need to be solved to do almost any of those actions I listed</p>",
        "id": 314149324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670285282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20vs.20Idris.202/near/314149265\">said</a>:</p>\n<blockquote>\n<p>Why is the syntax not available to the tactic? Isn't this already in the <code>Syntax</code> info? I'm not sure what the state of the rest of the file is, whether it is still unparsed or whether this is being run in the server with a global view.</p>\n<p>I am aware we have an MVP implementation, but I would like to see at least one real code action shipping before I'm ready to start building all those other actions</p>\n</blockquote>\n<p>The <code>Syntax</code> is already available, the \"syntax-aware editing\" I was referring to which is not available would be a function <code>Syntax â Syntax â TextEdit</code> which allows you to just modify the <code>Syntax</code> object and gives you the correct string-based edit description. If you can produce the <code>TextEdit</code> manually, all the infra is already in-place (although it has not been stress-tested as you point out).</p>",
        "id": 314157819,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670290987
    },
    {
        "content": "<p>Rather than something that does automatic diffing, I would rather take an AST of the file or part of it, point at a subterm syntax (using e.g. the syntax traverser stuff), and then replace it with a string generated by formatting another syntax that I would like to insert in that location. That would allow us to keep changes localized which is important for any code action. Getting the formatting to match the surroundings is less important, even rust-analyzer isn't that great at this (it relies on rustfmt to pick up the pieces).</p>",
        "id": 314158948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670292038
    },
    {
        "content": "<p>The trouble starts when the changed syntax contains original syntax as well. One tough example I've been thinking about is fusing consecutive <code>if let</code>s into <code>if ... and</code>. There's a big block of existing syntax you don't want to touch there, <em>except</em> you want to re-indent it. Would be much easier if we can just reformat the whole result for sure.</p>",
        "id": 314192590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670316666
    },
    {
        "content": "<p>I would be okay with completely reformatting the block in that example, at least for V1</p>",
        "id": 314237136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670333376
    }
]