[
    {
        "content": "<p>With this macro, i get the error expected term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but when I make $v into $v:term, it gives a weirder error. Any ideas?</p>\n<p>I tried changing command into term, but that didn't help</p>",
        "id": 285059208,
        "sender_full_name": "Joseph O",
        "timestamp": 1654468169
    },
    {
        "content": "<p>The problem is that  <code>let ident : ident := term</code> (e.g., <code>let x : Nat := 5</code>) is not valid standard Lean syntax. As a term,  a <code>let</code> expression needs to have another term following it (e.g., <code>let x : Nat := 5; x + x</code>).</p>",
        "id": 285059599,
        "sender_full_name": "Mac",
        "timestamp": 1654468806
    },
    {
        "content": "<p>First things first having this declared in the category of commands makes no sense, you are producing a term that gets placed in the spot of a command, lean wont like that so the first thing we do is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>secondly, a let binding on its own cannot be a term, let bindings always carry a body around with them like this: <code>let var := val; body</code><br>\nSo you will have to reflect this in your syntax as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>and now you can also reflect this in your macro rule:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">;$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">;$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and now Lean will accept it.</p>\n<p>If what you were intending is instead to declare a definition at the top level a let binding wont do youll need a def instead, in this case placing your syntax in command would make sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">Nat</span> <span class=\"n\">test</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"bp\">;</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"c1\">-- 12</span>\n</code></pre></div>",
        "id": 285059631,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654468922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Expected.20term.20error/near/285059631\">said</a>:</p>\n<blockquote>\n<p>If what you were intending is instead to declare a definition at the top level a let binding wont do youll need a def instead, in this case placing your syntax in command would make sense:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">Nat</span> <span class=\"n\">test</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"bp\">;</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"c1\">-- 12</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that  this will break horribly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"c1\">-- errors</span>\n<span class=\"n\">Nat</span> <span class=\"n\">test</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span>\n</code></pre></div>\n<p>Lean's  syntax for commands (and its lack of whitespace sensitivity) will result in it interpreting the above as <code>def hi := 5 Nat test = 12</code> and thus it expects <code>5</code> to be a function. Standard Lean therefore requires that all commands begin with a keyword (and generally, a keyword that is unique to commands).</p>",
        "id": 285059990,
        "sender_full_name": "Mac",
        "timestamp": 1654469511
    },
    {
        "content": "<p>Ah i see</p>",
        "id": 285060188,
        "sender_full_name": "Joseph O",
        "timestamp": 1654469853
    },
    {
        "content": "<p>This makes sense now, thanks</p>",
        "id": 285060189,
        "sender_full_name": "Joseph O",
        "timestamp": 1654469859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 285060190,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654469861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 285061906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654472394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 285061907,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654472398
    }
]