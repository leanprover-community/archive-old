[
    {
        "content": "<p>I am trying to define some notation that is like the if-fi construct in Dijkstra's Guarded Command Language. I started with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">syntax_version</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\" if \"</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" ‖ \"</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" fi \"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">‖</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">‖</span> <span class=\"bp\">$</span><span class=\"n\">c₂</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"bp\">‖</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₃</span> <span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"bp\">$</span><span class=\"n\">c₂</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"bp\">$</span><span class=\"n\">e₃</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"bp\">⟹</span> <span class=\"s2\">\"zero\"</span>\n     <span class=\"bp\">‖</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"bp\">⟹</span> <span class=\"s2\">\"one\"</span>\n<span class=\"c1\">--     ‖ n == 2 ⟹ \"two\"</span>\n     <span class=\"bp\">‖</span>        <span class=\"bp\">⟹</span> <span class=\"s2\">\"&gt; 2\"</span>\n    <span class=\"n\">fi</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">syntax_version</span>\n</code></pre></div>\n<p>which is fine as far as it goes but inadequate because you can't keep adding cases each time you need an extra branch (such as to handle the <code>n == 2</code> case in the example). I can't see any way to handle the iterated syntax (<code>+</code>).</p>\n<p>Syntax categories seem to be a step in the right direction so it became:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">syntax_category_version</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">clause</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">catchall</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span>  <span class=\"s2\">\" ‖ \"</span> <span class=\"o\">:</span> <span class=\"n\">clause</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">catchall</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">iffi</span><span class=\"o\">)</span> <span class=\"s2\">\" if \"</span> <span class=\"n\">clause</span><span class=\"bp\">+</span> <span class=\"n\">catchall</span> <span class=\"s2\">\" fi \"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">?</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">syntax_category_version</span>\n</code></pre></div>\n<p>I have tried to mimic what I see in the notation section of the manual but haven't been able to come up with the correct pattern. What do I need to do here to match the iterated clauses and translate to the corresponding <code>ite</code> calls?</p>",
        "id": 323163385,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1674534520
    },
    {
        "content": "<p>you use <code> $(e)*</code> to match an expression produced by <code>stx+</code></p>",
        "id": 323164154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674535263
    },
    {
        "content": "<p>I had tried something along those lines. This sort of thing (ignoring the RHS for the moment):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">catchall</span><span class=\"bp\">|</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">clause</span><span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">⟹</span> <span class=\"n\">e</span> <span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">iffi</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">cl</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cls</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">ca</span> <span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have tried various combinations but I always end up with the <code>fi</code> underlined and the error <code>expected catchall</code>.</p>",
        "id": 323165838,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1674536679
    },
    {
        "content": "<p>Actually, I missed a couple of <code>$</code> above (in the <code>clause</code> case) which then has an error under the arrow of that case <code>expected ')'</code>.</p>",
        "id": 323166343,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1674537020
    },
    {
        "content": "<p>Using your original syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\" if \"</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" ‖ \"</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" fi \"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">‖</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"bp\">‖</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">es₁</span> <span class=\"bp\">‖</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"bp\">$</span><span class=\"n\">c₁</span> <span class=\"bp\">$</span><span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs₁</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">es₁</span> <span class=\"bp\">‖</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"bp\">⟹</span> <span class=\"bp\">$</span><span class=\"n\">e₂</span> <span class=\"n\">fi</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 323190885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674549197
    },
    {
        "content": "<p>Regarding your second approach, you need to resolve ambiguities around antiquotations manually: in <code>clause| $c ...</code>, <code>c</code> will default to being <code>clause</code>, which means you should use <code>$c:term</code> instead</p>",
        "id": 323191316,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674549327
    },
    {
        "content": "<p>Thanks very much for the responses.</p>\n<p>It is really nice the way the macro rules are just a kind of recursive definition. I just didn't see that before.</p>",
        "id": 323218483,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1674557542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> Are you planning on implementing some model checking related stuff?</p>",
        "id": 323314288,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1674582316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I was really just experimenting with notation. The notation expands to the nested <code>ite</code>s. What do you have in mind when you say model checking in this context.</p>",
        "id": 323371431,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1674601512
    }
]