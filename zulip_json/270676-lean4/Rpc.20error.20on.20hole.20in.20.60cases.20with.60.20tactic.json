[
    {
        "content": "<p>The error I get in the goal view is <code>Error updating: Error fetching goals: Rpc error: InternalError: unknown metavariable '?_uniq.138'.</code>, from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Is <code>cases</code> incompatible with <code>_</code> to see the goal?</p>",
        "id": 307032646,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667188756
    },
    {
        "content": "<p><code>cases</code> has special handling for <code>_</code> (which can be surprising if you are using the <code>_</code> tactic from mathlib/std which is shorthand for <code>{}</code>), it will just return the subgoal after the <code>cases</code> instead of inside the match arm</p>",
        "id": 307036247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667191968
    },
    {
        "content": "<p>that may be affecting the goal annotations</p>",
        "id": 307036259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667191982
    },
    {
        "content": "<p>Can you put <code>sorry</code> and click just before the s?</p>",
        "id": 307036583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667192368
    },
    {
        "content": "<p>tested: you can, it works fine. It is only the <code>_</code> itself that is messed up</p>",
        "id": 307036670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667192446
    },
    {
        "content": "<p>same thing happens with <code>?_</code> in that position</p>",
        "id": 307036679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667192458
    },
    {
        "content": "<p>same thing also happens with <code>?a</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 307036712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667192489
    },
    {
        "content": "<p>my guess is that cases isn't registering the metavars created for the subgoals here in the metavar context</p>",
        "id": 307036763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667192526
    }
]