[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Adelab/near/234610603\">said</a>:</p>\n<blockquote>\n<p>yes, it's only for tactic stuff and supporting lemmas, like lean 3 core (which is a bit bigger than lean 4 core is right now) + mathlib <code>tactic/</code></p>\n</blockquote>\n<p>How will this lean3 core compare to the mathport lean3 core? Is the goal to keep them def-eq and then auto-align?</p>",
        "id": 234610702,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618456918
    },
    {
        "content": "<p>there's no way the tactics will align with anything</p>",
        "id": 234610782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618456947
    },
    {
        "content": "<p>I mean for the supporting lemmas.</p>",
        "id": 234610793,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618456958
    },
    {
        "content": "<p>From the point of view of mathlib, the prelude is just another dependency along with lean 4 core. So it can align to definitions the same way as core lean definitions like <code>Nat</code></p>",
        "id": 234610865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618457029
    },
    {
        "content": "<p>I understand, I was just wondering if there was a risk of non-def-eq duplication and clashes. This would not be an issue as long as the prelude repo used <code>Mathlib.Prelude</code> namespace or something like that to distinguish.</p>",
        "id": 234611032,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618457158
    },
    {
        "content": "<p>It's not a ported library, so it doesn't need to dump everything in a namespace, right? I assume that eventually mathlib will just put things in the root, like currently</p>",
        "id": 234611157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618457253
    },
    {
        "content": "<p>I think mathlib should put everything in <code>Mathlib</code>.</p>",
        "id": 234611281,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618457351
    },
    {
        "content": "<p>I don't want to add an extra 8 characters on a substantial number of fully qualified names in usual mathlib proofs</p>",
        "id": 234611307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618457386
    },
    {
        "content": "<p>I'm not sure what the point is</p>",
        "id": 234611401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618457430
    },
    {
        "content": "<p>it's not like it's hard to avoid collision with mathlib</p>",
        "id": 234611413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618457446
    },
    {
        "content": "<p>Isn't this pretty normal in stuff like python? The only difference would be that mathlib users would just write <code>open mathlib</code> at the start of their code and mathlib developers would write <code>namespace mathlib</code> at the start of theirs. Or am I being naive?</p>",
        "id": 234627659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618470484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes it is normal for programming, and I use qualified imports all the time (e.g. <code>import tensorflow as tf</code> in python  and <code>import qualified Data.Set as Set</code> in haskell). C++ doesn't support qualified imports and so the convention is for every project to use its own namespace, which is what I was suggesting. But I agree with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that the extra namespace is effectively zero-cost in C++ but does carry a cost in lean since some metaprogramming contexts require providing full names.</p>\n<p>FYI all the <code>mathlib:*</code> threads from last night were from one sprawling conversation, and I was changing the topic names as the conversation progressed. This particular thread continued at <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Anamespace\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathlib.3Anamespace</a></p>",
        "id": 234703069,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618502071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234703069\">said</a>:</p>\n<blockquote>\n<p>but does carry a cost in lean since some metaprogramming contexts require providing full names.</p>\n</blockquote>\n<p>This is an interesting point actually. We have name resolution with <code> `` </code> and in quotations, what parts are we still missing?</p>",
        "id": 234704430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618502555
    },
    {
        "content": "<p>I was basing that comment on <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234611307\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234611307</a> :)</p>",
        "id": 234704603,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618502605
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234704885,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618502701
    },
    {
        "content": "<p>There's another reason to use the global namespace though.  And that's dot-notation.  For that you need to put declarations in the same namespace as the original definition.</p>",
        "id": 234705065,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618502764
    },
    {
        "content": "<p>I believe Mario's comment was about disambiguating names like <code>_root_.foo</code> where you have a <code>def foo</code> in the current namespace.</p>",
        "id": 234705297,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618502851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234705065\">said</a>:</p>\n<blockquote>\n<p>There's another reason to use the global namespace though.  And that's dot-notation.  For that you need to put declarations in the same namespace as the original definition.</p>\n</blockquote>\n<p>But that is just a few files that wouldn't need to be in the mathlib namespace.</p>",
        "id": 234706173,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618503141
    },
    {
        "content": "<p>There's already 31 files that contain <code>namespace list</code> and I didn't even count other types from core.  If half of mathlib is in the root namespace, then adding <code>Mathlib.</code> to the seems to be more of a hassle than it's worth.</p>",
        "id": 234706606,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618503293
    },
    {
        "content": "<p>What about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_dot</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.list</span> <span class=\"bp\">`</span><span class=\"n\">list</span>\n</code></pre></div>",
        "id": 234710693,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618504712
    },
    {
        "content": "<p>The main concern is people who depend on mathlib. Python would be a mess if you had to <code>from tensorflow import *; from numpy import *</code>.</p>",
        "id": 234710838,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618504783
    },
    {
        "content": "<p>For most projects that depend on mathlib, the scope will be more restricted and so it makes more sense to put everything in a namespace</p>",
        "id": 234746335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518200
    },
    {
        "content": "<p>but mathlib is a monorepo, it has a huge variety of things and aims to be both the standard library for lean 3 and the convergence of almost all public work on lean 3</p>",
        "id": 234746461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234627659\">said</a>:</p>\n<blockquote>\n<p>Isn't this pretty normal in stuff like python? The only difference would be that mathlib users would just write <code>open mathlib</code> at the start of their code and mathlib developers would write <code>namespace mathlib</code> at the start of theirs. Or am I being naive?</p>\n</blockquote>\n<p>Most of mathlib's category theory library is built on this premise. If you search for uses of <code>category_theory.</code> you will see that it leaks quite a bit</p>",
        "id": 234747632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618518693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234747632\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib.3Aprelude/near/234627659\">said</a>:</p>\n<blockquote>\n<p>Isn't this pretty normal in stuff like python? The only difference would be that mathlib users would just write <code>open mathlib</code> at the start of their code and mathlib developers would write <code>namespace mathlib</code> at the start of theirs. Or am I being naive?</p>\n</blockquote>\n<p>Most of mathlib's category theory library is built on this premise. If you search for uses of <code>category_theory.</code> you will see that it leaks quite a bit</p>\n</blockquote>\n<p>This suggests a spectrum/middle-ground, where mathlib doesn't use <code>Mathlib</code> namespace but perhaps as necessary other modules within mathlib could use namespaces (like <code>category_theory</code> does now).</p>",
        "id": 234753154,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618520691
    },
    {
        "content": "<p>sure, that's what we already do</p>",
        "id": 234771908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618529981
    },
    {
        "content": "<p>One reason the category theory development is mostly in the <code>category_theory</code> namespace is because there is this strange version of <code>functor</code> that someone left lying around in the root namespace. :-) It doesn't satisfy any laws, and for some reason only works in the category <code>Type</code>. Must be the influence of these Haskell people. :-)</p>",
        "id": 234774878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618532017
    }
]