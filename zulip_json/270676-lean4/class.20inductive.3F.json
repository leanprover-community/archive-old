[
    {
        "content": "<p>I just noticed from one of the earlier comments that there is such a thing as <code>class inductive</code>, but I could not find anything about it in the Lean4 (or 3) manual.</p>\n<p>Lean4's source code includes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>I don't really have even an intuition for when should I use a <code>class inductive</code>. In addition, for instance, how is the former <code>class inductive Nonempty</code> different than just a regular <code>class Nonempty</code> with a single method?</p>",
        "id": 290184521,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658280278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 290184523,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658280287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as unresolved.</p>",
        "id": 290184528,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658280293
    },
    {
        "content": "<p><code>class inductive</code> is to <code>class</code> as <code>inductive</code> is to <code>structure</code>. In both cases, the former (i.e. <code>class inductive</code> and <code>inductive</code>) is more expressive than the latter (i.e. <code>class</code> and <code>structure</code>) but the latter gets you some convenience in a special case</p>",
        "id": 290184750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1658280596
    },
    {
        "content": "<p><code>class inductive ...</code> just expands to <code>@[class] inductive ...</code> like <code>class ...</code> expands to <code>@[class] structure ...</code>.<br>\nAs for <code>Nonempty</code>, because it is defined to be in the universe <code>Prop</code> regardless of the parameter type, it is not possible to define the projection <code>Nonempty α → α</code> without the axiom of choice. <code>structure</code> automatically generates projections, and results in an error.</p>",
        "id": 290206114,
        "sender_full_name": "pcpthm",
        "timestamp": 1658305146
    },
    {
        "content": "<p>So, I should use <code>class inductive</code> when I am trying to create a class for a Prop?</p>",
        "id": 290262449,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658335402
    },
    {
        "content": "<p>If the class has non-Prop fields</p>",
        "id": 290265480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658336702
    }
]