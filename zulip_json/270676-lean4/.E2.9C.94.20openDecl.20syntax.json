[
    {
        "content": "<p>The following macro fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"bp\">$</span><span class=\"n\">ns</span> <span class=\"k\">in</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"c1\">--^</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  ns.raw</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  ns</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  TSyntax `ident : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  TSyntax `Lean.Parser.Command.openDecl</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Looking at <code>openDecl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">openDecl</span> <span class=\"o\">:=</span> <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"openDecl\"</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Command.openDecl</span> <span class=\"o\">(</span><span class=\"n\">isPseudoKind</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">openHiding</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">openRenaming</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">openOnly</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">openSimple</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">openScoped</span>\n</code></pre></div>\n<p>... it seems as if I could use the <code>openSimple</code> parser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">openSimple</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">many1</span> <span class=\"o\">(</span><span class=\"n\">checkColGt</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I don't know what the whole <code>withAntiquot ...</code> is about, so perhaps I can't just use an <code>Ident</code>. <br>\nWhat is the right incantation for an <code>open ... in</code> clause here?</p>",
        "id": 304401901,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665993785
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>We have a few coercions for implicit syntax adjustments, but you can always be explicit</p>",
        "id": 304402274,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665993951
    },
    {
        "content": "<p>I always forget to try the explicit annotations <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> Thanks!</p>",
        "id": 304402724,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665994141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 304402759,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665994164
    }
]