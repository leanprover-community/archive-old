[
    {
        "content": "<p>I am trying to use <code>inferType</code> in a delaborator. This causes Lean to crash when I type constants that are undefined, such as <code>test</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n<span class=\"kn\">open</span> <span class=\"n\">SubExpr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">@[delab app]</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">delabMinimization</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"n\">failure</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[Error - 6:06:45 PM] Request textDocument/hover failed.</span>\n<span class=\"cm\">  Message: unknown constant '[Error pretty printing expression: unknown constant 'test'. Falling back to raw printer.]</span>\n<span class=\"cm\">test'</span>\n<span class=\"cm\">  Code: -32603</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Do I first need to test whether <code>← getExpr</code> is actually a valid expression? How can I do that?</p>",
        "id": 258223789,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634659988
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 258224214,
        "sender_full_name": "Mac",
        "timestamp": 1634660116
    },
    {
        "content": "<p>That is definitely not expected (and the error message is hilarious).</p>",
        "id": 258224222,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634660120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Maybe just remove the <code>mkConst</code> from <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Term.lean#L1504\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Term.lean#L1504</a>? Since we know the constant does not exist, I don't see a point in having the message view it as an expression rather than as a name.</p>",
        "id": 258466368,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1634775920
    },
    {
        "content": "<p>The <code>mkConst</code> is there to make sure the name is not treated as a regular <code>Name</code> object, but as an <code>Expr</code>. <br>\nThe delaborator should tolerate type incorrect terms.</p>",
        "id": 258470211,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634778155
    },
    {
        "content": "<p>So how can I check if a term is not type correct?</p>",
        "id": 258496367,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634799405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/inferType.20in.20delaborator/near/258496367\">said</a>:</p>\n<blockquote>\n<p>So how can I check if a term is not type correct?</p>\n</blockquote>\n<p>Delaborators should not assume that <code>inferType</code> will succeed in general. In your example, you could just wrap the <code>inferType</code> with <code>try/catch</code>. It is perhaps surprising though that the delaborator outer-loop will not recover from the exception -- it might make sense to put a <code>try/catch</code> here as well: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L226\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L226</a></p>",
        "id": 258607289,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1634846244
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 258690720,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634897688
    }
]