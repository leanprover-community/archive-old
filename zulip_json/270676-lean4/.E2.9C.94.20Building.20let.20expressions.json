[
    {
        "content": "<p>Sorry to bother you with this incorrect use of monads, but I have not been able to figure out how to modify the above where the parameters of the let themselves come from a monad. Below is the code with an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">unapp</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"s2\">\" :: \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" |&lt; \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[termElab unapp]</span> <span class=\"kd\">def</span> <span class=\"n\">unappImpl</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">nt</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Someterm.nothing</span>\n  <span class=\"k\">let</span> <span class=\"n\">st</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Someterm.something</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkSimple</span> <span class=\"s2\">\"unsafe-name\"</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|&lt;</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">u</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">←</span>  <span class=\"n\">withLetDecl</span> <span class=\"n\">n</span> <span class=\"n\">type</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                              <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span>  <span class=\"o\">(</span><span class=\"n\">mkAppM</span> <span class=\"n\">n</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">])</span>\n                              <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mkLetFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">isTypeCorrect</span> <span class=\"n\">expr</span>\n        <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n          <span class=\"n\">return</span> <span class=\"n\">Lean.mkApp</span> <span class=\"n\">st</span> <span class=\"n\">expr</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">return</span> <span class=\"n\">nt</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"n\">nt</span>\n</code></pre></div>\n<p>Other code that this uses is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Someterm</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">something</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Someterm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nothing</span> <span class=\"o\">:</span> <span class=\"n\">Someterm</span>\n</code></pre></div>\n<p>It would be very helpful if you could point out the correct idiom.</p>\n<p>Thanks.</p>",
        "id": 252148053,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630919462
    },
    {
        "content": "<p>Actually the problem may be in my use of <code>mkAppM n #[z]</code>. However, <code>mkAppM</code> does need a name.</p>",
        "id": 252148496,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630919687
    },
    {
        "content": "<p>Yes, but of a constant, i.e. a global declaration. I'm not sure what you're trying to do (not applying the let variable to itself, I assume?), but you can likely use the regular <code>mkApp</code> here - it doesn't need to know anything about let variables etc. it is applied to, so it doesn't need to be monadic.</p>",
        "id": 252149075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630920007
    },
    {
        "content": "<p>I am trying to use the unification of <code>mkAppM</code> when the function is an expression and not a constant.</p>",
        "id": 252149398,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630920196
    },
    {
        "content": "<p>The only way I could think of was using a temporary constant. The regular <code>mkApp</code> worked fine (and did not need a <code>let</code>) but I understand it is much less powerful.</p>",
        "id": 252149519,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630920269
    },
    {
        "content": "<p>Sorry, I did not read your mail carefully. I now see that a local declaration will not help.</p>",
        "id": 252149611,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630920320
    },
    {
        "content": "<p>I understand the limitations of my approach. <br>\nThanks.<br>\nI will experiment further.</p>",
        "id": 252149785,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630920410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 252149795,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630920415
    }
]