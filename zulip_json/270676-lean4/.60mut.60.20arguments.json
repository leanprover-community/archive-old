[
    {
        "content": "<p>Is there a reasons that arguments cannot be declared mutable? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"bp\">....</span>\n</code></pre></div>",
        "id": 290627656,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658601876
    },
    {
        "content": "<p>Syntax-wise it gets a bit strange to define two parameters of type <code>MyTyp</code> in the same parens. Unless you require a parens pair for each mutable input</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg'</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"bp\">....</span>\n</code></pre></div>",
        "id": 290628041,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658602471
    },
    {
        "content": "<p>Or do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"n\">arg'</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>And assume that <code>arg</code> and <code>arg'</code> are mutable</p>",
        "id": 290628091,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658602562
    },
    {
        "content": "<p>I would said in order to avoid non intuitive semantics the first way is definitely the way to go</p>",
        "id": 290628635,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658603296
    },
    {
        "content": "<p>Actually the second one supersedes the first one <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"n\">arg'</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg''</span> <span class=\"o\">:</span> <span class=\"n\">MyTyp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">arg</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"n\">arg'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 290628809,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658603612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> We've definitely considered it before. But the prime issue, both design- and implementation-wise, is that <code>mut</code> like all other <code>do</code> effects is scoped to the surrounding <code>do</code> block, of which there is none in this case. Should it only be accepted then if the declaration body is an immediate <code>do</code>? But what if I need an <code>Id.run</code> in between? The spec gets a little awkward at that point.</p>",
        "id": 290631533,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658607753
    },
    {
        "content": "<p>Ah fair enough yeah^^</p>",
        "id": 290631562,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658607825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60mut.60.20arguments/near/290631533\">said</a>:</p>\n<blockquote>\n<p><code>mut</code> like all other <code>do</code> effects is scoped to the surrounding <code>do</code> block, of which there is none in this case. Should it only be accepted then if the declaration body is an immediate <code>do</code>? But what if I need an <code>Id.run</code> in between? The spec gets a little awkward at that point.</p>\n</blockquote>\n<p>It seems like this is a good fit for new notation, e.g. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">imperative</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">mut</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is elaborated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"n\">arg</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>I'm pretty sure this wouldn't be that hard to write macro wise</p>",
        "id": 290635005,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1658612557
    },
    {
        "content": "<p>But then what's <code>M</code>?</p>",
        "id": 290635127,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658612745
    },
    {
        "content": "<p>yep, I was thinking if you were doing this in your own project where you carried around one monad for most state you could specialize to it, otherwise you would have to include it in the notation</p>",
        "id": 290635179,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1658612799
    },
    {
        "content": "<p>Just playing around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">impdef</span> <span class=\"n\">m</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">mut</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 290635208,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658612851
    },
    {
        "content": "<p>you could also make the monad optional, and use <code>Id</code> by default</p>",
        "id": 290635276,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1658612927
    },
    {
        "content": "<p>We've had that before with <code>do</code> and it was removed so that's probably not going to happen</p>",
        "id": 290635894,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658613833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.60mut.60.20arguments/near/290635894\">said</a>:</p>\n<blockquote>\n<p>We've had that before with <code>do</code> and it was removed so that's probably not going to happen</p>\n</blockquote>\n<p>The difference here is that you are being explicit about the fact you want a monad, so I don't think the same problems would arise. Furthermore, the removal of auto-pure also solved a lot of the original problems.</p>",
        "id": 290636435,
        "sender_full_name": "Mac",
        "timestamp": 1658614575
    },
    {
        "content": "<p>One neat thing about an imperative definition is that it would a allow for a lot of special syntax regarding monads. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- One could add transfomers in a similar manner to `variable`</span>\n<span class=\"n\">transformer</span> <span class=\"n\">ReaderT</span> <span class=\"n\">CtxA</span>\n<span class=\"n\">transformer</span> <span class=\"n\">StateT</span> <span class=\"n\">StateA</span>\n\n<span class=\"c1\">--- One could also specify side effects in the signature</span>\n<span class=\"n\">impure</span> <span class=\"c1\">-- use `BaseIO` as the base monad instead of `Id`</span>\n<span class=\"n\">routine</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mut</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"n\">reads</span> <span class=\"n\">CtxB</span><span class=\"o\">,</span> <span class=\"n\">CtxC</span> <span class=\"c1\">-- Add a `ReaderT CtxB &lt;| ReaderT CtxC` transformer</span>\n<span class=\"n\">mutates</span> <span class=\"n\">StateB</span> <span class=\"c1\">-- Add a `StateT StateB`  transformer</span>\n<span class=\"n\">throws</span> <span class=\"n\">ExA</span> <span class=\"c1\">-- Add a `ExceptT ExA` transformer</span>\n<span class=\"k\">do</span>\n   <span class=\"bp\">....</span>\n</code></pre></div>",
        "id": 290636852,
        "sender_full_name": "Mac",
        "timestamp": 1658615288
    }
]