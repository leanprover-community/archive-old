[
    {
        "content": "<p>In scala the argument to <code>orElse</code> for an <code>Option</code> is \"call by name\", so will not get evaluated if the first entry is not empty. Is this the case in lean 4 (did not look that way)? Alternatively, can I assume that evaluation is not done till a pattern is matched? Or should I explicitly use a <code>Thunk</code>? </p>\n<p>Thanks.</p>",
        "id": 240907754,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622534914
    },
    {
        "content": "<p>You should generally assume that arguments to a function will be evaluated eagerly unless they appear inside a function (either a thunk or a proof argument like in <code>Decidable</code>)</p>",
        "id": 240907845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622534992
    },
    {
        "content": "<p>There are some exceptions to this when the functions in question are inlined</p>",
        "id": 240907920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622535019
    },
    {
        "content": "<p>Thanks. Then I will try to work with thunks.</p>",
        "id": 240907989,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622535082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> I just tested <code>Option.orElse</code>, and it does appear to be one of the exceptions. You can use <code>dbgTrace</code> to check whether a subterm is evaluated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Option.orElse</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dbgTrace</span> <span class=\"s2\">\"foo\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"c1\">-- no output</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Option.orElse</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">dbgTrace</span> <span class=\"s2\">\"foo\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- foo</span>\n</code></pre></div>",
        "id": 240908754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622535527
    },
    {
        "content": "<p>It is marked <code>@[macroInline]</code>, presumably because inlining it is relevant to evaluation order</p>",
        "id": 240908981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622535642
    },
    {
        "content": "<p>Thanks a lot. That makes life more pleasant.</p>",
        "id": 240910444,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1622536554
    }
]