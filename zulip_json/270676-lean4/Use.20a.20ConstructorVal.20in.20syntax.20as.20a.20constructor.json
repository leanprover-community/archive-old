[
    {
        "content": "<p>Given a <code>ConstructorVal</code>, as you might get from <code>getStructureCtor</code>, how do you use it within syntax?</p>\n<p>For example, the Lean metaprogramming book includes a mini project (page 70, end of the Elaboration section) which uses a custom <code>getCtors</code>. This yields the <code>Name</code>s of the constructors. The defined elaboration function then checks if there's exactly one constructor, calls it <code>ctor</code>, then uses it in <code>`($(mkIdent ctor) $args*)</code> as syntax (which <code>elabTerm</code> is then called on).</p>\n<p>If instead we get a <code>ConstructorVal</code> from <code>getStructureCtor</code>, we don't seem to be able to extract the name of the constructor itself to use in the same way. While I could just use/reimplement the custom <code>getCtors</code> to get things working, I became curious as to how <code>ConstructorVal</code>s were used and what they were for. How would you do something analogous <code>`($(mkIdent ctor) $args*)</code>?</p>\n<p>And, bonus question: are there any robustness concerns with using <code>mkIdent</code> on a constructor name? Is there a better way to do term elaboration than by following the pattern given in the mini project, or is this generally safe?</p>",
        "id": 306894830,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667083828
    },
    {
        "content": "<p>Sure you can easily get the name of the constructor from a <code>ConstructorVal</code> it extends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ConstantVal#doc\">docs4#Lean.ConstantVal</a> which has a name field you can just use.</p>",
        "id": 306895014,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1667083971
    },
    {
        "content": "<p>Oh! I straight-up missed that <code>extends</code> while reading the code. Whoops, thanks. :)</p>\n<p>So, shifting to the bonus question: is using a <code>Name</code> with <code>mkIdent</code> to create syntax which is then re-elaborated a robust pattern for term elaboration in general? Is this the standard way to do term elaboration?</p>",
        "id": 306895353,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667084236
    },
    {
        "content": "<p>If you use <code>mkIdent</code> alone, no it is not robust to shadowing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">some</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">Option.some</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- prints `Foo.Option.some`</span>\n</code></pre></div>\n<p>However if you use <code>mkCIdent</code> it will \"preresolve\" the name, so it will resolve as intended:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">some</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">Option.some</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- prints `_root_.Option.some`</span>\n</code></pre></div>",
        "id": 306899628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667088760
    },
    {
        "content": "<p>oh, perfect! Thanks! :)</p>",
        "id": 306911820,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667102776
    }
]