[
    {
        "content": "<p>It's not unusual to have to use the <code>exists</code> tactic a few times in a row. It would be nice to extend the <code>exists</code> tactic to accept a comma separated list of terms instead of just one at a time.</p>\n<p>Such an extension seems to fit the \"low work and low maintenance\" criteria. Should this be a feature request? Or would a pull request be welcome here? Or is there a reason why this is undesirable?</p>",
        "id": 280132934,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1650922683
    },
    {
        "content": "<p>In mathlib 3 we use <code>use</code> for this, but I do not know if mathlib4 has implemented this already</p>",
        "id": 280133194,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650922839
    },
    {
        "content": "<p>Not yet: &lt;<a href=\"#narrow/stream/287929-mathlib4/topic/mathlib.20newbie.20issue.3A.20exists.20tactic/near/280067568\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mathlib.20newbie.20issue.3A.20exists.20tactic/near/280067568</a>&gt;</p>\n<p>I would contend this extension belongs in core. I think mathlib's <code>use</code> handles much more than that but it wouldn't fit the \"low work and low maintenance\" criteria.</p>",
        "id": 280133936,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1650923209
    },
    {
        "content": "<p>The next best thing is <code>refine'</code>, which is in core Lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 280140836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650927705
    },
    {
        "content": "<p>Pushed the <code>exists es:term,+</code> extension.</p>",
        "id": 280140950,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650927762
    },
    {
        "content": "<p>What is the difference between a placeholder <code>_</code> and an \"unnamed hole\" <code>?_</code>? I see I can do <code>refine ⟨2, 1, ?_⟩</code> but not <code>refine ⟨2, 1, _⟩</code>. (Being able to do <code>refine ⟨2, 1, ?foo⟩</code> to name a goal is a neat feature.)</p>",
        "id": 280141318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650928007
    },
    {
        "content": "<p>The Lean 4 <code>refine'</code> is the Lean 3 <code>refine</code>. Note that <code>refine' ⟨2, 1, _⟩</code> also works in Lean 4.<br>\nWe changed <code>refine</code> in Lean 4, and it only accepts \"named holes\": <code>?&lt;id&gt;</code> and <code>?_</code>. Reasons:<br>\n1- It motivates users to have structured proofs. They can fill the named holes using <code>case &lt;id&gt; =&gt; ...</code><br>\n2- Helps users catch mistakes. <code>refine</code> fails if some implicit hole could not be filled. I think <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggested this feature. May be mistaken.</p>",
        "id": 280141824,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650928399
    }
]