[
    {
        "content": "<p>Is there a nice way to make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.Unit</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">Unit</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">3:17: application type mismatch</span>\n<span class=\"cm\">  { foo := Unit }</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  Unit</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Foo</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Replacing <code>Unit</code> with <code>Top.Unit</code>, <code>prelude.Unit</code>, <code>Init.Unit</code>, <code>Prelude.Unit</code>, <code>Init.Prelude.Unit</code>, and <code>Init.prelude.Unit</code> all give me unbound identifiers</p>",
        "id": 229012262,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614973143
    },
    {
        "content": "<p>You should use <code>_root_.Unit</code></p>",
        "id": 229012456,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614973221
    },
    {
        "content": "<p>Ah, great, thanks!</p>",
        "id": 229012635,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614973291
    },
    {
        "content": "<p>We probably need a nicer syntax for this <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> We are still using the one used in Lean 3.</p>",
        "id": 229012656,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614973302
    },
    {
        "content": "<p><code>ðŸŒ².Unit</code></p>",
        "id": 229012939,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614973389
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ðŸŒ².\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ðŸŒ².$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">return</span> <span class=\"n\">Lean.mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">_root_</span> <span class=\"bp\">++</span> <span class=\"n\">id.getId.eraseMacroScopes</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.Unit</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"bp\">ðŸŒ².</span><span class=\"n\">Unit</span>\n</code></pre></div>",
        "id": 229014447,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614974056
    }
]