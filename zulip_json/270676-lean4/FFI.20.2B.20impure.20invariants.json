[
    {
        "content": "<p>I'm currently writing some Lean FFI code to the statvfs API which can operate on either a path (as a string) or a file descriptor. And of course if the path is invalid the Linux kernel will throw an error back at me for passing an invalid path. Now I do know there exists a function <code>FilePath.pathExists : FilePath -&gt; IO Bool</code> so I was considering to have the Statvfs constructor that interacts with the API have a function that takes both a <code>FilePath</code> as well as a proof that the <code>FilePath</code> exists, or at least existed before we called into the constructor. But I'm not quite sure how to do this (or whether it is even doable) since pathExists is an impure function after all. Would somebody happen to have an idea for this type of function? (or whether this is even sensible to do)</p>",
        "id": 257833822,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1634392715
    },
    {
        "content": "<p>The problem is that you cannot ensure that the file behind <code>FilePath</code> is not removed after 'pathExists' is called. My idea is to design a new <code>LockedHandle</code> type using the system file lock and have some axioms about it.</p>",
        "id": 257881719,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634439293
    },
    {
        "content": "<p>Alternatively, to handle race conditions without locks you can just recover from the error (i.e., catch it).</p>",
        "id": 257885930,
        "sender_full_name": "Mac",
        "timestamp": 1634443832
    }
]