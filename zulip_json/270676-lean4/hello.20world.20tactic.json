[
    {
        "content": "<p>I want to write a tactic that logs a \"hello world\" message and does nothing else.<br>\nHere's my current attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"helloworld\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic helloworld]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHelloWorld</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">Lean.Elab.logInfo</span> <span class=\"s2\">\"Hello, world!\"</span>\n          <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">helloworld</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">128</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">syntax</span> <span class=\"n\">node</span> <span class=\"n\">kind</span> <span class=\"bp\">'</span><span class=\"n\">helloworld'</span>\n<span class=\"mi\">133</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">tacticHelloworld'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n</code></pre></div>\n<p>What can I change to make it work?</p>",
        "id": 241332484,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622676620
    },
    {
        "content": "<p>Here's another attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"helloworld\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic ident]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHelloWorld</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">helloworld</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">Lean.Elab.logInfo</span> <span class=\"s2\">\"Hello, world!\"</span>\n                              <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">helloworld</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>That still fails with \"tactic 'tacticHelloworld' has not been implemented\".</p>",
        "id": 241333649,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622677591
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">«</span><span class=\"n\">helloworld</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"s2\">\"helloworld\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic «helloworld»]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHelloWorld</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">Lean.Elab.logInfo</span> <span class=\"s2\">\"Hello, world!\"</span>\n          <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">helloworld</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 241333844,
        "sender_full_name": "Mac",
        "timestamp": 1622677789
    },
    {
        "content": "<p>nice!</p>",
        "id": 241333968,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622677876
    },
    {
        "content": "<p>that works</p>",
        "id": 241333970,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622677878
    },
    {
        "content": "<p>The problem is that the name of your new tactic syntax needs to be feed into the <code>@[tactic]</code> annotation. You can do this either by giving it explicit name (like my example above) or by using the auto-generated name (i.e., <code>tacticHelloworld</code>).</p>",
        "id": 241334058,
        "sender_full_name": "Mac",
        "timestamp": 1622677933
    },
    {
        "content": "<p>it looks like the guillemets might not actually be necessary?</p>",
        "id": 241334093,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622677960
    },
    {
        "content": "<p>^ As Mac is saying, the syntax node kind is <code>tacticHelloworld</code>. So this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"helloworld\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic tacticHelloworld]</span> <span class=\"kd\">def</span> <span class=\"n\">elabHelloWorld</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 241334178,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1622678012
    }
]