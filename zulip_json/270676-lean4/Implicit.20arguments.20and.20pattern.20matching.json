[
    {
        "content": "<p>While translating some Coq code over to Lean4, I was surprised to discover that this doesn't typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkT</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runT</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Doesn't work -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mkT</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Also doesn't work</span>\n\n<span class=\"cm\">  | mkT f =&gt; @f a x</span>\n<span class=\"cm\">  | mkT f =&gt; f (a := a) x</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">T.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.56</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>On the other hand, this <em>does</em> typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkT2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T2</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">T2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runT2</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t2</span> <span class=\"k\">with</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mkT2</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The only difference between the two programs is whether the <code>a</code> in the type of <code>mkT</code> is made implicit or not. Is this expected behavior? If so, how can I make the first version of <code>mkT</code> typecheck?</p>\n<p>I'm using <code>Lean (version 4.0.0-m2, commit 26dda3f63d88, Release)</code>, in case that's important.</p>",
        "id": 232433603,
        "sender_full_name": "Ryan Scott",
        "timestamp": 1617114220
    },
    {
        "content": "<p>This works out of the box on current master</p>",
        "id": 232435956,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617114985
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Implicit.20arguments.20and.20pattern.20matching\">#general &gt; Implicit arguments and pattern matching</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span></p>",
        "id": 232436047,
        "sender_full_name": "Notification Bot",
        "timestamp": 1617115017
    },
    {
        "content": "<p>Ah, good to know! I suppose I should be using <code>nightly</code> instead of <code>stable</code>, then.</p>\n<p>A related question: I'm having trouble figuring out why this discrepancy exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkT</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">T</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kd\">def</span> <span class=\"n\">makeT</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkT</span> <span class=\"n\">f</span>\n\n<span class=\"c1\">-- Doesn't work</span>\n<span class=\"kd\">def</span> <span class=\"n\">makeT'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkT</span> <span class=\"n\">f</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">T.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">11</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.118</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.118</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>This is with <code>Lean (version 4.0.0-nightly-2021-03-29, commit 0dfefb7b7845, Release)</code>.</p>",
        "id": 232437635,
        "sender_full_name": "Ryan Scott",
        "timestamp": 1617115550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"401408\">@Ryan Scott</span> This is probably an issue with the new implicit lambda feature in Lean4. I will investigate it today.</p>",
        "id": 232451555,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1617120304
    }
]