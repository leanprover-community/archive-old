[
    {
        "content": "<p>In the following proof ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">a</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imageUnion</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as₁</span> <span class=\"n\">as₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">as₁</span> <span class=\"bp\">∪</span> <span class=\"n\">as₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">as₁</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">as₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image</span><span class=\"o\">,</span> <span class=\"n\">setOf</span><span class=\"o\">,</span> <span class=\"n\">Set.union</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span><span class=\"o\">]</span>\n  <span class=\"n\">funext</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">propext</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>... the goal state shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">as₁</span> <span class=\"n\">as₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">as₁</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">as₂</span>\n</code></pre></div>\n<p>I'm confused by the notation. What does assumption <code>hi</code> state?<br>\nThe way I read it at the moment is as <code>a ∈ (λ x =&gt; x ∈ as₁ ∨ x ∈ as₂)</code> which doesn't make sense to me.</p>",
        "id": 248201356,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1627984267
    },
    {
        "content": "<p>Your parse is correct. It makes sense because <code>Set α := α -&gt; Prop</code> and <code>A \\union B := λ x =&gt; A x \\or B x</code>. If you unfold the definition of <code>\\in</code> as well, you get <code>a \\in as1 \\or a \\in as2</code>.</p>",
        "id": 248202053,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1627984766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 248202264,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627984912
    },
    {
        "content": "<p>It would be better not to unfold the definition of <code>∪</code> but rather use a lemma with a name like <code>Set.union_def</code>.</p>",
        "id": 248214566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627994277
    },
    {
        "content": "<p>or better yet <code>Set.mem_union</code></p>",
        "id": 248246863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628008970
    }
]