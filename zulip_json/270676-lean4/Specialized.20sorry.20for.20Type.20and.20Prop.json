[
    {
        "content": "<p>Is there a specialized <code>sorry</code> for Type and Prop? I have sorry for Prop everywhere and a few for Type as well. Now I'm trying to compile and execute my library and I'm getting panic errors because I'm executing sorry. I would like to find all those Type sorry. </p>\n<p>Or at least in the future use different sorry for Prop and Type to exactly see what breaks execution.</p>",
        "id": 268298322,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642441209
    },
    {
        "content": "<p>As far as I know <code>sorry</code> is basically just a frontend for <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#sorryAx\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#sorryAx</a> so in theory it should be possible to split this into two axioms, one for <code>Prop</code> and one for <code>Type u</code></p>",
        "id": 268299251,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642441846
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268300593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642442692
    },
    {
        "content": "<p>Yeah I already inspected sorryAx a bit and sorry has custom elaborator that print the warning message. I was thinking about writing my own axiom like that purely for Prop and purely for Type. Then I got lazy, wondered if it already exists so I asked  :)</p>",
        "id": 268305558,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642446186
    },
    {
        "content": "<blockquote>\n<p>so in theory it should be possible to split this into two axioms</p>\n</blockquote>\n<p>Not really, you can also have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 268310272,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642449387
    },
    {
        "content": "<p>Well yes but it should be possible to have an additional sorryProp and sorryType right?</p>",
        "id": 268310747,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642449732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> you could mark your new <code>sorryType</code> <code>noncomputable</code> so that definitions using it will error when compiling.</p>",
        "id": 268311269,
        "sender_full_name": "Mac",
        "timestamp": 1642450135
    },
    {
        "content": "<p>Lean spelunking question: where is <code>sorry</code> actually defined? I haven't been able to find it, or what turns it into <code>sorryAx</code>.</p>",
        "id": 268311454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642450283
    },
    {
        "content": "<p>In emacs, go to definition on sorry takes you to BuiltNotation.lean and there elabSorry</p>",
        "id": 268311590,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642450395
    },
    {
        "content": "<p>Thanks. (I need to fix my go-to-definition for Lean 4; it works for most things, just not <code>sorry</code> apparently.)</p>\n<p><a href=\"https://github.com/leanprover/lean4/blob/9a24db4e86af9b39db7df3094c7aab05bd5c9a64/src/Lean/Elab/BuiltinNotation.lean#L157\">https://github.com/leanprover/lean4/blob/9a24db4e86af9b39db7df3094c7aab05bd5c9a64/src/Lean/Elab/BuiltinNotation.lean#L157</a></p>",
        "id": 268311985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642450722
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268329466,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642466706
    }
]