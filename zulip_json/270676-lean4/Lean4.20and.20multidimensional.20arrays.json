[
    {
        "content": "<p>Lean4's type class resolution is great for numerical linear algebra because operations on heterogenous types, aka structured matrices, can benefit immensely from type class resolution by calling specific algorithms for specific combinations of type.<br>\nAs an example, think about the difference of multiplying two matrices <code>A</code>, <code>B</code> where they are 1e6 x 1e6 dense Float matrices or sparse Float matrices.</p>\n<p>What are the Lean4 plans with regards to numerical linear algebra? I wasn't able to find any examples of multidimensional arrays in the manual.</p>",
        "id": 234098377,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198236
    },
    {
        "content": "<p>You could represent multidimensional arrays as arrays of arrays?</p>",
        "id": 234098431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618198316
    },
    {
        "content": "<p>With C or Fortran element alignment?</p>",
        "id": 234098493,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198377
    },
    {
        "content": "<p>neither, I guess it would have a pointer indirection</p>",
        "id": 234098539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618198398
    },
    {
        "content": "<p>That can't be good.</p>",
        "id": 234098548,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198422
    },
    {
        "content": "<p>If you want to ensure a flat array, then use a big array and add operations to view it as a 2d array</p>",
        "id": 234098624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618198466
    },
    {
        "content": "<p>Yeah, that's what I'm thinking.</p>",
        "id": 234098633,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198486
    },
    {
        "content": "<p>How could I get Matlab-y syntax for access then? I want <code>def (a : Array Nat) := #[1 , 2; 3, 4]</code> to represent a 2x2 matrix s.t. <code>a[1,1] = 4</code>.</p>",
        "id": 234098725,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198571
    },
    {
        "content": "<p>Also, wow, how do you answer so fast <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , do you have notifications on for every channel? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234098848,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618198701
    },
    {
        "content": "<p>I am everywhere</p>",
        "id": 234098859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618198718
    },
    {
        "content": "<p>Quick question for ya:<br>\nIf I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I have a <code>double</code> function,  can I just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">map</span> <span class=\"n\">double</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>to get <code>#[1, 4, 6]</code>?</p>\n<p>Is there a way I can avoid writing <code>Array.map double a</code>?</p>",
        "id": 234099195,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618199108
    },
    {
        "content": "<p>Oh, I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">square</span>\n</code></pre></div>\n<p>does what I want.</p>",
        "id": 234099348,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618199237
    },
    {
        "content": "<p>Well, I managed to find 2 or 3 other bugs in lean in the process, but I managed to get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Array₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">cols</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">buf</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">A</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">rows</span> <span class=\"bp\">*</span> <span class=\"n\">cols</span> <span class=\"bp\">=</span> <span class=\"n\">buf.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Array₂.get</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array₂</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.rows</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.cols</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">a.buf.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a.cols</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.toArray₂</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cols</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rows</span> <span class=\"o\">:=</span> <span class=\"n\">l.length</span> <span class=\"bp\">/</span> <span class=\"n\">cols</span>\n  <span class=\"k\">let</span> <span class=\"n\">buf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"o\">(</span><span class=\"n\">rows</span> <span class=\"bp\">*</span> <span class=\"n\">cols</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toArray</span>\n  <span class=\"o\">⟨</span><span class=\"n\">rows</span><span class=\"o\">,</span> <span class=\"n\">cols</span><span class=\"o\">,</span> <span class=\"n\">buf</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">),</span> <span class=\"s2\">\"; \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rows</span> <span class=\"o\">:=</span> <span class=\"n\">elems.size</span>\n  <span class=\"k\">if</span> <span class=\"n\">rows</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">throwUnsupported</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">elems.get</span><span class=\"bp\">?</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">throwUnsupported</span>\n  <span class=\"k\">let</span> <span class=\"n\">cols</span> <span class=\"o\">:=</span> <span class=\"n\">a.getElems.size</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">elems</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a.getElems</span>\n    <span class=\"n\">unless</span> <span class=\"n\">x.size</span> <span class=\"bp\">=</span> <span class=\"n\">cols</span> <span class=\"k\">do</span> <span class=\"n\">throwUnsupported</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.append</span> <span class=\"n\">x</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.toArray₂</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">cols</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">arr</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Array₂.get</span> <span class=\"bp\">$</span><span class=\"n\">arr</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩)</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 234179151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241085
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 234179451,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241192
    }
]