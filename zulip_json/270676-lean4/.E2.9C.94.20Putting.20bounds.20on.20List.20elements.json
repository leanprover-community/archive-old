[
    {
        "content": "<p>I'd like to write a definition which has as a parameter a sequence of positive integers less than <code>n</code>. I was thinking of using <code>List Nat</code> or maybe <code>List Fin</code> for this, but I don't understand how to write a proposition that asserts that all values of the list are positive.</p>\n<p>I want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_definition</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_pos</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs_bounds</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I believe it is angry because <code>xs</code> is not a type.</p>\n<p>Perhaps it is better to write a subtype of <code>Fin</code> for this that only allows positive integers? But I do not know how to do this either, unfortunately. I don't quite get how to use <code>Subtype</code> properly.</p>",
        "id": 287936623,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656539362
    },
    {
        "content": "<p>There are multiple ways to achieve what you want:</p>\n<ol>\n<li>define a type of bounded positive nats via subtyping or an inductive relation and declare your list is made of that type</li>\n<li>use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Mem#doc\">docs4#List.Mem</a> and the corresponding membership instance to declare \\all x \\in xs, 1 &lt;= x &lt;= p (which would be the right way to achieve what you are trying right now</li>\n</ol>",
        "id": 287938917,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656539772
    },
    {
        "content": "<p>Which do you recommend? Is this the right way to define a subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">PosFin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.ofNat</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 287939660,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656539912
    },
    {
        "content": "<p>I don't really have a recommendation though my intuition would say to use the thing for which there is already a theory so 2. since you might be able to get stuff for free easier that way.</p>",
        "id": 287940574,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656540080
    },
    {
        "content": "<p>Will do, thanks!</p>",
        "id": 287941813,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656540289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> has marked this topic as resolved.</p>",
        "id": 287941836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656540291
    }
]