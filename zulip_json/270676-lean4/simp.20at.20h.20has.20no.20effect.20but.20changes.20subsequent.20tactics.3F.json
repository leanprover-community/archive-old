[
    {
        "content": "<p>Hello, I am unsure if this is a bug or behavior I am unaware of.</p>\n<p>In the middle of my proof, I noticed behavior where I have the following hypothesis and goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"n\">Char</span>\n<span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span> <span class=\"k\">then</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">toNatX</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">toNatX</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div>\n<p><code>simp [h]</code>  refuses to simplify the if statement.  However, if I first do <code>simp at h</code> and then <code>simp [h]</code> it works fine, <em>despite the fact that <code>simp at h</code> makes no visible difference to h or any other part of the proof state</em>.</p>\n<p>I tried creating a MWE, but it doesn't exhibit the same behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toNatX</span> <span class=\"o\">(</span><span class=\"n\">_s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">wtf</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span> <span class=\"k\">then</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">toNatX</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">toNatX</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Instead it does what I expected, which is <code>simp [h]</code> just working.</p>",
        "id": 317074840,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671590283
    },
    {
        "content": "<p>Do you see a change from <code>at h</code> with <code>set_option pp.all true</code>?</p>",
        "id": 317099034,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671608531
    },
    {
        "content": "<p>Yes, It changed from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Char</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Char</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">45</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">45</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 317198569,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671640331
    },
    {
        "content": "<p>and what does the goal term <code>head = Char.ofNat 45</code> look like? Maybe you just answered your own question?</p>",
        "id": 317198791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671640393
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Int</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Char</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">45</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">45</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"n\">instDecidableEqChar</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">Char.ofNat</span> <span class=\"mi\">45</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Neg.neg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"n\">Int.instNegInt</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.cast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNatCast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"n\">Int.instRingInt</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">String.toNat</span><span class=\"bp\">Δ</span> <span class=\"n\">tail</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.cast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNatCast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Int</span> <span class=\"n\">Int.instRingInt</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">String.toNat</span><span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Char</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 317199278,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671640519
    },
    {
        "content": "<p>I don't understand what any of this means.  I thought <code>¬head = Char.ofNat 45</code> meant <code>¬head = Char.ofNat 45</code> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 317199551,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671640586
    },
    {
        "content": "<p>Does this mean I need to defensively simplify my hypotheses regularly?  I probably wouldn't have noticed this behavior if the hypothesis or goal were slightly more complicated.</p>",
        "id": 317200876,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671640964
    },
    {
        "content": "<p><code>set_option pp.all true</code> is just turning off pretty printing of the syntax, so what you're seeing there is just the full spelled out names of the functions that build that. For example the <code>=</code> in <code>head = Char.ofNat 45</code> is just the pretty version of <code>@Eq.{1} Int head (Char.ofNat 45)</code>, there's a type <code>Eq</code> which has an (implicit) parameter which is the type, that has one constructor, which is what is used to define equality, and the rest of what's happening there is similarly showing you everything that's under the hood</p>",
        "id": 317201121,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671641046
    },
    {
        "content": "<p>More precisely, what this indicates is that the original <code>h</code> was <code>¬head = Char.ofNat (nat_lit 45)</code> where <code>nat_lit 45</code> is a \"raw nat literal\", and simp turned it into <code>¬head = Char.ofNat 45</code> using a properly marked up nat literal which also happens to match the expression in the <code>if</code> statement of the goal</p>",
        "id": 317201551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641177
    },
    {
        "content": "<p>so the question is: how did you come to obtain a hypothesis containing a raw nat literal?</p>",
        "id": 317201668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641213
    },
    {
        "content": "<p>I did <code>have h₃: ¬head = '-'  :=</code> to generate h₃, so maybe the literal '-'?</p>",
        "id": 317204931,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671642151
    },
    {
        "content": "<p>I see, that makes sense. I take it that you didn't write <code>Char.ofNat 45</code> in the if statement either, you just simped it and it ended up like that</p>",
        "id": 317205202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642236
    },
    {
        "content": "<p>In other words, the issue is that <code>'-'</code> is not in simp-normal form</p>",
        "id": 317205291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642259
    },
    {
        "content": "<p>I think the best fix here is to make <code>'-'</code> expand to <code>Char.ofNat 45</code> instead of <code>Char.ofNat (nat_lit 45)</code>. Regular number literals like <code>45</code> are automatically marked up so character literals should be as well</p>",
        "id": 317205789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642412
    },
    {
        "content": "<p>Are there other scenarios I should be on the lookout for differences that are hidden by the pretty printer?</p>",
        "id": 317206110,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671642494
    },
    {
        "content": "<p>For your specific issue though the quick fix is to just <code>simp</code> the hypothesis as well, just as if it was written in some inconvenient way that needed simping</p>",
        "id": 317206170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642519
    },
    {
        "content": "<p>This is a bug, I don't think you necessarily need to be on guard against similar things</p>",
        "id": 317206248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642545
    },
    {
        "content": "<p>Ok thanks, should I file it on github?</p>",
        "id": 317206379,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1671642587
    },
    {
        "content": "<p>but you should be generally aware that the pretty printer does not show all information by default, and sometimes the behavior of a tactic depends on things that aren't visible</p>",
        "id": 317206380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642587
    },
    {
        "content": "<p>besides using <code>pp.all</code>, another method that isn't quite so much of a fire-hose is to use the goal view to click on expressions and see how they are constructed</p>",
        "id": 317206594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671642645
    },
    {
        "content": "<p><code>rw</code> works up to syntactic equality, and <code>simp</code> uses <code>rw</code>, so the syntactic change made all the difference here.</p>",
        "id": 317213414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671644762
    }
]