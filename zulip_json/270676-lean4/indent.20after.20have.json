[
    {
        "content": "<p>What does the indent after the have mean in this lean3 proof?  If I try this in lean4 I get  syntax error <code>expected '|'</code> ?  If I remove the indent then I get the error (it seems the indent is not required in lean3)...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_lt_add_right</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">he</span> <span class=\"bp\">?</span><span class=\"n\">m.3947</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m.3947</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m.3947</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The lean3 proof I'm porting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_mul</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For repro see  <a href=\"https://github.com/leanprover/lean4-samples/blob/main/NaturalNumbers/InequalityWorld/Level8.lean\">Level 18</a></p>",
        "id": 303953106,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665714066
    },
    {
        "content": "<p>Never mind I just found the <code>have</code> tactic documentation in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html</a>.</p>\n<p>So the answer is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 303954368,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665714987
    },
    {
        "content": "<p>In lean 3, the <code>have</code> tactic has an optional <code>:=</code> argument, and if you omit it it produces two goals. In mathlib the first goal is usually surrounded by <code>{ }</code>, but some people also just indent the subproof without using the braces (since as we've established they are not strictly necessary).</p>",
        "id": 303955582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665715850
    },
    {
        "content": "<p>Ok, now I have done all of NNG except one last proof.  I'm stuck on defining <code>mul_le_mul</code> for <code>lemma le_mul</code> which is defined in lean3 using a calc proof. When I port that to Lean4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span> <span class=\"n\">nn_b</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_c</span>\n</code></pre></div>\n<p>I'm getting an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">LE.le</span> <span class=\"n\">LE.le</span> <span class=\"bp\">?</span><span class=\"n\">m.4473</span>\n</code></pre></div>\n<p>So what type instance do I need to create for calc to be happy?  I see these instances in the prelude:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">heq</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">h'</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>but  it seems to be looking for a Trans on LE.le (rather than on Eq) , and I don't know how to make that work with my custom <code>MyNat</code> type? I already have this but it didn't help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.le</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 303957256,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665717270
    },
    {
        "content": "<p>It says - you need an instance of the form <code>Trans LE.le LE.le ?m.4473</code></p>",
        "id": 303957303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665717361
    },
    {
        "content": "<p>also relevant is that those <code>LE.le</code> applications are over <code>MyNat</code> (if you hover over the error message you should be able to see this)</p>",
        "id": 303957361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665717394
    },
    {
        "content": "<p>Ah, thanks for the hint, I just found these in mathlibe Order.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">LE.le</span> <span class=\"n\">LE.le</span> <span class=\"n\">LE.le</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">le_trans</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LE.le</span> <span class=\"n\">LT.lt</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">LE.le</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LT.lt</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">lt_of_le_of_lt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>yikes, sorting through all this now...</p>",
        "id": 303958395,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665718467
    },
    {
        "content": "<p>Basically, calc sees that you have given it two proofs, of <code>R x y</code> and <code>S y z</code> for some relations <code>R</code> and <code>S</code>, and we're asking it to prove <code>T x z</code> for some relation <code>T</code> not provided. So it uses those instances to say \"how can I combine a proof of <code>R</code> and a proof of <code>S</code>, what relation does the transitive thing have?\" And that's exactly what the instance says. You just have to give it your proof of <code>MyNat.le_trans</code> and then calc can use it</p>",
        "id": 303958798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665718838
    },
    {
        "content": "<p>that way you can write things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and it somehow is able to figure out that this is supposed to be a proof of <code>x &lt; w</code></p>",
        "id": 303958895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665718934
    },
    {
        "content": "<p>Ok, I think I made some progress, the NNG was dependent on level 5 doing this instance which I had commented out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">structure_helper</span>\n</code></pre></div>\n<p>so I've replaced this with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">le_refl_mynat</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and now I'm getting a different error from the <code>calc</code> proof, it doesn't like my hac and hbd terms:</p>\n<p><a href=\"/user_uploads/3121/gpc-1EqEpPGAqt_uXJ7YxaRb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gpc-1EqEpPGAqt_uXJ7YxaRb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gpc-1EqEpPGAqt_uXJ7YxaRb/image.png\"></a></div><p>but they were ported directly from the lean3 versions and work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hac</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">MyNat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I found the <code>Nat.mul_le_mul</code> theorem which is completely different, so I'm trying that route, but it appears I need to boot up a huge chunk of theorems on MyNat for that to work...</p>",
        "id": 303960083,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665719946
    },
    {
        "content": "<p>You have explicit arguments in <code>mul_le_mul_of_nonneg_left</code>; NNG probably uses implicit arguments <code>{a b c : MyNat}</code></p>",
        "id": 303960216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720091
    },
    {
        "content": "<p>Nope, I ported it as directly as possible, and NNG lean3 has </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303960344,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720166
    },
    {
        "content": "<p>Is it actually using that theorem?</p>",
        "id": 303960433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720265
    },
    {
        "content": "<p>there is another theorem with that name in core lean</p>",
        "id": 303960438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720276
    },
    {
        "content": "<p>what does the theorem you are currently porting look like in lean 3?</p>",
        "id": 303960481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720338
    },
    {
        "content": "<p>It's in the same file, but there is this intermediate thing, does this change the game?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_lt_mul_of_pos_left</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"n\">mul_lt_mul_of_pos_right</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">mynat.semiring</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">mynat.ordered_cancel_comm_monoid</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and the lean3 proof I'm porting is this one from <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world10/level18a.lean\">level18a</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n<span class=\"n\">intros</span> <span class=\"n\">hab</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">cz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">bz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">hab</span> <span class=\"n\">hcd</span> <span class=\"n\">cz</span> <span class=\"n\">bz</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303960613,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720469
    },
    {
        "content": "<p>yes, instances are something to pay attention to</p>",
        "id": 303960675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720488
    },
    {
        "content": "<p>and indeed it explains the behavior - <code>ordered_semiring</code> is the typeclass that would make the <code>mul_le_mul_of_nonneg_left</code> lemma from core work on <code>mynat</code></p>",
        "id": 303960702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720523
    },
    {
        "content": "<p>That's not going to work in lean 4 until sufficiently much of mathlib4 is ported</p>",
        "id": 303960730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720567
    },
    {
        "content": "<p>Oh, and the mathlib3 implementation of mu_le_mul is more general it operates on any alpha, whereas I fixed mine to MyNat...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span> <span class=\"n\">nn_b</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_c</span>\n</code></pre></div>",
        "id": 303960751,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720591
    },
    {
        "content": "<p>but the easy solution in your case is just to make the arguments implicit or use <code>_ _ _</code> in the theorem application</p>",
        "id": 303960756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720592
    },
    {
        "content": "<p>right, that instance is saying that since you proved some basic facts about &lt;= and *, a whole bunch of other facts follow from that like <code>mul_le_mul</code></p>",
        "id": 303960822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720661
    },
    {
        "content": "<p>You won't be able to use the typeclass or suite of theorems since they don't exist yet in lean 4, but hopefully NNG isn't making too much use of them? It's basically cheating from the NNG perspective</p>",
        "id": 303960899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720724
    },
    {
        "content": "<p>yeah, I thought so, when F12 jumped to Ordered_ring.lean which is the same name as that instance <code>ordered_semiring</code>.  But I figured I could cheat and jump straight to <code>mul_le_mul</code>, and so long as I could provide that then <code>lemma le_mul</code> should be happy without the full <code>ordered_semiring</code>...</p>",
        "id": 303960908,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720755
    },
    {
        "content": "<p>it could actually be a mistake in the lean 3 code</p>",
        "id": 303960909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720758
    },
    {
        "content": "<p>The lean3 level18a.lean compiles with no errors though.</p>",
        "id": 303960945,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720827
    },
    {
        "content": "<p>so perhaps I'd be better off giving  up on <code>mul_le_mul</code> and find another way to complete <code>lemma le_mul</code>...</p>",
        "id": 303961029,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720899
    },
    {
        "content": "<p>I have this to complete:<br>\n<a href=\"/user_uploads/3121/09W9gDlDJRqW2gA9LOzaGdL0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/09W9gDlDJRqW2gA9LOzaGdL0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/09W9gDlDJRqW2gA9LOzaGdL0/image.png\"></a></div>",
        "id": 303961050,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665720919
    },
    {
        "content": "<p>You should be able to prove <code>mul_le_mul</code> exactly the way it was done in <code>ordered_ring.lean</code></p>",
        "id": 303961086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720956
    },
    {
        "content": "<p>it's just transitivity on <code>mul_le_mul_of_nonneg_right</code> and <code>mul_le_mul_of_nonneg_left</code></p>",
        "id": 303961140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665720979
    },
    {
        "content": "<p>which you must have proved previously since they are inputs to the <code>ordered_ring</code> instance</p>",
        "id": 303961166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665721014
    },
    {
        "content": "<p>That's what I was trying to do with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span> <span class=\"n\">nn_c</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_b</span>\n</code></pre></div>\n<p>But perhaps I can prove it without using <code>calc</code> and then skip the needs for the Trans instance...</p>",
        "id": 303961425,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665721305
    },
    {
        "content": "<p>Is there a reason you don't want the Trans instance?</p>",
        "id": 303962150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665721997
    },
    {
        "content": "<p>Note that the <code>Trans LE LE LE</code> instance holds in general for any <code>Preorder</code> so you can hide it in whatever library is defining <code>Preorder</code></p>",
        "id": 303962227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665722051
    },
    {
        "content": "<p>the proof without calc just combines those two theorems using <code>le_trans</code></p>",
        "id": 303962269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665722103
    },
    {
        "content": "<p>Oh, I finally got what you were talking about with <code>_ _ _ </code> and so I'm trying this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hac</span> <span class=\"n\">nn_c</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_b</span>\n</code></pre></div>\n<p>But now it complains about the <code>nn_c</code> term and the <code>nn_b</code> term saying</p>\n<p><a href=\"/user_uploads/3121/dR8ogPeIbLJPokmGY1QfOuDv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dR8ogPeIbLJPokmGY1QfOuDv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dR8ogPeIbLJPokmGY1QfOuDv/image.png\"></a></div>",
        "id": 303962285,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665722134
    },
    {
        "content": "<p>PS: I remember now something about lean3 allowing terms to go unspecified inside a proof making those arguments implicit, but lean4 doesn't allow that.</p>",
        "id": 303962361,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665722184
    },
    {
        "content": "<p>Oh hey, I just got it trying random things, turns out I just had to switch the terms for some reason and this works in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hac</span> <span class=\"n\">nn_b</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_c</span>\n</code></pre></div>\n<p>So with that all proofs are ported from NNG :-) (but there's still some todo work items to do with these \"instances\" which NNG calls collectibles.</p>",
        "id": 303962618,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665722421
    },
    {
        "content": "<p>See <a href=\"https://lovettsoftware.com/NaturalNumbers/InequalityWorld/Level18.lean.html\">https://lovettsoftware.com/NaturalNumbers/InequalityWorld/Level18.lean.html</a>, they all work now.</p>",
        "id": 303962665,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665722512
    },
    {
        "content": "<blockquote>\n<p>turns out I just had to switch the terms for some reason</p>\n</blockquote>\n<p>did you or NNG perhaps interchange the meanings of <code>mul_le_mul_of_nonneg_left</code> and <code>mul_le_mul_of_nonneg_right</code>? It's not really obvious which way around is supposed to be \"left\"</p>",
        "id": 303963093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665722973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434989\">Chris Lovett</span> <a href=\"#narrow/stream/270676-lean4/topic/indent.20after.20have/near/303962361\">said</a>:</p>\n<blockquote>\n<p>PS: I remember now something about lean3 allowing terms to go unspecified inside a proof making those arguments implicit, but lean4 doesn't allow that.</p>\n</blockquote>\n<p>not sure what this is a reference to. Perhaps the fact that <code>refine foo _</code> doesn't work where <code>refine' foo _</code> does?</p>",
        "id": 303963237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665723075
    },
    {
        "content": "<p>No the reason I needed to add the _ _ _ in <code>mul_le_mul_of_nonneg_right _ _ _ hac nn_b</code> but it was not needed in lean3 version.</p>",
        "id": 303963263,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665723118
    },
    {
        "content": "<p>Never mind, somehow in my messing around I must have switched them or mistyped them or something, the lean3 semiring has them in the same order with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span> <span class=\"n\">nn_b</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_c</span>\n</code></pre></div>\n<p>we we're all good now.</p>",
        "id": 303963576,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665723399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434989\">Chris Lovett</span> <a href=\"#narrow/stream/270676-lean4/topic/indent.20after.20have/near/303963263\">said</a>:</p>\n<blockquote>\n<p>No the reason I needed to add the _ _ _ in <code>mul_le_mul_of_nonneg_right _ _ _ hac nn_b</code> but it was not needed in lean3 version.</p>\n</blockquote>\n<p>The reason you needed to add that is because in your version of the theorem the <code>a b c</code> arguments are in <code>()</code> binders. In the lean 3 version (in the <code>ordered_ring.lean</code> file, not in NNG since the NNG is referencing the version from <code>ordered_ring.lean</code>) they are in <code>{}</code> binders</p>",
        "id": 303965195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665724814
    },
    {
        "content": "<p>Right but in NNG they redefined <code>mul_le_mul_of_nonneg_right</code> the same way I did (because I just ported it from there).</p>",
        "id": 303995783,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665740507
    },
    {
        "content": "<p>It might be the case that I made up my own binders and it might be the case that the choice of binders changed in lean 3 since I made the game (about three years ago). Binders are something I don't teach.</p>",
        "id": 304158634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665816688
    }
]