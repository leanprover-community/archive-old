[
    {
        "content": "<p>I'm trying to do something a bit weird and implement a <code>List.fold'</code> (that exposes proof of membership) in terms of just <code>fold</code>; I am using some trickery to push off the proof obligations until outside the fold (where they can actually be dispatched) but it tanks the performance of the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Partial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">temp</span> <span class=\"o\">:=</span> <span class=\"n\">List.foldl</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">dom</span><span class=\"o\">,</span><span class=\"n\">acc</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">dom</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">h_x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h_x</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(⟨</span><span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Partial</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"n\">l</span>\n  <span class=\"n\">temp.get</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">temp.dom</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"n\">True</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289113950,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657473205
    },
    {
        "content": "<p>I was hoping that the <code>Partial</code> gets erased to just <code>() → α</code>, and that the fold closure <code>fun ⟨dom,acc⟩ x =&gt; ⟨x ∈ l ∧ dom, λ ⟨h_x, h⟩ =&gt; f (acc h) x h_x⟩</code> would be simplified to <code>fun acc x () =&gt; f (acc ()) x</code>, does that all seem accurate? not entirely sure how to decifer the generated C code</p>",
        "id": 289114055,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657473331
    },
    {
        "content": "<p>Alternatively, does anyone have a better idea how to implement <code>fold'</code> in terms of <code>foldl</code> that at runtime just makes a single call to <code>foldl</code>?</p>",
        "id": 289114246,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657473504
    },
    {
        "content": "<p>Take a look at how lean3 does it for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pmap\">docs#list.pmap</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a></p>",
        "id": 289115427,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657474920
    },
    {
        "content": "<p>Not really an answer, but you might find <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lists.20with.20predicates.20and.20proof.20erasure\">this thread</a> relevant.</p>",
        "id": 289115914,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657475639
    },
    {
        "content": "<p>ah, that is relevant. hm</p>",
        "id": 289116471,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657476450
    },
    {
        "content": "<p>So terms like <code>fun x h =&gt; f x (by blah)</code> are not simplified to <code>f</code></p>",
        "id": 289117444,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657477835
    },
    {
        "content": "<p>I will play around with this a bit more, thanks for the links :)</p>",
        "id": 289117470,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657477911
    },
    {
        "content": "<p>Are <code>h</code> and <code>(by blah)</code> supposed to prove the same proposition, or two definitionally equal ones? If so, then I guess you could simplify it to <code>f</code> by proof irrelevance. But if not, it wouldn't be type-correct. (Or you mean in the compiler? It does erase proofs but not always, I think, so maybe this is one of the non-erased cases.)</p>",
        "id": 289119465,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657480889
    },
    {
        "content": "<p>Proofs should always be erased</p>",
        "id": 289119859,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657481458
    },
    {
        "content": "<p>Half of the performance difference is due to a missing <code>@[specialize]</code>. After that, the issue is probably that <code>() → α</code> is still a closure that is composed and then invoked only after the fold.</p>",
        "id": 289120442,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657482206
    },
    {
        "content": "<p>Ah, thank you for the tip wrt <code>specialize</code>. But the cost of the closures was what I expected to be quite high -- I still can't figure out a way to avoid building up the list (or an equivalent stack of closures) while defining <code>fold'</code>. Duplicating the with-proof and without proof versions is annoying but a fine workaround</p>",
        "id": 289843638,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657999498
    },
    {
        "content": "<p>If I understand your test correctly, you're mostly comparing the compiled performance of <code>List.fold</code> against the VM performance of your <code>List.fold'</code>. Maybe try compiling your version and comparing against that? (For example, by having an actual <code>main</code> function with your test and building it.)</p>",
        "id": 289844100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658000134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289119465\">said</a>:</p>\n<blockquote>\n<p>Are <code>h</code> and <code>(by blah)</code> supposed to prove the same proposition, or two definitionally equal ones? If so, then I guess you could simplify it to <code>f</code> by proof irrelevance. But if not, it wouldn't be type-correct. (Or you mean in the compiler? It does erase proofs but not always, I think, so maybe this is one of the non-erased cases.)</p>\n</blockquote>\n<p>No, I mean in the non-type-correct sense. Which is why it'd have to be erased &amp; simplified after typechecking. And of course it's not always safe to do that simplification, right, since <code>fun (h : False) =&gt; False.elim h</code> can't be simplified to<code>False.elim</code> since there is no actual code to generate for <code>False.elim</code>.</p>\n<p>So I'm not really sure what I'd even envision doing to get this function to be equivalent to a single <code>fold</code> (aside from the optimization mentioned in the other thread w.r.t. identifying functions that are identity after proof erasure). Definitely an engineering issue not a Lean compiler issue.</p>",
        "id": 289844149,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658000191
    },
    {
        "content": "<p>I wonder if there's some way to \"seal\" some unsafe post-erasure simplifications in a surrounding closure to ensure that proof obligations were met before code gets executed. Like, I think it is safe to simplify</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>when erasing proof  terms, since the exterior function's body will only be executed if its application typechecks.</p>",
        "id": 289844297,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658000429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289844100\">said</a>:</p>\n<blockquote>\n<p>If I understand your test correctly, you're mostly comparing the compiled performance of <code>List.fold</code> against the VM performance of your <code>List.fold'</code>. Maybe try compiling your version and comparing against that? (For example, by having an actual <code>main</code> function with your test and building it.)</p>\n</blockquote>\n<p>sorry, missed your message. isn't this comparing the VM performance of both? the test is running both in an #eval, but does the <code>List.foldl</code> call get exported to the compiled function?</p>",
        "id": 289844365,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658000550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289844365\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289844100\">said</a>:</p>\n<blockquote>\n<p>If I understand your test correctly, you're mostly comparing the compiled performance of <code>List.fold</code> against the VM performance of your <code>List.fold'</code>. Maybe try compiling your version and comparing against that? (For example, by having an actual <code>main</code> function with your test and building it.)</p>\n</blockquote>\n<p>sorry, missed your message. isn't this comparing the VM performance of both? the test is running both in an #eval, but does the <code>List.foldl</code> call get exported to the compiled function?</p>\n</blockquote>\n<p>Oh yes, this is important. <code>List.foldl</code> is part of stdlib so it gets compiled into <code>liblean</code> and will be executed in compiled form, whereas your <code>fold'</code> is interpreted. You could try writing the benchmark as a <code> def main : IO Unit</code> and running the compiled executable.</p>",
        "id": 289847336,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658005010
    },
    {
        "content": "<p><del>(Note: the calls into <code>List.foldl</code> from <code>fold'</code> will also be to the compiled code.)</del> Nvm, because of specialization it seems like it might all be interpreted. You can introspect the code with <code>set_option trace.compiler.ir true in def fold' ..</code>.</p>",
        "id": 289847418,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658005112
    },
    {
        "content": "<p>Oh, and it looks like the <code>List.foldl</code> in the <code>timeit</code> is <em>also</em> specialized, thus interpreted. So the comparison might be fair after all? Sorry about the confusion!</p>",
        "id": 289847652,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658005497
    },
    {
        "content": "<p>Wait, specialization --&gt; #eval interprets instead of calling out to compiled code? wacky. I'll try out making it main in a sec</p>",
        "id": 289856225,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658019907
    },
    {
        "content": "<p>Okay, with the fold specialized and running it fully compiled, the timings are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fold</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">02</span><span class=\"n\">ms</span>\n<span class=\"n\">fold'</span> <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>which, yeah, about as expected</p>",
        "id": 289856536,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658020449
    },
    {
        "content": "<p>Okay, implementing it directly gives exactly the same performance as regular fold</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fold'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"kd\">@[specialize]</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">rest</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">rest</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.Mem.head</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hxs</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.Mem.tail</span> <span class=\"n\">_</span> <span class=\"n\">hxs</span><span class=\"o\">))</span>\n  <span class=\"n\">go</span> <span class=\"n\">l</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(And the generated IR is identical to foldl, albeit with a couple extra unused parameters that aren't being erased)</p>",
        "id": 289857590,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658022297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289856225\">said</a>:</p>\n<blockquote>\n<p>Wait, specialization --&gt; #eval interprets instead of calling out to compiled code? wacky. I'll try out making it main in a sec</p>\n</blockquote>\n<p>cc: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> ^ this is an interesting interaction of features</p>",
        "id": 289862994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658031184
    },
    {
        "content": "<p>And it's unfortunately a well-known issue: <a href=\"#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264881145\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/include.20lean.2Eh/near/264881145</a></p>",
        "id": 289867192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658038531
    },
    {
        "content": "<p>I don't see what we could do about it. Specialization generates new code, yes. Fortunately, it is now easier to run compiled code than ever.</p>",
        "id": 289871548,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658045485
    },
    {
        "content": "<p>That is, you could set <code>precompileModules</code> in your lakefile and then move the <code>#eval</code>s to a different file. No need to leave the editor anymore.</p>",
        "id": 289871611,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658045578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20of.20terms.20after.20erasure/near/289871611\">said</a>:</p>\n<blockquote>\n<p>That is, you could set <code>precompileModules</code> in your lakefile and then move the <code>#eval</code>s to a different file. No need to leave the editor anymore.</p>\n</blockquote>\n<p>Note that this still won't work if it is the <code>#eval</code> code that is doing the specializing.</p>",
        "id": 289872875,
        "sender_full_name": "Mac",
        "timestamp": 1658047429
    },
    {
        "content": "<p>Yeah, the problem here is specifically the fact that specialization only uses lemmas that have been generated in the current file, which means that they will move along with the <code>#eval</code></p>",
        "id": 289885917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658065660
    }
]