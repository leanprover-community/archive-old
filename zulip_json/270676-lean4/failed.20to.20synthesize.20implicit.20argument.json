[
    {
        "content": "<p>I have a problem trying to synthesize the transformer in this call</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toBase64</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">transformer</span> <span class=\"o\">:</span> <span class=\"n\">Into</span> <span class=\"n\">ByteArray</span> <span class=\"n\">I</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pad</span><span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">//</span> <span class=\"n\">r.size</span> <span class=\"bp\">=</span> <span class=\"n\">BLAKE3_OUT_LEN</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[defaultInstance]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Into</span> <span class=\"n\">ByteArray</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Into</span> <span class=\"n\">String</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toBase64</span> <span class=\"n\">b</span> <span class=\"n\">true</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Which leads to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">43</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"bp\">@</span><span class=\"n\">toBase64</span> <span class=\"n\">Blake3Hash</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.1002</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">true</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Blake3Hash</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"n\">Into</span> <span class=\"n\">ByteArray</span> <span class=\"n\">Blake3Hash</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">Blake3.lean</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span>   <span class=\"bp\">@</span><span class=\"n\">toBase64</span> <span class=\"n\">Blake3Hash</span> <span class=\"bp\">?</span><span class=\"n\">m.1018</span> <span class=\"n\">_uniq.1021</span> <span class=\"n\">true</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">Blake3</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"n\">Into</span> <span class=\"n\">ByteArray</span> <span class=\"n\">Blake3Hash</span>\n</code></pre></div>\n<p>Why can't this be synthesized and how can I annotate it to work?</p>",
        "id": 260864073,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1636493284
    },
    {
        "content": "<p>Does it work if you add <code>@[reducible]</code> to <code>Blake3Hash</code>?</p>",
        "id": 260870333,
        "sender_full_name": "Chris B",
        "timestamp": 1636496241
    },
    {
        "content": "<p>Also how is <code>Into</code> defined?</p>",
        "id": 260870856,
        "sender_full_name": "Chris B",
        "timestamp": 1636496518
    },
    {
        "content": "<p>Class parameters use <code>[]</code>, not <code>{}</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toBase64</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Into</span> <span class=\"n\">ByteArray</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 260872129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636497198
    },
    {
        "content": "<p>I didn't even notice that lol.</p>",
        "id": 260872733,
        "sender_full_name": "Chris B",
        "timestamp": 1636497535
    },
    {
        "content": "<p>Yes, I figured it out. This could be made clearer in the implicit argument section and the type class section.</p>",
        "id": 260877911,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1636500507
    },
    {
        "content": "<p>I'm getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">Tests.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span>   <span class=\"bp\">@</span><span class=\"n\">isValid</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.527</span> <span class=\"n\">args</span> <span class=\"n\">board</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.528</span> <span class=\"n\">args</span> <span class=\"n\">board</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">board</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">board</span> <span class=\"o\">:</span> <span class=\"n\">Board</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"n\">Nat</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">Tests.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span>   <span class=\"bp\">@</span><span class=\"n\">isValid</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.527</span> <span class=\"n\">args</span> <span class=\"n\">board</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.528</span> <span class=\"n\">args</span> <span class=\"n\">board</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">board</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"n\">board</span> <span class=\"o\">:</span> <span class=\"n\">Board</span>\n<span class=\"n\">Tests</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>for this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">A Sudoku board not validated</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Board</span> <span class=\"n\">where</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n  <span class=\"n\">elementBound</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">isMinMax</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one_le_size</span> <span class=\"n\">ax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bound</span> <span class=\"o\">}</span>\n  <span class=\"c1\">-- A rows first matrix</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">BNat</span> <span class=\"n\">elementBound</span><span class=\"o\">)</span>\n  <span class=\"n\">axArr</span> <span class=\"o\">:</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">w</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">board</span> <span class=\"o\">:</span> <span class=\"n\">Board</span> <span class=\"bp\">←</span> <span class=\"n\">parseFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FilePath.mk</span> <span class=\"s2\">\"board1.txt\"</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Board 1:</span><span class=\"se\">\\n</span><span class=\"s2\">{board}\"</span>\n    <span class=\"k\">match</span> <span class=\"n\">board.isValid</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"c1\">-- &lt;-- This is the error</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"board is valid\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"board not valid: {e}\"</span>\n    <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.eprintln</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"error: \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">e</span> <span class=\"c1\">-- avoid \"uncaught exception: ...\"</span>\n    <span class=\"n\">pure</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isValid</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Board</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Not pretty but a first draft</span>\n  <span class=\"c1\">-- let mut er := 1</span>\n  <span class=\"c1\">-- let mut ec := 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">valid</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"n\">Slice</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">BNat</span> <span class=\"n\">b.elementBound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b.getCell</span> <span class=\"o\">(</span><span class=\"n\">r.toBNat.get</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">b.CellRowIndex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.toBNat.get</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">b.CellColIndex</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">validateSlice</span> <span class=\"n\">cell</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">valid</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n        <span class=\"c1\">-- er := r</span>\n        <span class=\"c1\">-- ec := c</span>\n        <span class=\"n\">break</span>\n  <span class=\"k\">if</span> <span class=\"n\">valid</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throw</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid at\"</span>\n</code></pre></div>\n<p>But I can't tell which implicit variables it actually mentions. I've also added more explicit annotations but to no avail.</p>",
        "id": 271256694,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644402617
    },
    {
        "content": "<p>Can you try and create a MWE, its very hard to help from the code you have posted as there are multiple errors.<br>\nThere's a lot of things wrong with the snippet you posted (things aren't in the board namespace, functions not defined, fuctions in the wrong order) so its almost impossible to see the actual error you are seeing</p>",
        "id": 271269859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644410202
    },
    {
        "content": "<p>Also, what Lean commit?</p>",
        "id": 271269889,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644410227
    },
    {
        "content": "<p>My guess is that the references to <code>h</code> and <code>w</code> in <code>isValid?</code> are being auto-bound, making <code>isValid?</code> take three arguments. If you <code>#print isValid?</code> it should show the type and names of the implicit arguments</p>",
        "id": 271271354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644411102
    },
    {
        "content": "<p>If you use <code>b.h</code> and<code>b.w</code> instead then the error should go away</p>",
        "id": 271271472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644411149
    },
    {
        "content": "<p>Auto-implicits should only trigger in the definition header. I hope.</p>",
        "id": 271275861,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644413346
    },
    {
        "content": "<p>still, those two are definitely free variables. Perhaps there is a <code>variables {h w : Nat}</code> up above?</p>",
        "id": 271276223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644413505
    },
    {
        "content": "<p>It was because of a bad rewrite. I had forgotten to replace h and w with b.h and b.w as you can see in the for loops. I think we can have better error messages here.</p>",
        "id": 271303585,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644423781
    },
    {
        "content": "<p>Like if the error message had given the location and names of the erroneous meta variables this would have been much easier to see.</p>",
        "id": 271304213,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644423991
    },
    {
        "content": "<p>There isn't really anything to discuss here without an MWE. Or rather MNWE.</p>",
        "id": 271305088,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644424260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> has marked this topic as resolved.</p>",
        "id": 271349603,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644441904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> has marked this topic as unresolved.</p>",
        "id": 271350546,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644442390
    },
    {
        "content": "<p>Why should binding these unfilled values not cause an error? Is there any way to fill them when calling the function?</p>",
        "id": 271350688,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644442470
    },
    {
        "content": "<p>I think some code would really help <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 271355114,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644444708
    }
]