[
    {
        "content": "<p>We're getting an issue with <span class=\"user-mention\" data-user-id=\"515324\">@An Qi Zhang</span> where we have a definition that's marked as <code>partial</code> (because it is pretty complex to show termination) and recursive, but works by translating from one recursive type into a different recursive type. Lean won't compile it stating <code>failed to compile partial definition 'someFunction', failed to show that type is inhabited and non empty</code>.  Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar2</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">footobar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">foo1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bar.bar1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">foo2</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">footobar</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>In this MWE, if we remove <code>partial</code> Lean can figure out the WF recursion and is happy to accept it, but in our real case it's not that simple. I imagine then marking <code>footobar</code> as partial here shouldn't produce that error though, right?</p>",
        "id": 291307506,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659092212
    },
    {
        "content": "<p>This is due to the implementation of partial, what Lean will do internally is translate this into an <code>opaque footobar : Foo -&gt; Bar</code> with an <code>implementedBy</code> attribute pointing to an <code>unsafe def</code> that contains your actual code. in order for <code>opaque footobar</code> to be valid you have to provide proof that the type is inhabited, otherwise you are basically writing an axiom. So what you have to do here is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar2</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">footobar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">foo1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bar.bar1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">foo2</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">footobar</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 291308090,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659092664
    },
    {
        "content": "<p>The argument for why this is a correct error to do is that basically your <code>unsafe def</code> can do whatever it wants and magically produce terms of arbitrary type out of thin air with unsafe cast operations which could corrupt consistency of the system if the resulting type wasn't shown to be inhabited in a safe way.</p>",
        "id": 291309621,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659094050
    }
]