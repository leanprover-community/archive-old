[
    {
        "content": "<p>I'm trying to prove the following, but can't figure out how to combine <code>m₁</code> and <code>m₂</code> into a <code>m { a // p a ∧ q a }</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SatisfiesM.and</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SatisfiesM</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SatisfiesM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">m : Type u_1 → Type u_2</span>\n<span class=\"cm\">α : Type u_1</span>\n<span class=\"cm\">p q : α → Prop</span>\n<span class=\"cm\">inst✝ : Functor m</span>\n<span class=\"cm\">x : m α</span>\n<span class=\"cm\">m₁ : m { a // p a }</span>\n<span class=\"cm\">h₁ : Subtype.val &lt;$&gt; m₁ = x</span>\n<span class=\"cm\">m₂ : m { a // q a }</span>\n<span class=\"cm\">h₂ : Subtype.val &lt;$&gt; m₂ = x</span>\n<span class=\"cm\">⊢ SatisfiesM (fun a =&gt; p a ∧ q a) x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Any hints on how to proceed would be greatly appreciated :)</p>",
        "id": 310250078,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1668532939
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 310250335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533019
    },
    {
        "content": "<p>I don't think this is possible without having a <code>pmap</code> on your <code>m</code></p>",
        "id": 310251611,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/SatisfiesM.2Eand/near/310251611\">said</a>:</p>\n<blockquote>\n<p>I don't think this is possible without having a <code>pmap</code> on your <code>m</code></p>\n</blockquote>\n<p>What is <code>pmap</code>?</p>",
        "id": 310251945,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1668533453
    },
    {
        "content": "<p>For reference, this is <code>Option.pmap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310251980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533462
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Partial map. If `f : Π a, p a → β` is a partial function defined on `a : α` satisfying `p`,</span>\n<span class=\"sd\">then `pmap f x h` is essentially the same as `map f x` but is defined only when all members of `x`</span>\n<span class=\"sd\">satisfy `p`, using the proof to apply `f`.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 310252042,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533478
    },
    {
        "content": "<p>Would it suffice to have <code>m</code> be a <code>Monad</code> to get that?</p>",
        "id": 310252297,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1668533546
    },
    {
        "content": "<p>That wouldn't help still. Here's where it happens</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SatisfiesM.and</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulFunctor</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SatisfiesM</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SatisfiesM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- `&lt;$&gt;` is not able to know that we're doing this specifically for `x`!</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">id_map</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">comp_map</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 310252731,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533674
    },
    {
        "content": "<p>Note that I also had to have <code>LawfulFunctor</code> to prove the second goal</p>",
        "id": 310252768,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668533690
    }
]