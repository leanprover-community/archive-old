[
    {
        "content": "<p>I'm trying to provide <code>DecidableEq</code> for a nested/mutual inductive type by hand. Here is a fairly representative MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pair</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.deq</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X1</span><span class=\"o\">,</span> <span class=\"n\">X1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X2</span><span class=\"o\">,</span> <span class=\"n\">X2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X3</span><span class=\"o\">,</span> <span class=\"n\">X3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span><span class=\"n\">a₂</span><span class=\"o\">),</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">b₁</span><span class=\"o\">,</span><span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">deq</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">deq</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">])</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The problem \"on the surface\" is that wildcard pattern does not provide enough information to prove the <code>isFalse</code> case. I'd like to write the function without listing all pairs of constructors, as my real example has quite a lot. Ideally I'd like to define a boolean equality first and then prove that it decides equality in a lemma. How should I go about that?</p>\n<p>I've tried some variations on the matching (eg. match on the first argument then nest another match for the second) or using tactic mode to discharge the quadratic number of cases quickly, but none of my attempts feel really convincing.</p>",
        "id": 281414312,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1651829195
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pair</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.deq</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">b'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">exact</span> <span class=\"n\">isFalse</span> <span class=\"n\">X.noConfusion</span>\n  <span class=\"n\">case</span> <span class=\"n\">X1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">X2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">X3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">Pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n    <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">deq</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">deq</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">])</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>",
        "id": 281449951,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1651848487
    },
    {
        "content": "<p>Thanks! This seems like a great start. I just had to change the <code>let</code>-binding on <code>leanprover/lean4:nightly-2022-04-26</code> to uses <code>cases</code> (it didn't substitute <code>a</code>  and <code>b</code> in the goal). I'll have to see if I can generalize it to my actual example now.</p>",
        "id": 281457802,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1651851987
    },
    {
        "content": "<p>Changing the definition of <code>Pair</code> a bit makes it automatic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pair'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">X</span> <span class=\"c1\">-- fun a b =&gt; instDecidableEqX a b</span>\n\n<span class=\"kd\">@[matchPattern]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">X.Pair</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span><span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pair'</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n</code></pre></div>\n<p>The <code>matchPattern</code> attribute allows you to use <code>X.Pair</code> in match expressions as if it was an actual constructor.</p>",
        "id": 281471847,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1651859120
    },
    {
        "content": "<p>Yes I'm using <code>deriving</code> for most types, it's really handy. The real occurrence of nesting is with a list; there's some mutual definitions involved too, which makes it advanced enough that I wouldn't try to play with the Lean core either.</p>\n<p>I didn't know about <code>@[matchPattern]</code> though, and I have a use for it right now, so thanks a lot for mentioning it.</p>",
        "id": 281472216,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1651859326
    },
    {
        "content": "<p>When we implemented <code>deriving</code> for <code>DecidableEq</code>, we didn't have good support for well-founded recursion. We now have it, and we will eventually add support for nested and mutual inductive types at <code>Lean/Elab/Deriving/DecEq.lean</code>. It is not very high priority right now because Mathlib does not need it.</p>",
        "id": 281477134,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651861701
    },
    {
        "content": "<p>I pushed support for <code>casesOn</code> applications to the structural and well-founded recursion modules. This is useful for using recursion and <code>cases</code> tactic. For example, we don't need the generalizations steps above nor the <code>decreasing_by</code> anymore. It should work with any tactic that creates <code>casesOn</code> applications (e.g., <code>rcases</code>).<br>\n<a href=\"https://github.com/leanprover/lean4/blob/8c23bef39907e2599fb8ade149b7aa68ab4da311/tests/lean/run/casesRec.lean#L35-L49\">https://github.com/leanprover/lean4/blob/8c23bef39907e2599fb8ade149b7aa68ab4da311/tests/lean/run/casesRec.lean#L35-L49</a></p>",
        "id": 281507786,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651882631
    }
]