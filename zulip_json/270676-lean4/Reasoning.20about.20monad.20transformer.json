[
    {
        "content": "<p>How can I prove that \"If m is a valid monad, then (EitherT m e) is a valid monad\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"n\">pure_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pure</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">),</span>\n      <span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EitherT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">EitherT</span> <span class=\"n\">m</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- pure : a -&gt; m (a ⊕ e)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">H.pure</span> <span class=\"bp\">∘</span> <span class=\"n\">Sum.inl</span>\n  <span class=\"n\">bind</span> <span class=\"n\">ma</span> <span class=\"n\">amb</span> <span class=\"o\">:=</span> <span class=\"n\">H.bind</span> <span class=\"n\">ma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">amb</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H.pure</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QMonad</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">instMonadEitherT</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:=</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:=</span><span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure_l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">pure_r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 296948496,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1662187869
    },
    {
        "content": "<p>There is <code>LawfulMonad</code> class <a href=\"https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L46\">https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L46</a> that has these rules.</p>\n<p>And for example here is proof of lawfulness of <code>StateT</code> <a href=\"https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L298\">https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L298</a></p>",
        "id": 296949425,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662188756
    },
    {
        "content": "<p>Thanks. I'll try to figure it out.</p>",
        "id": 296949541,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1662188821
    },
    {
        "content": "<p>There is <code>ExceptT</code> which is essentially <code>EitherT</code><br>\n<a href=\"https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L101\">https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L101</a></p>\n<p>And the proof of its lawfulness<br>\n<a href=\"https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L163\">https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L163</a></p>",
        "id": 296950583,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1662189414
    },
    {
        "content": "<p>I just tried to prove the first one, <code>pure_l</code>, by just \"plugging in the definitions\" and using the <code>pure_l</code> rule of the original monad.</p>\n<p>I came up with the following behaviour which is kind of surprising for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- same as above, stripped for clarity</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QMonad</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">instMonadEitherT</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:=</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:=</span><span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure_l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">f</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">lhs</span>\n\n      <span class=\"c1\">-- Why is this block necessary?</span>\n      <span class=\"n\">change</span> <span class=\"n\">H.bind</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EitherT</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊕</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H.pure</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">H.pure</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EitherT</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊕</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H.pure</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">QMonad.pure_l</span><span class=\"o\">]</span>\n  <span class=\"n\">pure_r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If instances and notations are involved, I find it very difficult to use <code>unfold</code> or <code>whnf</code>, so I basically have to plug in the defintions manually using <code>change</code>. However, while the proof above works, I do not understand why the first <code>change</code> block is necessary. If I remove it,  the argument of the remaining <code>change</code> does not typecheck any more.</p>\n<p>Any ideas?</p>",
        "id": 296955071,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1662192133
    },
    {
        "content": "<p>I also find it difficult to use <code>rw</code>,<code> apply</code>,  <code>unfold</code>, etc. when instances and notations are involved.</p>\n<p>I'm not very sure why the first block is necessary, but the three properties can be proved as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QMonad</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">instMonadEitherT</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:=</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:=</span><span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure_l</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Q.pure_l</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">pure_r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n       <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">]</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">H.bind</span> <span class=\"n\">x</span> <span class=\"n\">pure</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Q.pure_r</span> <span class=\"n\">_</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">congr</span>\n          <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Q.pure_r</span><span class=\"o\">]</span>\n          <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n            <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ma</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n       <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Q.bind_assoc</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">bind_congr</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">a</span>\n          <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n          <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Q.pure_l</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 296957605,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1662193621
    },
    {
        "content": "<p>I read the proof of the lawfulness of <code>ExceptT</code> at <a href=\"https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L163\">https://github.com/leanprover/lean4/blob/37252e5fa7eff2ce938b7b63f72c0f40cab7e878/src/Init/Control/Lawful.lean#L163</a>, and found that in the proof there is <code>ExceptT.mk</code> and <code>ExceptT.run</code>, which seems to be useful. There also seems to be some tricks which I do not fully understand.</p>",
        "id": 296958120,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1662193876
    },
    {
        "content": "<p>When notation gets confusing, try <code>set_option pp.notation false</code>. It can help to clear things up.</p>\n<p>Also stylistic nitpick, the class <code>QMonad</code> should be declared as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and the instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">QMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">QMonad</span> <span class=\"o\">(</span><span class=\"n\">EitherT</span> <span class=\"n\">m</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>Only in rare cases it makes sense to ask for a class as an explicit argument, like <code>(inst : Monad m)</code>.</p>",
        "id": 296959739,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662194809
    }
]