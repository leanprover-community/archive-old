[
    {
        "content": "<p>I have almost managed to implement <code>if &lt;condition&gt; then &lt;convSeq on true&gt; else &lt;convSeq on false&gt;</code> notation for <code>conv</code> mode.</p>\n<p>I'm not quire there as I have to write  <code>if &lt;condition&gt;  | &lt;goal&gt; then &lt;convSeq on true&gt; else &lt;convSeq on false&gt;</code> i.e. I have to specify the whole goal <code>| &lt;goal&gt;</code>. This is because I internally call a rewrite on the whole goal: <code>rw [convIf_id &lt;condition&gt; &lt;goal&gt;]</code>.</p>\n<p>So I have two questions:</p>\n<ol>\n<li>What would be the easiest way to get rid of the necessity of specifying the goal?</li>\n<li>What would it take to implement match notation: <code>match &lt;term&gt; with | &lt;ctor 1&gt; =&gt; &lt;convSeq1&gt; ... </code> ? That is probably much, much harder. I do not even know where would I start.</li>\n</ol>\n<p>Working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">foo.pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">foo.neg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">convIf</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">convIf_id</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">convIf</span> <span class=\"n\">P</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">convIf</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">inst</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"if\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"then\"</span> <span class=\"n\">convSeq</span> <span class=\"s2\">\"else\"</span> <span class=\"n\">convSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">P</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">trueConv</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">falseConv</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">convSeq</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">convIf_id</span> <span class=\"bp\">$</span><span class=\"n\">P</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">]</span>\n             <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">trueConv</span><span class=\"o\">)</span>\n             <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">falseConv</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo.pos</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo.neg</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 296906256,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662158410
    },
    {
        "content": "<p>If anyone is interested I have managed to get <code>if ... then ... else ...</code> notation  in <code>conv</code> working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">convIf</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convIf.rhs</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">convIf</span> <span class=\"n\">P</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">convIf.id</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">convIf</span> <span class=\"n\">P</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">convIf</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">inst</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">conv_if</span><span class=\"o\">)</span> <span class=\"s2\">\"if\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>  <span class=\"s2\">\"then\"</span> <span class=\"n\">convSeq</span> <span class=\"s2\">\"else\"</span> <span class=\"n\">convSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Conv</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[tactic conv_if]</span>\n<span class=\"kd\">def</span> <span class=\"n\">convIfTactic</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">trueConv</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">falseConv</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n   <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n\n     <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">P</span> <span class=\"n\">none</span>\n     <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">convIf.rhs</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLhs</span><span class=\"o\">)]</span>\n     <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">convIf.id</span>  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLhs</span><span class=\"o\">)]</span>\n\n     <span class=\"n\">updateLhs</span> <span class=\"n\">t'</span> <span class=\"n\">h'</span>\n     <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span>\n       <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">convSeq</span><span class=\"bp\">|</span> <span class=\"n\">unfold</span> <span class=\"n\">convIf.rhs</span>\n                  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">trueConv</span><span class=\"o\">)</span>\n                  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">falseConv</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">foo.pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">foo.neg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo.pos</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo.neg</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 296963033,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662196370
    },
    {
        "content": "<p>Thank you I needed this!</p>",
        "id": 321270920,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673649432
    }
]