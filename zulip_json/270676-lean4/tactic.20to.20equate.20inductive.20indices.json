[
    {
        "content": "<p>I kind of need a tactic that automates the following: Suppose I have some inductive predicate with more than one constructor. Then, the predicate only eliminates into <code>Prop</code>.  But oftentimes, because one or more of the indices already determine the constructor, I can pin down the remaning indices as well, like in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Does anyone know a tactic (maybe also in Lean 3, so I could port it) that takes <code>p</code> as input and automates the first two lines of this proof? I think the equalities needed are actually generated in <code>Lean.Meta.Tactic.Cases</code>...<br>\n(I think I asked a similar question to <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> before...)</p>",
        "id": 225146225,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612437479
    },
    {
        "content": "<p>Note that if you start with <code>apply a</code>, you don't need to worry about elimination into <code>Prop</code> any more</p>",
        "id": 225157330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612444697
    },
    {
        "content": "<p>You also get a definition that's way easier to write proofs about</p>",
        "id": 225157407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612444752
    },
    {
        "content": "<p>Lean3, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">8</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Compare <code>#print foo1</code> with <code>#print foo2</code></p>",
        "id": 225157461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612444786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20to.20equate.20inductive.20indices/near/225157330\">said</a>:</p>\n<blockquote>\n<p>Note that if you start with <code>apply a</code>, you don't need to worry about elimination into <code>Prop</code> any more</p>\n</blockquote>\n<p>Well yea, the situation above is just a minimal example I came up with.</p>",
        "id": 225157605,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612444853
    },
    {
        "content": "<p>(I'm also not needing this to write a manual proof but to base other tactics on it)</p>",
        "id": 225157714,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612444915
    },
    {
        "content": "<p>This might be an example where the equality proof a bit more necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">5</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 225159008,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612445494
    },
    {
        "content": "<p>I'm not aware of a tactic that would do this for you, though as you say, <code>cases</code> does something similar. Afaict, the tactic you want wouldn't be super hard to write in principle, but it would be a fair amount of busywork.</p>",
        "id": 225190418,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1612458454
    },
    {
        "content": "<p>I guess I'll tackle it tomorrow, going off the def of <code>generalizeIndices</code></p>",
        "id": 225221273,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612472229
    },
    {
        "content": "<p>I could call it <code>clarifyIndices</code> or something, I think there might be quite some situations where it's useful</p>",
        "id": 225221417,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612472289
    },
    {
        "content": "<p>For future reference, I've implemented this now. The tactic \"clarifies\" free variable in the indices of instances of inductive propositions if there is exactly one matching constructor, or proves the target via <code>False</code> if there is no matching case  <a href=\"https://github.com/javra/iit/blob/main/IIT/ClarifyIndices.lean\">https://github.com/javra/iit/blob/main/IIT/ClarifyIndices.lean</a></p>",
        "id": 225463520,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1612703491
    },
    {
        "content": "<p>... and, in a similar fashion, here's an <code>inversion</code> tactic which, for a free variable of an inductive proposition, introduces the <code>Prop</code> sorted constructor fields, if there's a unique match: <a href=\"https://github.com/javra/iit/blob/main/IIT/PropInversion.lean\">https://github.com/javra/iit/blob/main/IIT/PropInversion.lean</a>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"mi\">9</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">9</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inversion</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 225977535,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1613043116
    },
    {
        "content": "<p>Can you come up with a more compelling example? Again, <code>cases</code> works fine there in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"mi\">9</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">9</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225978467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613043779
    },
    {
        "content": "<p>Ah, right, it's more useful in examples where you use the premise multiple times in the subsequent proof, and you want to avoid needing <code>cases x</code> later multiple times. The resulting proof term should be beta-equivalent to yours in the end.</p>",
        "id": 225999924,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1613054497
    }
]