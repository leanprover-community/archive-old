[
    {
        "content": "<p>I've got this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"bp\">¹</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-↑</span><span class=\"n\">a</span><span class=\"bp\">¹</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>Where the coercion happening here is of course to <code>Int</code>.  Now I have found a way to proof this via a definition massacre since a quick search didnt turn anything up in Mathlib that seemed useful but maybe someone here has ideas on how to prove this in a pretty way?</p>",
        "id": 275556006,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647454761
    },
    {
        "content": "<p>Does <code>norm_cast</code> help?  (On second thought, this won't do anything because we don't have negation on natural numbers. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)</p>",
        "id": 275556159,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647454811
    },
    {
        "content": "<p>In Lean 4 I guess you go via le_trans and 0?</p>",
        "id": 275556584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647454978
    },
    {
        "content": "<p>Ahhh that's smart, didn't think about that yeah, let me try</p>",
        "id": 275556958,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647455139
    },
    {
        "content": "<p>that worked <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 275557230,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647455260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 275557245,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647455266
    },
    {
        "content": "<p>This is also an option, moving the -a' to the other side first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-↑</span><span class=\"n\">a'</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Int.le_of_add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_le</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 275557350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647455298
    },
    {
        "content": "<p>Yeah I did consider moving it to the other side first but I didn't exactly see how to do it, thanks for that as well!</p>",
        "id": 275557518,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647455384
    },
    {
        "content": "<p>It would look nicer if the lemma <code>x ≤ y ↔ 0 ≤ y - x</code> was factored out.</p>",
        "id": 275558013,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647455621
    }
]