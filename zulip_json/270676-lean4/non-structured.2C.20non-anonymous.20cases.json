[
    {
        "content": "<p>In some situations, one wants to destruct a pair or other structure instance in the tactic goal, without wanting to indent. <code>have</code> or <code>let</code> don't do this, because they don't change the goal. Can we have a <code>cases</code> syntax that somehow allows for something like Lean 3's <code>cases  x with (mk a b)</code>?</p>",
        "id": 252630553,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1631196038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> <br>\nWe can add this feature. In the meantime, consider using the <code>renameI</code> tactic for renaming inaccessible names.<br>\nIf the <code>cases</code> creates a single goal, you can even have a macro that applies <code>cases</code> and <code>renameI</code>.</p>",
        "id": 252631240,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631196287
    },
    {
        "content": "<p>The <code>next</code> tactic is based on <code>renameI</code>. Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">xs.reverse</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ys</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">hys</span><span class=\"bp\">;</span> <span class=\"n\">decide</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">hys</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_lt_succ</span>\n  <span class=\"n\">next</span> <span class=\"n\">zs</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">hys</span><span class=\"bp\">;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 252631594,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631196442
    },
    {
        "content": "<p>Here is a <code>renameI</code> example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">renameI</span> <span class=\"n\">h1</span> <span class=\"n\">_</span> <span class=\"n\">h2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 252631836,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631196526
    },
    {
        "content": "<p>Ah, I see, that should make it simple to combine the two. Though at some point this will probably be covered by the port of <code>rcases</code> anyway. /cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 252633046,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1631197003
    },
    {
        "content": "<p>You can also use <code>cases x with | mk a b =&gt; ?_</code>, although it doesn't read very nicely</p>",
        "id": 252653180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631204204
    },
    {
        "content": "<p>This is a an okay solution in principle, unfortunately the Infoview doesn't update correctly in the line after? /cc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I thought that was one of the things you had fixed during TBA?</p>",
        "id": 254171697,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632212685
    },
    {
        "content": "<p>That doesn't look like code we would expect students to write, haha</p>",
        "id": 254171922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632212824
    },
    {
        "content": "<p>Not sure yet if this needs some special case</p>",
        "id": 254171998,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632212871
    }
]