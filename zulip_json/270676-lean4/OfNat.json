[
    {
        "content": "<p>How does <code>OfNat</code> work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bit</span> <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"bp\">|</span> <span class=\"n\">bit1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bit</span> <span class=\"mi\">0</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.bit0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bit</span> <span class=\"mi\">1</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.bit1</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bit</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works: instOfNatBit_1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- fails!?</span>\n</code></pre></div>\n<p>Setting option <code>trace.Meta.synthInstance</code> shows that <code>test</code> doesn't find <code>instOfNatBit_1</code> and only finds <code>hasOfNatOfCoe</code>, but the <code>#synth</code> finds both.</p>",
        "id": 228461088,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1614709916
    },
    {
        "content": "<p>The instance discrimination tree is not considering it in the <code>def test</code> case. Currently, you need <code>instance : OfNat Bit (noindex! 1) where ofNat := Bit.bit1</code> It is a known annoyance/gotcha and may be addressed.</p>",
        "id": 228462532,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1614710429
    },
    {
        "content": "<p>Makes sense. I need to get used to these discrimination trees... Thanks!</p>",
        "id": 228463501,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1614710769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> The section <code>Numerals</code> at <a href=\"https://leanprover.github.io/lean4/doc/typeclass.html\">https://leanprover.github.io/lean4/doc/typeclass.html</a> explains how <code>OfNat</code> works. The <code>OfNat</code> instances must be indexed with \"raw numerals\". A \"raw numeral\" is a numeral that is not wrapped with <code>OfNat.ofNat</code>.<br>\nYou can create raw numerals using the notation <code>natLit! n</code>. Here is your example with this notation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bit</span> <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"bp\">|</span> <span class=\"n\">bit1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bit</span> <span class=\"o\">(</span><span class=\"n\">natLit</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.bit0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bit</span> <span class=\"o\">(</span><span class=\"n\">natLit</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.bit1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">test0</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The indexing will work as expected in the example above. <br>\nThe <code>noindex!</code> trick that <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> suggested works too, but if you have instances for different numerals, it will impact performance because Lean will not be able to filter them out using the discrimination trees.</p>",
        "id": 228463880,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614710889
    },
    {
        "content": "<p>I see, with this <code>natLit!</code> version, <code>#synth OfNat Bit 1</code> fails because the <code>1</code> is actually <code>ofNat Nat (natLit! 1)</code>. Very interesting!</p>",
        "id": 228465406,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1614711458
    }
]