[
    {
        "content": "<p>Not sure if I'm missing something obvious, but doing #eval with an extern function is causing the language server to crash with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"k\">with</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">LeanColls.Array.new'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_LeanColls_Array_new___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_LeanColls_Array_new'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The extern symbol is <code>leancolls_array_new</code>. My repository is set up with  the C source in a folder at the top level; it is registered in Lake, and everything compiles fine with Lake</p>",
        "id": 281339528,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651775216
    },
    {
        "content": "<p>I've seen this before. It compiles with Lake and works when you run the binary. But it's not available to the language server.<br>\nI would expect an error but crashing the server seems a bit off</p>",
        "id": 281339824,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651775362
    },
    {
        "content": "<p>A workaround is allowing the Lean server to load custom compiled C code when restarted via some configuration in the <code>lakefile.lean</code>. I don't know if it's possible nor planned</p>",
        "id": 281340246,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651775565
    },
    {
        "content": "<p>The language server seems to fail elegantly, it does keep responding -- sorry for my wording</p>",
        "id": 281340281,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651775584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.23eval.20with.20native.20functions/near/281340246\">said</a>:</p>\n<blockquote>\n<p>A workaround is allowing the Lean server to load custom compiled C code when restarted via some configuration in the <code>lakefile.lean</code>. I don't know if it's possible nor planned</p>\n</blockquote>\n<p>Honestly I would also be fine with Lean just compiling &amp; using the Lean definition (i.e. ignoring the <code>extern</code> for the purposes of #eval)</p>",
        "id": 281340437,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651775647
    },
    {
        "content": "<p>Obviously that only works in cases where you have a Lean definition, but my current use case does have a Lean definition <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 281340525,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651775694
    },
    {
        "content": "<p><code>#eval</code> doesn't work but you can still prove things about it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"qq_c\"]</span> <span class=\"kd\">def</span> <span class=\"n\">qq</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">qq</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">qq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 281341472,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651776126
    },
    {
        "content": "<p>The following lakefile might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">lean_colls</span> <span class=\"o\">(</span><span class=\"n\">pkgDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">defaultFacet</span> <span class=\"o\">:=</span> <span class=\"n\">PackageFacet.sharedLib</span>\n  <span class=\"n\">moreLibTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cLibTarget</span> <span class=\"n\">pkgDir</span><span class=\"o\">]</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--load-dynlib=build/lib/LeanColls.so\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I agree there should be a built-in option in Lake to set this up.</p>",
        "id": 281342637,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651776709
    },
    {
        "content": "<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> woah, that worked! what is <code>defaultFacet</code> doing?</p>",
        "id": 281343119,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651776935
    },
    {
        "content": "<p>The <em>actually default</em> defaultFacet is <code>PackageFacet.bin</code>, and it instructs Lake to produce an executable from <code>Main.lean</code>. The <code>sharedLib</code> facet tells it to produce a shared library instead, which is then loaded into the server with <code>--load-dynlib</code>. (Btw, you can ctrl-click on the package configuration fields to find out what the options are.)</p>",
        "id": 281343577,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651777178
    },
    {
        "content": "<p>Does it work without changing <code>defaultFacet</code>? I can see the use case where I'm building code that will become an executable binary but still want to dynamically load compiled C code like that</p>",
        "id": 281344081,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651777385
    },
    {
        "content": "<p>I couldn't immediately get it to work in that mode. I think it may be because if you compile <em>just</em> the C binding code into a <code>.so</code>, it is missing some magic symbols that the Lean interpreter needs. It should definitely be possible though. One easy solution would be a <code>PackageFacet.binAndSharedLib</code>.</p>",
        "id": 281348381,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651779237
    },
    {
        "content": "<p>In particular, the full <code>LeanColls.so</code> includes the <code>l_LeanColls_Array_new___boxed</code> wrapper that the interpreter is looking for. It basically does reference-counting stuff and other boxing/unboxing before calling the function that is specified in <code>extern</code>, in this case <code>leancolls_array_new</code>. The interpreter cannot call the C code directly because of this unboxing layer.</p>",
        "id": 281349665,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651779871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/.23eval.20with.20native.20functions/near/281342637\">said</a>:</p>\n<blockquote>\n<p>I agree there should be a built-in option in Lake to set this up.</p>\n</blockquote>\n<p>With <a href=\"https://github.com/leanprover/lake/pull/47\">https://github.com/leanprover/lake/pull/47</a> it will work without hacks outside the Lean file containing the <code>extern</code> declaration</p>",
        "id": 281352097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1651781121
    }
]