[
    {
        "content": "<p>Closed issue <a href=\"https://github.com/leanprover/lean4/issues/201\">#201</a> suggests that  special elaboration strategies like Lean 3's <code>elab_as_eliminator</code> are no longer useful in Lean 4. What has changed?</p>",
        "id": 222066672,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1610108891
    },
    {
        "content": "<p>I've been working on porting some low-level Lean 3 code which makes strong use of term mode and custom recursors. Here is a trick to work around the absence of <code>elab_as_eliminator</code> in case someone else is struggling with similar issues.</p>\n<p>It looks like <code>*.recOn</code> and friends are always elaborated just like any other terms but in Lean 4 we can specify individual optional arguments by name. The motive in <code>*.recOn</code> and friends seems to always be called <code>motive</code> (rather than a nondescript name like <code>C</code> in Lean 3), so <code>*.recOn (motive := fun _ =&gt; _) ...</code> often works to simulate what <code>elab_as_eliminator</code> would do. Sometimes <code>fun _ =&gt; _</code> is not enough and a bit more of the motive needs to be specified but it's generally a good starting point.</p>\n<p>In tactic mode, it appears that the induction and cases tactics have gained some additional powers that may make elaboration strategies obsolete but I haven't explored this yet.</p>",
        "id": 222172560,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1610201368
    }
]