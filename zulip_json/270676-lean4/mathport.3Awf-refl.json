[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> To backport Lean4's behavior for <a href=\"https://github.com/dselsam/mathport/issues/20\">https://github.com/dselsam/mathport/issues/20</a> I think you only need to change these lines in Lean3: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/type_context.cpp#L715-L718\">https://github.com/leanprover-community/lean/blob/master/src/library/type_context.cpp#L715-L718</a> Some proofs will break though, of course.</p>",
        "id": 232776390,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617290816
    },
    {
        "content": "<p>I am trying to patch <a href=\"https://github.com/leanprover-community/lean/blob/master/tests/lean/run/fib_wrec.lean#L26\">https://github.com/leanprover-community/lean/blob/master/tests/lean/run/fib_wrec.lean#L26</a> after this change. What is best practice in lean3 for non-rfl-ing well-founded proofs?</p>",
        "id": 233865053,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617991071
    },
    {
        "content": "<p>Hah! I can't answer your question but I do know that <code>fib 5</code> is supposed to be 5 :-)</p>",
        "id": 233865690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617991285
    },
    {
        "content": "<p>I think you should be able to prove that one by something like <code>repeat {rw fib, simp}</code></p>",
        "id": 233865899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617991363
    },
    {
        "content": "<p>probably just delete the test</p>",
        "id": 233865945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617991383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Awf-refl/near/233865899\">said</a>:</p>\n<blockquote>\n<p>I think you should be able to prove that one by something like <code>repeat {rw fib, simp}</code></p>\n</blockquote>\n<p>Doesn't work.</p>",
        "id": 233866776,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617991694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Awf-refl/near/233865945\">said</a>:</p>\n<blockquote>\n<p>probably just delete the test</p>\n</blockquote>\n<p>Since we will need to propagate this change to mathlib as well, we ought to find a robust solution.</p>",
        "id": 233866918,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617991749
    },
    {
        "content": "<p>Probably best to allow <code>reflexivity (md := transparency.all)</code></p>",
        "id": 233867657,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617992085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Awf-refl/near/233866918\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Awf-refl/near/233865945\">said</a>:</p>\n<blockquote>\n<p>probably just delete the test</p>\n</blockquote>\n<p>Since we will need to propagate this change to mathlib as well, we ought to find a robust solution.</p>\n</blockquote>\n<p>This presumes that this kind of code is typical for mathlib, and I don't think it is. We do need to propagate the change to mathlib, but we will find out what the fallout is then and it's probably not anything like this fib test</p>",
        "id": 233922297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618026014
    },
    {
        "content": "<p>Generally theorems about well founded definitions are proved by <code>rw</code> or <code>simp</code> with the equation coming out of the wf definition, rather than deep rfl. Or at least that's my hypothesis that needs to be tested on mathlib</p>",
        "id": 233922341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618026095
    },
    {
        "content": "<p>I've tried porting mathlib to this change (<a href=\"https://github.com/leanprover-community/mathlib/issues/7264\">#7264</a>) and it's just really painful.</p>\n<ul>\n<li><code>dec_trivial</code> breaks if the expressions contains <code>fin</code></li>\n<li>Different ways of writing numerals in <code>fin</code> are no longer definitionally equal: <code>(1 : fin 2)</code>, <code>fin.succ (0 : fin 1)</code>, <code>((1 : ℕ) : fin 2)</code>, <code>⟨1, one_lt_two⟩</code> all mean something different.<br>\nThe <code>fin</code> problem is particularly problematic because they appear in a lot of places, and in types.</li>\n</ul>\n<p>The reason this breaks is because <code>nat.mod</code> no longer reduces in the kernel.  So my proposal would be to define <code>nat.mod</code> without well-founded recursion (and also <code>nat.div</code> because it's in the same file).  <a href=\"https://github.com/leanprover-community/lean/issues/570\">lean#570</a>  Opinions?</p>",
        "id": 236827285,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619786151
    },
    {
        "content": "<p>Seems like a good idea to me. There is an obvious bound on recursion depth, so a definition by recursion on fuel will work fine and will compute better in the kernel. <code>#eval</code> of course replaces the definition so it doesn't matter</p>",
        "id": 236827660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619786367
    },
    {
        "content": "<p>we may also want to introduce <code>acc</code> in type at some point</p>",
        "id": 236827789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619786428
    },
    {
        "content": "<p>In Lean 4, this works anyhow no matter how <code>Nat.mod</code> is defined because <code>Nat.mod</code> is magic in the kernel.</p>",
        "id": 236828779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619787041
    }
]