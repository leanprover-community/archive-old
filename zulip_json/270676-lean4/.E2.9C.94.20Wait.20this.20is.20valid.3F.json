[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> has marked this topic as resolved.</p>",
        "id": 279682328,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650548867
    },
    {
        "content": "<p>Yes, LSP supports that, and our LSP server highlights variables. However, in recursive declarations, the highlighting was incorrect because we use auxiliary free variables to elaborate them. I just pushed a fix for this. Now, these auxiliary declarations as not tagged as variables by our LSP server since they are \"morally\" constants.</p>",
        "id": 279695545,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650554820
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/4727fd68832d2d67220ecf9f363b379263b3f469\">https://github.com/leanprover/lean4/commit/4727fd68832d2d67220ecf9f363b379263b3f469</a></p>",
        "id": 279696018,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650555040
    },
    {
        "content": "<p>We also refined the <code>autoImplicit</code> feature. <a href=\"https://github.com/leanprover/lean4/commit/0b92195ec8c677c595fb899f836347f531864abc\">https://github.com/leanprover/lean4/commit/0b92195ec8c677c595fb899f836347f531864abc</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"c1\">-- Error at second `f`</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Error at second `Foo`</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279711812,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650561705
    }
]