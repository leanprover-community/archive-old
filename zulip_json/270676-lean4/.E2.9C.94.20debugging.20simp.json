[
    {
        "content": "<p>Is there a way to figure out what <code>simp</code> is using similarly to <code>squeeze_simp</code> in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">And.trivialRight</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I want to remove that non-terminal <code>simp</code></p>",
        "id": 266708092,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641228734
    },
    {
        "content": "<p>(If you know how to prove it with a proof term, it's welcome too, but I'd also like to know if it's possible to trace what <code>simp</code> is doing in Lean 4 at the moment)</p>",
        "id": 266708421,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641228908
    },
    {
        "content": "<p>It isn't exactly <code>squeeze_simp</code>, but you can enable tracing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 266708570,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1641228983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 266708815,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641229111
    },
    {
        "content": "<p>And a term mode proof is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">And.trivialRight</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">h</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>which can be shortened to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">And.trivialRight</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span>\n</code></pre></div>",
        "id": 266709027,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1641229203
    }
]