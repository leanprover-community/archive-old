[
    {
        "content": "<p>If I write a lemma as, say, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_0_plus</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">0</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Then I can rewrite with <code>Nat.add</code> (good!). If I write it instead as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_0_plus</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I _assume_ that the type class resolution is finding the same addition definition, but I'm wondering how I can, for lack of a better term, unfold the type class indirection so that I can rewrite with the actual definition.</p>",
        "id": 311451797,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1669058731
    },
    {
        "content": "<p>The whole tactic framework assumes that the normal form of <code>Nat.add 0 x</code> is <code>0 + x</code>, i.e. <code>@HAdd.hAdd ... 0 x</code>. So instead of unfolding the notation and reducing <code>Nat.add</code>, you should write lemmas like <code>0 + x = 0</code> and then <code>simp</code> with them. (Btw, unlike Coq and Agda, Lean's addition recurses on the right, so you can't rewrite with <code>Nat.add</code> in your example anyway.)</p>",
        "id": 311555508,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669110793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494227\">@Daniel Patterson</span> if really want to unfold it for some reason though, one thing you can do is use <code>set_option pp.raw true</code> which will show you what the instance actually is, and unfold it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.raw</span> <span class=\"n\">true</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- HAdd.hAdd.{0 0 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) _uniq.23954 : Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_0_plus</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">HAdd.hAdd</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">instHAdd</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Add.add</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">instAddNat</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Nat.add</span>\n</code></pre></div>\n<p>you see there's a couple of layers there of typeclasses but it indeed ends up at the same definition, which is why it's much better to just use these normal forms and avoid explicitly unfolding, unless you really need to, like <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> says.</p>",
        "id": 311602607,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669126680
    },
    {
        "content": "<p><code>dsimp only [(· + ·), Add.add]</code> is a bit shorter and doesn't need pp options to find out</p>",
        "id": 311603216,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669126848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Unfolding.20type.20class.20definitions.20in.20order.20to.20rewrite/near/311603216\">said</a>:</p>\n<blockquote>\n<p><code>dsimp only [(· + ·), Add.add]</code> is a bit shorter and doesn't need pp options to find out</p>\n</blockquote>\n<p>This is great -- any pointers as to what it's doing? :) </p>\n<p>(motivation for this is _teaching_ -- probably I'll just try to avoid typeclass syntax wholesale, but still experimenting).</p>",
        "id": 311609163,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1669128587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"494227\">Daniel Patterson</span> <a href=\"#narrow/stream/270676-lean4/topic/Unfolding.20type.20class.20definitions.20in.20order.20to.20rewrite/near/311609163\">said</a>:</p>\n<blockquote>\n<p>This is great -- any pointers as to what it's doing? :) </p>\n<p>(motivation for this is _teaching_ -- probably I'll just try to avoid typeclass syntax wholesale, but still experimenting).</p>\n</blockquote>\n<p>If you set up your editor properly (I imagine the Lean4 plugin for vs code does this directly) you can just hover over something and get a pop-up explanation, for this example: <a href=\"/user_uploads/3121/y3EZSCoK-FFoU7Ycqa2bcP2u/Screen-Shot-2022-11-23-at-10.37.55.png\">Screen-Shot-2022-11-23-at-10.37.55.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/y3EZSCoK-FFoU7Ycqa2bcP2u/Screen-Shot-2022-11-23-at-10.37.55.png\" title=\"Screen-Shot-2022-11-23-at-10.37.55.png\"><img src=\"/user_uploads/3121/y3EZSCoK-FFoU7Ycqa2bcP2u/Screen-Shot-2022-11-23-at-10.37.55.png\"></a></div><p>It tells us how <code>dsimp</code> will only use the definitions and then by passing the <code>(· + ·)</code> function Lean will use that function as a definition to simplify. (The <code>only</code> I imagine makes <code>dsimp</code> only use the definitions passed in square brackets to it, and not from a database (like <code>simp</code>), but I'm guessing there)</p>",
        "id": 311797026,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669200260
    },
    {
        "content": "<p>I suppose it would be nice if <code>rw</code> and perhaps even <code>unfold</code> accepted <code>(· + ·)</code> as well</p>",
        "id": 311806595,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669203706
    },
    {
        "content": "<p>Yeah, it was the use of <code>(· + ·)</code> that somewhat surprised me. That is syntax sugar for <code>fun x y =&gt; x + y</code> (as I understand it). I was trying to understand what it meant to do definitional simplification with that. I would have _thought_ some amount of notation unfolding would be needed, which is why I was asking for clarification!</p>",
        "id": 311864935,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1669222147
    }
]