[
    {
        "content": "<p>This will be a list of questions that came up while trying to write lean 4 tactics, macros and other backend things. The intent is to record that I had the question and what the answer was in hopes of improving documentation in the future.</p>\n<p>To parse 1D array literals, you need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Q: What is the analogue for 2D array literals (nested <code>sepBy</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">),</span> <span class=\"s2\">\"; \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">???</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>The rust syntax would be <code>$($elems,*);*</code> but that doesn't work.</p>",
        "id": 234103816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618203836
    },
    {
        "content": "<p>Q: How do you evaluate a syntax quotation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>doesn't work because it doesn't know what monad it's working in.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n<span class=\"k\">#print</span> <span class=\"n\">CommandElabM</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Syntax</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>doesn't work because <code>CommandElabM</code> doesn't implement <code>MetaEval</code>, whatever that means. What monads should I be using in <code>#eval</code>?</p>",
        "id": 234104018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618204037
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20under.20the.20hood/near/234104018\">A</a>: Use<code>TermElabM</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">])</span>\n<span class=\"c1\">-- (term#[_,;] \"#[\" [[(numLit \"1\") \",\" (numLit \"2\")] \";\" [(numLit \"3\") \",\" (numLit \"4\")]] \"]\")</span>\n</code></pre></div>\n<p>The only monads that can be used in <code>#eval</code> are those implementing <code>MetaEval</code>, namely <code>TermElabM</code> and <code>MetaM</code>, and those implementing <code>Eval</code>, namely <code>IO</code> and pure expressions.</p>",
        "id": 234104234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618204264
    },
    {
        "content": "<p>I just found out that using <code>quote</code> also works for evaluate a syntax quotation~</p>",
        "id": 234106050,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1618206185
    },
    {
        "content": "<p><code>quote</code> works but it does something else, I think. <code> `(1+1)</code> captures the <code>Syntax</code> corresponding to <code>1+1</code>, i.e. the AST of that expression, while <code>quote (1+1)</code> will return a syntax that represents the numeral 2</p>",
        "id": 234106986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618206969
    },
    {
        "content": "<p>(it's the equivalent of lean 3 <code>reflect</code>, while <code> `(..)</code> is the equivalent of lean 3 <code> ``(..)</code>)</p>",
        "id": 234107042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618207037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20under.20the.20hood/near/234103816\">said</a>:</p>\n<blockquote>\n<p>The rust syntax would be <code>$($elems,*);*</code> but that doesn't work.</p>\n</blockquote>\n<p>We use <code>$[...]</code> for that purpose because we already use <code>$(e)</code> for antiquotations with non-atomic terms.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">elemss</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I've <em>just</em> written a journal chapter on our antiquotations, which I should copy to the docs when I find time...<br>\nFor many (undocumented) examples, see also <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/StxQuot.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/StxQuot.lean</a>, which shows another way to run syntax quotations: <code>Unhygienic.run</code>, which as the name says can break hygiene because it does not depend on a name generator state.</p>",
        "id": 234116833,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618213592
    },
    {
        "content": "<p>How do you do ambiguity resolution in a macro?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">),</span> <span class=\"s2\">\"; \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(())</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ambiguous, possible interpretations</span>\n<span class=\"c1\">--   Unit.unit</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">--   #[1, 2]</span>\n</code></pre></div>\n<p>Is there a priority system, or a way to <code>throwError</code> in the macro_rules so that it doesn't get picked?</p>",
        "id": 234137346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618224386
    },
    {
        "content": "<p>Yes to both: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/macroPrio.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/macroPrio.lean</a> and <code>Macro.throwUnsupported</code></p>",
        "id": 234143911,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618228177
    },
    {
        "content": "<p>Nice to see you thinking about this <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . Julia and Numpy and Matlab have written tons of arguments on how to make <code>A * B</code> polymorphic and mathematically consistent. It turns out that Householder linear algebra notation can be quite tricky to get right because of historical and inconsistent definitions of what a vector means.<br>\nIn Julia, we found that making <code>#[1, 2, 3]</code> a RowVector and <code>#[ 1 2 3]</code> a column vector a neat solution to preserve the appropriate mathematical mappings when doing linear algebra operations.<br>\nThis 20 min talk by Dr. Jiahao Chen is a good summary of why it was hard to talk about and how it's been solved in Julia:<br>\n<a href=\"https://www.youtube.com/watch?v=C2RO34b_oPM\">https://www.youtube.com/watch?v=C2RO34b_oPM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"C2RO34b_oPM\" href=\"https://www.youtube.com/watch?v=C2RO34b_oPM\"><img src=\"https://i.ytimg.com/vi/C2RO34b_oPM/default.jpg\"></a></div><p>Concretely: distinguishing between a <code>row vector</code> and a <code>column vector</code> allowed us to have <code>A * B</code> when are different row or column vectors to have the appropriate dimentions or become a scalar when the dot product is applied. Lean should consider using that as well.</p>",
        "id": 234179138,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241078
    },
    {
        "content": "<p>I think that the <code>#[1 2 3]</code> syntax would be a bit tough in lean since that means application</p>",
        "id": 234179276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241125
    },
    {
        "content": "<p>You can use type synonyms instead in Lean</p>",
        "id": 234179301,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618241135
    },
    {
        "content": "<p>but lean 4 parsing is pretty much magic so I wouldn't consider anything impossible, if you really want to make it work</p>",
        "id": 234179465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241199
    },
    {
        "content": "<p>In Lean 3 mathlib we have <code>vector</code> which is \"1-dimensional\" and you can apply <code>row</code> or <code>col</code> to make it \"2-dimensional\" in the sense that you get a matrix of size <code>m x 1</code> or <code>1 x n</code>.</p>",
        "id": 234179509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618241227
    },
    {
        "content": "<p>Yeah, it's your call on syntax, but its the distinction that matters.</p>",
        "id": 234179538,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241239
    },
    {
        "content": "<p>Oh yeah that wouldn't be too bad, you just write <code>#[1, 2, 3].row</code> and <code>#[1, 2, 3].col</code></p>",
        "id": 234179714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241301
    },
    {
        "content": "<p>Oh that's interesting <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> .<br>\nDo you get a scalar from multiplying a <code>1 x n</code> vector by an appropriate <code> n x 1</code>?</p>",
        "id": 234179778,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241331
    },
    {
        "content": "<p>You would get a 1x1 matrix</p>",
        "id": 234179841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241358
    },
    {
        "content": "<p>Like Matlab!</p>",
        "id": 234179850,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241365
    },
    {
        "content": "<p>I don't think you should want to get around that, if you use strict types</p>",
        "id": 234179918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618241399
    },
    {
        "content": "<p>If row and col vectors are considered separate types distinct from matrices then you could get that to evaluate to a scalar</p>",
        "id": 234179925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241401
    },
    {
        "content": "<p>We have <code>dotproduct : vector -&gt; vector -&gt; scalar</code></p>",
        "id": 234180021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618241427
    },
    {
        "content": "<p>This is the neat comparison chart at the proper time-stamp<br>\n<a href=\"https://youtu.be/C2RO34b_oPM?t=913\">https://youtu.be/C2RO34b_oPM?t=913</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"C2RO34b_oPM\" href=\"https://youtu.be/C2RO34b_oPM?t=913\"><img src=\"https://i.ytimg.com/vi/C2RO34b_oPM/default.jpg\"></a></div>",
        "id": 234180174,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241491
    },
    {
        "content": "<p>That too. Is it necessary to distinguish row and col vectors?</p>",
        "id": 234180183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241494
    },
    {
        "content": "<p>I don't know that having a seriously overloaded <code>*</code> operator is worth it</p>",
        "id": 234180313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241541
    },
    {
        "content": "<p>I've always found the distinction artificial. But you certainly want functions to turn them into matrices.</p>",
        "id": 234180321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618241548
    },
    {
        "content": "<p>I'll need to think about how Lean does it.</p>",
        "id": 234180370,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241567
    },
    {
        "content": "<p>well lean doesn't do it right now so you can do what you like</p>",
        "id": 234180533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241624
    },
    {
        "content": "<p>I proposed a mathlib coercion of (1 x 1) matrices into scalars, but that was shut down</p>",
        "id": 234180708,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618241673
    },
    {
        "content": "<p>In general, in mathlib we use a lot more projection notation like <code>A.mul B</code> which gives some more flexibility to pick the right operation</p>",
        "id": 234180725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241682
    },
    {
        "content": "<p>really <code>a x b</code> where <code>unique a</code> and <code>unique b</code></p>",
        "id": 234180759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618241697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the super overloaded <code>*</code> in Julia is about half the superpower of the language:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"c\"># 331 methods for generic function \"*\":</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span> <span class=\"kt\">UInt128</span><span class=\"p\">}</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">908</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span> <span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">,</span> <span class=\"kt\">UInt128</span><span class=\"p\">,</span> <span class=\"kt\">UInt16</span><span class=\"p\">,</span> <span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">}</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">88</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">AbstractChar</span><span class=\"p\">,</span> <span class=\"kt\">AbstractString</span><span class=\"p\">},</span> <span class=\"n\">ss</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"n\">AbstractChar</span><span class=\"p\">,</span> <span class=\"kt\">AbstractString</span><span class=\"p\">}</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">strings</span><span class=\"o\">/</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">260</span>\n<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">UInt16</span><span class=\"p\">,</span> <span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">BigInt</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">GMP</span> <span class=\"n\">at</span> <span class=\"n\">gmp</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">539</span>\n<span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">},</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">BigInt</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">GMP</span> <span class=\"n\">at</span> <span class=\"n\">gmp</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">541</span>\n<span class=\"o\">...</span>\n\n<span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Float16</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Float16</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">float</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">330</span>\n<span class=\"p\">[</span><span class=\"mi\">328</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">516</span>\n<span class=\"p\">[</span><span class=\"mi\">329</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Number</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">promotion</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">397</span>\n<span class=\"p\">[</span><span class=\"mi\">330</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Number</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">promotion</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">322</span>\n<span class=\"p\">[</span><span class=\"mi\">331</span><span class=\"p\">]</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">560</span>\n</code></pre></div>",
        "id": 234180798,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241711
    },
    {
        "content": "<p>What's very powerful about Lean matrices is that indexing types need not be numeric types.</p>",
        "id": 234180849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618241727
    },
    {
        "content": "<p>How the hell do you know what anything means?</p>",
        "id": 234180985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241769
    },
    {
        "content": "<p>that looks like a nightmare</p>",
        "id": 234181001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241777
    },
    {
        "content": "<p>This getting a polymorphic <code>*</code> with type class resolution dispatching to the appropriate structured matrix multiplication operations is an algorithmic must for nueric linear algebra.</p>",
        "id": 234181016,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241781
    },
    {
        "content": "<p>What do you mean <code>know what anything means</code>?</p>",
        "id": 234181046,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241792
    },
    {
        "content": "<p>which of the 331 functions gets called when you write <code>x * y</code></p>",
        "id": 234181083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241807
    },
    {
        "content": "<p>julia is dynamically typed (or something) so it isn't even that easy to find out the types of <code>x</code> and <code>y</code></p>",
        "id": 234181205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241851
    },
    {
        "content": "<p>Same as in primary school:<br>\nMultiply 2 ints, apply the integer multiplication:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 234181229,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241861
    },
    {
        "content": "<p>okay, so which function is getting called there</p>",
        "id": 234181378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241906
    },
    {
        "content": "<p>even with the type signatures it's not that obvious to me</p>",
        "id": 234181436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241927
    },
    {
        "content": "<p>maybe it's 330? 331?</p>",
        "id": 234181492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618241947
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@which</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Int128</span><span class=\"p\">,</span> <span class=\"kt\">Int16</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int8</span><span class=\"p\">,</span> <span class=\"kt\">UInt128</span><span class=\"p\">,</span> <span class=\"kt\">UInt16</span><span class=\"p\">,</span> <span class=\"kt\">UInt32</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">,</span> <span class=\"kt\">UInt8</span><span class=\"p\">}</span> <span class=\"kp\">in</span> <span class=\"n\">Base</span> <span class=\"n\">at</span> <span class=\"n\">int</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">88</span>\n</code></pre></div>\n<p>The multiplication that applies to all concrete Integer types.</p>",
        "id": 234181518,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241960
    },
    {
        "content": "<p>It's like 5 characters to find out which specific method is being called.</p>",
        "id": 234181578,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618241985
    },
    {
        "content": "<p>How many instance of <code>has_mul</code> does mathlib have? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 234181591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618241991
    },
    {
        "content": "<p>well I wouldn't say mathlib is a shining beacon of hope here either</p>",
        "id": 234181768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242040
    },
    {
        "content": "<p>And user defined functions are easy to instrospect as well:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n<span class=\"n\">foo</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@which</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 234181841,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242066
    },
    {
        "content": "<p>At least we have widgets <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 234181845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618242068
    },
    {
        "content": "<p>remember when application turned out to be a binary operator on <code>nat</code>?</p>",
        "id": 234181860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242072
    },
    {
        "content": "<p>Here, <code>foo(x::Int, y::Int)</code> means: When you call <code>foo</code> and the first argument <code>x</code> is an <code>Int</code>, and the second argument <code>y</code> is an <code>Int</code>, do <code>x * y</code></p>",
        "id": 234182124,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242153
    },
    {
        "content": "<p>and it's trivial to add new methods for <code>foo</code> that dispatch on different types:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"si\">$x</span><span class=\"s\"> and </span><span class=\"si\">$y</span><span class=\"s\">\"</span>\n<span class=\"n\">foo</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">2</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"s\">\"a and b\"</span>\n</code></pre></div>",
        "id": 234182273,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242225
    },
    {
        "content": "<p>And now <code>foo</code> has 2 specific methods:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"c\"># 2 methods for generic function \"foo\":</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span> <span class=\"kp\">in</span> <span class=\"n\">Main</span> <span class=\"n\">at</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 234182359,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242251
    },
    {
        "content": "<p>I'm not a big fan of operator overloading, but lean has the ability to do these things</p>",
        "id": 234182413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20under.20the.20hood/near/234181205\">said</a>:</p>\n<blockquote>\n<p>julia is dynamically typed (or something) so it isn't even that easy to find out the types of <code>x</code> and <code>y</code></p>\n</blockquote>\n<p>Not to derail the discussion too much, but I find this a weird argument. If we define a type with a couple of constructors and a function pattern-matching on those:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">some_enum</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">some_enum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span> <span class=\"bp\">→</span> <span class=\"n\">some_enum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>would you complain it's hard to figure out which alternative of <code>foo</code> gets called?</p>",
        "id": 234182438,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618242279
    },
    {
        "content": "<p>We call it multiple dispatch in Julia-land, I think Lean people have it as type-class based resolution.</p>",
        "id": 234182444,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242283
    },
    {
        "content": "<p>Oh hey <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , long time no see! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 234182531,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> My issue is more around \"whole program type inference\" and things of that nature. I'm talking about the types, not the values. In that example <code>foo</code> isn't getting called so I'm not sure exactly how the parallel goes</p>",
        "id": 234182740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242378
    },
    {
        "content": "<p>FWIW, we don't do \"whole program type inference\" - Julia uses type inference for optimizations, but only at the function level. If it's not inside a function, we bail the analysis and run the program dynamically.</p>",
        "id": 234182941,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242456
    },
    {
        "content": "<p>Right, in julia it's more like dynamic typing + function overloading</p>",
        "id": 234183084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242491
    },
    {
        "content": "<p>which means that by looking at the code you don't know what the types of values are (sometimes you do, but you don't have to) and hence what functions are getting called</p>",
        "id": 234183196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242533
    },
    {
        "content": "<p>maybe I'm just jaded from C++</p>",
        "id": 234183287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20under.20the.20hood/near/234182740\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> My issue is more around \"whole program type inference\" and things of that nature. I'm talking about the types, not the values. In that example <code>foo</code> isn't getting called so I'm not sure exactly how the parallel goes</p>\n</blockquote>\n<p>Not sure I understand your distinction. Is it a type-level issue now?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">some_enum</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 234183340,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618242598
    },
    {
        "content": "<p>In that example, there is only one function <code>foo</code> getting called, so I can look it up and see the pattern match to find out how the values <code>x</code> and <code>y</code> get treated</p>",
        "id": 234183524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242647
    },
    {
        "content": "<p>Yeah PTSD from C++ is understandable <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , no worries.</p>",
        "id": 234183560,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242660
    },
    {
        "content": "<p>If <code>foo</code> was a generic function parameterized by a typeclass, I would have to look to the caller to find out what function is getting run</p>",
        "id": 234183616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242689
    },
    {
        "content": "<p>this can get quite involved</p>",
        "id": 234183631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242695
    },
    {
        "content": "<p>I've been tracing through lean 4 functions and the higher order arguments make your head spin, it's hard to find where the work gets done</p>",
        "id": 234183741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242732
    },
    {
        "content": "<p>fwiw in Julia we can always do <code>@edit foo(3,4)</code> and it will open up your editor to the specific line that implements that method.</p>",
        "id": 234183844,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618242784
    },
    {
        "content": "<p>You could kinda sorta do that with lean typeclasses if you <code>#check</code> the term and then look up the relevant typeclass</p>",
        "id": 234184046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242855
    },
    {
        "content": "<p>I don't think there is a unique place to look though, there could be lots of typeclasses involved in general</p>",
        "id": 234184125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242883
    },
    {
        "content": "<p>So this is really an issue with higher-order functions, not generic functions? Because as soon as you have first-class closures, you have arbitrary gotos.</p>",
        "id": 234184219,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618242912
    },
    {
        "content": "<p>well, there are higher order functions but mostly as continuations, they aren't terrible</p>",
        "id": 234184306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242943
    },
    {
        "content": "<p>The generics are tough though</p>",
        "id": 234184332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242958
    },
    {
        "content": "<p>because go to definition just isn't sufficient anymore</p>",
        "id": 234184397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618242970
    },
    {
        "content": "<p>The other thing, which is lean specific, is the connection between syntax -&gt; macro -&gt; elab, these are all scattered about and it's not obvious how the links are even connected to each other, let alone how to follow the link</p>",
        "id": 234184559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618243044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20under.20the.20hood/near/234116833\">said</a>:</p>\n<blockquote>\n<p>I've <em>just</em> written a journal chapter on our antiquotations, which I should copy to the docs when I find time...</p>\n</blockquote>\n<p>Here is the new section (4.1) in the meantime: <a href=\"https://arxiv.org/pdf/2001.10490.pdf\">https://arxiv.org/pdf/2001.10490.pdf</a></p>",
        "id": 237043782,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619951527
    }
]