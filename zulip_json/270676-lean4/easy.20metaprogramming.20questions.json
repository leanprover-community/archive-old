[
    {
        "content": "<p>As well as not being very good at programming, I'm also not very good at knowing how to learn a programming language; I am always amazed by people who say \"I read the source code\" -- I just don't know where to start. Forgive me then for the basic question.</p>\n<p>I've been reading the metaprogramming tutorial by Arthur and others and I've just about muddled through to the end. </p>\n<p>The code just <em>above</em> this URL <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/tactics.md#tweaking-the-context\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/tactics.md#tweaking-the-context</a> (i.e. the end of the section before that one) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"custom_assump_2\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">option_matching_expr</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.findDeclM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">declExpr</span> <span class=\"o\">:=</span> <span class=\"n\">decl.toExpr</span>\n      <span class=\"k\">let</span> <span class=\"n\">declType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">declExpr</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.isExprDefEq</span> <span class=\"n\">declType</span> <span class=\"n\">goalType</span>\n        <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">Option.some</span> <span class=\"n\">declExpr</span>\n        <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">Option.none</span>\n    <span class=\"k\">match</span> <span class=\"n\">option_matching_expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.closeMainGoal</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Lean.Meta.throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">custom_assump_2</span> <span class=\"n\">goal</span>\n        <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unable to find matching hypothesis of type ({goalType})\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(this is a walkthrough of building an <code>assumption</code> tactic) and right now I understand the code well enough to just about see what it does (although even that I'm not too clear on -- for example I don't really understand why the program is looping through <em>all</em> the local declarations and not just testing the first one and letting <code>option_matching_expr</code> be <code>none</code> if its type is not equal to the goal type). But I don't understand what's going on well enough to modify it. For example I am being told how to write \"if hypothesis type = goal type then close goal\" but I do not know how to write \"if hypothesis type is <code>a &lt;= _</code> and goal type is <code>a &lt;= _</code> then do <code>refine le_trans &lt;hypothesis&gt; _</code> \". How do I learn about how to ask specific more refined questions about expressions?</p>",
        "id": 289884028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658063622
    },
    {
        "content": "<p>Kevin, regarding looping on all of them, I think findDeclM? does exit early on the first match. If it can't find any, you get the none value.</p>",
        "id": 289884977,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658064663
    },
    {
        "content": "<p>So, this involves a trade-off. Let me try to express my thoughts.</p>\n<p>First, it's important to say that the current implementation of  <code>custom_assump_2</code> is quite more complicated than it could be (see <a href=\"#narrow/stream/270676-lean4/topic/Metaprogramming.20tutorial/near/285831687\">this version</a> by Sebastian). While it's more complicated, it also exposes more of the API, motivating the reader to do some digging.</p>\n<p>Now, the harsh part is that it contains some not-so-simple functional programming monadic tricks, which makes me feel like I'm betraying my own words from the intro chapter. And this makes me feel like simply sticking to Sebastian's implementation.</p>\n<p>The trick I'm referring to is exactly what Yakov pointed out. <code>findDeclM</code> does the iteration on the declarations available in the context, moving on while <code>none</code> is being returned by <code>fun decl: Lean.LocalDecl =&gt; ...</code> and stopping on the first occurrence of <code>some _</code>.</p>\n<p>A more refined question on the iterating expression <code>declType</code> could be made by replacing the <code>if ← Lean.Meta.isExprDefEq declType goalType ...</code> block by the check you want to perform</p>",
        "id": 289885395,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658065171
    },
    {
        "content": "<p>I'd love to have input from more people on the didactic of this part. It takes the reader to a walk and slowly introduces new mechanisms</p>",
        "id": 289885861,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658065567
    },
    {
        "content": "<p>I find that an inefficient tactic for a tutorial is not necessarily a bad idea.  I really enjoyed <a href=\"https://www.youtube.com/watch?v=-RQQxFVZnn4\">Rob Lewis' video</a> where he implements the assumption tactic, by going through the \"first attempt everyone would try\" and then golfing it.  It would be very instructive to have something similar, but I do not know how to do that in a book...</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-RQQxFVZnn4\" href=\"https://www.youtube.com/watch?v=-RQQxFVZnn4\"><img src=\"https://uploads.zulipusercontent.net/bd0cf2c97580f0ba298f730cb4186d8620b3a5d3/68747470733a2f2f692e7974696d672e636f6d2f76692f2d5251517846565a6e6e342f64656661756c742e6a7067\"></a></div>",
        "id": 289885998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658065780
    },
    {
        "content": "<p>Ah, I just realized that I didn't really address Kevin's question.<br>\nAs far as I know, we don't have pretty syntax sugar for matching expressions in Lean 4 as we do in Lean 3 yet. Gabriel wrote <a href=\"https://github.com/gebner/quote4\">quote4</a>, which does make things easier for that purpose but I don't know if there's a plan to make something like that available from Lean 4 core out of the box.</p>\n<p>The easiest answer I know is that we can use matches like in this example from the <code>MetaM</code> chapter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matchAndReducing</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">And</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 289886722,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658066685
    },
    {
        "content": "<p>To also answer the question about operating more precisely on <code>Expr</code>s here is my take that would work right now...given some patience:</p>\n<p>The easiest way for this would of course be to pattern match on expressions... Gabriel  has been working on a library that could enable this in the future and there was at least an idea to have it in a usable state by now but I don't think he got there yet (?)</p>\n<p>Either way, my approach for figuring out how things that I don't have an idea how they work are is: Try to think where someone might have implemented something similar already and dig in their stuff a bit. For example in this case we want to know how to ask more precise questions about <code>Expr</code>. My first thought would be to either:</p>\n<ol>\n<li>Check the API docs for <code>Expr</code> for a function that sounds like it might help you (either the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a> documentation page and search or just your editors autocompletion). In a fully developed programming language this should work out in the majority of cases but as we know Lean 4 isn't fully there yet so this requires a little more precise idea of what you want to do for now.</li>\n<li>I know that the <code>ring</code> tactic is already implemented in mathlib4 and that it somehow turns <code>Expr</code> into Horner form and operates on them so they must definitely figure out how the expressions look. And if we go to the source code here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean</a> we see that they have a type <code>HornerExpr</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean#L84\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean#L84</a> quite far up, now I would suspect that they have some function that turns an <code>Expr</code> into a <code>HornerExpr</code> (probably a monadic one because it can fail and what not but never the less such a function does probably exist) so we can grep for a line that contains these words: <code>grep \"def .*Expr.*HornerExpr\" Ring.lean</code> (of course one could also manually dig the file) and we'll find (among a few others): <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean#L382\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Ring.lean#L382</a> and at the core of the translation here we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.getAppFnArgs#doc\">docs4#Lean.Expr.getAppFnArgs</a> which: <code>Return the function (name) and arguments of an application.</code></li>\n</ol>\n<p>So what we have to do if we want to know whether we have a hyp of the fitting form is:</p>\n<ol>\n<li>Run the <code>getAppFnArgs</code> on the goal type, check whether the function name is <code>LE.le</code> and remember the first argument (the <code>a</code> in your example)</li>\n<li>Iterate over our hypothesis, run <code>getAppFnArgs</code> on them as well, check if the function name is <code>LE.le</code> and if their left hand side <code>isExprDefEq</code> to the <code>a</code> we remembered from step 1</li>\n<li>Apply the hypothesis with <code>refine</code> (where how to apply refine is again found by grepping and searching docs)</li>\n</ol>\n<p>And thus I end up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"kevin_refine_assump\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"c1\">-- familiar</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"c1\">-- step 1</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">Expr.getAppFnArgs</span> <span class=\"n\">goalType</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">LE.le</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"c1\">-- 4 arguments because of implicits</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">kevin_refine_assump</span> <span class=\"n\">goal</span> <span class=\"s2\">\"Goal doesn't match!\"</span>\n    <span class=\"c1\">-- familiar</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyp</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">ctx.findDeclM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">declType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">decl.toExpr</span>\n      <span class=\"c1\">-- step 2</span>\n      <span class=\"k\">match</span> <span class=\"n\">Expr.getAppFnArgs</span> <span class=\"n\">declType</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">LE.le</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a_hyp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">isExprDefEq</span> <span class=\"n\">a</span> <span class=\"n\">a_hyp</span> <span class=\"k\">then</span>\n          <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">decl</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">return</span> <span class=\"n\">none</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">match</span> <span class=\"n\">hyp</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">hyp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- step 3</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"n\">hyp.userName</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"n\">refineCore</span> <span class=\"n\">stx</span> <span class=\"bp\">`</span><span class=\"n\">kevin_refine_assump</span> <span class=\"n\">false</span> <span class=\"c1\">-- I found refineCore by looking for \"refine\" on the docs page</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">kevin_refine_assump</span> <span class=\"n\">goal</span> <span class=\"s2\">\"No matching hypothesis found!\"</span>\n</code></pre></div>\n<p>So the general approach to learn something in Lean (and generally in software world) that is not documented and you dont want to ask somebody about how it works is: Try to think of a thing that most likely already does the part you are stuck on and attempt to figure out how they did that.</p>",
        "id": 289886744,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658066720
    },
    {
        "content": "<p>I don't exactly understand what is being sought, but if one wants to match expressions, one powerful way in lean 4 is to create metavariables as holes and use <code>isDefEq</code>. In case this is of the nature intended, below is some code to match an expression for a natural number.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- natural number from expression built from `Nat.zero` and `Nat.succ` -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">exprNat</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span>  <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">sExp</span> <span class=\"bp\">←</span>  <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvar</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"n\">expr</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">sExp</span> <span class=\"n\">expr</span> <span class=\"k\">then</span>\n      <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n      <span class=\"k\">let</span> <span class=\"n\">prev</span> <span class=\"bp\">←</span> <span class=\"n\">exprNat</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">mvar</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">prev</span>\n    <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"n\">expr</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">Nat.zero</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{expr} not a Nat expression\"</span>\n\n<span class=\"c1\">-- test</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"nat!\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">exprNat</span> <span class=\"n\">e</span>\n  <span class=\"n\">return</span> <span class=\"n\">ToExpr.toExpr</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"mi\">123</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span>  <span class=\"c1\">-- 127</span>\n</code></pre></div>",
        "id": 289888992,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658069900
    },
    {
        "content": "<p>I should clarify the above is defensive to handle various cases. The line <code>Term.synthesizeSyntheticMVarsNoPostponing</code> can be ignored.</p>",
        "id": 289889039,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658070001
    },
    {
        "content": "<p>What is being sought is basic understanding! Thanks so much for all these pointers!</p>",
        "id": 289899743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658085298
    }
]