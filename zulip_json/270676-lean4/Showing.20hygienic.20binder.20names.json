[
    {
        "content": "<p>In the following example, both <code>x</code> and <code>l</code> are displayed identically in the type of <code>Foo.mk</code>, even with <code>pp.all</code> set to <code>true</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">nat_lit</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">Foo.mk</span>\n<span class=\"c1\">-- constructor Foo.mk.{u_1} : {x : Type u_1} → {l : List.{u_1} x} → @Eq.{1} Nat (@List.length.{u_1} x l) 3 → Foo.{u_1}</span>\n</code></pre></div>\n<p>However, <code>x</code> was introduced hygienically and as such cannot be used as an explicit argument name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- Foo.mk (_ : List.length [1, 2, 3] = List.length [1, 2, 3]) : Foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- error: invalid argument name 'x' for function 'Foo.mk'</span>\n</code></pre></div>\n<p>Is there any way to display the type of <code>Foo.mk</code> that shows the hygiene information e.g. displaying <code>x</code> as <code>x✝</code>?</p>",
        "id": 314154024,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1670288333
    },
    {
        "content": "<p>For a less contrived example, this behavior appears when the name of instance arguments is not specified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">Option.get</span><span class=\"bp\">!</span>\n<span class=\"c1\">-- def Option.get!.{u} : {α : Type u} → [inst : Inhabited.{u + 1} α] → Option.{u} α → α := ...</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Option.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- @Option.get! Nat : [inst : Inhabited Nat] → Option Nat → Nat</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Option.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">instInhabitedNat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- invalid argument name 'inst' for function 'Option.get!'</span>\n</code></pre></div>\n<p>In other words, from how the type is displayed, it is unclear whether or not the argument name can actually be used.</p>",
        "id": 314154461,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1670288540
    },
    {
        "content": "<p>I think this is another instance of <a href=\"https://github.com/leanprover/lean4/issues/375\">https://github.com/leanprover/lean4/issues/375</a></p>",
        "id": 314191861,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670316317
    }
]