[
    {
        "content": "<p>What's your opinion on CLI library design for Lean 4? I'm not aware of anything yet and would like to write a proper CLI for doc-gen4 but phase that out into a library.</p>\n<p>The designs I'm aware of generally are:</p>\n<ul>\n<li>C style <code>getopt</code> which seems pretty primitive here</li>\n<li>Rust <a href=\"http://clap.rs\">clap.rs</a> style struct + macro based approach</li>\n<li>Haskell's <code>optparse-applicative</code> <a href=\"https://hackage.haskell.org/package/optparse-applicative\">https://hackage.haskell.org/package/optparse-applicative</a> which is probably the most functionally designed out of these</li>\n<li>docopt <a href=\"http://docopt.org/\">http://docopt.org/</a> style doc string based ones</li>\n</ul>\n<p>Which of these do you think would be the best fit for lean? With the meta programming capabilities it should definitely not be an issue to implement either of these but I'm wondering what you think would be the most idiomatic to implement.</p>",
        "id": 272534724,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645296172
    },
    {
        "content": "<p>I think the clap macro approach makes more sense than the haskell applicative stuff. There isn't really a need for using higher order functions (with lots of sigils) to get a nice interface when a macro can more directly express the desired input syntax as well as being able to produce values in structs made just for the purpose, or even structs constructed by the macro itself like rust <a href=\"https://docs.rs/structopt/latest/structopt/\">structopt</a></p>",
        "id": 272535809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645297266
    },
    {
        "content": "<p>clap is a <em>really</em> full featured library though (to the point that you can usually see it in compile times). You probably want to trim that down a bit for an initial implementation</p>",
        "id": 272535897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645297352
    },
    {
        "content": "<p>Hmmm, so this would require attributes in field declarations right? This does however not seem possible right now so I guess a good point to start would be to try and add this to the structure elaborator? I'd imagine we could just tag the resulting projection functions with the attributes right?</p>",
        "id": 272536278,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645297791
    },
    {
        "content": "<p>No, it would use a custom syntax unrelated to <code>structure</code></p>",
        "id": 272536480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298013
    },
    {
        "content": "<p>although you can make it visually resemble a structure declaration if you want</p>",
        "id": 272536540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298048
    },
    {
        "content": "<p>although I should point out that field declarations can actually have attributes</p>",
        "id": 272536651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298169
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9oRi9CxmQZEAjzS42hbuHeEn/image.png\">image.png</a> my Lean does not seem to believe so.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9oRi9CxmQZEAjzS42hbuHeEn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9oRi9CxmQZEAjzS42hbuHeEn/image.png\"></a></div>",
        "id": 272536688,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645298243
    },
    {
        "content": "<p>well, at least syntactically</p>",
        "id": 272536696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298256
    },
    {
        "content": "<p>Ah yes, the error is from the elaborator.</p>",
        "id": 272536713,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645298273
    },
    {
        "content": "<p>which for a macro is really all you need</p>",
        "id": 272536721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298280
    },
    {
        "content": "<p>I believe attributes in that position are intended to work in the future, that error looks like a todo</p>",
        "id": 272536792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298347
    },
    {
        "content": "<p>In that case why make up a different macro language?</p>",
        "id": 272536864,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645298412
    },
    {
        "content": "<p>I'm not sure that structure + attributes is actually the best way to express requirements here. It's done that way in rust because it's a limitation of how attribute macros work</p>",
        "id": 272536974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298534
    },
    {
        "content": "<p>Do you have another \"vision\" for how one could express them then? If yes please do share</p>",
        "id": 272537009,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645298582
    },
    {
        "content": "<p>The macro is deprecated now for clap v3 but clap v2 includes a <code>clap_app!</code> macro which expresses the same information in a very different way. It ends up looking more like the help text</p>",
        "id": 272537095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298650
    },
    {
        "content": "<p>Here's an example of use from my project: <a href=\"https://github.com/digama0/mm0/blob/master/mm0-rs/src/main.rs#L5-L39\">https://github.com/digama0/mm0/blob/master/mm0-rs/src/main.rs#L5-L39</a></p>",
        "id": 272537120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645298692
    },
    {
        "content": "<p>See also <a href=\"https://github.com/mhuisi/lean4-cli\">https://github.com/mhuisi/lean4-cli</a></p>",
        "id": 272537141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645298736
    },
    {
        "content": "<p>From <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span></p>",
        "id": 272537208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645298780
    },
    {
        "content": "<p>Heh, seems like they updated it to work with Lake just 3 minutes ago, it appears we are being watched silently <span aria-label=\"eye\" class=\"emoji emoji-1f441\" role=\"img\" title=\"eye\">:eye:</span></p>",
        "id": 272537227,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645298811
    },
    {
        "content": "<p>It should be compatible with Lake now, I think.</p>",
        "id": 272537337,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1645298963
    },
    {
        "content": "<p>It doesn't have autocompletion yet and the final type conversion step isn't type safe. Those are two things that should likely still be improved upon.</p>",
        "id": 272537457,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1645299077
    },
    {
        "content": "<p>I also have something that I'm playing with. The idea is to annotate your <code>structure</code> declaration and use a <code>deriving</code> command to get the parser out. E.g.: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Flags</span> <span class=\"n\">where</span>\n  <span class=\"n\">traceCmd</span> <span class=\"o\">:</span>\n    <span class=\"n\">CmdLineFlag</span> <span class=\"s2\">\"-c\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"s2\">\"--cmd\"</span><span class=\"o\">)</span>\n    <span class=\"s2\">\"tracing: print command\"</span>\n  <span class=\"n\">traceSubst</span> <span class=\"o\">:</span>\n    <span class=\"n\">CmdLineFlag</span> <span class=\"s2\">\"-s\"</span> <span class=\"n\">none</span>\n    <span class=\"s2\">\"tracing: print module renaming\"</span>\n  <span class=\"n\">traceRoot</span> <span class=\"o\">:</span>\n    <span class=\"n\">CmdLineFlag</span> <span class=\"s2\">\"-r\"</span> <span class=\"n\">none</span>\n    <span class=\"s2\">\"tracing: print command\"</span>\n  <span class=\"n\">optValue</span> <span class=\"o\">:</span>\n    <span class=\"n\">CmdLineOpt</span> <span class=\"s2\">\"-t\"</span> <span class=\"n\">none</span> <span class=\"n\">Nat</span>\n    <span class=\"s2\">\"tracing: test option parsing\"</span>\n  <span class=\"n\">dryRun</span> <span class=\"o\">:</span>\n    <span class=\"n\">CmdLineFlag</span> <span class=\"s2\">\"-d\"</span> <span class=\"n\">none</span>\n    <span class=\"s2\">\"dry run: calculate parameters but perform no action\"</span>\n</code></pre></div>\n<p>Here is the library: <a href=\"https://github.com/cipher1024/lean4-prog/tree/main/cmd-line-args\">https://github.com/cipher1024/lean4-prog/tree/main/cmd-line-args</a></p>\n<p>It still needs some work and some cleaning up but any feedback would be welcome</p>",
        "id": 272552821,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645316713
    }
]