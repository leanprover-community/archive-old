[
    {
        "content": "<p>Ok, thanks. I think what I had in mind is not the intended way to use metadata then. I have found good alternatives now, though.</p>",
        "id": 258090653,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634587437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> has marked this topic as resolved.</p>",
        "id": 258090712,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634587444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Earlier, I didn't know how to briefly explain why I would want metadata to be preserved, but now I constructed a simple example to show why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">p_of_q</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pletfun</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">let_fun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ p (let_fun x := 0; x + 1)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_of_q</span>\n  <span class=\"c1\">-- ⊢ q ((fun x =&gt; x + 1) 0)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The <code>let_fun</code> notation gets removed when applying the lemma because unification removes the metadata.</p>",
        "id": 258352713,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1634730280
    },
    {
        "content": "<p>Thanks for sharing this example. I pushed a commit to address this issue.  We should not lose pretty-print hints in situations like this.<br>\nNote that, we are still losing the hints if we have to reduce terms at <code>isDefEq</code>.</p>",
        "id": 258461981,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634773406
    }
]