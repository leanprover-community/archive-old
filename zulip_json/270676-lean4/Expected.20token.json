[
    {
        "content": "<p>import Init.Data.ToString.Basic</p>\n<p>does anyone know why the second line here gives \"expected token\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Obj</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Mor</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),(</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Id</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Mul</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Mor</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),(</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:(</span><span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:(</span><span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">),</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Mor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:(</span><span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">),</span>\n<span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>",
        "id": 318662558,
        "sender_full_name": "Dean Young",
        "timestamp": 1672439274
    },
    {
        "content": "<p>What's the type of <code>Cat</code>?</p>",
        "id": 318663442,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672439863
    },
    {
        "content": "<p>You can't write pi types with a Π in Lean 4.</p>",
        "id": 318663671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672439999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Expected.20token/near/318663671\">said</a>:</p>\n<blockquote>\n<p>You can't write pi types with a Π in Lean 4.</p>\n</blockquote>\n<p>What is the correct way?</p>\n<p>or if there isn't one how could I make notation like</p>\n<p>notation Π =&gt; forall</p>",
        "id": 318663742,
        "sender_full_name": "Dean Young",
        "timestamp": 1672440020
    },
    {
        "content": "<p>Is <code>Cat</code> a <code>List</code>? An <code>Array</code>? <code>Prod</code>?<br>\nI think that's a syntax error. You can't separate elements like that by just using comma and a linebreak</p>",
        "id": 318663916,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672440196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Expected.20token/near/318663916\">said</a>:</p>\n<blockquote>\n<p>Is <code>Cat</code> a <code>List</code>? An <code>Array</code>? <code>Prod</code>?<br>\nI think that's a syntax error. You can't separate elements like that by just using comma and a linebreak</p>\n</blockquote>\n<p>I think it's Type 2</p>",
        "id": 318664098,
        "sender_full_name": "Dean Young",
        "timestamp": 1672440340
    },
    {
        "content": "<p>Oh, wait, now I understood what you're trying to do</p>",
        "id": 318664286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672440474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Expected.20token/near/318664286\">said</a>:</p>\n<blockquote>\n<p>Oh, wait, now I understood what you're trying to do</p>\n</blockquote>\n<p>What do you think? Probably most people would have used structure, but I'm a bit of a purist :)</p>",
        "id": 318664768,
        "sender_full_name": "Dean Young",
        "timestamp": 1672440750
    },
    {
        "content": "<p>I'm not sure. That's not the type of work that I usually do with Lean 4</p>",
        "id": 318665168,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672440995
    },
    {
        "content": "<p>You can use <code>∀</code> instead, or the Agda-style <code>(a : A) -&gt; B a</code>.</p>",
        "id": 318665613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672441259
    },
    {
        "content": "<p>Also, you can use spaces.</p>",
        "id": 318665631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672441267
    }
]