[
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/5baa1627139234c73571e71aad5bf9dedb7be26a/src/Init/Prelude.lean#L187-L197\">src/Init/Prelude.lean LL187-197</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">arbitrary</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Inhabited.default</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arbitrary</span>\n</code></pre></div>",
        "id": 221703676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881904
    },
    {
        "content": "<p>Why is <code>arbitrary</code> a constant? Won't this cause the definition to be inaccessible?</p>",
        "id": 221703714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881924
    },
    {
        "content": "<p>and why does the <code>Inhabited (α → β)</code> instance use the opaque <code>arbitrary</code>?</p>",
        "id": 221703747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881945
    },
    {
        "content": "<p>or am I completely misunderstanding how <code>constant</code> works?</p>",
        "id": 221703810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609881968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/270676-lean4/topic/arbitrary.20is.20a.20constant/near/221703714\">said</a>:</p>\n<blockquote>\n<p>Why is <code>arbitrary</code> a constant? Won't this cause the definition to be inaccessible?</p>\n</blockquote>\n<p>It is to make sure your proof doesn't depend on the actual value of <code>arbitrary</code>.</p>",
        "id": 221703842,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609881995
    },
    {
        "content": "<p>So the following code I wrote is not advisable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSortInhabited'</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">PUnit.unit</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 221704057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609882105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/270676-lean4/topic/arbitrary.20is.20a.20constant/near/221703810\">said</a>:</p>\n<blockquote>\n<p>or am I completely misunderstanding how <code>constant</code> works?</p>\n</blockquote>\n<p>A <code>constant</code> should be viewed as an opaque definition. It is like Lean 3 <code>[irreducible]</code>, but it is enforced by the Kernel too.</p>",
        "id": 221704066,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609882108
    },
    {
        "content": "<blockquote>\n<p>So the following code I wrote is not advisable?</p>\n</blockquote>\n<p>Not sure what you are trying to do. Happy to chat tomorrow on Zoom or <a href=\"http://gather.com\">gather.com</a> :)</p>",
        "id": 221704319,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609882239
    },
    {
        "content": "<p>I was porting <a href=\"https://github.com/leanprover-community/mathlib/blob/d1b2d6eb6d5934c086393014ce93258ff0fe5090/src/logic/basic.lean\">mathlib <code>logic.basic</code></a> whose L53 reads:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">sort.inhabited'</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">punit.star</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 221704655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609882410
    },
    {
        "content": "<p>Not sure where people use this instance, but the code you posted before is a faithful translation of L53.</p>",
        "id": 221705478,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609882833
    },
    {
        "content": "<p>I think we need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inhabited.default</span>\n</code></pre></div>\n<p>instead of <code>arbitrary</code>, because there are a decent number of uses of the inhabited instance that go via <code>default</code> instead of <code>arbitrary</code>, and expect it to be defined as the constant function (for example, we need the zero of the function space to be the constant function 0 and not some arbitrary thing). With the <code>arbitrary</code> definition on function types we get that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- this works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- this fails</span>\n</code></pre></div>",
        "id": 221722493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609894393
    },
    {
        "content": "<p>(In fact, I think that <code>arbitrary</code> is almost never used in mathlib. In most uses we <em>aren't</em> assuming that the value doesn't matter, although it seems fine to opt into this by using <code>arbitrary</code> explicitly.)</p>",
        "id": 221722710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609894632
    },
    {
        "content": "<p>arguably we are giving it different semantics... so maybe we can distinguish between <code>arbitrary</code> and <code>default</code>.</p>",
        "id": 221735372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609910851
    },
    {
        "content": "<p>As in having a separate typeclass for supplying <code>arbitrary</code> vs <code>default</code>? Perhaps we should call the former <code>nonempty</code>...</p>",
        "id": 221748375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609925802
    },
    {
        "content": "<p>Isn't one typeclass enough, combined with the rule \"never implement inhabited using arbitrary\"?</p>",
        "id": 221761981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609936504
    },
    {
        "content": "<p>Because then you can always fully unfold <code>default</code>, and it doesn't matter that <code>arbitrary</code> is implemented with <code>default</code> because you never unfold it</p>",
        "id": 221762050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609936563
    },
    {
        "content": "<p>Maybe also add <code>export Inhabited (default)</code></p>",
        "id": 221763172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609937503
    }
]