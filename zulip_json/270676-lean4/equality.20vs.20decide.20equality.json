[
    {
        "content": "<p>I have a goal as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>When I use <code>cases (decide (n%2) = 1)</code>,  I get two cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">false</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">false</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">case</span> <span class=\"n\">true</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 323036201,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674484752
    },
    {
        "content": "<p>This seems in line with the way cases works as a tactic. But how do  I get lean to recognize that <code>n%2</code> is either <code>1</code> or not <code>1</code>. More generally how should I close a goal like this with <code>decide</code> around an equality.</p>",
        "id": 323036517,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674484827
    },
    {
        "content": "<p>In lean 3 there is a lemma <code>cond_to_bool_mod_two</code> for <code>nat</code>. I can't find the lean4 equivalent</p>",
        "id": 323037085,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674484952
    },
    {
        "content": "<p>I think you need <code>cases h : decide (n%2 = 1)</code> if you want to avoid a dead end</p>",
        "id": 323038025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674485162
    },
    {
        "content": "<p>Does <code>split</code> help?</p>",
        "id": 323038804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674485348
    },
    {
        "content": "<p>If  I apply split, I am left with two goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ase</span> <span class=\"n\">h_1</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">case</span> <span class=\"n\">h_2</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>with no hypothesis to close them with.</p>",
        "id": 323039318,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674485480
    },
    {
        "content": "<p>The cases method gives me two hypothesis inside <code>decide</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">false</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">case</span> <span class=\"n\">true</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 323039628,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674485559
    },
    {
        "content": "<p>Did you use <code>split</code> <em>instead</em> of <code>cases</code>?</p>",
        "id": 323039834,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674485613
    },
    {
        "content": "<p>yes</p>",
        "id": 323040364,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674485729
    },
    {
        "content": "<p>I applied them separately</p>",
        "id": 323040499,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674485763
    },
    {
        "content": "<p>About <code>nat.cond_to_bool_mod_two</code>, in lean 3, it is found in <code>core/init.data.nat.lemmas</code> (source : <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/nat/lemmas.html#nat.cond_to_bool_mod_two\">lean 3 docs</a> ). Most of the lemmas here seem to have moved to <code>std.data.nat.lemmas</code> (source : <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Nat/Lemmas.html\">lean 4 docs</a> ), but  I cannot the lemma for <code>cond</code> in the lean4 version</p>",
        "id": 323041349,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674485978
    },
    {
        "content": "<p>Perhaps it's worth pointing out that <code>match decide (n % 2 = 1) with ...</code> is a very strange way to spell <code>if n % 2 = 1 then ...</code></p>",
        "id": 323041763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486049
    },
    {
        "content": "<p>So it's no surprise that you can't find many lemmas to help you</p>",
        "id": 323041830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486062
    },
    {
        "content": "<p>It is a mathport thing</p>",
        "id": 323043728,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674486469
    },
    {
        "content": "<p>In lean 3 there was a theorem with the goal <code>bitvec.to_nat (to_bool (n % 2 = 1) ::ᵥ nil) = n % 2</code><br>\nMathport changed that to <code>Bitvec.toNat (decide (n % 2 = 1) ::ᵥ nil) = n % 2</code></p>",
        "id": 323044177,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674486578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323041349\">said</a>:</p>\n<blockquote>\n<p>About <code>nat.cond_to_bool_mod_two</code>, in lean 3, it is found in <code>core/init.data.nat.lemmas</code> (source : <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/nat/lemmas.html#nat.cond_to_bool_mod_two\">lean 3 docs</a> ). Most of the lemmas here seem to have moved to <code>std.data.nat.lemmas</code> (source : <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Nat/Lemmas.html\">lean 4 docs</a> ), but  I cannot the lemma for <code>cond</code> in the lean4 version</p>\n</blockquote>\n<p>Then you should port this lemma to <code>Mathlib/Init/Data/Nat/Lemmas</code></p>",
        "id": 323046293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323039628\">said</a>:</p>\n<blockquote>\n<p>The cases method gives me two hypothesis inside <code>decide</code></p>\n</blockquote>\n<p>This looks like you're at least still at a provable goal.</p>",
        "id": 323046984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487239
    },
    {
        "content": "<p>Found a <a href=\"https://github.com/leanprover-community/mathlib4/blob/60f31f1099e2302376812924ac30a0fff322ae8d/Mathlib/Init/Data/Nat/Lemmas.lean#L290\">note</a> in the file here</p>",
        "id": 323048960,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674487692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323046984\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323039628\">said</a>:</p>\n<blockquote>\n<p>The cases method gives me two hypothesis inside <code>decide</code></p>\n</blockquote>\n<p>This looks like you're at least still at a provable goal.</p>\n</blockquote>\n<p>I am not familiar with how to use something inside a <code>decide</code> call yet.</p>",
        "id": 323050144,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674487982
    },
    {
        "content": "<p>throwing<code>rw</code> or <code>simp</code> at it doesn't seem to work.</p>",
        "id": 323050321,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488021
    },
    {
        "content": "<p>There should be a lemma that says <code>decide p = true</code> iff <code>p</code></p>",
        "id": 323050330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488023
    },
    {
        "content": "<p>I am not sure that can be an <code>iff</code>. not all propositions are decidable.</p>",
        "id": 323050641,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488095
    },
    {
        "content": "<p>Is there a reason you can't do <code>by_cases h : x % 2 = 1,</code> like the Lean3 proof?</p>",
        "id": 323050642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488095
    },
    {
        "content": "<p>The original proof is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bits_to_nat_to_list</span><span class=\"o\">],</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bits_to_nat</span> <span class=\"n\">add_lsb</span> <span class=\"n\">list.foldl</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cond_to_bool_mod_two</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 323051232,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488232
    },
    {
        "content": "<p>I'll try <code>by_cases</code> now</p>",
        "id": 323051290,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488250
    },
    {
        "content": "<p>okay that works.</p>",
        "id": 323051722,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488339
    },
    {
        "content": "<p>Why did you write your own proof instead of using the mathport one?</p>",
        "id": 323052671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488608
    },
    {
        "content": "<p>If you're porting stuff, you should use the mathport output</p>",
        "id": 323052712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488619
    },
    {
        "content": "<p>I did. The last step was the issue. I am just replacing that one</p>",
        "id": 323053137,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488724
    },
    {
        "content": "<p><code>simp [cond_to_bool_mod_two]</code> does nothing in lean4 because the lemma doesn't exist yet.</p>",
        "id": 323053219,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488756
    },
    {
        "content": "<p>Btw, I put this in lean4, because the question of how to handle equalities inside <code>decide</code> seemed like it might be of general interest.</p>",
        "id": 323053952,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674488941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323050641\">said</a>:</p>\n<blockquote>\n<p>I am not sure that can be an <code>iff</code>. not all propositions are decidable.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=decide_eq_true_iff#doc\">docs4#decide_eq_true_iff</a></p>",
        "id": 323054296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674489034
    },
    {
        "content": "<p>Ah okay, so there is a Decidable instance on <code>p</code> and it works.</p>",
        "id": 323054502,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674489091
    },
    {
        "content": "<p>This one is on <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> now (Data.Bitvec.Core)</p>",
        "id": 323057489,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674489863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323053219\">said</a>:</p>\n<blockquote>\n<p><code>simp [cond_to_bool_mod_two]</code> does nothing in lean4 because the lemma doesn't exist yet.</p>\n</blockquote>\n<p>Right, so at that point you should find <code>cond_to_bool_mod_two</code> in mathport rather than looking for a different proof!</p>",
        "id": 323063842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674491427
    },
    {
        "content": "<p>It was not there.<br>\n<span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323048960\">said</a>:</p>\n<blockquote>\n<p>Found a <a href=\"https://github.com/leanprover-community/mathlib4/blob/60f31f1099e2302376812924ac30a0fff322ae8d/Mathlib/Init/Data/Nat/Lemmas.lean#L290\">note</a> in the file here</p>\n</blockquote>\n<p>This theorem is a todo</p>",
        "id": 323064150,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674491513
    },
    {
        "content": "<p>Great, sounds like now is the time to do it</p>",
        "id": 323064635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674491638
    },
    {
        "content": "<p>Should just need copying in from <a href=\"https://github.com/leanprover-community/lean3port/blob/44b836ec48e1882103ab9ac0fea4dce2bf402797/Leanbin/Init/Data/Nat/Lemmas.lean#L1502-L1508\">https://github.com/leanprover-community/lean3port/blob/44b836ec48e1882103ab9ac0fea4dce2bf402797/Leanbin/Init/Data/Nat/Lemmas.lean#L1502-L1508</a></p>",
        "id": 323064872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674491690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323064872\">said</a>:</p>\n<blockquote>\n<p>Should just need copying in from <a href=\"https://github.com/leanprover-community/lean3port/blob/44b836ec48e1882103ab9ac0fea4dce2bf402797/Leanbin/Init/Data/Nat/Lemmas.lean#L1502-L1508\">https://github.com/leanprover-community/lean3port/blob/44b836ec48e1882103ab9ac0fea4dce2bf402797/Leanbin/Init/Data/Nat/Lemmas.lean#L1502-L1508</a></p>\n</blockquote>\n<p>Got it. done and pushed.</p>",
        "id": 323067086,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674492286
    },
    {
        "content": "<p>It actually breaks the proof. Do I need to add the @[simp] attribute to the theorem.</p>",
        "id": 323069459,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674492860
    },
    {
        "content": "<p>That did not fix it either.</p>",
        "id": 323069787,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674492952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the proof is broken again.</p>",
        "id": 323071252,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674493300
    },
    {
        "content": "<p>Broken in what way? The cache isn't available yet so I can't try it myself</p>",
        "id": 323071465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674493343
    },
    {
        "content": "<p><code>simp [Nat.cond_decide_mod_two]</code> does nothing</p>",
        "id": 323072639,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674493635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323072639\">said</a>:</p>\n<blockquote>\n<p><code>simp [Nat.cond_decide_mod_two]</code> does nothing</p>\n</blockquote>\n<p>This is the lean4 equivalent of lean3's <code>simp [cond_to_bool_mod_two],</code></p>",
        "id": 323072782,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674493681
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323073049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674493758
    },
    {
        "content": "<p><code>simp [Nat.cond_decide_mod_two, -Bool.cond_decide]</code> works</p>",
        "id": 323073457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674493870
    },
    {
        "content": "<p>Remember to add a porting note when you use that, because it's not what mathlib3 had</p>",
        "id": 323073522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674493888
    },
    {
        "content": "<p>changing <code>Init.Data.Nat.Lemmas</code> leads to a very long build time. Is it because lake is rebuilding all downstream packages ?</p>",
        "id": 323074490,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674494143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20vs.20decide.20equality/near/323073457\">said</a>:</p>\n<blockquote>\n<p><code>simp [Nat.cond_decide_mod_two, -Bool.cond_decide]</code> works</p>\n</blockquote>\n<p>Doesn't work.<br>\nI still have the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 323074786,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674494221
    },
    {
        "content": "<p>Sorry, I keep getting tricked by the error appearing on the <code>by</code> line</p>",
        "id": 323074912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674494254
    },
    {
        "content": "<p>The proof I had plugged in was working. Should I plug it back in?</p>",
        "id": 323075021,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674494282
    },
    {
        "content": "<p>No, I think it would be better to understand why the old proof doesn't work</p>",
        "id": 323075363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674494380
    },
    {
        "content": "<p>You could work that our by using <code>simp?</code> in mathlib3 and 4, and seeing what changed</p>",
        "id": 323075427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674494395
    },
    {
        "content": "<p>This works I think?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bits_toNat_decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bitvec.toNat</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bitsToNat_toList</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bitsToNat</span> <span class=\"n\">addLsb</span> <span class=\"n\">List.foldl</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cond_decide_mod_two</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">Bool.cond_decide</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 323075580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674494422
    },
    {
        "content": "<p>yeah that works</p>",
        "id": 323076053,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674494555
    }
]