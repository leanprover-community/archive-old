[
    {
        "content": "<p>Suppose that after a good amount of work, I come up with a type T. Now that I've done all of my conceptual work, I can have it evaluated by Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>Suppose that this gives me 6 in the output. Now that I know that T = 6, what is the name of the proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span>\n</code></pre></div>\n<p>i.e. I used Lean to calculate something on its own... surely I can now access some proof p : T = 6 by some means or another?</p>",
        "id": 313356209,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669922235
    },
    {
        "content": "<p>Maybe there is some kind of simplify T and a proof p : T = simplify T?</p>\n<p>Mostly I need this \"simplify\" to work well with arithmetic and inductive types.</p>",
        "id": 313356815,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669922433
    },
    {
        "content": "<p>The question doesn't exactly make sense to me, you are evaluating a type, types cannot be evaluated, they are...well types.</p>",
        "id": 313364355,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669924753
    },
    {
        "content": "<p>Its not always true that if Lean can <code>#eval</code> something then there is a clear way to prove it. Sometimes <code>rfl</code> will work as the proof, but this is not guarenteed.</p>",
        "id": 313365213,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669924949
    },
    {
        "content": "<p>Yeah 6 is not a type, I think you mean a term</p>",
        "id": 313366952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669925505
    },
    {
        "content": "<p>The <code>native_decide</code> tactic will allow you to prove equalities if <code>#eval</code> can evaluate them to <code>true</code>. It is discouraged though because it significantly increases the scope of the things you have to trust</p>",
        "id": 313375340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669928134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">T</span> <span class=\"c1\">-- 6</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail :(</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fail :(</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span> <span class=\"c1\">-- ok :)</span>\n</code></pre></div>",
        "id": 313375618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669928218
    },
    {
        "content": "<p>I’m surprised this works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fib</span> <span class=\"mi\">30</span>  <span class=\"c1\">-- 832040</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">fib30</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">30</span> <span class=\"bp\">=</span> <span class=\"mi\">832040</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313375966,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669928344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"559197\">@Kind Bubble</span> I get the sense that you have an application in mind that would require both lean to compute things and generate proofs of its computations.  While this is likely theoretically possible in some sense in Lean (as Lean is implemented in Lean) it is not the most natural thing to do.  So it might be good to give the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> of what you are trying to do.</p>",
        "id": 313380292,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669929854
    }
]