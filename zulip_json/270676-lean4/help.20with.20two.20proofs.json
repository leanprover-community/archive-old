[
    {
        "content": "<p>I'm stuck with these two proofs, which I believe shouldn't bee too hard <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nCan someone help me?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">IntervalsSeq</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IntervalsSeq</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">allPositive</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">allPositive</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">delta</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">appendPosOfPos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hps</span> <span class=\"o\">:</span> <span class=\"n\">s.allPositive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hps'</span> <span class=\"o\">:</span> <span class=\"n\">s'.allPositive</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">allPositive</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.append_nil</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hps</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h'</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deltaAppendEqSumDeltas</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">delta</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">delta</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">delta</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IntervalsSeq</span>\n</code></pre></div>\n<p>Any hint is appreciated <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 266733309,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641241807
    },
    {
        "content": "<p>The first is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">appendPosOfPos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hps</span> <span class=\"o\">:</span> <span class=\"n\">s.allPositive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hps'</span> <span class=\"o\">:</span> <span class=\"n\">s'.allPositive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">allPositive</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.nil_append</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hps'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">allPositive</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">allPositive</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hps</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">case</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hps.left</span>\n    <span class=\"n\">case</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hps.right</span>\n</code></pre></div>",
        "id": 266734575,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641242715
    },
    {
        "content": "<p>Yeah, easier to do induction on s rather than s'</p>",
        "id": 266734620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641242753
    },
    {
        "content": "<p>Thanks!!! Indeed, so much simpler!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">appendPosOfPos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">Intervals</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hps</span> <span class=\"o\">:</span> <span class=\"n\">s.allPositive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hps'</span> <span class=\"o\">:</span> <span class=\"n\">s'.allPositive</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">allPositive</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.nil_append</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hps'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hps.1</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">hps.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 266735347,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641243146
    },
    {
        "content": "<p>My stab at the second would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deltaAppendEqSumDeltas</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalsSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">delta</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">delta</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">delta</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.nil_append</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.zero_add</span><span class=\"o\">]</span> <span class=\"c1\">-- Mathlib4 proof</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HAppend.hAppend</span><span class=\"o\">,</span> <span class=\"n\">Append.append</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"c1\">-- a bit ugly</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>although as noted the happend stuff is a bit ugly and can most likely be done better.</p>",
        "id": 266735681,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641243372
    },
    {
        "content": "<p>I remember being stuck for a while on reverse(reverse L))=L when I was learning Lean. I mean, I'm a professor of mathematics and this is a triviality -- how hard can it be!</p>",
        "id": 266735927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641243535
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 266735949,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641243551
    },
    {
        "content": "<p>Somehow the issue is that as humans we have an intuitive understanding of things and sometimes don't think recursively at all. It's like a+b=b+a is obvious for naturals because we have a geometric understanding of addition as well as a recursive one, and we just use the geometric one here.</p>",
        "id": 266736136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641243626
    },
    {
        "content": "<p>In cases like this, I would always suggest to describe how your function operates on the different inductive constructors. That's part of building the API</p>",
        "id": 266736594,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641243952
    },
    {
        "content": "<p><code>append</code> is a \"derived\" function that has different branches depending on the constructors of at least one of the arguments. So of course it is easier to prove things about it if you have proofs about what happens to the inductive constructors.</p>",
        "id": 266736709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641244006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20two.20proofs/near/266736594\">said</a>:</p>\n<blockquote>\n<p>In cases like this, I would always suggest to describe how your function operates on the different inductive constructors. That's part of building the API</p>\n</blockquote>\n<p>Do you know an example of that?</p>",
        "id": 266736957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641244153
    }
]