[
    {
        "content": "<p>In the following code, Lean fails to find an instance despite it being able to for a more complex type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Para</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Para</span> <span class=\"n\">ϕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Para</span> <span class=\"n\">ϕ'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ϕ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ϕ'</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Para</span> <span class=\"n\">ϕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>            <span class=\"c1\">-- instParaType</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>        <span class=\"c1\">-- instParaTypeForAll</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- instParaTypeList</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Para</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span>       <span class=\"c1\">-- failed to synthesize  Para fun α =&gt; List α</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">instParaTypeList</span> <span class=\"n\">_</span> <span class=\"n\">instParaType</span> <span class=\"c1\">-- Para fun α =&gt; List α</span>\n</code></pre></div>\n<p>Running with <code>set_option trace.Meta.synthInstance.instances true</code> reveals that no candidate instances are found for the fourth resolution. From digging further, I was able to determine that the root of the issue lies in the <code>DiscrTree</code>.<br>\nWhen converting the type to a key, the type is eta-reduced in <code>whnfDT</code>, leading to the key path <code>const Para, const List</code> for the last example while the first three examples result in <code>const Para, other</code>. The three instances all have the key path <code>const Para, other</code>, so the first three examples succeed, while the last one fails.<br>\nIt turns out in this particular case, the problem can be remedied by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Para</span> <span class=\"n\">ϕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Para</span> <span class=\"n\">no_index</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>but there is no obvious indication for the cases in which this is necessary.<br>\nIs this a known limitation of the typeclass system? Is it possible to modify the system to correctly resolve this case?</p>",
        "id": 305562227,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1666458364
    }
]