[
    {
        "content": "<p>What order does <code>simp</code> use to compare terms? For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sdf</span> <span class=\"o\">:</span> <span class=\"n\">Nat.add</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.add</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> =&gt; @Eq.{1} Nat</span>\n<span class=\"cm\">  (@HAdd.hAdd.{0, 0, 0} Nat Nat Nat (@instHAdd.{0} Nat instAddNat)</span>\n<span class=\"cm\">    (@HAdd.hAdd.{0, 0, 0} Nat Nat Nat (@instHAdd.{0} Nat instAddNat) a b) c)</span>\n<span class=\"cm\">  (@HAdd.hAdd.{0, 0, 0} Nat Nat Nat (@instHAdd.{0} Nat instAddNat)</span>\n<span class=\"cm\">    (@HAdd.hAdd.{0, 0, 0} Nat Nat Nat (@instHAdd.{0} Nat instAddNat) b c) a)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>why will it consider <code>@HAdd.hAdd.{0, 0, 0} Nat Nat Nat (@instHAdd.{0} Nat instAddNat</code>, which is a non-whnf, to be simpler than <code>Nat.add</code>?</p>",
        "id": 294521395,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661072078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> has marked this topic as resolved.</p>",
        "id": 294521813,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661072356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> has marked this topic as unresolved.</p>",
        "id": 294521819,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661072362
    },
    {
        "content": "<p>This makes me worried because I think that in some cases this will make the tactic <code>rw</code> fail to work. Consider this example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Semigroup</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">S.carrier</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">S.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">S.carrier</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Morphism</span> <span class=\"o\">(</span><span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"n\">S1</span> <span class=\"bp\">→</span> <span class=\"n\">S2</span>\n  <span class=\"n\">resp_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S1</span><span class=\"o\">,</span> <span class=\"n\">mor</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mor</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mor</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">Morphism</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.mor</span>\n</code></pre></div>\n<p>To prove the following theorem, the simplest way seems to involve unfolding of <code>HMul.hMul</code> and <code>Mul.mul</code> (I consier this necessary because otherwise <code>rw [S2.mul_assoc]</code> won't work)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Morphism</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f.resp_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HMul.hMul</span><span class=\"o\">,</span> <span class=\"n\">Mul.mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S2.mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 294522463,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661072820
    },
    {
        "content": "<p>If we refuse to unfold <code>HMul.hMul</code> and <code>Mul.mul</code>, then the simplest way I can come up with is to enter the conversion tactic mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Morphism</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.resp_mul</span><span class=\"o\">]</span>\n               <span class=\"n\">_</span>          <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.resp_mul</span><span class=\"o\">]</span>\n               <span class=\"n\">_</span>          <span class=\"bp\">=</span> <span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n                               <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n                                  <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">whnf</span>\n                                  <span class=\"n\">args</span> <span class=\"n\">whnf</span> <span class=\"n\">whnf</span>\n               <span class=\"n\">_</span>          <span class=\"bp\">=</span> <span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">S2.2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S2.mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 294522641,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1661072958
    },
    {
        "content": "<p>The direction of simp rewrites is a library design question. We generally prefer <code>a + b</code> over <code>Nat.add a b</code> because the former will have more theorems about it: for example we would have an associativity theorem <code>add_assoc</code> which applies to any additive semigroup rather than just <code>Nat</code>.</p>",
        "id": 294573565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661107358
    }
]