[
    {
        "content": "<p>In the following example, the definition of <code>Path.unmap</code> fails  with the terse message: </p>\n<blockquote>\n<p>error: failed to compile pattern matching, constructor expected<br>\nf a<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span></p>\n</blockquote>\n<p>The Lean 3 analogue of this example works fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Path</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">tl</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">Tree.branch</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">tr</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">Tree.branch</span>  <span class=\"n\">tl</span> <span class=\"n\">tr</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">map</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Tree.map</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tree.leaf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.branch</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tree.branch</span> <span class=\"o\">(</span><span class=\"n\">Tree.map</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tree.map</span> <span class=\"n\">tr</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Path.map</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">t.map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Path.term</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.term</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Path.left</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.left</span> <span class=\"o\">(</span><span class=\"n\">tl.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tr.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Path.map</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Path.right</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.right</span> <span class=\"o\">(</span><span class=\"n\">tl.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tr.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Path.map</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Path.unmap</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">t.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Path.term</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.term</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.branch</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span><span class=\"o\">,</span> <span class=\"n\">Path.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.left</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"o\">(</span><span class=\"n\">Path.unmap</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Tree.branch</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span><span class=\"o\">,</span> <span class=\"n\">Path.right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Path.right</span> <span class=\"n\">tl</span> <span class=\"n\">tr</span> <span class=\"o\">(</span><span class=\"n\">Path.unmap</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">map</span>\n</code></pre></div>\n<p>This is testing the limits of Lean's pattern matching abilities. Indeed, I was pleasantly surprised when the original Lean 3 version of this worked smoothly. In any case, the Lean 4 error message isn't very detailed and doesn't help much with fixing the code. I don't know if there is a workaround I could use, or if this is work in progress. Thoughts?</p>",
        "id": 221918760,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1610009517
    },
    {
        "content": "<p>Option <code>trace.Meta.Match</code> shows that Lean 4 does correctly fill in the blanks. I haven't yet found an option to trace where the compiler fails.</p>",
        "id": 221943813,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1610027800
    },
    {
        "content": "<p>Thanks. Pushed a fix, and added your example to the test suite.</p>",
        "id": 222025397,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610070105
    },
    {
        "content": "<p>Thank you Leo!</p>",
        "id": 222052556,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1610098762
    }
]