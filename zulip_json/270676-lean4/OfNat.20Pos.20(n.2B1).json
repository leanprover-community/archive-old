[
    {
        "content": "<p>In the <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/pos.html\">functional programming in lean tutorial</a>, the instance of OfNat for positive numbers is implemented as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">natPlusOne</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.one</span>\n      <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">natPlusOne</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"n\">natPlusOne</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Based on this example, I'm trying to define an inductive type like Nat, but which only contains numbers that are greater than a certain number n.</p>\n<p>For example, (5 : GNat 3) should work, while (2 : GNat 3) should not work.</p>\n<p>Here is how I implemented it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">GNat</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">GNat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">GNat</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">natPlusM</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">GNat</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">GNat.zero</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">GNat.succ</span> <span class=\"o\">(</span><span class=\"n\">natPlusM</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"n\">natPlusM</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">GNat</span> <span class=\"mi\">3</span><span class=\"o\">)</span>   <span class=\"c1\">-- failed to synthesisze instance OfNat (GNat 3) 5</span>\n</code></pre></div>\n<p>Why do I get this error message? Is there another way to make this work?</p>",
        "id": 318857514,
        "sender_full_name": "Mike Schneeberger",
        "timestamp": 1672579294
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">GNat.succ</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">GNat.zero</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">GNat</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 318871006,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1672585947
    },
    {
        "content": "<p>Fantastic! That looks even more elegant than the solution from the tutorial. Thanks!</p>",
        "id": 318881014,
        "sender_full_name": "Mike Schneeberger",
        "timestamp": 1672591183
    }
]