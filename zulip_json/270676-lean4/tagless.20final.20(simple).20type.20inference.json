[
    {
        "content": "<p>We discussed this a few months back, but I am only now circling back.</p>\n<p>I am experimenting with Oleg Kiselyov's paper <a href=\"https://okmij.org/ftp/tagless-final/course/lecture.pdf\">Typed Tagless Final Interpreters</a> and have a simple question.</p>\n<p>Consider the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NodeTree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Attr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Node</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Markup</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">NodeTree</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"bp\">.</span><span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"bp\">.</span><span class=\"n\">Node</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"bp\">→</span> <span class=\"n\">repr</span> <span class=\"bp\">.</span><span class=\"n\">Node</span>\n  <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">repr</span> <span class=\"bp\">.</span><span class=\"n\">Attr</span>\n  <span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">repr</span> <span class=\"bp\">.</span><span class=\"n\">Node</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Markup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">.</span><span class=\"n\">Node</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This works and I am able to create multiple representations for the same <code>anHtmlDoc</code>.</p>\n<p>My question is whether Lean is/should be supposed to infer that <code>anHtmlDoc</code> is a <code>Markup</code> of kind <code>.Node</code>, since it seems a bit redundant and effectively unused here. It would be great if this could work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But the above gives me the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">NodeTree</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Markup</span> <span class=\"n\">m</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">NodeTree</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>\n<p>If I a follow what the error suggests and remove the resulting type (I guess this would be an even better, simpler solution):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But, unfortunately, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Markup</span> <span class=\"bp\">?</span><span class=\"n\">m.195</span>\n</code></pre></div>",
        "id": 285382928,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654691364
    },
    {
        "content": "<p>You can move the type annotation into the body</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 285384397,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654692104
    },
    {
        "content": "<p>Thanks, I did no know about <code>show _ from</code>!</p>\n<p>So, in theory, there could be various ways of achieving this, but only the last two actually work today.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">.</span><span class=\"n\">Node</span> <span class=\"o\">:=</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">anHtmlDoc</span> <span class=\"o\">[</span><span class=\"n\">Markup</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"n\">elem</span> <span class=\"s2\">\"tag\"</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">attr</span> <span class=\"s2\">\"name1\"</span> <span class=\"s2\">\"vv\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">elem</span> <span class=\"s2\">\"c1\"</span><span class=\"o\">,</span> <span class=\"n\">text</span> <span class=\"s2\">\"some content\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Are the plans to make the first two also typecheck in the future?</p>",
        "id": 285390641,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654694875
    }
]