[
    {
        "content": "<p>Consider the use of macros:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mlir_type</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"i\"</span> <span class=\"n\">numLit</span> <span class=\"o\">:</span> <span class=\"n\">mlir_type</span> <span class=\"c1\">-- this rule causes problems!</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">MLIRTy</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[mlir_type|\"</span> <span class=\"n\">mlir_type</span> <span class=\"s2\">\"]\"</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">mlir_type</span><span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">MLIRTy.int</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tyfoo</span> <span class=\"o\">:</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">mlir_type</span><span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">42</span><span class=\"o\">]</span>\n<span class=\"k\">#print</span> <span class=\"n\">tyfoo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.forM</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\", \"</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Surprisingly to me, the line <code>xs.forM $ fun i =&gt; do</code> creates a compile error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo.lean</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"sc\">'['</span><span class=\"o\">,</span> <span class=\"sc\">'_'</span><span class=\"o\">,</span> <span class=\"sc\">'{'</span><span class=\"o\">,</span> <span class=\"sc\">'|'</span><span class=\"o\">,</span> <span class=\"sc\">'⦃'</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">or</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>I don't understand why the elaborator attempts to elaborate the <code>i</code> at <code>fun i =&gt; ..</code>. As far as I can tell, the <code>i</code> is not followed b a <code>numLit</code>, and thus the rule should not fire?</p>\n<p>I'm on a recent nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">$</span> <span class=\"bp\">~/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">988</span><span class=\"n\">e43d2b4a2</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 256718106,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633688541
    },
    {
        "content": "<p>Writing <code>\"i\"</code> in a syntax declaration will register it as a keyword, i.e., it will no longer be parsed as an identifier.  In this case however, there's no need to make it a keyword, you can also match on identifiers: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/nonReserved.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/nonReserved.lean</a></p>",
        "id": 256718694,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633688894
    },
    {
        "content": "<p>Mmmh, apparently writing <code>&amp;\"i\" numLit</code> doesn't help here either.  But <code>ident numLit</code> works.</p>",
        "id": 256719022,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633689079
    },
    {
        "content": "<p>Thank you for the pointer! Why doesn't <code>&amp;\"i\"</code> work, though? I'm trying to build a mental model of how the macro system works!</p>",
        "id": 256719444,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633689309
    },
    {
        "content": "<p>Syntax categories declared with <code>declare_syntax_cat</code> do not dispatch rules starting with <code>&amp;\"stuff\"</code> correctly. To do this, a syntax category must have its <code>LeadingIdentBehavior</code> set to <code>LeadingIdentBehavior.both</code> or <code>LeadingIdentBehavior.symbol</code>, but <code>declare_syntax_cat</code> doesn't allow you to do this (at least last I checked). Here's a variant of <code>declare_syntax_cat</code> that exposes the option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">syntaxCatWithUnreservedTokens</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"declare_syntax_cat' \"</span> <span class=\"n\">ident</span>\n    <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"allow_leading_unreserved_tokens\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"force_leading_unreserved_tokens\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"c1\">-- Copied from Lean/Elab/Syntax.lean</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">declareSyntaxCatQuotParser</span> <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">Name.str</span> <span class=\"n\">_</span> <span class=\"n\">suffix</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">catName</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">quotSymbol</span> <span class=\"o\">:=</span> <span class=\"s2\">\"`(\"</span> <span class=\"bp\">++</span> <span class=\"n\">suffix</span> <span class=\"bp\">++</span> <span class=\"s2\">\"|\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">catName</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">quot</span>\n    <span class=\"c1\">-- TODO(Sebastian): this might confuse the pretty printer, but it lets us reuse the elaborator</span>\n    <span class=\"k\">let</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Term.quot</span>\n    <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n      <span class=\"kd\">@[termParser]</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.ParserDescr</span> <span class=\"o\">:=</span>\n        <span class=\"n\">Lean.ParserDescr.node</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">kind</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">Lean.Parser.maxPrec</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.binary</span> <span class=\"bp\">`</span><span class=\"n\">andthen</span> <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.symbol</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">quotSymbol</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.binary</span> <span class=\"bp\">`</span><span class=\"n\">andthen</span>\n              <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.unary</span> <span class=\"bp\">`</span><span class=\"n\">incQuotDepth</span> <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.cat</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">catName</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">Lean.ParserDescr.symbol</span> <span class=\"s2\">\")\"</span><span class=\"o\">))))</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span> <span class=\"o\">(</span><span class=\"n\">LeadingIdentBehavior</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[commandElab syntaxCatWithUnreservedTokens]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabDeclareSyntaxCatWithUnreservedTokens</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">catName</span>  <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getId</span>\n  <span class=\"k\">let</span> <span class=\"n\">leadingIdentBehavior</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LeadingIdentBehavior.default</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">b.getAtomVal</span><span class=\"bp\">!</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"allow_leading_unreserved_tokens\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LeadingIdentBehavior.both</span>\n      <span class=\"bp\">|</span> <span class=\"s2\">\"force_leading_unreserved_tokens\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LeadingIdentBehavior.symbol</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">attrName</span> <span class=\"o\">:=</span> <span class=\"n\">catName.appendAfter</span> <span class=\"s2\">\"Parser\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span>\n    <span class=\"n\">liftIO</span> <span class=\"bp\">$</span> <span class=\"n\">Parser.registerParserCategory</span> <span class=\"n\">env</span> <span class=\"n\">attrName</span> <span class=\"n\">catName</span>\n      <span class=\"n\">leadingIdentBehavior</span>\n  <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"n\">declareSyntaxCatQuotParser</span> <span class=\"n\">catName</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab.Command</span>\n</code></pre></div>",
        "id": 256721887,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633690751
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">both</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>from <code>Init.Conv</code></p>",
        "id": 256747733,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633703169
    },
    {
        "content": "<p>Oh nice so I can delete that code. :)</p>",
        "id": 256778642,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633715504
    }
]