[
    {
        "content": "<p>If anyone interested, I <a href=\"https://github.com/forked-from-1kasper/ground_zero/commit/0ae55c24dee1a4effff06d2e6904dccb979c0d61\">recently finished</a> switching to Lean 4 in <a href=\"https://github.com/forked-from-1kasper/ground_zero\">my HoTT library</a>. It “disables” large elimination using <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Meta/HottTheory.lean\">checker</a> ported <a href=\"https://github.com/gebner/hott3/blob/master/src/hott/init/meta/support.lean\">from Gabriel Ebner’s library</a>. My library is smaller comparing to <a href=\"https://github.com/gebner/hott3\">hott3</a> or library from Lean 2, so contributions are always welcome, if you want to port some things from Lean 2 HoTT Library. Besides that, I also <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Meta/Tactic.lean\">implemented “calc”</a> based on parser written by Mario Carneiro allowing to use arbirary relations (i.e. something like <code>calc 1 = 2 : sorry ... &lt; 3 : sorry</code>) and variant of <code>reflexivity</code>/<code>symmetry</code>/<code>transitivity</code> tactics. Feel free to use these things, if someone wants.<br>\nCompared to Lean 3, Lean 4’s ability to extend syntax is pure fun: it allows us to write things like <code>λ n m, ∥Sⁿ∥ₘ</code>, <code>λ n, πₙ(Sⁿ)</code>, or even <code>λ abc, Sᵃᵇᶜ</code> without breaking anything.</p>",
        "id": 285116257,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1654524146
    }
]