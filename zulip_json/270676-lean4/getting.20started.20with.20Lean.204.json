[
    {
        "content": "<p>OK so I am biting the bullet. I've installed Lean 4 following what it says in the manual, I've installed the Lean 4 VS Code extension and I've disabled the Lean 3 extension. I've made a new directory called <code>Lean4-filters</code> and initialised it as a Lean 4 repo, and I've made a subdirectory in there also called Lean4-filters and in there I've made a new file <code>set.lean</code>.</p>\n<p>So far so good -- if I try <code>#eval 2 + 2</code> then I see 4 in \"Problems\" at the bottom of the VS Code window, and posting random Lean 4 code into <code>set.lean</code> seems to work fine.</p>\n<p>I was thinking of making an experimental filters repo, because of Reid's comment from months back that a filter game might be interesting. I've been teaching filters in my course, and I'm teaching them again this week, and because everything is so close to the axioms I thought it might be a good way to experiment with Lean 4 (NB I will still be teaching them using Lean 3!)</p>\n<p>My questions so far:<br>\n1) I can't even see an infoview button, I'm reading all output in the \"Problems\" tab in that panel at the bottom which I never normally use. Is this right?<br>\n2) Why do i have a subdirectory Lean4-filters of a directory Lean4-filters? Can I have src or is this no longer recommended? My plan is to just make basic files called logic.lean, set.lean, function.lean and filter.lean and I'd planned on putting them all in src but <a href=\"https://leanprover.github.io/lean4/doc/setup.html#leanpkg\">the manual seemed to indicate</a> that src was not a thing any more and I was supposed to have a subdirectory Foo in my project called Foo as well as some file Foo.lean. Can this be right?  Let me stress that all I want to do is prove theorems.<br>\n2) Does Lean 4 have either of the following: <code>set X := X -&gt; Prop</code>, <code>function.injective</code>? <code>#print set</code> returns</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MonadStateOf.set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span><span class=\"bp\">\\</span><span class=\"n\">nfun</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.2</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and I'm not convinced this is the set I'm looking for. I ask because I <em>think</em> these were defined in lean 3 rather than mathlib. Do I need to import something?</p>",
        "id": 227182339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613929153
    },
    {
        "content": "<p>What version of Lean 4 are you using? The infoview doesn't work with the <code>M0</code> version, but it does for fairly recent nightlies. My <code>leanpkg.toml</code> has this line: <code>lean_version = \"leanprover/lean4:nightly\"</code>, and then every once in a while I run <code>elan update leanprover/lean4:nightly</code>.</p>",
        "id": 227183094,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613930021
    },
    {
        "content": "<p>Note that the infoview is much less informative than the Problems tab at the moment. It only shows the tactic state as a string; the errors and messages don't show up there yet.</p>",
        "id": 227183167,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613930098
    },
    {
        "content": "<p>Here's some code I wrote a month ago for some basic set operations, including some <code>macro_rules</code> for set builder notation, in case it's useful to get started. (Notes: <code>Set.mk</code> is what mathlib calls <code>set_of</code>.  <code>setOf</code> was an experiment for turning things with a <code>HasMem</code> instance into sets.  I didn't make any general typeclasses for set notation beyond <code>HasMem</code>.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Logic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">andComm'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.intro</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">andComm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span> <span class=\"n\">andComm'</span> <span class=\"n\">andComm'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orComm'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orComm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span> <span class=\"n\">orComm'</span> <span class=\"n\">orComm'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Logic</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Set.mk</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasMem</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasMem.mem</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasMem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Set.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span>         <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Set.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">setOf</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasMem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">funext</span> <span class=\"n\">x</span>\n    <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span>\n<span class=\"kd\">def</span> <span class=\"n\">inter</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ∩ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inter</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ∪ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">union</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ⊆ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subset</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">memUniv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">memInter</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">memUnion</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">interComm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span>\n    <span class=\"n\">rw</span> <span class=\"n\">andComm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unionComm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span>\n    <span class=\"n\">rw</span> <span class=\"n\">orComm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>\n</div></div>",
        "id": 227183475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613930459
    },
    {
        "content": "<p>OK so here's an attempt at a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Classical.em</span> <span class=\"c1\">-- what you think it is</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">focus</span>\n    <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>I'm stuck at <code>admit</code> because I can't figure out how to see the tactic state and I can't figure out how to name the two cases given by <code>cases</code> -- <code>cases (Classical.em p) with h1 h2</code> doesn't seem to work. Kyle's example doesn't seem to ever create new variable names in tactic mode. I'll upgrade to nightly and see if I have any better luck.</p>",
        "id": 227187266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613934364
    },
    {
        "content": "<p>This works, although I don't know what the style guide for Lean 4 code is like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Classical.em</span> <span class=\"c1\">-- what you think it is</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">False.elim</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hnp</span>\n</code></pre></div>",
        "id": 227187669,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1613934755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> When I wrote the proofs, I used curly braces and semicolons since that seemed to be the most reliable way to see the tactic state where you want it.  I then removed the scaffolding when I was done.  (In Lean4, semicolon replaces comma for separating tactics.)</p>",
        "id": 227187934,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613935072
    },
    {
        "content": "<p>My usual trick for seeing the tactic state was to use the <code>by { tactic; tactic; tactic; }</code> syntax. Maybe this has now changed, but back in early January this seemed to be the easiest way to do it.</p>",
        "id": 227187936,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1613935075
    },
    {
        "content": "<p>Ah, so I guess it wasn't just me :-)</p>",
        "id": 227188021,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1613935155
    },
    {
        "content": "<p>Another trick I used was to put <code>{ }</code> somewhere in a tactic proof to see what the goal was there.  This is also useful for filling out the arms of a <code>cases</code> statement while you're working.</p>",
        "id": 227188197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613935335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> yes I saw this approach in the <a href=\"https://leanprover.github.io/lean4/doc/tactics.html\">Lean 4 manual</a> but I don't think this style is suitable for mathematician learners, they got on <em>really well</em> in NNG with <code>induction n with d hd</code> and then just dealing with the two cases separately. The pipe thing is super-cool for more advanced use but I'm actively thinking of how far we are from making a filter game in Lean 4.</p>",
        "id": 227188672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613935853
    },
    {
        "content": "<p>Of course we're a long way, but it's just an experiment.</p>",
        "id": 227188689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613935869
    },
    {
        "content": "<blockquote>\n<p>I've disabled the Lean 3 extension</p>\n</blockquote>\n<p>This should not be necessary anymore.</p>\n<blockquote>\n<p>I can't even see an infoview button</p>\n</blockquote>\n<p>If you're using the \"nightly\" version of lean4 (not the \"stable\" version), the infoview should open when you open a file and also any time you click anywhere in a tactic proof.</p>",
        "id": 227188830,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613936006
    },
    {
        "content": "<p>Also note that if you installed the lean4 vscode extension back at Lean Together, you may want to uninstall and replace it with the current version on the marketplace.</p>",
        "id": 227189018,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613936208
    },
    {
        "content": "<p>Thanks for the {;} trick both of you -- this is exactly what I needed.</p>",
        "id": 227189259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613936470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>case inr\np : Prop\nh : ¬¬p\n : ¬p\n⊢ ¬p\n</code></pre></div>\n<p>The unnamed assumption came from <code>cases (Classical.em p)</code>. I had understood that it was impossible to not name the outputs of tactics -- but right now I find it's impossible for me to name them. <code>intro h</code> works -- is there any way I can name the goals coming from the <code>cases</code> tactic? I know I can clear the goal with <code>assumption</code> but <code>exact hnp</code> is shorter...</p>",
        "id": 227189465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613936690
    },
    {
        "content": "<p>my first proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">False.elim</span><span class=\"bp\">;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The semicolons are great for now because with the nightly I can see the tactic state by clicking on a tactic. Don't forget the semicolon!</p>",
        "id": 227189611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613936836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- compiles</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n  <span class=\"gr\">admit</span>\n\n<span class=\"c1\">-- copied from the manual</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"begin \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"bp\">?</span> <span class=\"s2\">\"end\"</span><span class=\"bp\">%</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- preserve position of the last token, which is used</span>\n  <span class=\"c1\">-- as the error position in case of an unfinished proof</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"o\">}</span><span class=\"bp\">%$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span><span class=\"c1\">-- error \"unknown identifier 'assumption'\"</span>\n  <span class=\"gr\">admit</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The begin/end macro is from <a href=\"https://leanprover.github.io/lean4/doc/tactics.html#begin-end-lovers\">here</a> . Is the issue that I have two goals?</p>",
        "id": 227189896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613937127
    },
    {
        "content": "<p>By the way, I think it would be nice for <code>_</code> to work in this context, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">_</span>\n</code></pre></div>\n<p>should show the goal state at the <code>_</code></p>",
        "id": 227207308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613955828
    },
    {
        "content": "<p>Using <code>{}</code> seems to work in that position</p>",
        "id": 227207390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613955907
    },
    {
        "content": "<p>I think the community Lean 3 feature to show the expected term in the info view is helpful too; hopefully that's also on the roadmap.</p>",
        "id": 227207675,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613956232
    },
    {
        "content": "<p>I took a look at the source for <code>cases</code> just in case but indeed it seems that <code>cases e with a b</code> is no longer supported at all</p>",
        "id": 227207946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613956389
    },
    {
        "content": "<p>I think that beginner mathematician users need that, people who play the natural number game just write a stream of tactics and know to only ever look at the top goal. There's no harm in doing it like that if you're not attempting to write professional code and just want to close the goals.</p>",
        "id": 227211618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613960123
    },
    {
        "content": "<p>I am thinking about writing a <code>dirtyCases</code> tactic that acts like lean 3 <code>cases</code> (including the ability to refer to generated names)</p>",
        "id": 227211904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613960440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/getting.20started.20with.20Lean.204/near/227182339\">said</a>:</p>\n<blockquote>\n<p>2) Why do i have a subdirectory Lean4-filters of a directory Lean4-filters?</p>\n</blockquote>\n<p>The subdirectory doesn't need to match the outer directory - after all a git repo can be cloned into arbitrarily-named directories. You should instead choose a name that makes sense for others to <code>import</code> (even if the package is not meant to be imported, for consistency), e.g. <code>Filters</code> (if they import it, they seem to be using Lean 4, so no need for the prefix). That's not much longer than <code>src</code> anymore, is it?</p>",
        "id": 227739137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614245025
    },
    {
        "content": "<p>Also note that with the new layout, single-file packages do not need a subdirectory at all</p>",
        "id": 227739220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614245062
    }
]