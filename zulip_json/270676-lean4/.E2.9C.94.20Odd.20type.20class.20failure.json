[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Odd.20type.20class.20failure/near/264641353\">said</a>:</p>\n<blockquote>\n<p>Without <code>outParam</code> on <code>[Add S.α]</code>, it is a normal parameter of the the typeclass. That is, <code>Bar</code> is polymorphic in <code>Add (S.α)</code>.</p>\n</blockquote>\n<p>Oh, I hadn't realized that <em>that</em>'s the important <code>outParam</code>, oops.</p>",
        "id": 264641498,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639340115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Odd.20type.20class.20failure/near/264641353\">said</a>:</p>\n<blockquote>\n<p>That is, <code>Bar</code> is polymorphic over <code>Add (S.α)</code>.</p>\n</blockquote>\n<p>To be more specific, given: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Lean needs an <code>Add foo.α</code> instance on both sides of the <code>:=</code> to construct the relevant <code>Bar X foo</code> instance. However, because the <code>Add foo.α</code> instance is not an <code>outParam</code> of <code>Bar X foo</code> is has no information on <em>which</em> <code>Add foo.α</code>  it should use. Thus, there is no way to determine the exact <code>Bar X foo</code> instance on the RHS to match with the one on the LHS.</p>",
        "id": 264641721,
        "sender_full_name": "Mac",
        "timestamp": 1639340445
    },
    {
        "content": "<p>You can also observe the synthesis process yourself like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span>  <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 264641888,
        "sender_full_name": "Mac",
        "timestamp": 1639340673
    },
    {
        "content": "<p>Here is MWE for such observation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">S.α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Baz</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Add</span> <span class=\"n\">S.α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Baz</span> <span class=\"n\">X</span> <span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 264641978,
        "sender_full_name": "Mac",
        "timestamp": 1639340814
    },
    {
        "content": "<p>The important difference in the traces is that once it synthesizes  the <code>Baz.toAdd</code> instance it creates a new subgoal of <code>Baz X _tc.1</code> and goes on to fill in <code>foo</code> (the infer of <code>_tc</code> being due to the <code>outParam</code>) whereas once it synthesizes <code>Bar.toAdd</code>, it stops, because there is no further information for it use to advance.</p>",
        "id": 264642673,
        "sender_full_name": "Mac",
        "timestamp": 1639341931
    },
    {
        "content": "<p>Thank a lot, it makes sense now!</p>",
        "id": 264643603,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639343135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as resolved.</p>",
        "id": 264643611,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639343151
    }
]