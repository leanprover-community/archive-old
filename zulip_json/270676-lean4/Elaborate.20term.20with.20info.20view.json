[
    {
        "content": "<p>One last meta question for today. I have no problem creating commands that consume terms but I can't use tactic mode. How do commands like <code>def</code> or <code>theorem</code> tell Lean the type they expect? If I type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">typ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- actually do something here?</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">Test</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- I'd like the info view to show \"⊢ Nat\" here.</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know I can define aliases for <code>def</code> and <code>theorem</code> but this isn't what I want to do here.</p>",
        "id": 294767217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661202505
    },
    {
        "content": "<p>It's the expected type when elaborating <code>val</code> (which you currently don't do), i.e. from <code>elabTerm</code></p>",
        "id": 294767795,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661202736
    },
    {
        "content": "<p>I tried things like calling term elaboration inside the command. For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">typ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">typ</span> <span class=\"n\">none</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">val</span> <span class=\"n\">typ</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">Test</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"s2\">\"Yo\"</span>\n</code></pre></div>\n<p>But there is no error at all in this example</p>",
        "id": 294767823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661202754
    },
    {
        "content": "<p>and no info view display either.</p>",
        "id": 294767897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661202792
    },
    {
        "content": "<p>I was expecting something similar to work as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">typ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Term.elabType</span> <span class=\"n\">typ</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">val</span> <span class=\"n\">ty</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{ty}, {res}\"</span>\n</code></pre></div>\n<p>it surprises me quite a lot that this doesn't error as patrick expects, why is that?</p>",
        "id": 294768268,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1661202963
    },
    {
        "content": "<p>You also need to wrap it in <code>withSynthesize</code> to actually force the tactic block to run</p>",
        "id": 294768488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661203074
    },
    {
        "content": "<p>This seems to work much better!</p>",
        "id": 294768626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203135
    },
    {
        "content": "<p>Thanks Sebastian!</p>",
        "id": 294768827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203243
    },
    {
        "content": "<p>Not sure if <code>liftTermElabM</code> should imply <code>withSynthesize</code>. It's also worth mentioning that you need <code>runTermElabM</code> instead for proper support of <code>variable</code>s.</p>",
        "id": 294769035,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661203348
    },
    {
        "content": "<p>Thanks. I know this variable handling difference between <code>liftTermElabM</code> and <code>runTermElabM</code>, Leo explained it a couple of weeks ago and he took the opportunity to write docstrings for those two functions.</p>",
        "id": 294769216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203445
    },
    {
        "content": "<p>Maybe those docstrings should mention <code>withSynthesize</code>.</p>",
        "id": 294769288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661203477
    },
    {
        "content": "<p>Those docstrings are definitely helpful. Without them I wouldn't have known the difference either, haha.</p>",
        "id": 294769405,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661203542
    }
]