[
    {
        "content": "<p>I would appreciate feedback or confirmation whether this would be useful to add to lean 4</p>",
        "id": 272897082,
        "sender_full_name": "Joseph O",
        "timestamp": 1645583406
    },
    {
        "content": "<p>A way to know is when you end up needing the same piece of code in 2~3 different contexts.</p>\n<p>Example: this is how <code>HashMap.ofList</code> was born:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/easy.20HashMap.20instantiation/near/267786491\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/easy.20HashMap.20instantiation/near/267786491</a></p>",
        "id": 272897285,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645583617
    },
    {
        "content": "<p>I think it's generally preferable for that kind of thing on ranges to be a stream/iterator and not a concrete list.</p>",
        "id": 272897560,
        "sender_full_name": "Chris B",
        "timestamp": 1645583901
    },
    {
        "content": "<p>I have had my need for it. For  instance, I don't about everyone else, but I rarely use for loops in lean, and I have had to use Ranges before, piping it into a lot of list methods. I was using <code>List.range n</code>, but recently learned about the range syntax, and needed a use case with stepping, so I was making a <code>toList</code> function, and I assume other people would find it useful too</p>",
        "id": 272898264,
        "sender_full_name": "Joseph O",
        "timestamp": 1645584672
    },
    {
        "content": "<p>Ranges in my opinion are meant to generate some sort of existing data structure, notably a list</p>",
        "id": 272898284,
        "sender_full_name": "Joseph O",
        "timestamp": 1645584705
    },
    {
        "content": "<p><code>HashMap</code> even has a <code>toList</code> to allow easy manipulating.</p>",
        "id": 272898399,
        "sender_full_name": "Joseph O",
        "timestamp": 1645584824
    },
    {
        "content": "<p>I would prefer some more opinions before I decide.</p>",
        "id": 272975967,
        "sender_full_name": "Joseph O",
        "timestamp": 1645635053
    },
    {
        "content": "<p>it might help to have actual examples of use</p>",
        "id": 272977869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645635728
    },
    {
        "content": "<p>Most mathlib additions are done because they are dependencies for some other work that either exists in another PR or will be PR'd soon. What's your application?</p>",
        "id": 272978073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645635829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/272978073\">said</a>:</p>\n<blockquote>\n<p>Most mathlib additions are done because they are dependencies for some other work that either exists in another PR or will be PR'd soon. What's your application?</p>\n</blockquote>\n<p>well this isnt for mathlib4 but lean4. Either way, my application is for usefulness</p>",
        "id": 272999586,
        "sender_full_name": "Joseph O",
        "timestamp": 1645644588
    },
    {
        "content": "<p>that's not an answer</p>",
        "id": 272999622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645644602
    },
    {
        "content": "<p>What is the point of having ranges, that cant be converted for lists. A use case could be working with mod systems, or primes, and filtering out ranges and numbers, which is what I was doing, and found the need for</p>",
        "id": 272999754,
        "sender_full_name": "Joseph O",
        "timestamp": 1645644653
    },
    {
        "content": "<p>could you show a concrete example?</p>",
        "id": 272999788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645644672
    },
    {
        "content": "<p>like a piece of code that you would like to write, that can't be written easily now and would be better with your additions</p>",
        "id": 272999852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645644701
    },
    {
        "content": "<p>that's what I mean by an application</p>",
        "id": 272999867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645644711
    },
    {
        "content": "<p>ok, give me a moment</p>",
        "id": 273000023,
        "sender_full_name": "Joseph O",
        "timestamp": 1645644771
    },
    {
        "content": "<p>very basic example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">]</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i am unlikely this will convince you. If you want another better example, let me know</p>",
        "id": 273002076,
        "sender_full_name": "Joseph O",
        "timestamp": 1645645794
    },
    {
        "content": "<p>I will get an example with the step feature. But can I ask you something: What was the point of ranges when they can only be looped through, explain that to me. My idea may not be \"useful\", but the current version is even worse! barely any functionality!</p>",
        "id": 273003017,
        "sender_full_name": "Joseph O",
        "timestamp": 1645646219
    },
    {
        "content": "<p>I feel like the <code>for x in [a:b]</code> is an amazing functionality by itself already, sure it could be improved but it's already very useful when you are writing code in a more imperative style</p>",
        "id": 273003597,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645646447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273003597\">said</a>:</p>\n<blockquote>\n<p>I feel like the <code>for x in [a:b]</code> is an amazing functionality by itself already, sure it could be improved but it's already very useful when you are writing code in a more imperative style</p>\n</blockquote>\n<p>How many people here write in an imperative style? Are we going to exclude functional style for ranges just because we feel like it?</p>",
        "id": 273004272,
        "sender_full_name": "Joseph O",
        "timestamp": 1645646785
    },
    {
        "content": "<p>You arent really giving good arguments</p>",
        "id": 273004361,
        "sender_full_name": "Joseph O",
        "timestamp": 1645646827
    },
    {
        "content": "<p>I've for example written code with for loops in doc-gen 4, besides I'm not making a point against extending the functionality, I'm merely making a point against \"barely any functionality\"</p>",
        "id": 273004650,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645646970
    },
    {
        "content": "<p>One reason to prefer the for loop over the list operations, at least in current lean 4, is that the latter uses a lot more memory. For loops actually compile roughly to for loops, while list operations also compile to creating big linked lists and consuming them</p>",
        "id": 273004790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647028
    },
    {
        "content": "<p>But that's not to say that we shouldn't have a <code>Range.toList</code>, that seems like a simple addition. I don't think you posted an implementation of this anywhere though</p>",
        "id": 273005023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647133
    },
    {
        "content": "<p>I can do that now if you want</p>",
        "id": 273005105,
        "sender_full_name": "Joseph O",
        "timestamp": 1645647175
    },
    {
        "content": "<p>All of the other functions there exist already, right?</p>",
        "id": 273005158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647200
    },
    {
        "content": "<p>You can write a <code>toList</code> function generic over <code>Stream</code>, although I think you can't prove it terminates in general</p>",
        "id": 273005277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647257
    },
    {
        "content": "<p>it is a bit easier to translate to an array instead of a list, because you push to the end of an array</p>",
        "id": 273005408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647329
    },
    {
        "content": "<p>plus arrays have just as much functional API as lists in lean 4</p>",
        "id": 273005516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645647367
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">List.range'</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.drop</span> <span class=\"n\">start</span> <span class=\"bp\">$</span> <span class=\"n\">List.range</span> <span class=\"n\">stop</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">List.range''</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.range'</span> <span class=\"n\">start</span> <span class=\"n\">stop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.range'</span> <span class=\"n\">start</span> <span class=\"n\">stop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">step</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toList</span> <span class=\"o\">:</span> <span class=\"n\">Range</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">stop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"n\">o</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.range''</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">o</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n</code></pre></div>",
        "id": 273005660,
        "sender_full_name": "Joseph O",
        "timestamp": 1645647438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273005158\">said</a>:</p>\n<blockquote>\n<p>All of the other functions there exist already, right?</p>\n</blockquote>\n<p>not really</p>",
        "id": 273005712,
        "sender_full_name": "Joseph O",
        "timestamp": 1645647464
    },
    {
        "content": "<p>Hm, if your step size is large then that creates a lot of elements. You can leverage the <code>ForIn</code> instance to construct the array for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Std.Range.toArray</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Std.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">r</span> <span class=\"k\">do</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">pure</span> <span class=\"n\">arr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Std.Range.toList</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Std.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">r.toArray.toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">]</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273007532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648341
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 273007760,
        "sender_full_name": "Joseph O",
        "timestamp": 1645648477
    },
    {
        "content": "<p>Note that the indirection through arrays is deliberate. Even if you want to construct a list in the end, it's more efficient to construct the array first and tail-recursively convert it to a list at the end</p>",
        "id": 273007793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648499
    },
    {
        "content": "<p>I see</p>",
        "id": 273007808,
        "sender_full_name": "Joseph O",
        "timestamp": 1645648510
    },
    {
        "content": "<p>You might as well make the pr now.</p>",
        "id": 273007844,
        "sender_full_name": "Joseph O",
        "timestamp": 1645648529
    },
    {
        "content": "<p>Here's another way to write the <code>toArray</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Std.Range.toArray</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Std.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">r.forIn</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273007854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648540
    },
    {
        "content": "<p>it's the same thing but without the do notation sugar</p>",
        "id": 273007872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648553
    },
    {
        "content": "<p>This is a collaboration not a competition. This is still your PR, there is still documentation and examples, and maybe there are other streams that could also use <code>toArray</code> or <code>toList</code> functions</p>",
        "id": 273008029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648648
    },
    {
        "content": "<p>If you think this is useful to add,  you can add it. I am not going to copy someone's code and claim it to be mine</p>",
        "id": 273008044,
        "sender_full_name": "Joseph O",
        "timestamp": 1645648659
    },
    {
        "content": "<p>You do realize that most of mathlib's files have multiple authors, right?</p>",
        "id": 273008135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648691
    },
    {
        "content": "<p>Yes I do, but I didn't author anything here</p>",
        "id": 273008176,
        "sender_full_name": "Joseph O",
        "timestamp": 1645648713
    },
    {
        "content": "<p>Sure you did, you came up with the idea and wrote a v1 implementation, which makes you first author by mathlib rules</p>",
        "id": 273008250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648756
    },
    {
        "content": "<p>and like I said this isn't a PR yet</p>",
        "id": 273008363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648806
    },
    {
        "content": "<p>this is a function</p>",
        "id": 273008373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645648812
    },
    {
        "content": "<p>Hmm. So this will be added to mathlib not lean4?</p>",
        "id": 273008724,
        "sender_full_name": "Joseph O",
        "timestamp": 1645649006
    },
    {
        "content": "<p>Yes, as you can see it works just as well if it's not in core</p>",
        "id": 273008762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649034
    },
    {
        "content": "<p>lean 4 is designed to be extensible from outside the core distribution</p>",
        "id": 273008839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649056
    },
    {
        "content": "<p>You also suggested a <code>ToString</code> and a <code>Repr</code> instance above. Can you use the <code>s!</code> macro to write that?</p>",
        "id": 273008908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273008908\">said</a>:</p>\n<blockquote>\n<p>You also suggested a <code>ToString</code> and a <code>Repr</code> instance above. Can you use the <code>s!</code> macro to write that?</p>\n</blockquote>\n<p>I mean, the instances would have been simple</p>",
        "id": 273008988,
        "sender_full_name": "Joseph O",
        "timestamp": 1645649127
    },
    {
        "content": "<p>to write</p>",
        "id": 273008995,
        "sender_full_name": "Joseph O",
        "timestamp": 1645649132
    },
    {
        "content": "<p>okay, then write them</p>",
        "id": 273009008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649139
    },
    {
        "content": "<p>you have to start somewhere</p>",
        "id": 273009024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649148
    },
    {
        "content": "<p>API design is more than you are giving credit for</p>",
        "id": 273009100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649169
    },
    {
        "content": "<p>for instance, is it printed like <code>[1, 3, 5, ..., 17]</code> or <code>[1 : 17 : 2]</code> or <code>[1:17:2]</code></p>",
        "id": 273009214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649239
    },
    {
        "content": "<p>the function is easy to write, but there are bikeshedding issues everywhere you look</p>",
        "id": 273009326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645649289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273009214\">said</a>:</p>\n<blockquote>\n<p>for instance, is it printed like <code>[1, 3, 5, ..., 17]</code> or <code>[1 : 17 : 2]</code> or <code>[1:17:2]</code></p>\n</blockquote>\n<p>I was thinking <code>[1:17:2]</code></p>",
        "id": 273009989,
        "sender_full_name": "Joseph O",
        "timestamp": 1645649639
    },
    {
        "content": "<p>I think you're right. (It should look like the input syntax and have the same style, more or less.) Small PRs like that are generally uncontroversial, and will help you get practice for larger changes</p>",
        "id": 273010854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650046
    },
    {
        "content": "<p>Im having trouble with repr. I have a repr instance for my tuple type, and it takes a string, but this isnt workng</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Range</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.start</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.stop</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.step</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\"]\"</span>\n</code></pre></div>",
        "id": 273011038,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650128
    },
    {
        "content": "<p>(i tried using the s! macro, but that didnt work)</p>",
        "id": 273011058,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650148
    },
    {
        "content": "<p>is that a MWE? Because if so you are missing an <code>open</code></p>",
        "id": 273011321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273011321\">said</a>:</p>\n<blockquote>\n<p>is that a MWE? Because if so you are missing an <code>open</code></p>\n</blockquote>\n<p>here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Range</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.start</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.stop</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">++</span> <span class=\"n\">reprPrec</span> <span class=\"n\">range.step</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\"]\"</span>\n\n<span class=\"kd\">end</span>  <span class=\"n\">Std</span>\n</code></pre></div>",
        "id": 273011409,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650333
    },
    {
        "content": "<p>If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Std</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Range</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and put your cursor over the <code>_</code> you will see that it is expecting a <code>Nat -&gt; Format</code>, which means it is expecting another argument</p>",
        "id": 273011597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650426
    },
    {
        "content": "<p>Ah, I got it</p>",
        "id": 273011623,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650445
    },
    {
        "content": "<p>Should the <code>s!</code> macro work now?</p>",
        "id": 273011667,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650477
    },
    {
        "content": "<p>Let me try</p>",
        "id": 273011712,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650485
    },
    {
        "content": "<p>the second argument is the precedence under which to display the expression by the way. Since this is a bracketed expression, it looks the same regardless of precedence so you can ignore it</p>",
        "id": 273011751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650519
    },
    {
        "content": "<p>Yeah, it does. Ok, it all works</p>",
        "id": 273011801,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650554
    },
    {
        "content": "<p>also, since it wants a <code>Format</code> and not a <code>String</code> you should use <code>f!</code> instead of <code>s!</code></p>",
        "id": 273011814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650564
    },
    {
        "content": "<p><code>s!</code> worked though</p>",
        "id": 273011839,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20Git.2BGitHub/near/273006122\">said</a>:</p>\n<blockquote>\n<p>That makes a good motto: Code that compiles is not code that works.</p>\n</blockquote>",
        "id": 273011953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650628
    },
    {
        "content": "<p>And is it ok if I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[:</span><span class=\"mi\">17</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it evaluates that to <code>[0:17:1]</code>, or should it just evaluate to <code>[:17]</code></p>",
        "id": 273011954,
        "sender_full_name": "Joseph O",
        "timestamp": 1645650629
    },
    {
        "content": "<p>I think it should print as <code>[:17]</code> if possible</p>",
        "id": 273011994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645650658
    },
    {
        "content": "<p>Do you have an idea for a nice way of doing that. I would prefer some verbal context, as to try it out mainly myself, but I don't mind if you share code yourself.</p>",
        "id": 273014144,
        "sender_full_name": "Joseph O",
        "timestamp": 1645651916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> Do a pattern match on range, with cases for <code>&lt;0, stop, 1&gt;</code>, <code>&lt;0, stop, step&gt;</code>, <code>&lt;start, stop, 1&gt;</code>, <code>&lt;start, stop, step&gt;</code></p>",
        "id": 273022023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645655968
    },
    {
        "content": "<blockquote>\n<p>I think you're right. (It should look like the input syntax and have the same style, more or less.)</p>\n</blockquote>\n<p>Is there a nice way in lean4 to prove that repr roundtrips?</p>",
        "id": 273025323,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645658014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273022023\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> Do a pattern match on range, with cases for <code>&lt;0, stop, 1&gt;</code>, <code>&lt;0, stop, step&gt;</code>, <code>&lt;start, stop, 1&gt;</code>, <code>&lt;start, stop, step&gt;</code></p>\n</blockquote>\n<p>ok</p>",
        "id": 273035973,
        "sender_full_name": "Joseph O",
        "timestamp": 1645665691
    },
    {
        "content": "<p>Should I make an auxiliary function to do that?</p>",
        "id": 273036043,
        "sender_full_name": "Joseph O",
        "timestamp": 1645665758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273007854\">said</a>:</p>\n<blockquote>\n<p>Here's another way to write the <code>toArray</code> function:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Std.Range.toArray</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Std.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">r.forIn</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Does doing it this way provide any benefit?</p>",
        "id": 273036234,
        "sender_full_name": "Joseph O",
        "timestamp": 1645665970
    },
    {
        "content": "<p>Also, is there anywhere I can learn how to use generators like you used here in lean 4?</p>",
        "id": 273036370,
        "sender_full_name": "Joseph O",
        "timestamp": 1645666139
    },
    {
        "content": "<p>Is it ok to have to Pull requests open at the same time?</p>",
        "id": 273038374,
        "sender_full_name": "Joseph O",
        "timestamp": 1645668205
    },
    {
        "content": "<p>But are you sure something like this shouldn't be added to <code>lean4</code> itself? Like, why was <code>Hashmap.ofList</code> deemed good enough to add to the core std, for instance?</p>",
        "id": 273038473,
        "sender_full_name": "Joseph O",
        "timestamp": 1645668270
    },
    {
        "content": "<p>I don't think it's a matter of something being \"good enough\" or not. If something isn't good enough, it won't make it to mathlib either.</p>\n<p>As I said in the issue, it's standard for programming languages to provide easy interfaces to instantiate their own versions of hash maps out of the box</p>",
        "id": 273041178,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645671538
    },
    {
        "content": "<p>Just a possibility (following scala design) - one can have a typeclass <code>Seq α</code> with a <code>toArray</code> field, with methods like <code>Seq.toList</code>implemented using this. Also from <code>Seq (α × Nat)</code> we can generate a HashMap. <code>Range</code> should then have a <code>Seq</code> instance.  I would be happy to make rough implementations for discussion.</p>\n<p>Incidentally I also needed <code>HashMap.fromList</code> and <code>HashMap.fromArray</code>.</p>",
        "id": 273045286,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645675851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273002076\">said</a>:</p>\n<blockquote>\n<p>very basic example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">]</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i am unlikely this will convince you. If you want another better example, let me know</p>\n</blockquote>\n<p>You might find my  WIP <a href=\"https://github.com/tydeu/lean4-itertools\">lean4-itertools</a> library to be of interest. I was designed exactly to help do this kind of thing.</p>",
        "id": 273045434,
        "sender_full_name": "Mac",
        "timestamp": 1645675971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273041178\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a matter of something being \"good enough\" or not. If something isn't good enough, it won't make it to mathlib either.</p>\n<p>As I said in the <code>HashMap.ofList</code> issue, it's standard for programming languages to provide easy interfaces to instantiate their own versions of hash maps out of the box</p>\n</blockquote>\n<p>Converting ranges to lists are standard in languages as well, in fact, most ranges in langs are lists from the start, just written in shorter notation</p>",
        "id": 273078459,
        "sender_full_name": "Joseph O",
        "timestamp": 1645703200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273045286\">said</a>:</p>\n<blockquote>\n<p>Just a possibility (following scala design) - one can have a typeclass <code>Seq α</code> with a <code>toArray</code> field, with methods like <code>Seq.toList</code>implemented using this. Also from <code>Seq (α × Nat)</code> we can generate a HashMap. <code>Range</code> should then have a <code>Seq</code> instance.  I would be happy to make rough implementations for discussion.</p>\n<p>Incidentally I also needed <code>HashMap.fromList</code> and <code>HashMap.fromArray</code>.</p>\n</blockquote>\n<p>Interesting idea. This means that Seq (a x Nat) for example would have a method toArray and generate a hash map?</p>",
        "id": 273080655,
        "sender_full_name": "Joseph O",
        "timestamp": 1645704693
    },
    {
        "content": "<p>That is what I mean. Indeed one can have an instance of <code>Seq a</code> from an instance of <code>ForIn</code> at least with the correct parameters (I am struggling to understand what <code>ForIn</code> means in general, having only used it in imperative <code>for</code> loops).</p>",
        "id": 273090884,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645710505
    },
    {
        "content": "<p>I guess I should add it to mathlib4 for now and it may be added to the lean 4 std?</p>",
        "id": 273093070,
        "sender_full_name": "Joseph O",
        "timestamp": 1645711545
    },
    {
        "content": "<p>A range in python3 is surely not a list by default. Maybe we're talking past each other. Joseph, when you think about and mention lists, are you just referring to any datatype that has indexing, iteration, a length, appending, insertion, mutation at an index; or do you mean some particular implementation like a linked list, doubly linked list, indexed tree?</p>",
        "id": 273094585,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645712304
    },
    {
        "content": "<p>There are probably better ways in lean than the below, but this is what I meant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">List</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.toArray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">Array</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkArray</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">it.toArray</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkList</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMap</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">][</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">](</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)):</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>   <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">HashMap.empty</span>\n</code></pre></div>",
        "id": 273096165,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645713065
    },
    {
        "content": "<p>Probably you want mkList and mkHashMap to be fields in the structure that have default implementations, so that one can override. For example, a List's mkList shouldn't need to go through an Array and then to a List</p>",
        "id": 273096608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645713245
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> I agree and this is something I am learning now.</p>",
        "id": 273097212,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645713500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273090884\">said</a>:</p>\n<blockquote>\n<p>That is what I mean. Indeed one can have an instance of <code>Seq a</code> from an instance of <code>ForIn</code> at least with the correct parameters (I am struggling to understand what <code>ForIn</code> means in general, having only used it in imperative <code>for</code> loops).</p>\n</blockquote>\n<p>A <code>ForIn</code> impl is nothing more or less than the natural requirement for desugaring <code>for</code> loops. You give it a monadic function which reports whether to update the state or early-return, and it folds the function over the data structure or iterable or what have you.</p>",
        "id": 273097834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645713798
    },
    {
        "content": "<p>It's a bit more general than \"iterators\" such as you would find in e.g. Rust, because it's not just a <code>next</code> function that gets called repeatedly, you get the loop body itself and can do funny business like reuse old state values or apply the function a transfinite number of times</p>",
        "id": 273098171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645713957
    },
    {
        "content": "<p>So like a python generator but with more introspection?</p>",
        "id": 273098250,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645713982
    },
    {
        "content": "<p>I don't think imperative languages without a monad abstraction can express this</p>",
        "id": 273098335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645714035
    },
    {
        "content": "<p>Python generators are generalized along a different axis, what with the yield point stuff</p>",
        "id": 273098419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645714081
    },
    {
        "content": "<p>I can imagine <code>do</code> notation gaining the ability to desugar <code>yield</code> expressions as well, but generators are not currently supported</p>",
        "id": 273098603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645714149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273096165\">said</a>:</p>\n<blockquote>\n<p>There are probably better ways in lean than the below, but this is what I meant.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">List</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.toArray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">Array</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkArray</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">it.toArray</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkList</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMap</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span><span class=\"o\">][</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">](</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)):</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>   <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">HashMap.empty</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is pretty neat.</p>",
        "id": 273099514,
        "sender_full_name": "Joseph O",
        "timestamp": 1645714542
    },
    {
        "content": "<p>Yeah, and ranges are not usually lists by default. In F#, they are sequences</p>",
        "id": 273099592,
        "sender_full_name": "Joseph O",
        "timestamp": 1645714569
    },
    {
        "content": "<p>Thanks. But the above does not take care of <code>Range</code>,  for which it has to be tweaked.<br>\nI'll take a shot at this.</p>",
        "id": 273099687,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645714635
    },
    {
        "content": "<p>You can implement <code>Iterable</code> for anything with a suitable <code>Stream</code> or <code>ForIn</code> implementation</p>",
        "id": 273100228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645714859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273098171\">said</a>:</p>\n<blockquote>\n<p>It's a bit more general than \"iterators\" such as you would find in e.g. Rust, because it's not just a <code>next</code> function that gets called repeatedly, you get the loop body itself and can do funny business like reuse old state values or apply the function a transfinite number of times</p>\n</blockquote>\n<p>This is external vs. internal iteration. Internal iteration like <code>ForM</code> is relatively simple to set up and generate good code for, but limited in other regards - you cannot implement <code>zip</code> on two internal iterators, for example. I'd love to see a robust external iteration library for Lean in the future.</p>",
        "id": 273100232,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645714860
    },
    {
        "content": "<p><code>Stream</code> is external iteration, is it not?</p>",
        "id": 273100294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645714893
    },
    {
        "content": "<p>Hah yes, I forgot we already have it because it is so barebones and therefore barely used</p>",
        "id": 273100668,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645715061
    },
    {
        "content": "<p>We would at least need a new typeclass for bounded streams if we want to make them as useful as <code>ForM</code></p>",
        "id": 273101604,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645715465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273099687\">said</a>:</p>\n<blockquote>\n<p>Thanks. But the above does not take care of <code>Range</code>,  for which it has to be tweaked.<br>\nI'll take a shot at this.</p>\n</blockquote>\n<p>It shouldn't take to much tweaking</p>",
        "id": 273101648,
        "sender_full_name": "Joseph O",
        "timestamp": 1645715481
    },
    {
        "content": "<p>At least if I think about it</p>",
        "id": 273101665,
        "sender_full_name": "Joseph O",
        "timestamp": 1645715491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but does <code>Range</code> have a suitable <code>ForIn</code>. A <code>Range</code> is only an <code>Iterable Nat</code> so if the only parameter of an <code>Iterable</code> is the type family I do not see an implementation.</p>",
        "id": 273101910,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645715618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273100294\">said</a>:</p>\n<blockquote>\n<p><code>Stream</code> is external iteration, is it not?</p>\n</blockquote>\n<p>There is also an interesting comparison to lazy lists, which have a very similar but simpler interface (which may or may not be a problem for code generation). The big difference is of course that lazy lists are provably finite if not defined coinductively. You can still make them infinite using <code>partial</code>, you just won't be able to prove anything about them.</p>",
        "id": 273103482,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645716306
    },
    {
        "content": "<p>Another take - this is getting more complicated, but includes <code>Range</code>. I am happy to learn how to simplify.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span>  <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IterableFamily</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it.toArray</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">List</span>    <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.toArray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">Array</span>   <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkArray</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">it.toArray</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkList</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMap</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">)][</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">](</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)):</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>   <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">HashMap.empty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ForIn.toArray</span> <span class=\"o\">[</span><span class=\"n\">ForIn</span> <span class=\"n\">Id</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">](</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"k\">do</span>\n      <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">a</span>\n    <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">Range</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForIn.toArray</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 273103808,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645716433
    },
    {
        "content": "<p>interesting</p>",
        "id": 273107626,
        "sender_full_name": "Joseph O",
        "timestamp": 1645718001
    },
    {
        "content": "<p>Do you mind showing an example of using this to convert a <code>Range</code> to an <code>Array</code> of some sort?</p>",
        "id": 273107936,
        "sender_full_name": "Joseph O",
        "timestamp": 1645718126
    },
    {
        "content": "<p>One thing I still haven't understood: if you want a list of numbers, why not make a function that creates one directly instead of instantiating a Range and then converting it into a list?</p>",
        "id": 273108872,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645718494
    },
    {
        "content": "<p>The use of <code>Range</code> is too straightforward to me. It supports trivial iterations for <code>for</code> loops.<br>\nIf you want <em>data</em> to play with, <code>Range</code> is not the shortest path</p>",
        "id": 273109286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645718666
    },
    {
        "content": "<p>I'm not on my PC, but I think we already have <code>List.range</code>, which might serve as an inspiration if you want something more plastic/generic</p>",
        "id": 273109721,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645718864
    },
    {
        "content": "<p>The above had a problem because of my switching back and forth. The following version of <code>mkArray</code> gives an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkArray</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">it.toArray</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">Range</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForIn.toArray</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Range</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">mkArray</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 273109969,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645718938
    },
    {
        "content": "<p>In cleaned up form, here is the code again. <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I agree that for <code>Range</code> this seems to not make sense. May be useful occasionally though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span>  <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IterableFamily</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it.toArray</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">List</span>    <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.toArray</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IterableFamily</span> <span class=\"n\">Array</span>   <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkArray</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">it.toArray</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkList</span> <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkArray</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkHashMap</span>\n  <span class=\"o\">[</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">l</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">)][</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">](</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"o\">):</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>   <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkArray</span> <span class=\"n\">x</span>\n    <span class=\"n\">arr.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">HashMap.empty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ForIn.toArray</span> <span class=\"o\">[</span><span class=\"n\">ForIn</span> <span class=\"n\">Id</span> <span class=\"n\">l</span> <span class=\"n\">α</span><span class=\"o\">](</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"k\">do</span>\n      <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">a</span>\n    <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Iterable</span> <span class=\"n\">Range</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForIn.toArray</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Range</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">mkArray</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 273110641,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645719192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273108872\">said</a>:</p>\n<blockquote>\n<p>One thing I still haven't understood: if you want a list of numbers, why not make a function that creates one directly instead of instantiating a Range and then converting it into a list?</p>\n</blockquote>\n<p>There isn't much overhead to creating a <code>Range</code>, it is just a trivial struct, so I would say that this is just a convenient syntax for calling <code>List.range</code></p>",
        "id": 273110982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645719321
    },
    {
        "content": "<p>you would need four versions of the function to get the same behavior with direct list functions</p>",
        "id": 273111169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645719376
    },
    {
        "content": "<p>I would say 3 actually</p>",
        "id": 273111626,
        "sender_full_name": "Joseph O",
        "timestamp": 1645719553
    },
    {
        "content": "<p>One for just stop, one for start and stop, and one for start, stop and step</p>",
        "id": 273111677,
        "sender_full_name": "Joseph O",
        "timestamp": 1645719581
    },
    {
        "content": "<p>I suspect there's a solution with just one function and optional parameters with default values</p>",
        "id": 273113706,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645720414
    },
    {
        "content": "<p>sure, <code>Range</code>'s constructor itself has default values like that</p>",
        "id": 273114016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645720536
    },
    {
        "content": "<p>but <code>Range</code> also has fancy syntax which a custom function wouldn't have</p>",
        "id": 273114169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645720581
    },
    {
        "content": "<p>yes</p>",
        "id": 273114597,
        "sender_full_name": "Joseph O",
        "timestamp": 1645720749
    },
    {
        "content": "<p>You can also use <code>@[csimp]</code> lemmas to rewrite calls to <code>[:n].toList</code> to <code>List.range n</code></p>",
        "id": 273114802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645720832
    },
    {
        "content": "<p>Why would <code>List.range</code> be any more efficient than <code>Range.toList</code>?  Because of the step size?</p>",
        "id": 273115436,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645721066
    },
    {
        "content": "<p>No customizable start of step</p>",
        "id": 273116076,
        "sender_full_name": "Joseph O",
        "timestamp": 1645721311
    },
    {
        "content": "<p>Well, <code>List.range</code> as it exists today probably isn't that efficient, since it's not tail recursive IIRC. But if we assume that all the functions are given the most efficient implementations given their spec, it would be advantageous to call <code>List.range</code> when we know at compile time that the step is 1 and the start is 0</p>",
        "id": 273119225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645722559
    },
    {
        "content": "<p>A lot of conversation, yet im not sure we have made a decision yet</p>",
        "id": 273122667,
        "sender_full_name": "Joseph O",
        "timestamp": 1645723984
    },
    {
        "content": "<p><code>Range.toArray</code> and <code>Range.toList</code> are no-brainers (in that the spec is clear and there is no downside to providing the function), everything else is speculative / comes as part of a larger untested infrastructure</p>",
        "id": 273123620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645724444
    },
    {
        "content": "<p>Just to give an idea of what I had in mind, this quick draft already generates <em>pretty good code</em>. The only improvements I can see would be to pass the <code>Range</code> object by value/as separate parameters through the loop (which is a general missing compiler optimization), and to introduce an <code>ExactSizeIterator</code> on top that allows the array to be created with the correct capacity from the beginning.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Stream.drop</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">stream</span> <span class=\"n\">value</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">drop</span> <span class=\"n\">n</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BoundedStream</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"kd\">extends</span> <span class=\"n\">Stream</span> <span class=\"n\">stream</span> <span class=\"n\">value</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_bounded</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Stream.drop</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">isNone</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BoundedStream</span> <span class=\"n\">Std.Range</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_bounded</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Stream.Map</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"n\">value'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value'</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">BoundedStream</span> <span class=\"n\">stream</span> <span class=\"n\">value</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedStream</span> <span class=\"o\">(</span><span class=\"n\">Stream.Map</span> <span class=\"n\">stream</span> <span class=\"n\">value</span> <span class=\"n\">value'</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">value'</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩))</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Stream.next</span><span class=\"bp\">?</span> <span class=\"n\">s.1</span>\n  <span class=\"n\">is_bounded</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Stream.map</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">stream</span> <span class=\"n\">value</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stream.Map</span> <span class=\"n\">stream</span> <span class=\"n\">value</span> <span class=\"n\">value'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BoundedStream.toArray</span> <span class=\"o\">[</span><span class=\"n\">BoundedStream</span> <span class=\"n\">stream</span> <span class=\"n\">value</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">value</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">s</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"n\">s</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Stream.next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">BoundedStream.is_bounded</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">BoundedStream.is_bounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">go</span> <span class=\"n\">s'</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">BoundedStream.is_bounded</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">BoundedStream.toArray</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">BoundedStream.toArray</span> <span class=\"o\">(</span><span class=\"n\">Stream.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Those sorries? Oh, nothing to worry, especially not that last one...</p>",
        "id": 273128232,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645726436
    },
    {
        "content": "<p><code>Stream.drop</code> is the identity function</p>",
        "id": 273128497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645726558
    },
    {
        "content": "<p>probably simpler to define <code>Stream.nth</code> instead of <code>drop</code></p>",
        "id": 273128641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645726608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273123620\">said</a>:</p>\n<blockquote>\n<p><code>Range.toArray</code> and <code>Range.toList</code> are no-brainers (in that the spec is clear and there is no downside to providing the function), everything else is speculative / comes as part of a larger untested infrastructure</p>\n</blockquote>\n<p>What do you mean by \"everything else\"? Did I miss something in the conversation?</p>",
        "id": 273129421,
        "sender_full_name": "Joseph O",
        "timestamp": 1645726941
    },
    {
        "content": "<p>I mean all the other proposals and ideas on this thread</p>",
        "id": 273129463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645726970
    },
    {
        "content": "<p>If you are looking for something to PR you can safely ignore them</p>",
        "id": 273129538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645727005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Setting aside the sketchy <code>Classical.choose (BoundedStream.is_bounded s)</code> termination measure, I wonder whether it would be advantageous to have something like rust's <code>ExactSizeIterator</code>: make the bound an explicit part of the structure and use it to pre-seed the size of the array</p>",
        "id": 273130068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645727251
    },
    {
        "content": "<p>Also the bound could depend on the input stream value</p>",
        "id": 273130243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645727326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273129538\">said</a>:</p>\n<blockquote>\n<p>If you are looking for something to PR you can safely ignore them</p>\n</blockquote>\n<p>Question is, where should i PR to. Mathlib4 or lean4?</p>",
        "id": 273135672,
        "sender_full_name": "Joseph O",
        "timestamp": 1645730053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/adding.20to.20std/near/272550463\">said</a>:</p>\n<blockquote>\n<p>My suggestion is to add to mathlib4, for example here -&gt; <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean</a></p>\n</blockquote>",
        "id": 273136519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645730490
    },
    {
        "content": "<p>Ah I  missed that. I was thinking about adding a file called <code>Range.lean</code>, in <code>Init.Data</code>, wince the <code>toList</code> and <code>toArray</code> methods have to be underst the <code>Std.Range</code> namespace</p>",
        "id": 273138257,
        "sender_full_name": "Joseph O",
        "timestamp": 1645731257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273130068\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Setting aside the sketchy <code>Classical.choose (BoundedStream.is_bounded s)</code> termination measure, I wonder whether it would be advantageous to have something like rust's <code>ExactSizeIterator</code>: make the bound an explicit part of the structure and use it to pre-seed the size of the array</p>\n</blockquote>\n<p>Yes, I mentioned that :) . But it should not be mandatory, you still want <code>toArray</code> to work on <code>filter</code>. Good point with <code>drop</code> though, haha, I'll leave that and fixing the metric as an exercise to the reader.</p>",
        "id": 273142271,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645733004
    },
    {
        "content": "<p>I do not know what Common Lisp's loop is, but I have heard talk of its mysteries.</p>",
        "id": 273298751,
        "sender_full_name": "Jay Sulzberger",
        "timestamp": 1645831477
    },
    {
        "content": "<p>I sent above in answer to Mario Carneiro's remark about the power of LEAN's \"iterator\" 'for in'.</p>",
        "id": 273299506,
        "sender_full_name": "Jay Sulzberger",
        "timestamp": 1645831881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273100232\">said</a>:</p>\n<blockquote>\n<p>I'd love to see a robust external iteration library for Lean in the future.</p>\n</blockquote>\n<p>I see that everyone just ignored my post:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273045434\">said</a>:</p>\n<blockquote>\n<p>You might find my  WIP <a href=\"https://github.com/tydeu/lean4-itertools\">lean4-itertools</a> library to be of interest. I was designed exactly to help do this kind of thing.</p>\n</blockquote>\n<p>It <em>is</em> an external iteration library that is attempting to do much of what is being discussed here. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"n\">range</span> <span class=\"mi\">10</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">array</span>\n</code></pre></div>\n<p>I would be really curious what people think of my approach to fill this need and how it could be improved.</p>",
        "id": 273360480,
        "sender_full_name": "Mac",
        "timestamp": 1645906204
    },
    {
        "content": "<p>Am I missing something? I only see <code>ForIn</code> methods in your library, which is internal iteration</p>",
        "id": 273363064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645909620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Huh?  <strong><em>Does some research.</em></strong> Oh, sorry! I had never heard of the distinction between internal vs external iteration before (at least with those terms). I thought by \"external iteration library\" you meant an external library (i.e., one outside the Lean core) for iteration. My apologies for the misunderstanding.</p>",
        "id": 273363874,
        "sender_full_name": "Mac",
        "timestamp": 1645910939
    },
    {
        "content": "<p>Hah, that indeed was a little ambiguous. I did mention the distinction in the very same comment though... :)</p>",
        "id": 273364086,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645911117
    },
    {
        "content": "<p>The mentioned <code>ExactSizeIterator</code> looks like another use case that should be hard to pull off using internal iteration btw</p>",
        "id": 273364149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645911164
    },
    {
        "content": "<p>There is also an interesting blog post about Rust switching from internal to external iteration, and then later adding back internal iteration as an optional optimization of external iterators. Some of the described problems are specific to Rust though. <a href=\"https://medium.com/@veedrac/rust-is-slow-and-i-am-the-cure-32facc0fdcb\">https://medium.com/@veedrac/rust-is-slow-and-i-am-the-cure-32facc0fdcb</a></p>",
        "id": 273364308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645911422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I would kind of expect that from an imperative low-level language like Rust. As I see it, external iteration is the natural form of iteration in imperative languages (as it is explicitly stateful) whereas internal iteration is the natural form of iteration for functional languages (as it appears stateless). External iteration is still useful in functional languages, it is just more unnatural (and, depending on the language, can be quite cumbersome).</p>",
        "id": 273364816,
        "sender_full_name": "Mac",
        "timestamp": 1645912157
    },
    {
        "content": "<p>^ Is there even a good use case for external iterators in Lean? Plenty of functional languages' collections libraries get away with just an internal iterators.</p>\n<p>Scala collections, most of the library functions are based on internal iteration but there's a class that all collections implement to expose an external iterator. Might be a valid design for Lean as well to give flexibility when people want it, at the cost of a bit of overhead</p>",
        "id": 273373962,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645924582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20this.20be.20added.20to.20lean.204.3F/near/273364149\">said</a>:</p>\n<blockquote>\n<p>The mentioned <code>ExactSizeIterator</code> looks like another use case that should be hard to pull off using internal iteration btw</p>\n</blockquote>\n<p>Also RE: this, some Scala collections have a \"sizeHint\" interface for mutable buffers, which I think would be fine here. Basically just lets you get a buffer given an expected size to be pre-allocated. This could probably be implemented for Lean's native arrays?</p>",
        "id": 273378729,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645932162
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ExpectedSize</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">expectedSize</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ToArray</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ForIn</span> <span class=\"n\">Id</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExpectedSize</span> <span class=\"n\">ρ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToArray</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">toArray</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">ExpectedSize.expectedSize</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">r</span> <span class=\"k\">do</span>\n      <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"n\">x</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>something simple like this?</p>",
        "id": 273379824,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645933702
    }
]