[
    {
        "content": "<p>Splitting this off from the <code>OfNat</code> thread in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a>: reading that one made me wonder if a more local solution to the issue in the title has been considered so far, something in the veins of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">neut</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Additive</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.neut</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.op</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Additive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kn\">open</span> <span class=\"n\">Additive</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Granted, this doesn't currently seem to work, probably because the term <code>open</code> does not register the new instances... but eventually it should, I assume? <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 269595572,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643299870
    },
    {
        "content": "<p>Another missing ingredient here might be a <em>binder</em> variant of <code>open</code> that can be used with <code>variable</code> to avoid repetition</p>",
        "id": 269595664,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643299913
    },
    {
        "content": "<p>Should <code>local instance</code> be <code>scoped instance</code> in your example?</p>",
        "id": 269597791,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643300777
    },
    {
        "content": "<p>One problem is that we mix additive notation and multiplicative notation a lot in the same statement... Either on different types with two different monoids, or on the same type if we have a ring.</p>",
        "id": 269597903,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643300846
    },
    {
        "content": "<p>Hah, that sure explains the failure! Thanks. <code>OfNat</code> still fails, but that's a detail...</p>",
        "id": 269597956,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643300879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Additive.2Fmultiplicative.20split.20in.20Lean.204/near/269597903\">said</a>:</p>\n<blockquote>\n<p>One problem is that we mix additive notation and multiplicative notation a lot in the same statement... Either on different types with two different monoids, or on the same type if we have a ring.</p>\n</blockquote>\n<p>Thanks, I feared so. In fact, my first approach was a custom macro that would be more selective in this regard</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Additive.ofMonoid</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.neut</span>\n  <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"n\">Monoid.op</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"with_additive \"</span> <span class=\"n\">α</span> <span class=\"s2\">\"; \"</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Additive.ofMonoid</span><span class=\"bp\">;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_additive</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 269598139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643300962
    },
    {
        "content": "<p>For rings and higher where there is no split, I assume there is no reason not to define the notation instances globally, just like in Lean 3</p>",
        "id": 269598336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643301042
    },
    {
        "content": "<p>How do you suggest to combine additive group and multiplicative monoid instances into a ring?</p>",
        "id": 269603903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643303184
    },
    {
        "content": "<p>Do you have a problematic instance in mind? There are many possible definitions of <code>Ring</code>, but the simplest one would start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">additive</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">A</span>\n  <span class=\"n\">multiplicative</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>and then you would set these fields explicitly when constructing a specific ring. Note that for types with multiple monoidal/... structures, you would use the name of the \"instance\" (which should be a regular <code>def</code> in this case to avoid ambiguity) explicitly as well when accessing theorems. For example, if there exist <code>Monoid.foo [Monoid A] ...</code> and <code>Nat.multiplicative : Monoid Nat</code>, you could access the multiplicative instance via <code>Nat.multiplicative.foo</code>.</p>",
        "id": 269606748,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643304300
    },
    {
        "content": "<blockquote>\n<p>but the simplest one would start with</p>\n</blockquote>\n<p>You're missing the distributivity axioms here.  Practically speaking, Ring already extends two mixed additive/multiplicative structures: MonoidWithZero and Distrib.  Also, further extending this kind of construction seems hard, you can't do <code>class CommRing (A) extends Ring A, CommMonoid A</code> anymore.</p>",
        "id": 269609078,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643305247
    },
    {
        "content": "<p>Oh, I'm sure I'm missing many things here. But that the structure merging only works with parents and not with explicit fields is a good point, thanks.</p>",
        "id": 269609855,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643305553
    },
    {
        "content": "<p>The distributivity axioms are interesting because they mention both + and *, so they'd probably be annoying to state in the proposed Ring definition.</p>",
        "id": 269610316,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643305736
    },
    {
        "content": "<p>I guess that depends on whether the hypothetical binder macro for activating the additive/multiplicative interpretation can also be used in <code>class/structure</code>. But, uh, that's getting a little too hypothetical.</p>",
        "id": 269611285,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643306097
    },
    {
        "content": "<p>Just to get a better feeling for the issue at hand, do mathlib people even mind the split? Or is it something set up once with metaprogramming and then everyone forgets about it?</p>",
        "id": 269611574,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643306187
    },
    {
        "content": "<p>I think some people even like it.</p>",
        "id": 269611610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643306201
    },
    {
        "content": "<p>Haha, then I have no intention to change that</p>",
        "id": 269611671,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643306224
    },
    {
        "content": "<p>One thing that is still annoying is that we need to define <code>class monoid</code> and <code>class add_monoid</code> manually, because you can't programmatically declare structures in Lean 3.  In Lean 4, we'll hopefully be able to say <code>@[toAdditive] class Monoid</code>.</p>",
        "id": 269611943,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643306306
    },
    {
        "content": "<p>When I arrived here I thought that treating multiplicative groups and additive groups as different objects was totally crazy because they're obviously the same and this just underlined how weirdly computer scientists thought about mathematics. Four years on I think it's a really insightful idea because it has shown me how mathematicians treat multiplication and addition as different objects in some kind of hierarchy that I didn't understand beforehand (which also contains the binary operators \\bub and [x,y]).</p>\n<p>Semirings are a natural example where a type has two monoid structures and our current solution works really well. A mathematician might in theory come along demanding that semirings with random different notation instead of + and * should exist but in practice nobody uses such a thing.</p>",
        "id": 269697595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643355920
    },
    {
        "content": "<p>One thing I haven't seen mentioned before would be to generate additive and multiplicative definitions from a more abstract monoid definition. That might at least look less weird to outsiders, although maybe has little else going for it</p>",
        "id": 270465154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643839250
    }
]