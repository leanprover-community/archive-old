[
    {
        "content": "<p>Hey,<br>\nIs there a point free version of the <code>|&gt;.</code> notation?</p>\n<p>For example, consider this implementation for <code>count</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.count</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.filter</span> <span class=\"n\">p</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>Instead, I would like to write something like: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.count'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;&gt;.</span><span class=\"n\">length</span>\n</code></pre></div>",
        "id": 316084115,
        "sender_full_name": "Anurudh Peduri",
        "timestamp": 1671121856
    },
    {
        "content": "<p>Is either of these two what you're looking for?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.count'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">length</span> <span class=\"bp\">∘</span> <span class=\"n\">filter</span> <span class=\"n\">p</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.count'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋅.</span><span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316087098,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1671122598
    },
    {
        "content": "<p>Yep! the second one. Thanks a lot!</p>\n<p>p.s. Is there some way to avoid the parenthesis? I guess not.</p>",
        "id": 316089051,
        "sender_full_name": "Anurudh Peduri",
        "timestamp": 1671123143
    },
    {
        "content": "<p>No, you need the parentheses. The notation <code>(foo ⋅ bar ⋅ baz ⋅)</code> is shorthand for <code>fun a b c =&gt; foo a bar b baz c</code>.</p>",
        "id": 316092376,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1671123993
    },
    {
        "content": "<p>Practically this may be what is needed, but that is not technically pointfree though.</p>",
        "id": 316095648,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1671124820
    },
    {
        "content": "<p>sure it is, there are no variable names in sight</p>",
        "id": 316095964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124910
    },
    {
        "content": "<p>TBH I think that's just a much better way to do pointfree than haskell style ascii soup</p>",
        "id": 316096120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124945
    }
]