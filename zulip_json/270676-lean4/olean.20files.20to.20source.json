[
    {
        "content": "<p>Hello,<br>\nIn an effort to convert the olean files created by <code>mathport</code> into source files, I am trying to make a tool that is able to read olean files.<br>\nI have found the <code>readModuleData</code> function from <code>Environment.lean</code> which is able to read an olean file into a <code>ModuleData</code> object. <br>\nUsing <code>toString</code> on the contents gives a basic first result but could be improved a lot. <br>\nDo you know which better functions could be used to display the expressions?</p>",
        "id": 232735766,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1617273346
    },
    {
        "content": "<p>The delaborator (as in \"de-elaborator\") maps <code>Expr</code> to <code>Syntax</code>, and can be customized e.g. by various <code>pp.&lt;flag&gt;</code> options. It is here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L382\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L382</a>. <code>ppTerm</code> goes from <code>Syntax</code> to <code>Format</code>: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter.lean#L22-L25\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter.lean#L22-L25</a></p>",
        "id": 232771748,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617289430
    },
    {
        "content": "<p>Hi!<br>\nUsing the delaborator as proposed I get fine results except that the implicit arguments of functions are displayed.<br>\nI guess I could solve that using the <code>pp.explicit</code> option but I don't manage to pass the options because I don't understand how the <code>OptionsPerPos</code> argument works or how to create it. <br>\nCould anyone help me a little?</p>",
        "id": 234132062,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618221497
    },
    {
        "content": "<p>The implicit arguments <em>are</em> displayed? That should not be the default.</p>",
        "id": 234132336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618221645
    },
    {
        "content": "<p>Yes... Maybe the expressions I get with <code>readModuleData</code> have nonly explicit arguments?</p>",
        "id": 234133688,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618222392
    },
    {
        "content": "<p>I mean maybe the implicit arguments are stored as explicit in the <code>olean</code> file so when I try to extract them back I cannot know if they were implicit or not</p>",
        "id": 234133863,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618222488
    },
    {
        "content": "<p>What is weird is that in the function definitions all the implicit arguments are printed as implicit but in function applications the implicit arguments are displayed and there is no <code>@</code> before the function name</p>",
        "id": 234138624,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618225077
    }
]