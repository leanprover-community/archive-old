[
    {
        "content": "<p>I'm working through \"The Hoare State Monad\" by Wouter Swierstra and have written up a Lean version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Hoare logic pre and post invariants</span>\n<span class=\"kd\">def</span> <span class=\"n\">Pre</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Post</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- Hoare Logic State monad returns a (s × α × post) structure</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HLOut</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">postCondition</span> <span class=\"o\">:</span> <span class=\"n\">Post</span> <span class=\"n\">s</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stateIn</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">stateOut</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">retVal</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">postInvariant</span> <span class=\"o\">:</span> <span class=\"n\">postCondition</span> <span class=\"n\">stateIn</span> <span class=\"n\">retVal</span> <span class=\"n\">stateOut</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- state monad with pre/post invariants</span>\n<span class=\"kd\">def</span> <span class=\"n\">HLStateM</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">Pre</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">Post</span> <span class=\"n\">s</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">HLOut</span> <span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"n\">post</span> <span class=\"n\">s₁</span>\n</code></pre></div>\n<p>I'd like to move the monad result type <code>α</code> to the end of the <code>HLStateM</code> type so that I can make Functor and Monad instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HLStateM</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">Pre</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">Post</span> <span class=\"n\">s</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">HLOut</span> <span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"n\">post</span> <span class=\"n\">s₁</span>\n</code></pre></div>\n<p>However, this is a problem since now the post invariant <code>Post s α</code> shows up in the declaration earlier than<code>α</code> upon which it depends . In fact I think Lean makes a second <code>α</code> instance specifically for <code>Post s α</code>. Of course the two <code>α</code> don't match so that's a no-go.</p>\n<p>The natural solution is to remove the <code>α</code> from <code>Post s α</code> so that it only depends on the state <code>s</code> but then I lose the ability to apply the invariant to the monad result <code>α</code>. I'm not well-versed in dependent type programming so I thought to check here to see if there are any alternatives or useful tricks I could use here.</p>",
        "id": 275535980,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1647447384
    },
    {
        "content": "<p>I think you should swap the two declarations <code>(α : Type) (post : Post s α)</code>. It's annoying if you want <code>(α : Type)</code> to be the last declaration because it's the output type of the monad but you can think of the output to be the pair <code>(α, post)</code>. You could encode that in the types by combining <code>α</code> and <code>post</code> into <code>post : { α : Type // Post s α }</code> but I would be careful going down that road because you risk intertwining the proof and the program definition.</p>",
        "id": 275572706,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647462459
    },
    {
        "content": "<p>I know I can always just use raw bind or (&gt;&gt;=) but I would sad to lose do notation. I could just embed the postcondition into the output type <code>HLOut</code> but that might make it difficult to infer types/proofs?</p>",
        "id": 275583552,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1647468251
    },
    {
        "content": "<p>I don't think you can fit the Hoare state monad into Haskell-style monads. The good news is that the notation system in Lean 4 is very flexible and you can make adapted notation for your monads.</p>",
        "id": 275585533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647469755
    }
]