[
    {
        "content": "<p>Hello,</p>\n<p>I am trying to prove that in the following code, <code>test_continuation</code> terminates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Continuation</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Continuation</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Continuation</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Continuation</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">done</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_string</span> <span class=\"o\">:</span> <span class=\"n\">Continuation</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Done: {a}\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Not done\"</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test_continuation</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Continuation</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test_continuation</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">test_continuation</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I know that <code>test_continuation</code> terminates (<code>eval</code> returns immediately), because there is no recursive call : it returns a function wrapped in a <code>Continuation</code> type.</p>\n<p>However, when I remove the <code>partial</code> keyword, Lean 4 shows the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">test_continuation</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">test_continuation</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>I tried to use <code>decreasing_by</code> <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">as shown in \"Theorem Proving in Lean 4\"</a>, but it generates a goal I cannot prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_continuation</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Continuation</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test_continuation</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n <span class=\"c1\">-- Goal is 2 &lt; a✝, with no hypothesis</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Could this be proved ? </p>\n<p>Thanks in advance</p>",
        "id": 320544099,
        "sender_full_name": "David Hamelin",
        "timestamp": 1673384541
    },
    {
        "content": "<p>Lean's termination checker isn't really about termination of the executed program, it's termination of the definition. Because <code>test_continuation 2</code> references <code>test_continuation 2</code> (even though it's not executed immediately), the termination check fails.</p>",
        "id": 320544844,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673384806
    },
    {
        "content": "<p>In lean's kernel, there's no concept of \"executing\" a program, there's just type theory. To build recursive functions at a low level, we use recursors generated from inductive data types, which require this kind of \"decreasing\" check.</p>",
        "id": 320544989,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673384869
    },
    {
        "content": "<p>My understanding is similar to what Sky is referring to. If you start reducing the expression rather than evaluating it, you'd get <code>step (fun () =&gt; step (fun () =&gt; step (fun () =&gt; step (fun () =&gt; ...))))</code>, and so on. So in that sense it fails to terminate.</p>",
        "id": 320544994,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673384871
    },
    {
        "content": "<p>But also, if you could prove termination, you'd get a contradiction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Continuation</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Continuation</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Continuation</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">uhoh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Continuation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">hx</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">test_continuation</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Continuation</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">test_continuation.eq_1</span> <span class=\"o\">:</span> <span class=\"n\">test_continuation</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test_continuation</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">test_continuation.eq_2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test_continuation</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">uhoh</span> <span class=\"o\">(</span><span class=\"n\">test_continuation</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">test_continuation.eq_1</span>\n</code></pre></div>",
        "id": 320546317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673385407
    },
    {
        "content": "<p>I see, thank you very much<br>\nI should read more about Lean's kernel to not get into another pitfall</p>",
        "id": 320553714,
        "sender_full_name": "David Hamelin",
        "timestamp": 1673388242
    },
    {
        "content": "<p>This would be a fine corecursive function, but Lean does not support that</p>",
        "id": 320556019,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673389184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"566134\">David Hamelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Cannot.20show.20termination.20of.20non-recursive.20function/near/320553714\">said</a>:</p>\n<blockquote>\n<p>I should read more about Lean's kernel to not get into another pitfall</p>\n</blockquote>\n<p>Feel free to keep asking questions about it too!</p>",
        "id": 320556323,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673389288
    }
]