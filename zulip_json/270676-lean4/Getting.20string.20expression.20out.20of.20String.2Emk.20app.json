[
    {
        "content": "<p>I have an expression that, when printed, outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">String.mk</span> <span class=\"o\">(</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Char</span> <span class=\"o\">(</span><span class=\"n\">Char.mk</span> <span class=\"o\">(</span><span class=\"n\">UInt32.mk</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"n\">UInt32.size</span> <span class=\"mi\">105</span> <span class=\"o\">(</span><span class=\"n\">_private.Init.Prelude.0.isValidChar_UInt32</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">105</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">105</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instLTNat</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">105</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">105</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It's a very long expression. How can I turn it into an <code>Expr.lit (.strVal bla) ble</code>?</p>",
        "id": 283679684,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653349688
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- TODO: Fix documentation</span>\n\n<span class=\"c1\">-- Pretty much lifted from Hspec</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">FailureReason</span>\n  <span class=\"bp\">|</span> <span class=\"n\">noReason</span>\n  <span class=\"bp\">|</span> <span class=\"n\">reason</span> <span class=\"o\">(</span><span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unmatch</span> <span class=\"o\">(</span><span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">got</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ε</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FailureReason.toString</span> <span class=\"o\">:</span> <span class=\"n\">FailureReason</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">noReason</span>              <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"× Failure!\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">reason</span>         <span class=\"n\">descr</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">descr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">unmatch</span> <span class=\"n\">descr</span> <span class=\"n\">exp</span> <span class=\"n\">got</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ebg</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Expected '{exp}' but got '{got}'\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">descr.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">ebg</span> <span class=\"k\">else</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{descr}: {ebg}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span>   <span class=\"n\">descr</span> <span class=\"n\">except</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">descr.isEmpty</span> <span class=\"k\">then</span> <span class=\"s2\">\"Exception thrown\"</span> <span class=\"k\">else</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{descr}\"</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Result</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span>   <span class=\"o\">(</span><span class=\"n\">successMessage</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"✓ Success!\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">reason</span> <span class=\"o\">:</span> <span class=\"n\">FailureReason</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">noReason</span><span class=\"o\">)</span> <span class=\"c1\">-- (Maybe Location)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Result.toString</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>   <span class=\"n\">msg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">msg</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"n\">rsn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rsn.toString</span>\n\n<span class=\"c1\">-- helper function for now, but can very easily add more robust descriptions in the generic specs</span>\n<span class=\"c1\">-- below</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofBool</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Result</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">fail</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Result.toBool</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- I went back and forth on this for a while, and arrived at this tentative definition of a Spec.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">SpecOn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- Specs can contain parameters to allow for an eventual way of writing specs</span>\n  <span class=\"n\">testParam</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"c1\">-- The actual property that's being tested</span>\n  <span class=\"c1\">-- I wanted this to be a literal `Prop`, but dealing with the `DecidablePred`</span>\n  <span class=\"c1\">-- instance was annoying</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">testParam</span> <span class=\"bp\">→</span> <span class=\"n\">Result</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">equals</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"o\">()</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Unit</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofBool</span> <span class=\"bp\">$</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- The idea is to write generic specs in the library like this one</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">alwaysEquals</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofBool</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Specs can also not contain parameters if they're specs about things that don't fit neatly into</span>\n<span class=\"c1\">-- a function type</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">doesntContain</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bx</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">bx</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofBool</span> <span class=\"bp\">$</span> <span class=\"n\">not</span> <span class=\"bp\">$</span> <span class=\"n\">bx.contains</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">depDoesntContain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofBool</span> <span class=\"bp\">$</span> <span class=\"n\">not</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">neverContains</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofBool</span> <span class=\"bp\">$</span> <span class=\"n\">not</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">SectionExample</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Basic Example type, as functionality is added it will probably get more complicated (custom messages</span>\n<span class=\"c1\">-- and configurations per example)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ExampleOf</span> <span class=\"o\">(</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span>\n  <span class=\"n\">exam</span>  <span class=\"o\">:</span> <span class=\"n\">spec.testParam</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ExamplesOf</span> <span class=\"o\">(</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"bp\">$</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">spec</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExampleOf</span>\n\n<span class=\"c1\">-- Tool to construct \"default\" examples from a given parameter, this will be helpful eventually when</span>\n<span class=\"c1\">-- examples become more complicated</span>\n<span class=\"kd\">def</span> <span class=\"n\">fromParam</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">spec.testParam</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">spec</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fromDescrParam</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">spec.testParam</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">spec</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">descr</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Check the example, and get a `Result`</span>\n<span class=\"kd\">def</span> <span class=\"n\">check</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exmp</span> <span class=\"o\">:</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">spec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">spec.prop</span> <span class=\"n\">exmp.exam</span>\n\n<span class=\"c1\">-- This can eventually be expanded so a run does more than just IO</span>\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exmp</span> <span class=\"o\">:</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">spec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">exmp.check</span>\n  <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">exmp.descr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">res.toString</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"it {d}: {res.toString}\"</span>\n  <span class=\"o\">(</span><span class=\"n\">res.toBool</span><span class=\"o\">,</span> <span class=\"n\">msg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ExampleOf</span>\n\n<span class=\"c1\">-- Ditto from above</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">ExamplesOf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fromParams</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">spec.testParam</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExamplesOf</span> <span class=\"n\">spec</span> <span class=\"o\">:=</span>\n  <span class=\"n\">input.map</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">fromParam</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">check</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exmp</span> <span class=\"o\">:</span> <span class=\"n\">ExamplesOf</span> <span class=\"n\">spec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">exmp.map</span> <span class=\"n\">ExampleOf.check</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">exmps</span> <span class=\"o\">:</span> <span class=\"n\">ExamplesOf</span> <span class=\"n\">spec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">exmps.map</span> <span class=\"n\">ExampleOf.run</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ExamplesOf</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SectionExample</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getBool</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Bool.true</span>  <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Bool.false</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                      <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getStr</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                  <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"not Expr.lit!\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">recoverTestResult</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">getBool</span><span class=\"bp\">!</span> <span class=\"bp\">$</span> <span class=\"n\">res.getArg</span><span class=\"bp\">!</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">getStr</span><span class=\"bp\">!</span> <span class=\"bp\">$</span> <span class=\"n\">res.getArg</span><span class=\"bp\">!</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#spec \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">`</span><span class=\"n\">assert</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">term</span> <span class=\"n\">none</span>\n    <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">term</span>\n    <span class=\"k\">if</span> <span class=\"n\">type.isAppOf</span> <span class=\"bp\">``</span><span class=\"n\">ExampleOf</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- a `Bool × String` tuple:</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">ExampleOf.run</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">term</span><span class=\"o\">])</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">res.getArg</span><span class=\"bp\">!</span> <span class=\"mi\">3</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">success</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">recoverTestResult</span> <span class=\"n\">res</span>\n      <span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">msg</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">msg</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">type.isAppOf</span> <span class=\"bp\">``</span><span class=\"n\">ExamplesOf</span> <span class=\"k\">then</span>\n       <span class=\"c1\">-- a list of `Bool × String`</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">ExamplesOf.run</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">term</span><span class=\"o\">])</span>\n      <span class=\"k\">match</span> <span class=\"n\">res.listLit</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.map</span> <span class=\"n\">recoverTestResult</span>\n        <span class=\"k\">let</span> <span class=\"n\">success</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">res.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span>\n        <span class=\"k\">let</span> <span class=\"n\">msg'</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"bp\">$</span> <span class=\"n\">res.map</span>\n          <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">msg</span>\n        <span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">msg'</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">throwError</span> <span class=\"n\">msg'</span>\n    <span class=\"k\">else</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Invalid term to run '#spec' with\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Once we have generic specs above, we can easily construct specs for particular examples</span>\n<span class=\"c1\">-- The idea is to hook this into a version of the syntax Arthur implemented in `YatimaSpec.lean`</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">fooSpec</span> <span class=\"o\">:</span> <span class=\"n\">SpecOn</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">alwaysEquals</span> <span class=\"n\">foo</span> <span class=\"mi\">4</span>\n\n<span class=\"c1\">-- Can create examples for the specs also using .fromParam</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooExample</span>  <span class=\"o\">:</span> <span class=\"n\">ExampleOf</span> <span class=\"n\">fooSpec</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">fromDescrParam</span> <span class=\"s2\">\"this message\"</span> <span class=\"mi\">4</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooExamples</span> <span class=\"o\">:</span> <span class=\"n\">ExamplesOf</span> <span class=\"n\">fooSpec</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">fromParams</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">spec</span> <span class=\"n\">fooExample</span>\n</code></pre></div>",
        "id": 283680884,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653350753
    },
    {
        "content": "<p>I was expecting it to output <code>\"this message\"</code> as a successful test, but it's panicking instead. I'm using <code>dbg_trace</code> to print out the expression that's being passed to the <code>getStr!</code> function</p>",
        "id": 283681001,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653350854
    },
    {
        "content": "<p>From what I can tell, you want <code>#spec</code> to evaluate the argument (like <code>#eval</code>) does.  For that you shouldn't use <code>reduce</code> (which uses the kernel reduction), but rather <code>evalExpr</code> (which uses the VM/native code).  There's a barebones version in core and a <a href=\"https://github.com/leanprover-community/mathlib4/blob/2ffca8d47239ce3b152ac6ed814dacda963c5677/Mathlib/Util/Eval.lean\">more featureful one in mathlib</a>.</p>",
        "id": 283708535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653378729
    },
    {
        "content": "<p>Thanks!! Will try soon <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 283724136,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653387867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how to use that function? it seems like it's doing stuff with the environment, which is a bit weird</p>",
        "id": 283759617,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653405067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Mathlib.Eval.evalExpr</span>\n        <span class=\"n\">Nat</span> <span class=\"c1\">-- result type</span>\n        <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- result type as Expr</span>\n        <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- thing to evaluate</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Elab.Term.evalExpr</span>\n        <span class=\"n\">Nat</span> <span class=\"c1\">-- result type</span>\n        <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- name of result type (needs to be top-level definition)</span>\n        <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- thing to evaluate</span>\n</code></pre></div>",
        "id": 283785094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653415996
    }
]