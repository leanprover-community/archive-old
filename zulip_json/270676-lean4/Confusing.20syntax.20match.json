[
    {
        "content": "<p>I am a bit baffled by the following error. <a href=\"/user_uploads/3121/pdRAAypJSSqC_XPoQ3nLNLo-/Screen-Shot-2022-07-21-at-11.02.08-PM.png\">Screenshot</a> instead of text since the error span is on the exact expected symbol.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pdRAAypJSSqC_XPoQ3nLNLo-/Screen-Shot-2022-07-21-at-11.02.08-PM.png\" title=\"Screenshot\"><img src=\"/user_uploads/3121/pdRAAypJSSqC_XPoQ3nLNLo-/Screen-Shot-2022-07-21-at-11.02.08-PM.png\"></a></div>",
        "id": 290433826,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658437415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Ah, that's unfortunate. Tokens are registered only when a surrounding parser is hooked into a parser category. So at this point, <code>blocking</code> is still an identifier.</p>",
        "id": 290434092,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658437542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> what does it mean for a surrounding parser to be hooked into a parser category? The <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> is that I would like to use this in a tactic like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"specialize_def\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">optional</span><span class=\"o\">(</span><span class=\"n\">blockingConsts</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>Should I invent a fake syntax category or ..?</p>",
        "id": 290434499,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658437777
    },
    {
        "content": "<p>At that point it is hooked into the <code>tactic</code> category :) . You just need to move that line up above <code>foo</code></p>",
        "id": 290434629,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658437847
    },
    {
        "content": "<p>Ah I see, but it doesn't work with <code>elab</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">blockingConsts</span> <span class=\"o\">:=</span> <span class=\"s2\">\"blocking\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"specialize_def\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">block</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">optional</span><span class=\"o\">(</span><span class=\"n\">blockingConsts</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> expected 'blocking' -/</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">blockingConsts</span><span class=\"bp\">|</span><span class=\"n\">blocking</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">block</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290434797,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658437944
    },
    {
        "content": "<p>Ahh, yeah, the generated parser is registered only after the entire command has been parsed</p>",
        "id": 290434874,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658438002
    }
]