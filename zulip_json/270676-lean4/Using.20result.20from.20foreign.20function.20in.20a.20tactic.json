[
    {
        "content": "<p>I've been playing around with the extern command and I was wondering how to use a foreign function in a tactic. Say that I have a C++ function that returns 5, and I want a tactic that tries to close the goal with 5. I've followed <a href=\"https://github.com/leanprover/lean4/tree/master/tests/compiler/foreign\">https://github.com/leanprover/lean4/tree/master/tests/compiler/foreign</a> to write the Makefile and the C++ code. Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cm\">/* MyFunction.cpp */</span><span class=\"w\"></span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/object.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/io.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">my_function</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"cm\">/* w */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_int_to_int</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MyFunction.lean</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kd\">@[extern \"my_function\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">myFunction</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Parser.Tactic.five</span><span class=\"o\">)</span> <span class=\"s2\">\"five\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic five]</span> <span class=\"kd\">def</span> <span class=\"n\">five</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">myFunction</span>\n  <span class=\"n\">assignExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">x.toNat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">::</span> <span class=\"n\">mvarIds'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n  <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">mvarIds'</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--def myFive : Nat := by five</span>\n<span class=\"c1\">--#eval myFive</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">myFunction</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>If I <code>leanmake</code> it as it is, it works fine and prints 5 as expected, however as soon as I try to use this <code>five</code> tactic, I get <code>could not find native implementation of external declaration 'myFunction'</code>. </p>\n<p>I've tried to split the code in different ways and tried to package the tactic as a plugin and then link it but with no success. What is the right way to make the implementation of <code>myFunction</code> visible to the tactic?</p>",
        "id": 251393497,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1630419836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span>  In order to use foreign functions in interpreted contexts (e.g., files run directly with the <code>lean</code> binary; editing in the editor, interactive theorem proving, etc.) you need  to build your library with <code>-shared</code> and pass it to <code>lean</code> as a plugin (with <code>--plugin path/to/built/shared/library.[dll|so]</code>). To provide such a plugin to the <code>lean</code> server that an VSCode uses you will need a new version of the extension that allows you pass the <code>--plugin</code> argument to server. This feature is already in the <code>master</code> branch (disclaimer: I was the one who added it), but you will need to wait until <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  releases a new version to get it by the ordinary distribution channels.</p>",
        "id": 251646487,
        "sender_full_name": "Mac",
        "timestamp": 1630540400
    },
    {
        "content": "<p>I see. What about simply using the plugin from <code>lean --run</code>? I thought that creating the shared object like this <code>leanc -shared -x none build/cpp/MyFunction.o -o build/cpp/MyFunction.so</code> and then running <code>lean --run FileUsingMyFunction.lean --plugin=build/cpp/MyFunction.so</code> would do the trick. But I get the following error :<code>.../MyFunction.so does not seem to contain a module 'MyFunction.Default'</code>. What does that mean?</p>",
        "id": 251857727,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1630664901
    }
]