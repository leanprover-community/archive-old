[
    {
        "content": "<p>Consider the structures as in the code below. The examples labeled 'bad' do not work because the types <code>x * y</code> and <code>x + y</code> do not match. Why can't Lean see these types are the same? I know one could use typeclasses, e.g. <code>class MulAdd (α : Type u) extends Mul α, Add α</code>, but this is not what I want to do.  Is there a way to get this 'diamond problem' to work well with the custom notation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Set</span> <span class=\"n\">where</span>\n  <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Mul</span> <span class=\"kd\">extends</span> <span class=\"n\">Set</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"bp\">→</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Add</span> <span class=\"kd\">extends</span> <span class=\"n\">Set</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"bp\">→</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">_</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Add.add</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulAdd</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span><span class=\"o\">,</span> <span class=\"n\">Add</span>\n\n<span class=\"c1\">-- Bad: types of `x * y` and `x + y` do not match</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">MulAdd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X.set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- Good: in this case they do match</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">MulAdd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X.set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X.mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">X.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Bad: fails for the same reason as above</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">MulAdd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X.set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X.mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Add.add</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- Good: this works, apparently because of the order \"Mul, Add\" as opposed to \"Add, Mul\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">MulAdd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X.set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">X.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>",
        "id": 304307753,
        "sender_full_name": "Jesse Vogel",
        "timestamp": 1665926114
    },
    {
        "content": "<p>If you use <code>set_option pp.all true</code>, the unification failure may appear more sensible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Test.Add.add.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6126</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.6127</span> <span class=\"bp\">?</span><span class=\"n\">m.6144</span> <span class=\"bp\">?</span><span class=\"n\">m.6153</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Test.Set.set.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6126</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Test.Add.toSet.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6126</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.6127</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6126</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Test.Set.set.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6087</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Test.Mul.toSet.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6087</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Test.MulAdd.toMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.6087</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6087</span>\n</code></pre></div>\n<p>Three parts of the diamond are present, but there is no indication to Lean that it should use the fourth part to complete the diamond. We can however give Lean the explicit hint to do so.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">MulAdd</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"n\">MulAdd.toAdd</span> <span class=\"n\">ma</span> <span class=\"bp\">⊢</span> <span class=\"n\">Add.toSet</span> <span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.toSet</span> <span class=\"o\">(</span><span class=\"n\">MulAdd.toMul</span> <span class=\"n\">ma</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The unification hint system is relatively unexplored so far though, so might not be completely stable yet</p>",
        "id": 304313134,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665929269
    }
]