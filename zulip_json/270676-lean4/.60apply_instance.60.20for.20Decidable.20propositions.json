[
    {
        "content": "<p>I have a type in LEAN4 with a total order <code>&lt;=</code> (<code>leq</code>) defined on it. I've marked it as an instance of the <code>HasLessEq</code> type class, and also created a decidable instance for the proposition <code>m &lt;= n</code>.</p>\n<p>I've defined the strict version of the above order  as<code>λ m n =&gt; (leq m n) ∧ ¬(m = n)</code>. Since all the connectives here - conjunction, negation, equality of terms in this type - are decidable, I would like to create a decidable instance of the proposition <code>m &lt; n</code> in terms of the already existing decidable instances. In LEAN3, I think the <code>infer_instance</code> tactic is used for this purpose; however, this does not seem to be defined in LEAN4. What is the equivalent way of doing this in LEAN4? Thanks in advance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_eq_leq_and_not_eq</span>\n  <span class=\"n\">infer_instance</span> <span class=\"c1\">-- does not work</span>\n <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247597166,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627571321
    },
    {
        "content": "<p><code>inferInstance</code> is the new name.</p>",
        "id": 247598440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1627571909
    },
    {
        "content": "<p>Even in lean3, the tactic is <code>apply_instance</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infer_instance/src\">src#infer_instance</a> is just a very simple wrapper</p>",
        "id": 247601051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627573214
    },
    {
        "content": "<p>Thank you. <code>exact inferInstance</code> worked.</p>",
        "id": 247604525,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627574874
    },
    {
        "content": "<p>I have another question related to the <code>rw</code> that I used. I created a helper theorem to unfold the definition of <code>lt</code>, but the theorem serves no other purpose. Is there a way to eliminate this theorem entirely?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lt_eq_leq_and_not_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">lt</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">leq</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 247604830,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627575030
    },
    {
        "content": "<p>You could use <code>change</code> or <code>show</code> (assuming they exist in Lean 4).</p>",
        "id": 247605786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627575484
    },
    {
        "content": "<p><code>change</code> doesn't exist yet</p>",
        "id": 247606584,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1627575884
    },
    {
        "content": "<p>Isn't change just <code>rw rfl</code> with a carefully given type ascription?</p>",
        "id": 247607102,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627576123
    },
    {
        "content": "<p>I think it's closer to <code>apply @id (the_type)</code></p>",
        "id": 247608818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627576934
    },
    {
        "content": "<p><code>show</code> exists and I think it acts like lean 3 <code>change</code></p>",
        "id": 247608894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627576992
    },
    {
        "content": "<p>actually I would be in support of dropping <code>change</code> and only using  <code>show</code>. If we need the rarely used behavior of the show tactic that selects a different goal with a matching type, maybe we should call it... <code>change</code></p>",
        "id": 247609148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627577114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/.60apply_instance.60.20for.20Decidable.20propositions/near/247605786\">said</a>:</p>\n<blockquote>\n<p>You could use <code>change</code> or <code>show</code> (assuming they exist in Lean 4).</p>\n</blockquote>\n<p>Thank you. <code>rw (show (lt m n = ((leq m n) ∧ ¬(m = n))) from rfl)\n</code> worked for me.</p>",
        "id": 247611012,
        "sender_full_name": "Anand Rao",
        "timestamp": 1627578025
    },
    {
        "content": "<p>I meant just the tactic <code>show lt m n = ((leq m n) ∧ ¬(m = n))</code>, if that exists.</p>",
        "id": 247628383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627586234
    },
    {
        "content": "<p>For decidability instances I think it's generally not a good idea to use <code>rw</code> because it can potentially block kernel reduction, and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_of_iff\">docs#decidable_of_iff</a> instead. But I guess rewriting along <code>rfl</code> is probably okay.</p>",
        "id": 247628523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627586297
    },
    {
        "content": "<p>(got beaten to my message)</p>",
        "id": 247628549,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627586315
    }
]