[
    {
        "content": "<p>Is there a way to overload <code>,</code> for <code>Prod.mk</code>?  (I don't see it defined as a notation in user-land...)</p>",
        "id": 230036387,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615558984
    },
    {
        "content": "<p>You can overload any syntax regardless of whether it is built-in or not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyProd.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyProd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230038144,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615559614
    },
    {
        "content": "<p>Note that the \"anonymous constructor\" <code>⟨x, y⟩</code> can usually be used instead of resorting to overloading</p>",
        "id": 230038331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615559667
    },
    {
        "content": "<p>Thanks!  I'm trying to overload it for category theoretic pairing, so I don't think the anonymous constructor will help here.  Is there a way to make the <code>,</code> notation variadic like the built-in one?</p>",
        "id": 230040694,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615560563
    },
    {
        "content": "<p>The direct translation of the built-in syntax would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myTuple</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">[</span><span class=\"n\">myTuple</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(())</span>          <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Unit.unit</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Prod.mk</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but that might not be a good idea since it overloads <code>(e)</code>... probably better to demand at least two elements and define a separate <code>notation \"(\" \")\"</code> if desired</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myTuple</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">[</span><span class=\"n\">myTuple</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Prod.mk</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">zs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Prod.mk</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">zs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 230043788,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615561637
    },
    {
        "content": "<p>Awesome, thanks!  For my project, I'm probably going to put these in typeclasses a la <code>HMul</code>.  (I guess this wouldn't work for the standard library because pattern matching wouldn't be able to see through the typeclass?)</p>",
        "id": 230045936,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615562393
    },
    {
        "content": "<p>In lean 3 you can put the <code>@[pattern]</code> attribute to make pattern matching see through the typeclass, which is used for things like matching on <code>0</code> and <code>n+1</code> on nat (both of which are actually typeclasses)</p>",
        "id": 230046444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562553
    }
]