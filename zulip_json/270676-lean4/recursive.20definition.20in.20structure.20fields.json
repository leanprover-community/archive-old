[
    {
        "content": "<p>I can't seem to make a recursive definition in a structure field. What is the syntax for making this work? I think in Lean 3 it was called <code>_match</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">â‰¤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">â‰¤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">_example</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">â‰¤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- unknown identifier 'bar'</span>\n</code></pre></div>",
        "id": 311420914,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669048476
    },
    {
        "content": "<p><del>If I try <code>Bar.bar</code> it errors because it can't find an instance of the typeclass (which makes some sense).</del></p>",
        "id": 311421030,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669048516
    },
    {
        "content": "<p>I assume you can simplify this to the case of defining a <code>structure</code> value, eliminating typeclass search from the example?</p>",
        "id": 311422444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669048969
    },
    {
        "content": "<p>Sure, edited</p>",
        "id": 311422546,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669049002
    },
    {
        "content": "<p>Using <code>| n + 1 =&gt; Nat.le_trans (Bar.bar myBar n) n.le_succ</code> leads to Lean complaining that it failed to show termination because structural recursion can't be used.</p>",
        "id": 311424528,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669049597
    },
    {
        "content": "<p>Maybe there's a more straightforward way but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">loop</span> <span class=\"n\">where</span>\n         <span class=\"n\">loop</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n              <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span>\n</code></pre></div>\n<p>(Alternatively, <code>let rec</code> instead of <code>where</code>.)</p>",
        "id": 311439859,
        "sender_full_name": "FrantiÅ¡ek SilvÃ¡Å¡i ðŸ¦‰",
        "timestamp": 1669054584
    },
    {
        "content": "<p>Thanks, yes, that works. I would still like to know if there is a built-in syntax which will make this work without a <code>let</code> binding.</p>",
        "id": 311440500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669054817
    },
    {
        "content": "<p>Not to my knowledge sadly :(</p>",
        "id": 311443844,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669055877
    }
]