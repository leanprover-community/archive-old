[
    {
        "content": "<p>Hey there, im currently trying to complete the current \"Theorem Proving in Lean 4\" guide and the exercises. but at the moment i am failing with the following hypothesis :   p ∨ false ↔ p </p>\n<p>ive came so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpf.elim</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span>\n            <span class=\"gr\">sorry</span>\n          <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>but i have no clue how to resolve the \"false is true in my assumption\" to an \"absurd\" or something like that.<br>\ncan somebody help me?</p>",
        "id": 263048997,
        "sender_full_name": "Gregor",
        "timestamp": 1638210502
    },
    {
        "content": "<p>I don't have an answer yet, but check out <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>.</p>",
        "id": 263049279,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638210643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263049279\">said</a>:</p>\n<blockquote>\n<p>I don't have an answer yet, but check out <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>.</p>\n</blockquote>\n<p>thx ^^, ive changed the post</p>",
        "id": 263049471,
        "sender_full_name": "Gregor",
        "timestamp": 1638210731
    },
    {
        "content": "<p>Does <code>False.elim</code> work?</p>",
        "id": 263049505,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638210746
    },
    {
        "content": "<p>False.elim doesn't seem to exist</p>",
        "id": 263049528,
        "sender_full_name": "Gregor",
        "timestamp": 1638210764
    },
    {
        "content": "<p>Ahh, it might be called <code>rec</code> or <code>cases</code> at the moment</p>",
        "id": 263049615,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638210807
    },
    {
        "content": "<p>so, how do i use it? something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">rec</span> <span class=\"n\">hf</span>\n</code></pre></div>\n<p>doesnt work</p>",
        "id": 263049758,
        "sender_full_name": "Gregor",
        "timestamp": 1638210868
    },
    {
        "content": "<p>hmm, so for me <code>False.elim</code> does exist</p>",
        "id": 263049818,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638210897
    },
    {
        "content": "<p><code>False.elim</code> should exist. Are you on stable or on nightly?</p>",
        "id": 263049823,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638210900
    },
    {
        "content": "<p>latest nightly</p>",
        "id": 263049854,
        "sender_full_name": "Gregor",
        "timestamp": 1638210917
    },
    {
        "content": "<p>whats the new equivalent for False.elim now?</p>",
        "id": 263049975,
        "sender_full_name": "Gregor",
        "timestamp": 1638210971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460732\">Gregor</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263049975\">said</a>:</p>\n<blockquote>\n<p>whats the new equivalent for False.elim now?</p>\n</blockquote>\n<p>I'll have to check, but <code>fun hf =&gt; False.rec (fun _ =&gt; p) hf</code> should work for you (in the spot where the <code>sorry</code> is).</p>",
        "id": 263050170,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211080
    },
    {
        "content": "<p>or rather, how would I use False.elim here?</p>",
        "id": 263050172,
        "sender_full_name": "Gregor",
        "timestamp": 1638211080
    },
    {
        "content": "<p>On 2021-11-24 <code>#check @False.elim</code> gives me <code>False.elim : {C : Sort u_1} → False → C</code> so it should still be there</p>",
        "id": 263050357,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638211153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460732\">@Gregor</span> are you spelling the <code>False</code> upper- or lowercase? It has to be uppercase.<br>\nThe value <code>false</code> is a <code>Bool</code>.</p>",
        "id": 263050522,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211221
    },
    {
        "content": "<p>if im writing uppercase, lean gives me an error</p>",
        "id": 263050611,
        "sender_full_name": "Gregor",
        "timestamp": 1638211278
    },
    {
        "content": "<p>hm okay, if it works on your site its my fault</p>",
        "id": 263050631,
        "sender_full_name": "Gregor",
        "timestamp": 1638211294
    },
    {
        "content": "<p>im going to reset my lean setup, maybe that will do the trick</p>",
        "id": 263050749,
        "sender_full_name": "Gregor",
        "timestamp": 1638211347
    },
    {
        "content": "<p>thank you for your advices^^</p>",
        "id": 263050767,
        "sender_full_name": "Gregor",
        "timestamp": 1638211358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460732\">Gregor</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263050749\">said</a>:</p>\n<blockquote>\n<p>im going to reset my lean setup, maybe that will do the trick</p>\n</blockquote>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpf.elim</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263050799,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211383
    },
    {
        "content": "<p>Note the uppercase <code>False</code>!</p>",
        "id": 263050814,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211392
    },
    {
        "content": "<p>Just to be clear, if you type <br>\n<code>#check False.elim</code> <br>\nthen you see something like <br>\n<code>unknown constant 'False.elim</code> in the infoview?</p>",
        "id": 263050866,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638211423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460732\">Gregor</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263050611\">said</a>:</p>\n<blockquote>\n<p>if im writing lowercase, lean gives me an error</p>\n</blockquote>\n<p>Exactly. That's because it has to be uppercase.</p>",
        "id": 263050872,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638211426
    },
    {
        "content": "<p>okay, ive booted a fresh and up-to-date docker environment</p>",
        "id": 263050881,
        "sender_full_name": "Gregor",
        "timestamp": 1638211430
    },
    {
        "content": "<p>so, lean still gives me an error when im trying to write False with an uppercase</p>",
        "id": 263050966,
        "sender_full_name": "Gregor",
        "timestamp": 1638211456
    },
    {
        "content": "<p>\"expected term\"</p>",
        "id": 263051072,
        "sender_full_name": "Gregor",
        "timestamp": 1638211519
    },
    {
        "content": "<p>Can you post a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of your code? It's easier that way</p>",
        "id": 263051141,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638211560
    },
    {
        "content": "<p>well, now lean4 wont start at all</p>",
        "id": 263052505,
        "sender_full_name": "Gregor",
        "timestamp": 1638212118
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">hpf</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">hpf.elim</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263052944,
        "sender_full_name": "Gregor",
        "timestamp": 1638212360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460732\">Gregor</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263052505\">said</a>:</p>\n<blockquote>\n<p>well, now lean4 wont start at all</p>\n</blockquote>\n<p>working againg, latest nightly build, but \"False\" wont be accepted</p>",
        "id": 263053002,
        "sender_full_name": "Gregor",
        "timestamp": 1638212396
    },
    {
        "content": "<p>lean says: \"expected term\"</p>",
        "id": 263053101,
        "sender_full_name": "Gregor",
        "timestamp": 1638212417
    },
    {
        "content": "<p>i dont understand</p>",
        "id": 263053125,
        "sender_full_name": "Gregor",
        "timestamp": 1638212423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263050872\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"460732\">Gregor</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263050611\">said</a>:</p>\n<blockquote>\n<p>if im writing lowercase, lean gives me an error</p>\n</blockquote>\n<p>Exactly. That's because it has to be uppercase.</p>\n</blockquote>\n<p>sorry, i mean \"uppercase\"</p>",
        "id": 263053275,
        "sender_full_name": "Gregor",
        "timestamp": 1638212501
    },
    {
        "content": "<p>It's bizarre for me, your code works perfectly fine on my side</p>",
        "id": 263053684,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638212712
    },
    {
        "content": "<p>i do not understand it either. i just did setup a fresh environment on <a href=\"http://gitpod.io\">gitpod.io</a>, and it doesnt work either</p>",
        "id": 263054652,
        "sender_full_name": "Gregor",
        "timestamp": 1638213223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263050866\">said</a>:</p>\n<blockquote>\n<p>Just to be clear, if you type <br>\n<code>#check False.elim</code> <br>\nthen you see something like <br>\n<code>unknown constant 'False.elim</code> in the infoview?</p>\n</blockquote>\n<p>ive i write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">#check</span> <span class=\"n\">False.elim</span>\n</code></pre></div>\n<p>it works. but i cant write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 263055528,
        "sender_full_name": "Gregor",
        "timestamp": 1638213653
    },
    {
        "content": "<p>Are you writing only that? Then indeed there is a term expected on the right side of :=</p>",
        "id": 263055714,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638213752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/need.20a.20little.20help.20.3A.20.20p.20.E2.88.A8.20false.20.E2.86.94.20p/near/263055714\">said</a>:</p>\n<blockquote>\n<p>Are you writing only that? Then indeed there is a term expected on the right side of :=</p>\n</blockquote>\n<p>no, im writing the full term</p>",
        "id": 263055752,
        "sender_full_name": "Gregor",
        "timestamp": 1638213773
    },
    {
        "content": "<p>Does it say  <code>expected term</code> or <code>expected token</code>?</p>",
        "id": 263056096,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213938
    },
    {
        "content": "<p>okay i have reinstalled it again, and now it seems to work</p>",
        "id": 263058286,
        "sender_full_name": "Gregor",
        "timestamp": 1638214944
    },
    {
        "content": "<p>thank you all for your tips ^^</p>",
        "id": 263058300,
        "sender_full_name": "Gregor",
        "timestamp": 1638214953
    }
]