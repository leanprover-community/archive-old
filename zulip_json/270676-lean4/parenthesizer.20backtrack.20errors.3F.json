[
    {
        "content": "<p>I see a bunch of \"HACK\" warnings in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Parenthesizer.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Parenthesizer.lean</a> Are errors @ <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Parenthesizer.lean#L539\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Parenthesizer.lean#L539</a> expected? Here is a short example that triggers it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Nat.mul2plus</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul2plus</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[delab app.Eq.mp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSimpHyp</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">appArg</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.getFVarLocalDecl</span> <span class=\"n\">arg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">userName</span>\n  <span class=\"k\">let</span> <span class=\"n\">lemmas</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Nat.mul2plus</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">mkIdent</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">lemmas</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- parenthesizer backtracking exception</span>\n</code></pre></div>",
        "id": 234431502,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618366979
    },
    {
        "content": "<p>Yes, these are expected/unavoidable if the syntax tree is malformed. In this case, it should be <code>$h:ident</code>.</p>",
        "id": 234452921,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618385030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks, indeed <code>$h:ident</code> fixes it. Any suggestions for how I might have diagnosed/debugged that on my own?</p>",
        "id": 234497215,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1618406511
    },
    {
        "content": "<p>My line of reasoning basically was \"I hope it's not a bug in the parenthesizer... so let's assume the syntax tree is malformed. <code>$lemmas:term</code> looks good, it is actually fed a term. So maybe <code>$h</code> is underspecified? Oh yeah, <code>at</code> also takes other arguments like <code>*</code>, so let's try <code>:ident</code>.\"</p>",
        "id": 234547746,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618423873
    },
    {
        "content": "<p>But using quotations correctly in non-trivial syntax is simply tough right now. Ideally the original code should fail to typecheck because <code>mkIdent</code> should return some <code>TSyntax `ident</code> while <code>$h</code> would expect some <code>TSyntax `location</code> (or maybe the former even automatically coerces into the latter in the right way), but that would be a pretty fundamental and extensive change.</p>",
        "id": 234548230,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618424057
    }
]