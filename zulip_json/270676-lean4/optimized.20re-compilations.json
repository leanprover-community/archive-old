[
    {
        "content": "<p>I noticed that any change in a lean file triggers a recompilation, like inserting a new line or calling a helper command like <code>#check</code>. Will lean4 be more optimized in these situations? e.g.: not recompile the whole thing if a file change can't change the machine state</p>",
        "id": 260260625,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636027885
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/416\">https://github.com/leanprover/lean4/issues/416</a></p>",
        "id": 260263003,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636029337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> are you using <code>leanpkg</code> or <code>lake</code>? <code>leanpkg</code> uses modification times to determine when to rebuild a file so any (asved) change to a file will trigger a recompilation (of dependent/importing modules). <code>lake</code>, on the other hand, uses hash traces where possible, so things like adding a newline or inserting then deleting a temporary command like <code>#check</code> should not trigger a recompilation (of dependent/importing modules).</p>",
        "id": 260299483,
        "sender_full_name": "Mac",
        "timestamp": 1636044406
    },
    {
        "content": "<p>I'm not sure. I'm inside VS Code using this extension: <a href=\"https://marketplace.visualstudio.com/items?itemName=jroesch.lean\">https://marketplace.visualstudio.com/items?itemName=jroesch.lean</a><br>\nIn the <code>connectivity.lean</code> file (in the <code>walks_and_trees</code> branch), when I add a new line the vertical orange progress bar signals that it's checking everything from that line and onward</p>",
        "id": 260300405,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636044724
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Uv6RbC0MQOqYp0Nbjbqr7V4x/ezgif-6-60adf937e85d.gif\">ezgif-6-60adf937e85d.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Uv6RbC0MQOqYp0Nbjbqr7V4x/ezgif-6-60adf937e85d.gif\" title=\"ezgif-6-60adf937e85d.gif\"><img src=\"/user_uploads/3121/Uv6RbC0MQOqYp0Nbjbqr7V4x/ezgif-6-60adf937e85d.gif\"></a></div>",
        "id": 260300932,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636044898
    },
    {
        "content": "<p>I think there was some prior discussion on enabling that as well. It's doable, but far from trivial.</p>",
        "id": 260301000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636044922
    },
    {
        "content": "<p>I don't think it's too problematic if the following proofs are light/fast, but could be bothersome for slower/heavier cases</p>",
        "id": 260304616,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636046279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/optimized.20re-compilations/near/260299483\">said</a>:</p>\n<blockquote>\n<p><code>lake</code>, on the other hand, uses hash traces where possible, so things like adding a newline or inserting then deleting a temporary command like <code>#check</code> should not trigger a recompilation (of dependent/importing modules).</p>\n</blockquote>\n<p>Why would adding a newline not change the hash? Are you preprocessing the file for whitespace somehow before hashing?</p>",
        "id": 260319755,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1636052996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I believe Mac is talking about hashes of the olean files -- adding newlines triggers recompilation of the module, but if the resulting olean is \"the same\" it won't cause dependent modules to be recompiled.</p>",
        "id": 260321910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636054116
    },
    {
        "content": "<p>Ah, I see. The <code>.olean</code> itself would still be recompiled but nothing further would.</p>",
        "id": 260322186,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1636054270
    },
    {
        "content": "<p>Unfortunately, the .olean file does change because of the embedded file positions. Except of course if, as Mac mentioned as the second example, you revert the change before compiling dependent modules.</p>",
        "id": 260327960,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636056850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> oh, that is unfortunate. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  However, there are still some things, like comment typo corrections that will not trigger full rebuilds of the chain.</p>",
        "id": 260332231,
        "sender_full_name": "Mac",
        "timestamp": 1636058824
    },
    {
        "content": "<p>...as long as they are not in docstrings :)</p>",
        "id": 260333409,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636059377
    },
    {
        "content": "<p>But if the idea is to split <code>.olean</code>s into \"signature-oleans\" and \"full-oleans\", then I guess the embedded file positions could end up in their own olean-variant as well?</p>",
        "id": 260333718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636059524
    },
    {
        "content": "<p>And that embedded-file-position-db-olean might be a lot faster to recompute.</p>",
        "id": 260333808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636059574
    }
]