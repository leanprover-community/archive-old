[
    {
        "content": "<p>I'm trying to get a toy example of the delaborator working. As I understand it, it's supposed to allow me to control how terms are printed out, ideally performing \"macro contraction\", allowing one to pretty-print macro-expanded terms. Towards this end, I'm trying to get the <code>i x</code> macro which expands to <code>MLIRTy.int x</code> to delaborate into <code>i x</code>. Here's some code I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Lean.Syntax</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Std</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Syntax</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n  <span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mlir_type</span>\n  <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">numLit</span> <span class=\"o\">:</span> <span class=\"n\">mlir_type</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">MLIRTy</span>\n\n  <span class=\"n\">syntax</span> <span class=\"s2\">\"[mlir_type|\"</span> <span class=\"n\">mlir_type</span> <span class=\"s2\">\"]\"</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n\n  <span class=\"n\">macro_rules</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">mlir_type</span><span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">MLIRTy.int</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">tyfoo</span> <span class=\"o\">:</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">mlir_type</span><span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">42</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">@[delab MLIRTy]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"mi\">1337</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">fields</span>\n\n  <span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- I expected: i 1337</span>\n<span class=\"c\">/-</span><span class=\"cm\">  MLIRTy.int 42 -/</span> <span class=\"c1\">-- not what I expect.</span>\n</code></pre></div>\n<p>I don't know if (1) my assumption about what the delaborator does is incorrect, or (2) I'm using the delaborator incorrectly?</p>",
        "id": 256799384,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633724268
    },
    {
        "content": "<p>Ah, it seems one can use <code>appUnexpander</code> to do what I need. I'll read how this relates to <code>Delab</code> now..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n  <span class=\"kn\">import</span> <span class=\"n\">Lean.Syntax</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Std</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.Syntax</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n\n  <span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mlir_type</span>\n  <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">numLit</span> <span class=\"o\">:</span> <span class=\"n\">mlir_type</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">MLIRTy</span>\n\n  <span class=\"n\">syntax</span> <span class=\"s2\">\"[mlir_type|\"</span> <span class=\"n\">mlir_type</span> <span class=\"s2\">\"]\"</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n\n  <span class=\"n\">macro_rules</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">mlir_type</span><span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">MLIRTy.int</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">@[appUnexpander MLIRTy.int]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"mi\">32</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MLIRTy</span> <span class=\"o\">:=</span> <span class=\"n\">MLIRTy.int</span> <span class=\"mi\">32</span>\n<span class=\"k\">#print</span> <span class=\"n\">x</span> <span class=\"c1\">-- i✝ 32</span>\n</code></pre></div>",
        "id": 256846776,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633762443
    }
]