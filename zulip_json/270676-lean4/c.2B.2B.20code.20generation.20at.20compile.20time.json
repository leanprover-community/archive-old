[
    {
        "content": "<p>Hello! One thing that <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> and I are trying to achieve is to have a way of marking a definition as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[karray_compile]</span>\n<span class=\"kd\">def</span> <span class=\"n\">KArray.fadd</span> <span class=\"o\">:</span> <span class=\"n\">KArray</span> <span class=\"n\">Float</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KArray</span> <span class=\"n\">Float</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">KArray</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">KArray.map2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And then some C code would be generated like this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// karray_fadd.cpp</span>\n\n<span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"nf\">fadd</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">karray_fadd</span><span class=\"p\">(</span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">_a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">_a2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">karray</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"n\">a1</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">karray_unbox</span><span class=\"p\">(</span><span class=\"n\">_a1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">karray</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"n\">a2</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">karray_unbox</span><span class=\"p\">(</span><span class=\"n\">_a2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Assume that the precise instructions of this translation can be extracted from <code>KArray</code>.</p>\n<p>So Tomas was thinking that maybe this can be achieved with not so much gymnastics. Does anyone know if it's possible?</p>\n<p>Another strategy would rely on <code>lake</code> being able to run custom pre-processing code before actually calling <code>leanc</code>. Is this possible? Or would it be a nice feature to have?</p>\n<p>The other strategy would be simply running a Lean script that does the preprocessing by ourselves, totally decoupled from <code>lake build</code>. But then It would make importing this package a bit troublesome because it would carry out this need for manual preprocessing calls.</p>\n<p>We'd like to know what you think <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 264481898,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639158295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Part of this is what I am hoping to achieve with <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a>, but it is still WIP on both the Lake and Alloy sides.</p>",
        "id": 264489713,
        "sender_full_name": "Mac",
        "timestamp": 1639161388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  I'm working on bindings to some crypto routines, and definitely would like the ability to either generate C within Lean or have Haskell-style FFI libraries for working with C functions within Lean.</p>",
        "id": 264490743,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639161873
    },
    {
        "content": "<p>To partially achieve what <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  described, I would like to know how to:</p>\n<ol>\n<li>Define a custom attribute</li>\n<li>Run some Lean code once you write down a definition with that attribute, ideally in <code>TermElabM</code> monad, and have access to the definition.</li>\n</ol>\n<p>This way I can inspect the expression of the definition and generate a file with C code. Can anyone point me where to start?</p>",
        "id": 264494123,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639163373
    }
]