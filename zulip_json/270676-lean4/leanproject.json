[
    {
        "content": "<p>Do you people think it would make sense to turn <code>mathlibtools</code> into a Lean 4 script? I think it would make the Lean setup easier by eliminating the Python dependency. Maybe even implementing such functionalities inside <code>lake</code> for unification purposes?</p>",
        "id": 268564646,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642609447
    },
    {
        "content": "<p>Yes, this should definitely go inside the build system</p>",
        "id": 268564810,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642609518
    },
    {
        "content": "<p>And would it embrace the Git functionalities as well? I totally understand (and I think it was a really good idea) that <code>mathlibtools</code> provides a simplified interface for Git, but would it make sense inside a build system?</p>",
        "id": 268565311,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642609712
    },
    {
        "content": "<p>(maybe the Git functionalities could be implemented in Mathlib4 <code>lake</code> scripts <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 268565614,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642609826
    },
    {
        "content": "<p>I don't know much about mathlibtools, so I don't know what that entails. But at least for e.g. retrieving projects, Nix for example has <code>nix flake clone github:leanprover-community/mathlib4</code>, so I would say yes.</p>",
        "id": 268566371,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642610145
    },
    {
        "content": "<p>The story might also change a bit if a package index is introduced, then the package manager is definitely the one that would implement cloning a package by name.</p>",
        "id": 268566649,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642610260
    },
    {
        "content": "<p>Personally I am very uncomfortable with tools performing git operations on repositories of mine they don't \"own\" and fully manage. I sort of hope any Lean4 tool doesn't attempt to do so by default, but I see that's balanced with trying to present a simpler interface for some who don't need all of git and unarguably has worked well for that audience. But it seems the two of those are separate goals, so hopefully it's separable in some way.</p>",
        "id": 268571019,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642611870
    },
    {
        "content": "<p><code>leanproject</code> uses git operations primarily for when it wants to download mathlib into your <code>_target</code> directory, a la <code>cargo</code>. Does <code>lake</code> do git downloads as well?</p>",
        "id": 268571700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642612103
    },
    {
        "content": "<p>it does expect to fully manage <code>_target</code>, so maybe that sidesteps your concern</p>",
        "id": 268571818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642612144
    },
    {
        "content": "<p><code>leanproject</code> seems to be able to open PRs:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ leanproject pr\nUsage: leanproject pr <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> BRANCH_NAME\nTry <span class=\"s1\">'leanproject pr -h'</span> <span class=\"k\">for</span> help.\n\nError: Missing argument <span class=\"s1\">'BRANCH_NAME'</span>.\n</code></pre></div>",
        "id": 268571868,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642612159
    },
    {
        "content": "<p>Huh. Don't you need a github API token to do that?</p>",
        "id": 268572028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642612210
    },
    {
        "content": "<p>I guess it simply opens a browser?</p>",
        "id": 268572094,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642612237
    },
    {
        "content": "<p>Hm, it did something unexpected:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>.../mathlib$ leanproject pr test-branch\nChecking out master...\nPulling...\n<span class=\"sb\">`</span>get-mathlib-cache<span class=\"sb\">`</span> is <span class=\"k\">for</span> projects which depend on mathlib, not <span class=\"k\">for</span> mathlib itself. Running <span class=\"sb\">`</span>get-cache<span class=\"sb\">`</span> instead.\nLooking <span class=\"k\">for</span> mathlib oleans <span class=\"k\">for</span> c72e709ea\n  locally...\n  remotely...\n  Found remote mathlib oleans\nUsing matching cache\n  c72e709ea: <span class=\"m\">100</span>%<span class=\"p\">|</span>██████████████████████████████████████████████████████████████████████████████████████████<span class=\"p\">|</span> <span class=\"m\">58</span>.7M/58.7M <span class=\"o\">[</span><span class=\"m\">00</span>:17&lt;<span class=\"m\">00</span>:00, <span class=\"m\">3</span>.50MB/s<span class=\"o\">]</span>\nApplying cache\n  files extracted: <span class=\"m\">2091</span> <span class=\"o\">[</span><span class=\"m\">00</span>:06, <span class=\"m\">304</span>.01/s<span class=\"o\">]</span>\nChecking out new branch...\nSetting remote tracking to origin...\nDone.\n</code></pre></div>",
        "id": 268572528,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642612398
    },
    {
        "content": "<p>Then</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>.../mathlib$ git st\nNo ramo test-branch\n</code></pre></div>\n<p>Seems like it just prepared my directory to work on something new</p>",
        "id": 268572714,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642612469
    },
    {
        "content": "<p>I would advise against running commands before reading their description :)</p>",
        "id": 268572902,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642612545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/leanproject/near/268571700\">said</a>:</p>\n<blockquote>\n<p><code>leanproject</code> uses git operations primarily for when it wants to download mathlib into your <code>_target</code> directory, a la <code>cargo</code>. Does <code>lake</code> do git downloads as well?</p>\n</blockquote>\n<p>Yeah -- touching repositories in _target is fine -- some stuff touches or used to touch the working tree though, most of which I see was changed to not do that now in <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/113\">https://github.com/leanprover-community/mathlib-tools/pull/113</a> -- that's the sort of stuff I hope is always avoided, and if it can't be is very loud and disablable</p>",
        "id": 268573044,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642612598
    },
    {
        "content": "<p>I don't think leanproject overwriting .lean files from cache has ever been a planned feature</p>",
        "id": 268573536,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642612781
    },
    {
        "content": "<p>And Lean 4's separation of .lean and .olean files makes it very hard to reimplement it as an unplanned feature</p>",
        "id": 268573707,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642612839
    },
    {
        "content": "<p>Same of course for \"don't run git stash on my repo, don't run git pull, etc.\". Long as it doesn't do those things then yeah that's all I was referring to.</p>",
        "id": 268573774,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642612872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/leanproject/near/268572528\">said</a>:</p>\n<blockquote>\n<p>Hm, it did something unexpected (based on the command name):</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ leanproject pr -h\nUsage: leanproject pr <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> BRANCH_NAME\n\n  Prepare to work on a mathlib pull-request on a new branch.\n</code></pre></div>",
        "id": 268573833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642612902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/leanproject/near/268572902\">said</a>:</p>\n<blockquote>\n<p>I would advise against running commands before reading their description :)</p>\n</blockquote>\n<p>That sounds really wise.</p>",
        "id": 268573959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642612960
    },
    {
        "content": "<p>Yeah, my bad. The description says it but we weren't able to have an approximate guess of what it would do</p>",
        "id": 268574087,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642613028
    },
    {
        "content": "<p>About the main topic: I very much hope that Lean 4 will have a very nice tool doing everything that <code>leanproject</code> currently does and more, and doing it better. <code>leanproject</code> was coded by a non-programmer as a stop-gap measure at a time where it became really painful to work on mathlib without such a tool. Then some stuff was added, sometimes by other people, bugs were introduced and some were fixed. But really we need a much better tool for Lean 4, and I very much hope I won't be writing it.</p>",
        "id": 268574299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642613116
    },
    {
        "content": "<p>Right, <code>leanproject</code> offers a nice tooling and I particularly love <code>get-cache</code>, for instance.<br>\nMaybe the question is: which tools should do what?<br>\nI think <code>lake</code> scripts provide a great set of possibilities for repository-specific needs, like helping out mathematicians to deal with Git (which is not a super friendly tool, even for some programmers)</p>\n<p>Edit: please note that I'm not complaining about <code>leanproject</code>, sorry if it looked like it. There would be nothing wrong if, say, it opened a PR page in the browser or something like that</p>",
        "id": 268575244,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642613500
    }
]