[
    {
        "content": "<p>If I'm writing a tactic and I want it to call an existing tactic, I know that I can use evalTactic for that.  For example, to call the rewrite tactic I can use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">not_imp_not</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>But now suppose I have <code>myid : Syntax</code>, which is an identifier for a hypothesis, and I want to apply the rewrite tactic to that hypothesis.  I thought I first I could write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">not_imp_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">myid</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but that doesn't work.  After studying the syntax for locations, I eventually determined that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mylocHyp</span> <span class=\"o\">:=</span> <span class=\"n\">mkNode</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Tactic.locationHyp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkNode</span> <span class=\"n\">nullKind</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">myid</span><span class=\"o\">],</span> <span class=\"n\">mkNode</span> <span class=\"n\">nullKind</span> <span class=\"bp\">#</span><span class=\"o\">[]]</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">not_imp_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">mylocHyp</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But there must be an easier way that doesn't require getting so far into the details of how various kinds of Syntax are defined.  Is there a better way to do this?</p>",
        "id": 286816253,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655742080
    },
    {
        "content": "<p>I've thought about this in the past and the best solution I could think of was that we could have helpers to create terms of <code>Syntax</code>, like we do for terms of <code>Expr</code></p>",
        "id": 286816896,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655742514
    },
    {
        "content": "<p>you can usually get syntax quotations to do it. Does <code>$myid:ident</code> not work?</p>",
        "id": 286817173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655742717
    },
    {
        "content": "<p>Thanks Mario.  Yes, <code>$myid:ident</code> works, although I don't understand why.  I don't think I really know what</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does.</p>",
        "id": 286820728,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655745128
    },
    {
        "content": "<p>When you write something like <code>← `(tactic| rewrite [not_imp_not] at $myid)</code>, it is somewhat ambiguous what syntactic category <code>$myid</code> could live in. This is not a problem when you have an actual piece of syntax there like <code>x</code> but when it is an antiquotation it could be any subtree, and I think that the default behavior of an unadorned antiquotation is to be the largest subtree that would fit there, meaning in this case that it is the <code>locationHyp</code>, i.e. the piece corresponding to <code>x y |-</code></p>",
        "id": 286822953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655746672
    },
    {
        "content": "<p>Using <code>$stx:ident</code> is saying \"parse this as if it was an identifier\", which ensures that the constructed <code>locationHyp</code> is of the form <code>x</code> or <code>y</code> or <code>h</code> rather than <code>h1 h2</code> or <code>h |-</code></p>",
        "id": 286823043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655746724
    }
]