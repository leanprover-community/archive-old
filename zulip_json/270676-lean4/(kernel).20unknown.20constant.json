[
    {
        "content": "<p>I have this error, which looks like a Lean bug. It seems that the double-nested dependency is required, the class parameter (specifically a class) is required as well, and the mutual recursion in the string functions is also needed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Class</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">empty</span><span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ss</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">str_T</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">ss.map</span> <span class=\"n\">str_S</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">str_S</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">ts.map</span> <span class=\"n\">str_T</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">error</span> <span class=\"o\">:=</span> <span class=\"n\">str_T</span> <span class=\"o\">(</span><span class=\"n\">T.mk</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n<span class=\"c1\">-- (kernel) unknown constant 'str_T._at.error._spec_1'</span>\n</code></pre></div>\n<p>Cc <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 283750650,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653401381
    },
    {
        "content": "<p>Temporary workaround for us: make the <code>str_*</code> functions total by not using <code>map</code>.</p>",
        "id": 283769123,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653408758
    },
    {
        "content": "<p>Pushed a fix for this.</p>",
        "id": 283966689,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653536390
    }
]