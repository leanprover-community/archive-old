[
    {
        "content": "<p>I have a hard time understanding how decidable equality works in Lean 4. I need an instance for <code>DecidableEq FVarId</code>. I managed to get it (and it works) but this was quite a fight. What is the one-liner I'm missing?</p>",
        "id": 301527989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484038
    },
    {
        "content": "<p>What is the context you need it in?</p>",
        "id": 301528160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664484101
    },
    {
        "content": "<p>I need the list of free variables appearing in an expression. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- Get the list of free variables occuring in the expression (with repetitions). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.getFVars_aux</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">FVarId</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">getFVars_aux</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">getFVars_aux</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">Id</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">Id</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">bt</span> <span class=\"n\">body</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">bt</span> <span class=\"bp\">++</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">bt</span> <span class=\"n\">body</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">bt</span> <span class=\"bp\">++</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">v</span> <span class=\"bp\">++</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVars_aux</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.dedup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">dedup</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"o\">::(</span><span class=\"n\">dedup</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>and I want to combine those two functions.</p>",
        "id": 301528606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484270
    },
    {
        "content": "<p>If you're not needing to prove anything, I've found it can be easier to derive <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BEq#doc\">docs4#BEq</a> and use that typeclass instead of <code>DecidableEq</code>. (Edit: easier in that it had been more reliable than deriving <code>DecidableEq</code>.)</p>",
        "id": 301529044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664484436
    },
    {
        "content": "<p>We usually prefer <code>BEq</code> for programming, which already has an instance for <code>FVarId</code>. You would need to replace <code>∈</code> with <code>List.contains</code> in that case.</p>",
        "id": 301529071,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664484446
    },
    {
        "content": "<p>As for the one-liner though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Lean.FVarId</span>\n</code></pre></div>",
        "id": 301529239,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664484525
    },
    {
        "content": "<p>So you mean I should have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.dedup'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">t.contains</span> <span class=\"n\">h</span> <span class=\"k\">then</span> <span class=\"n\">dedup'</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"o\">::(</span><span class=\"n\">dedup'</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 301529625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484649
    },
    {
        "content": "<p>Is this what we want in the standard library?</p>",
        "id": 301529676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484666
    },
    {
        "content": "<p>I mean having both <code>List.dedup</code> and <code>List.dedup'</code>?</p>",
        "id": 301529719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484679
    },
    {
        "content": "<p>Btw I noticed that <code>BEq FVarId</code> exist, I used it in my  <code>DecidableEq</code> instance.</p>",
        "id": 301529866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484733
    },
    {
        "content": "<p>I think that function already exists in Std</p>",
        "id": 301529884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664484742
    },
    {
        "content": "<p>Which one?</p>",
        "id": 301529991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484786
    },
    {
        "content": "<p>oh no it doesn't, <code>List.eraseDup</code> uses <code>DecidableEq</code></p>",
        "id": 301530016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664484794
    },
    {
        "content": "<p>Well I guess <code>List.pwFilter (. != .)</code> would work</p>",
        "id": 301530210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664484867
    },
    {
        "content": "<p>This is interesting but doesn't really answer the general question \"should we duplicate every function needing some decidability in a DecidableEq version and a BEq version?\"</p>",
        "id": 301530484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664484984
    },
    {
        "content": "<p>I think we should prefer BEq versions in Std with a <code>LawfulBEq</code> instance to bridge the gap to DecidableEq stuff</p>",
        "id": 301530575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485024
    },
    {
        "content": "<p>that position may need refinement depending on our experience</p>",
        "id": 301530641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485059
    },
    {
        "content": "<p>But also, in many cases we actually want more general than <code>BEq</code> or <code>DecidableEq</code> and just have a version that takes a predicate (in this case <code>pwFilter</code> is that, although the name is terrible)</p>",
        "id": 301530850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485134
    },
    {
        "content": "<p><code>dedupBy</code> makes more sense</p>",
        "id": 301530875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> We don't need duplicates of everything since there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instBEq#doc\">docs4#instBEq</a></p>",
        "id": 301531097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664485239
    },
    {
        "content": "<p>Another thing: I don't expect these list functions to get nearly as much use as they did in lean 3. There is almost always a better data structure for the job</p>",
        "id": 301531111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485246
    },
    {
        "content": "<p>in this case, can't you use a <code>FVarIdSet</code>?</p>",
        "id": 301531183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485273
    },
    {
        "content": "<p>I have no idea what is a <code>FVarIdSet</code>, but I can investigate.</p>",
        "id": 301531280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664485317
    },
    {
        "content": "<p>It's an RBSet of FVarIds</p>",
        "id": 301531341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485328
    },
    {
        "content": "<p>i.e. it sorts them</p>",
        "id": 301531375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485347
    },
    {
        "content": "<p>Great, I only need to investigate what is a RBSet</p>",
        "id": 301531395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664485355
    },
    {
        "content": "<p>it's a binary search tree</p>",
        "id": 301531415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485369
    },
    {
        "content": "<p>It's crucial in my use case that my list is ordered. I don't want a fancy data structure to reorder them.</p>",
        "id": 301531473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664485404
    },
    {
        "content": "<p>you could push them to an array as you find them</p>",
        "id": 301531528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485431
    },
    {
        "content": "<p>But then you still to check they aren't in the array before pushing, right?</p>",
        "id": 301531692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664485488
    },
    {
        "content": "<p>i.e. use a rbset or hashset (<code>FVarIdHashSet</code> also exists) to answer membership queries and then push new things into both the array and the set</p>",
        "id": 301531725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485504
    },
    {
        "content": "<p>How big are these lists? Would the overhead of a hashset for deduplication pay for itself?</p>",
        "id": 301531844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664485553
    },
    {
        "content": "<p>If you anticipate that the set won't be too large in most cases then it's probably better to just use the array and linear search</p>",
        "id": 301531924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485566
    },
    {
        "content": "<p>I anticipate the array will have at most four or five elements in the end.</p>",
        "id": 301532473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664485796
    },
    {
        "content": "<p>yeah, an array would be best for that</p>",
        "id": 301532671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485877
    },
    {
        "content": "<p>Oh, this function already exists</p>",
        "id": 301532835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.getFVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.collectFVars</span> <span class=\"o\">{}</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarIds</span>\n</code></pre></div>",
        "id": 301532936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485984
    },
    {
        "content": "<p>Does this version preserve the order in which the free variables occur in the expression?</p>",
        "id": 301533431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664486181
    },
    {
        "content": "<p>it does</p>",
        "id": 301533546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664486232
    },
    {
        "content": "<p>Great!</p>",
        "id": 301533611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664486258
    },
    {
        "content": "<p>although if you use fancy elaborators your fvars may not end up in the expected order inside the Expr in the first place</p>",
        "id": 301533669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664486280
    },
    {
        "content": "<p>it's a bit suspect to be relying on this</p>",
        "id": 301533742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664486295
    },
    {
        "content": "<p>(e.g. <code>have x := e; e'</code> elaborates to <code>(fun x =&gt; e') e</code>)</p>",
        "id": 301533822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664486327
    },
    {
        "content": "<p>I think I'm fine. But don't worry, I hope that very soon you'll be able to see the whole thing and rewrite it entirely.</p>",
        "id": 301533885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664486354
    },
    {
        "content": "<p>Why in programming is <code>BEq</code> preferable to <code>DecidableEq</code>? I personally use <code>DecidableEq</code> almost everywhere.</p>",
        "id": 301631747,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664540292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> My understanding is that, since <code>DecidableEq</code> implies <code>BEq</code>, you may as well use <code>BEq</code> in functions if they don't require equality proofs to operate. It seems related to a principle we use in mathlib that definitions are allowed to be nonsense on invalid inputs or when certain typeclasses cannot exist, but the theorems have these additional constraints as hypotheses.</p>\n<p>This also gives Lean a more approachable learning curve since programmers from other languages are familiar with implementing equality functions, but writing <code>DecidableEq</code> instances tends to take more experience. It might even be easier writing <code>DecidableEq</code> instances in many cases by first writing a <code>BEq</code> instance and then a <code>LawfulBEq</code> instance, since it separates the concerns of writing an efficient <code>BEq</code> and then proving it's correct.</p>",
        "id": 301653688,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664546417
    },
    {
        "content": "<p>Not just easier, I believe there is also reason to believe the compiler will generate better code using boolean logical operators rather than lots of if and match statements</p>",
        "id": 301686035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664555023
    }
]