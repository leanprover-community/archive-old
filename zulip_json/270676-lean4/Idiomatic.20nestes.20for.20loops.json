[
    {
        "content": "<p>I was doing the Advent of Code day 5, and I came across a problem where I would have to iterate a large board and compute something \"heavy\" for each pair (x, y). To avoid spoilers and simplify the problem, I am just computing if x = y for each position, and counting how many diagonals there are for x and y in [0:10000].  (For those who have done the problem, I know this is not the most efficient approach for the board given, but I don't care right now).</p>\n<p>I've implemented three versions:</p>\n<ul>\n<li>a naive recursive function, which stacks overflow.</li>\n<li>a tail recursive function, which is faster</li>\n<li>an IO version that uses for _ in [1:100000+1], which is slightly faster than the tail recursive.</li>\n</ul>\n<p>Source: <a href=\"https://gist.github.com/alcides/9fe28137561cca3fb708d1cb2ea8eeda\">https://gist.github.com/alcides/9fe28137561cca3fb708d1cb2ea8eeda</a></p>\n<p>First of all, props to Leo&amp;Cia for implementing the for in. But I was wondering if there is anyway I can do it without the function having the IO Monad, and if there was a more idiomatic/faster way of doing this.</p>\n<p>Another question: is there anything like Haskell's trace for lean4, where we can print things without having to change everything up the stack to be IO?</p>",
        "id": 263765094,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1638705840
    },
    {
        "content": "<blockquote>\n<p>But I was wondering if there is anyway I can do it without the function having the IO Monad, and if there was a more idiomatic/faster way of doing this.</p>\n</blockquote>\n<p>You should be able to use <code>do</code>, <code>for</code>and <code>let mut</code> even in pure functions. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<blockquote>\n<p>is there anything like Haskell's trace for lean4</p>\n</blockquote>\n<p><code>dbgTrace</code> and <code>dbgTraceVal</code> are what you're looking for. If you're doing performance debugging, <code>dbgTraceIfShared</code> is also helpful.</p>",
        "id": 263765400,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1638706295
    },
    {
        "content": "<p>Simpler than I thought. Now I went back to the docs to see how to improve them, but I found exactly that solution in sum'. Sorry for bothering with that.</p>\n<p>And thanks for the dbgTrace, that's exactly what I was looking for. But since it breaks tail recursion, I can only use it in the base case. But it works wonders in the for-in version! Guess that's the one I'll be using in the future.</p>",
        "id": 263765962,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1638707110
    },
    {
        "content": "<p>One issue with using <code>dbgTrace</code> in <code>for</code> loops is that reassignments below the <code>dbgTrace</code> won't work anymore. I usually just use <code>dbgTraceVal</code> :)</p>",
        "id": 263766275,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1638707593
    },
    {
        "content": "<p><code>dbg_trace</code> should fix that!</p>",
        "id": 263766342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638707691
    },
    {
        "content": "<p>That one doesn't show up in CTRL+Space autocomplete <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 263766371,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1638707756
    },
    {
        "content": "<p>True, macros do not show up there... yet. It is, however, mentioned in <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html\">https://leanprover.github.io/lean4/doc/dev/debugging.html</a> :) .</p>",
        "id": 263766571,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638708032
    }
]