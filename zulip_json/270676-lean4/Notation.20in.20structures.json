[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cocycle</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"c1\">-- I understand the reasons why I can't just call the function \"f\", but</span>\n<span class=\"c1\">-- this next line still looks ugly. Can I immediately replace</span>\n<span class=\"c1\">-- the computer science \"to_fun\" with the mathematician's \"f\" notation?</span>\n<span class=\"o\">(</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- this looks ugly</span>\n</code></pre></div>\n<p>I understand that it's a really good idea that the underlying function is always called <code>to_fun</code>.<br>\nCan I do something like this in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cocycle</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Right now in mathlib we use these stupid primed notation structure fields and then<br>\nnever use them again because they're full of explicit <code>to_fun</code>s. We then instantly<br>\ndefine a coercion to function and prove all the unprimed lemmas all rewritten <br>\nwith the coercions.</p>",
        "id": 230328543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615807289
    },
    {
        "content": "<p><del>You could define a <code>PreCocycle</code> with the first field, then the coercion, then extend it with the second field <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></del><br>\nedit: That doesn't really help</p>",
        "id": 230329274,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615807686
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cocycle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"c1\">-- I do not really understand why you need to have a definition.</span>\n<span class=\"o\">(</span><span class=\"n\">spec'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- this looks ugly</span>\n\n<span class=\"c1\">-- This next line looks a bit scary in Lean code written for mathematicians.</span>\n<span class=\"c1\">-- I also do not even know whether I'm supposed to run it within the namespace</span>\n<span class=\"c1\">-- or outside</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">cocycle</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">cocycle.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cocycle</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cocycle</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"c1\">-- finally fix the mess</span>\n<span class=\"kd\">def</span> <span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">c.spec'</span>\n<span class=\"kd\">end</span> <span class=\"n\">cocycle</span>\n<span class=\"c1\">-- rm -rf cocycle.*'</span>\n</code></pre></div>",
        "id": 230330247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615808200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Notation.20in.20structures/near/230328543\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I understand the reasons why I can't just call the function \"f\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why is that, exactly? Because fields cannot be marked <code>protected</code> in Lean 3? In Lean4 they can.</p>",
        "id": 230330735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615808499
    },
    {
        "content": "<p>because of all this stupid fuss about old and new structure commands</p>",
        "id": 230330824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615808540
    },
    {
        "content": "<p>you are forcing structures which we don't like on us and we are going to have to write automation to build them I think. Our structures grow in complex ways.</p>",
        "id": 230330859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615808568
    },
    {
        "content": "<p>I think we are already in dire need of automation for structures whose first member is to_fun</p>",
        "id": 230331117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615808715
    },
    {
        "content": "<p>Once we have that, dealing with new-style structures would be hidden away anyway</p>",
        "id": 230331379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615808844
    },
    {
        "content": "<p>Although it would be nice if lean could establish a canonical \"self reference\" name in structure fields</p>",
        "id": 230331463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615808895
    },
    {
        "content": "<p>Doc-gen uses <code>c</code> (as in, <code>c.to_fun</code>):</p>",
        "id": 230331477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615808902
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom\">docs#monoid_hom</a></p>",
        "id": 230331506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615808920
    },
    {
        "content": "<p>What is the advantage of doing that over printing the actually-correct <code>to_fun</code>?</p>",
        "id": 230331916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615809146
    },
    {
        "content": "<p>I take it back, it's not doc-gen; <code>#print</code> does it too in lean 3</p>",
        "id": 230332949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615809727
    },
    {
        "content": "<p>Sure, it's just not correct to present that output as the definition of the field</p>",
        "id": 230333111,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615809808
    },
    {
        "content": "<p>I'm not sure if everybody realizes this, but Lean 4 doesn't have <code>⇑</code> or <code>↑</code>.  The coercion is immediately eliminated after/during elaboration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">8</span>\n<span class=\"c1\">-- (fun (b : Nat) =&gt; 4 + b) 8 : Nat</span>\n</code></pre></div>",
        "id": 230333238,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615809885
    },
    {
        "content": "<p>So you can just use <code>to_fun</code> in the definition of the structure.  You only miss the nice notation, but it's the same result you'd get later with the coercion.</p>",
        "id": 230333330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615809944
    },
    {
        "content": "<p>Does this mean that all our simp lemmas which relying on \"seeing\" the coercion in order to match are no longer viable?</p>",
        "id": 230334852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615810785
    },
    {
        "content": "<p>You still see the <code>to_fun</code> function.</p>",
        "id": 230335529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615811105
    },
    {
        "content": "<p>Do you know the reason for this design choice? Coercions are not only a feature for user-input, but also extremely important for pretty-printing readability. Is there a way to enable a default pretty-printing using <code>↑</code>? I mean, if <code>e</code> is an equiv and there is <code>e.to_fun</code> in an expression to be pretty-printed, can one make sure that <code>⇑e</code> is pretty-printed instead (where I don't care about the internals of what the arrow means to Lean)?</p>",
        "id": 230338283,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615812506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> There is no short answer here. I will try to summarize</p>\n<ul>\n<li>Lean 3 coercion system contains a few hacks. Example: the coercion from <code>Prop</code> to <code>Bool</code> is a hard-coded hack in the elaborator. We wanted to eliminate this hack in Lean 4.</li>\n<li>We need dependent coercions for expressing the coercion from <code>Prop</code> to <code>Bool</code> since only decidable propositions can be coerced.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decPropToBool</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"kt\">Prop</span> <span class=\"n\">p</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">decide</span> <span class=\"n\">p</span>\n</code></pre></div>\n<ul>\n<li>Thus, the <code>coe</code> type is</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CoeT</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>This function is quite messy to handle at <code>simp</code> because of the dependency. So, we have considered the following alternatives:<br>\n1- Remove dependent coercions, and use the Lean 3 hack. Discarded because it is hackish and has limitations.<br>\n2- Require the user to show that <code>CoeDep α a β</code> types are subsingletons (<code>CoeT</code> is just a layer on top of <code>CoeDep</code>). Then, we would be able to have a congruence lemma of the form <code>[CoeT α a β] -&gt; [CoeT α a' β] -&gt; (h : a = a') -&gt; coe a = coe a'</code>. Discarded because it would increase the complexity even more. <br>\n3- Distinguish regular coercions from dependent coercions, and expand eagerly only dependent ones. Discarded because it is not a uniform solution.<br>\n4- Expand coercions eagerly. (selected this one). Moreover, after the expansion, the terms were way simpler to manipulate in proofs.<br>\nI can see this may be inconvenient when generating documentation (e.g., HTML pages from elaborated declarations).</p>\n<p>That all being said. We are willing to put hooks on the system to allow users to customize this kind of behavior. There are many possibilities, and I have realized that it is impossible to make everybody happy :) For my goals, alternative 4 is great.</p>",
        "id": 230377277,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615825656
    },
    {
        "content": "<p>I also think that alternative 4 is great, for clarity and everything. I would be perfectly happy with this alternative together with a system to register some notations in the pretty-printer, like <code>when e is an equiv, print e.to_fun as e</code> (or <code>e</code> with a weird arrow or whatever is nicer than <code>e.to_fun</code>). Of course, I don't have any idea if/how this can be implemented, and if/how it creates problems for roundtrips, and so on, so you may safely discard this as wishful thinking :-)</p>",
        "id": 230380142,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615826848
    },
    {
        "content": "<p>By the way, there <del>is</del> was a long standing issue in lean 3 that may be related. Currently, it's not possible for <code>simp</code> to rewrite inside the function part of a <code>coe_fn</code> application, like <code>coe_fn (f + 0) x</code>, because <code>coe_fn</code> allows coercion to dependent functions (even if the particular instance in question is not dependent). This means that often <code>(f + 0).to_fun x</code> will simplify where <code>coe_fn (f + 0) x</code> will not, which has been used to argue against using function coercions in spite of their other advantages. (I remember this coming up in category theory)</p>",
        "id": 230380196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615826870
    },
    {
        "content": "<p>This has been solved a long time ago by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  in the case of non-dependent coercions, I think.</p>",
        "id": 230380329,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615826916
    },
    {
        "content": "<p>well we'll be revisiting this issue in lean 4 I think</p>",
        "id": 230380436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615826956
    },
    {
        "content": "<p>This was <a href=\"https://github.com/leanprover-community/lean/issues/209\">lean#209</a>, if I'm not mistaken. It made a huge difference for simp usability together with coercions. If coercions are gone in Lean 4 (apart from user input), I don't see why we should get problems with this in Lean 4.</p>",
        "id": 230381521,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615827337
    },
    {
        "content": "<p>I'm on board with coercions getting eliminated at parse time; less syntax to recognize and pattern match on is always a good thing. We probably want to keep the coercion functions themselves recognizable, but that's a problem that can be solved by code quality and review stuff</p>",
        "id": 230381793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615827453
    },
    {
        "content": "<p>for example if <code>coe x</code> expands to <code>nat.cast x</code> then the simp lemmas will talk about <code>nat.cast</code>, but if <code>coe x</code> expands to <code>nat.recOn x 0 (+1)</code> then that would be bad for automation and probably also for the printer</p>",
        "id": 230382109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615827558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Notation.20in.20structures/near/230330859\">said</a>:</p>\n<blockquote>\n<p>you are forcing structures which we don't like on us and we are going to have to write automation to build them I think. Our structures grow in complex ways.</p>\n</blockquote>\n<p>I think it is a bit much to say we are <em>forcing</em> anything on you. From my point of view, we are just not implementing what <em>you</em> want :)<br>\nWe also took the time to explain why. Finally, as I pointed out over and over again, Lean is extensible, users may implement their own <code>structure</code> command and be happy.</p>",
        "id": 230384438,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615828384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Notation.20in.20structures/near/230384438\">said</a>:</p>\n<blockquote>\n<p>I think it is a bit much to say we are <em>forcing</em> anything on you. From my point of view, we are just not implementing what <em>you</em> want :)</p>\n</blockquote>\n<p>Thanks a lot for the answer Leo. I'm beginning to understand the philosophy better now.</p>\n<p>I might have ideas about how to use coercions to functions in a slick manner within some structure format to make Lean code look more comprehensible to mathematicians, and I came here asking whether this should be part of Lean's default <code>structure</code> command, but you're pointing out (something which is probably obvious to all the programming people) that you have made structures already and the point is that Lean 4 has the flexibility for me to be able to make what I want myself (e.g. an <em>entire new structure command</em> or an old-structure-cmd emulator) rather than asking you to change anything at your end.</p>\n<p>Sorry for being so slow :-) I have not yet really properly understood the consequences of the change from Lean 3 to Lean 4.</p>",
        "id": 230476624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615883738
    },
    {
        "content": "<p>Is there anything special about fields in structures, or is it entirely configurable?  That is, suppose I want to define a variant of a structure command that lets me mix <code>def</code>s and <code>instance</code>s and even other <code>structure</code>s in the middle (closer to Agda's record/data declarations), such that later fields are allowed to refer to these in their types.  Is there a way to set things up so that the <code>.</code> notation and record builder notation, etc, work with whatever these fields desugar to?</p>",
        "id": 230510319,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615900876
    },
    {
        "content": "<p>These features categorize some inductives as \"structure-like\" or \"structures\", see <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Structure.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Structure.lean</a><br>\nIn principle, you can define your own inductive and projection functions that fulfill these predicates. I'm not completely sure what desugaring you have in mind, but if you can compile it down to an inductive, it seems likely you can also do so down to a (simpler) <code>structure</code>, in which case you would not have to worry about this aspect.</p>",
        "id": 230512505,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615901780
    },
    {
        "content": "<p>The compilation scheme I have in mind is to compile it down to a structure where all of the definitions and instances (and also structures, though this will be harder) have been inlined into the field types.  Then I can define new constructors and fields which just adjust the type signatures (or in the case of inlined structures, adjust the data presentation).</p>\n<p>That is, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stucture</span> <span class=\"n\">Cat</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasArr</span> <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Arr</span> <span class=\"o\">}</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">},</span> <span class=\"n\">HasArr.arr</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>would be compiled into something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stucture</span> <span class=\"n\">Cat</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Arr'</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">id</span> <span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">HasArr.arr</span> <span class=\"n\">Obj'</span> <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Arr'</span> <span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Obj'</span>\n<span class=\"kd\">def</span> <span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"n\">Arr'</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">HasArr</span> <span class=\"n\">Arr</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">HasArr.arr</span> <span class=\"n\">Obj</span> <span class=\"n\">inst</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Hm, I guess retyping the constructor here is quite tricky, but this should give a sense of what I'm thinking of</p>",
        "id": 230514632,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615902615
    },
    {
        "content": "<p>I see. Defining a custom constructor would be a problem for the current structure instance notation (<code>{...}</code>), though custom fields are less of an issue since dot notation will work for any declaration that is inside the namespace of the given term's type. The only thing you currently lose is access to inherited custom fields.</p>",
        "id": 230516340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615903272
    }
]