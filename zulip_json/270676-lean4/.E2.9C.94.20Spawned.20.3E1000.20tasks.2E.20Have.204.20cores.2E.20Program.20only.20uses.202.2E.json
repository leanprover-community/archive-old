[
    {
        "content": "<p>Hello. I have a program which is trying to spawn over a thousand tasks. I have a 4 core laptop with hyperthreading disabled (suspect), but the program only uses 2 cores. The C++ function hardware_concurrency() returns 4, as does nproc. I do not see why Lean's runtime is using only 2 threads.</p>\n<p>(Initially asked in General)<br>\n<a href=\"#narrow/stream/113488-general/topic/Spawned.20.3E1000.20tasks.2E.20Have.204.20cores.2C.20but.20the.20program.20uses.202/near/266434964\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Spawned.20.3E1000.20tasks.2E.20Have.204.20cores.2C.20but.20the.20program.20uses.202/near/266434964</a></p>",
        "id": 266436027,
        "sender_full_name": "Sofia",
        "timestamp": 1640877821
    },
    {
        "content": "<p>That sounds like <a href=\"https://github.com/leanprover/lean4/commit/b73248466329b8bcc9b3d34fb7e3bef3980ba7df\">https://github.com/leanprover/lean4/commit/b73248466329b8bcc9b3d34fb7e3bef3980ba7df</a>. Are you on a recent nightly?</p>",
        "id": 266436821,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640878652
    },
    {
        "content": "<p>Very fresh nightly, yes.</p>",
        "id": 266436903,
        "sender_full_name": "Sofia",
        "timestamp": 1640878725
    },
    {
        "content": "<p>I saw this commit earlier.</p>",
        "id": 266436914,
        "sender_full_name": "Sofia",
        "timestamp": 1640878739
    },
    {
        "content": "<p>Mmh. It might not be the only bug in that direction.</p>",
        "id": 266437014,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640878834
    },
    {
        "content": "<p>Spawned 2417 tasks -&gt; Now I have 3 threads.</p>",
        "id": 266437838,
        "sender_full_name": "Sofia",
        "timestamp": 1640879601
    },
    {
        "content": "<p>Re-running my code, it only did 2 again. So whatever it is, it is nondeterminstic !!</p>",
        "id": 266437966,
        "sender_full_name": "Sofia",
        "timestamp": 1640879703
    },
    {
        "content": "<p>Minimal test, this returns \"1s\" up to <code>$(nproc) - 1</code> for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"tasks\"</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tasks</span> <span class=\"bp\">←</span> <span class=\"n\">List.range</span> <span class=\"mi\">15</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.asTask</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.sleep</span> <span class=\"mi\">1000</span>\n  <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">tasks</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">IO.wait</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 266438596,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640880202
    },
    {
        "content": "<p>And up to nproc if compiled into an executable</p>",
        "id": 266438738,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640880329
    },
    {
        "content": "<p>Running that only returned this <code>error: tasks 15s</code>.</p>",
        "id": 266438836,
        "sender_full_name": "Sofia",
        "timestamp": 1640880419
    },
    {
        "content": "<p>I only get one thread when running that as an executable.</p>",
        "id": 266438993,
        "sender_full_name": "Sofia",
        "timestamp": 1640880556
    },
    {
        "content": "<p>Huh. With pinned release:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">28</span> <span class=\"n\">scratch.lean</span>\n<span class=\"n\">tasks</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"n\">s</span>\n<span class=\"bp\">$</span> <span class=\"n\">cat</span> <span class=\"n\">scratch.lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"tasks\"</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tasks</span> <span class=\"bp\">←</span> <span class=\"n\">List.range</span> <span class=\"mi\">16</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.asTask</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.sleep</span> <span class=\"mi\">1000</span>\n  <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">tasks</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">IO.wait</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 266439023,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640880593
    },
    {
        "content": "<p>Downloading.</p>",
        "id": 266439114,
        "sender_full_name": "Sofia",
        "timestamp": 1640880675
    },
    {
        "content": "<p>4s.</p>",
        "id": 266439134,
        "sender_full_name": "Sofia",
        "timestamp": 1640880703
    },
    {
        "content": "<p>Also without the pinning.</p>",
        "id": 266439188,
        "sender_full_name": "Sofia",
        "timestamp": 1640880731
    },
    {
        "content": "<p>Ah no that took your pinned version.</p>",
        "id": 266439201,
        "sender_full_name": "Sofia",
        "timestamp": 1640880755
    },
    {
        "content": "<p>16s in my usual directory. Where lean --version says .. old 4.0.0-nightly-2021-11-12</p>",
        "id": 266439232,
        "sender_full_name": "Sofia",
        "timestamp": 1640880804
    },
    {
        "content": "<p>Ah! My lean-toolchain file is stale!!!</p>",
        "id": 266439260,
        "sender_full_name": "Sofia",
        "timestamp": 1640880835
    },
    {
        "content": "<p>Few <code>do</code> -&gt; <code>Id.run do</code> patches later... yay 4x threads. :D</p>",
        "id": 266439443,
        "sender_full_name": "Sofia",
        "timestamp": 1640881020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> has marked this topic as resolved.</p>",
        "id": 266439450,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640881026
    },
    {
        "content": "<p>Huh. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> How do you use that <code>timeit</code> properly?</p>\n<p>I have some code which appears to be very slow, visible with a print above and below, but the timing result is only <code>0.0113ms</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">new</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"sort\"</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">new.qsort</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hash</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">dedup</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Don't be lazy.. {hash q}\"</span>\n    <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 266443763,
        "sender_full_name": "Sofia",
        "timestamp": 1640885090
    },
    {
        "content": "<p>It can be tricky, Lean might float out pure parts so that you're only timing the <code>println</code></p>",
        "id": 266443868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640885227
    },
    {
        "content": "<p>Is there some kind of <code>extern crate test; test::black_box(foo)</code> ? (The Rust-lang method to prevent this problem)</p>",
        "id": 266443883,
        "sender_full_name": "Sofia",
        "timestamp": 1640885264
    },
    {
        "content": "<p>Moving the code into a <code>@[noinline] def ... : IO ...</code> should achieve something like that. If the expensive term is closed, you might also need <code>set_option compiler.extract_closed false</code> before it.</p>",
        "id": 266444219,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640885634
    },
    {
        "content": "<p>\"sort 17.5s\" here we go.</p>\n<p>Thanks.</p>",
        "id": 266444665,
        "sender_full_name": "Sofia",
        "timestamp": 1640886034
    }
]