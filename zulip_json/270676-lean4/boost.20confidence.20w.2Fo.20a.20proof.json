[
    {
        "content": "<p>The discussion <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/quickchecks.20.02klzzwxh.3A0000.03.20monad\">#lean4 &gt; quickchecks <code>Gen</code> monad</a> led me to a general question. Is there anything that Lean can offer to improve the confidence of a conjecture in absence of a (formal) proof? </p>\n<p>I ask this here instead of #general because Lean 4 compiles down to a binary so I can dream I can run numerical tests on a question somewhat robustly.</p>",
        "id": 273545069,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078330
    },
    {
        "content": "<p>Well that'd be tests and its strong type system...although you could argue that in order to actually use said strong type system to its fullest potential you have to write proofs, even if its not direclty about lemmas but \"just\" about stuff like \"this index is within bounds\" etc.</p>",
        "id": 273545726,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646078556
    },
    {
        "content": "<p>What kind of tests can I run on the Riemann hypothesis?</p>",
        "id": 273546036,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078699
    },
    {
        "content": "<p>you could compute the first million nontrivial zeros</p>",
        "id": 273546101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646078741
    },
    {
        "content": "<p>Right, is this a reasonable thing for Lean 4 computationally?</p>",
        "id": 273546179,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078765
    },
    {
        "content": "<p>Definre \"reasonable\"</p>",
        "id": 273546197,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646078774
    },
    {
        "content": "<p>Well Riemann did the first one by hand</p>",
        "id": 273546210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646078782
    },
    {
        "content": "<p>Better than doing it Python for example</p>",
        "id": 273546226,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078790
    },
    {
        "content": "<p>Better as in faster?</p>",
        "id": 273546258,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646078804
    },
    {
        "content": "<p>Yes, faster</p>",
        "id": 273546279,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078812
    },
    {
        "content": "<p>I wouldn't dare to say yes without a benchmark on this but I'd guess that due to the fact that Lean is compiled to C vs python being bytecode interpreted it should definitely be able to produce faster code than pure python</p>\n<p>You are however most likely talking about python with its funky numerics libraries which all work in C and expose an API to python. Which you could of course do in Lean as well but hasn't been done right now</p>",
        "id": 273546507,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646078918
    },
    {
        "content": "<p>Another analogous question: would it make sense to rewrite say Macaulay2 in Lean 4 to both prove stuff about the math and then compute stuff?</p>",
        "id": 273546561,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078942
    },
    {
        "content": "<p>I use M2 as an example since it is go-to for commutative algebra testing</p>",
        "id": 273546597,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646078963
    },
    {
        "content": "<p>These questions cannot be answered very simply.  You can expect Lean 4 performance (now and even more so in the future) to be comparable wiht performance of other functional languages (native or pseudo-native, so, say, Haskell to native, or 'old Haskell' with Haskell -&gt; C -&gt; native). So the best way to look at it is if you're comfortable with standard Haskell-like performance for your particular problem.</p>",
        "id": 273546770,
        "sender_full_name": "František Silváši",
        "timestamp": 1646079049
    },
    {
        "content": "<p>It sounds like experimentation is in order then.</p>",
        "id": 273546960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646079125
    },
    {
        "content": "<p>In the end its unlikely Lean will ever be able to consistently keep up with programming languages like C or C++ out of the box. But that is also not the point, it cannot possibly keep up with languages where you have such fine grained control over what is happening while we abstract quite a bit away from memory management etc.</p>",
        "id": 273547057,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646079179
    },
    {
        "content": "<p>The question of performance cannot really  be considered in a broad sense beyond some basics a'la Lean is native (not interpreted)</p>",
        "id": 273547202,
        "sender_full_name": "František Silváši",
        "timestamp": 1646079244
    },
    {
        "content": "<p>Great. I take from this that is reasonable to try it out and see.</p>",
        "id": 273547495,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1646079404
    }
]