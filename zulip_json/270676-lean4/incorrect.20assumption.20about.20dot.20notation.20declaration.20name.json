[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">semiconj_by</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">commute</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">semiconj_by</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">semiconj_by.cast_int_mul_right</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">semiconj_by</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">commute</span>\n\n<span class=\"c1\">-- this works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_int_mul_right'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.cast_int_mul_right</span>\n\n<span class=\"c1\">-- this doesn't</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_int_mul_right</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.cast_int_mul_right</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  commute.cast_int_mul_right</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">structural recursion cannot be used</span>\n\n<span class=\"cm\">well-founded recursion cannot be used, 'commute.cast_int_mul_right' does not take any (non-fixed) arguments</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">commute</span>\n</code></pre></div>\n<p>Here <code>commute</code> is a specialization of <code>semiconj_by</code>. The lemma <code>semiconj_by.cast_int_mul_right</code> exists, and dot notation is smart enough to interpret <code>h.cast_int_mul_right</code> as <code>semiconj_by.cast_int_mul_right h</code> if <code>h : commute ...</code>. Indeed the primed lemma <code>commute.cast_int_mul_right'</code> works fine. But when trying to define <code>commute.cast_int_mul_right</code>, Lean presumably correctly interprets <code>h.cast_int_mul_right</code> as <code>semiconj_by.cast_int_mul_right h</code> (so the proof parses) but at a later stage Lean decides to reject the declaration because it incorrectly decides that it's circular. So somehow two parts of Lean are interpreting the same thing in different ways.</p>",
        "id": 316626502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671390134
    },
    {
        "content": "<p>I think it's actually interpreting it the same at all stages...</p>\n<p>My impression is that the dot notation looks through definitions to resolve names, but only if the original type's namespace doesn't have a matching identifier. In the non-primed case, the namespace does have the matching identifier, before unfolding the <code>commute</code> definition, so the <code>commute</code> identifier takes precedence.</p>\n<p>Here you can either mark <code>commute.cast_int_mul_right</code> as <code>nonrec</code>, or just refer in the body to <code>semiconj_by.cast_int_mul_right</code> directly</p>\n<p>Maybe we should add a warning for when dot-notation could be elaborated multiple ways by unfolding/not unfolding definitions, but that might be too expensive to check.</p>",
        "id": 316729741,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671453264
    },
    {
        "content": "<p>Ha you're probably right! Thanks!</p>",
        "id": 316732014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671453964
    }
]