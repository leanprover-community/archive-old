[
    {
        "content": "<p>Hi I have a <code>CommandElabM α</code> that I want to run in the <code>add</code> method of an <code>AttributeImpl</code>, but  it's <code>AttrM = CoreM</code>, is there a lift/run? I found <code>Lean.Elab.Command.liftCoreM : CoreM α → CommandElabM α</code> so I need the co of this.</p>",
        "id": 277743499,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649084343
    },
    {
        "content": "<p>I don't think you can, at least not without fabricating a whole lot of dubious dummy state</p>",
        "id": 277744088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649084556
    },
    {
        "content": "<p>like what would it mean if you did <code>elabCommand `(namespace Foo)</code> in an attribute?</p>",
        "id": 277744166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649084589
    },
    {
        "content": "<p>Yeah CommandElabM wants to carry around a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.Context#doc\">docs4#Lean.Elab.Command.Context</a> while core only carries a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Core.Context#doc\">docs4#Lean.Core.Context</a>  so you'd have to make up a lot of dummy variables</p>",
        "id": 277744470,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649084708
    },
    {
        "content": "<p>Eg you might declare a definition with an attribute and then run some commands afterwards</p>",
        "id": 277744848,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649084866
    },
    {
        "content": "<p>I guess you could do it all as a custom command and then add the attribute in the custom command</p>",
        "id": 277745002,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649084917
    },
    {
        "content": "<p>having it as an attribute seemed nicer but I'm ok with that</p>",
        "id": 277745200,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649085001
    },
    {
        "content": "<p>you can create definitions from <code>CoreM</code>, just not through <code>elabCommand</code></p>",
        "id": 277745330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649085042
    },
    {
        "content": "<p>Ok let me just say what the concrete problem is: at the moment if you want to register an RPC you have to run a command like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">registerRpcProcedure</span>\n    <span class=\"bp\">`</span><span class=\"n\">myHandler</span>\n    <span class=\"n\">α</span>\n    <span class=\"n\">β</span>\n    <span class=\"n\">myHandler</span>\n  <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>myHandler : α → RequestM (ResponseTask β)</code> for some fixed <code>α</code>, <code>β</code>. I was having a go at writing an attribute <code>@[rpc]</code> that you stick in front of <code>myHandler</code> that would do this. The simplest way seems to be to have a quoted command and then run it. Because if you try to do it in CoreM you end up needing <code>evalExpr</code>. Maybe the way is to do a termElab on the <code>do</code> block and then <code>evalExpr</code>.</p>\n<p>But now I am thinking that doing this with an attribute is just wrong and it should be a command macro.</p>",
        "id": 277746457,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649085443
    },
    {
        "content": "<p>If <code>registerRpcProcedure</code> is in <code>CoreM</code> then what's the problem? You can just call that function directly from <code>AttrM</code></p>",
        "id": 277759556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649090589
    },
    {
        "content": "<p>you only need <code>evalExpr</code> if either <code>α</code> or <code>β</code> is supplied from the input syntax to the attribute itself</p>",
        "id": 277759615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649090624
    },
    {
        "content": "<p>you can also run <code>evalConst</code> in <code>CoreM</code></p>",
        "id": 277760207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649090835
    },
    {
        "content": "<p>The problem with calling registerRpcProcedure directly is you don't know the types <code>α</code>, <code>β</code> (you can get them as Exprs with some faff but still need to unreflect them) so you can't get an unreflected <code>myHandler</code>. Also registerRpcProcedure needs to synthesize a load of typeclass instances on <code>α</code> and <code>β</code>.</p>",
        "id": 277775421,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649097248
    },
    {
        "content": "<p>(by the way I have no idea if 'unreflect' is the appropriate terminology, maybe 'unquote'?)</p>",
        "id": 277775534,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649097309
    }
]