[
    {
        "content": "<p>How do I refer to has_zero in lean4? Looking at <a href=\"https://github.com/leanprover/lean4/search?q=HasZero\">https://github.com/leanprover/lean4/search?q=HasZero</a> I see it's defined in src/library/constants.cpp, and i see an example in the equation compiler test: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasZero</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofInt</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>... but I can't seem to get that syntax to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bin</span> <span class=\"n\">where</span> <span class=\"c1\">-- binary string</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>            <span class=\"c1\">-- infinite stream of zeros (high bits)</span>\n<span class=\"bp\">|</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Bin</span><span class=\"o\">)</span>   <span class=\"c1\">-- multiply by 2</span>\n<span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Bin</span><span class=\"o\">)</span>   <span class=\"c1\">-- multiply by 2 and add 1</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Bin</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasZero</span> <span class=\"n\">Bin</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Am i missing something?  (Incidentally, <code>equations.lean</code> doesn't pass the syntax-check for me, either. As far as I can tell, I have lean version 4.0.0 installed, and it does say <code>lean4</code> in the lower right corner of vscode)</p>",
        "id": 287500315,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656259164
    },
    {
        "content": "<p>Version 4.0.0 is very old. I would start by upgrading to the current nightly to see if this fixes things.</p>",
        "id": 287500604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656259558
    },
    {
        "content": "<p>First things first as you can see by a simple search through the documentation: <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> <code>HasZero</code> doesn't exist, we have a class like this in mathlib4 however <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Zero#doc\">docs4#Zero</a> but it is definitely not built in so whatever you are looking at in the compiler is certainly not what you are looking for.</p>\n<p>Furthermore your thing does very much pass the syntax check it does not pass the elaboration however (in general you should post the actual error you are seeing so we aren't just left guessing what is wrong) with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">HasZero</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.781</span>\n</code></pre></div>\n<p>which is because <code>HasZero</code> doesn't exist so the auto implicit mechanism figured it should be an implicit variable but the elaboration procedure figure there shoul dbe a function at work here, you can see this by the fact that your editor highlighted HasZero in blue in my case:<br>\n<a href=\"/user_uploads/3121/H2XIdbpEG_y6L7y80zqxXZ4T/image.png\">image.png</a> <br>\nas opposed to the black which is reserved for already existing declarations.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/H2XIdbpEG_y6L7y80zqxXZ4T/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/H2XIdbpEG_y6L7y80zqxXZ4T/image.png\"></a></div>",
        "id": 287500645,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656259565
    },
    {
        "content": "<p>ok. thanks. sorry for not posting the error. will figure out how to upgrade and try again.</p>",
        "id": 287500788,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656259774
    },
    {
        "content": "<p>Well, after:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">default</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n</code></pre></div>\n<p>i now get pages and pages of this message in the console:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">06</span><span class=\"bp\">-</span><span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">5</span><span class=\"n\">a0c3b8d803a</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">elan</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"n\">a7f30d8e</span> <span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">04</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">)</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">List.getLast</span><span class=\"bp\">!</span> <span class=\"n\">Init.Data.List.BasicAux</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"n\">list</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">List.head</span><span class=\"bp\">!</span> <span class=\"n\">Init.Data.List.BasicAux</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"n\">list</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.EnvExtensionInterfaceUnsafe.getState</span> <span class=\"n\">Lean.Environment</span><span class=\"o\">:</span><span class=\"mi\">236</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">environment</span> <span class=\"n\">extension</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">accessed</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.ScopedEnvExtension.getState</span> <span class=\"n\">Lean.ScopedEnvExtension</span><span class=\"o\">:</span><span class=\"mi\">157</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.EnvExtensionInterfaceUnsafe.getState</span> <span class=\"n\">Lean.Environment</span><span class=\"o\">:</span><span class=\"mi\">236</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">environment</span> <span class=\"n\">extension</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">accessed</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">bounds</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.EnvExtensionInterfaceUnsafe.getState</span> <span class=\"n\">Lean.Environment</span><span class=\"o\">:</span><span class=\"mi\">236</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">environment</span> <span class=\"n\">extension</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">accessed</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.ScopedEnvExtension.getState</span> <span class=\"n\">Lean.ScopedEnvExtension</span><span class=\"o\">:</span><span class=\"mi\">157</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.EnvExtensionInterfaceUnsafe.getState</span> <span class=\"n\">Lean.Environment</span><span class=\"o\">:</span><span class=\"mi\">236</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">environment</span> <span class=\"n\">extension</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">accessed</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">bounds</span>\n</code></pre></div>\n<p>i don't suppose there's something between nightly and stable I could try?<br>\n(it does seem to respond to commands intelligently, despite the errors...)</p>",
        "id": 287501145,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656260240
    },
    {
        "content": "<p>these instructions did not include any steps to install mathlib4... maybe there's more i need to do before i should expect this to work?<br>\n<a href=\"/user_uploads/3121/JJiqAltsYUSf5tKQy9ecQzXH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JJiqAltsYUSf5tKQy9ecQzXH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/JJiqAltsYUSf5tKQy9ecQzXH/image.png\"></a></div>",
        "id": 287501225,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656260355
    },
    {
        "content": "<p>You can select each nightly individually in your lean-toolchain file once you've created a lake project, version <code>leanprover/lean4:nightly-2022-06-24</code> doesn't have these errors.</p>\n<p>Regarding the installation of mathlib4 you have to declare it as a dependency in your <code>lakefile.lean</code>. You can also get the effects of <code>Zero</code> that you are interested in by declaring an <code>instance : OfNat Bin n</code> where the <code>ofNat</code> field of that instance will contain the value of type <code>Bin</code> that corresponds to the  natural number <code>n</code>.</p>",
        "id": 287501674,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656261009
    },
    {
        "content": "<p>mathlib4 doesn't compile under 06-24 ... seems to need 06-25 (or at least the file in mathlib that fails to compile is Data/List/Basic.lean, and the last change to that file is the bump to 06-25)...</p>\n<p>so for posterity: if lean4:nightly doesn't work, use the version from here: <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lean-toolchain\">https://github.com/leanprover-community/mathlib4/blob/master/lean-toolchain</a></p>",
        "id": 287503671,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656263782
    },
    {
        "content": "<p>Yes if you want to be 100% sure your project will work with the mathlib version use their compiler version but again you can achieve the notational part of <code>Zero</code> with just <code>OfNat</code> instances which are built-in, <code>Zero</code> is part of the algebraic hierarchy.</p>",
        "id": 287503749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656263886
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a></p>",
        "id": 287505199,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656265441
    },
    {
        "content": "<p>so, i have <code>succ</code>, so i can define <code>ofNat</code> recursively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bin</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bin.B</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Bin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This compiles, and <code>#eval ofNat 6</code> gives back <code>Bin.O (Bin.I (Bin.I (Bin.B)))</code>, which is what i expect.</p>\n<p>So I guess I have a basic working answer here. :)</p>",
        "id": 287506198,
        "sender_full_name": "tangentstorm",
        "timestamp": 1656266770
    }
]