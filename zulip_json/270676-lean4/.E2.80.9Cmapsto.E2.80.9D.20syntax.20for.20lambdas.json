[
    {
        "content": "<p>About a week ago (if I’m not mistaken) this “x ↦ f” syntax worked without problems, but for now it causes some unexpected errors (as in example below). Is it bug or how it’s meant to be?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">many1</span><span class=\"o\">(</span><span class=\"n\">funBinder</span><span class=\"o\">)</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Sigma.eta</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a₂</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 301931896,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1664715309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  This is a regression caused by <a href=\"https://github.com/leanprover/lean4/commit/d0a002ffff36027dde14c97723cdc6a657820780\">https://github.com/leanprover/lean4/commit/d0a002ffff36027dde14c97723cdc6a657820780</a></p>",
        "id": 301945707,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664723704
    },
    {
        "content": "<p>Mmh, this is indeed problematic. It could be argued that the root problem is our current <strong>local</strong> longest parse rule. If the parser had the choice between \"<code>B a₁</code> is an application\" and \"<code>B a₁</code> is the beginning of the fun macro\", it would make the correct choice. But because we choose immediately after running the leading parsers, the choice is actually between \"<code>B</code> is an ident\" and \"<code>B a₁</code> is the beginning of the fun macro\".</p>",
        "id": 302130742,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664824316
    },
    {
        "content": "<p>But also that very overlapping seems quite problematic for the performance of the macro even before the change. I think it would be much more reasonable to make it a trailing parser like in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and possibly more binder kinds</p>",
        "id": 302131662,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664824635
    }
]