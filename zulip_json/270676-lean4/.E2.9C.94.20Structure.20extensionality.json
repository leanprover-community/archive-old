[
    {
        "content": "<p>Many ways to skin this cat but <code>congr</code> will do :).</p>",
        "id": 301181913,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1664354267
    },
    {
        "content": "<p>I think in Lean 3 the use case for <code>ext</code> was rather when you had <code>x y : Struct Œ± Œ≤</code> and wanted to show <code>x = y</code>.</p>",
        "id": 301182677,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1664354509
    },
    {
        "content": "<p>Thanks! At first <code>congr</code> did not work for my actual use case, but it turned out an additional <code>unfold ...</code> before the congr did the trick. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">S.snd</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">S.fst</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">switch</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"c1\">-- does not do anything, but if we do `unfold switch;` before congr, it works as expected</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 301185366,
        "sender_full_name": "Jesse Vogel",
        "timestamp": 1664355602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280685\">Jesse Vogel</span> has marked this topic as resolved.</p>",
        "id": 301185443,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664355628
    },
    {
        "content": "<p>The <code>ext</code> tactic/attribute exists in Std</p>",
        "id": 301199975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664361004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Ext</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x‚ÇÅ</span> <span class=\"n\">y‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x‚ÇÇ</span> <span class=\"n\">y‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">x‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">y‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">x‚ÇÇ</span> <span class=\"bp\">=</span> <span class=\"n\">y‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Struct.mk</span> <span class=\"n\">x‚ÇÅ</span> <span class=\"n\">x‚ÇÇ</span> <span class=\"bp\">=</span> <span class=\"n\">Struct.mk</span> <span class=\"n\">y‚ÇÅ</span> <span class=\"n\">y‚ÇÇ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>That said, <code>ext</code> is not quite the right tool here, since the two structs are already constructor forms. You should just use <code>congr</code> here</p>",
        "id": 301200400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664361177
    },
    {
        "content": "<p>the second example is better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Ext</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">S.snd</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">S.fst</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Struct</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">switch</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 301200698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664361277
    },
    {
        "content": "<p>although actually in this case <code>rfl</code> alone already works because lean 4 has \"eta for structures\"</p>",
        "id": 301200842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664361338
    },
    {
        "content": "<p>(this proof is not <code>rfl</code> in lean 3)</p>",
        "id": 301200970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664361372
    }
]