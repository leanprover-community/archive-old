[
    {
        "content": "<p>I'm looking to understand the best way of working with <code>tacticSeq</code>s. Up to this point, I've worked with <code>tactic</code>, but I want to implement a tactic that make changes to a 'group of tactics', which is basically a <code>tacticSeq</code>. I struggle to find ways to take an existing <code>tacticSeq</code>, and make some changes to it.</p>\n<p>One of the main issues for me is that I don't properly know how to work with parsers yet, and <code>tacticSeq</code> seems to be some sort of parser-wrapper around a list of tactics (but not really).</p>\n<p>a MWE for my use case is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span>\n  <span class=\"n\">Lean</span>\n  <span class=\"n\">Lean.Elab.Tactic</span>\n  <span class=\"n\">Lean.Parser.Tactic</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- 4.0.0, commit 7dbfaf9b751917a7fe020485bf57f41fdddcaafa</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testTactic</span> <span class=\"o\">(</span><span class=\"n\">tacSeq</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacSeqStr</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"n\">tacSeq</span>\n  <span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">test</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{tacSeqStr}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"testTactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">testTactic</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">testTactic</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The testTactic now adds the trace object <code>(Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.tacticRfl \"rfl\") []) (group (Tactic.tacticRfl \"rfl\") [])]))</code>. What would be the proper way of, say, extending/appending this tacticSeq with another <code>rfl</code> call? </p>\n<p>Alternatively, how can you consistently get a 'list of tactics' that are inside the tacticSeq? With that, it would be easier to construct a new tacticSeq like <code>`(tacticSeq|($[$tacs]*))</code>, but I'm pretty sure that objects inside the tacticSeq need not necessarily be tactics, they can also be nested tacticSeqs. For example, changing the above example to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">testTactic</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Adds the trace <code>(Tactic.tacticSeq1Indented  [(group (Tactic.tacticRfl \"rfl\") [])   (group    (Tactic.tacticSeqBracketed \"{\" [(group (Tactic.tacticRfl \"rfl\") []) (group (Tactic.tacticRfl \"rfl\") [])] \"}\")    [])   (group (Tactic.tacticRfl \"rfl\") [])]))</code>, where it contains a tacticSeq, not just a list of tactics.</p>",
        "id": 295003968,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1661331089
    },
    {
        "content": "<p>For those interested, with the help of <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> , we have constructed a function that matches on the tacticSeq and appends a tactic to it. Our solution looks like this, with a bit of matching magic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkTacticSeqAppend</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ts</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">;</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">tacs.push</span> <span class=\"n\">t</span><span class=\"o\">)]</span><span class=\"bp\">*</span> <span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">;</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">tacs.push</span> <span class=\"n\">t</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unknown syntax\"</span>\n</code></pre></div>\n<p>Having access to the list of tactics inside of the tacticSeq makes it much easier to make arbitrary changes and create a new tacticSeq. The fact that  the list of tacs can contain a tacticSeq(Bracketed) itself doesn't seem to matter, since this should/seems to always be interpretable as a tactic (focus a goal and execute this list of tactics).</p>",
        "id": 295041802,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1661346151
    }
]