[
    {
        "content": "<p>I'm not sure this is the most minimal example I can come up with, but I noticed something weird when I was trying to clean up some code and declaring some variables in a section.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">scoped_variables</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">true</span> <span class=\"c1\">-- Expected to need to write `foo m f a true`</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">scoped_variables</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">local_variables</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n                <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">true</span> <span class=\"c1\">-- `bar a true` fails as expected</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">local_variables</span>\n</code></pre></div>\n<p>Outside of their definitions <code>foo</code> and <code>bar</code> have the same type signature, so anywhere else in the file you'd need to call them the same way... But when using them recursively it seems like <code>foo</code> can get by with just those bound in the <code>def</code> part of the declaration.</p>\n<p>Are these two definitions computing the same thing? Is there something deeper going on here than this is a \"quality of life\" feature? (it doesn't seem to be documented anywhere as far as I can tell)</p>",
        "id": 299227579,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1663356234
    },
    {
        "content": "<p>yes, this is working as intended. <code>variable</code> declarations are still parameters to the definition, but you don't use them when calling the function recursively, they are fixed in the recursion and automatically passed along. In lean 3 this was controlled by the position of the colon among the arguments, in lean 4 it is based on whether it is a <code>variable</code> declaration or a parameter of the definition</p>",
        "id": 299229737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663357119
    },
    {
        "content": "<p>the two definitions are the same</p>",
        "id": 299229807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663357152
    },
    {
        "content": "<p>Thanks! Good to know</p>",
        "id": 299229984,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1663357235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> has marked this topic as resolved.</p>",
        "id": 299229997,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663357245
    }
]