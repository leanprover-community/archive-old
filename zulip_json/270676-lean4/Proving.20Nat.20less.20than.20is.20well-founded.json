[
    {
        "content": "<p>I'm trying to prove the well-foundedness of the less-than relation on the natural numbers using the accessibility inductive type approach, but I'm either misunderstanding how to use <code>Acc</code>, missing some valid moves in Lean4 or misunderstanding the proof.</p>\n<p>I'd like to be able to prove that <code>Acc Nat.lt x -&gt; Acc Nat.lt (succ x)</code> because I can then easily use that lemma to prove that <code>∀ x : Nat, Acc Nat. lt x</code> (i.e. that it is well-founded), but I'm having a hard time with this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">acc_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h2</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.inv</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"c1\">-- stuck</span>\n  <span class=\"c1\">-- ⊢ y &lt; x</span>\n</code></pre></div>\n<p>Since I assume <code>Acc Nat.lt x</code>, then that means all <code>y &lt; x </code> are accessible too. And since <code>x</code> is the immediate predecessor of <code>x.succ</code>, then we know that all <code>y &lt; x.succ</code> are accessible, and if we should know that then we know that <code>Acc Nat.lt (succ x)</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_acc</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">False.elim</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_acc</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x.succ</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.inv</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.leSuccOfLe</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">acc_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h2</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Acc.inv</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"c1\">-- stuck</span>\n  <span class=\"c1\">-- ⊢ y &lt; x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">well_founded</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_lt_is_wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">Nat.lt</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246681496,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1626846084
    },
    {
        "content": "<p>Don't use <code>Acc.inv</code>, that's the inverse to <code>intro</code> so you won't get anywhere</p>",
        "id": 246681884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626846620
    },
    {
        "content": "<p>Since you are proving that nat is inductively generated by less than, the proof is naturally going to go via induction</p>",
        "id": 246681915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626846716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.eq_or_lt_of_lt_succ</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">acc_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">match</span> <span class=\"n\">Nat.eq_or_lt_of_lt_succ</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih.inv</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 246682320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626847198
    },
    {
        "content": "<p>Thanks, Mario! I wasn't familiar with the <code>induction x with (apply Acc.intro; intro y h)</code> syntax, but it looks like it just adds it into each case similar to <code>generalizing</code>, good to know<br>\nequivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">acc_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Acc.intro</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n    <span class=\"k\">match</span> <span class=\"n\">Nat.eq_or_lt_of_lt_succ</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih.inv</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 246769502,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1626896886
    }
]