[
    {
        "content": "<p>In Lean 3, this example proof works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_mem_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"o\">([]:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_prop_of_false</span> <span class=\"o\">(</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">true.intro</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, after translation into Lean 4, the example proof fails at the <code>simp only</code> step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_mem_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_prop_of_false</span> <span class=\"o\">(</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"c1\">-- (fails to simplify)</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there some way to make this work? Is Lean 4's <code>simp</code> missing some features that are present in Lean 3's <code>simp</code>?</p>",
        "id": 296165645,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661877279
    },
    {
        "content": "<p>Could you please create an issue on GitHub? Thanks.</p>",
        "id": 296194647,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661886117
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1549\">https://github.com/leanprover/lean4/issues/1549</a></p>",
        "id": 296205086,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661887915
    }
]