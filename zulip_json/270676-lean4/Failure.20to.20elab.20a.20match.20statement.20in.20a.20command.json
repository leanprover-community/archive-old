[
    {
        "content": "<p>I am trying to compile and add a function definition to the environment, from a command. That definition contains a match statement.<br>\nHowever it silently fails to compile my definition and I don't know how to investigate the error.<br>\nHere is a mwe :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">I.c1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">I.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n<span class=\"k\">#print</span> <span class=\"n\">f1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gen_f2</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">termStxToExpr</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">termStxToExpr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">I.c1</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">I.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n    <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkDefinitionValEx</span> <span class=\"bp\">`</span><span class=\"n\">f2</span> <span class=\"o\">[]</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"bp\">.</span><span class=\"n\">opaque</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"n\">e.toMessageData</span> <span class=\"o\">{})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">termStxToExpr</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">liftCoreM</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"gen_f2\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gen_f2</span>\n<span class=\"c1\">-- set_option trace.Elab true</span>\n<span class=\"n\">gen_f2</span>\n<span class=\"k\">#print</span> <span class=\"n\">f2</span>\n</code></pre></div>\n<p>The code doesn't fail to compile but  <code>#print f2</code> says: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">_discr</span> <span class=\"o\">:=</span> <span class=\"n\">I.c1</span><span class=\"bp\">;</span>\n<span class=\"n\">sorryAx</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>When I expect it to show the same as <code>#print f1</code> which says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">I.c1</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">I.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n</code></pre></div>\n<p>The issue here seems to happen when converting the match syntax to an Expr but I'm not sure.</p>\n<p>What I'm really trying to do behind that mwe is to implement an attribute that automatically generates the .rec implementation of an inductive type. For some reason .rec has no implementation whereas match has one, to me it's really weird because as I see it, everything should be defined from .rec.</p>\n<p>Thanks for suggestions</p>",
        "id": 285087935,
        "sender_full_name": "Michael Jam",
        "timestamp": 1654505090
    },
    {
        "content": "<p>I do get an error message at <code>gen_f2</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">created</span> <span class=\"n\">when</span> <span class=\"n\">declaration</span> <span class=\"n\">name</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>\n<p>Use <code>liftTermElabM</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">termStxToExpr</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">`</span><span class=\"n\">f2</span>\n</code></pre></div>",
        "id": 285098124,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654513938
    },
    {
        "content": "<blockquote>\n<p>For some reason .rec has no implementation whereas match has one, to me it's really weird because as I see it, everything should be defined from .rec.</p>\n</blockquote>\n<p>That may be true for the core language, but for code generation going through <code>rec</code> is awkward, especially for well-founded recursion</p>",
        "id": 285098207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654514024
    }
]