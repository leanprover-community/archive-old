[
    {
        "content": "<p>Are there general tips for writing Lean 4 code that generates efficient executables? (please write tips down if you know some <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>",
        "id": 305933233,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1666655407
    },
    {
        "content": "<p>Are you looking for quite detailed Lean 4 or general functional programming tips? Here are two general ones I could think of.</p>\n<ul>\n<li>If writing recursive functions, try to use tail-recursion. This is not so much about speed as it is about stack size limits - a function which is not tail-recursive can easily run out of stack space when executed on large inputs.</li>\n<li>Make sure you use persistent data structures when you expect them to be duplicated (i.e. multiple references will exist), and in-place data structures when linear use is possible (refcount never exceeds 1). This ties in with <a href=\"https://koka-lang.github.io/koka/doc/book.html#sec-fbip\">FBIP</a> (this is the Koka tutorial but Lean also uses Perceus).</li>\n</ul>",
        "id": 305939612,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1666659336
    },
    {
        "content": "<p>I'm also interested in tips specific to Lean 4 <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 305947600,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1666666632
    },
    {
        "content": "<p>See also this thread: <a href=\"#narrow/stream/270676-lean4/topic/Metamath.20verifier.20in.20Lean.204\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Metamath.20verifier.20in.20Lean.204</a></p>",
        "id": 305979743,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666686577
    },
    {
        "content": "<p>Once I got a big speed up by replacing product type <code>A Ã— B</code> with a structure holding <code>A</code> and <code>B</code>.</p>",
        "id": 305981331,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666687126
    },
    {
        "content": "<p>Wow, that is surprising to me. Unless either <code>A</code> or <code>B</code> were unboxed types.</p>",
        "id": 305981789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666687324
    },
    {
        "content": "<p>Yes they were floats, probably should have mentioned that :)</p>",
        "id": 306006045,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666697031
    }
]