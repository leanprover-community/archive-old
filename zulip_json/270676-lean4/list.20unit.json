[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">unit</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">unit.star</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list_unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list_unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">[</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list_unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list_unit</span>\n</code></pre></div>\n<p>When a mathematician writes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> they do not mean <code>nat</code>. They mean any object whatsoever, in any type theory or set theory or whatever, which offers the interface of <code>nat</code>, i.e. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- or some more type object like `Type u`, I explicitly do not care about universes</span>\n<span class=\"n\">nat.zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"n\">nat.succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">nat</span>\n<span class=\"n\">nat.rec</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">principles</span> <span class=\"n\">of</span> <span class=\"n\">induction</span> <span class=\"n\">and</span> <span class=\"n\">recursion</span> <span class=\"n\">written</span> <span class=\"k\">in</span> <span class=\"n\">appropriate</span> <span class=\"n\">foundational</span> <span class=\"n\">theory</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>An example of an object offering this interface is <code>list unit</code>, and the reason it offers this interface is that the internal structure of <code>list unit</code> is to my naive mathematician's eyes \"literally exactly the same object\" as the internal structure of <code>nat</code>. Am I completely naive in wanting the <code>ring</code> tactic to work \"automatically\" on <code>list unit</code> in Lean 4? I have no understanding of the issues here I'm afraid.</p>",
        "id": 240694994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622283477
    },
    {
        "content": "<p>PS Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">Unit</span>\n<span class=\"c1\">-- invalid 'class', declaration 'Unit' must be inductive datatype or structure</span>\n</code></pre></div>",
        "id": 240695728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622284729
    },
    {
        "content": "<p>Can we prove <code>List Unit = Nat</code> in Lean 4?</p>",
        "id": 240696070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622285293
    },
    {
        "content": "<p>I was dealing with a bit of related question not too long ago, and from what I understand, the CIC cannot prove two inductive types are the same. There is a special case where you can make a cardinality argument that you could prove <code>Unit \\ne Nat</code>, but that only holds because of cardinality.</p>",
        "id": 240696170,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622285511
    },
    {
        "content": "<p>What is interesting in this particular case is that I am explicitly observing that what we in some sense are told is the implementation of <code>Nat</code>, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>is literally what we are told is the implementation of <code>List Unit</code>, modulo some noise which a machine (the type class inference system) can deal with.</p>",
        "id": 240696258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622285624
    },
    {
        "content": "<p>Is there some way that Lean 4 can bolt these inductive types together under the hood?</p>",
        "id": 240696336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622285723
    },
    {
        "content": "<p>let me put it this way. I think there is no reason, why we couldn't write a meta-program that takes a proof w.r.t. <code>Nat</code> and turn it into one w.r.t. <code>List Unit</code>. On the other hand, you are asking, if we can prove <code>\\|- Nat = List Unit</code> and I think the latter is not possible in CIC.</p>",
        "id": 240696346,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622285744
    },
    {
        "content": "<p>in fact, I am doing something fairly simple with my construction for inductive predicates. The user writes a proof w.r.t. their inductive type. Then I introduce a new type which has more contextual information, I take the original prove and re-prove it w.r.t. my new type. After that I have enough contextual information to eliminate recursion. Thus proving structural recursion.</p>",
        "id": 240696461,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622285902
    },
    {
        "content": "<p>your taking a <code>Nat</code> proof, turning it into <code>List Unit</code> proof should be simpler, in principle.</p>",
        "id": 240696479,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622285956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I don't understand why you think anything might be different in Lean 4 vs Lean 3 here.</p>",
        "id": 240696544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622286055
    },
    {
        "content": "<p>Nothing about the axiomatics is changing, is it?</p>",
        "id": 240696557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622286074
    },
    {
        "content": "<p>nope, the axioms are the same, afaik. The kernel is slightly different insofar as it does mutually recursive inductive types, but that doesn't change the set of provable theorems, I don't think.</p>",
        "id": 240696613,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622286148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> I sometimes want <code>abel</code> to work for commutative multiplicative groups (for example when I am doing calculations in commutative rings which ultimately reduce to explicit messy problems not containing <code>zero</code> or <code>add</code>). I was always told that in theory <code>abel</code> could work for multiplicative groups but AFAIK it still doesn't. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span> <span class=\"c1\">-- or whatever one needs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">abel</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 240696624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622286196
    },
    {
        "content": "<p>ah, I see. That kind of thing, I think should be possible to do. But it wouldn't something that's happening at the axiomatic level, but rather at the meta-programming level. I.e. the <code>abel</code> tactic would have to learn how to turn <code>X</code> into an <code>add_comm_monoid</code> and then it should work.</p>",
        "id": 240696734,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622286373
    },
    {
        "content": "<p>presumably, already today, you could somehow get an <code>add_comm_monoid X</code> instance into the local context and then <code>abel</code> would be happy?</p>",
        "id": 240696763,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622286471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/list.20unit/near/240696544\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>, I don't understand why you think anything might be different in Lean 4 vs Lean 3 here.</p>\n</blockquote>\n<p>Scott for me Lean 3 and Lean 4 _are_ the same, in the sense that I have literally zero understanding of the implementation of the Lean code in some other language e.g. C++ or C or whatever Lean is written in or compiles to or whatever. I am just observing that in some real way these objects are identical in the sense that they have been constructed using identical constructors. Interally why can't Lean just bolt its understanding of <code>Nat</code> onto <code>List Unit</code> is my question, but as I've said before, I don't know what I'm talking about. Lean 4 will only let me as a non-meta Lean user to talk about <code>Nat</code> via its interface, so any algorithm I have which works via the interface should work for any implementation of the interface, right?</p>",
        "id": 240696764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622286474
    },
    {
        "content": "<p>but the point is you are not coding against an interface, but against the concrete <code>Nat</code> type. In a sense if you defined a class of <code>Nat</code>-like things with a base case and a successor case, only then would you be coding against the interface.</p>\n<p>And in this latter scenario, we definitely would hope that two instances, one for <code>Nat</code> and one <code>List Unit</code> would, indeed, be able to re-use the same proof.</p>",
        "id": 240696890,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622286643
    },
    {
        "content": "<p>I genuinely have no idea what <em>you</em> mean by \"the concrete <code>Nat</code> type\". By a Type I mean \"a closed box of information\", or \"What a ZFC person calls a set\"</p>",
        "id": 240696920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622286722
    },
    {
        "content": "<p>the \"concrete <code>Nat</code> type\" is that one inductive definition <code>inductive Nat ...</code>, not something isomorphic to it, but literally just that one. A second definition <code>inductive Nat'</code> that has exactly the same structure is distinct from it. And they are not provably same or provably distinct. </p>\n<p>Your theorems talk about properties of the first definition of <code>Nat</code>. They talk about what are the properties of that one definition only.</p>",
        "id": 240697053,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622286944
    },
    {
        "content": "<p>When you want to transfer your knowledge, you must not mention <code>Nat</code> in the theorem statement anywhere. So your first example about monoids is a good example of something that is not specific.</p>",
        "id": 240697108,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622287006
    },
    {
        "content": "<p>Right; even in lean 3, you can't prove <code>unit1 = unit2</code> given <code>inductive unit1 | star</code> and <code>inductive unit2 | star</code></p>",
        "id": 240709248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622304951
    },
    {
        "content": "<p>Just out of pure interest, does anyone here know if adding an axiom saying that two types are the same, if there is a bijection between them is inconsistent? To me, without knowing much at all about HoTT, it seems related to the univalence axiom which I think is known to be inconsistent with the rest of CIC.</p>",
        "id": 240709519,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622305346
    },
    {
        "content": "<p>If that is inconsistent, is there a weaker axiom that says two types are equal if their constructors match?</p>",
        "id": 240709779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622305692
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's reduction to W-types can answer this. I think two types with the exact same constructors, in the same order, would map to the same W-type, but Mario is much more aware of the technical details for this reduction.</p>",
        "id": 240711754,
        "sender_full_name": "FranÃ§ois G. Dorais",
        "timestamp": 1622308777
    },
    {
        "content": "<p>Yes, that axiom is consistent, because it is validated by the cardinality model (where types are cardinalities and all the term constructors go through chosen bijections)</p>",
        "id": 240727501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622331194
    },
    {
        "content": "<p>You can't require that the bijection has any particular properties though; this is where HoTT fails, because it wants the bijections to be coherent with each other</p>",
        "id": 240727559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622331277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/list.20unit/near/240709779\">said</a>:</p>\n<blockquote>\n<p>If that is inconsistent, is there a weaker axiom that says two types are equal if their constructors match?</p>\n</blockquote>\n<p>This axiom is already validated by the model I construct in the lean type theory paper, because inductive types are represented using a mu operator and these would get mapped to the same expression. To recover nominal types you have to stick a natural number index on the mu operator which serves no purpose except to make <code>unit1</code> and <code>unit2</code> different expressions</p>",
        "id": 240727733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622331534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/list.20unit/near/240727733\">said</a>:</p>\n<blockquote>\n<p>To recover nominal types you have to stick a natural number index on the mu operator which serves no purpose except to make <code>unit1</code> and <code>unit2</code> different expressions</p>\n</blockquote>\n<p>Couldn't one just wrap the inductive in a structure to create distinct types? Because, if I am not mistaken, structures and inductive are distinct notions in Lean 4. If so, being able to prove equality between inductive types while permitting nominal distinction through structures seems like it could be a great extension to Lean.</p>",
        "id": 240731821,
        "sender_full_name": "Mac",
        "timestamp": 1622338814
    },
    {
        "content": "<p>I'm talking about the mathematical modeling of lean's type system, <code>structure</code> doesn't exist at that level</p>",
        "id": 240731949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622339045
    },
    {
        "content": "<p>In lean as implemented, the \"useless natural number index\" that I mention is represented as the <code>name</code> of the inductive type itself. You can't have two distinct inductive types with the same name in lean</p>",
        "id": 240731999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622339119
    },
    {
        "content": "<p>Also, your proposed method wouldn't work because <code>structure</code> is just a wrapper around <code>inductive</code> in the kernel, so if <code>inductive</code> is a structural type then <code>structure</code> won't be a nominal type because it's the same thing</p>",
        "id": 240732059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622339254
    },
    {
        "content": "<p>So using this construction you get nominal types, which would mean <code>String \\ne Nat</code> becomes provable... But that definitely won't prove that <code>Unit1 = Unit2</code>. Quite the opposite in fact</p>",
        "id": 240732282,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622339631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/list.20unit/near/240732059\">said</a>:</p>\n<blockquote>\n<p>Also, your proposed method wouldn't work because <code>structure</code> is just a wrapper around <code>inductive</code> in the kernel, so if <code>inductive</code> is a structural type then <code>structure</code> won't be a nominal type because it's the same thing</p>\n</blockquote>\n<p>Ah. So in order to  support inductive equality <em>and</em> nominal types, some kind of special attribute / type would need to be added to mark a given type as nominal and the rest could then ignore there nominal differences. Unfortunately, that does sound like to large of an undertaking. :(</p>",
        "id": 240734592,
        "sender_full_name": "Mac",
        "timestamp": 1622343793
    },
    {
        "content": "<p>The larger undertaking would be adding \"mu types\" to lean, actually</p>",
        "id": 240735133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344602
    },
    {
        "content": "<p>there is no term constructor for making inductive types</p>",
        "id": 240735138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344614
    },
    {
        "content": "<p>instead you have to wrap every application of that term constructor behind a new declaration</p>",
        "id": 240735148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344650
    },
    {
        "content": "<p>Having it as a term constructor makes it much more reasonable why it should be considered a \"no axioms\" construction even though it quite clearly adds constants to the system</p>",
        "id": 240735206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344705
    },
    {
        "content": "<p>I'm not sure structural inductive types is a good idea in practice though. Inductive specs are complicated and I would hate for yet another big and complicated thing to get involved in defeq determinations</p>",
        "id": 240735229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344793
    },
    {
        "content": "<p>I would much rather see eta for structures, which is useful in practice, rather than <code>unit1 = unit2</code> which is something you would only write down if you are probing lean's axioms</p>",
        "id": 240735292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622344883
    }
]