[
    {
        "content": "<p>Hello, I am trying to define groups in lean4 to get a sense of what it would mean to use a theorem prover for work. Here is how far I have gotten:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I am having issues here since I keep getting an error \"(kernel) declaration has metavariables 'mygroup.group.mk'Lean 4\" . Does anyone know what's happening? Is this the right way to start defining one's own definition of a group? <br>\nBest!</p>",
        "id": 239508477,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621465471
    },
    {
        "content": "<p>I get an error on <code>class Mul</code> saying that <code>Mul</code> is already declared. What version of lean 4 are you using?</p>",
        "id": 239509240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621465955
    },
    {
        "content": "<p>You need to use the <code>Mul</code> declared in the core library if you want to get the <code>*</code> notation, or declare your own <code>*</code> notation in terms of your <code>Mul</code></p>",
        "id": 239509437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466102
    },
    {
        "content": "<p>Here's a version using the classes from core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239509470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466122
    },
    {
        "content": "<p>Sorry about that you need a custom namespace. I missed that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The version of lean is \"leanprover/lean4:4.0.0\"</p>",
        "id": 239509493,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466135
    },
    {
        "content": "<p>I see thank you!</p>",
        "id": 239509659,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/groups/near/239509437\">said</a>:</p>\n<blockquote>\n<p>You need to use the <code>Mul</code> declared in the core library if you want to get the <code>*</code> notation, or declare your own <code>*</code> notation in terms of your <code>Mul</code></p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 239509689,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Now almost works. But I get a strange error with using \\^-1. \"expected termLean 4\"  <a href=\"/user_uploads/3121/t2GqWpbeyT50KoXRyGOczRyc/Screen-Shot-2021-05-19-at-7.20.50-PM.png\">Screen-Shot-2021-05-19-at-7.20.50-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/t2GqWpbeyT50KoXRyGOczRyc/Screen-Shot-2021-05-19-at-7.20.50-PM.png\" title=\"Screen-Shot-2021-05-19-at-7.20.50-PM.png\"><img src=\"/user_uploads/3121/t2GqWpbeyT50KoXRyGOczRyc/Screen-Shot-2021-05-19-at-7.20.50-PM.png\"></a></div>",
        "id": 239510022,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466506
    },
    {
        "content": "<p>Just like <code>Mul</code>, <code>Inv</code> doesn't itself come with any notation, especially since it was just defined</p>",
        "id": 239510130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 239510163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466590
    },
    {
        "content": "<p>ah!  Ok, starting to get the hang of that.</p>",
        "id": 239510182,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466615
    },
    {
        "content": "<p>makes sense.</p>",
        "id": 239510200,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466632
    },
    {
        "content": "<p><code>One</code> does work because it is abbreviating the class <code>OfNat A 1</code> that is used to resolve the meaning of <code>1 : A</code></p>",
        "id": 239510298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466669
    },
    {
        "content": "<p>I see. But why is 1 not considered a type of \"notation\" but rather a class?</p>",
        "id": 239510358,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466721
    },
    {
        "content": "<p>Just like inv and mul, there is a notation that says that number literals are defined to be <code>OfNat.ofNat A n</code> where <code>OfNat</code> is a class</p>",
        "id": 239510432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466768
    },
    {
        "content": "<p>it's defined somewhere in the core library and it's a bit more complicated because it has to match on number literals</p>",
        "id": 239510486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466800
    },
    {
        "content": "<p>So something like <code>notation \"1\"  =&gt; OfNat.ofNat 1</code> (This is wrong, but something like this?) ? But my 1 has nothing to do with natural numbers, right? It's just notation?</p>",
        "id": 239510544,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621466847
    },
    {
        "content": "<p>Conceptually that's what it is doing, yes</p>",
        "id": 239510690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466945
    },
    {
        "content": "<p>there are an infinite number of such notations that have to be declared though so it is written in a more complicated way</p>",
        "id": 239510731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621466976
    },
    {
        "content": "<p>the actual code is <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Term.lean#L1514-L1523\">here</a>. It is using the more low level interface that <code>notation</code> desugars into</p>",
        "id": 239510905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621467053
    },
    {
        "content": "<p>it's probably unreadable but you can see <code>OfNat.ofNat</code> getting referenced</p>",
        "id": 239510973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621467087
    },
    {
        "content": "<p>Alright. Sometimes the easiest things are so fundamental they are complicated.  Off to prove some theorems and excited to learn lean : )</p>",
        "id": 239510984,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621467094
    },
    {
        "content": "<p>Hello again, I am trying to prove some properties of groups. But I am getting hung up on various syntax issues. Here is my initial definition </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We're overwriting inbuilt group theory here so we always work in</span>\n<span class=\"c1\">-- a namespace</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- Notation for One done in an odd way</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- define inverse class and notation</span>\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends` for define classes</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kn\">export</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">-- example of abelian group</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mygroup</span>\n</code></pre></div>\n<ol>\n<li>\n<p>the first issue is that <code>[group G ] (a b : G)</code> is not valid while <code>[group α ] (a b : α )</code> why this statement sensitive to Unicode greek letters? I get an \"unknown identifier 'G'\".</p>\n</li>\n<li>\n<p>My next issue is that I am not sure how to tell lean to complete a proof when I replace G with α:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Gives a bunch of errors that I attached. </p>\n<p>Thank your help. <a href=\"/user_uploads/3121/Lm155UsUjVr4YI4LCZkA07gE/Screen-Shot-2021-05-23-at-6.25.54-PM.png\">Screen-Shot-2021-05-23-at-6.25.54-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Lm155UsUjVr4YI4LCZkA07gE/Screen-Shot-2021-05-23-at-6.25.54-PM.png\" title=\"Screen-Shot-2021-05-23-at-6.25.54-PM.png\"><img src=\"/user_uploads/3121/Lm155UsUjVr4YI4LCZkA07gE/Screen-Shot-2021-05-23-at-6.25.54-PM.png\"></a></div>",
        "id": 239982500,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621808854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/associativity.20of.20.60.E2.86.94.60/near/236761867\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/associativity.20of.20.60.E2.86.94.60/near/236760712\">said</a>:</p>\n<blockquote>\n<p>I'm on today's nightly.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- compiles</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails on third A</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- compiles?!</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is because it is being parsed as <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>  showed and then the unbound lowercase latin letters are being auto bound as specified in <a href=\"https://leanprover.github.io/lean4/doc/autobound.html\">https://leanprover.github.io/lean4/doc/autobound.html</a></p>\n</blockquote>\n<p>I'm guessing you are seeing this behaviour and you need to add <code>{G : Type u}</code> to have it work</p>",
        "id": 239983922,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1621810487
    },
    {
        "content": "<p>I checked it out. I tried that change and a different error happened. I attached it. <a href=\"/user_uploads/3121/dF_rTLBGdMKnJo4byX7c93fY/Screen-Shot-2021-05-23-at-11.17.43-PM.png\">Screen-Shot-2021-05-23-at-11.17.43-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dF_rTLBGdMKnJo4byX7c93fY/Screen-Shot-2021-05-23-at-11.17.43-PM.png\" title=\"Screen-Shot-2021-05-23-at-11.17.43-PM.png\"><img src=\"/user_uploads/3121/dF_rTLBGdMKnJo4byX7c93fY/Screen-Shot-2021-05-23-at-11.17.43-PM.png\"></a></div>",
        "id": 239998806,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621826305
    },
    {
        "content": "<p>Please post code blocks (ideally as <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>), rather than screenshots! You'll get much more help. :-)</p>",
        "id": 239999308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621826837
    },
    {
        "content": "<p>You need {G : Type u} [group G] (a b : G)</p>",
        "id": 240001078,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621828655
    },
    {
        "content": "<p>We first postulate an arbitrary type G, then postulate that it has a group structure, then say \"let a and b be terms of G\"</p>",
        "id": 240001170,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621828761
    },
    {
        "content": "<p>ahhh! I see that. Makes total sense <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> . Now I get some of others with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We're overwriting inbuilt group theory here so we always work in</span>\n<span class=\"c1\">-- a namespace</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- Notation for One done in an odd way</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- define inverse class and notation</span>\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends` for define classes</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kn\">export</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">-- example of abelian group</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mygroup</span>\n</code></pre></div>\n<p>I get two instances of  \"failed to synthesize instance OfNat G 1\" and I can't seem to tell lean that I have proved the theorem. </p>\n<p>Thanks for the tip <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ! : )</p>",
        "id": 240004243,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621831229
    },
    {
        "content": "<p>You haven't proved the theorem, you've proved three intermediate results without joining them together</p>",
        "id": 240005155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621831820
    },
    {
        "content": "<p>Adding <code>rw this</code> after each <code>have</code> probably resolves that</p>",
        "id": 240005244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621831880
    },
    {
        "content": "<p>Your first comment in the code is not correct. Lean 4 does not have inbuilt groups</p>",
        "id": 240012177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621838326
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I was referring to <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/alg.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/alg.lean</a> and <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/alg.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/alg.lean</a> . But these appear as tests, so I will remove that comment.</p>",
        "id": 240047808,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621861409
    },
    {
        "content": "<p>If you import <code>Mathlib.Algebra.Group.Defs</code> from <a href=\"https://github.com/leanprover-community/mathlib4\">mathlib4</a> you can have groups :-)</p>",
        "id": 240047959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , awesome. But I still get \"failed to synthesize instance OfNat G 1\" and red squiggly lines under the ones ('1').  Have you seen that before? </p>\n<p>Do you happen to know what \"rw this\" means? Is there another way without <code>rw this</code>? My understanding was that for lean3 there was something called 'calc' and you could write proofs using chains of implications that looked like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n<span class=\"bp\">...</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span>  <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n<span class=\"bp\">...</span>  <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span>  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n</code></pre></div>\n<p>Here's the current code so far. Thank you for getting me on board.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 'If you import Mathlib.Algebra.Group.Defs from mathlib4 you can have groups :-)' ~ Kevin Buzzard</span>\n<span class=\"c1\">-- To get the swing of things built everything here</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- Notation for One done in an odd way</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- define inverse class and notation</span>\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends` for define classes</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kn\">export</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">-- example of abelian group</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mygroup</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/BTiSk23kDSEl00FmRx195Dx0/Screen-Shot-2021-05-24-at-9.14.17-AM.png\">Screen-Shot-2021-05-24-at-9.14.17-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BTiSk23kDSEl00FmRx195Dx0/Screen-Shot-2021-05-24-at-9.14.17-AM.png\" title=\"Screen-Shot-2021-05-24-at-9.14.17-AM.png\"><img src=\"/user_uploads/3121/BTiSk23kDSEl00FmRx195Dx0/Screen-Shot-2021-05-24-at-9.14.17-AM.png\"></a></div>",
        "id": 240049209,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621862130
    },
    {
        "content": "<p><code>have some_statement := sorry</code> is short for <code>have this : some_statement := sorry</code>, meaning \"prove <code>some_statement</code> and put the proof in a hypothesis called <code>this</code>\" (at least, it is in lean3 and I assume it hasn't changed in lean 4).</p>",
        "id": 240049607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621862342
    },
    {
        "content": "<p>Someone else who actually knows lean4 will have to help you with your ofNat problem</p>",
        "id": 240049837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621862452
    },
    {
        "content": "<p>The calc proof you show there doesn't work in lean3 either though - an<code>=</code> is in the wrong place</p>",
        "id": 240050203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621862625
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Group/Defs.lean\">Mathlib.Algebra.Group.Defs</a> for how to do 1 in Lean 4.</p>",
        "id": 240050669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621862836
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> . I am very new to lean. I saw that notation used elsewhere. I have also seen </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is the above version with the \"have\"  and \"rw this\" the same? What is \"← \" doing here? I am happy to look at documentation just not sure what to search for. Are there names for these different styles?</p>",
        "id": 240050877,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621862945
    },
    {
        "content": "<p><code>rw mul_assoc</code> rewrites <code>a * b * c</code> to <code>a * (b * c)</code>; <code>rw ←mul_assoc</code> rewrites <code>a * (b * c)</code> to <code>a * b * c</code></p>",
        "id": 240051169,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621863090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I tried your suggestion. But I get <code>unknown identifier 'nat_lit'Lean 4</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 'If you import Mathlib.Algebra.Group.Defs from mathlib4 you can have groups :-)' ~ Kevin Buzzard</span>\n<span class=\"c1\">-- To get the swing of things built everything here</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- -- Notation for One done in an odd way</span>\n<span class=\"c1\">-- class abbrev One (α : Type u) := OfNat α 1</span>\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">One.one</span>\n\n\n<span class=\"c1\">-- define inverse class and notation</span>\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends` for define classes</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kn\">export</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">-- example of abelian group</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">intial_assumption</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">intial_assumption</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mygroup</span>\n</code></pre></div>",
        "id": 240051501,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621863221
    },
    {
        "content": "<p>I think that'll mean your lean4 is too old -- what does <code>lean --version</code> say? (Or just update to a more recent one). <code>nat_lit</code> used to be called <code>natLit!</code>.</p>",
        "id": 240057521,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621866012
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> . My current version of lean is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">group_theory</span><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">m2</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">26</span><span class=\"n\">dda3f63d88</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240058098,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621866256
    },
    {
        "content": "<p>Hello -- yeah <code>natLit!</code> got renamed about 10 days after that -- you should probably stick to the version of Lean that mathlib4 itself uses if you're going to use things from it</p>",
        "id": 240058235,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621866322
    },
    {
        "content": "<p>which according to <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/leanpkg.toml#L4\">https://github.com/leanprover-community/mathlib4/blob/master/leanpkg.toml#L4</a> is <code>leanprover/lean4:nightly-2021-05-18</code></p>",
        "id": 240058401,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621866383
    },
    {
        "content": "<p>Ah, cool! Changing to natLit! fixed it. But I will see about updating, too!</p>",
        "id": 240058419,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621866393
    },
    {
        "content": "<p>Thank you all!! Off to prove more theorems. Your help is really appreciated. Have a good day everyone.</p>",
        "id": 240058446,
        "sender_full_name": "learnerofmaths",
        "timestamp": 1621866408
    },
    {
        "content": "<p>To add what the others were saying: At some point we will surely have a <code>calc</code> and <code>conv</code> environment in Lean 4, they're not implemented yet, though.</p>",
        "id": 240094197,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1621882126
    },
    {
        "content": "<p>Sebastian wrote a version of <code>calc</code> in a thread here: (maybe there was another one in a thread too)<br>\n<span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/microcalc/near/225283676\">said</a>:</p>\n<blockquote>\n<p>Here's one solution for a heterogeneous <code>calc</code> based on a <code>Trans</code> typeclass and <code>...</code> as a term notation:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">heq</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">Eq</span> <span class=\"n\">r</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">h'</span> <span class=\"n\">heq</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"...\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- enforce indentation of calc steps so we know when to stop parsing them</span>\n<span class=\"n\">syntax</span> <span class=\"n\">calcStep</span> <span class=\"o\">:=</span> <span class=\"n\">colGe</span> <span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"calc \"</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">rest</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf12</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf23</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf34</span> <span class=\"o\">:</span> <span class=\"n\">t3</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span>\n   <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t5</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf23'</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf45'</span> <span class=\"o\">:</span> <span class=\"n\">t4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasLess</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Less</span> <span class=\"n\">Less</span> <span class=\"n\">Less</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span>\n   <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23'</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t5</span> <span class=\"o\">:=</span> <span class=\"n\">pf45'</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 240101069,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1621885079
    }
]