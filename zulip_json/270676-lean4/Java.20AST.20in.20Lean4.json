[
    {
        "content": "<p>What's the laziest way I can get a Java AST in Lean4?</p>",
        "id": 251497351,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630469549
    },
    {
        "content": "<p>Have a java parser and print out the ast in s expressions or json or something</p>",
        "id": 251498192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630470163
    },
    {
        "content": "<p>Or write a java parser yourself in lean 4</p>",
        "id": 251498383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630470311
    },
    {
        "content": "<p>I'm not sure what the laziest way is per se, but if you are wanting to define some types to represent the AST, the <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/index.html\">Java Language Specification</a> isn't the worst document to work from at least.</p>\n<p>If you're wanting a parser... these <a href=\"https://github.com/antlr/grammars-v4/tree/master/java\">ANTLR Java grammars</a> might be a helpful starting point. I don't recall if in Java you have to interleave parsing with type checking and other analyses (like you do for C or C++)... hopefully not... since that is an absolute nightmare to get right.</p>",
        "id": 251584135,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1630512098
    },
    {
        "content": "<p>I'm trying out the lean4 <code>syntax</code> stuff, but I'm not sure how to solve something:</p>\n<p>I have the following setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"java\"</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">java_file</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">pkg_decl</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">import_decl</span><span class=\"bp\">*</span> <span class=\"n\">ty_decl</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">java_file</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\".\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">q_name</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"package\"</span> <span class=\"n\">q_name</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">pkg_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"import\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\"*\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">import_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"public\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"protected\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"private\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"abstract\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"static\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"final\"</span> <span class=\"o\">:</span> <span class=\"n\">modifier</span>\n<span class=\"n\">syntax</span> <span class=\"n\">modifier</span><span class=\"bp\">*</span> <span class=\"s2\">\"class\"</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">class_body</span> <span class=\"o\">:</span> <span class=\"n\">ty_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_params</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ty_ref</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_args</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"s2\">\"extends\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"implements\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_super</span>\n<span class=\"n\">syntax</span> <span class=\"n\">q_name</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_ref</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">class_body_decl</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">class_body</span>\n<span class=\"n\">syntax</span> <span class=\"n\">modifier</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">field_decl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ctor_or_method_decl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"=\"</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">field_decl</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ty_ret</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"n\">params</span> <span class=\"o\">(</span><span class=\"n\">ty_throws</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ctor_or_method_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"void\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ty_ret</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">param</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">params</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">param</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"throws\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">ty_throws</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">java</span> <span class=\"o\">{</span>\n  <span class=\"n\">package</span> <span class=\"n\">org.stnreu001.csc2002s</span><span class=\"bp\">;</span>\n  <span class=\"kn\">import</span> <span class=\"n\">java.util.</span><span class=\"bp\">*;</span>\n\n  <span class=\"n\">public</span> <span class=\"kd\">class</span> <span class=\"n\">HelloWorld</span><span class=\"bp\">&lt;</span><span class=\"n\">A</span><span class=\"bp\">&gt;</span> <span class=\"kd\">extends</span> <span class=\"n\">Comparator</span><span class=\"bp\">&lt;</span><span class=\"n\">A</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">public</span> <span class=\"n\">int</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">public</span> <span class=\"n\">HelloWorld</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But I don't know how to get the parser to distinguish between methods and fields.</p>",
        "id": 251590859,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630514607
    },
    {
        "content": "<p><code>&lt;|&gt;</code> does not backtrack if the LHS has consumed input, so you'll want to split</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">modifier</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">field_decl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ctor_or_method_decl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n</code></pre></div>\n<p>into two rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">modifier</span><span class=\"bp\">*</span> <span class=\"n\">field_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">modifier</span><span class=\"bp\">*</span> <span class=\"n\">ctor_or_method_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n</code></pre></div>\n<p>optionally factoring out the common <code>modifier*</code> prefix using yet another syntax category</p>",
        "id": 251591831,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630514943
    },
    {
        "content": "<p>Is there a syntax category for number literals in lean? Where can I discover what syntax categories already exist?</p>",
        "id": 251594409,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630515957
    },
    {
        "content": "<p><code>num</code></p>",
        "id": 251594531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630515995
    },
    {
        "content": "<p>It's not actually a syntax category, it's a parser (alias)</p>",
        "id": 251594643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630516048
    },
    {
        "content": "<p>They are sort of scattered all over, but that one is declared in a block with several others at the top of <code>Lean/Parser.lean</code></p>",
        "id": 251594796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630516099
    },
    {
        "content": "<p>How do parsers deal with the parsing of <code>Function&lt;A,Function&lt;B,C&gt;&gt;</code> so you don't have to do c++ style <code>`Function&lt;A,Function&lt;B,C&gt; &gt;</code>?</p>",
        "id": 251602893,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630519390
    },
    {
        "content": "<p>You put a hack in so that <code>&gt;&gt;</code> counts as two <code>&gt;</code> when needed</p>",
        "id": 251615076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630524423
    },
    {
        "content": "<p>and I guess, <code>&gt;&gt;&gt;</code> counts as three <code>&gt;</code> (since java has <code>&gt;&gt;&gt;</code> too IIRC)</p>",
        "id": 251615252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630524503
    },
    {
        "content": "<p>For a lean 4 parser, I would suggest replacing <code>\"&gt;\"</code> in the <code>ty_args</code> and <code>ty_params</code> rules with a custom parser that consumes a <code>&gt;</code> character and doesn't use tokens</p>",
        "id": 251615676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630524662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251615676\">said</a>:</p>\n<blockquote>\n<p>For a lean 4 parser, I would suggest replacing <code>\"&gt;\"</code> in the <code>ty_args</code> and <code>ty_params</code> rules with a custom parser that consumes a <code>&gt;</code> character and doesn't use tokens</p>\n</blockquote>\n<p>This is actually much more difficult to do than it sounds since parsers to run for syntax categories are selected based on their tokens and their is no way (that I know of to so) to say declare that a parser can eat any token that begins with a '&gt;' . This means that if another parser that consumes the full token exists, the parser will likely choose that first. You may be able to get around this by having your parser having no declared <code>firstToken</code> and a very high priority.</p>",
        "id": 251646904,
        "sender_full_name": "Mac",
        "timestamp": 1630540708
    },
    {
        "content": "<p>Yay, I caused a stack overflow. It happened when I added <code>ty_array</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">java_file</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"java\"</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">java_file</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">q_name</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\".\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">q_name</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">pkg_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"package\"</span> <span class=\"n\">q_name</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">pkg_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">import_decl</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"import\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\"*\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">import_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_ref</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_args</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_ref</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ty_ref</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_args</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_prim</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"int\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"long\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"float\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"double\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"boolean\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_prim</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_array</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"s2\">\"[\"</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_array</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty_array</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_prim</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_ref</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_ret</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"void\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_ret</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ty_ret</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"n\">q_name</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_ref</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_super</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"s2\">\"extends\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"implements\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_super</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_access</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"public\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"protected\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"private\"</span> <span class=\"o\">:</span> <span class=\"n\">mod_access</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_class_method</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"abstract\"</span><span class=\"bp\">?</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">mod_class_method</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_static_method</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"static\"</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">mod_static_method</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_method</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_class_method</span> <span class=\"o\">:</span> <span class=\"n\">mod_method</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_static_method</span> <span class=\"o\">:</span> <span class=\"n\">mod_method</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_field</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"static\"</span><span class=\"bp\">?</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">mod_field</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_local_var</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">mod_field</span>\n\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_params</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_params</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">lit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">lit</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">var_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"=\"</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">var_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">field_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_field</span> <span class=\"n\">var_decl</span> <span class=\"o\">:</span> <span class=\"n\">field_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">field_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">class_body</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">class_body_decl</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">class_body</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">param</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">param</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">params</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">param</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">params</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_throws</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"throws\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">ty_throws</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">local_var_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_local_var</span> <span class=\"n\">var_decl</span> <span class=\"o\">:</span> <span class=\"n\">local_var_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">assign</span>\n<span class=\"n\">syntax</span> <span class=\"n\">expr</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">expr</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">assign</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">stmt</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">block</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">stmt</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">block</span>\n<span class=\"n\">syntax</span> <span class=\"n\">block</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">var_decl</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">local_var_decl</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">assign</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">method_body</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">method_body</span>\n<span class=\"n\">syntax</span> <span class=\"n\">block</span> <span class=\"o\">:</span> <span class=\"n\">method_body</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">method_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_method</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ty_ret</span> <span class=\"n\">ident</span> <span class=\"n\">params</span> <span class=\"o\">(</span><span class=\"n\">ty_throws</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">method_body</span> <span class=\"o\">:</span> <span class=\"n\">method_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ctor_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_class_method</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ty_ret</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"n\">params</span> <span class=\"o\">(</span><span class=\"n\">ty_throws</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">method_body</span> <span class=\"o\">:</span> <span class=\"n\">ctor_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_method</span> <span class=\"s2\">\"class\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">class_body</span> <span class=\"o\">:</span> <span class=\"n\">ty_decl</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">pkg_decl</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">import_decl</span><span class=\"bp\">*</span> <span class=\"n\">ty_decl</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">java_file</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">field_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ctor_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">method_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">lit</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">java</span> <span class=\"o\">{</span>\n  <span class=\"n\">package</span> <span class=\"n\">org.stnreu001.csc2002s</span><span class=\"bp\">;</span>\n  <span class=\"kn\">import</span> <span class=\"n\">java.util.</span><span class=\"bp\">*;</span>\n\n  <span class=\"n\">public</span> <span class=\"kd\">class</span> <span class=\"n\">HelloWorld</span><span class=\"bp\">&lt;</span><span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">Object</span> <span class=\"n\">implements</span> <span class=\"n\">List</span><span class=\"bp\">&lt;</span><span class=\"n\">B</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span> <span class=\"kd\">extends</span> <span class=\"n\">Comparator</span><span class=\"bp\">&lt;</span><span class=\"n\">A</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span>\n    <span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"n\">final</span> <span class=\"n\">int</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"n\">void</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">public</span> <span class=\"n\">void</span> <span class=\"n\">HelloWorld</span><span class=\"o\">()</span> <span class=\"n\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n      <span class=\"n\">int</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">;</span>\n      <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251658813,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630551232
    },
    {
        "content": "<p>Ah, fixed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_no_array</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_prim</span> <span class=\"o\">:</span> <span class=\"n\">ty_no_array</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_ref</span> <span class=\"o\">:</span> <span class=\"n\">ty_no_array</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_no_array</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n</code></pre></div>",
        "id": 251663428,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630555798
    },
    {
        "content": "<p>I don't have to interleave parsing and typechecking at least, but I need to be able to differentiate type names from expression names. Would it be possible to reuse Lean4's existing binders and unification to resolve names in context and propagate information when a name is used like a type?</p>",
        "id": 251664588,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630557053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251646904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251615676\">said</a>:</p>\n<blockquote>\n<p>For a lean 4 parser, I would suggest replacing <code>\"&gt;\"</code> in the <code>ty_args</code> and <code>ty_params</code> rules with a custom parser that consumes a <code>&gt;</code> character and doesn't use tokens</p>\n</blockquote>\n<p>This is actually much more difficult to do than it sounds since parsers to run for syntax categories are selected based on their tokens and their is no way (that I know of to so) to say declare that a parser can eat any token that begins with a '&gt;' . This means that if another parser that consumes the full token exists, the parser will likely choose that first. You may be able to get around this by having your parser having no declared <code>firstToken</code> and a very high priority.</p>\n</blockquote>\n<p>You can say that your parser will eat tokens <code>&gt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p>",
        "id": 251676018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630567570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244748\">@ohhaimark</span> Where in the grammar do you need to distinguish type names from expression names? I thought java didn't inherit this cursed feature from C++</p>",
        "id": 251676359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630567802
    },
    {
        "content": "<p>In distinguishing method calls from static method calls.</p>\n<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"n\">typenamenotfollowingjavaconventions</span><span class=\"p\">.</span><span class=\"na\">staticcall</span><span class=\"p\">()</span>\n<span class=\"n\">localvariableinscope</span><span class=\"p\">.</span><span class=\"na\">membercall</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 251676917,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630568150
    },
    {
        "content": "<p>The java spec talks about having different levels of knowledge about a name in its grammar. AmbigiousName, TypeName, PackageOrTypeName, etc.</p>",
        "id": 251677162,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630568301
    },
    {
        "content": "<p>It seems like you can still parse that without knowing which is which, just have an ambiguous production and determine the difference at typechecking time</p>",
        "id": 251677849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630568756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251646904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251615676\">said</a>:</p>\n<blockquote>\n<p>For a lean 4 parser, I would suggest replacing <code>\"&gt;\"</code> in the <code>ty_args</code> and <code>ty_params</code> rules with a custom parser that consumes a <code>&gt;</code> character and doesn't use tokens</p>\n</blockquote>\n<p>This is actually much more difficult to do than it sounds since parsers to run for syntax categories are selected based on their tokens and their is no way (that I know of to so) to say declare that a parser can eat any token that begins with a '&gt;' .</p>\n</blockquote>\n<p>I don't see the issue, there are no category parsers starting with <code>&gt;</code> here</p>",
        "id": 251680303,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630570336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244748\">@ohhaimark</span> Btw, instead of a single-parser syntax category, you can also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ty_no_array</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 251683431,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630572078
    },
    {
        "content": "<p>Yay</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">q_name</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\".\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">pkg_decl</span> <span class=\"o\">:=</span> <span class=\"s2\">\"package\"</span> <span class=\"n\">q_name</span> <span class=\"s2\">\";\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">import_decl</span> <span class=\"o\">:=</span> <span class=\"s2\">\"import\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\"*\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"s2\">\";\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_ref</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_args</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_ref</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ty_ref</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_args</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty_prim</span> <span class=\"o\">:=</span> <span class=\"s2\">\"int\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"long\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"float\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"double\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"boolean\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_no_array</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_prim</span> <span class=\"o\">:</span> <span class=\"n\">ty_no_array</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty_ref</span> <span class=\"o\">:</span> <span class=\"n\">ty_no_array</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ty_no_array</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_ret</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"void\"</span> <span class=\"o\">:</span> <span class=\"n\">ty_ret</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ty_ret</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">q_name</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">ty_ref</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty_super</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"extends\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"implements\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">mod_access</span> <span class=\"o\">:=</span> <span class=\"s2\">\"public\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"protected\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"private\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">mod_class_method</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"abstract\"</span><span class=\"bp\">?</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">mod_static_method</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"static\"</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">mod_method</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_class_method</span> <span class=\"o\">:</span> <span class=\"n\">mod_method</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_static_method</span> <span class=\"o\">:</span> <span class=\"n\">mod_method</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">mod_field</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mod_access</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"static\"</span><span class=\"bp\">?</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">mod_local_var</span> <span class=\"o\">:=</span> <span class=\"s2\">\"final\"</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty_params</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">lit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">lit</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">param</span> <span class=\"o\">:=</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">params</span> <span class=\"o\">:=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">param</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">expr</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident_or_invoke</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dot</span> <span class=\"o\">:=</span> <span class=\"n\">ident_or_invoke</span> <span class=\"o\">(</span><span class=\"s2\">\".\"</span> <span class=\"n\">ident_or_invoke</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dot</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">var_decl</span> <span class=\"o\">:=</span> <span class=\"n\">ty</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"=\"</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\";\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">field_decl</span> <span class=\"o\">:=</span> <span class=\"n\">mod_field</span> <span class=\"n\">var_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">field_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ty_throws</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"throws\"</span> <span class=\"n\">ty_ref</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">ty_throws</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">method_body</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">ctor_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ctor_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_class_method</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"n\">params</span> <span class=\"o\">(</span><span class=\"n\">ty_throws</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">method_body</span> <span class=\"o\">:</span> <span class=\"n\">ctor_decl</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">method_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">method_decl</span> <span class=\"o\">:</span> <span class=\"n\">class_body_decl</span>\n<span class=\"n\">syntax</span> <span class=\"n\">mod_method</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ty_ret</span> <span class=\"n\">ident</span> <span class=\"n\">params</span> <span class=\"o\">(</span><span class=\"n\">ty_throws</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">method_body</span> <span class=\"o\">:</span> <span class=\"n\">method_decl</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">class_body</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">class_body_decl</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">local_var_decl</span> <span class=\"o\">:=</span> <span class=\"n\">mod_local_var</span> <span class=\"n\">var_decl</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">assign</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">expr</span> <span class=\"s2\">\";\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">block</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">stmt</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">block</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">var_decl</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">local_var_decl</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n<span class=\"n\">syntax</span> <span class=\"n\">assign</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"n\">method_body</span>\n<span class=\"n\">syntax</span> <span class=\"n\">block</span> <span class=\"o\">:</span> <span class=\"n\">method_body</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ty_decl</span> <span class=\"o\">:=</span> <span class=\"n\">mod_method</span> <span class=\"s2\">\"class\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">ty_params</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ty_super</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">class_body</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">lit</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">java_compilation_unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pkg_decl</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">import_decl</span><span class=\"bp\">*</span> <span class=\"n\">ty_decl</span><span class=\"bp\">*</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"java\"</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">java_compilation_unit</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>I should probably start putting this in a Gist or something.</p>",
        "id": 251687355,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630574129
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">java</span> <span class=\"o\">{</span>\n  <span class=\"n\">package</span> <span class=\"n\">org.stnreu001.csc2002s</span><span class=\"bp\">;</span>\n  <span class=\"kn\">import</span> <span class=\"n\">java.util.</span><span class=\"bp\">*;</span>\n\n  <span class=\"n\">public</span> <span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"bp\">&lt;</span><span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">Object</span> <span class=\"n\">implements</span> <span class=\"n\">List</span><span class=\"bp\">&lt;</span><span class=\"n\">B</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span> <span class=\"kd\">extends</span> <span class=\"n\">Comparator</span><span class=\"bp\">&lt;</span><span class=\"n\">A</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span>\n    <span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"n\">final</span> <span class=\"n\">int</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n\n    <span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"n\">void</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">List</span><span class=\"bp\">&lt;</span><span class=\"n\">Map</span><span class=\"bp\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span><span class=\"n\">Double</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span> <span class=\"n\">listOfMaps</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">public</span> <span class=\"n\">void</span> <span class=\"n\">HelloWorld</span><span class=\"o\">()</span> <span class=\"n\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n      <span class=\"n\">final</span> <span class=\"n\">int</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">;</span>\n      <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">;</span>\n      <span class=\"n\">y.x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y.z</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251687466,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630574185
    },
    {
        "content": "<p>Can precedence help a production rule that's left recursive? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident_or_invoke</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ty_args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dot</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span> <span class=\"s2\">\".\"</span> <span class=\"n\">ident_or_invoke</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dot</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident_or_invoke</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 251688699,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630574913
    },
    {
        "content": "<p>No. A syntax rule must be syntactically left-recursive to be handled correctly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">expr</span> <span class=\"s2\">\".\"</span> <span class=\"n\">ident_or_invoke</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 251693598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630577848
    },
    {
        "content": "<p>Can macro_rules for translating to AST give you pretty printing?</p>",
        "id": 251696059,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630579607
    },
    {
        "content": "<p>Not directly, if I understood your question correctly, but the parser itself can contain hints for Lean's built-in pretty printer <a href=\"https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Lean/Parser/Extra.lean#L63-L78\">https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Lean/Parser/Extra.lean#L63-L78</a><br>\n<a href=\"https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Init/Notation.lean#L143\">https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Init/Notation.lean#L143</a></p>",
        "id": 251699708,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630581722
    },
    {
        "content": "<p>Whats happening here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"lolol\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">testlol</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span> <span class=\"n\">lol</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lolol</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">testlol.lol</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">yee</span> <span class=\"o\">:</span> <span class=\"n\">testlol</span> <span class=\"o\">:=</span> <span class=\"n\">lolol</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">yee</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Lean.MetaEval</span> <span class=\"n\">testlol</span>\n</code></pre></div>",
        "id": 251703016,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630583803
    },
    {
        "content": "<p>Oh lol, has nothing to do with the macro stuff.</p>",
        "id": 251703199,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630583901
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">testlol</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span> <span class=\"n\">lol</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">testlol.lol</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 251703243,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630583937
    },
    {
        "content": "<p>Also with <a href=\"https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Init/Notation.lean#L410-L414\">https://github.com/leanprover/lean4/blob/aba0a479ec221ad2e31de09c6e71ce82a705ec38/src/Init/Notation.lean#L410-L414</a>, I see that the trivial tactic can macro expand into various other tactics. Does that mean the macro expander is backtracking?</p>",
        "id": 251704249,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630584468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Java.20AST.20in.20Lean4/near/251683431\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"244748\">ohhaimark</span> Btw, instead of a single-parser syntax category, you can also use</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ty_no_array</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I thought you said that <code>(\"a\" \"b\")*</code> was bad practice?</p>",
        "id": 251713032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630588691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why is there no MetaEval instance for the inductive definitions I make?</p>",
        "id": 251728767,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630594579
    },
    {
        "content": "<p>because one hasn't been defined</p>",
        "id": 251728835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594607
    },
    {
        "content": "<p>What is it you want to get out of evaluating the expression?</p>",
        "id": 251728904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594634
    },
    {
        "content": "<p>If you want to print it then use <code>deriving Repr</code> and then <code>#eval repr testlol.lol</code></p>",
        "id": 251728958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594658
    },
    {
        "content": "<p>Is there a deriving mechanism for it?<br>\nI expect inductive definitions to evaluate to themselves.<br>\nOh, so it's also the printed output?<br>\nCan you select arbitrary reductions to be used?</p>",
        "id": 251729160,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630594730
    },
    {
        "content": "<p>You can <em>evaluate</em> expressions of type <code>testlol</code>, but <code>let _ := testlol.lol; ()</code> isn't very useful, you presumably want to print it at the end or something</p>",
        "id": 251729313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594791
    },
    {
        "content": "<p>So it's just defining how to pretty print?</p>",
        "id": 251729444,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630594823
    },
    {
        "content": "<p>and for that you need <code>deriving Repr</code> or <code>ToString</code> (I forget if that has a deriving instance)</p>",
        "id": 251729461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594828
    },
    {
        "content": "<p>yes</p>",
        "id": 251729482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594835
    },
    {
        "content": "<p>You can define a printer yourself too</p>",
        "id": 251729525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594851
    },
    {
        "content": "<p>Or just use the inductive as an intermediate type and construct some base type at the end like strings or tuples or something</p>",
        "id": 251729616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630594884
    },
    {
        "content": "<p>Can you have deriving for mutual inductive types?</p>",
        "id": 251730166,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630595090
    },
    {
        "content": "<p>Nvm, I just didn't put enough deriving Reprs.</p>",
        "id": 251730354,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630595162
    },
    {
        "content": "<p>How would I write a syntax extension that takes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Flags</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Flag</span>\n   <span class=\"n\">deriving</span> <span class=\"n\">Repr</span> <span class=\"n\">Flags</span>\n</code></pre></div>\n<p>and produces something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Flags</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Flag</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Flags</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Flag</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>or find something which doesn't require something like this in the first place.</p>",
        "id": 251732426,
        "sender_full_name": "ohhaimark",
        "timestamp": 1630595963
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , can we get this in lean core? Mathlib wants this too</p>",
        "id": 251814121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630636077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Isn't tis the same problem as discussed in the previous <code>inferInstance</code> Zulip thread where <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/inferInstance/near/250009490\">said</a> that \"Ah, well, the current API doesn't quite allow for that yet\".</p>",
        "id": 251818444,
        "sender_full_name": "Mac",
        "timestamp": 1630640313
    },
    {
        "content": "<p>yes, this is a <em>syntax</em> extension</p>",
        "id": 251818463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630640338
    },
    {
        "content": "<p>The API issue might have to do with needing to use terms instead of class names</p>",
        "id": 251818494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630640393
    },
    {
        "content": "<p>but for this basic example it could just be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Flags</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Flag</span>\n   <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 251818549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630640417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I added basic support for <code>deriving</code> at <code>def</code>. We can now write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Boo</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"n\">IO</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Monad</span><span class=\"o\">,</span> <span class=\"n\">MonadState</span><span class=\"o\">,</span> <span class=\"n\">MonadReader</span>\n</code></pre></div>\n<p>It is very simple for now. It only supports</p>\n<ul>\n<li>Type \"aliases\".</li>\n<li>Classes with a prefix of outParams followed by one parameter.</li>\n</ul>",
        "id": 251924507,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1630694236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Thanks!</p>",
        "id": 251956152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630712989
    },
    {
        "content": "<p>A completely different take is to use an existing Java parser (<a href=\"https://javaparser.org\">https://javaparser.org</a> or <a href=\"https://spoon.gforge.inria.fr\">https://spoon.gforge.inria.fr</a>) and create a tool that translates the parsed instances of the Java AST to a similar Java AST in Lean.</p>",
        "id": 252454652,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1631105968
    }
]