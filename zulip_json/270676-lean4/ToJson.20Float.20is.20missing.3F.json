[
    {
        "content": "<p>How do I create JSon containing a floating point number?  Float seems to be entirely missing from fromtojson.lean even though JsonNumber contains a mantissa and exponent...?  (although the JSonNumber might also be missing an exponentSign).  Am I missing something?</p>\n<p>And how do I \"round\" a Float to an integer? (Float.ceil, Float.round, Float.floor seem to be missing?)</p>",
        "id": 288109434,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1656639842
    },
    {
        "content": "<p><code>JsonNumber</code> is a decimal float (converting between decimal and binary floats is lossy, so you want to delay it for as long as possible). The exponent sign is not missing, it's just a normalized representation (<code>x*10^n = (10^n*x)*10^(-0)</code> for n &gt; 0). <br>\nA <code>Float -&gt; JsonNumber</code> function does indeed seem to be missing. That part of the library was written for the server before Lean 4 had a workable float API. It would probably need to be implemented via C++. Unfortunately, this type of stuff is always very fiddly and hard to get fully right ... (Possible reference implementation: <a href=\"https://github.com/google/double-conversion\">https://github.com/google/double-conversion</a>)</p>\n<p><code>JsonNumber -&gt; Float</code> is already easy thanks to <code>OfScientific</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toFloat</span> <span class=\"o\">(</span><span class=\"n\">jn</span> <span class=\"o\">:</span> <span class=\"n\">JsonNumber</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">sign</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">jn.mantissa</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n  <span class=\"n\">sign</span><span class=\"bp\">*</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">jn.mantissa.natAbs</span> <span class=\"n\">true</span> <span class=\"n\">jn.exponent</span>\n</code></pre></div>\n<p>Rounding should probably also be exposed from C++.</p>",
        "id": 288144099,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1656667842
    },
    {
        "content": "<p>I exposed the C rounding functions.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/5294a39ec4e0d4b1e023d3f981696c540e5492e2\">https://github.com/leanprover/lean4/commit/5294a39ec4e0d4b1e023d3f981696c540e5492e2</a></p>",
        "id": 288169436,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656682215
    },
    {
        "content": "<p>Note that the lean3 versions of these functions (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/native.float.round\">docs#native.float.round</a> etc) have a different signature to the Lean4 ones</p>",
        "id": 289936818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658133250
    }
]