[
    {
        "content": "<p>Can lean 4 do something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Command</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RunnableCommand</span> <span class=\"kd\">extends</span> <span class=\"n\">Command</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runIt</span> <span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">Command</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cmd</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">RunnableCommand</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.run</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Not runnable\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 296938623,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1662178366
    },
    {
        "content": "<p>You misunderstand inheritance, it is merely a shortcut for structural composition. Lean is not an object-oriented language, it does not have subtypes.</p>",
        "id": 296964239,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662196971
    },
    {
        "content": "<p>For a constant number of \"subclasses\" known in advance (a \"clossed class\" in some languages), we usually model them as different constructors of an inductive data type instead.</p>",
        "id": 296964488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662197113
    },
    {
        "content": "<p>I had a similar question come up when looking into Julia's multiple dispatch in Lean4 using type classes (static vs dynamic aside): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">Command</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">doSomething</span> <span class=\"o\">(</span><span class=\"n\">RunnableCommand.mk</span>  <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In theory, a simple automatic coercion could make this work, no?</p>",
        "id": 296989807,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662210186
    },
    {
        "content": "<p>That's the opposite casting direction, but yes, it can</p>",
        "id": 296990272,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662210408
    }
]