[
    {
        "content": "<p>I am trying to use tasks to get concurrency within <code>TermElabM</code> (to run many <code>isDefEq</code> instances in parallel). My attempt at this does not run concurrently in the interpreter (as I see with <code>htop</code>) though the non-meta variant does run concurrently. My attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exprSeq</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">400000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">ToExpr.toExpr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">e</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counts</span><span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">cntsAux</span> <span class=\"o\">:=</span> <span class=\"n\">arr.map</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">ToExpr.toExpr</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">cnts</span> <span class=\"bp\">←</span>  <span class=\"n\">cntsAux.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.get</span>\n  <span class=\"n\">return</span> <span class=\"n\">cnts</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">100000000</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">counts</span>\n</code></pre></div>\n<p>Also not successful was a variant of this, calling <code>get</code> on Tasks earlier so the function counts became:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">counts</span><span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">cntsAux</span> <span class=\"o\">:=</span> <span class=\"n\">arr.map</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">ToExpr.toExpr</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">cntsAux2</span> <span class=\"o\">:=</span> <span class=\"n\">cntsAux.map</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">cnts</span> <span class=\"bp\">←</span>  <span class=\"n\">cntsAux.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.get</span>\n  <span class=\"n\">return</span> <span class=\"n\">cnts</span>\n</code></pre></div>\n<p>For reference, the non-meta code that did run concurrently was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">slowFib</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbgTrace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"fib {id}\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"n\">id</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">slowFib</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conc2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">tsks</span> <span class=\"o\">:=</span> <span class=\"n\">arr.map</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">tsks.map</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.get</span>\n  <span class=\"n\">res.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">conc2</span>\n</code></pre></div>\n<p>Is there any way around this?<br>\nThanks</p>",
        "id": 270680942,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1643962517
    },
    {
        "content": "<p>Look at the involved types: your tasks contain <code>TermElabM _</code> values, i.e. mere closures. Parallelizing <code>TermElabM</code> is not trivial since it contains many <code>StateRefT</code>s, whose mutable reference should probably not be shared across threads. And depending on your use case (e.g., are there mvars involved?), you will need to figure out how to merge the threads' states in the end.</p>",
        "id": 270688417,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643966935
    }
]