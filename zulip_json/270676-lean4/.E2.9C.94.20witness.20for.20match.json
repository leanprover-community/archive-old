[
    {
        "content": "<p>I remember hearing in one of the lean 4 intro talks that a witness for the match equality can be obtained analogous to <code>if c: a = b then ... else ...</code>, but I cannot remember the sytnax. Could someone who remembers this offhand help.</p>\n<p>For example, if <code>optNat</code> has type <code>Option Nat</code> then in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">optNat</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span>  <span class=\"n\">some</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in the two branches I would like to have equations <code>optNat = none</code> and <code>optNat = some j</code></p>\n<p>Thanks.</p>",
        "id": 254690151,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1632483730
    },
    {
        "content": "<p>It's subtle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">optNat</span> <span class=\"k\">with</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>There are a couple of examples in this slide (the link should take you to the timestamp 44:28) <a href=\"https://youtu.be/UeGvhfW1v9M?t=2668\">https://youtu.be/UeGvhfW1v9M?t=2668</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"UeGvhfW1v9M\" href=\"https://youtu.be/UeGvhfW1v9M?t=2668\"><img src=\"https://uploads.zulipusercontent.net/73e3907a94b165629af5b952079c1032a1fec3c0/68747470733a2f2f692e7974696d672e636f6d2f76692f556547766866573176394d2f64656661756c742e6a7067\"></a></div>",
        "id": 254692286,
        "sender_full_name": "Chris B",
        "timestamp": 1632484923
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 254693686,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1632485714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 254693691,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632485715
    },
    {
        "content": "<p>Note, the absence of whitespace is important here! <code>h : optNat</code> doesn't work.</p>",
        "id": 258219255,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634658609
    },
    {
        "content": "<p>Does Lean have something like pattern matching guard? </p>\n<p>Or in a more specific example, how can I tell the <code>match</code> expression that <code>h : x &lt; 64</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'A'</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'B'</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">63</span>  <span class=\"bp\">=&gt;</span> <span class=\"sc\">'/'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"c1\">-- how to absurd x ≥ 64?</span>\n</code></pre></div>",
        "id": 258229410,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634661895
    },
    {
        "content": "<p>no, there is not, although I have wanted it a few times</p>",
        "id": 258297958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634692360
    },
    {
        "content": "<p>I would go for the rust style syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'A'</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'B'</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">63</span>  <span class=\"bp\">=&gt;</span> <span class=\"sc\">'/'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"k\">if</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">64</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>although this probably still wouldn't work because the desugaring I am imagining wouldn't be able to prove that the wildcard branch is unreachable</p>",
        "id": 258298082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634692459
    },
    {
        "content": "<p>For this specific example there is a variation that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'A'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'B'</span>\n  <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">63</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'/'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">64</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_le_of_gt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 258298455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634692758
    },
    {
        "content": "<p>It seems <code>Fin</code> can get this done, but I fail to figure out where the magic comes from.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">x.toNat</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">x'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'A'</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'B'</span>\n</code></pre></div>",
        "id": 258298691,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634692962
    },
    {
        "content": "<p><code>{ n : Nat // n &lt; 2 }</code> also working.</p>\n<p>So can we just construct some subtype with constraints and then <code>match</code> can automatically figure it out?</p>",
        "id": 258298985,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634693237
    },
    {
        "content": "<p>oh, indeed just dropping the extra branch in my version works</p>",
        "id": 258299375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693622
    },
    {
        "content": "<p>But the constraints on <code>Char</code> is not working</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64Rev</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'A'</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'B'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'A'</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'B'</span> <span class=\"o\">}:=</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">x'</span> <span class=\"k\">with</span>  <span class=\"c1\">--failed to compile pattern matching, stuck at remaining variables: [val✝:(Char)]</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"sc\">'B'</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Do I need to write some theorems to achieve this?</p>",
        "id": 258299385,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634693641
    },
    {
        "content": "<p>but using <code>UInt8</code> literals doesn't work</p>",
        "id": 258299426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693652
    },
    {
        "content": "<p>No, the pattern matcher doesn't have a way to take theorems</p>",
        "id": 258299503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693751
    },
    {
        "content": "<p>the best you can do is craft things so that the wildcard case has all the information you need and prove an unreachability theorem about it</p>",
        "id": 258299558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693783
    },
    {
        "content": "<p>That last example is harder, because matches do not build up statements saying that earlier branches don't match</p>",
        "id": 258299617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693871
    },
    {
        "content": "<p>I would just write that using two if statements</p>",
        "id": 258299671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693891
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">base64Rev</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'A'</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'B'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'A'</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"sc\">'B'</span> <span class=\"o\">:=</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n  <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Here you don't actually need the <code>have</code> though, so it could just be written <code>if x = 'A' then 0 else 1</code></p>",
        "id": 258299832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634694078
    }
]