[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">lhs</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">exp</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">lhs</span> <span class=\"s2\">\"~=\"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">lhs</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[lhs|\"</span> <span class=\"n\">lhs</span> <span class=\"s2\">\"]\"</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[exp|\"</span> <span class=\"n\">exp</span> <span class=\"s2\">\"]\"</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">lhs</span> <span class=\"bp\">~=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"bp\">|</span> <span class=\"bp\">$$</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"bp\">|</span> <span class=\"bp\">$$</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exp1</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">((</span><span class=\"s2\">\"one\"</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">exp1</span> <span class=\"c1\">-- (\"one\", 1)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">exp2</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"bp\">|</span> <span class=\"s2\">\"two\"</span> <span class=\"bp\">~=</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">exp2</span>  <span class=\"c1\">-- (\"two\", 2)</span>\n\n<span class=\"c1\">-- expected: (\"three\", 3)</span>\n<span class=\"kd\">def</span> <span class=\"n\">exp3</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"s2\">\"thre\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"e\"</span><span class=\"o\">)</span> <span class=\"bp\">~=</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">exp3</span> <span class=\"c1\">-- expected ']'</span>\n</code></pre></div>\n<p>The grammar parses as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">exp</span><span class=\"bp\">&gt;</span> <span class=\"bp\">-&gt;</span> <span class=\"s2\">\"$(\"</span><span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span><span class=\"s2\">\")\"</span>\n</code></pre></div>\n<p>We want it to parse is as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">exp</span><span class=\"bp\">&gt;</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">lhs</span><span class=\"bp\">&gt;</span> <span class=\"s2\">\"=\"</span> <span class=\"bp\">&lt;</span><span class=\"n\">rhs</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">exp</span><span class=\"bp\">&gt;</span> <span class=\"bp\">-&gt;</span> <span class=\"s2\">\"$(\"</span><span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span><span class=\"s2\">\")\"</span> <span class=\"s2\">\"~=\"</span> <span class=\"bp\">&lt;</span><span class=\"n\">rhs</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>I am unsure how to ask the parser to backtrack on the failed parse of <code>&lt;expr&gt; -&gt; \"$(\" &lt;term&gt; \")\"</code>.</p>",
        "id": 288282814,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1656785428
    },
    {
        "content": "<p>That sounds like <a href=\"https://github.com/leanprover/lean4/pull/1272\">https://github.com/leanprover/lean4/pull/1272</a></p>",
        "id": 288283060,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656785791
    }
]