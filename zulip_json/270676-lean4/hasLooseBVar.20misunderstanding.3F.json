[
    {
        "content": "<p>I'm trying to write my first Lean tactic (in Lean 4) and mostly just guessing a lot. So I'm not sure if \"loose bvar\" just means something different than I had guessed, or if I've stumbled upon a bug, or if I've built a term that is inconsistent in some way.</p>\n<p>I would like to check if a lambda expression is constant in the sense that its body may reference anything except its own variable. Am I correctly assuming that I can check this with <code>!b.hasLooseBVar 0</code>, where <code>b</code> is the body? If not, what is the best way to do it?</p>\n<p>The problem: Within my tactic, I have produced a term where <code>hasLooseBVar 0</code> returns false, yet somewhere in an argument of an argument, the term contains a reference to bvar 0. When I print it, I see \"<a href=\"https://github.com/leanprover-community/mathlib/issues/0\">#0</a>\" there as expected. The term does not itself contain any lambda abstractions, only applications, which hopefully rules out indexing issues. In case it matters, the term also contains a reference to bvar 1, and <code>hasLooseBVar 1</code> does return true.</p>\n<p>If necessary, I can try to create an MWE, but I'd like someone more knowledgeable to check whether my guesses are correct first. Thanks!</p>",
        "id": 243308765,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1624204445
    },
    {
        "content": "<p>Your intuition sounds about right, yes. Lean itself uses <code>hasLooseBVar 0</code> in that manner, see e.g. <code>Expr.eta</code>.</p>",
        "id": 243309178,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624205019
    },
    {
        "content": "<p>OK, I've managed to create a self-contained example. I'm sure it can still be minimized a lot.<br>\nWhile isolating the problem, I found that <code>instantiateMVars</code> fixes it. So now I'm unsure whether it is a Lean issue or not. The error message in the example below is still a bit unexpected.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">swapLambdaParams</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">x</span> <span class=\"n\">X</span> <span class=\"n\">t</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- Uncommenting this line fixes the problem.</span>\n      <span class=\"c1\">--let g ← instantiateMVars g;</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">headBeta</span> <span class=\"o\">(</span><span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkLambda</span> <span class=\"n\">x</span> <span class=\"n\">BinderInfo.default</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkBVar</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n      <span class=\"n\">unless</span> <span class=\"n\">b.hasLooseBVar</span> <span class=\"mi\">0</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{b} unexpectedly does not have any bvar 0\"</span>\n      <span class=\"n\">mkLambda</span> <span class=\"s2\">\"y\"</span> <span class=\"n\">BinderInfo.default</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">mkLambda</span> <span class=\"n\">x</span> <span class=\"n\">BinderInfo.default</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"not defeq\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not a lambda\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"s2\">\"test \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic test]</span> <span class=\"kd\">def</span> <span class=\"n\">Tactic.evalTest</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"bp\">;</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">withMVarContext</span> <span class=\"n\">mvarId</span> <span class=\"k\">do</span>\n        <span class=\"n\">checkNotAssigned</span> <span class=\"n\">mvarId</span> <span class=\"bp\">`</span><span class=\"n\">test</span>\n        <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">swapLambdaParams</span> <span class=\"n\">e'</span><span class=\"bp\">;</span>\n        <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvarId</span> <span class=\"n\">r</span><span class=\"bp\">;</span>\n        <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"mi\">42</span>\n<span class=\"c1\">-- See error message.</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 243314824,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1624213271
    },
    {
        "content": "<p>Yes, <code>hasLooseBVar</code> does not see through assigned but not substituted metavariables. It cannot, as a pure function.</p>",
        "id": 243314918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624213411
    }
]