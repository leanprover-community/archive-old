[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[implemented_by Nat.add]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Nat.rec</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>This code results in the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">implemented_by'</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">Nat.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">Nat.add'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"n\">but</span> <span class=\"bp\">'</span><span class=\"n\">add'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 306556751,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1666912829
    },
    {
        "content": "<p>If you set pp.all it might show more info</p>",
        "id": 306556939,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666912959
    },
    {
        "content": "<p><code>pp.all</code> makes no difference. However, running the following reveals that <code>Nat.add</code>'s type is <code>([mdata borrowed:1 Nat]) -&gt; ([mdata borrowed:1 Nat]) -&gt; Nat</code>. I think the solution would be to either relax the equality check or change the error to reflect the special type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n</code></pre></div>",
        "id": 306558088,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1666913790
    }
]