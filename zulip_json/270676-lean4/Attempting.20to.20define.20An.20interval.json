[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"c1\">---------------- The Interval   The value</span>\n<span class=\"kd\">class</span> <span class=\"n\">Interval</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>  <span class=\"n\">where</span>\n  <span class=\"n\">upp</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span>\n  <span class=\"n\">low</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Interval</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Eq</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Interval</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isEmpty</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">upp</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Getting a failed to synthesize instance BEq (\\alpha \\to \\beta)<br>\nhow should i think about debugging this?</p>",
        "id": 254289662,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632264395
    },
    {
        "content": "<p><code>upp n</code> and <code>low n</code> are functions. Did you mean to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isEmpty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">upp</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>?</p>",
        "id": 254290158,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632264739
    },
    {
        "content": "<p>That worked, thank you. I think i'm fundamentally misunderstanding how this should fit together.</p>",
        "id": 254290630,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632265133
    },
    {
        "content": "<p>Is the idea that \"n\" is a particular instance of the the Interval type class?</p>",
        "id": 254290654,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632265157
    },
    {
        "content": "<p>and a is a particular instance of a type which this type class is defined over?</p>",
        "id": 254290675,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632265183
    },
    {
        "content": "<p>When is Bool appropriate vs, Prop? <br>\nin this def for example <br>\n<code>def contains (hn : β) : Prop := ((n.low a) ≤ hn) ∧ (hn ≤ (n.upp a))</code></p>",
        "id": 254290961,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632265328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439499\">@Eric Fode (he) (S'12)</span> The short version is: <code>Prop</code> is for proofs, <code>Bool</code> is for computations (programming).</p>",
        "id": 254293523,
        "sender_full_name": "Mac",
        "timestamp": 1632267021
    },
    {
        "content": "<p>So if i write that contains function (as above) I need to do one version for proofs and one version for programming?</p>",
        "id": 254293571,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632267061
    },
    {
        "content": "<p>Or is there a way i can use one and transform it into the other?</p>",
        "id": 254293596,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632267076
    },
    {
        "content": "<p>Is that what decidable is for?</p>",
        "id": 254293696,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632267123
    },
    {
        "content": "<p>To convert a (arbitrary) <code>Prop</code> to a <code>Bool</code>, the <code>Prop</code> needs to be decidable (i.e., be a possible instance of <code>Decidable</code>). To convert a <code>Bool</code> to a <code>Prop</code> one can just check for equality with true (i.e., <code>b = true</code>).</p>",
        "id": 254293751,
        "sender_full_name": "Mac",
        "timestamp": 1632267165
    },
    {
        "content": "<p>That, is of course, assuming you want the <code>Bool</code> to be <code>true</code> when the <code>Prop</code> holds and <code>false</code> when it does not.</p>",
        "id": 254294207,
        "sender_full_name": "Mac",
        "timestamp": 1632267494
    },
    {
        "content": "<p>For a specific <code>p : Prop</code>, if you already have a proof of it (i.e., <code>x : p</code>) or its negation (i.e., <code>x : ~p</code>), then you already know whether the <code>Bool</code> should be <code>true</code> or <code>false</code>, so you could just use either literal.</p>",
        "id": 254294409,
        "sender_full_name": "Mac",
        "timestamp": 1632267634
    },
    {
        "content": "<p>Interesting, i'll give it a shot</p>",
        "id": 254294483,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632267699
    }
]