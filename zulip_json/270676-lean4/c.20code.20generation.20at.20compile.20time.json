[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> well <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a> does most of that and is very small, so I would suggest just look at its source code (in particular <code>Alloy.C.Extension</code> and <code>Alloy.C.Command</code>).</p>",
        "id": 264494551,
        "sender_full_name": "Mac",
        "timestamp": 1639163575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>  You can also find examples of defining custom attributes and extensions in  the <a href=\"https://github.com/leanprover/lean4/tree/master/tests/leanpkg\">tests/leanpkg</a> directory of the Lean 4 repo (e.g., <code>user_attr</code>).</p>",
        "id": 264494731,
        "sender_full_name": "Mac",
        "timestamp": 1639163659
    },
    {
        "content": "<p>Thanks a lot for the pointers!</p>",
        "id": 264494904,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639163760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> How are you envisioning the integration with <code>lake</code>? will it be generic enough to allow plugging in completely custom solutions?</p>",
        "id": 264497226,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639164892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> yeah, that is the hope. Essentially, I want to add the ability to define custom facets for modules that are also materialized when a module is built</p>",
        "id": 264497763,
        "sender_full_name": "Mac",
        "timestamp": 1639165172
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> just to make sure (double checking by asking in a different way), is it safe to assume that <code>lake</code> will be able to run custom Lean code before starting the build process?</p>",
        "id": 264499699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639166173
    },
    {
        "content": "<p>(Or at least is it safe that this is the solution you're aiming for: running custom Lean code before building)</p>",
        "id": 264499865,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639166264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Yes! In fact, it can already do that! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Take a look at  the<code>extraDepTarget</code> configruration option, it is run before its corresponding package is built.</p>",
        "id": 264499867,
        "sender_full_name": "Mac",
        "timestamp": 1639166266
    },
    {
        "content": "<p>The point of the planned module facet extension is to make it easier to run custom code per module, rather than having to manual build and manage the whole transitive import graph.</p>",
        "id": 264500050,
        "sender_full_name": "Mac",
        "timestamp": 1639166362
    },
    {
        "content": "<p>Sweet! I saw the <code>extraDepTarget</code> config option earlier but I wasn't sure it was what I thought it was. The description says it's an target that should be built before the package, but it doesn't say anything about actually running the code. Also I noticed that <code>alloy</code> doesn't use it, so I'm confused by how you're doing it</p>",
        "id": 264500621,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639166605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/c.20code.20generation.20at.20compile.20time/near/264500621\">said</a>:</p>\n<blockquote>\n<p>The description says it's an target that should be built before the package, but it doesn't say anything about actually running the code. </p>\n</blockquote>\n<p>Building entails running code. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> Targets in Lake are just <code>BuildM</code> monads that run asynchronously.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/c.20code.20generation.20at.20compile.20time/near/264500621\">said</a>:</p>\n<blockquote>\n<p>Also I noticed that <code>alloy</code> doesn't use it, so I'm confused by how you're doing it</p>\n</blockquote>\n<p>A couple of reasons for this: </p>\n<ol>\n<li>Alloy is very WIP (hence I had yet to promote it and only did so when it was relevant tot the discuss at hand,</li>\n<li>Alloy doesn't need extra code run to build Alloy (the lean library) <em>itself</em>, hence it doesn't need to use <code>extraDepTarget</code>. It would however, like to add tot he build process of packages that use it.</li>\n<li>I was waiting on coding some better Lake integration before sprucing up its build script.</li>\n</ol>",
        "id": 264502309,
        "sender_full_name": "Mac",
        "timestamp": 1639167503
    },
    {
        "content": "<p>Examples of using <code>extraDepTarget</code> in practice can be found  in the mathport project (e.g., <a href=\"https://github.com/leanprover-community/mathlib3port/blob/d52af9e562576821a18dd8aa7161c872b9011170/lakefile.lean\"><code>mathlib3port</code>'s <code>lakefile.lean</code></a>)</p>",
        "id": 264502667,
        "sender_full_name": "Mac",
        "timestamp": 1639167703
    },
    {
        "content": "<p>Alright, thank you very much!!</p>",
        "id": 264502792,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639167752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I was playing around with Alloy and I'm wondering how do I actually execute <code>my_add</code> or that is not possible yet? And only the code generation is working now?</p>",
        "id": 264555336,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639219293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> are you using alloy as a dependency or playing around with it from within its directory?</p>",
        "id": 264563958,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639230846
    },
    {
        "content": "<p>From within it's directory. I just added <code>#eval my_add 1.0 2.0</code> in the example code and it didn't work (not that surprised) But it is not clear to me how to set it up to actually run <code>my_add</code></p>",
        "id": 264564295,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639231289
    },
    {
        "content": "<p>I'm gonna finish the dishes and then I'm going to try it</p>",
        "id": 264565007,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639232306
    },
    {
        "content": "<p>The initial post does not really explain the motivation here. What exactly is it you want to solve in C that you cannot solve in Lean?</p>",
        "id": 264565187,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639232535
    },
    {
        "content": "<p>Tomas' idea (please correct me if I'm wrong) is to provide multiple backend options like CUDA, as long as there is a <a href=\"https://github.com/lecopivo/lean4-karray/blob/master/KArray/Kernel.lean\"><code>Kernel</code></a> for it</p>",
        "id": 264566079,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639233896
    },
    {
        "content": "<p>And the end goal is to have access to super optimized low level numerical implementations while still writing friendly Lean code</p>",
        "id": 264566210,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639234064
    },
    {
        "content": "<p>Ok, I don't know the first thing about CUDA. Why is it necessary to translate whole terms to C instead of individual operations for it?</p>",
        "id": 264566284,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639234166
    },
    {
        "content": "<p>My guess is that then we'd have to cover the whole API with atomic implementations instead of defining a rule for well formed expressions and then let the automation take care of the rest. Maybe <a href=\"#narrow/stream/270676-lean4/topic/a.20numerical.20lib.20for.20Lean.204/near/264320146\">this response</a> explains better. It started with my approach to <a href=\"https://github.com/arthurpaulino/NumLean\">NumLean</a> (which I'm going to keep rolling and learn as much as I can from it)</p>",
        "id": 264566766,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639234789
    },
    {
        "content": "<p>Alright I couldn't figure out how to execute <code>my_add</code> either</p>",
        "id": 264568199,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639236546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/c.20code.20generation.20at.20compile.20time/near/264555336\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> I was playing around with Alloy and I'm wondering how do I actually execute <code>my_add</code> or that is not possible yet? And only the code generation is working now?</p>\n</blockquote>\n<p>'You can't execute <code>extern</code> declarations in the same module they are written in (this is a limitation of Lean). They have to be compiled to be compiled together with their native implementation into a shared library that is passed to <code>--load-dynlib</code> in the server to allow the interpret to execute them.</p>\n<p>To your second question. Yeah, only code generation is working to some degree right now.</p>",
        "id": 264570915,
        "sender_full_name": "Mac",
        "timestamp": 1639239975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> My own motivation is to be able to write a Lean DSL that lets me easily generate bindings to C functions with native interfaces.   e.g., so I can invoke native crypto functions from within Lean without writing C glue code. This could be solved by a Lean module similar to the Haskell FFI declarations, but that code tended to be pretty clunky to write in Haskell.  I think the Alloy approach could be a lot more readable.</p>",
        "id": 264574095,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1639243795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  For what I want to do, the prime example is the 'saxpy' operation <code>s*x+y</code> where s is a scalar and x and y are vectors. If you implement scalar multiplication and addition separately then you have to traverse the memory twice, effectively writing two for loops. If you implement 'saxpy' directly you can do it with just one for loop and traverse the memory just once. However, I do not want to implement 'saxpy' and other BLAS functions by hand but I want to generate their fast implementations. I think Lean can allow me to do something very similar to expression templates as used in C++ libraries Eigen or Blaze.</p>",
        "id": 264587692,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639260450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I'm trying to recreate your steps, passing <code>Test.lean</code> as an input</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanPreprocess</span>\n\n<span class=\"kd\">@[compile]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"hi\"</span>\n</code></pre></div>\n<p>But it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Init'</span>\n<span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Float'</span>\n<span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span>\n<span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">IO'</span>\n<span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"n\">Test.lean</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 264589075,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639261986
    },
    {
        "content": "<p>No matter what I put in <code>Test.lean</code>, it fails to be accepted as a input of <code>Main.lean</code></p>",
        "id": 264589229,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639262174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> where are you writing this? What is <code>LeanPreprocess</code>?</p>",
        "id": 264589256,
        "sender_full_name": "Mac",
        "timestamp": 1639262206
    },
    {
        "content": "<p>It's a POC package that I'm playing with. I'm gonna push it to github</p>",
        "id": 264589274,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639262237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> a program that runs the Lean elaborator also needs to have its <code>LEAN_PATH</code> set appropriately (i.e., to the path of the <code>.olean</code> files of the module it plans on using, including those of Lean proper), That error generally appears when <code>LEAN_PATH</code> is not set up properly.</p>",
        "id": 264589366,
        "sender_full_name": "Mac",
        "timestamp": 1639262344
    },
    {
        "content": "<p><a href=\"https://github.com/arthurpaulino/LeanPreprocess\">https://github.com/arthurpaulino/LeanPreprocess</a></p>",
        "id": 264589445,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639262429
    },
    {
        "content": "<p>ah, I think I see it on your lakefile</p>",
        "id": 264589567,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639262627
    },
    {
        "content": "<p>Whoa, it worked<br>\nThanks!</p>",
        "id": 264589834,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639262982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> fyi, I just updated Alloy to use a newer Lean and the newer code pattern for doing this.</p>",
        "id": 264590175,
        "sender_full_name": "Mac",
        "timestamp": 1639263416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> also note that on the command line you can use <code>lake env LeanPreprocess &lt;args...&gt;</code> to have Lake automatically fill set <code>LEAN_PATH</code> with the olean directories of the working directory's project.</p>",
        "id": 264590468,
        "sender_full_name": "Mac",
        "timestamp": 1639263741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> do you know how to iterate over the declarations of an <code>Environment</code> that are marked with a certain attribute?</p>",
        "id": 264599133,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639277493
    },
    {
        "content": "<p>I think I'm getting closer and closer</p>",
        "id": 264599140,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639277509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> <code>myAttr.ext.getState env</code> will get you a <code>NameSet</code> of the names of all the declarations with the attribute which you can iterate over as desired.</p>",
        "id": 264599197,
        "sender_full_name": "Mac",
        "timestamp": 1639277609
    },
    {
        "content": "<p>is it possible to extract their implementations too?</p>",
        "id": 264599295,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639277773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> declarations in Lean have mean kinds of implementations (e.g., the original <code>Syntax</code>, the elaborated <code>Expr</code>  of its <code>ConstantInfo</code> used in proofs, its compiled IR, the emitted C code from the IR, etc.). Which do you mean? For example, I use multiple of these elements in the C Emitter for Alloy.. The code is <a href=\"https://github.com/tydeu/lean4-alloy/blob/29667ba3a8136efca44f5b35550db0a297221887/Alloy/C/Emitter.lean#L50-L54\">here</a>.</p>",
        "id": 264599420,
        "sender_full_name": "Mac",
        "timestamp": 1639278009
    },
    {
        "content": "<p>I'm trying something similar to what you did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">builtin_initialize</span> <span class=\"n\">implExt</span> <span class=\"o\">:</span> <span class=\"n\">MapDeclarationExtension</span> <span class=\"n\">Syntax</span> <span class=\"bp\">←</span>\n  <span class=\"n\">mkMapDeclarationExtension</span> <span class=\"bp\">`</span><span class=\"n\">KArray</span> <span class=\"c1\">--?????</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">implExt.getLocalEntries</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">implExt.getState</span> <span class=\"n\">env</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.push</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extractCCode</span> <span class=\"o\">(</span><span class=\"n\">leanFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">leanFile</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.runFrontend</span> <span class=\"n\">input</span> <span class=\"n\">Options.empty</span> <span class=\"n\">leanFile.toString</span> <span class=\"bp\">`</span><span class=\"n\">main</span>\n  <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">impl</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">implExt.getLocalEntries</span> <span class=\"n\">env</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"-----{declName} {impl}------\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">kArrayCompileAttr.hasTag</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">test</span> <span class=\"k\">then</span>\n      <span class=\"n\">emitCCode</span> <span class=\"n\">env</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toString</span>\n    <span class=\"k\">else</span> <span class=\"s2\">\"\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"file {leanFile} has errors\"</span>\n</code></pre></div>\n<p>But it's not printing anything on that <code>for (declName, impl) in implExt.getLocalEntries env do</code></p>",
        "id": 264599803,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639278627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> a couple of comments:</p>\n<ol>\n<li>You need to add things to the extension, where are you doing that?</li>\n<li><code>builtin_initialize</code> are only run in compiled code. Are you using this from an executable? If not, you need to use <code>initialize</code>. If you use <code>initialize</code>, the use of the extension (i.e., actually adding / getting state) has to be done in a separate module.</li>\n</ol>",
        "id": 264606475,
        "sender_full_name": "Mac",
        "timestamp": 1639289110
    },
    {
        "content": "<p>This PR summarizes my current attempt: <a href=\"https://github.com/lecopivo/lean4-karray/pull/4/files\">https://github.com/lecopivo/lean4-karray/pull/4/files</a><br>\nMy current doubt is whether it's possible or not to extract the implementation of the function whose declaration is <code>declName</code> inside the <code>emitCCode</code> function, which also receives the <code>Environment</code> as a parameter.</p>",
        "id": 264627563,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639321440
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> , that error is happening again, but this time I have everything set in the <code>examples</code> script (<a href=\"https://github.com/lecopivo/lean4-karray/pull/4\">here</a>).</p>\n<p>This is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Init'</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Float'</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">61</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">IO'</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span>\n<span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n</code></pre></div>",
        "id": 264652176,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639355002
    },
    {
        "content": "<p>And I have no idea why this is happening because I tried to mirror what is <a href=\"https://github.com/arthurpaulino/LeanPreprocess\">here</a>, which works fine</p>",
        "id": 264652228,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639355049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> you are not using <code>Lean.initSerachPath</code> correctly -- it should be run once as <code>Lean.initSearchPath (&lt;- Lean.findSysroot?)</code></p>",
        "id": 264652319,
        "sender_full_name": "Mac",
        "timestamp": 1639355177
    },
    {
        "content": "<p>Nice! But for some reason <code>kArrayCompileAttr.ext.getState env |&gt;.toList</code> is an empty list</p>",
        "id": 264652901,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639356049
    },
    {
        "content": "<p>And <code>Test.lean</code> has this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[karray_compile c_test]</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 264652916,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639356099
    },
    {
        "content": "<p>Aha, this is the culprit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">ofExcept</span> <span class=\"bp\">$</span> <span class=\"n\">addExtern</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">declName</span>\n<span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 264653388,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639356781
    }
]