[
    {
        "content": "<p>Hi, I am new to Lean and have been going over <a href=\"https://github.com/IPDSnelting/tba-2021\">tba-2021</a> course slides and exercises. Exercise 6 of the course contains the following piece of code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Map</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k'</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">k</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"n\">v</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">update</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">apply_update</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">update</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I tried to prove <code>apply_update</code> theorem without using tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">apply_update'</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">from</span>\n  <span class=\"n\">eq_self</span> <span class=\"n\">k</span> <span class=\"bp\">▸</span> <span class=\"n\">ite_true</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I am getting this weird type mismatch error for <code>ite_true v (m k)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ite_true</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I am confused, as the expected and actual type are exactly the same. Could someone expalin why I am getting this error and how to resolve it?</p>\n<p>P.S. I am using the latest nightly version of Lean4.</p>",
        "id": 252040496,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1630806124
    }
]