[
    {
        "content": "<p>I am new to lean. I was just wondering if lean had something similar to JavaScript's Symbol Primitive? Something guaranteed to be unique. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol</a></p>",
        "id": 311928017,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669251712
    },
    {
        "content": "<p>Lean does not have a symbol primitive per say. However, the constructors of a inductive can function like them in many cases . For example, if there are three symbols I wish to use (<code>foo</code>, <code>bar</code>, and <code>baz</code>), I can create the following inductive to represent the symbol type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Symbol</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"bp\">|</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>However, this does requiring knowing all the symbols you plan on using ahead-of-time.  Sadly, there is no way to lazily create guaranteed unique symbols in Lean (at least not without adding new axioms and if then it would be noncomputable).</p>",
        "id": 311928823,
        "sender_full_name": "Mac",
        "timestamp": 1669252490
    },
    {
        "content": "<p>thank you for your reply. I was hoping to be able to create something that would scale out to infinity. I suppose an ever-incrementing counter would work in most cases.... does lean have the concept of a singleton class? (again, I'm sorry, this is all new to me)</p>",
        "id": 311929771,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669253543
    },
    {
        "content": "<p>If you wanted infinitely many distinct symbols, you can do that too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Symbol</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Symbol</span>\n</code></pre></div>\n<p>Then <code>foo 1</code> and <code>foo 2</code> or <code>foo n</code> for <code>n : ℕ</code> are distinct symbols. Is this what you were looking for? (Note: I'm not familiar with javascript, so this may be way off the mark.)</p>",
        "id": 311929983,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669253790
    },
    {
        "content": "<p>If I understand correctly correctly, Jireh’s answer is one way to make a “singleton class”.  Another is to use a structure with one field.  Logically these are the same thing, but the latter has more bells and whistles.</p>",
        "id": 311930059,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669253903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Symbol</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 311930097,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669253977
    },
    {
        "content": "<p>Generally <code>inductive</code> is a better fit for how one uses <code>symbol</code> in other languages (JS, Ruby) (where they are implemented as interned immutable strings).</p>",
        "id": 311939197,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669262629
    },
    {
        "content": "<p>The benefit in a more expressive type system is that they can contain associated data, as <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>  notes.</p>",
        "id": 311939256,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669262678
    },
    {
        "content": "<p>For Jireh's/Jason's <code>Symbol</code> type, in practice you'd define a state monad with a constructor for creating fresh symbols while incrementing the state monad's internal counter.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Symbol</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">SymbolM</span> <span class=\"o\">:=</span> <span class=\"n\">StateM</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">freshSymbol</span> <span class=\"o\">:</span> <span class=\"n\">SymbolM</span> <span class=\"n\">Symbol</span> <span class=\"o\">:=</span>\n  <span class=\"n\">StateT.modifyGet</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Symbol.mk</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Run a `SymbolM` computation, with the internal fresh symbol counter starting at `start`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">SymbolM.run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">SymbolM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">StateT.run'</span> <span class=\"n\">m</span> <span class=\"n\">start</span>\n\n<span class=\"c1\">-- Example: create an array of `num` fresh symbols</span>\n<span class=\"kd\">def</span> <span class=\"n\">freshSymbols</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SymbolM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Symbol</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">symbols</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">symbols</span> <span class=\"o\">:=</span> <span class=\"n\">symbols.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">freshSymbol</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">symbols</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SymbolM.run</span> <span class=\"o\">(</span><span class=\"n\">freshSymbols</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"c1\">-- #[{ n := 0 }, { n := 1 }, { n := 2 }, { n := 3 }, { n := 4 }, { n := 5 }, { n := 6 }, { n := 7 }, { n := 8 }, { n := 9 }]</span>\n</code></pre></div>",
        "id": 311979639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669284399
    },
    {
        "content": "<p>Since this is a functional programming language, you need to do the work yourself to keep track of the state. In this case, it's the necessary state to be able to tell different <code>Symbol</code>s created at different times apart.</p>",
        "id": 311979768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669284446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> If James is just looking for how to make unique ids at the user level then your solution is the way to go.</p>\n<p>However, generally, the goal of a symbol primitive in a language like JS is specifically to avoid carrying said generator state around at user level, Instead, the goal is have the language automatically ensure the different symbol literals used across the language are distinct. (essentially at a metaprogramming level).</p>",
        "id": 312093139,
        "sender_full_name": "Mac",
        "timestamp": 1669329899
    },
    {
        "content": "<p>For example, one might an expandable symbol type in Lean 4 to work something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_type</span> <span class=\"n\">Symbol</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Symbol</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Symbol</span>\n<span class=\"c1\">-- use foo and bar in code and later on (perhaps in a dependant package):</span>\n<span class=\"kd\">instance</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Symbol</span>\n</code></pre></div>",
        "id": 312093378,
        "sender_full_name": "Mac",
        "timestamp": 1669330108
    },
    {
        "content": "<p>Presumably you could build a workable version of this by just making <code>Symbol</code> store a filename, line number, and column offset, and creating suitable notation that populates those arguments</p>",
        "id": 312096936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669333270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Javascript doesn't have symbol literals, just the symbol constructor (it's not like Ruby or Lisp in this way). As far as I've known, the main intent for them is to provide unique non-string keys for private attributes in objects (keys can only be strings or symbols in JavaScript). There are also some special methods that objects can have at some specific symbols. Symbols can be used in the Lispier way if you create global constants for them first.</p>",
        "id": 312097157,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669333491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> True. I was using the term literal a bit too loosely. The docs have a form of Symbol \"literals\" with <code>@@symbol</code> syntax but that is not reflecting the language itself (where <code>@@foo</code> is usually exposed as <code>Symbol.foo</code>).</p>",
        "id": 312191050,
        "sender_full_name": "Mac",
        "timestamp": 1669384073
    }
]