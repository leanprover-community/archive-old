[
    {
        "content": "<p>Many functions take an environment as an argument. Is there a nice way to test them using the current environment? For example, in the following example I need both the type annotation and the <code>do</code> block:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n<span class=\"n\">makeFoo</span> <span class=\"o\">::</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">getStructureCtor</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n<span class=\"c1\">-- &lt;namespace&gt;.Foo.makeFoo</span>\n</code></pre></div>\n<p>It would be nicer to use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">evalWithEnv</span> <span class=\"o\">(</span><span class=\"n\">getStructureCtor</span> <span class=\"bp\">#</span><span class=\"n\">env</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n</code></pre></div>\n<p>Does something like this already exist? (If not, I might want to make it!)</p>",
        "id": 307421424,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667345219
    },
    {
        "content": "<p>Is this only for non-monadic code?</p>",
        "id": 307422172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667345607
    },
    {
        "content": "<p>What do you mean by that? (Like, am I just trying to get rid of the monadic code, or, am I only trying to address the case where the return type is non-monadic, or something else? Yes and yes if either of the first two! Maybe I'm overestimating the number of functions that depend on the environment but don't wind up in a monad? I do have a very small sample after all... Also, remember that it's possible that there's a very basic way to play with the current environment and I just don't know about it...!)</p>",
        "id": 307430684,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667348908
    },
    {
        "content": "<p>One simple option would be to give a <code>MetaEval</code> instance for <code>Env -&gt; A</code> functions</p>",
        "id": 307430943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667349059
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n<span class=\"n\">makeFoo</span> <span class=\"o\">::</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Eval</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MetaEval</span> <span class=\"o\">(</span><span class=\"n\">Environment</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">hideUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">Eval.eval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">hideUnit</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"n\">env</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">getStructureCtor</span> <span class=\"n\">env</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n</code></pre></div>",
        "id": 307431197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667349274
    },
    {
        "content": "<p>Wow, nice! That's really neat! :D That's pretty close to perfect. I'll need to learn more about how <code>eval</code> works before I understand how it works, though :) In the meantime it'll still be extremely useful! Thanks!</p>",
        "id": 307432936,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667350599
    }
]