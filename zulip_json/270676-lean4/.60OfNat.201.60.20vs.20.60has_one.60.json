[
    {
        "content": "<p>I ran into some problems with <code>OfNat</code>. I was trying to define the <code>Monoid</code> class (in multiplicative notation) and I extended<code>OfNat 1</code>, thinking of it as the replacement of <code>has_one</code> for Lean3. However, it doesn't really work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">expression</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  OfNat α 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Could anyone explain this? I've seen a whole infrastructure in Mathlib4: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Group/Defs.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Group/Defs.lean</a> to deal with this, but that still doesn't explain why the simple <code>OfNat</code> version doesn't work.</p>",
        "id": 265566410,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1640008832
    },
    {
        "content": "<p>Short answer: you need to write <code>OfNat M (nat_lit 1)</code></p>",
        "id": 265567604,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640009353
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265567795,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640009445
    }
]