[
    {
        "content": "<p>Is the process by which simp checks type annotations different from the process it uses to find patterns in a term?  I have a term that's elaborating to two different things depending on whether it's in a <code>have</code> statement, or whether it's used in a <code>simp</code> list, where the simp one won't actually match the term in the goal, while the <code>have</code> item does. When I take the full type from the <code>have</code> statement and try to annotate the simp item with it I get no errors, but hovering over the expression in the simp list shows the old type and seems to ignore the annotation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">UInt8.add_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt8.add_def</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoid.add_zero</span> <span class=\"n\">a.val</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  h0 has type:</span>\n<span class=\"cm\">  @Eq (Fin size)</span>\n<span class=\"cm\">  (@HAdd.hAdd (Fin size) (Fin size) (Fin size) (@instHAdd (Fin size) (@Fin.instAddFin size))</span>\n<span class=\"cm\">    (val a) (val (@OfNat.ofNat UInt8 0 (@instOfNatUInt8 0))))</span>\n<span class=\"cm\">  (val a)</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">AddMonoid.add_zero</span> <span class=\"n\">a.val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.instAddFin</span> <span class=\"n\">size</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">UInt8</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instOfNatUInt8</span> <span class=\"mi\">0</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  hovering over the simp term shows this type, which is not the ascribed type:</span>\n<span class=\"cm\">  @Eq (Fin size)</span>\n<span class=\"cm\">    (@HAdd.hAdd (Fin size) (Fin size) (Fin size)</span>\n<span class=\"cm\">      (@instHAdd (Fin size) (@AddSemigroup.toAdd (Fin size) (@AddMonoid.toAddSemigroup (Fin size) instAddMonoidFinSize)))</span>\n<span class=\"cm\">      (val a) (@OfNat.ofNat (Fin size) 0 (@instOfNat (Fin size) (@AddMonoid.toZero (Fin size) instAddMonoidFinSize))))</span>\n<span class=\"cm\">    (val a)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 260877092,
        "sender_full_name": "Chris B",
        "timestamp": 1636499860
    }
]