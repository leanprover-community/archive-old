[
    {
        "content": "<p>Why am I getting this error?<br>\nMWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">αs</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">hlist</span><span class=\"o\">)</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">hlist</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.nil</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">HList.nil</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HList.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"s2\">\" :: \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HList.cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)::</span><span class=\"n\">as</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">HList.map</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"bp\">·*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Functor</span> <span class=\"bp\">?</span><span class=\"n\">m.3922</span>\n</code></pre></div>",
        "id": 275913787,
        "sender_full_name": "Joseph O",
        "timestamp": 1647701229
    },
    {
        "content": "<p>what instance are you expecting to find?</p>",
        "id": 275913870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647701389
    },
    {
        "content": "<p>A functor instance?</p>",
        "id": 275913919,
        "sender_full_name": "Joseph O",
        "timestamp": 1647701421
    },
    {
        "content": "<p>the use of <code>Functor.map _ h</code> means that there should be an instance of <code>Functor HList</code></p>",
        "id": 275913922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647701427
    },
    {
        "content": "<p>or rather, it would be that but this doesn't typecheck</p>",
        "id": 275913933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647701462
    },
    {
        "content": "<p>which is why the error is not even mentioning <code>HList</code></p>",
        "id": 275913943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647701476
    },
    {
        "content": "<p>it has no idea what functor you are talking about</p>",
        "id": 275913950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647701498
    },
    {
        "content": "<p>In short, you cannot specify the functorial structure per-instance like this</p>",
        "id": 275913992,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647701535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Typeclass.20instance.20problem.3F/near/275913922\">said</a>:</p>\n<blockquote>\n<p>the use of <code>Functor.map _ h</code> means that there should be an instance of <code>Functor HList</code></p>\n</blockquote>\n<p>But i have such functor instance</p>",
        "id": 275916436,
        "sender_full_name": "Joseph O",
        "timestamp": 1647705275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Typeclass.20instance.20problem.3F/near/275913992\">said</a>:</p>\n<blockquote>\n<p>In short, you cannot specify the functorial structure per-instance like this</p>\n</blockquote>\n<p>You mean like on the first item?</p>",
        "id": 275916445,
        "sender_full_name": "Joseph O",
        "timestamp": 1647705300
    },
    {
        "content": "<p>No, you have <code>Functor (λ α =&gt; HList (α::αs))</code></p>",
        "id": 275916457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705334
    },
    {
        "content": "<p>Lean will not do the necessary higher order unification to find such instances</p>",
        "id": 275916501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705366
    },
    {
        "content": "<p>If you want to use <code>Functor</code> on a thing of type <code>T A</code> then you need <code>Functor T</code>, not <code>Functor (id T)</code> or <code>Functor (fun _ =&gt; T A)</code> or something else</p>",
        "id": 275916519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705417
    },
    {
        "content": "<p>Alternatively, you could rewrite <code>h</code> to have type <code>(λ α =&gt; HList (α::[String, Int])) Nat</code></p>",
        "id": 275916582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705490
    },
    {
        "content": "<p>Actually that doesn't seem to work either. It works if you specify <code>f</code> explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HList</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">·*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 275916822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705737
    },
    {
        "content": "<p>You can also make a definition for the type function and use that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FirstList</span> <span class=\"o\">(</span><span class=\"n\">αs</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">FirstList</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">HList.map</span>\n\n<span class=\"k\">#check</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FirstList</span> <span class=\"o\">[</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">]</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"bp\">·*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 275916915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647705941
    },
    {
        "content": "<p>Got it. So it seems there isn’t really a nice alternative.</p>",
        "id": 275923915,
        "sender_full_name": "Joseph O",
        "timestamp": 1647715918
    }
]