[
    {
        "content": "<p>I don't remember whether I already reported that. Lean 4 doesn't like displaying an applied function composition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"c1\">-- display ok: g ∘ f : α → γ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"c1\">-- display not ok: Function.comp g f x : γ</span>\n</code></pre></div>\n<p>This happens with <code>#check</code> but also in tactic state.</p>",
        "id": 322153431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674076245
    },
    {
        "content": "<p>Right now function composition is just a normal infix notation command so it's pretty printer is auto generated and does not end up recognizing the second pattern. If we want to display the 2nd thing correctly we would need to build custom delaborators instead.</p>",
        "id": 322153804,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674076386
    },
    {
        "content": "<p>so every infix ever now needs custom delaborators instead of it just working out the box?</p>",
        "id": 322153929,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674076432
    },
    {
        "content": "<p>this seems like a regression</p>",
        "id": 322153938,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674076436
    },
    {
        "content": "<p>No, as you can see the infix notation does delaborate correctly in the normal case</p>",
        "id": 322154060,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674076477
    },
    {
        "content": "<p>infix is a macro for <code>notation</code> and <code>notation</code> auto generates a delaborator, that delaborator just doesn't catch the 2nd pattern that patrick is showing. There went a little effort on my side into it already to make it better at auto generating that delaborator but I am not sure whether it is possible to extend it to what patrick is demanding here since it is more of a special case where the thing your notation generates happens to be a function so it makes sense to write it in the above way.</p>",
        "id": 322154216,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674076542
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.mkSimpleDelab#doc\">docs4#Lean.Elab.Command.mkSimpleDelab</a> is the function in charge of doing this</p>",
        "id": 322154453,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674076619
    },
    {
        "content": "<p>This will also affect what we call \"pi instances\". For example, if <code>f g : α -&gt; Nat</code>, then <code>(f + g) x = f x + g x</code> won't pretty print properly if I'm understanding the issue with <code>Function.comp</code>.</p>",
        "id": 322154525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674076644
    },
    {
        "content": "<p>This is a simple bug, it's supposed to work <a href=\"https://github.com/leanprover/lean4/issues/1367\">https://github.com/leanprover/lean4/issues/1367</a></p>",
        "id": 322154712,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674076702
    },
    {
        "content": "<p>Should I open a new bug report then?</p>",
        "id": 322155125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674076844
    },
    {
        "content": "<p>Please do, it's too late for actually writing code :)</p>",
        "id": 322155290,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674076914
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2045\">lean4#2045</a></p>",
        "id": 322159627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674078345
    },
    {
        "content": "<p>I posted a solution to this problem <a href=\"#narrow/stream/270676-lean4/topic/Unexpander.20for.20function.20composition\">here</a></p>\n<p>A new unexpander will fix it.</p>",
        "id": 322161800,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674079198
    },
    {
        "content": "<p>But perhaps you are looking for a more general solution.</p>",
        "id": 322162369,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674079390
    },
    {
        "content": "<p>Could you add this comment one the GitHub issue?</p>",
        "id": 322163880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674079993
    },
    {
        "content": "<p>There is a general mechanism for this in std, pending a move to core</p>",
        "id": 322163910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674080014
    },
    {
        "content": "<p>it basically amounts to using a delaborator combinator that has built in over-application handling</p>",
        "id": 322164025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674080054
    },
    {
        "content": "<p>Do you say this can be fixed by importing something from std?</p>",
        "id": 322164099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674080091
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.Delaborator.withOverApp#doc\">docs4#Lean.PrettyPrinter.Delaborator.withOverApp</a></p>",
        "id": 322164122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674080098
    },
    {
        "content": "<p>no, this is a combinator that has to be retrofitted into affected delaborators</p>",
        "id": 322164178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674080116
    },
    {
        "content": "<p>to get support for arbitrary infix notations this combinator has to be used by the autogenerated delaborator</p>",
        "id": 322164239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674080141
    },
    {
        "content": "<p>I suspect <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> would like to see this fixed rather soon for her teaching.</p>",
        "id": 322164265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674080153
    },
    {
        "content": "<p>Thanks for the alert.  Indeed I would (and I am sure <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> would too), I have added it to the <a href=\"https://github.com/orgs/leanprover-community/projects/3/views/1\">list</a> where I track issues relating to teaching.  However, for me personally, if I teach in Lean 4 this semester (still not sure), I will not get to function composition until March or April.</p>",
        "id": 322164586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674080297
    }
]