[
    {
        "content": "<p>I wonder how I can prove things when using <code>do</code> block (and relevant stuff like <code>List.mapM</code>).<br>\nFor example, I have a simple function that turns <code>List Nat</code> to <code>List Fin</code> when all elements satisfy lt, otherwise the <code>none</code> is produced.<br>\nI want to prove that the new list returned is of the same length (similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_map#doc\">docs4#List.length_map</a>), but I got stuck with the goal below which contains a large do block in it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toListFin</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.mapM</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">noneOrSamelength</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">=</span> <span class=\"n\">ys.length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toListFin</span><span class=\"bp\">?</span><span class=\"n\">_length</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">noneOrSamelength</span> <span class=\"o\">(</span><span class=\"n\">toListFin</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">xs</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">noneOrSamelength</span><span class=\"o\">,</span> <span class=\"n\">toListFin</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">List.mapM</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- case cons</span>\n<span class=\"c1\">-- n x : Nat</span>\n<span class=\"c1\">-- xs : List Nat</span>\n<span class=\"c1\">-- ih : noneOrSamelength (toListFin? n xs) xs</span>\n<span class=\"c1\">-- ⊢ match do</span>\n<span class=\"c1\">--   let a ← if h : x &lt; n then some { val := x, isLt := h } else none</span>\n<span class=\"c1\">--   let a_1 ← List.mapM (fun x =&gt; if h : x &lt; n then some { val := x, isLt := h } else none) xs</span>\n<span class=\"c1\">--   pure (a :: a_1) with</span>\n<span class=\"c1\">-- | none =&gt; True</span>\n<span class=\"c1\">-- | some xs_1 =&gt; List.length xs_1 = Nat.succ (List.length xs)</span>\n</code></pre></div>\n<p>Is the do block incompatible with theorem proving?</p>",
        "id": 284849865,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1654245046
    },
    {
        "content": "<p>The do block in the goal is just resugared <code>&gt;&gt;=</code>s. It does not exist in the core language.</p>",
        "id": 284850186,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654245244
    },
    {
        "content": "<p>There may be a preprint in about a week or something that among others discusses this very issue :) ...</p>",
        "id": 284850306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654245349
    },
    {
        "content": "<p>Great! Is that the <code>do-supplement</code> repository?</p>",
        "id": 284850750,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1654245640
    },
    {
        "content": "<p>Haha, yes</p>",
        "id": 284850937,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654245767
    },
    {
        "content": "<p>But long story short, with <code>simp only [(· &gt;&gt;= ·), Option.bind]</code> you can get rid of the monadic code, in exchange for a few nested matches</p>",
        "id": 284851089,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654245873
    },
    {
        "content": "<p>That's very helpful. Thanks!</p>",
        "id": 284851405,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1654246113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> has marked this topic as resolved.</p>",
        "id": 284851419,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654246123
    },
    {
        "content": "<p>I also find very useful to turn off notation <code>set_option pp.notation false</code> which reveals all those <code>bind</code> and <code>pure</code>.</p>\n<p>Is there a way to turn off only the <code>do</code> notation?</p>",
        "id": 284856959,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1654249847
    }
]