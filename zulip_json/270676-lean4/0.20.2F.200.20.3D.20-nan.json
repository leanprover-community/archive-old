[
    {
        "content": "<p>I was about to write a docstring explaining that <code>0 / 0 = 0</code> over most types, but on float, <code>0 / 0 = -nan</code>, which is fun... For the record, division by zero on <code>Float</code> looks like this:</p>\n<ul>\n<li><code>a / 0 = inf</code>, <code>a / -0 = -inf</code> if <code>a &gt; 0</code> or <code>a = inf</code></li>\n<li><code>a / 0 = -inf</code>, <code>a / -0 = inf</code> if <code>a &lt; 0</code> or <code>a = -inf</code></li>\n<li><code>0 / 0 = -0 / 0 = 0 / -0 = -0 / -0 = -nan</code></li>\n<li><code>nan / 0 = nan</code>, <code>nan / -0 = nan</code></li>\n<li><code>-nan / 0 = -nan</code>, <code>-nan / -0 = -nan</code></li>\n</ul>\n<p>it's actually impressive how many patterns this fails to have</p>",
        "id": 292520219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660011787
    },
    {
        "content": "<p>It's also a bit weird that it doesn't match IEEE floats (which don't have a notion of sign for NaN afaik, like nan = -nan)</p>",
        "id": 292521064,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660012890
    },
    {
        "content": "<p>IEEE floats have signed nan</p>",
        "id": 292521803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660013784
    },
    {
        "content": "<p>they have a lot more nan stuff too, there's qNaN and sNaN and a huge payload</p>",
        "id": 292521817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660013820
    },
    {
        "content": "<blockquote>\n<p>like nan = -nan</p>\n</blockquote>\n<p>That's yet another pattern that nan fails to have, a fairly famous one: not only <code>nan != -nan</code>, also <code>nan != nan</code></p>",
        "id": 292521896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660013919
    },
    {
        "content": "<p>As far as I can tell, this is not standards conforming: <code>0 / 0</code> should be positive NaN (the sign bit should be the xor of the input signs), and it is positive in most languages I can test</p>",
        "id": 292526041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660020001
    },
    {
        "content": "<p>...except for C and C++ <code>double</code>, which at least explains the behavior</p>",
        "id": 292526462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660020552
    },
    {
        "content": "<p>I get <code>nan</code> here on macOS FWIW for <code>0/0</code> with clang++ -- some hasty googling though says this may have to do with SSE (and that disabling it may change whether you get + or - nan)</p>",
        "id": 292530370,
        "sender_full_name": "Julian Berman",
        "timestamp": 1660025622
    },
    {
        "content": "<p>oh, that's even better. I think that leads to yet another way to prove false using <code>native_decide</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>if I save this in an olean file and you load it then you could prove that the expression is equal to 3 instead</p>",
        "id": 292588695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660055189
    },
    {
        "content": "<p>although I suppose the same is true about <code>System.Platform.getNumBits</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">System.Platform.getNumBits</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div>",
        "id": 292589049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660055309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/0.20.2F.200.20.3D.20-nan/near/292588695\">said</a>:</p>\n<blockquote>\n<p>if I save this in an olean file and you load it then you could prove that the expression is equal to 3 instead</p>\n</blockquote>\n<p>oleans are platform dependent, so using oleans cross-platform is expected to fail</p>",
        "id": 292609158,
        "sender_full_name": "Mac",
        "timestamp": 1660061630
    },
    {
        "content": "<p>The only platform-dependent part is whether it's 32-bit or 64-bit (and endianness, but that's not a practical concern nowadays when everything is little-endian).  In fact, for mathlib we will certainly need to use oleans built on another platform (i.e., they're built on Linux/amd64 but used on macOS/aarch64 or Windows/amd64).  It's completely infeasible to build mathlib for every OS+processor combination.</p>",
        "id": 292610233,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660061956
    },
    {
        "content": "<p>In fact, we ship the macOS/Linux aarch64 cross builds with Linux x64 .oleans</p>",
        "id": 292610438,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660062028
    },
    {
        "content": "<p>Related advertisement: we are still looking for volunteers for extending <a href=\"https://github.com/gebner/oleanparser\">https://github.com/gebner/oleanparser</a> with support for translating .oleans across architectures, in particular x64 to wasm32! At least it doesn't look like we've gotten all that closer to wasm64 <a href=\"https://webassembly.org/roadmap/\">https://webassembly.org/roadmap/</a></p>",
        "id": 292612611,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660062702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/0.20.2F.200.20.3D.20-nan/near/292610233\">said</a>:</p>\n<blockquote>\n<p>The only platform-dependent part is whether it's 32-bit or 64-bit (and endianness, but that's not a practical concern nowadays when everything is little-endian).  In fact, for mathlib we will certainly need to use oleans built on another platform (i.e., they're built on Linux/amd64 but used on macOS/aarch64 or Windows/amd64).  It's completely infeasible to build mathlib for every OS+processor combination.</p>\n</blockquote>\n<p>I know this is the idea, but Leo was not a fan. He made it very clear to me when implementing cloud builds that Lean is not intended to support cross-platform use of built oleans (and, as such, the cloud build strategy is currently designed to prevent this). At least, that is what I got out of our conversation.</p>",
        "id": 292648260,
        "sender_full_name": "Mac",
        "timestamp": 1660075333
    },
    {
        "content": "<p>I am also not sure I agree with your experience on the cross-platform support for oleans. When I build oleans with WSL they do not work on Windows and when I build Windows oleans they do not work on WSL.</p>",
        "id": 292648718,
        "sender_full_name": "Mac",
        "timestamp": 1660075526
    },
    {
        "content": "<p>Speaking about 32 bit platforms, is it possible that <a href=\"#narrow/stream/270676-lean4/topic/universe.20level.20maximum.20integer/near/290140491\">the to_offset overflow</a> could be caused more easily on a 32 bit platform, or am I missing something?</p>",
        "id": 292657840,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1660079232
    },
    {
        "content": "<p>Ah, Gabriel's estimate may already assume 32 bit. My bad.</p>",
        "id": 292658293,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1660079436
    },
    {
        "content": "<p><code>unsigned</code> is 32 bit in both cases, yes</p>",
        "id": 292658357,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660079467
    },
    {
        "content": "<p>I.e. it's actually better on 32 bit because even if objects are only half the size, there's not nearly enough address space for the overflow</p>",
        "id": 292658453,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660079501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/0.20.2F.200.20.3D.20-nan/near/292526041\">said</a>:</p>\n<blockquote>\n<p>As far as I can tell, this is not standards conforming: <code>0 / 0</code> should be positive NaN (the sign bit should be the xor of the input signs), and it is positive in most languages I can test</p>\n</blockquote>\n<p>\"When either an input or result is a NaN, this standard does not interpret the sign of a NaN. However,<br>\noperations on bit strings — copy, negate, abs, copySign — specify the sign bit of a NaN result, sometimes<br>\nbased upon the sign bit of a NaN operand. The logical predicates totalOrder and isSignMinus are also<br>\naffected by the sign bit of a NaN operand. For all other operations, this standard does not specify the sign<br>\nbit of a NaN result, even when there is only one input NaN, or when the NaN is produced from an invalid<br>\noperation.\" (IEEE 754-2019, 6.3).</p>",
        "id": 292682056,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1660094626
    },
    {
        "content": "<p>Idea: model <code>Float</code> as a quotient type where all NaN bit patterns are treated as the same.<br>\nIt should be zero-cost after compilation.</p>\n<p>WASM allows nondeterministic NaN bit pattern &lt;<a href=\"https://github.com/WebAssembly/design/blob/main/Rationale.md#nan-bit-pattern-nondeterminism\">https://github.com/WebAssembly/design/blob/main/Rationale.md#nan-bit-pattern-nondeterminism</a>&gt;.</p>",
        "id": 292687896,
        "sender_full_name": "pcpthm",
        "timestamp": 1660101379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/270676-lean4/topic/0.20.2F.200.20.3D.20-nan/near/292682056\">said</a>:</p>\n<blockquote>\n<p>\" For all other operations, this standard does not specify the sign<br>\nbit of a NaN result, even when there is only one input NaN, or when the NaN is produced from an invalid<br>\noperation.\" (IEEE 754-2019, 6.3).</p>\n</blockquote>\n<p>Yeah, I meant judgmental equality when I said <code>nan = -nan</code> in IEEE <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but I think judgmental equality doesn't really matter for floats since they are opaque. Arguably one fix to this problem is to have <code>Float.toString</code> print <code>nan</code> regardless of the sign bit :)</p>",
        "id": 292839180,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660168600
    },
    {
        "content": "<p>I agree that using a quotient type would make the most sense. The type itself is not exposed to lean, so changing it to be \"morally\" a quotient  type wouldn't change anything, except that as James says this would make <code>Float.toString</code> not a function anymore, so it should canonicalize NaNs first.</p>",
        "id": 292874386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660199786
    },
    {
        "content": "<p>While testing the other float functions to see what else \"leaks\" the nan sign bit or payload bits, I found this interesting behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Float.nan</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span> <span class=\"bp\">==</span> <span class=\"s2\">\"nan\"</span> <span class=\"k\">then</span> <span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Float.nan.toUInt8</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Float.nan.toUInt16</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Float.nan.toUInt32</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Float.nan.toUInt64</span> <span class=\"c1\">-- 9223372036854775808</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">Float.nan</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span> <span class=\"c1\">-- 9223372036854775808</span>\n</code></pre></div>\n<p>It's apparently not sensitive to the sign of the nan so it's not a portability problem, but it's still weird... (FYI <code>9223372036854775808</code> is <code>2^63</code>.)</p>",
        "id": 292876757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660201401
    },
    {
        "content": "<p>Reminded an old Rust soundness issue <a href=\"https://github.com/rust-lang/rust/issues/10184\">https://github.com/rust-lang/rust/issues/10184</a></p>",
        "id": 292877271,
        "sender_full_name": "pcpthm",
        "timestamp": 1660201691
    },
    {
        "content": "<p>The C spec, unsurprisingly, declares that all float -&gt; int conversions are UB when not representable in the target type, so this is definitely not a safe function to expose</p>",
        "id": 292877298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660201705
    },
    {
        "content": "<p>yep, that's exactly what I think is happening here</p>",
        "id": 292877325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660201725
    },
    {
        "content": "<p>we could probably expose <code>toUIntX?</code>instead?</p>",
        "id": 292921786,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660221623
    },
    {
        "content": "<p>I'm inclined to make it saturate for finite numbers and infinities and return 0 on nans... but first I have to figure out how to write that in conforming C</p>",
        "id": 292929023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660224167
    }
]