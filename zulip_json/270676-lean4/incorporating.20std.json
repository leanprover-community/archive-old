[
    {
        "content": "<p>Now that std4 has been removed from the core lean4 build, what is the recommended way to incorporate std4 into a package created with lake.</p>",
        "id": 302375071,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1664934417
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>in your lakefile</p>",
        "id": 302375470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664934885
    },
    {
        "content": "<p>Thanks, that works.  Will this pick up changes to std4 on github during a subsequent build of my package,  or do I have to manually delete lean_packages?</p>",
        "id": 302376710,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1664936145
    },
    {
        "content": "<p>Neither. The current commit you build against is kept in the <code>manifest.json</code> in your <code>lean_packages</code> (you should version control this file), and this file is updated when you run <code>lake update</code> but <code>lake build</code> just uses the version specified there</p>",
        "id": 302377231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664936652
    },
    {
        "content": "<p>I've added the <code>require</code> clause to my lakefile as Mario suggested, and ran <code>lake update</code> and <code>lake build</code>.  </p>\n<p>Some imports work fine,  like <code>import Std.Data.List.Init.Lemmas</code>,   it works fine. But when I try to import <code>Std.Data.List.Lemmas</code>, for instance, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">logan</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"n\">print</span><span class=\"bp\">-</span><span class=\"n\">paths</span> <span class=\"n\">Init</span> <span class=\"n\">Std.Data.Nat.Lemmas</span> <span class=\"n\">Std.Data.List.Basic</span> <span class=\"n\">Std.Data.Option.Lemmas</span> <span class=\"n\">Std.Classes.BEq</span><span class=\"bp\">`</span> <span class=\"n\">failed</span><span class=\"o\">:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">logan</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-12/lib:./lean_packages/std/build/lib:./build/lib:./lean_packages/std/build/lib /home/logan/.elan/toolchains/leanprover--lean4---nightly-2022-10-12/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lean_packages/std/././Std/Tactic/NoMatch.lean -R ./lean_packages/std/./. -o ./lean_packages/std/build/lib/Std/Tactic/NoMatch.olean -i ./lean_packages/std/build/lib/Std/Tactic/NoMatch.ilean -c ./lean_packages/std/build/ir/Std/Tactic/NoMatch.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/././</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NoMatch.lean</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">isAtomicDiscr</span><span class=\"bp\">?'</span>\n<span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/././</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NoMatch.lean</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span> <span class=\"bp\">'</span><span class=\"n\">_uniq.124'</span>\n<span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/././</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NoMatch.lean</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span> <span class=\"bp\">'</span><span class=\"n\">_uniq.124'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">logan</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-10-12/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>Any insight as to what I'm doing wrong?</p>",
        "id": 303659184,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1665586884
    },
    {
        "content": "<p>Probably mismatched toolchains? Std4 master is using <code>leanprover/lean4:nightly-2022-10-09</code>.</p>",
        "id": 303659729,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1665587044
    },
    {
        "content": "<p>Ah yes, that fixed it. Thank you, Mauricio!</p>",
        "id": 303661687,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1665587661
    }
]