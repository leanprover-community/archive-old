[
    {
        "content": "<p>Dear All,</p>\n<p>this is a follow up to the previous <a href=\"#narrow/stream/270676-lean4/topic/parsing.20strings\">parsing strings</a> question.</p>\n<p>I am not at all sure about what I am doing, but it seems that <code>#eval [...]</code> returns a message that ends in a line break, while <code>#check [...]</code> does not.  Here is a simple example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Frontend</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/--  Shortened from `Lean.Elab.runFrontend`.  Returns the `MessageLog`. -/</span>\n<span class=\"kd\">@[export lean_run_frontend]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Elab.myRun</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mainModuleName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">MessageLog</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"n\">opts</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env.setMainModule</span> <span class=\"n\">mainModuleName</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"n\">opts</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"n\">commandState</span>\n\n  <span class=\"n\">pure</span> <span class=\"n\">s.commandState.messages</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inp</span> <span class=\"o\">:=</span> <span class=\"s2\">\"#eval 0</span><span class=\"se\">\\n</span><span class=\"s2\">#check 0</span><span class=\"se\">\\n</span><span class=\"s2\">#eval 0</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">logs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.myRun</span> <span class=\"n\">inp</span> <span class=\"n\">Options.empty</span> <span class=\"s2\">\"\"</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mess</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">ms</span> <span class=\"k\">in</span> <span class=\"n\">logs.msgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">mess</span> <span class=\"o\">:=</span> <span class=\"n\">mess</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ms.data.toString</span><span class=\"o\">]</span>\n  <span class=\"n\">return</span> <span class=\"n\">mess.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">String.back</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c1\">--  [(\"0\\n\", '\\n'), (\"0 : Nat\", 't'), (\"0\\n\", '\\n')]</span>\n</code></pre></div>\n<p>It is certainly easy for me to workaround this, by simply adding an extra <code>'\\n'</code> at the end of the message, in case there isn't one already.</p>\n<p>However, is this expected behaviour?  Am I doing something wrong?</p>\n<p>Thanks!</p>",
        "id": 321779371,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673945322
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 321795273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673950854
    }
]