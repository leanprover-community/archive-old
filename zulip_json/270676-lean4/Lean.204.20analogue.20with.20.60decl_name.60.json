[
    {
        "content": "<p>In Lean 3 we had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Name of the declaration currently being elaborated. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">decl_name</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">name</span>\n</code></pre></div>\n<p>What is the Lean 4 analogue?</p>",
        "id": 305931302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666654433
    },
    {
        "content": "<p><code>decl_name%</code>, a term macro which expands to a name literal (it's super convenient)</p>",
        "id": 305931434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666654477
    },
    {
        "content": "<p>there is also a plumbing version of the function if you need it</p>",
        "id": 305931499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666654517
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/BuiltinTerm.lean#L216-L219\">https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/BuiltinTerm.lean#L216-L219</a><br>\ndelegates to<br>\n<a href=\"https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/Term.lean#L399\">https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/Term.lean#L399</a><br>\nwhich reads <br>\n<a href=\"https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/Term.lean#L157\">https://github.com/leanprover/lean4/blob/d7d61bfb558ffcdff599249297c50d8b65c4aeb4/src/Lean/Elab/Term.lean#L157</a></p>",
        "id": 305932435,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666655008
    }
]