[
    {
        "content": "<p>How can I show that <code>nodes</code> terminates in the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nodes</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.nodes</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  Foo.nodes</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">structural recursion cannot be used</span>\n\n<span class=\"cm\">'termination_by' modifier missing</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 269063033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643003971
    },
    {
        "content": "<p>Changing it to the following, Lean's able to see that the function terminates, but in what I'm actually doing, <code>b</code> has a <code>List (String × Foo)</code> instead.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nodes</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.nodes</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 269063190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643004079
    },
    {
        "content": "<p>You should try <code>termination_by</code></p>",
        "id": 269063356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643004266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20cannot.20be.20used/near/269063356\">said</a>:</p>\n<blockquote>\n<p>You should try <code>termination_by</code></p>\n</blockquote>\n<p>... Yes, I read the error message and I messed around with it for a bit, looking up uses of <code>termination_by</code> in the  lean4 repository, but I couldn't see how to use it for this.</p>",
        "id": 269063409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643004362
    },
    {
        "content": "<p>worst case scenario I believe you can use the <code>Foo</code> recursor directly, but hopefully the autogenerated sizeof instance works</p>",
        "id": 269063599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643004546
    },
    {
        "content": "<p>Thanks for the <code>sizeOf</code> pointer.</p>\n<p>Is there a simpler way to write this than what I did below? (Are there plans to make writing recursive functions like this easier?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nodes</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span>\n    <span class=\"n\">x.nodes</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 269064331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643005500
    }
]