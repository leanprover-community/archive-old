[
    {
        "content": "<p>I would like to propose the Lean 4 change the token used to start line comments from <code>--</code> to something else. I would suggest <code>#-</code> or <code>#/</code>, and I would lean towards the former. I know this would be  a somewhat radical change, so I can understand if it is rejected quickly. However, despite it being a rather fundamental change, it would still be rather easy to migrate to (e.g., just Find/Replace <code>--</code> to <code>#-</code>).</p>\n<p>I have to big reasons for suggesting this:</p>\n<ul>\n<li>To allow the use of <code>--</code> for <code>Nat.sub</code>(paralleling <code>//</code> for integer division) -- see <a href=\"https://github.com/leanprover/lean4/issues/433\">#433</a></li>\n<li>To allow the use of <code>--</code> in DSLs that need it (e.g., a  CLI DSL that uses <code>--</code> for options)</li>\n</ul>\n<p>What do people think of this idea / proposal?</p>",
        "id": 258221021,
        "sender_full_name": "Mac",
        "timestamp": 1634659121
    },
    {
        "content": "<p>For me it is more important that <code>--</code> (the comment) is easy to type.  For <code>Nat.sub</code>, we could use <code>âˆ¸</code> or <code>.-</code>.  Command-line argument parser DSLs are really a niche use case.</p>",
        "id": 258221708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is <code>#-</code> really that much harder to type? I mean the two other most common line comment sequences are <code>#</code> and <code>//</code> which are not much different.</p>",
        "id": 258222242,
        "sender_full_name": "Mac",
        "timestamp": 1634659474
    },
    {
        "content": "<p>Yes, significantly.  At least on a qwerty keyboard (and no I'm not going to learn a new keyboard layout for Lean....).<br>\n<code>--</code> is two taps, on the same key<br>\n<code>#-</code> is three taps, with two hands, on three different keys</p>",
        "id": 258222455,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the CLI DSL is an example from an actual use case (Lake) where I would like tto do things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sys</span><span class=\"bp\">%</span> <span class=\"n\">git</span> <span class=\"n\">submodule</span> <span class=\"n\">update</span> <span class=\"c1\">--init src/lake</span>\n</code></pre></div>\n<p>in scripts to run external processes.</p>",
        "id": 258222749,
        "sender_full_name": "Mac",
        "timestamp": 1634659644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Line.20Comment.20Change/near/258222455\">said</a>:</p>\n<blockquote>\n<p>Yes, significantly.  At least on a qwerty keyboard (and no I'm not going to learn a new keyboard layout for Lean....).<br>\n<code>--</code> is two taps, on the same key<br>\n<code>#-</code> is three taps, with two hands, on three different keys</p>\n</blockquote>\n<p>What about <code>#</code> and <code>//</code> though (the by far more common line comment starters):<br>\n<code>#</code>: two taps, two hands, two different keys<br>\n<code>//</code>: four taps,  one hand, two different keys</p>",
        "id": 258222928,
        "sender_full_name": "Mac",
        "timestamp": 1634659704
    },
    {
        "content": "<p>You could also write this as <code>sys\"git submodule update --init src/lake\"</code>.</p>",
        "id": 258223005,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659729
    },
    {
        "content": "<p>Huh? <code>/</code> is a single keypress on qwerty.</p>",
        "id": 258223037,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the point is to parse the command....</p>",
        "id": 258223053,
        "sender_full_name": "Mac",
        "timestamp": 1634659745
    },
    {
        "content": "<p>I'm not sure I understand.  Is <code>git</code> a variable?</p>",
        "id": 258223146,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659776
    },
    {
        "content": "<p>That way I can do things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">build</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>and have it uses Lean utilities for <code>cd</code>, <code>rm</code>, and <code>mkdir</code> (and perform the commands in sequence)</p>",
        "id": 258223178,
        "sender_full_name": "Mac",
        "timestamp": 1634659789
    },
    {
        "content": "<p>Reusing Lean's tokenizer for DSLs is fundamentally flawed. Fixing that is however not trivial.</p>",
        "id": 258223320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634659824
    },
    {
        "content": "<p>If you want to reuse the tokenizer, you could do windows-style</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">rm</span> <span class=\"bp\">/</span><span class=\"n\">rf</span> <span class=\"n\">build</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">mkdir</span> <span class=\"bp\">/</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n</code></pre></div>",
        "id": 258223454,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634659871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> lol, true, but I would kind of like to keep Unix syntax (since that is what everyone likes)</p>",
        "id": 258223531,
        "sender_full_name": "Mac",
        "timestamp": 1634659907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Line.20Comment.20Change/near/258223037\">said</a>:</p>\n<blockquote>\n<p>Huh? <code>/</code> is a single keypress on qwerty.</p>\n</blockquote>\n<p>oops, for some reason, despite looking at my key, I was stuck with the belief it needed two keys. I think it may be due to the fact that I usually use <code>Ctrl+/</code> for comments in editors.</p>",
        "id": 258223803,
        "sender_full_name": "Mac",
        "timestamp": 1634659995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I still also confused why the line comment needs to be especially quick to enter -- what is the use case there?</p>",
        "id": 258224263,
        "sender_full_name": "Mac",
        "timestamp": 1634660136
    },
    {
        "content": "<p>I'm typing it more often than command-line arguments, that's all.</p>",
        "id": 258224378,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634660166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  I would think the the comments starts would be token sequence you want to be a bit obscure in a language with flexible syntax as eats up any possibility of using that sequence in DSLs / general notation.</p>",
        "id": 258224647,
        "sender_full_name": "Mac",
        "timestamp": 1634660252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Line.20Comment.20Change/near/258223320\">said</a>:</p>\n<blockquote>\n<p>Reusing Lean's tokenizer for DSLs is fundamentally flawed. Fixing that is however not trivial.</p>\n</blockquote>\n<p>Is there any other way to (feasibly) do it in the current setup?</p>",
        "id": 258224909,
        "sender_full_name": "Mac",
        "timestamp": 1634660335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Line.20Comment.20Change/near/258222455\">said</a>:</p>\n<blockquote>\n<p><code>--</code> is two taps, on the same key</p>\n</blockquote>\n<p>An alternative sequence that could keep this property and also still be a bit obscure (i.e., unlikely to be used elsewhere) is <code>;;</code> (or , to a lesser extent,<code>[[</code>).</p>",
        "id": 258225753,
        "sender_full_name": "Mac",
        "timestamp": 1634660612
    },
    {
        "content": "<p>No matter how we change the lexical syntax of the comments, it will always clash with some potential application.  There is no way around that.  Changing the comment syntax won't solve the problem, it will just shift it with a lot of churn.</p>",
        "id": 258226856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661016
    },
    {
        "content": "<p>In this case, the nicest and cleanest solution would be if we could plug in a custom parser that doesn't strip comments.  This is useful for a lot of DSLs where you want to copy&amp;paste code from another language into a lean file (<code>--</code> clashes with HTML, <code>;;</code> clashes with c, <code>[[</code> clashes with lua, <code>#/</code> clashes with javascript, <code>#-</code> clashes with lisp, ...)</p>",
        "id": 258226864,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661019
    },
    {
        "content": "<p>Another productive suggestion would be to use the power of Unicode to switch to different dashes: â€’, â€“, â€”, â€•<br>\nWe use this technique extensively in mathlib (we run out of arrows all the time).</p>",
        "id": 258227027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661080
    },
    {
        "content": "<p>It might be sufficient to move <code>Lean.Parser.whitespace</code> into the parser context for some initial customizability. But I don't really want to think about it right now...</p>",
        "id": 258227297,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634661169
    },
    {
        "content": "<p>BTW: for those of you who didn't get the reference: <a href=\"https://wiki.haskell.org/Wadler%27s_Law\">https://wiki.haskell.org/Wadler%27s_Law</a></p>",
        "id": 258227607,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> lol. I would argue that the hierarchy  is probably derived from the level of control a user has to customize those elements to their preferences. In most languages, semantics are easily customizable, syntax less so, lexical syntax even less so, and  comments generally not at all.</p>",
        "id": 258229451,
        "sender_full_name": "Mac",
        "timestamp": 1634661907
    },
    {
        "content": "<p>Lean currently does a very good job of making both semantics and syntax highly customizable, but still has a number of limits on lexical syntax and comments. Your suggestion would potential alleviate some of the later though.</p>",
        "id": 258229729,
        "sender_full_name": "Mac",
        "timestamp": 1634661986
    }
]