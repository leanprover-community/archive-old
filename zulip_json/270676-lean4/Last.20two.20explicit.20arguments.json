[
    {
        "content": "<p>Is there a quick way to decompose a relation application to get the last two explicit arguments, i.e., which acts as the <em>solution</em> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">mpAppM'</span> <span class=\"n\">r</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>where <code>z</code> is known and we want <code>r</code>, <code>x</code> and <code>y</code>?</p>\n<p>This is for repairing <code>trans</code>, one of whose failure cases is caused by <code>@HEq: {α : Sort u_1} → α → {β : Sort u_1} → β → Prop</code>. The present code naively assumes that <code>x</code> and <code>y</code> are the last two arguments.</p>\n<p>It seems that a meta-telescope giving binders should do this smoothly, but I am not used to using these.</p>",
        "id": 316922455,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671533928
    }
]