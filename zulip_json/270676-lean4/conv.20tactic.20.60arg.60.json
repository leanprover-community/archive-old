[
    {
        "content": "<p>Inside a <code>conv</code> tactic: I have reached the following goal state </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evenOddRec</span> <span class=\"n\">h0</span> <span class=\"n\">h_even</span> <span class=\"n\">h_odd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I now enter <code>arg @5</code> and lean complains that it cannot select this argument. What arguments can <code>arg</code> not select inside <code>conv</code>.</p>",
        "id": 317178048,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671634626
    },
    {
        "content": "<p>Extra information : lean cannot seem to select <code>arg @1</code> either, but <code>arg @2</code>, <code>arg @3</code>, and <code>arg @4</code> work as expected.</p>",
        "id": 317178402,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671634718
    },
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Bitwise</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evenOddRec</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">binaryRec</span> <span class=\"n\">h0</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">bit0_val</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_even</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">bit1_val</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_odd</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">even_odd_rec_zero</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">evenOddRec</span> <span class=\"n\">_</span> <span class=\"n\">h0</span> <span class=\"n\">h_even</span> <span class=\"n\">h_odd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">binary_rec_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">even_odd_rec_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">h_even</span> <span class=\"mi\">0</span> <span class=\"n\">h0</span> <span class=\"bp\">=</span> <span class=\"n\">h0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">evenOddRec</span> <span class=\"n\">_</span> <span class=\"n\">h0</span> <span class=\"n\">h_even</span> <span class=\"n\">h_odd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h_even</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">evenOddRec</span> <span class=\"n\">h0</span> <span class=\"n\">h_even</span> <span class=\"n\">h_odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">bit_val_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bit</span> <span class=\"n\">false</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">bit_val</span><span class=\"o\">,</span> <span class=\"n\">cond</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">arg</span> <span class=\"bp\">@</span><span class=\"mi\">4</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 317179475,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671635018
    },
    {
        "content": "<p>This is not essential for the porting effort per se, hence the question in the lean4 stream instead of mathlib</p>",
        "id": 317179639,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671635060
    },
    {
        "content": "<p><code>conv</code> can't enter dependent arguments of a function, since the congruence lemma for the function doesn't have subgoals for those arguments</p>",
        "id": 317180617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671635308
    },
    {
        "content": "<p>Also if you want to make a lean4 MWE you should remove the mathlib imports</p>",
        "id": 317180695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671635328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20tactic.20.60arg.60/near/317180695\">said</a>:</p>\n<blockquote>\n<p>Also if you want to make a lean4 MWE you should remove the mathlib imports</p>\n</blockquote>\n<p>Ah okay, the code itself comes from the port effort. Plus it seemed to work in the lean 4 playground. Sorry about that</p>",
        "id": 317180931,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671635387
    },
    {
        "content": "<p>it's more about making something suitable for an example in the test suite</p>",
        "id": 317181302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671635474
    },
    {
        "content": "<p>it is also useful for minimizing the problem so that it's only about <code>arg</code> and not about mathlib definitions</p>",
        "id": 317181461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671635512
    },
    {
        "content": "<p>I see. Makes sense. I'll keep mathlib out of <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s</p>",
        "id": 317181915,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671635613
    },
    {
        "content": "<p>You can leave them in in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> , it's just in this stream where they're more picky ;-)</p>",
        "id": 317182091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671635649
    }
]