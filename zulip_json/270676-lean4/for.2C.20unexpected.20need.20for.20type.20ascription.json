[
    {
        "content": "<p>I was experimenting with using parsec and trying out <code>do</code>/<code>mut</code>/<code>for</code>, and I came across a type error that was surprising to me.  In the code below, if you remove the type ascription at the <code>-- ?</code>, there is an error \"failed to synthesize instance <code>HAdd Nat Nat (Parsec Nat)</code>\". This behavior also appears even if the loop contains monadic actions (for example, adding a <code>skip</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Parsec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">skipChar</span> <span class=\"sc\">'-'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">many1</span> <span class=\"o\">(</span><span class=\"n\">satisfy</span> <span class=\"n\">Char.isDigit</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c.toNat</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- ?</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">neg</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">eof</span><span class=\"o\">)</span> <span class=\"n\">s.mkIterator</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ParseResult.success</span> <span class=\"n\">_</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.ok</span> <span class=\"n\">res</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ParseResult.error</span> <span class=\"n\">it</span> <span class=\"n\">err</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"offset {it.i.repr}: {err}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">parse</span> <span class=\"s2\">\"22\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">parse</span> <span class=\"s2\">\"-222\"</span>\n</code></pre></div>",
        "id": 269048837,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642985105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> for some reason it works if you do <code>n := (10 * n + (c.toNat - '0'.toNat))</code> instead</p>",
        "id": 269049398,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642985856
    },
    {
        "content": "<p>Ah, thanks. I forgot that <code>:=</code> was the actual notation for updates, and that <code>&lt;- ...</code> was for <code>:= (&lt;- ...)</code></p>",
        "id": 269049574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986016
    },
    {
        "content": "<p>Is it inferring the identity monad, then, for <code>&lt;-</code> here?</p>",
        "id": 269049625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986066
    },
    {
        "content": "<p>Now I'm a bit confused. I thought I had used <code>&lt;-</code> for updates before <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nIdk the answer to your question but I was trying to explicitly access the id monad</p>",
        "id": 269049763,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642986245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n  <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>It does work out</p>",
        "id": 269049850,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642986371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">x</span>\n</code></pre></div>\n<p>Doesn't tho</p>",
        "id": 269050027,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642986609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/for.2C.20unexpected.20need.20for.20type.20ascription/near/269049625\">said</a>:</p>\n<blockquote>\n<p>Is it inferring the identity monad, then, for <code>&lt;-</code> here?</p>\n</blockquote>\n<p>It's inferring the <code>Parsec</code> monad because you are in a <code>Parsec</code> do block</p>",
        "id": 269050037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986631
    },
    {
        "content": "<p>if you write <code>n &lt;- _</code> then the <code>_</code> should be a <code>Parsec Nat</code></p>",
        "id": 269050043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986654
    },
    {
        "content": "<p>if you type ascribe it as a <code>Nat</code> then it inserts the <code>pure</code> coercion</p>",
        "id": 269050055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986669
    },
    {
        "content": "<p>the correct thing to do here is use <code>n := ...</code>instead of <code>n &lt;- ...</code>. Note no <code>let</code></p>",
        "id": 269050074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986706
    },
    {
        "content": "<p>omitting the <code>let</code> is how you know it's an update of a mutable variable and not a shadowed variable</p>",
        "id": 269050120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I get the <code>Parsec</code> do block part, and I'd forgotten that updates were with <code>:=</code>.</p>\n<p>Why is the ascription inserting a <code>pure</code>?</p>",
        "id": 269050125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986751
    },
    {
        "content": "<p>the <code>:=</code> vs <code>&lt;-</code> determines whether the rhs is a monadic expression or a pure expression</p>",
        "id": 269050130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986760
    },
    {
        "content": "<p>What led me astray is that <code>&lt;-</code> works at all, like in <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>'s example</p>",
        "id": 269050147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/for.2C.20unexpected.20need.20for.20type.20ascription/near/269050125\">said</a>:</p>\n<blockquote>\n<p>Why is the ascription inserting a <code>pure</code>?</p>\n</blockquote>\n<p>because there is a coercion from <code>A</code> to <code>m A</code>  where <code>m</code> is a monad</p>",
        "id": 269050149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986805
    },
    {
        "content": "<p>(actually I'm not sure whether it's literally a coercion in the <code>Coe</code> sense or whether this is special magic specific to the <code>do</code> DSL)</p>",
        "id": 269050163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986838
    },
    {
        "content": "<p>Would this be a place where there ought to be an explicit <code>Id.run</code>?</p>",
        "id": 269050165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986841
    },
    {
        "content": "<p>no, <code>Id.run</code> is going the other way: you want an <code>A</code> and you are providing an <code>Id A</code></p>",
        "id": 269050227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986868
    },
    {
        "content": "<p>Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">Id.run</span> <span class=\"n\">foo</span>\n  <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 269050244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986878
    },
    {
        "content": "<p>here you have an <code>A</code> and you want an <code>m A</code></p>",
        "id": 269050262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986900
    },
    {
        "content": "<p>that's what <code>pure</code> does</p>",
        "id": 269050273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642986906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Fails <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so it appears there is no coercion here.</p>",
        "id": 269050280,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642986910
    },
    {
        "content": "<p>Oh, right, I did get that backwards with what <code>Id.run</code> is meant to do. Still, it seems like this is something where users should be encouraged to insert a <code>pure</code> themselves if they really mean to use <code>&lt;-</code> rather than <code>:=</code>.</p>",
        "id": 269050312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642986958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/for.2C.20unexpected.20need.20for.20type.20ascription/near/269050055\">said</a>:</p>\n<blockquote>\n<p>if you type ascribe it as a <code>Nat</code> then it inserts the <code>pure</code> coercion</p>\n</blockquote>\n<p>Just to mention where my followup question came from: I thought you were saying it would put the <code>pure</code> because of the ascription, not because the ascription causes the arithmetic to be a <code>Nat</code>, so then Lean inserts a <code>pure</code> outside the ascription, so to speak.</p>",
        "id": 269050402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/for.2C.20unexpected.20need.20for.20type.20ascription/near/269050312\">said</a>:</p>\n<blockquote>\n<p>Oh, right, I did get that backwards with what <code>Id.run</code> is meant to do. Still, it seems like this is something where users should be encouraged to insert a <code>pure</code> themselves if they really mean to use <code>&lt;-</code> rather than <code>:=</code>.</p>\n</blockquote>\n<p>Yes, that's exactly what I do in these situations</p>",
        "id": 269050408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987077
    },
    {
        "content": "<p>I like to omit the <code>pure</code> when I can, but it doesn't work in a case like <code>def foo : IO Nat := do 2 + 2</code></p>",
        "id": 269050464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987107
    },
    {
        "content": "<p>What I mean is, can Lean encourage this by making it be an error if there's no <code>pure</code>?</p>",
        "id": 269050465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987107
    },
    {
        "content": "<p>it's convenient to have the <code>pure</code> auto-inserted, and it makes it feel more like imperative code</p>",
        "id": 269050482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987143
    },
    {
        "content": "<p>Specifically for this <code>&lt;-</code> update, though.</p>",
        "id": 269050489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987157
    },
    {
        "content": "<p>Because then why have <code>:=</code> too?</p>",
        "id": 269050494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987167
    },
    {
        "content": "<p>??</p>",
        "id": 269050500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987174
    },
    {
        "content": "<p>If you are using <code>&lt;-</code> then you specifically want a monadic value on the right</p>",
        "id": 269050506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987189
    },
    {
        "content": "<p>Right, so why have it auto-insert <code>pure</code> if it's not a monadic value on the right?</p>",
        "id": 269050556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987211
    },
    {
        "content": "<p>It didn't insert the <code>pure</code> until you type ascribed it</p>",
        "id": 269050563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987237
    },
    {
        "content": "<p>with the type ascription it's clearly the right thing to do, and without it it's unclear what to do and it opts to avoid the auto-insertion</p>",
        "id": 269050581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987296
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">y</span>\n  <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n  <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269050583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987307
    },
    {
        "content": "<p>I presume those both work</p>",
        "id": 269050625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987323
    },
    {
        "content": "<p>They do both work, which is what I'm referring to.</p>",
        "id": 269050630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987332
    },
    {
        "content": "<p>because the type of <code>y</code> is known</p>",
        "id": 269050632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987341
    },
    {
        "content": "<p>this is the usual setting where a <code>\\u</code> would be inserted</p>",
        "id": 269050640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987370
    },
    {
        "content": "<p>you have type <code>A</code> and you want type <code>B</code> and lean knows they can't be the same</p>",
        "id": 269050645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987386
    },
    {
        "content": "<p>Ok, but <em>should</em> it work here? I get more-or-less what mechanisms make it work, but would it be possible to make it not work? Is there any reason that it should, given that there's also <code>:=</code> syntax?</p>",
        "id": 269050704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987456
    },
    {
        "content": "<p>I think it's a more orthogonal design if it does work</p>",
        "id": 269050727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987485
    },
    {
        "content": "<p>who knows, maybe it is inconvenient to use <code>:=</code> for whatever reason (e.g. in a macro)</p>",
        "id": 269050745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642987521
    },
    {
        "content": "<p>Given that <code>do</code> notation's been changed to require <code>Id.run</code> for the id monad, I feel like it's rather surprising that <code>&lt;-</code> works for non-monadic RHS's.  (I just mean \"surprising\" from the point of view of someone learning the language.)</p>",
        "id": 269051037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642987919
    },
    {
        "content": "<p>generally you can use a non-monadic expression where a monadic expression is expected. This is an instance of coercion (although it seems to be implemented in a slightly different way than the generic <code>Coe</code>, likely because <code>A -&gt; m A</code> is a really generic type)</p>",
        "id": 269051250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642988183
    },
    {
        "content": "<p>Certainly coercion is weird from a strict type theory perspective - it's literally a type error and the compiler accepts it anyway</p>",
        "id": 269051285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642988228
    },
    {
        "content": "<p>but I would rather not see it removed, since it is one of the things that makes lean <code>do</code> notation more pleasant to write than Haskell <code>do</code> notation</p>",
        "id": 269051350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642988292
    },
    {
        "content": "<p>I think the main concern would be, if you blur the distinction a bit between <code>x : a</code> and <code>pure x : IO a</code>, then you may also accidentally blur <code>m : IO a</code> and <code>pure m : IO (IO a)</code>, and what you think is <code>m &gt;&gt; n</code> may actually be <code>pure m &gt;&gt; n</code>, which will also typecheck but be equivalent to just <code>n</code></p>",
        "id": 269052283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642989600
    },
    {
        "content": "<p>Since this isn't a <code>Coe</code> I think that latter thing will actually not work</p>",
        "id": 269052600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642989911
    },
    {
        "content": "<p>this is magic that only triggers in do block positions like <code>do let x &lt;- _</code> or <code>do bla (&lt;- _) </code> or <code>do _; _</code></p>",
        "id": 269052620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642989951
    },
    {
        "content": "<p>Aren't there other forms for all of those (e.g. <code>let x := _</code>), other than the last one (last underscore)?</p>",
        "id": 269052697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990034
    },
    {
        "content": "<p>GHCi has a similar sort of ambiguity to the last one, where if you type something of type <code>IO _</code> in the interpreter, it will execute it, otherwise evaluate it</p>",
        "id": 269052783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990100
    },
    {
        "content": "<p>But in the interpreter, the stakes are low as you will probably figure it out immediately if ghci misunderstood what you intended.</p>",
        "id": 269052905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990270
    },
    {
        "content": "<p>You definitely don't want <code>do x; y</code> to mean <code>do pure x; y</code>.</p>",
        "id": 269053126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990624
    },
    {
        "content": "<p>you might, if <code>x</code> actually has side effects</p>",
        "id": 269053312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990872
    },
    {
        "content": "<p>like the equivalent of lean 3 <code>trace</code></p>",
        "id": 269053323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990905
    },
    {
        "content": "<p>But it's still better for it to be a compiler error surely?</p>",
        "id": 269053377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990949
    },
    {
        "content": "<p>because you can always insert <code>pure</code> yourself</p>",
        "id": 269053380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990957
    },
    {
        "content": "<p>It's much more likely you intended to write a monadic action but messed up somehow, and luckily because you are using a typed language the compiler caught your error, right...?</p>",
        "id": 269053579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642991065
    },
    {
        "content": "<p>pshh, obviously the point of type systems is so that the compiler can always guess what you mean and never give you any type errors</p>",
        "id": 269053611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642991113
    },
    {
        "content": "<p>I remember thinking about how coercions have lead to the return of the \"garbage theorem\" when we found out that<br>\n<code>(n1 n2) : nat</code> typechecks for <code>n1, n2 : nat</code></p>",
        "id": 269053759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642991251
    },
    {
        "content": "<p>Anyways, I don't think this <code>pure</code> insertion existed the last time I used Lean 4, but if the only useful place for it is indeed in the last line of a do block, that seems like a simpler and more predictable rule</p>",
        "id": 269054097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642991663
    },
    {
        "content": "<p>I have been looking for the code that does it and I haven't found it yet</p>",
        "id": 269054109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642991698
    },
    {
        "content": "<p>Personally, I agree with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and think the auto <code>pure</code> is more trouble than it is worth. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> did you find an examples for where it is particularly convenient (outside the last line of a do block)? I think the feature is used a lot less often than one might think and that adding the explicit <code>pure</code> would not really be much of a hassle.</p>",
        "id": 269065050,
        "sender_full_name": "Mac",
        "timestamp": 1643006401
    },
    {
        "content": "<p>Incidentally I normally use the alternative <code>return</code>.</p>",
        "id": 269069674,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1643011202
    },
    {
        "content": "<blockquote>\n<p>think the auto pure is more trouble than it is worth.</p>\n</blockquote>\n<p>I kind of agree.  It's extremely neat when it works (and is unambiguous), but there's enough cases where the coercion doesn't trigger (numerals, arithmetical operations, anonymous constructors, structure instances, lambdas, etc.) that you need pure/return half of the time anyway, causing inconsistent coding style.</p>",
        "id": 269083574,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643019303
    },
    {
        "content": "<p>And speaking from a beginner's perspective: learning monadic programming is more confusing with <code>&lt;-</code> working for non-monadic values.</p>",
        "id": 269090997,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1643023263
    },
    {
        "content": "<p>I have ambivalent feelings as well whenever I use it, even if the result looks nice. Not however that changing this would require more specialization of <code>do</code> syntax to the <code>Id</code> special case, as I think I outlined in the <code>Id.run</code> GH issue, because there you certainly do <em>not</em> want to worry about monadic lifting.</p>",
        "id": 269092174,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643023956
    },
    {
        "content": "<p>Shouldn't that just work for <code>Id</code>?  (since <code>Id α</code> and <code>α</code> are defeq)</p>",
        "id": 269097203,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643026927
    },
    {
        "content": "<p>you still have to worry about e.g. <code>HAdd Nat Nat (Id Nat)</code> not existing</p>",
        "id": 269097907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027396
    },
    {
        "content": "<p>Yes, that's what I had in mind I think. But I believe the \"pure lift\" doesn't really help with that, so the issues might be more orthogonal than I thought.</p>",
        "id": 269098169,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643027526
    },
    {
        "content": "<p>Regarding <code>pure</code> vs <code>return</code>: I like that lean 4 makes them not be synonyms any more, I always had trouble with keeping consistent style before in lean 3. Now I make a note to always use <code>pure</code> in both lean 3 and lean 4, unless I specifically want an early return</p>",
        "id": 269098177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027536
    },
    {
        "content": "<p>That was my initial style as well, but Leo at least uses <code>return</code> extensively and it does save parentheses...</p>",
        "id": 269098281,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643027613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> could you point me to the code that does the auto-pure? What is the scope of it?</p>",
        "id": 269098292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027626
    },
    {
        "content": "<p>I will note that <code>pure $ ...</code>and <code>return ...</code> have the same number of characters :P</p>",
        "id": 269098369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027661
    },
    {
        "content": "<p>Here's a thought: what if the last element of a do block was always a pure value? You would write <code>&lt;- foo</code> if you want to use a monadic value</p>",
        "id": 269098502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027762
    },
    {
        "content": "<p>I believe we've discarded that option at some point. It sure looks inconvenient if all you want to do is run some <code>m Unit</code>s.</p>",
        "id": 269098786,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643027918
    },
    {
        "content": "<p>if that was extended to internal ignores like <code>do _; ...</code>, then you would have the property that every monadic bind has a <code>&lt;-</code> which seems good for readability</p>",
        "id": 269098799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027925
    },
    {
        "content": "<blockquote>\n<p>what if the last element of a do block was always a pure value? You would write &lt;- foo if you want to use a monadic value</p>\n</blockquote>\n<p>I often write <code>do foo (← getBar) (← getBaz).b</code> etc.</p>",
        "id": 269098846,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643027961
    },
    {
        "content": "<p>I very much like that style in fact</p>",
        "id": 269098871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643027982
    },
    {
        "content": "<p>but it doesn't seem much worse to have <code>do ← foo (← getBar) (← getBaz).b</code> when <code>foo</code> is also monadic</p>",
        "id": 269098953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643028010
    },
    {
        "content": "<p>and when it's not monadic you don't have this auto pure ambiguity</p>",
        "id": 269098980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643028027
    },
    {
        "content": "<p>(<code>foo</code> is often not monadic in those kinds of expressions)</p>",
        "id": 269099018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643028048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/for.2C.20unexpected.20need.20for.20type.20ascription/near/269098292\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> could you point me to the code that does the auto-pure? What is the scope of it?</p>\n</blockquote>\n<p>I'm actually not sure. It's not <code>do</code> though.</p>",
        "id": 269099508,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643028332
    },
    {
        "content": "<p>Here's a fun gotcha:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sumRange'''</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">i</span>\n  <span class=\"n\">acc</span>\n</code></pre></div>\n<p>Can you guess the error?</p>\n<p>(This is not precisely an auto-pure problem, but it does suggest depending on it can lead to unanticipated errors!)</p>",
        "id": 269155494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643051642
    },
    {
        "content": "<p>The error is that you didn't explicit the type of <code>acc</code> so Lean thinks its of <code>Id Nat</code></p>",
        "id": 269156445,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643052025
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sumRange'''</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- let mut acc : Nat := 0 -- this works too</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">i</span>\n  <span class=\"n\">acc</span>\n</code></pre></div>",
        "id": 269156980,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643052274
    },
    {
        "content": "<p>I meant to ask \"where the error occurs\" but, yeah, that's a root cause. Another fix is to use <code>pure</code>/<code>return</code> for <code>acc</code> at the end.</p>",
        "id": 269157196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643052374
    },
    {
        "content": "<p>It's not clear to me why <code>acc</code> is being inferred as <code>Id Nat</code> since the type of <code>sumRange'''</code> is explicitly <code>Nat → Nat</code></p>",
        "id": 269160001,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643052549
    },
    {
        "content": "<p>The <code>Id.run</code> is making the do block be of type <code>Id Nat</code>, and the last line is <code>acc</code> by itself, so it infers it's an <code>Id Nat</code>.</p>",
        "id": 269160234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643052636
    }
]