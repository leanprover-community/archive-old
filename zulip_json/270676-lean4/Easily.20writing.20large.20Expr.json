[
    {
        "content": "<p>I am probably going to be doing a lot of <code>Expr.app (Expr.forallE ...) ...</code>, with quite large expressions, and that gets very error-prone quickly for larger expressions. Is there some (anti)quotation macro to obtain <code>Expr</code> from Lean4 code?</p>",
        "id": 298348090,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662976499
    },
    {
        "content": "<p>There's <a href=\"https://github.com/gebner/quote4/\">https://github.com/gebner/quote4/</a></p>",
        "id": 298348545,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662976686
    },
    {
        "content": "<p>I don't understand how I would use quote4, sorry :(.<br>\nMy use case is more mundane, namely this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">Constructor.mk</span> <span class=\"bp\">`</span><span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">Expr.app</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Vec2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Expr.app</span>\n      <span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Vec2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">alpha</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.mkNatLit</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">cons</span> <span class=\"o\">:=</span> <span class=\"n\">Constructor.mk</span> <span class=\"bp\">`</span><span class=\"n\">cons</span> <span class=\"o\">(</span> <span class=\"bp\">...</span> <span class=\"o\">)</span> <span class=\"c1\">-- this will be ugly...</span>\n</code></pre></div>",
        "id": 298349326,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662976974
    },
    {
        "content": "<p>Which I will later pass to <code>mkInductiveDeclEs</code> and send that off to the kernel.</p>",
        "id": 298349430,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662977003
    },
    {
        "content": "<p>That's precisely what you can automate with quote4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">Constructor.mk</span> <span class=\"bp\">`</span><span class=\"n\">nil</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Vec2</span> <span class=\"o\">(</span><span class=\"n\">Vec2</span> <span class=\"n\">alpha</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 298350526,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662977292
    },
    {
        "content": "<p>Oh wow my Expr construction was wrong, actually <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> .<br>\nSweet, I'll try to use it then.</p>",
        "id": 298350723,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662977357
    },
    {
        "content": "<p>Hm, what would be the right way of refering to the type I am trying to introduce? I'm trying to introduce a new inductive type <code>Vec2</code> via <code>mkInductiveDeclEs</code>, which wants a list of constructor expressions. Problem is, I have no <code>Vec2</code> yet, other than the <code>Name</code> <code>'Vec2</code>, but I need to create the constructor expressions like <code>... -&gt; Vec2</code>. How do I do that with q? <code>q( a -&gt; 'Vec2 a n -&gt; 'Vec2 a (n+1))</code> doesn't seem to work (imagine ' is the backtick).</p>\n<p>Would I have to generate <code>Syntax</code> and elab that :/ ?</p>",
        "id": 298359331,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662980872
    },
    {
        "content": "<p>fyi, I have barely any idea of what I'm doing :)</p>",
        "id": 298359490,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662980929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Would it be possible to add a paragraph to your quote4 library readme about exactly this simple use case? I wanted to use it some time ago, but when reading </p>\n<blockquote>\n<p>It combines the intuitiveness of modal sequent calculus with the power and speed of Lean 4's metaprogramming facilities. The Q(¬∑) modality quotes types: Q(Œ±) denotes an expression of type Œ±. The type former comes with the following natural introduction rule:</p>\n</blockquote>\n<p>my brain just shuts down as there are too many words I do not understand. So I actually never bothered to try your library out.</p>",
        "id": 298361288,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662981682
    },
    {
        "content": "<p>Same thing happened to me as well. I am smol brain.</p>",
        "id": 298361339,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662981714
    },
    {
        "content": "<p>\"the intuitiveness of modal sequent calculus\" is an interesting turn of phrase, I can't tell if it's a joke or not</p>",
        "id": 298362199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982122
    },
    {
        "content": "<p>Sales pitches are supposed to be juicy!  I've added a couple easy examples to the readme.</p>",
        "id": 298370716,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662985665
    },
    {
        "content": "<p>Maybe something to show that this is easily possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">thing</span> <span class=\"c1\">-- just works</span>\n</code></pre></div>\n<p>Otherwise <code>Q(...)</code> seems like some magic type and not immediately obvious what it is.</p>",
        "id": 298370946,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662985765
    },
    {
        "content": "<p>Any idea how to do the <code>'Vec2</code> thing I asked above?</p>",
        "id": 298373775,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662986809
    },
    {
        "content": "<p>You can write <code>Vec2</code> as a local variable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- u : Level</span>\n<span class=\"c1\">-- Œ± : Q(Type $u)</span>\n<span class=\"c1\">-- n : Nat</span>\n<span class=\"k\">let</span> <span class=\"n\">Vec2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Vec2</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">]</span>\n<span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">$</span><span class=\"n\">Vec2</span> <span class=\"bp\">$</span><span class=\"n\">Œ±</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">$</span><span class=\"n\">Vec2</span> <span class=\"bp\">$</span><span class=\"n\">Œ±</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 298374426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662987009
    },
    {
        "content": "<p>What does <code>$</code> do actually?</p>",
        "id": 298374781,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1662987117
    },
    {
        "content": "<p>It's an antiquotation (similar to <code> `($x) </code> for syntax).</p>",
        "id": 298375039,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662987184
    }
]