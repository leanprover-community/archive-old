[
    {
        "content": "<p>In the following (non-mwe) example, both subgoals of  a <code>cases</code> do pretty much the same thing. The only difference is where one of the assumptions (<code>hi</code>) comes from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">cases</span> <span class=\"n\">hs.exec</span>\n    <span class=\"n\">case</span> <span class=\"n\">single</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">Finset.ext_iff.mp</span> <span class=\"n\">hr</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Finmap.ids_def'.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)⟩</span>\n        <span class=\"n\">contradiction</span>\n      <span class=\"o\">)</span>\n    <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">Finset.ext_iff.mp</span> <span class=\"n\">hr</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Finmap.ids_def'.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)⟩</span>\n        <span class=\"n\">contradiction</span>\n      <span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it possible to collapse these cases somehow, by telling the <code>cases</code> tactic what <code>hi</code> is supposed to be in each case (without doing the actual case distinction)?</p>",
        "id": 271247365,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644397593
    },
    {
        "content": "<p>That's called the Or pattern in some languages I suppose.</p>",
        "id": 271253629,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1644401001
    },
    {
        "content": "<p>The <a href=\"#narrow/stream/287929-mathlib4/topic/rotate\">recently discussed</a> <code>on_goal</code> tactic would support this, using the syntax <code>on_goal single hi, trans _ hi _ =&gt; ...</code>, and it would be a natural extension to use the same grammar for <code>case</code> as well</p>",
        "id": 271264847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644407219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Collapse.20cases/near/271264847\">said</a>:</p>\n<blockquote>\n<p>The <a href=\"#narrow/stream/287929-mathlib4/topic/rotate\">recently discussed</a> <code>on_goal</code> tactic would support this, using the syntax <code>on_goal single hi, trans _ hi _ =&gt; ...</code>, and it would be a natural extension to use the same grammar for <code>case</code> as well</p>\n</blockquote>\n<p>But this isn't implemented yet, right?</p>",
        "id": 271265426,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1644407609
    },
    {
        "content": "<p>no, but API design is the hard part with tactics such as this. If you want a tactic you can use right now it's pretty easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"case' \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"bp\">←</span> <span class=\"n\">xs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:])</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span>\n  <span class=\"n\">case'</span> <span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 271269098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644409749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Collapse.20cases/near/271269098\">said</a>:</p>\n<blockquote>\n<p>If you want a tactic you can use right now it's pretty easy:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"case' \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"bp\">←</span> <span class=\"n\">xs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:])</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems I've grown pretty dependent on this tactic over the past couple of months. And now the new <code>TSyntax</code> has broken it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Do there happen to be \"proper\" alternatives for this tactic now?</p>",
        "id": 288582551,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1657049904
    },
    {
        "content": "<p>So first things first we want to use <code>xs[0]!</code> here in the latest nightly, then the error becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Array.getOp</span><span class=\"bp\">!</span> <span class=\"n\">xs</span> <span class=\"mi\">0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.binderIdent</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Where binderIdent is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binderIdent</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"_\"</span>\n</code></pre></div>\n<p>So I'd say a <code> Coe (TSyntax `ident) (TSyntax `binderIdent) </code> is in order here right? CC <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 288583055,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657050163
    },
    {
        "content": "<p>I believe you can simply use the appropriate syntax category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"case' \"</span> <span class=\"o\">(</span><span class=\"n\">Lean.binderIdent</span><span class=\"bp\">*</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"bp\">←</span> <span class=\"n\">xs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:])</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 288584654,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1657051049
    },
    {
        "content": "<p>That works as well yeah. But In general this coercion makes sense to have in the compiler I think</p>",
        "id": 288584778,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657051095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Collapse.20cases/near/288584778\">said</a>:</p>\n<blockquote>\n<p>That works as well yeah. But In general this coercion makes sense to have in the compiler I think</p>\n</blockquote>\n<p>Yeah... there are a LOT of missing <code>TSyntax</code> coercions. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> I think it is mostly going to be a manually defined thing for now. Unless <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> wants PRs that fill in gaps.</p>",
        "id": 288612331,
        "sender_full_name": "Mac",
        "timestamp": 1657071438
    },
    {
        "content": "<p>We should probably be conservative and add coercions only where they save a <em>lot</em> of <code>$(xs[0]):ident $(xs[1:]):ident*</code> typing. And in this case the error even points to a probably better design as mentioned.</p>",
        "id": 288637730,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657095726
    }
]