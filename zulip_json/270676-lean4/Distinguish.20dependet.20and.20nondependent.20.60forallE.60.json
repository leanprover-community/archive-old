[
    {
        "content": "<p>How can I differentiate between a dependent and a nondependent Pi type when working with <code>Expr</code>s? I know about <code>isArrow</code> but it didn't achieve what I wanted it to. The context is that I'm trying to write in Lean a first-order logic construction defined by recursion on formulas. Since in FOL implication and universal quantification are entirely distinct constructors, they can be treated differently in such definitions. <br>\nConcretely, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{neg}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span></span></span></span> function should map FOL formulas to FOL formulas according to the following recursive rules:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>→</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">neg</mi><mo>⁡</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{neg} (p \\to q) := (\\operatorname{neg} p) \\to (\\operatorname{neg} q)  \\\\\n\\operatorname{neg} (\\forall x \\ p) := \\forall x (\\neg (\\operatorname{neg} p))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span><span class=\"mopen\">(</span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">neg</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">))</span></span></span></span></span></p>\n<p>so the body of a universal quantification should receive a negation, while neither the premise nor the conclusion of an implication should.</p>\n<p>I tried using <code>isArrow</code>, which doesn't work, failing to distinguish as intended between implication and universal quantification, in expressions of the form <code>∀ x, p x → q x</code>, as in the example at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">negate</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Not</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"bp\">$</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">Expr.isArrow</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">pN</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">qN</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">pN</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">qN</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">qN</span> <span class=\"bp\">←</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">negate</span> <span class=\"n\">qN</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">negPretty</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">ppExpr</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">negPretty</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Output: ∀ (x : Nat), ¬(x = x → ¬x = x)</span>\n<span class=\"c1\">-- `isArrow` identifies the open expression `x = x → x = x` as not being an arrow</span>\n<span class=\"c1\">-- Desired output: ∀ (x : Nat), ¬(x = x → x = x)</span>\n</code></pre></div>",
        "id": 287558573,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656325774
    },
    {
        "content": "<p>The remark above <code>isArrow</code>in the source code, that it assumes the expressions has no loose bound variables makes think that it is not appropriate for this job, but what can I use to make this distinction?</p>",
        "id": 287558761,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656325894
    },
    {
        "content": "<p>You can use <code>Expr.hasLooseBVar</code> to check whether the forall-bound variable occurs in the body. This is exactly what distinguishes an implication from a forall. However, you may want to use one of the telescope functions (<code>forallTelescope</code> etc.) instead of dealing with open expressions.</p>",
        "id": 287559631,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1656326563
    },
    {
        "content": "<p>Ok, thanks, so I replaced the <code>isArrow</code> check with <code>!(Expr.hasLooseBVar q 0)</code> and it seems to be working. I will leave the <code>forallTelescope</code> variant for later as it is a little over my head for now.</p>",
        "id": 287564758,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1656329833
    },
    {
        "content": "<p>Sounds good! We have a bit about these telescopes in the <code>MetaM</code> chapter of the metaprogramming book, if that helps (and I'm currently working on a PR to expand this section). They're fairly central, so I'm afraid you'll have to deal with them at some point. ;)</p>",
        "id": 287565014,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1656329990
    }
]