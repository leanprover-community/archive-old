[
    {
        "content": "<p>Why <code>ind</code> here can be used with <code>induction</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Equality</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Equality</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equality</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Equality</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">πrefl</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Equality</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">Equality.casesOn</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">refl</span> <span class=\"bp\">→</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">πrefl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Equality</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equality</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"n\">using</span> <span class=\"n\">ind</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But <code>attribute [eliminator] ind</code> throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">eliminator</span> <span class=\"n\">target</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 283043175,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1653037808
    },
    {
        "content": "<p>Pushed a fix for this issue<br>\n<a href=\"https://github.com/leanprover/lean4/commit/56cd6c1ff519d8be39f35875b5bf8719e6101c20\">https://github.com/leanprover/lean4/commit/56cd6c1ff519d8be39f35875b5bf8719e6101c20</a></p>",
        "id": 283073332,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653055014
    }
]