[
    {
        "content": "<p>I'd like to declare a tree like type for storing hierachical names like this like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Hierarchy</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">RBMap</span> <span class=\"n\">Name</span> <span class=\"n\">Hierarchy</span> <span class=\"n\">cmp</span> <span class=\"bp\">→</span> <span class=\"n\">Hierarchy</span>\n</code></pre></div>\n<p>Where <code>cmp</code> is an order defined on the <code>Name</code> type. However  the lean kernel complaing about the <code>RBMap</code> argument with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">Hierarchy.node'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>is there some way I can get around this and still declare my hierarchy?</p>\n<p>Edit: I also tested it with an <code>Array</code> (which I would just always sort/insert into in a sorted manner) like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Hierarchy</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Hierarchy</span> <span class=\"bp\">→</span> <span class=\"n\">Hierarchy</span>\n</code></pre></div>\n<p>and this just seems to work? What's making the kernel mad about the first but not the second declaration?</p>",
        "id": 264579434,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639250300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  you can't use <code>RBMap</code> in an inductive like that. You have to use <code>RBNode</code> instead. See  <a href=\"https://github.com/leanprover/lean4/blob/a91b8619196b6d5d94a5bc39457b67314fd78953/src/Lean/Data/Json/Basic.lean#L137-L140\">the definition</a> of <code>Json</code> in the Lean core for an example of this is done (and explanation of why it is necessary).</p>",
        "id": 264580739,
        "sender_full_name": "Mac",
        "timestamp": 1639251966
    },
    {
        "content": "<p>That did work out, thanks!</p>",
        "id": 264581309,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639252715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 264581312,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639252717
    }
]