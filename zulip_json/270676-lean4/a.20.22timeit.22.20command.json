[
    {
        "content": "<p>Is there a way to know how long it takes for a declaration to typecheck? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">timeit</span> <span class=\"mi\">100</span> <span class=\"n\">my_theorem</span>\n</code></pre></div>\n<p>Then it would run the typechecking 100 times and would tell me an average +- stddev of the duration. If there isn't anything like this, would it be possible to build a custom command for it?</p>\n<p>My motivation came up when thinking about having theorems in programs like <a href=\"https://github.com/arthurpaulino/FxyLang/blob/4abc2cbec6a955477a7955df1d1dc0c465c8d91b/FxyLang/AST.lean#L393\">this</a>. Then I'd try to optimize it for proof speed.</p>\n<p>And another question: does it even make sense to worry about this or is the theorem typechecking process completely ignored in the binary after the compilation?</p>",
        "id": 278235950,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649371382
    },
    {
        "content": "<p>I think <code>timeit</code> already has the meaning of \"run this once with the following message attached to the measurement\". Perhaps <code>#bench</code> is better to emphasize the \"run many times to get good confidence\" aspect</p>",
        "id": 278241830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649375993
    },
    {
        "content": "<blockquote>\n<p>And another question: does it even make sense to worry about this or is the theorem typechecking process completely ignored in the binary after the compilation?</p>\n</blockquote>\n<p>Yes, typechecking is a compile time notion, it doesn't happen at runtime unless you write your own typechecker or call lean internals at runtime</p>",
        "id": 278241998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649376064
    },
    {
        "content": "<p>It does make sense to optimize theorem speed, but the purpose is to decrease \"compile time\". Mathlib takes three hours to \"compile\" because literally all the theorem proving hard work is \"compilation\"</p>",
        "id": 278242100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649376133
    },
    {
        "content": "<p>I put \"compile\" in quotes because mathlib doesn't produce an executable so even after all that work you don't have a program to show for it</p>",
        "id": 278242203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649376222
    },
    {
        "content": "<p>Makes sense!<br>\nI got curious and tried a small experiment running this program on my interpreter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"mi\">1000000</span>\n<span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">while</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"k\">do</span>\n  <span class=\"n\">f</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"n\">x7</span> <span class=\"n\">x8</span> <span class=\"n\">x9</span> <span class=\"n\">x10</span> <span class=\"n\">x11</span> <span class=\"n\">x12</span> <span class=\"n\">x13</span> <span class=\"n\">x14</span> <span class=\"n\">x15</span> <span class=\"n\">x16</span> <span class=\"n\">x17</span> <span class=\"n\">x18</span> <span class=\"n\">x19</span> <span class=\"n\">x20</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"k\">do</span>\n      <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n      <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>It's calling that part that uses the theorem many times. These were the results:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>             run 1  run 2  run 3  run 4  run 5      avg     stddev\nwith theorem 14.533 14.527 14.623 14.527 14.571 → 14.5562 ± 0,0416\nwith sorry   14.553 14.572 14.582 14.549 14.606 → 14.5724 ± 0,0232\n</code></pre></div>\n<p>Indeed looks the same to me!</p>\n<p>But my other question still holds: would it be possible to build a custom <code>#bench</code> command in Lean 4?</p>",
        "id": 278244272,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649378400
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278271346,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1649406369
    }
]