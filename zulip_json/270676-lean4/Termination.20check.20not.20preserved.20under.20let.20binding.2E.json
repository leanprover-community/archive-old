[
    {
        "content": "<p>When <code>f</code> is a recursive function, changing an application of <code>f x</code> to <code>let name := x; f name</code> can cause the termination checker to fail on nightly <code>\"4.0.0-nightly-2022-04-26\"</code>. </p>\n<h4>MWE:</h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">events</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- | Polymorphic to and sum.</span>\n<span class=\"kd\">def</span> <span class=\"n\">pto</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">T</span>\n<span class=\"kd\">def</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">E</span> <span class=\"n\">T</span> <span class=\"bp\">⊕</span> <span class=\"n\">F</span> <span class=\"n\">T</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">PVoid</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ~&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pto</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\" +' \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">psum</span>\n<span class=\"kd\">end</span> <span class=\"n\">events</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> finite interaction trees -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Fitree</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ret</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">Fitree</span> <span class=\"n\">E</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Vis</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Fitree</span> <span class=\"n\">E</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">Fitree</span> <span class=\"n\">E</span> <span class=\"n\">R</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Describe the ability to split a sum type L + R into LR.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">SumSplit</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LR</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n  <span class=\"n\">redSplit</span><span class=\"o\">:</span> <span class=\"n\">LR</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">L</span> <span class=\"bp\">+'</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}:</span> <span class=\"n\">SumSplit</span> <span class=\"n\">L</span>  <span class=\"n\">L</span> <span class=\"n\">PVoid</span> <span class=\"n\">where</span>\n  <span class=\"n\">redSplit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">T</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}:</span> <span class=\"n\">SumSplit</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">+'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">redSplit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">T</span> <span class=\"n\">lr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lr</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> peel an itree along a split -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">splitTree</span> <span class=\"o\">[</span><span class=\"n\">SumSplit</span> <span class=\"n\">EL</span> <span class=\"n\">ELR</span> <span class=\"n\">ER</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Fitree</span> <span class=\"n\">ELR</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">Fitree</span> <span class=\"o\">(</span><span class=\"n\">EL</span> <span class=\"bp\">+'</span> <span class=\"n\">ER</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fitree.Ret</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fitree.Ret</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Fitree.Vis</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"n\">e</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">Fitree.Vis</span> <span class=\"o\">(</span><span class=\"n\">SumSplit.redSplit</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">kt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n        <span class=\"n\">splitTree</span> <span class=\"n\">kt</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- splitTree (k t'))</span>\n</code></pre></div>\n<h4>Error</h4>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"4.0.0-nightly-2022-04-26\"</span>\n<span class=\"n\">mwe</span><span class=\"bp\">-</span><span class=\"n\">split</span><span class=\"bp\">-</span><span class=\"n\">tree.lean</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">splitTree</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">6</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">splitTree</span> <span class=\"n\">kt</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<h4>Desired Behavior</h4>\n<p>Changing the final line from <code>splitTree kt</code> into <code>splitTree (k t')</code> makes the definition succeed. It would be nice if both versions succeed the termination checker.</p>",
        "id": 282934378,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1652969558
    },
    {
        "content": "<p>Pushed a fix for this issue: <a href=\"https://github.com/leanprover/lean4/commit/7c427c1ef27d65cec81c5b78e4737eaf312d21d4\">https://github.com/leanprover/lean4/commit/7c427c1ef27d65cec81c5b78e4737eaf312d21d4</a></p>",
        "id": 283373740,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653338737
    }
]