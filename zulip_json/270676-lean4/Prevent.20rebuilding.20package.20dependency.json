[
    {
        "content": "<p>I have a package A that depends on package B through a github link. Now when I create a new project with lake and add package A as a dependency by pointing to A's directory. On building this new project, lake downloads and rebuilds package B. How can I prevent that? B is already in A's directory, downloaded and built.</p>",
        "id": 268861769,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642780562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> use a local dependency rather than a git dependency. See, for instance, the <a href=\"https://github.com/leanprover/lake/blob/02cd07c61c9f2cdb1c6bca2a395f884d285e2aa6/examples/deps/foo/lakefile.lean\"><code>foo</code> lakefile</a> in the <code>deps</code> example for the syntax.</p>",
        "id": 268865069,
        "sender_full_name": "Mac",
        "timestamp": 1642781813
    },
    {
        "content": "<p>Hmm, but what if I'm not a creator of <code>A</code>? Do I have to go an manually change dependency of <code>A</code> on <code>B</code>? What if I have a chain of packages <code>A</code> depends on <code>B</code> that depends on <code>C</code> all thought github. </p>\n<p>My project then depends on <code>A</code>, I would have to go in and manually modify all those dependencies from github to local dependency?</p>",
        "id": 268869187,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642783632
    },
    {
        "content": "<p>I'm facing something similar. <code>lake</code> is successfully able to find <code>B</code> if I use a local dependency but the only problem is that I'm not being able to choose the target build directory when I say (using Tomas' example) <code>$ lake build B</code>. Am I able to make it build at <code>lean_packages/B/build/</code> instead of wherever <code>B</code> is located at?</p>",
        "id": 268875154,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642786232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> sorry, I misread your initial statement. What your described is Lake working as expected. Lake creates a copy of each remote for the each workspace, so if package A and new package C both depend on the remote they will both get a copy of <code>B</code> in their <code>lean_packages</code>. </p>\n<p>Part of the reason for this is that dependencies are transitive in Lean. So, if new package C has different workspace configurations from package A it needs to make sure it applies those when configuring B. Package C could also depend on a newer version of B than A as well, which is another reason for the copy. The plan is  even to eventually hoist the build directory for packages into the top-level workspace as well eventually.</p>",
        "id": 268909001,
        "sender_full_name": "Mac",
        "timestamp": 1642802476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Prevent.20rebuilding.20package.20dependency/near/268875154\">said</a>:</p>\n<blockquote>\n<p>Am I able to make it build at <code>lean_packages/B/build/</code> instead of wherever <code>B</code> is located at?</p>\n</blockquote>\n<p>No, but as I mentioned, build directories will hopefully be hoisted to the top-level workspace as well eventually (which would do something very similar to this).</p>",
        "id": 268909243,
        "sender_full_name": "Mac",
        "timestamp": 1642802622
    },
    {
        "content": "<p>I see, well I have probably slightly unusual use case of Lean in this scenario and I'm maybe taking the wrong approach. I want to use Lean as a scripting language in Houdini, something like Blender. I have a package <code>HouLean</code> that wraps some Houdini API into Lean's functions. This package depends on <code>SciLean</code> and that one depends on <code>mathlib4</code>. </p>\n<p>Now each script I want to run, I create a new lake project that depends on <code>HouLean</code> through local dependency. However, compiling it with lake downloads whole <code>SciLean</code> and <code>mathlib4</code> to this script project and rebuilds it. This takes some time. These scripts are supposed to be short and require very little customization. So I was thinking they might reuse already downloaded and built version of <code>SciLean</code> and <code>mathlib4</code> from <code>HouLean</code> directory.</p>\n<p>Alternatively, I should try to have all scripts in one lake project. Then each script would not get its own copy of those libraries.</p>",
        "id": 268956817,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1642856743
    }
]