[
    {
        "content": "<p>I'm struggling with the following basic example where I'm trying to define my own option an set it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Options</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">register_option</span> <span class=\"n\">my_option</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"This is my option\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">my_option</span> <span class=\"n\">false</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">unknown option 'my_option'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I guess I'm misunderstanding something fundamental here. Could anyone help me out?</p>",
        "id": 265167098,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639666548
    },
    {
        "content": "<p>You need to create a second file and import the file containing <code>register_option</code> from there. Only then the option will really become available.</p>",
        "id": 265167755,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639666789
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 265168687,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639667131
    },
    {
        "content": "<p>One further trouble here. Basically what I'm trying to do is to define a conditional unexpander that depends on the value of an option. So </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Variable\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span>\n\n<span class=\"kd\">@[appUnexpander var]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandVar</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n\n<span class=\"kd\">@[appUnexpander var]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandVar'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Variable</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"mi\">7</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">show_v</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">t</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Should print</span>\n<span class=\"cm\">Variable 7</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">show_v</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">t</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Should print 7</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I want to join the two unexpanders into a single definition that checks the value of the <code>show_v</code> option and then decides what to do. <br>\nI tried calling <code>Lean.getBoolOption show_v.name</code> (after wrapping the definition in <code>do</code> block) but that doesn't work with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.MonadOptions</span> <span class=\"n\">Lean.PrettyPrinter.UnexpandM</span>\n</code></pre></div>\n<p>What's the right way to do this?</p>",
        "id": 265173966,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639669211
    },
    {
        "content": "<p>Can't be done afaict: <code>UnexpandM = EStateM Unit Unit</code>, so you don't have access to options in this monad. You can try to define a delaborator instead, that should run in a monad that has access to options.</p>",
        "id": 265186973,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1639674619
    }
]