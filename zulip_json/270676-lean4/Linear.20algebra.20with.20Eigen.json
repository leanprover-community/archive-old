[
    {
        "content": "<p>If anyone is interested, I have created a proof of concept <a href=\"https://github.com/lecopivo/EigenLean\">library</a> binding Eigen c++ library. Right now, it can only solve linear system with Cholesky decomposition or initialize sparse matrix and convert it to dense format, pretty useless on its own <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  However, adding more capabilities should be relatively straightforward and follow the same pattern. It can also serve as a bit more complicated FFI example.</p>\n<p>I do not have immediate plan to grow this library too much, I will be adding functions only as I need them in other projects. But if someone is interested we can coordinate a bit more structured approach.</p>\n<p>Example of solving linear system:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">FloatArray.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">FloatArray.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span><span class=\"o\">⟩</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">A.ldlt.solve</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Prints out <code>[0.333333, 0.333333]</code></p>\n<p>Example of initializing sparse matrix from triples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Triplet</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">×</span><span class=\"n\">Nat</span><span class=\"bp\">×</span><span class=\"n\">Float</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">SparseMatrix.mk</span> <span class=\"n\">entries</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">B.toDense</span>\n</code></pre></div>\n<p>Prints out <code>[1.000000, 0.000000, 2.000000, -1.000000]</code></p>",
        "id": 280131774,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650922114
    }
]