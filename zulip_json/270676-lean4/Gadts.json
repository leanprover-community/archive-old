[
    {
        "content": "<p>What does this error mean and how do i fix it? <br>\n<a href=\"/user_uploads/3121/6pjuBMNo3hPMVtBQ2Rlt34_V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6pjuBMNo3hPMVtBQ2Rlt34_V/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6pjuBMNo3hPMVtBQ2Rlt34_V/image.png\"></a></div>",
        "id": 275447487,
        "sender_full_name": "Joseph O",
        "timestamp": 1647385336
    },
    {
        "content": "<p>What is <code>Boolbn</code>?</p>",
        "id": 275447606,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647385422
    },
    {
        "content": "<p>Also it looks like you are mixing α and a</p>",
        "id": 275447719,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647385486
    },
    {
        "content": "<p>The problem that the error is talking about is that you need to increase the universe level of the output type of GADT</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GADT</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">GADT</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">GADT</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">C3</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">GADT</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"n\">Int</span>\n</code></pre></div>",
        "id": 275448167,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647385806
    },
    {
        "content": "<p>Huh thats weird. Ok, let me try to apply the fixes</p>",
        "id": 275448172,
        "sender_full_name": "Joseph O",
        "timestamp": 1647385809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> have you considered upgrading from constantly posting screenshots to posting code in triple backticks? It's much easier to read on mobile and also mush easier to write!</p>",
        "id": 275448230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647385872
    },
    {
        "content": "<p>You can copy/past the error message as a Lean commentary in the code block</p>",
        "id": 275448418,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647385994
    },
    {
        "content": "<p>I just find it more convenient to include the error message as well in place</p>",
        "id": 275448435,
        "sender_full_name": "Joseph O",
        "timestamp": 1647386015
    },
    {
        "content": "<p>But I will put it in code blocks from now on</p>",
        "id": 275448458,
        "sender_full_name": "Joseph O",
        "timestamp": 1647386034
    },
    {
        "content": "<p>If we think it's hard to understand where the error is coming from (because we can't see the the red underlines), at least we can copy your code and see it for ourselves.<br>\nAlso, some troubles require tweaking the code so we can understand what's happening</p>",
        "id": 275448763,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647386260
    },
    {
        "content": "<p>It does seem a bit weird though. Does anyone know why the following errors if I uncomment the second line?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"c1\">-- | C2 : α → G α α</span>\n</code></pre></div>",
        "id": 275449449,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647386769
    },
    {
        "content": "<p>Another example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">Int</span>\n</code></pre></div>",
        "id": 275449482,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647386793
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>But I don't understand why (given that the <a href=\"#narrow/stream/270676-lean4/topic/Gadts/near/275449482\">code above</a> failed)</p>",
        "id": 275449796,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647387018
    },
    {
        "content": "<p>This looks like <a href=\"#narrow/stream/270676-lean4/topic/Regression.20in.20implicit.20argument.20inference\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Regression.20in.20implicit.20argument.20inference</a></p>",
        "id": 275450115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> your example is ok because α is now a parameter</p>",
        "id": 275450628,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647387358
    },
    {
        "content": "<p>I haven't checked the last few nightlies, but if <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> you are on the most recent version and leo implemented the index inference algorithm he mentioned at the end, then I would guess that your first example is comparing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"c1\">-- | C2 : α → G α α</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"kt\">Type</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 275450669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387366
    },
    {
        "content": "<p>I think my second example fails correctly right?</p>",
        "id": 275450682,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647387384
    },
    {
        "content": "<p>well, it's also possible to rewrite all these examples so that they live in <code>Type</code></p>",
        "id": 275450705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387415
    },
    {
        "content": "<p>but not with the obvious encoding</p>",
        "id": 275450713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387423
    },
    {
        "content": "<p>For the second example you would write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 275450790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387492
    },
    {
        "content": "<p>and yes that's an equality of types</p>",
        "id": 275450804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/270676-lean4/topic/Gadts/near/275450628\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> your example is ok because α is now a parameter</p>\n</blockquote>\n<p>Ah, I thought Lean was able to create implicit parameters for me as it usually does with theorems</p>",
        "id": 275450811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647387511
    },
    {
        "content": "<p>The bug report I linked was because the inference algorithm changed to prefer them as indices</p>",
        "id": 275450832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647387546
    },
    {
        "content": "<p>Please correct me if I've messed this up. You get the \"is too big for the corresponding inductive datatype\" error if the constructor's type is <code>(p₁ : π₁) → ... → (pₘ : πₘ) → (x₁ : α₁) → (x₂ : α₂) ... → (xₙ : αₙ) → G ..</code> where the <code>pᵢ</code> are the parameters and one of the <code>αᵢ : Type u</code> where <code>u</code> is greater than or equal to the universe that the inductive type lives in.</p>\n<p>So, the examples here (including OP example) fail because the inference system is not setting  (not necessarily erroneously) <code>α</code>, <code>β</code> to be parameters of <code>G</code>?</p>",
        "id": 275452218,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647388574
    }
]