[
    {
        "content": "<p>I'm translating <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s Complex Number Game to Lean 4, and tripping over issues.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">Complex</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">re</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">im</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Float</span> <span class=\"n\">Complex</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">theorem</span> <span class=\"n\">of_float_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Complex</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives me</p>\n<div class=\"codehilite\" data-code-language=\"norm_cast\"><pre><span></span><code> { re := a, im := 0 } = { re := b, im := 0 }\n</code></pre></div>\n<p>(BTW: is <code>Real</code> not a thing in Lean 4?)</p>",
        "id": 306135805,
        "sender_full_name": "Arien Malec",
        "timestamp": 1666736519
    },
    {
        "content": "<p>Noncomputable reals will probably live in mathlib4, which is currently a partial port of lean3 mathlib :)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a></p>",
        "id": 306137146,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666737200
    },
    {
        "content": "<p>Ah, I don't think I documented this part!</p>",
        "id": 306139118,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738282
    },
    {
        "content": "<p>For <code>norm_cast</code> to work correctly, you need to <em>register</em> the coercion.</p>",
        "id": 306139134,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738295
    },
    {
        "content": "<p>This also enables the <code>↑</code> notation in the delaborator.</p>",
        "id": 306139161,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738310
    },
    {
        "content": "<p>The easiest way to do this is to declare a separate function for the coercion and tag it with <code>@[coe]</code>:</p>",
        "id": 306139293,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738380
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[coe]</span> <span class=\"kd\">def</span> <span class=\"n\">Float.toComplex</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Float</span> <span class=\"n\">Complex</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Float.toComplex</span>\n</code></pre></div>",
        "id": 306139362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738428
    },
    {
        "content": "<p>We're going to have some nice syntax on top of this that will automate the function+instance dance.</p>",
        "id": 306139566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738542
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/issues/172\">https://github.com/leanprover-community/mathlib4/issues/172</a></p>",
        "id": 306139568,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666738545
    }
]