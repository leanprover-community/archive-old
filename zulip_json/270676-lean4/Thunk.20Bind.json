[
    {
        "content": "<p>Am I misunderstanding Thunk?<br>\nWhen I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Thunk.pure</span> <span class=\"s2\">\"hi\"</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Thunk.bind</span> <span class=\"n\">h</span> <span class=\"n\">Thunk.pure</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n</code></pre></div>\n<p>I am expecting to see \"hi\", since bind should extract \"hi\" from h, apply Thunk.pure to it, and get should get the contents.</p>",
        "id": 235677103,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098243
    },
    {
        "content": "<p>what do you get?</p>",
        "id": 235677436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098344
    },
    {
        "content": "<p>processing...</p>",
        "id": 235677471,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098356
    },
    {
        "content": "<p>does it work from the console</p>",
        "id": 235677504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098372
    },
    {
        "content": "<p>segfault</p>",
        "id": 235677686,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098441
    },
    {
        "content": "<p>let me isolate it for a more rigorous test</p>",
        "id": 235677815,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098474
    },
    {
        "content": "<p>segfault</p>",
        "id": 235677952,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098535
    },
    {
        "content": "<p>FYI, there was an update around yesterday to the vscode extension that fixed what looked like infinite loops for me. Please make sure you have 0.0.24</p>",
        "id": 235677983,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619098543
    },
    {
        "content": "<p>In emacs</p>",
        "id": 235678029,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098561
    },
    {
        "content": "<p>k</p>",
        "id": 235678078,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619098567
    },
    {
        "content": "<p>But also, running from the console does not fix</p>",
        "id": 235678097,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098574
    },
    {
        "content": "<p>Lean (version 4.0.0-nightly-2021-03-14, commit c54a7c8ccc75, Release)</p>",
        "id": 235678191,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098609
    },
    {
        "content": "<p>that's pretty old, try updating your nightly</p>",
        "id": 235678275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098643
    },
    {
        "content": "<p>Lean (version 4.0.0-nightly-2021-04-06, commit e863376be155, Release)<br>\nSame issue</p>",
        "id": 235678447,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098700
    },
    {
        "content": "<p>it's 2021-04-22 today</p>",
        "id": 235678506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098720
    },
    {
        "content": "<p>right, just pasted what elan updated me to when I asked for nightly -- I'll switch to 4/22 explicitly</p>",
        "id": 235678616,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098767
    },
    {
        "content": "<p>updated just now, this is what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">update</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">syncing</span> <span class=\"n\">channel</span> <span class=\"n\">updates</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">nightly'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">latest</span> <span class=\"n\">update</span> <span class=\"n\">on</span> <span class=\"n\">nightly</span><span class=\"o\">,</span> <span class=\"n\">lean</span> <span class=\"n\">version</span> <span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">04</span><span class=\"bp\">-</span><span class=\"mi\">22</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"mi\">103</span><span class=\"bp\">.</span><span class=\"mi\">9</span> <span class=\"n\">MiB</span> <span class=\"bp\">/</span> <span class=\"mi\">103</span><span class=\"bp\">.</span><span class=\"mi\">9</span> <span class=\"n\">MiB</span> <span class=\"o\">(</span><span class=\"mi\">100</span> <span class=\"bp\">%</span><span class=\"o\">)</span>   <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">8</span> <span class=\"n\">MiB</span><span class=\"bp\">/</span><span class=\"n\">s</span> <span class=\"n\">ETA</span><span class=\"o\">:</span>   <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">installing</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n\n  <span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">nightly</span> <span class=\"n\">updated</span> <span class=\"bp\">-</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">04</span><span class=\"bp\">-</span><span class=\"mi\">22</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">20</span><span class=\"n\">cbb4389a4c</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235678957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098884
    },
    {
        "content": "<p>right just did this</p>",
        "id": 235678997,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098899
    },
    {
        "content": "<p>Lean (version 4.0.0-nightly-2021-04-22, commit 20cbb4389a4c, Release)<br>\n~/LocalSoftware/signatures/lean4/Cdclt $ lean hi.lean<br>\nsegmentation fault (core dumped)</p>",
        "id": 235679039,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619098913
    },
    {
        "content": "<p>but I am also getting the segfault</p>",
        "id": 235679129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098938
    },
    {
        "content": "<p><code> #eval (Thunk.pure h.get).get </code><br>\nproduces \"hi\" as expected</p>",
        "id": 235679797,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619099192
    },
    {
        "content": "<p>It's a bit suspicious that <a href=\"https://github.com/leanprover/lean4/blob/master/src/runtime/object.cpp#L338-L344\"><code>thunk_bind_fn_closure</code></a> is basically the same as <code>thunk_map_fn_closure</code>. I think there should be a <code>lean_thunk_get(r)</code> in there</p>",
        "id": 235680516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099431
    },
    {
        "content": "<p>and <code>#eval (Thunk.bind h (λ a:String =&gt; (⟨λ x:Unit =&gt; a⟩ : Thunk String))).get</code> returns processing...</p>",
        "id": 235680685,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619099496
    },
    {
        "content": "<p>I find the ref counting suspicious.</p>",
        "id": 235681553,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619099779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">static</span> <span class=\"n\">obj_res</span> <span class=\"n\">thunk_map_fn_closure</span><span class=\"p\">(</span><span class=\"n\">obj_arg</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"cm\">/* u */</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">b_obj_res</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">lean_thunk_get</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">obj_res</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">lean_apply_1</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 235681584,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619099791
    },
    {
        "content": "<p>By the way, if you use <code>2</code> instead of <code>\"hi\"</code> it's a little safer, you won't get a segfault but <code>0</code> is not the right answer</p>",
        "id": 235681628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099804
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">static</span> <span class=\"n\">obj_res</span> <span class=\"n\">thunk_bind_fn_closure</span><span class=\"p\">(</span><span class=\"n\">obj_arg</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"cm\">/* u */</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">b_obj_res</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">lean_thunk_get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">obj_res</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">lean_apply_1</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 235681633,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619099805
    },
    {
        "content": "<p>The refcounting is a bit of black art to me</p>",
        "id": 235681722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099834
    },
    {
        "content": "<p>I'm not sure what the rules are</p>",
        "id": 235681751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099846
    },
    {
        "content": "<p>yeah, I bet. I don't quite get what's going on. But what I do notice, is that in the upper example you incr and decr the same var.</p>",
        "id": 235681861,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619099869
    },
    {
        "content": "<p>and in the 2nd you incr and decr different vars</p>",
        "id": 235681887,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619099880
    },
    {
        "content": "<p>But even ignoring the refcounts (which could indeed cause a segfault if not arranged properly), we aren't calling <code>get</code> twice inside <code>bind</code>. My guess is that it's interpreting the thunk <code>r</code> as a string and the segfault results because they have different data layout</p>",
        "id": 235682322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100001
    },
    {
        "content": "<p>as in we should be <code>get</code>ting the <code>r</code> before <code>return</code>ing it?</p>",
        "id": 235682690,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619100093
    },
    {
        "content": "<p>given that the whole code is wrapped in a thunk again?</p>",
        "id": 235682736,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619100106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Thunk.bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Thunk</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x.get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 235682902,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619100148
    },
    {
        "content": "<p>right, this code is the content of the inner function <code>fun _ =&gt; (f x.get).get</code></p>",
        "id": 235683736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100418
    },
    {
        "content": "<p>and the model calls <code>get</code> twice, as you can see</p>",
        "id": 235683783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100430
    },
    {
        "content": "<p>the implementation is actually doing <code>fun _ =&gt; f x.get</code></p>",
        "id": 235683830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100448
    },
    {
        "content": "<p>and then why does this cause the segfault</p>",
        "id": 235683940,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100476
    },
    {
        "content": "<p>because it is violating the type system</p>",
        "id": 235684022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100491
    },
    {
        "content": "<p>it returns a thunk and lean thinks it's a string</p>",
        "id": 235684069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100502
    },
    {
        "content": "<p>should it not be caught by the lean_assert</p>",
        "id": 235684130,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100514
    },
    {
        "content": "<p>so when it calls the string-print function on a thunk value, boom</p>",
        "id": 235684183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100530
    },
    {
        "content": "<p>I don't think the asserts are air tight</p>",
        "id": 235684222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100544
    },
    {
        "content": "<p>Oh I see, the asserts are only called on f and t anyway</p>",
        "id": 235684263,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100558
    },
    {
        "content": "<p>Also <code>bind</code> doesn't have any asserts on entry, <code>map</code> does</p>",
        "id": 235684316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100580
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"n\">obj_res</span> <span class=\"n\">lean_thunk_map</span><span class=\"p\">(</span><span class=\"n\">obj_arg</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">lean_assert</span><span class=\"p\">(</span><span class=\"n\">lean_is_closure</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">));</span>\n    <span class=\"n\">lean_assert</span><span class=\"p\">(</span><span class=\"n\">lean_is_thunk</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"nf\">mk_thunk_3_2</span><span class=\"p\">(</span><span class=\"n\">thunk_map_fn_closure</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"n\">obj_res</span> <span class=\"n\">lean_thunk_bind</span><span class=\"p\">(</span><span class=\"n\">obj_arg</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">obj_arg</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nf\">mk_thunk_3_2</span><span class=\"p\">(</span><span class=\"n\">thunk_bind_fn_closure</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 235684416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100605
    },
    {
        "content": "<p>true</p>",
        "id": 235684452,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100618
    },
    {
        "content": "<p>not that that would help here</p>",
        "id": 235684482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100626
    },
    {
        "content": "<p>It does assert in debug mode when trying to access the string</p>",
        "id": 235684483,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619100626
    },
    {
        "content": "<p>ok, makes sense</p>",
        "id": 235684540,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100649
    },
    {
        "content": "<p>Is there a way to disable the c++ implementation in lean in the meantime</p>",
        "id": 235684609,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100670
    },
    {
        "content": "<p>It wouldn't be a thunk anymore then!</p>",
        "id": 235684680,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619100703
    },
    {
        "content": "<p>my only understanding of a thunk is that it is fun () =&gt; whatever</p>",
        "id": 235684916,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100777
    },
    {
        "content": "<p>does the def also include something about lazy eval?</p>",
        "id": 235684955,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100792
    },
    {
        "content": "<p>Yes. A thunk is evaluated at most once.</p>",
        "id": 235684981,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619100802
    },
    {
        "content": "<p>I see</p>",
        "id": 235685132,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100849
    },
    {
        "content": "<p>That is acceptable for me until until a later version of lean -- I'll just remove the externs for now</p>",
        "id": 235685380,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619100943
    },
    {
        "content": "<p>\"compiler failed to infer low level type\" when I just remove attributes and &amp; from core.lean Thunks</p>",
        "id": 235686201,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619101234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228135\">Scott Viteri</span> <a href=\"#narrow/stream/270676-lean4/topic/Thunk.20Bind/near/235686201\">said</a>:</p>\n<blockquote>\n<p>\"compiler failed to infer low level type\" when I just remove attributes and &amp; from core.lean Thunks</p>\n</blockquote>\n<p>nevermind, I'll just make a separate fake thunk type</p>",
        "id": 235686785,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619101411
    }
]