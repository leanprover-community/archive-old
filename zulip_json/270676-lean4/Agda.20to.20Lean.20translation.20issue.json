[
    {
        "content": "<p>Have I not translated this correctly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">record</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">sucL</span> <span class=\"n\">ℓ</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">constructor</span> <span class=\"n\">mk</span>\n  <span class=\"n\">field</span>\n    <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">IDesc</span> <span class=\"n\">ℓ</span> <span class=\"n\">I</span>\n\n<span class=\"bp\">⟦</span><span class=\"n\">_</span><span class=\"bp\">⟧</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">ℓ</span><span class=\"o\">}{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">func</span> <span class=\"n\">ℓ</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n<span class=\"bp\">⟦</span> <span class=\"n\">D</span> <span class=\"bp\">⟧</span><span class=\"n\">func</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span> <span class=\"n\">func.out</span> <span class=\"n\">D</span> <span class=\"n\">j</span> <span class=\"bp\">⟧</span> <span class=\"n\">X</span>\n\n<span class=\"n\">data</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">func</span> <span class=\"n\">ℓ</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"o\">)(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℓ</span> <span class=\"n\">where</span>\n  <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span> <span class=\"n\">D</span> <span class=\"bp\">⟧</span><span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"n\">D</span> <span class=\"n\">i</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Fixpoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">over</span> <span class=\"o\">(</span><span class=\"n\">Fixpoint</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fixpoint</span> <span class=\"n\">D</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p><code>error: (kernel) arg #4 of 'Desc.Fixpoint.step' contains a non valid occurrence of the datatypes being declared</code></p>",
        "id": 279669653,
        "sender_full_name": "Sofia",
        "timestamp": 1650542298
    },
    {
        "content": "<p><code>Desc.over d x</code> is <code>⟦ d ⟧ x</code></p>",
        "id": 279669939,
        "sender_full_name": "Sofia",
        "timestamp": 1650542466
    },
    {
        "content": "<p>I don't know about Agda, but the error is probably due to the fact that you're referring to <code>Fixpoint</code> in its own constructor in an invalid position (there's some rules as to what's a valid position). <br>\nHow is <code>Desc.over</code> defined?</p>",
        "id": 279672056,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650543664
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> A Cosmology of Datatypes. Pierre- ́Evariste Dagand.</span>\n<span class=\"cm\">https://www.irif.fr/~dagand/stuffs/thesis-2011-phd/thesis.pdf -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Desc</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span>  <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sigma</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pi</span>    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Desc</span>\n  <span class=\"c1\">-- FIXME: Better name? interpret?</span>\n  <span class=\"kd\">def</span> <span class=\"n\">over</span> <span class=\"o\">:</span> <span class=\"n\">Desc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">i</span><span class=\"o\">,</span>     <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span><span class=\"o\">,</span>     <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lift</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>  <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.over</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">b.over</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sigma</span> <span class=\"n\">S</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">×</span>  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">over</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span>    <span class=\"n\">S</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">over</span> <span class=\"n\">X</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Fixpoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">over</span> <span class=\"o\">(</span><span class=\"n\">Fixpoint</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fixpoint</span> <span class=\"n\">D</span> <span class=\"n\">i</span>\n<span class=\"kd\">end</span> <span class=\"n\">Desc</span>\n</code></pre></div>",
        "id": 279672743,
        "sender_full_name": "Sofia",
        "timestamp": 1650544008
    },
    {
        "content": "<p>That does seem to be the error, if so either I have translated it incorrectly or this is a divergence between Agda and Lean; which typically means there is an alternative approach to encode this. I hope?</p>",
        "id": 279672819,
        "sender_full_name": "Sofia",
        "timestamp": 1650544069
    },
    {
        "content": "<p>Also the Agda. <a href=\"https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/model/html/Chapter5.IDesc.html\">https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/model/html/Chapter5.IDesc.html</a></p>",
        "id": 279672996,
        "sender_full_name": "Sofia",
        "timestamp": 1650544177
    },
    {
        "content": "<p>If this is a divergence. How are my chances for the limitation being lifted if merely arbitrary and not yet known useful?</p>",
        "id": 279673802,
        "sender_full_name": "Sofia",
        "timestamp": 1650544621
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/inductive.cpp#L380-L397\">https://github.com/leanprover/lean4/blob/master/src/kernel/inductive.cpp#L380-L397</a></p>",
        "id": 279675386,
        "sender_full_name": "Sofia",
        "timestamp": 1650545545
    },
    {
        "content": "<p>Lean's positivity checker does not unfold definitions. And even if it did, it would likely be stuck at the recursor implementing <code>over</code>. And even if it handled that, nested inductives still have to be translated to mutual inductives, which the recursion would make either very difficult or perhaps impossible. So this does look like a stack of complicated extensions to me.</p>",
        "id": 279675557,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650545639
    },
    {
        "content": "<p>Aww. :/</p>",
        "id": 279676148,
        "sender_full_name": "Sofia",
        "timestamp": 1650545935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/270676-lean4/topic/Agda.20to.20Lean.20translation.20issue/near/279673802\">said</a>:</p>\n<blockquote>\n<p>If this is a divergence. How are my chances for the limitation being lifted if merely arbitrary and not yet known useful?</p>\n</blockquote>\n<p>IIRC, other languages/proof assistants like Agda or Coq tend to handle more of the \"non-standard\" inductive declarations, but at the cost of moving this complexity into the kernel (which also increases the TCB). I think with Lean a small kernel is preferred. But there have been discussions on Zulip about how it would be nice to have certain non-standard inductives natively in Lean (but for that the underlying theory would have to be proven to work first).</p>",
        "id": 279676191,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650545954
    },
    {
        "content": "<p>Usually <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> knows how to transform cases like <code>Fixpoint</code> into simpler inductives though :D</p>",
        "id": 279676462,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650546048
    },
    {
        "content": "<p>For context I am trying to take a stab at an intrinsically typed implementation of the Calculus of Constructions for my own compiler, which I'm writing in Lean 4. The exact code I'm trying to translate is a description of type universes, which is first-class, can bootstrap itself and enable programming over the calculus of types within the language.</p>",
        "id": 279676831,
        "sender_full_name": "Sofia",
        "timestamp": 1650546240
    },
    {
        "content": "<p>In other words... I dived in the deep end. :D</p>",
        "id": 279678220,
        "sender_full_name": "Sofia",
        "timestamp": 1650546824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Agda.20to.20Lean.20translation.20issue/near/279676462\">said</a>:</p>\n<blockquote>\n<p>Usually <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> knows how to transform cases like <code>Fixpoint</code> into simpler inductives though :D</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"455721\">@Sofia</span> Voilà:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Desc</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Over</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Desc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"bp\">.</span><span class=\"n\">const</span>\n    <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sigma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sigma</span> <span class=\"n\">S</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Over</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Fixpoint</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Desc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Over</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Desc</span>\n</code></pre></div>",
        "id": 279708457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650560183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> has marked this topic as unresolved.</p>",
        "id": 279810419,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650626898
    },
    {
        "content": "<p>Hmm. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure this satisfies what I need. And I'm struggling to port any successive code to test it.</p>\n<p><a href=\"https://www.irif.fr/~dagand/stuffs/thesis-2011-phd/thesis.pdf\">https://www.irif.fr/~dagand/stuffs/thesis-2011-phd/thesis.pdf</a></p>\n<p>I think it would be best for me to step back and return to the start of the thesis. I will likely return with lots more problems. Wish me luck.</p>",
        "id": 279814488,
        "sender_full_name": "Sofia",
        "timestamp": 1650629424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455721\">@Sofia</span> out of curiosity are you too doing metatheory in lean?</p>",
        "id": 279940392,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650740368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> By meta-theory you mean proving properties hold on the type theory? Maybe? The objective is to implement the interpreter for the language I want, then bootstrap a complete compiler using it. I want an intrinsically typed DTLC/CoC enriched with type grades and multiple stages. Thus all type checking will be enforced in the structure. Once I have this, I will work on a parser and elaborator. Then try to reimplement all of that within the language and continue with other components.</p>",
        "id": 279950902,
        "sender_full_name": "Sofia",
        "timestamp": 1650756035
    },
    {
        "content": "<p>If by meta-theory you meant the type checking, then yes. Intrinsically if I can. I have an intrinsically typed implementation of STLC.</p>\n<p><a href=\"https://gist.github.com/sofia-snow/0a85cb5ccf6cbeb6ba248813df7bbf0b\">https://gist.github.com/sofia-snow/0a85cb5ccf6cbeb6ba248813df7bbf0b</a></p>\n<p>The current goal is to retain this style over a DTLC, using the indexed type family descriptions as an indirection for the type in the DTLC term's types.</p>",
        "id": 279951400,
        "sender_full_name": "Sofia",
        "timestamp": 1650756875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455721\">@Sofia</span> I was able to build a parser/elaborator for my language using Lean's <code>Syntax</code> and native parser. But the solution looks a bit hacky. When you start working on your parser, please let me know because I am interested in learning <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 279951532,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650757112
    },
    {
        "content": "<p>Oh please share that hackery. I have considered doing exactly this for the bootstrapping.</p>",
        "id": 279951546,
        "sender_full_name": "Sofia",
        "timestamp": 1650757186
    },
    {
        "content": "<p>I plan to make a parser quite similar to Lean's, however it will be constrained by the profunctor/optic laws such that syntax resugaring is formally defined and accurate. <a href=\"https://raw.githubusercontent.com/justinpombrio/thesis/master/resugaring-thesis.pdf\">https://raw.githubusercontent.com/justinpombrio/thesis/master/resugaring-thesis.pdf</a></p>",
        "id": 279951601,
        "sender_full_name": "Sofia",
        "timestamp": 1650757263
    },
    {
        "content": "<p>Which in turn means the compiler can produce syntax and type errors for user-defined syntax without leaking under the abstractions. Ex. A type error for a user-defined DSL should point at the DSL's terms, as written by the user. Without canonicalization and without pointing into the abstractions (code the user didn't write, but the macros expanded to).</p>",
        "id": 279951708,
        "sender_full_name": "Sofia",
        "timestamp": 1650757475
    },
    {
        "content": "<p>Are you interested in reading code from an arbitrary text file or from a Lean file?</p>",
        "id": 279952380,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650758592
    },
    {
        "content": "<p>If you want to parse code from a Lean file, then it's not hacky. I use it to debug my interpreter: <a href=\"https://github.com/arthurpaulino/FxyLang/blob/master/MetaDebug.lean\">https://github.com/arthurpaulino/FxyLang/blob/master/MetaDebug.lean</a></p>\n<p>But if you want to read from a text file from the IO monad, then you need to lift a meta monad with an environment created from the compiled olean file (this is the hack):<br>\n<a href=\"https://github.com/arthurpaulino/FxyLang/blob/master/FxyLang/Implementation/Parser.lean\">https://github.com/arthurpaulino/FxyLang/blob/master/FxyLang/Implementation/Parser.lean</a></p>",
        "id": 279952519,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650758820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455721\">@Sofia</span> well I mean if you're proving smt about the type theory in Lean that's what I'd call metatheory haha</p>",
        "id": 279952854,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1650759473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> That'll be both, also from stdin for a repl eventually. Thanks.</p>\n<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> Then yes. :)</p>",
        "id": 279952982,
        "sender_full_name": "Sofia",
        "timestamp": 1650759656
    },
    {
        "content": "<p>Sebastian said that eventually we'll have <code>builtin syntax</code>, which is likely to eliminate the need for this hack</p>",
        "id": 279954176,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650761823
    },
    {
        "content": "<p>I don't quite see where the hacky part is. :)</p>",
        "id": 279956021,
        "sender_full_name": "Sofia",
        "timestamp": 1650764794
    },
    {
        "content": "<p><a href=\"https://github.com/arthurpaulino/FxyLang/blob/b4edb87f37902bd9615838c1a013d3f2c55db760/Main.lean#L9\">This</a> is the hacky part. I can't release a standalone binary for my interpreter without a companion olean file</p>",
        "id": 279956848,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650766228
    },
    {
        "content": "<p>Huh.</p>",
        "id": 279956919,
        "sender_full_name": "Sofia",
        "timestamp": 1650766338
    },
    {
        "content": "<p>Sorry, the problematic code isn't in the file I had linked previously. It's in the <code>Main.lean</code> file</p>",
        "id": 279957067,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650766623
    },
    {
        "content": "<p>Yeah I see. :)</p>",
        "id": 279957285,
        "sender_full_name": "Sofia",
        "timestamp": 1650767002
    },
    {
        "content": "<p>As I said, I am interested in new approaches. <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> might be as well</p>",
        "id": 279957682,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650767746
    },
    {
        "content": "<p>Noted, though I will probably mirror your approach until I can bootstrap my language in itself, and _then_ implement its own parser in itself. Not in Lean.</p>",
        "id": 279957800,
        "sender_full_name": "Sofia",
        "timestamp": 1650767931
    },
    {
        "content": "<p>Though it would probably be wise to just prototype the parser in Lean first, having all the tooling established already.</p>",
        "id": 279960798,
        "sender_full_name": "Sofia",
        "timestamp": 1650773082
    }
]