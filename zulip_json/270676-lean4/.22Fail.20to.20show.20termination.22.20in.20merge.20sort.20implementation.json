[
    {
        "content": "<p>This is a beginner question. I don't have a ton of experience with proving things in Lean yet.</p>\n<p>As an exercise, I've tried to port the implementation of merge sort from this <a href=\"https://stackoverflow.com/questions/53977313/lean-mergesort-using-increasing-well-founded-relation\">SO question</a> from Lean 3 to Lean 4. This is what I've got so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span>\n                                   <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">second_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halve</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mergesort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">first_half</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">second_half</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l.length</span>\n<span class=\"k\">#eval</span> <span class=\"n\">l.take</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mergesort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mergesort</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The trouble is, when I remove the <code>partial</code>s, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">▶</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n  <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n    <span class=\"n\">merge</span>\n  <span class=\"k\">with</span> <span class=\"n\">errors</span>\n  <span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n    <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n      <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n\n  <span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n    <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n      <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n  <span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>I understand from the answer to that question linked above that I need some <code>have &lt;condition&gt; := sorry</code> lines that show that the list is decreasing in size. But I'm not sure how to do this.</p>",
        "id": 286897336,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1655809886
    },
    {
        "content": "<p>In Lean 4, it's more convenient to use <code>termination_by</code> to indicate a measure w.r.t which the arguments are decreasing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span>\n                                   <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n</code></pre></div>",
        "id": 286898200,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1655810437
    },
    {
        "content": "<p>Wow that's really convenient! That worked for <code>merge</code>, but I naively tried something similar for the actual sorting function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mergesort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">first_half</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">second_half</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">mergesort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>\n<p>And got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">▶</span> <span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n    <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n    <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n    <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">first_half</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>Now when I put my cursor at the end of the indicated line, I can see the goal it's referring to, but I don't understand what syntax I need to open up a tactic mode block so I can try proving it within the function. It also looks like it would be nice to know that <code>xs</code> has length at least 2 at this point, but I don't know how to prove this from the pattern matching structure.</p>",
        "id": 286899883,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1655811486
    },
    {
        "content": "<p>Within the function, you can add a <code>have : claim := by ...</code> with the claim being what you need to show decreasing, ideally just before the recursive call. There is a theorem <code>List.length_cons</code> that relates the lengths of the lists.</p>",
        "id": 286904561,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1655814223
    },
    {
        "content": "<p>All right, well I have proved it with the help of Mathlib4, but it may be the _worst_ proof that has ever been written in Lean 4. Can anyone give me tips on how to clean this up? See below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span>\n                                   <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">second_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">half_add_one_lt_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_lt_m_add_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_lt_succ</span>\n    <span class=\"k\">have</span> <span class=\"n\">one_lt_two</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"k\">have</span> <span class=\"n\">div_le_self</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">zero_lt_m_add_one</span> <span class=\"n\">one_lt_two</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">div_le_self</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">one_add_one_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mergesort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>\n      <span class=\"n\">first_half</span><span class=\"o\">,</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n    <span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">half_lemma</span> <span class=\"o\">:=</span> <span class=\"n\">half_add_one_lt_add_two</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">half_lemma</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">half_lemma</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">List.length_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>\n      <span class=\"n\">second_half</span><span class=\"o\">,</span>\n    <span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_self</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ys</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span>\n    <span class=\"n\">apply</span> <span class=\"n\">half_add_one_lt_add_two</span>\n  <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">mergesort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>",
        "id": 286939835,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1655828824
    },
    {
        "content": "<p>Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span>\n                                   <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">second_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">length_div_2</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_lt_succ</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">length_sub_div_2</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_self</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_succ_le</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_div_iff_mul_le</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_one_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_add_right</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_add_right</span><span class=\"o\">,</span> <span class=\"n\">Nat.one_mul</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_lt_succ</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">length_div_2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">length_first_half</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">first_half</span><span class=\"o\">,</span> <span class=\"n\">List.length_take</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left_of_lt</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"n\">length_div_2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">length_second_half</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">second_half</span><span class=\"o\">,</span> <span class=\"n\">List.length_drop</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"n\">length_sub_div_2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mergesort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">length_first_half</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">length_second_half</span>\n  <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">mergesort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>",
        "id": 287018936,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1655885494
    },
    {
        "content": "<p>Some things can't be proved so elegantly right now because Mathlib4 doesn't have all the lemmas and tactics that Mathlib3 has...</p>",
        "id": 287019058,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1655885567
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span>\n                                   <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.take</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">second_half</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mergesort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">first_half</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all_arith</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_le_self</span><span class=\"o\">,</span><span class=\"n\">Nat.le_div_iff_mul_le</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"n\">second_half</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_le_self</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_le_of_le_add</span><span class=\"o\">]</span>\n  <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">first_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">mergesort</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">second_half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">mergesort</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>\n<p><code>nightly-2022-06-22</code> and Mathlib patch are required:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span>    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lhs'</span><span class=\"o\">,</span> <span class=\"n\">prf1</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">decorateError</span> <span class=\"s2\">\"simplify fails on left-hand side:\"</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">simp</span> <span class=\"n\">lhs</span> <span class=\"n\">ctx</span>\n<span class=\"bp\">+</span>    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">lhs'</span><span class=\"o\">,</span> <span class=\"n\">prf1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">decorateError</span> <span class=\"s2\">\"simplify fails on left-hand side:\"</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">simp</span> <span class=\"n\">lhs</span> <span class=\"n\">ctx</span>\n</code></pre></div>",
        "id": 287033186,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1655893460
    },
    {
        "content": "<p>Oh, wow, I did not know about <code>simp_arith</code>. That's awesome!</p>",
        "id": 287034056,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1655894027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Thanks so much for your rewrite, I've learned about <code>Nat.le_div_iff_mul_le</code> from it! It's very pleasing to know you can simply \"multiply both sides by k\" with Mathlib. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 287312486,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656065403
    },
    {
        "content": "<p>Do you guys happen to know why I sometimes get a many-times-duplicated goal after a rewrite?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">▶</span> <span class=\"mi\">6</span> <span class=\"n\">goals</span>\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Right after the first <code>rw</code> in <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> 's <code>length_first_half</code>, I see six of the exact same goal. Why is this? Is this a quirk of the language server?</p>",
        "id": 287314066,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656066569
    },
    {
        "content": "<p>Seems to be a Mathlib bug. Here's an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"n\">Nat</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- A</span>\n  <span class=\"c1\">-- B</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> at A:</span>\n<span class=\"cm\">  a : ℕ</span>\n<span class=\"cm\">  ⊢ a = a</span>\n\n<span class=\"cm\">  a : ℕ</span>\n<span class=\"cm\">  ⊢ a = a</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> at B: Goals accomplished -/</span>\n</code></pre></div>\n<p>Without the Mathlib import, the message at <code>A</code> is also <code>Goals accomplished</code>.</p>",
        "id": 287315787,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656067798
    },
    {
        "content": "<p>Ah too bad, good to know thanks!</p>",
        "id": 287320587,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656071236
    },
    {
        "content": "<p>Trying something similar for quicksort. Getting a <code>failed to rewrite</code> error on <code>List.filterAux</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">I</span> <span class=\"k\">#check</span> <span class=\"n\">List.filterAux</span>     <span class=\"bp\">■</span> <span class=\"n\">List.filterAux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">quick2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">first_half_terminates</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">E</span>     <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">,</span> <span class=\"n\">List.filterAux</span><span class=\"o\">]</span>     <span class=\"bp\">■</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">rewrite</span> <span class=\"n\">using</span> <span class=\"n\">equation</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">List.filterAux'</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">first_half_terminates</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">quick2</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">quick2</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">quick2</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>\n<p>Is there something funky about <code>filterAux</code> that is preventing a rewrite? It doesn't seem to be the <code>specialize</code> attribute because I made a version without it, and Lean is still angry. <span aria-label=\"anguished\" class=\"emoji emoji-1f627\" role=\"img\" title=\"anguished\">:anguished:</span></p>",
        "id": 287327082,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656075475
    },
    {
        "content": "<p>It can't unfold the definition because it depends on whether <code>xs</code> is <code>nil</code> or <code>cons</code>. You can make a case distinction and then rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n<span class=\"n\">cases</span> <span class=\"n\">xs</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filterAux</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filterAux</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 287328788,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656076489
    },
    {
        "content": "<p>You can also use <code>unfold List.filterAux</code> to force exposing its internal <code>match</code>. This works especially well in combination with <code>split</code>.</p>",
        "id": 287329598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656076883
    },
    {
        "content": "<p>Btw, <code>filter</code> should probably be rewritten using <code>@[csimp]</code> analogously to <code>map</code> etc. You don't want to have to reason about <code>reverse</code>.</p>",
        "id": 287329656,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656076917
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>!  By the way, how do you give local names to the stuff that's added to the context by e.g. <code>split</code> or <code>unfold</code>?</p>",
        "id": 287330692,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656077434
    },
    {
        "content": "<p>You can use <code>rename_i</code>, though I told my students they probably should use <code>split</code> mostly as a penultimate step as in e.g. <code>split &lt;;&gt; simp</code></p>",
        "id": 287330982,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656077595
    },
    {
        "content": "<p><code>unfold</code> should not introduce new variables, I think</p>",
        "id": 287331008,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656077616
    },
    {
        "content": "<p>Ah my bad, I got confused, they were created by the <code>cases xs</code> tactic.</p>",
        "id": 287331151,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656077682
    },
    {
        "content": "<p>Ah shoot <code>rename_i</code> is in TPIL isn't it? Should have remembered <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 287331233,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656077729
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 287331239,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656077736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.22Fail.20to.20show.20termination.22.20in.20merge.20sort.20implementation/near/287329656\">said</a>:</p>\n<blockquote>\n<p>Btw, <code>filter</code> should probably be rewritten using <code>@[csimp]</code> analogously to <code>map</code> etc. You don't want to have to reason about <code>reverse</code>.</p>\n</blockquote>\n<p>Thanks, <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> :) <a href=\"https://github.com/leanprover/lean4/commit/220d2e3816b12780c7567c186b5c61559f5fc480\">https://github.com/leanprover/lean4/commit/220d2e3816b12780c7567c186b5c61559f5fc480</a></p>",
        "id": 287339834,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656081749
    },
    {
        "content": "<p>Sorry, but I've gotten stuck again and could use another tip.</p>\n<p>I've tried to prove it by induction, got the base case and the easier half of the <code>split</code> after unfolding <code>List.filterAux</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n  <span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">W</span> <span class=\"kd\">def</span> <span class=\"n\">quick2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span>     <span class=\"bp\">■■■</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">first_half_terminates</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filter</span><span class=\"o\">]</span>\n      <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.filterAux</span><span class=\"o\">,</span> <span class=\"n\">List.reverse</span><span class=\"o\">,</span> <span class=\"n\">List.reverseAux</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_all_arith</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">ih</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">tail</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">head</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">List.filterAux</span>\n      <span class=\"n\">split</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">head_lt_x</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp_all_arith</span>\n\n        <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_all_arith</span>\n\n\n\n\n    <span class=\"k\">have</span> <span class=\"n\">first_half_terminates</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">quick2</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">quick2</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">quick2</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span>\n</code></pre></div>\n<p>This is the context/goal for the <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">▶</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons.h_1</span>\n  <span class=\"n\">x</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filterAux</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">tail</span> <span class=\"o\">[])</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">tail</span>\n  <span class=\"n\">head_lt_x</span> <span class=\"o\">:</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.filterAux</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">tail</span> <span class=\"o\">[</span><span class=\"n\">head</span><span class=\"o\">])</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">tail</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n  <span class=\"bp\">▶</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">90</span><span class=\"o\">)</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span>\n</code></pre></div>",
        "id": 287366738,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656094967
    },
    {
        "content": "<p>I've tried <code>cases tail</code> and following my nose down that path, but it doesn't seem to work. I feel as though I need to use <code>head_ht_x</code> somewhere here, but I can't figure out where <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 287366887,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1656095051
    },
    {
        "content": "<p>If the IH is too weak, that usually means you have to generalize the statement you're proving by induction, in this case by generalizing the last argument of <code>filterAux</code>. But again you should probably wait for the simpler <code>filter</code> implementation available in the next nightly.</p>",
        "id": 287382834,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656103488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/.22Fail.20to.20show.20termination.22.20in.20merge.20sort.20implementation/near/287315787\">said</a>:</p>\n<blockquote>\n<p>Seems to be a Mathlib bug. Here's an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"n\">Nat</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- A</span>\n</code></pre></div>\n<p>Without the Mathlib import, the message at <code>A</code> is also <code>Goals accomplished</code>.</p>\n</blockquote>\n<p>I minimized it more (I am not sure importing all of mathlib counts as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">HEq.rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"n\">Nat</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- A</span>\n</code></pre></div>\n<p>These two definitions come from <code>Mathlib.Tactic.Basic</code> and <code>Mathlib.Tactic.Ext</code> respectively. Do we still need them?</p>",
        "id": 287389375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656107411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This also seems like a bug in goal state display after multiply-defined tactics. This kind of control flow always confuses me; can you say how this is supposed to work?</p>",
        "id": 287389584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656107563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That's a good question, I don't think we've looked at goals from backtracked tactic elaborators at all yet. It does sound like a bug that they contribute to the info tree at all.</p>",
        "id": 287392888,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656110071
    },
    {
        "content": "<p>Note that the only reason these non-input tactics have visible goals is due to <code>rw</code> shenanigans <a href=\"https://github.com/Kha/lean4/blob/ede4507836b5a45d769e8402cd5360ca4c6eec62/src/Init/Tactics.lean#L209-L210\">https://github.com/Kha/lean4/blob/ede4507836b5a45d769e8402cd5360ca4c6eec62/src/Init/Tactics.lean#L209-L210</a></p>",
        "id": 287393037,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656110192
    }
]