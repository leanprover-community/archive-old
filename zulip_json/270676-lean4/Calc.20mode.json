[
    {
        "content": "<p>Theorem Proving in Lean (version for Lean 4) states: \"The calc command can be configured for any relation that supports some form of transitivity. It can even combine different relations.\" However, it doesn't explain how to do the configuration!</p>\n<p>In Lean 3, one prepends the @[trans] attribute to a suitable lemma. But when I attempt the same in Lean 4, I get the error message \"unknown attribute trans\".  How should I proceed?</p>\n<p>(Specifically, I want to define a one step reduction relation, M ~&gt; N, and use calc with several steps<br>\n  calc<br>\n     M ~&gt; N := ...<br>\n     _ ~&gt; P := ....<br>\n    _ ~&gt; Q := ...<br>\nto establish M ~&gt;* Q, where ~&gt;* is the transitive and reflexive closure of ~&gt;.)</p>",
        "id": 291122155,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1658963198
    },
    {
        "content": "<p>It now uses type classes. Here are some examples for <code>Nat</code>.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Nat/Basic.lean#L226-L236\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Nat/Basic.lean#L226-L236</a><br>\nI will update \"Theorem Proving in Lean 4\" with examples.</p>",
        "id": 291122730,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658963658
    },
    {
        "content": "<p>You just need appropriate instances of the <code>Trans</code> class. In your case, instances of <code>Trans (.~&gt;.) (.~&gt;*.)  (.~&gt;*.)</code> and <code>Trans (.~&gt;*.) (.~&gt;.)  (.~&gt;*.)</code> would do the trick.</p>",
        "id": 291122747,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1658963668
    },
    {
        "content": "<p>Thank you for the help! I've gotten that to work for relations, defined as Prop.</p>\n<p>However, the reduction relation I have in mind is not a Prop but a Type, because I want to compute with it. In particular, I can use a proof of the progress theorem to compute a sequence of reduction steps. That works only if progress is a Type not a Prop, since computation on Prop is disabled. Is calc and Trans restricted to work only with Prop?  If so, is there an analogue of each that works with Type?</p>\n<p>If you want to see the code I've produced so far, it is here:<br>\n<a href=\"https://github.com/plfa/plfl/blob/main/src/DeBruijn.lean\">https://github.com/plfa/plfl/blob/main/src/DeBruijn.lean</a><br>\nI define simply-typed lambda calculus, prove progress, and use it to compute the derivation reducing 2+2 to 4. It echoes a development in Agda found here<br>\n<a href=\"https://plfa.inf.ed.ac.uk/DeBruijn/\">https://plfa.inf.ed.ac.uk/DeBruijn/</a><br>\nwhich is part of my textbook, so has considerably more text to explain it!</p>",
        "id": 291214574,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1659024229
    },
    {
        "content": "<p>I pushed the following commit that removes this restriction from <code>calc</code>.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/ee6e2036ddef27ddea87d0abb8a83b92bd7c8857\">https://github.com/leanprover/lean4/commit/ee6e2036ddef27ddea87d0abb8a83b92bd7c8857</a><br>\nThe modification should be in our next nightly build.</p>",
        "id": 291223970,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1659028535
    },
    {
        "content": "<p>Wow, that's a blindingly fast response! I look forward to trying it out.</p>",
        "id": 291231605,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1659032261
    }
]