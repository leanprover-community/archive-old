[
    {
        "content": "<p>Compare Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_prop_of_false</span> <span class=\"o\">(</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n  <span class=\"n\">guard_target</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- Some definitions inlined to avoid having imports:</span>\n<span class=\"kd\">def</span> <span class=\"n\">Not.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">H2</span> <span class=\"n\">H1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">iff_of_true</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff_true_intro</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hn.elim</span> <span class=\"n\">h</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_mem_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[]),</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_prop_of_false</span> <span class=\"o\">(</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"c1\">-- Succeeds but does nothing.</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I'm not sure why this difference in behaviour is occurring. Mario suggested it may be a change in the simplifier's handling of multiple binders, and in Lean 4 there is no way for the simplifier to \"stop\" after passing through just the first <code>x : Nat</code> binder and notice that the lemma applies.</p>\n<p>This arose in porting <code>List.pairwise_append</code>, where in Lean 3 we relied on this behaviour of the simplifier.</p>",
        "id": 302780385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665118438
    },
    {
        "content": "<p>And since the <code>simp only</code> is doing nothing, the proof becomes just <code>simp</code> and this trace shows why it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[]),</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n   <span class=\"n\">simp</span>\n\n<span class=\"c1\">--[Meta.Tactic.simp.rewrite] not_mem_nil:1000, x ∈ [] ==&gt; False</span>\n<span class=\"c1\">--[Meta.Tactic.simp.rewrite] false_implies:1000, False → P ==&gt; True</span>\n<span class=\"c1\">--[Meta.Tactic.simp.rewrite] implies_true:1000, Nat → True ==&gt; True</span>\n</code></pre></div>",
        "id": 302969864,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665208585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">forall_prop_of_false</span> <span class=\"o\">(</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">_</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">))]</span>\n</code></pre></div>",
        "id": 303013427,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665233278
    },
    {
        "content": "<p>and see <a href=\"https://github.com/leanprover/lean4/issues/1549\">https://github.com/leanprover/lean4/issues/1549</a></p>",
        "id": 303013500,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665233295
    },
    {
        "content": "<p>Ahha, I'm reporting an exact duplicate! I'm not so interested in a workaround, more wondering about the relative likelihoods of a general fix, or having to flag this as a gotcha for mathport.</p>",
        "id": 303019189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665236008
    },
    {
        "content": "<p>My impression is that this is a bug in some AST traversal somewhere.</p>",
        "id": 303022897,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665237787
    },
    {
        "content": "<p>Pushed a fir for this issue: <a href=\"https://github.com/leanprover/lean4/commit/6bc414440990760b6224e592e2c8e82f595aa742\">https://github.com/leanprover/lean4/commit/6bc414440990760b6224e592e2c8e82f595aa742</a></p>",
        "id": 303029150,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665240752
    }
]