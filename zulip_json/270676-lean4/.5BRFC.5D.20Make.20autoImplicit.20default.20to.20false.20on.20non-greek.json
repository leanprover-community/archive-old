[
    {
        "content": "<p>I understand why <code>autoImplicit</code> might be very useful if you know what you're doing, and even the documentation says \"we love this feature and use it extensively when implementing Lean\"!  For someone who known what they're doing, this can be great! </p>\n<p>I wonder, however, whether it's a sensible default. I think defaults should primarily cater to someone who doesn't know what they're doing. I myself was quite confused by <code>autoImplicit</code> at the beginning, and I think I'm certainly not the first. I've just had a chat with a student who's learned quite a bit of Lean already who was very puzzled by some type errors that arose from <code>autoImplicit</code>. </p>\n<p>In general, I would argue a language should be as easy to learn at first as possible, and unfold the complexity gradually. There's an argument to be made that writing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>is perhaps from a learning curve slightly easier than, say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and even more so if you have to get into type universes, etc. On the other hand, I'd argue having a typo result in a type error instead of Lean saying it doesn't know the identifier is quite puzzling indeed. </p>\n<p>I think we can have our cake and eat it too, in terms of defaults: We could just split <code>autoImplicit</code> depending on the identifier and make it have different defaults: <code>true</code> for greek-named variables like <code>α</code>, but be false for all other identifiers, like <code>Lsit</code>, so that it doesn't trigger on typos. I'm even happy to give this a shot and make a PR if that would be welcome.</p>",
        "id": 317125914,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671618669
    },
    {
        "content": "<p>the main justification being that (in my experience) most uses of autoimplicit are for some sort of polymorphic types and greek variable names are conventionally used for that</p>",
        "id": 317127230,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671619118
    },
    {
        "content": "<p>As far as I remembered this is also how it used to work some time ago? Subject to autoimplicit were only greek letters and lower case english letters</p>",
        "id": 317135644,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1671621817
    },
    {
        "content": "<p>ah, that makes sense, could also just be single-letter names that are autoimplicit by default</p>",
        "id": 317135865,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671621906
    },
    {
        "content": "<p>We did have a discussion on what auto implicit should react to in the past somewhere here, there were quite a few suggestions on what it might match, I can try to dig it up.</p>",
        "id": 317146430,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671625594
    },
    {
        "content": "<p>That would be helpful, yes! Sorry, I did try to search for something like that but didn't find it.</p>",
        "id": 317146697,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671625688
    },
    {
        "content": "<p>I remember having an idea that seemed reasonable to me as someone who learned lean from the beginning  with this feature  (well...obviously :D) but I dont remember the idea /o\\</p>",
        "id": 317147855,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671626109
    },
    {
        "content": "<p>Also the usual argument in favor of keeping it on in general is that it is actually highlighted differently than normal arguments (e.g. in my scheme auto implicit blue, all others black) are you aware of that? Because even if I end up making a mistake kts usually quite easy to notice that its because of auto implicit thanks to the highlighting</p>",
        "id": 317148832,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671626477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317148832\">said</a>:</p>\n<blockquote>\n<p>Also the usual argument in favor of keeping it on in general is that it is actually highlighted differently than normal arguments (e.g. in my scheme auto implicit blue, all others black) are you aware of that? Because even if I end up making a mistake kts usually quite easy to notice that its because of auto implicit thanks to the highlighting</p>\n</blockquote>\n<p>Yep I am aware of that and use it now, but the student e.g. wasn't. Once you know about it and about the fact that it gets highlighted differently it's easy to spot, but for someone learning Lean who doesn't know it, it won't be obvious at all and it forces them to learn about it in a difficult way (because then the error is also not clearly pointing to autoimplicit).</p>",
        "id": 317149681,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671626755
    },
    {
        "content": "<p>Hmmm, maybe it is more of a teaching issue then. On the first mention of auto implicit we should also mention this.</p>",
        "id": 317150143,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671626892
    },
    {
        "content": "<p>I'm not saying the current semantics is perfect, but we could simply make the highlighting much more noticeable, like in Isabelle. <a href=\"https://github.com/leanprover/lean4/pull/1976\">https://github.com/leanprover/lean4/pull/1976</a> is already moving us in the direction of custom highlighting, which should also have the benefit of not depending on theme support.</p>",
        "id": 317150340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671626977
    },
    {
        "content": "<p>but are auto-implicits on long ascii names used in practice much? what's the advantage of keeping it (as a default) specifically for identifiers that are not a single greek (or maybe latin) character?</p>",
        "id": 317154326,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671628207
    },
    {
        "content": "<p>I do use it when writing inductive relations sometimes. To make it a little more understandable what is going on besides \"there is a couple of single letter characters floating around you go figure out yourself what that means\"</p>\n<p>Because when doing the implicits explicitly the lines just tend to get annoyingly long for sufficiently complex relations</p>",
        "id": 317155487,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671628578
    },
    {
        "content": "<p>but then you could turn it on for that use case? I'm just talking about the default here</p>",
        "id": 317155892,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671628705
    },
    {
        "content": "<p>Ah yes, this was my idea: <a href=\"#narrow/stream/270676-lean4/topic/lower.20case.20'string'/near/288808325\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lower.20case.20'string'/near/288808325</a> though it doesn't address the issue in general but rather a special case</p>",
        "id": 317158852,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671629552
    },
    {
        "content": "<p>ah, nice! the point about needing an active LSP session for readability is also a good one. I guess such a linter should also work (even though I personally think changing the default for that case is better, as it's still possible to <code>set_option</code> to get the behavior back). I'd be happy to give either one a shot if such a PR would be welcome</p>",
        "id": 317160224,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671629965
    },
    {
        "content": "<p>by browsing the source code I just saw that this already exists and is called <code>relaxedAutoImplicit</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> is there a strong rationale for this to be true by default?</p>",
        "id": 317162066,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671630528
    },
    {
        "content": "<p>and there was no discussion here but there was an <a href=\"https://github.com/leanprover/lean4/issues/1011\">issue in github (#1101)</a>, but the rationale why this is true by default is not documented there</p>",
        "id": 317163026,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671630811
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> remember?</p>",
        "id": 317163540,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671630939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317148832\">said</a>:</p>\n<blockquote>\n<p>Also the usual argument in favor of keeping it on in general is that it is actually highlighted differently than normal arguments (e.g. in my scheme auto implicit blue, all others black) are you aware of that? Because even if I end up making a mistake kts usually quite easy to notice that its because of auto implicit thanks to the highlighting</p>\n</blockquote>\n<p>Highlighting didn't catch <a href=\"#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F/near/317128842\">this autoimplicit confusion</a> from earlier today, which confused a bunch of us. <code>q</code> was in the same colour as everything else. i have a love/hate relationship with <code>autoImplicit</code>. When it works it's the best thing, and when it leads you up a blind alley for 5 minutes you want it to die.</p>",
        "id": 317168142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671632083
    },
    {
        "content": "<p>My proposal is to specifically make sure they're not highlighted like everything else. Unless you're talking about code outside of the editor.</p>",
        "id": 317169719,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671632451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317168142\">said</a>:</p>\n<blockquote>\n<p>Highlighting didn't catch <a href=\"#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F/near/317128842\">this autoimplicit confusion</a> from earlier today, which confused a bunch of us. <code>q</code> was in the same colour as everything else. i have a love/hate relationship with <code>autoImplicit</code>. When it works it's the best thing, and when it leads you up a blind alley for 5 minutes you want it to die.</p>\n</blockquote>\n<p>that would not have happened if <code>relaxedAutoImplicit</code> was false by default though, wouldn't it? As those <code>q</code>s are not greek letters followed by numbers. I think changing that default would solve a lot of the \"leading up a blind alley\" instances with very little downsides (having to turn it on on the rare occasion it's useful to have it on all identifiers).</p>",
        "id": 317171118,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671632816
    },
    {
        "content": "<p>Greek letters alone are not a good setting. Lots of variables are not written in greek. We sometimes use greek letters for type variables, but also sometimes capital letters for this (because for some reason mathematicians like to call their rings <code>R</code> instead of <code>\\alpha</code> <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> ), and autoimplicits are just as useful for regular variables.</p>",
        "id": 317171984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633028
    },
    {
        "content": "<p>If <code>relaxedAutoImplicit</code> was true by default, it may as well be the only kind of autoimplicit, because the whole point of autoimplicits is not having to write out a lot of text to introduce variables, so there is no way you would go to the trouble of <code>set_option relaxedAutoImplicit false</code>, the variable line would almost certainly be shorter than that.</p>",
        "id": 317172538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317172538\">said</a>:</p>\n<blockquote>\n<p>If <code>relaxedAutoImplicit</code> was true by default, it may as well be the only kind of autoimplicit, because the whole point of autoimplicits is not having to write out a lot of text to introduce variables, so there is no way you would go to the trouble of <code>set_option relaxedAutoImplicit false</code>, the variable line would almost certainly be shorter than that.</p>\n</blockquote>\n<p>For one instance, absolutely, but then it's not terribly useful either (it's not saving you much typing). It makes most sense I guess if you're repeatedly using it that way, and then adding that line once wouldn't be too much trouble (compared to the confusion it might save, especially for beginners, imho)</p>",
        "id": 317173442,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671633422
    },
    {
        "content": "<p>yeah but you couldn't leave that in a file either, because who's going to look for such an option in order to know whether autoimplicits are enabled or not?</p>",
        "id": 317173828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633518
    },
    {
        "content": "<p>and in my experience it's less about saving some characters as making sure that you get the types right on your variables</p>",
        "id": 317174004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633564
    },
    {
        "content": "<p>for sure there are cases where it causes problems but it has been a solidly net positive IME, once you are aware of it. It might just be a power user feature</p>",
        "id": 317174750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633737
    },
    {
        "content": "<p>hm, I don't think I understand that, how does autoimplicit help getting the types right?</p>",
        "id": 317174810,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671633754
    },
    {
        "content": "<p>the type is inferred automatically so it is the most general thing that makes the theorem typecheck. By comparison when you have a <code>variable</code> line you will put some common types in there to minimize typing but when one theorem in the section has a different type then oops you wrote the theorem wrong but the proof might still go through, if for example it's supposed to be about <code>{a : Int}</code> but you have <code>variable {a : Nat}</code> 1000 lines prior</p>",
        "id": 317175318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633893
    },
    {
        "content": "<p>but then again, should a power user feature be the default? a casual/novice user would much less know to change the option</p>",
        "id": 317175408,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671633919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317171984\">said</a>:</p>\n<blockquote>\n<p>Greek letters alone are not a good setting. Lots of variables are not written in greek. We sometimes use greek letters for type variables, but also sometimes capital letters for this (because for some reason mathematicians like to call their rings <code>R</code> instead of <code>\\alpha</code> <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> ), and autoimplicits are just as useful for regular variables.</p>\n</blockquote>\n<p>I never understand what you guys don't like about our brilliant notation. You call everything <code>alpha</code> but our convention is much more readable because you can guess <code>R</code> is a ring, <code>G</code> is a group etc.</p>",
        "id": 317176301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671634154
    },
    {
        "content": "<p>And <code>m</code> is a monad</p>",
        "id": 317177228,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634412
    },
    {
        "content": "<p>could also be M</p>",
        "id": 317177244,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671634418
    },
    {
        "content": "<p><code>M</code> is a specific monad!</p>",
        "id": 317177291,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634434
    },
    {
        "content": "<p>What letter does Monoid use then <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 317177373,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671634449
    },
    {
        "content": "<p>We don't use those</p>",
        "id": 317177395,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634456
    },
    {
        "content": "<p>We should really use <code>μ</code> for consistency</p>",
        "id": 317177426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634466
    },
    {
        "content": "<p>it sounds like changing the heuristic for the relaxed auto implicit (and the default) would address both then, if it's a single greek or latin letter + numbers the all these examples would work while still addressing most of the namespace/typo issues</p>",
        "id": 317178009,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671634618
    },
    {
        "content": "<p>To add something a little more productive: the Greek convention is surely one of the weirder parts of Lean for programmers (and perhaps mathematicians as well). Personally I would love to just follow rings and use <code>A</code> and <code>M</code> etc.</p>",
        "id": 317178028,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634622
    },
    {
        "content": "<p>If we have to use greek, we might see <a href=\"#narrow/stream/144837-PR-reviews/topic/.237864.20continuous.20primitives/near/242166799\">capital iota</a> come back...</p>",
        "id": 317178536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671634765
    },
    {
        "content": "<p>For what it's worth, this is the distribution of auto implicits in core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"mi\">1290</span> <span class=\"n\">α</span>\n    <span class=\"mi\">610</span> <span class=\"n\">m</span>\n    <span class=\"mi\">295</span> <span class=\"n\">β</span>\n    <span class=\"mi\">229</span> <span class=\"n\">n</span>\n     <span class=\"mi\">86</span> <span class=\"n\">ε</span>\n     <span class=\"mi\">83</span> <span class=\"n\">ctx</span>\n     <span class=\"mi\">78</span> <span class=\"n\">σ</span>\n     <span class=\"mi\">51</span> <span class=\"n\">s</span>\n     <span class=\"mi\">35</span> <span class=\"n\">ρ</span>\n     <span class=\"mi\">33</span> <span class=\"n\">γ</span>\n     <span class=\"mi\">31</span> <span class=\"n\">k</span>\n     <span class=\"mi\">30</span> <span class=\"n\">p</span>\n     <span class=\"mi\">17</span> <span class=\"n\">t</span>\n     <span class=\"mi\">17</span> <span class=\"n\">sep</span>\n     <span class=\"mi\">15</span> <span class=\"n\">a</span>\n     <span class=\"mi\">14</span> <span class=\"n\">x</span>\n     <span class=\"mi\">13</span> <span class=\"n\">ω</span>\n     <span class=\"mi\">12</span> <span class=\"n\">ks</span>\n     <span class=\"mi\">11</span> <span class=\"n\">y</span>\n      <span class=\"mi\">9</span> <span class=\"n\">b</span>\n      <span class=\"mi\">6</span> <span class=\"n\">k'</span>\n      <span class=\"mi\">6</span> <span class=\"n\">i</span>\n      <span class=\"mi\">4</span> <span class=\"n\">M</span>\n      <span class=\"mi\">4</span> <span class=\"n\">elem</span>\n      <span class=\"mi\">4</span> <span class=\"n\">dom</span>\n      <span class=\"mi\">4</span> <span class=\"n\">cont</span>\n      <span class=\"mi\">4</span> <span class=\"n\">c</span>\n      <span class=\"mi\">3</span> <span class=\"n\">e</span>\n      <span class=\"mi\">2</span> <span class=\"n\">ys</span>\n      <span class=\"mi\">2</span> <span class=\"n\">xs</span>\n      <span class=\"mi\">2</span> <span class=\"n\">ss</span>\n      <span class=\"mi\">2</span> <span class=\"n\">res</span>\n      <span class=\"mi\">2</span> <span class=\"n\">q</span>\n      <span class=\"mi\">2</span> <span class=\"n\">info</span>\n      <span class=\"mi\">2</span> <span class=\"n\">idx</span>\n      <span class=\"mi\">2</span> <span class=\"n\">f</span>\n      <span class=\"mi\">2</span> <span class=\"n\">declName</span>\n      <span class=\"mi\">2</span> <span class=\"n\">Context</span>\n      <span class=\"mi\">2</span> <span class=\"n\">cmp</span>\n      <span class=\"mi\">1</span> <span class=\"n\">ε'</span>\n      <span class=\"mi\">1</span> <span class=\"n\">δ</span>\n      <span class=\"mi\">1</span> <span class=\"n\">val</span>\n      <span class=\"mi\">1</span> <span class=\"n\">unsigned</span>\n      <span class=\"mi\">1</span> <span class=\"n\">ProjectionInfo</span>\n      <span class=\"mi\">1</span> <span class=\"n\">Code</span>\n      <span class=\"mi\">1</span> <span class=\"n\">b₂</span>\n      <span class=\"mi\">1</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n<p>And yes, <code>ProjectionInfo</code> is an uninteded implicit in dead code, but <code>Context</code> and <code>Code</code> are not :)</p>",
        "id": 317196922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671639795
    },
    {
        "content": "<p>For the implicit <code>ks</code> used with <code>TSyntax</code> in quite a few different places, I was definitely glad for the option. Being able to use auto implicits for <code>k</code>, which the name was before a refactoring, but not <code>ks</code> would have been jarring in this case.</p>",
        "id": 317197217,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671639894
    },
    {
        "content": "<p>How can I gather those stats for std?</p>",
        "id": 317197614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671640025
    },
    {
        "content": "<p>Would having code lenses with the auto-implicits' types help discoverability?</p>",
        "id": 317200929,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1671640981
    },
    {
        "content": "<p>Maybe code lens is not the right name. I mean the thing that shows greyed out type signatures in Haskell files.</p>",
        "id": 317201514,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1671641168
    },
    {
        "content": "<p>Maybe this is a good use for \"hint\" diagnostics</p>",
        "id": 317201972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641294
    },
    {
        "content": "<p>these are rendered in vscode as a little dotted underline on the variable, it's visible but not calling attention to itself and it doesn't show up in the \"problems\" panel</p>",
        "id": 317202190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641367
    },
    {
        "content": "<p>so something that falls between a linter and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>'s suggestion of specific highlighting?</p>",
        "id": 317202933,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671641577
    },
    {
        "content": "<p>A diagnostic <em>would</em> have the advantage of being sent incrementally, in contrast to semantic highlighting</p>",
        "id": 317203165,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671641653
    },
    {
        "content": "<p>are those turned on automatically? i.e. would someone using an autoimplicit accidentally that doesn't know what it is see that without having to set it up?</p>",
        "id": 317203235,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671641674
    },
    {
        "content": "<p>yes</p>",
        "id": 317203270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641684
    },
    {
        "content": "<p>they might not know what the hint is either, but you can mouse over and it will say what it's about</p>",
        "id": 317203321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641704
    },
    {
        "content": "<p>that sounds like a good solution (imho)!</p>",
        "id": 317203425,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671641741
    },
    {
        "content": "<p>well there would probably be an option to disable it, but I'm okay with having that on by default in std/mathlib/user projects</p>",
        "id": 317203573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641767
    },
    {
        "content": "<p>it still needs user testing of course to see if it drives people nuts or not</p>",
        "id": 317203934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671641861
    },
    {
        "content": "<p>And what it does in other editors</p>",
        "id": 317204152,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671641917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317197614\">said</a>:</p>\n<blockquote>\n<p>How can I gather those stats for std?</p>\n</blockquote>\n<p>I crudely patched Lean to do that</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/Lean/Elab/Term.lean b/src/Lean/Elab/Term.lean</span><span class=\"w\"></span>\n<span class=\"gh\">index a22063efd0..a5f2cf2753 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/src/Lean/Elab/Term.lean</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/src/Lean/Elab/Term.lean</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -1484,6 +1484,7 @@ partial def withAutoBoundImplicit (k : TermElabM α) : TermElabM α := do</span><span class=\"w\"></span>\n<span class=\"w\"> </span>              -- Restore state, declare `n`, and try again<span class=\"w\"></span>\n<span class=\"w\"> </span>              s.restore<span class=\"w\"></span>\n<span class=\"w\"> </span>              withLocalDecl n .implicit (← mkFreshTypeMVar) fun x =&gt;<span class=\"w\"></span>\n<span class=\"gi\">+                dbg_trace \"auto {n}\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                withReader (fun ctx =&gt; { ctx with autoBoundImplicits := ctx.autoBoundImplicits.push x } ) do<span class=\"w\"></span>\n<span class=\"w\"> </span>                  loop (← saveState)<span class=\"w\"></span>\n<span class=\"w\"> </span>            | none   =&gt; throw ex<span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"mi\">1202</span> <span class=\"n\">α</span>\n    <span class=\"mi\">302</span> <span class=\"n\">β</span>\n    <span class=\"mi\">258</span> <span class=\"n\">a</span>\n    <span class=\"mi\">204</span> <span class=\"n\">m</span>\n    <span class=\"mi\">169</span> <span class=\"n\">n</span>\n    <span class=\"mi\">161</span> <span class=\"n\">b</span>\n    <span class=\"mi\">115</span> <span class=\"n\">cmp</span>\n     <span class=\"mi\">91</span> <span class=\"n\">c</span>\n     <span class=\"mi\">76</span> <span class=\"n\">x</span>\n     <span class=\"mi\">64</span> <span class=\"n\">p</span>\n     <span class=\"mi\">52</span> <span class=\"n\">l</span>\n     <span class=\"mi\">44</span> <span class=\"n\">cut</span>\n     <span class=\"mi\">43</span> <span class=\"n\">f</span>\n     <span class=\"mi\">37</span> <span class=\"n\">l₁</span>\n     <span class=\"mi\">36</span> <span class=\"n\">l₂</span>\n     <span class=\"mi\">35</span> <span class=\"n\">γ</span>\n     <span class=\"mi\">35</span> <span class=\"n\">y</span>\n     <span class=\"mi\">35</span> <span class=\"n\">k</span>\n     <span class=\"mi\">34</span> <span class=\"n\">t</span>\n     <span class=\"mi\">33</span> <span class=\"n\">le</span>\n     <span class=\"mi\">28</span> <span class=\"n\">d</span>\n     <span class=\"mi\">26</span> <span class=\"n\">v</span>\n     <span class=\"mi\">22</span> <span class=\"n\">δ</span>\n     <span class=\"mi\">20</span> <span class=\"n\">q</span>\n     <span class=\"mi\">19</span> <span class=\"n\">s</span>\n     <span class=\"mi\">12</span> <span class=\"n\">z</span>\n     <span class=\"mi\">11</span> <span class=\"n\">σ</span>\n     <span class=\"mi\">11</span> <span class=\"n\">a'</span>\n     <span class=\"mi\">10</span> <span class=\"n\">t'</span>\n     <span class=\"mi\">10</span> <span class=\"n\">s'</span>\n      <span class=\"mi\">9</span> <span class=\"n\">ε</span>\n      <span class=\"mi\">9</span> <span class=\"n\">s₂</span>\n      <span class=\"mi\">9</span> <span class=\"n\">s₁</span>\n      <span class=\"mi\">8</span> <span class=\"n\">R</span>\n      <span class=\"mi\">8</span> <span class=\"n\">path'</span>\n      <span class=\"mi\">8</span> <span class=\"n\">init</span>\n      <span class=\"mi\">7</span> <span class=\"n\">t₂</span>\n      <span class=\"mi\">7</span> <span class=\"n\">t₁</span>\n      <span class=\"mi\">7</span> <span class=\"n\">path</span>\n      <span class=\"mi\">7</span> <span class=\"n\">o</span>\n      <span class=\"mi\">7</span> <span class=\"n\">n'</span>\n      <span class=\"mi\">7</span> <span class=\"n\">i</span>\n      <span class=\"mi\">6</span> <span class=\"n\">r</span>\n      <span class=\"mi\">6</span> <span class=\"n\">n₀</span>\n      <span class=\"mi\">6</span> <span class=\"n\">c₂</span>\n      <span class=\"mi\">6</span> <span class=\"n\">c₁</span>\n      <span class=\"mi\">6</span> <span class=\"n\">c₀</span>\n      <span class=\"mi\">5</span> <span class=\"n\">p₂</span>\n      <span class=\"mi\">5</span> <span class=\"n\">p₁</span>\n      <span class=\"mi\">5</span> <span class=\"n\">Elem</span>\n      <span class=\"mi\">5</span> <span class=\"n\">Dom</span>\n      <span class=\"mi\">5</span> <span class=\"n\">Cont</span>\n      <span class=\"mi\">5</span> <span class=\"n\">cmpα</span>\n      <span class=\"mi\">5</span> <span class=\"n\">acc</span>\n      <span class=\"mi\">4</span> <span class=\"n\">parent</span>\n      <span class=\"mi\">4</span> <span class=\"n\">lb</span>\n      <span class=\"mi\">4</span> <span class=\"n\">cmpβ</span>\n      <span class=\"mi\">3</span> <span class=\"n\">ω</span>\n      <span class=\"mi\">3</span> <span class=\"n\">ρ</span>\n      <span class=\"mi\">3</span> <span class=\"n\">z'</span>\n      <span class=\"mi\">3</span> <span class=\"n\">res</span>\n      <span class=\"mi\">3</span> <span class=\"n\">n₂</span>\n      <span class=\"mi\">3</span> <span class=\"n\">n₁</span>\n      <span class=\"mi\">3</span> <span class=\"n\">l'</span>\n      <span class=\"mi\">3</span> <span class=\"n\">h</span>\n      <span class=\"mi\">3</span> <span class=\"n\">d₂</span>\n      <span class=\"mi\">3</span> <span class=\"n\">d₁</span>\n      <span class=\"mi\">3</span> <span class=\"n\">d'</span>\n      <span class=\"mi\">2</span> <span class=\"n\">β₂</span>\n      <span class=\"mi\">2</span> <span class=\"n\">β₁</span>\n      <span class=\"mi\">2</span> <span class=\"n\">α₂</span>\n      <span class=\"mi\">2</span> <span class=\"n\">α₁</span>\n      <span class=\"mi\">2</span> <span class=\"n\">tl</span>\n      <span class=\"mi\">2</span> <span class=\"n\">sz</span>\n      <span class=\"mi\">2</span> <span class=\"n\">L</span>\n      <span class=\"mi\">2</span> <span class=\"n\">Idx</span>\n      <span class=\"mi\">2</span> <span class=\"n\">h₂</span>\n      <span class=\"mi\">2</span> <span class=\"n\">h₁</span>\n      <span class=\"mi\">2</span> <span class=\"n\">cmpγ</span>\n      <span class=\"mi\">2</span> <span class=\"n\">C</span>\n      <span class=\"mi\">2</span> <span class=\"n\">as</span>\n      <span class=\"mi\">1</span> <span class=\"n\">ζ</span>\n      <span class=\"mi\">1</span> <span class=\"n\">xs</span>\n      <span class=\"mi\">1</span> <span class=\"n\">r₂</span>\n      <span class=\"mi\">1</span> <span class=\"n\">r₁</span>\n      <span class=\"mi\">1</span> <span class=\"n\">p'</span>\n      <span class=\"mi\">1</span> <span class=\"n\">M</span>\n      <span class=\"mi\">1</span> <span class=\"n\">lt</span>\n      <span class=\"mi\">1</span> <span class=\"n\">j</span>\n      <span class=\"mi\">1</span> <span class=\"n\">g</span>\n      <span class=\"mi\">1</span> <span class=\"n\">dflt</span>\n      <span class=\"mi\">1</span> <span class=\"n\">cr</span>\n      <span class=\"mi\">1</span> <span class=\"n\">cl</span>\n      <span class=\"mi\">1</span> <span class=\"n\">c'</span>\n      <span class=\"mi\">1</span> <span class=\"n\">a₂</span>\n      <span class=\"mi\">1</span> <span class=\"n\">a₁</span>\n</code></pre></div>",
        "id": 317205092,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671642196
    },
    {
        "content": "<p>so how could I write such a hint? Is there an example there to look at?</p>",
        "id": 317210104,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1671643790
    },
    {
        "content": "<p>Also wondering if type errors involving autoimplicit variables should just have a message like \"Hint: variables <code>x,y,z</code> are auto-implicit, were these all intended?\"</p>\n<p>Not sure how easy it is to figure out which type errors could have come from auto-implicit stuff, since we don't want the heuristic to be too noisy</p>",
        "id": 317292345,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671687738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/317292345\">said</a>:</p>\n<blockquote>\n<p>Also wondering if type errors involving autoimplicit variables should just have a message like \"Hint: variables <code>x,y,z</code> are auto-implicit, were these all intended?\"</p>\n</blockquote>\n<p>Maybe we could have a lint for \"suspicious\" autoImplicits, for example, when an autoimplicit has more than x (say 1, maybe 2) characters and is sufficiently similar to a definition in scope.</p>",
        "id": 321346314,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1673698273
    },
    {
        "content": "<p>Here's a sort of auto-implicit gotcha that got me recently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">abcd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">abd</span>\n</code></pre></div>\n<p>I don't think auto-implicits should apply to anything \"after the colon.\" It's usually fine when auto-implicits are used to add extra parameters to support the introduction of a parameter, but introducing parameters to support a return type seems like it is always incorrect.</p>",
        "id": 322042199,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674045643
    },
    {
        "content": "<p>Even if we ignore the issue of simple typos like the above example, from the perspective of why Haskell has the monomorphism restriction, this is also not great since auto-implicits turn inductive data into non-inductive data (functions). This can lead to surprising run-time characteristics, since what appears to just be a computed value might actually be a function with implicit arguments.</p>",
        "id": 322042215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674045647
    },
    {
        "content": "<p>For example, I don't think this should be allowed since it looks like a plain value but it's secretly a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>(You can imagine that <code>[]</code> is expensive to compute if you want.)</p>\n<p>I'm not actually sure about what the runtime model is for this part of Lean, so please correct me if I'm mistaken about whether in a compiled program it's the case that global definitions are evaluated when the program starts up.</p>",
        "id": 322043483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674046021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/322043483\">said</a>:</p>\n<blockquote>\n<p>For example, I don't think this should be allowed since it looks like a plain value but it's secretly a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>(You can imagine that <code>[]</code> is expensive to compute if you want.)</p>\n<p>I'm not actually sure about what the runtime model is for this part of Lean, so please correct me if I'm mistaken about whether in a compiled program it's the case that global definitions are evaluated when the program starts up.</p>\n</blockquote>\n<p>is this not <code>\\pi {a:Type} -&gt; List a</code>?</p>",
        "id": 322044899,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674046438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/322043483\">said</a>:</p>\n<blockquote>\n<p>I'm not actually sure about what the runtime model is for this part of Lean, so please correct me if I'm mistaken about whether in a compiled program it's the case that global definitions are evaluated when the program starts up.</p>\n</blockquote>\n<p>You can rely on a non-function definition being evaluated at most once, yes</p>",
        "id": 322045693,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674046665
    },
    {
        "content": "<p>Note that you can get into similar troubles using <code>variable</code>, but I'm not opposed to restricting auto implicits in this way</p>",
        "id": 322045842,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674046699
    },
    {
        "content": "<p>For <code>structure</code>, I think I agreed before that we might want to restrict it. Note though that for <code>inductive</code>, auto implicits on the constructor level can be very helpful with inductive predicates with many indices and constructor parameters.</p>",
        "id": 322046139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674046800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek/near/322044899\">said</a>:</p>\n<blockquote>\n<p>is this not <code>\\pi {a:Type} -&gt; List a</code>?</p>\n</blockquote>\n<p>Yes it is, and that's the problem. This means that it's a function even though the source code suggests that <code>foo</code> is an inductive value. So, every time you use <code>foo</code> it will re-evaluate (assuming that Lean doesn't do some optimizations).</p>",
        "id": 322050781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674048170
    },
    {
        "content": "<p>I don't see how you could have a very complicated value in there without making it obvious that it's a function. I was thinking <code>def foo := (some_very_expensive_nat_to_compute : a)</code>, but that requires programmer cooperation</p>",
        "id": 322070017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674053167
    }
]