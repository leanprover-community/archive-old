[
    {
        "content": "<p>I'm trying to be familiar with syntax extension method of Lean4. I gradually understand It's super flexible and really easy to implement new syntax in straight forward way from like EBNF.</p>\n<p>I'm currently try to implement parsing mini language and have a problem parsing C-style octal number by the following code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">oct</span>  <span class=\"c1\">-- octal number</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">oct1</span> <span class=\"c1\">-- leading 0 for octal number</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">oct_digit</span> <span class=\"c1\">-- octal digit one of [0,1,2,3,4,5,6,7]</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"0\"</span> <span class=\"o\">:</span> <span class=\"n\">oct1</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"0\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"1\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"2\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"3\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"4\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"5\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"6\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"7\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"8\"</span> <span class=\"o\">:</span> <span class=\"n\">oct_digit</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">oct1</span> <span class=\"n\">oct_digit</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">oct</span>\n</code></pre></div>\n<p>Because 0 cannot be used as <code>ident</code>,  I think the code above does not work.<br>\nSuggestion for this is very welcome.</p>",
        "id": 287397316,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1656113941
    },
    {
        "content": "<p>Lean has a small set of core tokens (e.g., <code>ident</code>, <code>num</code>, <code>char</code>, <code>str</code>, <code>scientific</code>) that cannot be easily overwritten by user DSLs. To split them apart you must write a fully custom parser for the given piece of input. Alternatively, you could potentially just use the builtin <code>num</code> token as it supports octal numerals (in the form of <code>0o1234</code>).</p>",
        "id": 287416938,
        "sender_full_name": "Mac",
        "timestamp": 1656137963
    }
]