[
    {
        "content": "<p>It appears that smart unfolding can put the <code>idRhs</code> quite deep in the term, in particular behind a <code>if</code>, which can cause the term to be blocked for unfolding in a generic context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo._sunfold</span>\n<span class=\"c1\">-- def foo._sunfold : Nat → Nat → Nat :=</span>\n<span class=\"c1\">-- fun (i j : Nat) =&gt;</span>\n<span class=\"c1\">--   if i &lt; 5 then 0 else</span>\n<span class=\"c1\">--     match j with</span>\n<span class=\"c1\">--     | Nat.zero =&gt; idRhs Nat 1</span>\n<span class=\"c1\">--     | Nat.succ j =&gt; idRhs Nat (foo i j)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails to unfold foo</span>\n</code></pre></div>",
        "id": 233414566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617757177
    },
    {
        "content": "<p>In fact, there is no <code>delta</code> or <code>dsimp</code> or <code>dunfold</code> or <code>unfold</code> tactic to use instead, and the elaborator outright rejects a straight unfolding of this definition by <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo_eq</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">Nat.brecOn.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n    <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Nat.below.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">ite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HasLess.Less.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instHasLessNat</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">5</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat.decLt</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">5</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">foo.match_1.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Nat.below.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Nat.below.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Nat.below.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">PProd.fst.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.rec.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v_0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PProd.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">PProd.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v_0</span><span class=\"o\">)</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PProd.fst.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"n\">PProd.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.rec.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v_0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PProd.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">PProd.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v_0</span><span class=\"o\">)</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n                    <span class=\"n\">j</span><span class=\"o\">))</span>\n                <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n          <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 233416534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617758663
    }
]