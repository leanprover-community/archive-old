[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># on macos 12.4 (m1)</span>\n❯ lean -version\nLean <span class=\"o\">(</span>version <span class=\"m\">4</span>.0.0-nightly-2022-07-02, commit a639eb185cab, Release<span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm quite out of my depth here, I'm messing with dependent pattern matching and there's something I<br>\njust don't understand. Here's my non-minimal but small example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">O</span>\n<span class=\"bp\">|</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">real</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"c1\">-- only `Arrow.id` and `Arrow.comp` really matter for my problem</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Arrow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_dom</span> <span class=\"n\">_cod</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"c1\">-- identity</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Arrow</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n\n  <span class=\"c1\">-- `α → α` arrows</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.unit</span> <span class=\"n\">O.unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.bool</span> <span class=\"n\">O.bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.int</span> <span class=\"n\">O.int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.real</span> <span class=\"n\">O.real</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">Arrow</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Arrow</span> <span class=\"n\">α</span> <span class=\"n\">γ</span>\n\n  <span class=\"c1\">-- `unit → bool`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tru</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.unit</span> <span class=\"n\">O.bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fls</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.unit</span> <span class=\"n\">O.bool</span>\n  <span class=\"c1\">-- `unit → int`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.unit</span> <span class=\"n\">O.int</span>\n  <span class=\"c1\">-- `int → bool`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isZero</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.int</span> <span class=\"n\">O.bool</span>\n  <span class=\"c1\">-- `int → real`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">toReal</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">O.int</span> <span class=\"n\">O.real</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Arrow.compose₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">O</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Arrow</span> <span class=\"n\">β</span> <span class=\"n\">γ</span>\n  <span class=\"bp\">→</span> <span class=\"n\">Arrow</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">→</span> <span class=\"n\">Arrow</span> <span class=\"n\">α</span> <span class=\"n\">γ</span>\n<span class=\"c1\">-- id.compose₁ g = g</span>\n<span class=\"bp\">|</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span>\n<span class=\"c1\">-- f.compose₁ id = f</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- else</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f₂</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Arrow.compose₁</span>\n<span class=\"c1\">-- def Arrow.compose₁ : {α β γ : O} → Arrow β γ → Arrow α β → Arrow α γ :=</span>\n<span class=\"c1\">-- fun {α β γ} x x_1 =&gt;</span>\n<span class=\"c1\">--   match β, γ, x, x_1 with</span>\n<span class=\"c1\">--   | β, .(β), Arrow.id, g =&gt; g</span>\n<span class=\"c1\">--   | .(α), γ, f, Arrow.id =&gt; f</span>\n<span class=\"c1\">--   | β, γ, Arrow.comp f₁ f₂, g =&gt; Arrow.comp f₁ (Arrow.comp f₂ g)</span>\n<span class=\"c1\">--   | β, γ, f, g =&gt; Arrow.comp f g</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Arrow.compose₁</span> <span class=\"n\">Arrow.unit</span> <span class=\"n\">Arrow.id</span>\n<span class=\"c1\">-- Arrow.comp (Arrow.unit) (Arrow.id)</span>\n</code></pre></div>\n<p>I really don't get why this <code>#eval</code> produces a <code>comp</code> and not <code>Arrow.unit</code> as per the second branch<br>\nof <code>compose₁</code>'s <code>match</code>. I guess I'm making a stupid, obvious mistake as that's what I usually do as<br>\na noob, but I just can't see it.</p>",
        "id": 288328239,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1656855617
    },
    {
        "content": "<p>In case it helps, my actual code is here</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/experimentalean4/blob/04ad4ad283a270b1834e96828565b0eda15184d8/catFplIssue/Cat.lean\">https://github.com/AdrienChampion/experimentalean4/blob/04ad4ad283a270b1834e96828565b0eda15184d8/catFplIssue/Cat.lean</a></li>\n</ul>\n<p>with slightly more context, and an <code>Arrow.compose₂</code> with a more type-explicit match</p>",
        "id": 288328314,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1656855741
    },
    {
        "content": "<p>This looks like a bug in the <code>match</code> compiler. I will take a look.</p>",
        "id": 288328791,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656856465
    },
    {
        "content": "<p>Not sure if that's useful, but when I try to prove the theorem <code>compose_id</code> I am interested in, I get this error when I simplify:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Arrow.id_compose</span> <span class=\"o\">:</span> <span class=\"n\">Arrow.compose₁</span> <span class=\"n\">id</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compose₁</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Arrow.compose_id</span> <span class=\"o\">:</span> <span class=\"n\">Arrow.compose₁</span> <span class=\"n\">f</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compose₁</span><span class=\"o\">]</span>\n<span class=\"c1\">-- failed to generate equality theorems for `match` expression `Arrow.compose₁.match_1`</span>\n<span class=\"c1\">-- case unit</span>\n<span class=\"c1\">-- motive : (β γ : O) → Arrow β γ → Arrow O.unit β → Sort u_1</span>\n<span class=\"c1\">-- h_1 : (β : O) → (g : Arrow O.unit β) → motive β β id g</span>\n<span class=\"c1\">-- h_2 : (γ : O) → (f : Arrow O.unit γ) → motive O.unit γ f id</span>\n<span class=\"c1\">-- h_3 : (β γ β_1 : O) → (f₁ : Arrow β_1 γ) → (f₂ : Arrow β β_1) → (g : Arrow O.unit β) → motive β γ (comp f₁ f₂) g</span>\n<span class=\"c1\">-- h_4 : (β γ : O) → (f : Arrow β γ) → (g : Arrow O.unit β) → motive β γ f g</span>\n<span class=\"c1\">-- : O.unit = O.unit → HEq unit id → False</span>\n<span class=\"c1\">-- ⊢ h_4 O.unit O.unit unit id = h_2 O.unit unit</span>\n</code></pre></div>",
        "id": 288333244,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1656862480
    },
    {
        "content": "<p>Pushed a fix for this issue: <a href=\"https://github.com/leanprover/lean4/commit/03ce7cb17ccdbbb1874654766a470c8816f3aa3d\">https://github.com/leanprover/lean4/commit/03ce7cb17ccdbbb1874654766a470c8816f3aa3d</a></p>",
        "id": 288345919,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656880140
    },
    {
        "content": "<p>Awesome, thanks <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span> </p>\n<p>I'm not in a rush so I'll wait until it reaches nightly, unless you want me to confirm the problem is fixed in which case just let me know</p>",
        "id": 288350416,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1656886814
    }
]