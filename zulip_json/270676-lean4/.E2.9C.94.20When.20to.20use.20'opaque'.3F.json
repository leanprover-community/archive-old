[
    {
        "content": "<p>I see that <code>constant</code> is being renamed to <code>opaque</code> for consistency reasons, but that made me question whether I really know the meaning of constant/opaque.</p>\n<p>It must have a specific effect on elaboration, but what exactly? Are there general programming use cases I may want to use it?</p>",
        "id": 287082363,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655916877
    },
    {
        "content": "<p>I found this in the Lean 3 manual, but it does not help much:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">declares</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span> <span class=\"n\">named</span> <span class=\"n\">c</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">c</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">name.</span>\n</code></pre></div>\n<p>I found this in the Lean4 manual:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">keyword</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">deleted</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"kd\">axiom</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">instead.</span> <span class=\"n\">In</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">command</span> <span class=\"n\">opaque</span> <span class=\"n\">is</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">define</span> <span class=\"n\">an</span> <span class=\"n\">opaque</span> <span class=\"kd\">definition</span>\n</code></pre></div>\n<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- The following example will not type check since `x` is opaque</span>\n<span class=\"c1\">-- example : x = 1 := rfl</span>\n\n<span class=\"c1\">-- We can evaluate `x`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- 1</span>\n\n<span class=\"c1\">-- When no value is provided, the elaborator tries to build one automatically for us</span>\n<span class=\"c1\">-- using the `Inhabited` type class</span>\n<span class=\"n\">opaque</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>So opaque definitions can be evaluated, but they cannot participate in theorems/examples?</p>",
        "id": 287084309,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655917725
    },
    {
        "content": "<p>First things first what is an <code>opaque</code> (they've been called <code>opaque</code> internally forever and are distinct from all other declarations you know). If we write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span>\n</code></pre></div>\n<p>We are telling the system that there exists a value <code>foo</code> of a type <code>MyType</code> in order for this declaration to be valid there has to be an instance <code>Inhabited MyType</code> or we need to provide an explicit value for <code>foo</code> via <code>:= ...</code>. Otherwise we could just propose values of empty types which would lead to inconsistency of course. However unlike a <code>def</code> the system cannot obtain the value of an <code>opaque</code>, it is just a name with a type, there is absolutely nothing you can proof about it.</p>\n<p>Why is it useful: The most common use case is to hide things from the prover part of Lean but still make them compilable, for example <code>partial def</code>s are internally implemented with an <code>opaque</code> that uses <code>implementedBy</code> to point the compiler to an <code>unsafe def</code> (which doesn't need a termination proof). We can also use it in FFI to expose an API from C to Lean, as is for example done in Socket.lean (<a href=\"https://github.com/xubaiw/Socket.lean/blob/main/Socket/Socket.lean\">https://github.com/xubaiw/Socket.lean/blob/main/Socket/Socket.lean</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  Create a new `Socket` using the specified domain and type.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Socket</span>\n<span class=\"kd\">@[extern \"lean_socket_mk\"]</span> <span class=\"n\">opaque</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">AddressFamily</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">SockType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Socket</span>\n<span class=\"kd\">end</span> <span class=\"n\">Socket</span>\n</code></pre></div>\n<p>where there is obviously no sensible implementation of <code>Socket.mk</code> in pure Lean terms since it requires low level interaction with the OS.</p>",
        "id": 287084347,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655917743
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>!</p>",
        "id": 287084680,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655917919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 287084692,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655917924
    }
]