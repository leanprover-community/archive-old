[
    {
        "content": "<p>How do I see the name of a coercion in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : Bool â†’ Prop :=</span>\n<span class=\"cm\">fun b =&gt; b = true</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Bool</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar</span> <span class=\"c1\">-- it's `inferInstance`</span>\n</code></pre></div>\n<p>I know there's a coercion from Bool to Prop but I would like to find it in the source code. Note that I am not asking \"where is this specific coercion defined\", I am asking \"what is the algorithm for answering all questions of this nature\".</p>\n<p>Here's how I do it in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">bool</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Try this: exact coe_sort_bool</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 305112643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666258929
    },
    {
        "content": "<p><code>#synth</code> is the command for this</p>",
        "id": 305112698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666258963
    },
    {
        "content": "<p>oh nice -- thanks.</p>",
        "id": 305113739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666259399
    },
    {
        "content": "<p>I often do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305157661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666274875
    },
    {
        "content": "<p>All these sorts of translations between Lean 3 and Lean 4 tricks are among the things that need to go in a migration guide (I imagine a table listing examples of Lean 3 constructs - including mathlib and leanproject commands - with brief summaries of what they do, and then giving a Lean 4 equivalent), rather than being lost in random Zulip threads.</p>",
        "id": 305262675,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666313851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span>, while the wheels turn towards a proper migration guide, I've been dumping somethings into <a href=\"https://github.com/leanprover-community/mathlib4/wiki\">https://github.com/leanprover-community/mathlib4/wiki</a>, in particular the <a href=\"https://github.com/leanprover-community/mathlib4/wiki#some-common-fixes\">Some common fixes</a> section. I've just added this one, but hopefully everyone can pile in. It's not a long term document, but hopefully it can help prevent tricks being lost.</p>",
        "id": 305267683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666315114
    }
]