[
    {
        "content": "<p>So i wrote a fibonacci function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and it didn't work because I had to prove termination. i then tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the same thing happened, but this version worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I didnt have to prove any termination at all. So my question is, is this a bug or just how the core language works?</p>",
        "id": 274319752,
        "sender_full_name": "Joseph O",
        "timestamp": 1646589947
    },
    {
        "content": "<p>That's certainly not a bug. Do you know what 0-1 is? If so you can probably work out what's going on.</p>",
        "id": 274319899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646590145
    },
    {
        "content": "<p>Fundamentally, I think i am just not supposed to subtract</p>",
        "id": 274319987,
        "sender_full_name": "Joseph O",
        "timestamp": 1646590281
    },
    {
        "content": "<p>The last version of your code is simply the only one that allows lean to automatically apply structural recursion since in every recursive call the parameter you are parsing is structually smaller than the one you got.</p>\n<p>Now if you were to e.g. take your second version and apply termination by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Lean will complain that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specity</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and you'd have to prove this by hand since lean cannot just automagically see whats going on.</p>",
        "id": 274320246,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646590657
    },
    {
        "content": "<p>Another solution is to mark it with <code>partial</code>, but that is generally not really ideal</p>",
        "id": 274320308,
        "sender_full_name": "Joseph O",
        "timestamp": 1646590742
    },
    {
        "content": "<p>That's not a solution to prove termination that's telling lean to ignore termination on this one</p>",
        "id": 274320323,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646590792
    },
    {
        "content": "<p>I mean not as a solution, but to ignore the termination errors.</p>",
        "id": 274320504,
        "sender_full_name": "Joseph O",
        "timestamp": 1646590973
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"c1\">-- This auxiliary prop will be proved automatically in the future</span>\n   <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274321966,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646592935
    },
    {
        "content": "<p>What does the <code>..</code> syntax do? <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 274322756,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646593776
    },
    {
        "content": "<p>I believe it's denoting that the arguments can be inferred - see the bottom of this page: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html\">https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html</a></p>",
        "id": 274323224,
        "sender_full_name": "loki der quaeler",
        "timestamp": 1646594307
    },
    {
        "content": "<p>Ah so a multi _ alias I see</p>",
        "id": 274323294,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646594404
    },
    {
        "content": "<p>I think the <code>..</code> notation + named arguments is also quite useful for writing patterns.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.z</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p><code>Foo.z</code> will not break if we add new fields to the constructors.</p>",
        "id": 274324710,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646596238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274319752\">said</a>:</p>\n<blockquote>\n<p>So i wrote a fibonacci function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and it didn't work because I had to prove termination.</p>\n</blockquote>\n<p>Just to mention what a problem is that prevents you from showing termination here, with <code>match</code> statements each pattern is independent: the third case doesn't \"know\" that <code>n</code> is neither <code>0</code> nor <code>1</code>.</p>\n<p>If <code>match</code> could somehow give you that information (maybe as <code>n ≠ 0 ∧ n ≠ 1</code>), then you'd be able to show the function terminates.</p>",
        "id": 274324842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646596439
    },
    {
        "content": "<p>You could say the plus patterns (like <code>n+2</code>) are a way to avoid needing a fancy feature like that while still being relatively convenient.</p>",
        "id": 274324962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646596566
    },
    {
        "content": "<p>Note that lean 4 <em>has</em> that fancy feature, so potentially you could use it to prove the first one is terminating too</p>",
        "id": 274325789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646597566
    },
    {
        "content": "<p>I don't think there is syntax to expose the failing cases to the match expression itself though</p>",
        "id": 274325863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646597668
    },
    {
        "content": "<blockquote>\n<p>If match could somehow give you that information (maybe as n ≠ 0 ∧ n ≠ 1), then you'd be able to show the function terminates.</p>\n</blockquote>\n<p>We have support for this only when reasoning about code that uses <code>match</code>. The <code>split</code> tactic will add this kind of antecedent.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">trace_state</span> <span class=\"c1\">-- In the third goal we have extra hypotheses that make sure the previous cases were not taken.</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_arith</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_arith</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_3</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp_arith</span>\n</code></pre></div>",
        "id": 274326031,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646597920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274325863\">said</a>:</p>\n<blockquote>\n<p>I don't think there is syntax to expose the failing cases to the match expression itself though</p>\n</blockquote>\n<p>Unfortunately, we don't. We only have support for this when reasoning about <code>match</code> expressions as in the example above.</p>",
        "id": 274326055,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646597993
    },
    {
        "content": "<p>Thanks for these great answers! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274332902,
        "sender_full_name": "Joseph O",
        "timestamp": 1646606964
    },
    {
        "content": "<p>Not really related to the original question, but why is this not structural recursion </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.unfoldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">::(</span><span class=\"n\">unfoldr</span> <span class=\"n\">f</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>nor this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.unfoldlAux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfoldlAux</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">acc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and how can i make it structural</p>",
        "id": 274339111,
        "sender_full_name": "Joseph O",
        "timestamp": 1646615283
    },
    {
        "content": "<p>i could just mark them with partial and leave it like that, as these functions are for personal use, but why may they never terminate?</p>",
        "id": 274339270,
        "sender_full_name": "Joseph O",
        "timestamp": 1646615494
    },
    {
        "content": "<p>It's not clear to me why <code>f s</code> can eventually be <code>none</code> (I'm guessing that's when you want your functions to terminate)</p>",
        "id": 274339518,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646615794
    },
    {
        "content": "<p>To answer the question \"why is it not structural recursion\": A structural recursion begins by matching on one of the function arguments, and then calling the function only on the values coming out of that match. Here you are matching on <code>f s</code>, which is not a function argument, and you are calling yourself recursively on <code>b'</code> which is not a value coming from a match on said function argument</p>",
        "id": 274339685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646616053
    },
    {
        "content": "<p>As arthur says, not only is this not structurally recursive, it's not well founded recursive either, and you can in fact make it loop by passing the function <code>(\\lam a, some (0, a))</code> for <code>f</code></p>",
        "id": 274339717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646616113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274339717\">said</a>:</p>\n<blockquote>\n<p>As arthur says, not only is this not structurally recursive, it's not well founded recursive either, and you can in fact make it loop by passing the function <code>(\\lam a, some (0, a))</code> for <code>f</code></p>\n</blockquote>\n<p>but what can i do to match on the argument?</p>",
        "id": 274339893,
        "sender_full_name": "Joseph O",
        "timestamp": 1646616353
    },
    {
        "content": "<p>it wouldnt help</p>",
        "id": 274339894,
        "sender_full_name": "Joseph O",
        "timestamp": 1646616359
    },
    {
        "content": "<p>I feel like for my purpose just marking it with <code>partial</code> would suffice</p>",
        "id": 274340023,
        "sender_full_name": "Joseph O",
        "timestamp": 1646616497
    },
    {
        "content": "<p>but for the future, how would the structural recursive version look like?</p>",
        "id": 274340444,
        "sender_full_name": "Joseph O",
        "timestamp": 1646617092
    },
    {
        "content": "<p>Wanna describe the problem you're trying to solve verbally on another thread to clear out the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> noise? I <em>suspect</em> you'll need to rethink the whole solution design because your function can indeed loop forever for some functions <code>f</code> (e.g. with Mario's example).</p>",
        "id": 274340463,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646617160
    },
    {
        "content": "<p><code>unfoldr</code> is a useful function in general, but I guess in Lean it should return something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream\">docs#stream</a> instead of a List</p>",
        "id": 274340882,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1646617847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274340444\">said</a>:</p>\n<blockquote>\n<p>but for the future, how would the structural recursive version look like?</p>\n</blockquote>\n<p>As <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pointed out your function does not terminate in general. You can change the signature a bit, and ask the user to show that the new <code>b</code> is \"smaller\". Here are some examples</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.unfoldr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">{</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span><span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">unfoldr</span> <span class=\"n\">f</span> <span class=\"n\">b'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.unfoldr</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">⟩)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst1</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Similar example where we provide our custom `SizeOf` instance</span>\n  <span class=\"n\">List.unfoldr</span> <span class=\"o\">(</span><span class=\"n\">sz</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decreasing_tactic</span><span class=\"o\">⟩)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst2</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\">-- More general (and less convenient to use) version that can take an arbitrary well-founded relation.</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.unfoldr'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">{</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">w.rel</span> <span class=\"n\">b'</span> <span class=\"n\">b</span><span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">unfoldr'</span> <span class=\"n\">f</span> <span class=\"n\">b'</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">unfoldr'</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- We need the `master` branch to test the following example</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.unfoldr'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decreasing_tactic</span><span class=\"o\">⟩)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst3</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst4</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.unfoldr'</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decreasing_tactic</span><span class=\"o\">⟩)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst4</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 274345422,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646623501
    },
    {
        "content": "<p>If the angle brackets bother you, you can define a macro. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"#(\"</span> <span class=\"n\">a</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decreasing_tactic</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.unfoldr'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst3</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 274345680,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646623764
    },
    {
        "content": "<p>Thanks for the very helpful explanations and the updated docs. Can someone confirm my understanding of all the cases?</p>\n<ul>\n<li>To prove termination, we need a <em>well-founded relation</em> and a <em>proof that the argument is decreasing</em> for recursive calls (where decrease is with respect to the given relation).</li>\n<li>If there is no <em>termination_by</em>, a well-founded relation is derived (if possible) by implicit resolution on the arguments of the function. It is an error if the typeclass resolution fails.</li>\n<li>If  <em>termination_by</em> is specified, it maps the arguments of the function to a type α and implicit resolution looks for a well-founded relation on α (which we may view as giving a <em>pull-back</em> relation on the original arguments). Again it is an error if the implicit resolution fails, but this time for α .</li>\n<li>In either case, we have to show that arguments for recursive calls are decreasing with respect to the well-founded relation. By default this is done using the <em>decreasing_tactic</em>, with an error if this fails and <em>decreasing_by</em> is not specified. One can instead use <em>decreasing_by</em> to specify the tactic.</li>\n<li>A useful trick  to make things elegant is to note that <em>decreasing_tactic</em> includes <em>assumption</em>, so one can include a <code>have</code> statement that proves arguments are decreasing, and this gets picked up by assumption. This is especially useful if we have multiple recursive calls, since the appropriate <code>have</code> can be added just before each call (this is helpful to lean and to the reader).</li>\n</ul>\n<p>Thanks.</p>",
        "id": 274365106,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1646644362
    },
    {
        "content": "<p>this one doesnt terminate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.unfoldr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">{</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span><span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">unfoldr</span> <span class=\"n\">f</span> <span class=\"n\">b'</span>\n<span class=\"bp\">```</span> <span class=\"n\">just</span> <span class=\"n\">saying</span>\n</code></pre></div>",
        "id": 274397170,
        "sender_full_name": "Joseph O",
        "timestamp": 1646662674
    },
    {
        "content": "<p>and the second version has a type mismatch <a href=\"/user_uploads/3121/yh39Hv89tRD4rpIMLVtZZ_iz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yh39Hv89tRD4rpIMLVtZZ_iz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yh39Hv89tRD4rpIMLVtZZ_iz/image.png\"></a></div>",
        "id": 274397286,
        "sender_full_name": "Joseph O",
        "timestamp": 1646662720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>  You need the Lean 4 master branch.<br>\nNote that this examples are now in our CI :)</p>",
        "id": 274397391,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646662781
    },
    {
        "content": "<p>(also please don't quote entire (long) comments)</p>",
        "id": 274397571,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646662858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274397571\">said</a>:</p>\n<blockquote>\n<p>(also please don't quote entire (long) comments)</p>\n</blockquote>\n<p>Ah sorry</p>",
        "id": 274397915,
        "sender_full_name": "Joseph O",
        "timestamp": 1646663025
    },
    {
        "content": "<p>How do i get the master branch? Do i have to clone from source then?</p>",
        "id": 274398037,
        "sender_full_name": "Joseph O",
        "timestamp": 1646663075
    },
    {
        "content": "<p>I usually wait for the next nightly release</p>",
        "id": 274398327,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646663219
    },
    {
        "content": "<p>Yeah I would do that. Why do the examples <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> posted not work on the current nightly version? Was something added?</p>",
        "id": 274398421,
        "sender_full_name": "Joseph O",
        "timestamp": 1646663276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274398037\">said</a>:</p>\n<blockquote>\n<p>How do i get the master branch? Do i have to clone from source then?</p>\n</blockquote>\n<p>Yes, this is an option, but the repo is quite big. Another option is to press the green \"Code\" button at GitHub, and select \"Download Zip\". The zip file includes just the master branch. The current nightly build is good enough for part of the examples.</p>",
        "id": 274398494,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646663295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/fibonacci.20functions/near/274398421\">said</a>:</p>\n<blockquote>\n<p>Yeah I would do that. Why do the examples <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> posted not work on the current nightly version? Was something added?</p>\n</blockquote>\n<p>The current nightly build is missing this commit <a href=\"https://github.com/leanprover/lean4/commit/619186b2a839ebd191257d78595d240e8eab47d7\">https://github.com/leanprover/lean4/commit/619186b2a839ebd191257d78595d240e8eab47d7</a></p>",
        "id": 274398546,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646663326
    },
    {
        "content": "<p>It will probably be there tomorrow.</p>",
        "id": 274398564,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646663339
    },
    {
        "content": "<p>Without this commit, code generation will fail in the example that uses <code>invImage</code>.</p>",
        "id": 274398660,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646663383
    },
    {
        "content": "<p>ok well thank you</p>",
        "id": 274398886,
        "sender_full_name": "Joseph O",
        "timestamp": 1646663466
    },
    {
        "content": "<p>Perhaps we should postpone the nightly cut-off time by a few hours so it's night for both of us <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 274398961,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646663503
    },
    {
        "content": "<p>8AM CET/11PM PT sounds reasonable enough? Now I just need to find out the server timezones of GitHub and of the new bot</p>",
        "id": 274399714,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646663804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> Thanks for writing the summary. I included it in \"Theorem Proving in Lean 4\"</p>",
        "id": 274401159,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646664413
    },
    {
        "content": "<p>What does <code>sizeOf</code> do  in your function <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> ?</p>",
        "id": 274763626,
        "sender_full_name": "Joseph O",
        "timestamp": 1646865775
    },
    {
        "content": "<p><code>sizeOf</code> is an auxiliary function we use to prove termination. It has type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>When we declare a new inductive type or structure, Lean automatically generates a <code>SizeOf</code> instance for this type and equation theorems. For example, here are the theorems generated for <code>List</code>s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List.nil.sizeOf_spec</span>\n<span class=\"c1\">--  ∀ {α : Type u} [inst : SizeOf α], sizeOf [] = 1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List.cons.sizeOf_spec</span>\n<span class=\"c1\">-- ∀ {α : Type u} [SizeOf α] (head : α) (tail : List α), sizeOf (head :: tail) = 1 + sizeOf head + sizeOf tail</span>\n</code></pre></div>\n<p>The <code>decreasing_tactic</code> uses these theorems when proving termination.<br>\nFor <code>Nat</code>, the <code>SizeOf</code> instance is just the identity function.<br>\nThe short answer is: <code>SizeOf</code>already exists and was a convenient way of making <code>List.unfoldr</code> work for different types.</p>\n<p>In the <code>List.unfoldr</code> example, Lean shows termination using the <code>decreasing_tactic</code>, this tactic succeeds because it also uses the <code>assumption</code> tactic, and we have <code>h : sizeOf b' &lt; sizeOf b</code> in the context. In <code>tst1</code>, when our function returns a new <code>b</code>, we also show <code>sizeOf b &lt; sizeOf (b+1)</code> using <code>simpArith</code>.</p>",
        "id": 274765120,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646866755
    },
    {
        "content": "<p>What syntatic sugar are you using in <code>tst1</code>? Also, i really need to read TPIL4</p>",
        "id": 274780000,
        "sender_full_name": "Joseph O",
        "timestamp": 1646877128
    },
    {
        "content": "<p>Or else im never going to be able to prove termination of my functions</p>",
        "id": 274780015,
        "sender_full_name": "Joseph O",
        "timestamp": 1646877148
    },
    {
        "content": "<p>Are you referring to <code>⟨b, by simp_arith⟩</code>?  This is the anonymous constructor notation. We can use it for types that have only one constructor. In this case, it expands to <code>Subtype.mk b (by simp_arith)</code><br>\nYou can view a subtype as a pair: the element <code>b</code>, and a proof that <code>sizeof b &lt; sizeof (b+1)</code>. The proof is being constructed by the tactic <code>by simp_arith</code>.</p>",
        "id": 274782113,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646879362
    },
    {
        "content": "<p>I was actually referring to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>i shouldve explained myself better, sorry</p>",
        "id": 274782736,
        "sender_full_name": "Joseph O",
        "timestamp": 1646880074
    },
    {
        "content": "<p>This is sugar for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 274783011,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646880398
    },
    {
        "content": "<p>ah, like the <code>function</code> keyword in OCaml.</p>",
        "id": 274783028,
        "sender_full_name": "Joseph O",
        "timestamp": 1646880425
    }
]