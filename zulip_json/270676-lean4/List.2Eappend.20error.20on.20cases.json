[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mem</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_mem_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">dependent elimination failed, failed to solve equation</span>\n<span class=\"cm\">  [] = List.reverseAux (List.reverse as✝) (a :: bs✝)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I cannot prove this theorem! Whatever I try either doesn't work at all or gives me this surprising message about <code>List.reverse</code>. Have I just made a dumb error? This is from exercise 5 of the Ullrich/von Raumer KIT course.</p>",
        "id": 242379940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623433737
    },
    {
        "content": "<p>Aah! Much less surprising now I've looked up the definition of <code>List.append</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">reverseAux</span> <span class=\"n\">as.reverse</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>Lean is taking things apart too much -- I just want to be left with <code>as</code> and <code>bs</code> with <code>[] = as ++ (a :: bs)</code> and I'll take it from there, but I can't get it to stop unfolding. I've tried tactic mode and term mode but I can't get it :-/</p>",
        "id": 242380275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623433905
    },
    {
        "content": "<p>Aah -- I now realise that I have the same problem in Lean 3 so probably this isn't a Lean 4 issue at all.</p>",
        "id": 242389521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623438216
    },
    {
        "content": "<p>OK got it: I need to make other API first. This is indeed nothing to do with Lean 4. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Mem_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">hL</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hL.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">Mem.intro</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_mem_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Mem_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 242390956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623438934
    }
]