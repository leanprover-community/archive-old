[
    {
        "content": "<p>Porting <code>logic.function.conjugate</code> (edit: before noticing that Jon Eugster had done it). This doesn't work in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Semiconj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Semiconj</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ga</span> <span class=\"n\">ga'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gb</span> <span class=\"n\">gb'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Semiconj</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Semiconj</span> <span class=\"n\">f</span> <span class=\"n\">ga'</span> <span class=\"n\">gb'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Semiconj</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"bp\">∘</span> <span class=\"n\">ga'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"bp\">∘</span> <span class=\"n\">gb'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Semiconj</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Commute</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Semiconj</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Commute</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">f</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.comp_right</span> <span class=\"n\">h'</span> <span class=\"c1\">-- fails to show termination</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Commute</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Function</span>\n</code></pre></div>\n<p>but it <a href=\"https://github.com/leanprover-community/mathlib/blob/e9b8651eb1ad354f4de6be35a38ef31efcd2cfaa/src/logic/function/conjugate.lean#L76\">worked in Lean 3</a>. I'm assuming <code>h.comp_right</code> is being interpreted as <code>Commute.comp_right</code> in Lean 4 and as <code>Semiconj.comp_right</code> in Lean 3.  I can work around with <code>Semiconj.comp_right h h'</code>.  (erroneous claim about next lemma in same file deleted)</p>",
        "id": 308089210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667622417
    },
    {
        "content": "<p>Yes, this is expected behavior. You just have to refer to <code>Semiconj.comp_right</code></p>",
        "id": 308090061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667623382
    },
    {
        "content": "<p>It wouldn't work correctly in this case, but another way (I presume) you're expected to handle this is to export names into a namespace, since dot notation does look at aliases.</p>\n<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Commute</span>\n<span class=\"kn\">export</span> <span class=\"n\">Semiconj</span> <span class=\"o\">(</span><span class=\"n\">comp_right</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Commute</span>\n</code></pre></div>\n<p>The reason this wouldn't work correctly here is that the <code>Commute.comp_right</code> you get yields a <code>Semiconj</code> rather than a <code>Commute</code>.</p>",
        "id": 308104167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667637163
    }
]