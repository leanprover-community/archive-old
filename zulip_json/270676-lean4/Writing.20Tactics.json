[
    {
        "content": "<p>I would like to try out writing tactics. Are there any resources describing the syntax/mechanism for this?<br>\nThe only I've found so far is <a href=\"https://leanprover.github.io/lean4/doc/tactics.html#extensible-tactics\">in the Lean 4 Manual</a>, which is rather an example than a description.</p>",
        "id": 248601024,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628250855
    },
    {
        "content": "<p>I don't know anything about this myself, but there are some examples of tactics in <a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Tactic\">mathlib4</a>.</p>",
        "id": 248659418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628279145
    },
    {
        "content": "<p>These talks are some of the better documentation we have right now:</p>\n<p><a href=\"https://www.youtube.com/watch?v=UeGvhfW1v9M\">https://www.youtube.com/watch?v=UeGvhfW1v9M</a><br>\n<a href=\"https://www.youtube.com/watch?v=vy4JWIiiXSY\">https://www.youtube.com/watch?v=vy4JWIiiXSY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"vy4JWIiiXSY\" href=\"https://www.youtube.com/watch?v=vy4JWIiiXSY\"><img src=\"https://uploads.zulipusercontent.net/a9744273cf760ffba1b1edc75e3157f1dc7c01fc/68747470733a2f2f692e7974696d672e636f6d2f76692f7679344a574969695853592f64656661756c742e6a7067\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"UeGvhfW1v9M\" href=\"https://www.youtube.com/watch?v=UeGvhfW1v9M\"><img src=\"https://uploads.zulipusercontent.net/73e3907a94b165629af5b952079c1032a1fec3c0/68747470733a2f2f692e7974696d672e636f6d2f76692f556547766866573176394d2f64656661756c742e6a7067\"></a></div>",
        "id": 248709379,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1628332144
    },
    {
        "content": "<p>I tried writing an <code>obtain</code> tactic as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"obtain \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">use</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was basically just copying the implementation of <a href=\"https://github.com/leanprover-community/mathlib4/blob/7822926636f86c197bf3b9d14b4ad3b4a34701a1/Mathlib/Tactic/Basic.lean#L41\"><code>by_cases</code> in mathlib4</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"by_cases \"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">pos</span> <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">neg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With my implementation of <code>obtain</code> I get an  error though on the <code>|</code> symbol, saying <code>expected '.'</code>.<br>\nWhy is this happening / what can I do to fix it?</p>",
        "id": 248726133,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628356745
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"obtain \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">use</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works</p>",
        "id": 248726284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628356957
    },
    {
        "content": "<p>Do you happen to know why? ^^</p>",
        "id": 248726300,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628356999
    },
    {
        "content": "<p>It probably guesses that <code>$h</code> has the wrong syntax class, like <code>term</code> or <code>matchArg</code></p>",
        "id": 248726309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357020
    },
    {
        "content": "<p>in fact I'm also not sure it guesses the syntax class of <code>$t</code> right either</p>",
        "id": 248726358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357052
    },
    {
        "content": "<p>you should test it</p>",
        "id": 248726364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357061
    },
    {
        "content": "<p>I don't understand why it has to guess at all. Isn't the syntax class specified in the first line?</p>",
        "id": 248726393,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628357141
    },
    {
        "content": "<p>the type of <code>t</code> is <code>Syntax</code></p>",
        "id": 248726437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357169
    },
    {
        "content": "<p>and <code>h</code></p>",
        "id": 248726443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357176
    },
    {
        "content": "<p>there is no communication of the \"type\" of the syntax from the first line to the second</p>",
        "id": 248726453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357195
    },
    {
        "content": "<p>because syntax is untyped</p>",
        "id": 248726464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357219
    },
    {
        "content": "<p>the syntax class specifications are needed to define the parser, but the rhs of the <code>=&gt;</code> is just a function <code>h t : Syntax |- MacroM Syntax</code></p>",
        "id": 248726479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628357272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Writing.20Tactics/near/248726453\">said</a>:</p>\n<blockquote>\n<p>there is no communication of the \"type\" of the syntax from the first line to the second</p>\n</blockquote>\n<p>Oh right, the <code>macro</code> command was just a macro for <code>syntax</code> with <code>marco_rules</code> right?</p>",
        "id": 248726525,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628357291
    },
    {
        "content": "<p>Hmm, and another one...<br>\nI'm trying to do an <code>unfold</code> now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unfold \"</span> <span class=\"n\">ident</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unfold</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">],</span><span class=\"bp\">+</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>I get an error on the first <code>$</code> saying that <code>expected ')' or '|'</code>.</p>\n<p>This time I used an example by Leo as inspiration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">assocEntry</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">assocEntry</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toAssocList</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>At Lean Together 2021 Sebastian also showed an <a href=\"https://youtu.be/hxQ1vvhYN_U?t=1766\">example</a> using <code>$[...]*</code>, so I was guessing <code>$[...]+</code> might work too.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"hxQ1vvhYN_U\" href=\"https://youtu.be/hxQ1vvhYN_U?t=1766\"><img src=\"https://uploads.zulipusercontent.net/51061c99c0c5303ed7520c4159839fb27d6b4c2b/68747470733a2f2f692e7974696d672e636f6d2f76692f68785131767668594e5f552f64656661756c742e6a7067\"></a></div><p>I feel like I have no clue what I'm doing here, so forgive me if this is maddening to look at <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248727491,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628358760
    },
    {
        "content": "<p>Believe me you know more than me, I'm taking notes!</p>",
        "id": 248729725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628361651
    },
    {
        "content": "<p>There is no <code>$[...]+</code> (yet), you can use <code>$[$l:ident]*</code> instead (or just <code>$l*</code>)</p>",
        "id": 248730565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628362963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Writing.20Tactics/near/248730565\">said</a>:</p>\n<blockquote>\n<p>you can use $[$l:ident]* instead (or just $l*)</p>\n</blockquote>\n<p>Oh! I didn't know the <code>$l*</code>) shorthand existed!  It seems there is always something new to learn about the macro system.  <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 248752599,
        "sender_full_name": "Mac",
        "timestamp": 1628398050
    }
]