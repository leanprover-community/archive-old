[
    {
        "content": "<p>This may not be a Lean 4 issue, but what should I try debugging if I have a term <code>{ val := i, isLt := (_ : i &lt; cap + cap) }.val</code> that isn't reducing?</p>\n<p>Setting pp.all true doesn't show anything weird...</p>",
        "id": 275256359,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647273362
    },
    {
        "content": "<p>It is hard to tell what is going on without seeing the whole example.</p>",
        "id": 275258358,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647274026
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_of_lt_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h'</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le_step</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ArrayBuffer</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">cap</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">backing</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">cap</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h_size</span> <span class=\"o\">:</span> <span class=\"n\">size</span> <span class=\"bp\">≤</span> <span class=\"n\">cap</span>\n  <span class=\"n\">h_full</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">backing</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_lt_le</span> <span class=\"n\">h</span> <span class=\"n\">h_size</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ArrayBuffer</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grow</span> <span class=\"o\">:</span> <span class=\"n\">ArrayBuffer</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ArrayBuffer</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">cap</span><span class=\"o\">,</span> <span class=\"n\">backing</span><span class=\"o\">,</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">h_size</span><span class=\"o\">,</span> <span class=\"n\">h_full</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">⟨</span><span class=\"n\">cap</span> <span class=\"bp\">+</span> <span class=\"n\">cap</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cap</span> <span class=\"k\">then</span> <span class=\"n\">backing</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n    <span class=\"n\">size</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.le_trans</span> <span class=\"n\">h_size</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n       <span class=\"n\">simp</span>\n       <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Definitely doing some funky stuff here. I can work around it by changing the <code>h_full</code> to <code>∀ i, (h:i.val &lt; size) → (backing i).isSome</code>, but I'm nonetheless curious why this doesn't work/how to avoid it in general</p>",
        "id": 275288942,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647287368
    },
    {
        "content": "<p>At the <code>sorry</code>, to progress we need to reduce <code>{ val := i, isLt := _ }.val</code> to <code>i</code>, which I think should just work. Not sure why it doesn't.</p>",
        "id": 275289179,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647287477
    },
    {
        "content": "<p>Pushed a fix for this issue <a href=\"https://github.com/leanprover/lean4/commit/86fc089e07c58d14c5178cd8e40725518b2ae98e\">https://github.com/leanprover/lean4/commit/86fc089e07c58d14c5178cd8e40725518b2ae98e</a></p>",
        "id": 275298707,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647292256
    },
    {
        "content": "<p>Oh hah that makes much more sense! I thought I was going crazy</p>",
        "id": 275298864,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647292339
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 275298866,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647292343
    },
    {
        "content": "<p>Added your example to the test suite too <a href=\"https://github.com/leanprover/lean4/commit/7fda1f47f82e88275576dbcd3f13c5d3bef21384\">https://github.com/leanprover/lean4/commit/7fda1f47f82e88275576dbcd3f13c5d3bef21384</a></p>",
        "id": 275298893,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647292373
    },
    {
        "content": "<p>While you're here, this is working towards reimplementing <code>Array</code> in terms of fixed size arrays (and then implementing unbounded arrays within Lean). Was there a reason for going with UBAs as the built-in?</p>",
        "id": 275299109,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647292475
    },
    {
        "content": "<p>Just for simplicity of the bootstrapping?</p>",
        "id": 275299136,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647292496
    },
    {
        "content": "<p>Yes, it is simple, and we could easily provide an efficient implementation for functions such as <code>Array.push</code>. <code>Array.push</code> is very fast if the array is not shared and there is space left.</p>",
        "id": 275300705,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647293263
    }
]