[
    {
        "content": "<p>I want to prove the equivalence of a formula and its prenex normal form. That should be simple, right? The formula came from a natural language sentence:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Goals</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">e2</span> <span class=\"n\">i8</span> <span class=\"n\">e9</span> <span class=\"n\">e10</span> <span class=\"n\">x11</span> <span class=\"n\">x24</span><span class=\"o\">,</span>\n      <span class=\"n\">named</span> <span class=\"n\">x11</span> <span class=\"s2\">\"Apple Store\"</span> <span class=\"bp\">∧</span>\n        <span class=\"n\">store</span> <span class=\"n\">x11</span> <span class=\"bp\">∧</span>\n          <span class=\"n\">_electronics_n_1</span> <span class=\"n\">x24</span> <span class=\"bp\">∧</span>\n            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x3</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">_people_n_of</span> <span class=\"n\">x3</span> <span class=\"n\">i8</span> <span class=\"bp\">∧</span> <span class=\"n\">_go_v_1</span> <span class=\"n\">e9</span> <span class=\"n\">x3</span> <span class=\"bp\">∧</span> <span class=\"n\">_to_p_dir</span> <span class=\"n\">e10</span> <span class=\"n\">e9</span> <span class=\"n\">x11</span> <span class=\"bp\">→</span> <span class=\"n\">_buy_v_1</span> <span class=\"n\">e2</span> <span class=\"n\">x3</span> <span class=\"n\">x24</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">e2</span> <span class=\"n\">i8</span> <span class=\"n\">e9</span> <span class=\"n\">e10</span> <span class=\"n\">x11</span> <span class=\"n\">x24</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x3</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n        <span class=\"n\">named</span> <span class=\"n\">x11</span> <span class=\"s2\">\"Apple Store\"</span> <span class=\"bp\">∧</span>\n          <span class=\"n\">store</span> <span class=\"n\">x11</span> <span class=\"bp\">∧</span>\n            <span class=\"n\">_electronics_n_1</span> <span class=\"n\">x24</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">_people_n_of</span> <span class=\"n\">x3</span> <span class=\"n\">i8</span> <span class=\"bp\">∧</span> <span class=\"n\">_go_v_1</span> <span class=\"n\">e9</span> <span class=\"n\">x3</span> <span class=\"bp\">∧</span> <span class=\"n\">_to_p_dir</span> <span class=\"n\">e10</span> <span class=\"n\">e9</span> <span class=\"n\">x11</span> <span class=\"bp\">→</span> <span class=\"n\">_buy_v_1</span> <span class=\"n\">e2</span> <span class=\"n\">x3</span> <span class=\"n\">x24</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/hYxjv9EZuN-Rpa9WmrsNpVXx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hYxjv9EZuN-Rpa9WmrsNpVXx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hYxjv9EZuN-Rpa9WmrsNpVXx/image.png\"></a></div><p>At this point of the proof, I have a few questions:</p>\n<ol>\n<li>can I simplify it? <code>repeat constructor</code> didn't give me the same result. Can I deal with the existential more simply? </li>\n<li>Is there a tactic that would help me to substitute <code>?mp.intro.intro.intro.intro.intro.intro.h.h.h.h.w</code> with <code>a</code> in the premisses?</li>\n</ol>\n<p>References are welcome... I remember that <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> has some slides for a logic course using Lean 4. Trying to find the link..</p>",
        "id": 291389259,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659134085
    },
    {
        "content": "<p>I got some good progress! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">a2</span> <span class=\"bp\">↔</span> <span class=\"n\">a21</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">a2</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">a21</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pa</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">pb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pb</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pc</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">pd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pd</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">pe</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pe</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exists</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">exists</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">exists</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">exists</span> <span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"n\">exists</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exists</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Goals</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">mp.intro.intro.intro.intro.intro.intro</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">u</span>\n<span class=\"n\">pf</span> <span class=\"o\">:</span>\n  <span class=\"n\">named</span> <span class=\"n\">e</span> <span class=\"s2\">\"Apple Store\"</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">store</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">_electronics_n_1</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x3</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">_people_n_of</span> <span class=\"n\">x3</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">_go_v_1</span> <span class=\"n\">c</span> <span class=\"n\">x3</span> <span class=\"bp\">∧</span> <span class=\"n\">_to_p_dir</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">_buy_v_1</span> <span class=\"n\">a</span> <span class=\"n\">x3</span> <span class=\"n\">f</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">u</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">named</span> <span class=\"n\">e</span> <span class=\"s2\">\"Apple Store\"</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">store</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">_electronics_n_1</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">_people_n_of</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">_go_v_1</span> <span class=\"n\">c</span> <span class=\"n\">g</span> <span class=\"bp\">∧</span> <span class=\"n\">_to_p_dir</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">_buy_v_1</span> <span class=\"n\">a</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291390278,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659134845
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in text format?</p>",
        "id": 291391182,
        "sender_full_name": "David Renshaw",
        "timestamp": 1659135563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> Once simplification that immediately comes to mind is that instead of doing <code>intro h; cases h with | intro ...</code> a number of times you could use the anonymous constructor and pattern matching like so: <code>intro ⟨a, ⟨b, ⟨c, ...⟩⟩⟩⟩</code></p>",
        "id": 291392070,
        "sender_full_name": "Mac",
        "timestamp": 1659136340
    },
    {
        "content": "<p>In mathlib3, I'd use simp, which would move the forall as far to the right as possible, that is, the things that don't rely on the binder out of if.</p>",
        "id": 291392085,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659136358
    },
    {
        "content": "<p>And after, use simp [and.comm, and.left_comm, and.assoc] as a way to reorder terms under the existential binder</p>",
        "id": 291392136,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659136410
    },
    {
        "content": "<p>If that's not enough, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_congr\">docs#exists_congr</a> several times and reorder after the unwrapping</p>",
        "id": 291392152,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659136437
    },
    {
        "content": "<p>Maybe too much complicated, but I done <a href=\"https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3\">https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3</a></p>",
        "id": 291394214,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659138717
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> in Lean3 with mathlib I would have done that quickly. I am still adapting myself to Lean4.</p>",
        "id": 291394494,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659138988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I didn't understand... can you elaborate on your suggestion on using intro? the existential are in the premisses, so I still need to make intro work in the premises, right? How? One <code>cases h with ...</code>?</p>",
        "id": 291394610,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659139103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> The following are essentially equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">withCases</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pa</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">pb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pb</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pc</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">pd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pd</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">pe</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">pe</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">pf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">withAnonCtor</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">pf</span><span class=\"o\">⟩⟩⟩⟩⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pf</span>\n</code></pre></div>\n<p>One is just much more concise. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 291395455,
        "sender_full_name": "Mac",
        "timestamp": 1659140090
    },
    {
        "content": "<p>You can then use the anonymous constructor again to rebuild the exists like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reorder</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩⟩⟩</span>\n</code></pre></div>",
        "id": 291395834,
        "sender_full_name": "Mac",
        "timestamp": 1659140636
    },
    {
        "content": "<p>If you want, you could even drop the tactics altogether:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reorderNoTactics</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩⟩⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩⟩⟩</span>\n</code></pre></div>",
        "id": 291395912,
        "sender_full_name": "Mac",
        "timestamp": 1659140712
    },
    {
        "content": "<p>Oh, that was great !!! <a href=\"https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3#file-all-people-lean-L56-L73\">https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3#file-all-people-lean-L56-L73</a> Thank you <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 291395967,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659140766
    },
    {
        "content": "<p>the anonymous constructor notation is right associative, so you can also write that as <code>λ ⟨a, b, c, p⟩ =&gt; ⟨c, b, a, p⟩</code></p>",
        "id": 291395974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659140814
    },
    {
        "content": "<p>Even better, <a href=\"https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3#file-all-people-lean-L56-L73\">https://gist.github.com/arademaker/b42a5348697dcb8b5c391f4f82d13cb3#file-all-people-lean-L56-L73</a>, thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 291396131,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659141009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> <br>\nYou can also use the anonymous constructor on the ands and to form the result like so (for <code>mp</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fa</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 291396510,
        "sender_full_name": "Mac",
        "timestamp": 1659141539
    },
    {
        "content": "<p>And since that last part is in the same order, you can also do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span><span class=\"o\">⟩</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span>\n<span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 291396690,
        "sender_full_name": "Mac",
        "timestamp": 1659141768
    },
    {
        "content": "<p>Using a term mode function, we can narrow it down farther to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span><span class=\"o\">⟩</span>\n<span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span> <span class=\"n\">x</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 291396770,
        "sender_full_name": "Mac",
        "timestamp": 1659141851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> So, in summary, here is the simplified theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">a2</span> <span class=\"bp\">↔</span> <span class=\"n\">a21</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a21</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">fa</span> <span class=\"n\">x</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">mpr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">fa</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fa</span> <span class=\"n\">a</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 291397149,
        "sender_full_name": "Mac",
        "timestamp": 1659142403
    },
    {
        "content": "<p>Oh, nice, I will explore that <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>! But the <code>unfold a2, a21</code> didn't work for me.</p>",
        "id": 291397395,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659142733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> Oh yeah, I noticed you were on a very old version of Lean 4 (<code>constant</code> has been renamed <code>opaque</code> for one). That is probably the problem.</p>",
        "id": 291397410,
        "sender_full_name": "Mac",
        "timestamp": 1659142775
    },
    {
        "content": "<p>Oh, now I have to learn how to update the project. It seems that it is something more than edit the file <code>lean-toolchain</code>. Elan shows me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"k\">show</span>\n<span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">02</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">96</span><span class=\"n\">de208a6b1a</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291397661,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659143144
    },
    {
        "content": "<p>Stable is really old (and outside a small window around its release is usually that way), so it is generally recommended to use a recent nightly.</p>",
        "id": 291397746,
        "sender_full_name": "Mac",
        "timestamp": 1659143233
    },
    {
        "content": "<p>For instance, you can edit your <code>lean-toolchain</code> file to <code>leanprover/lean4:nightly-2022-07-25</code> (the 4-5 day old nightly I am using to test)</p>",
        "id": 291397809,
        "sender_full_name": "Mac",
        "timestamp": 1659143306
    },
    {
        "content": "<p>perfect. I need to run elan update inside the project's folder.</p>",
        "id": 291398200,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659143893
    },
    {
        "content": "<p>With the mild additional assumption that <code>u</code> is nonempty, <code>t1</code> reduces to a single <code>simp</code>. I think this is what Yakov was getting at with the mathlib3 suggestion -- you can write these general lemmas in Lean 4 easily enough.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">and_exists</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">mpr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">and_forall</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"n\">c</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">mpr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span> <span class=\"n\">Classical.ofNonempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n <span class=\"kd\">axiom</span> <span class=\"n\">u.nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">u</span>\n <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u.nonempty</span>\n\n <span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">a2</span> <span class=\"bp\">↔</span> <span class=\"n\">a21</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a21</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291398773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659144659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Those simp lemmas look like they should be the other way around. Shouldn't the normal form be taking the proposition that does not use the bound variable out of the formula not putting it into it? Or am I missing something? (I would not be surprised if I am -- my experience proof techniques is not great).</p>",
        "id": 291404904,
        "sender_full_name": "Mac",
        "timestamp": 1659153401
    },
    {
        "content": "<p>My thought was to put everything into prenex normal form if possible. Maybe they're not good simp lemmas in general, but they do seem to do the trick.</p>",
        "id": 291404977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659153484
    }
]