[
    {
        "content": "<p>Uhh.. Stumbled upon this between ideas while representing some data.. Noticed Lean didn't complain. How is this valid?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279635046,
        "sender_full_name": "Sofia",
        "timestamp": 1650515633
    },
    {
        "content": "<p>It looks like an unfortunate interaction with the <code>autoImplicit</code> feature. Try <code>#check Foo.mk (Foo := Nat)</code> :)<br>\nAnd</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279635434,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1650516037
    },
    {
        "content": "<p>Ah ! That explains it. Thanks.</p>",
        "id": 279640423,
        "sender_full_name": "Sofia",
        "timestamp": 1650521508
    },
    {
        "content": "<p>Would be good if the syntax highlighting distinguished the two</p>",
        "id": 279657451,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650534407
    },
    {
        "content": "<p>Or injected a verbosity layer, like some editors do with type hints. Ex. <code>let x := 1</code> -&gt; <code>let x : Nat := 1</code> where the <code>: Nat</code> annotation is grayed out because it isn't really in the code, it was merely inferred and displayed as if it were. Don't know if any editors which do this allow you to make that code, to lock in the type, but that'd be nice too.</p>",
        "id": 279658343,
        "sender_full_name": "Sofia",
        "timestamp": 1650535018
    },
    {
        "content": "<p>In <code>scala</code> on VS code (with `metals) the inferred types are shown and can be added, so the editor clearly supports this.</p>",
        "id": 279662110,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1650537507
    }
]