[
    {
        "content": "<p>How to represent query results in Lean 4? Do we have some representation for tables that support columns with different types?</p>",
        "id": 262482596,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637686673
    },
    {
        "content": "<p>Is this for your project to make bindings for a database engine like MySQL? (I don't have an answer -- I just figured this context would be helpful.)</p>\n<p>I suppose one method is to define an inductive type for the possible column types, but then you have to do dynamic type checking when you want to use one of these values.  For example, having accessors for these values like <code>SqlValue.getInt : SqlValue -&gt; Option Int</code>.</p>",
        "id": 262485341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637687842
    },
    {
        "content": "<p>I guess you could work with a typed version of the usual formalization of relational databases here for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Attribute</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">Attribute</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So you have a type where each of its values represents a specific attribute name and a domain function that can map an attribute name to the type of its values. And now if you have a <code>QueryResult</code> type you could have a function like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">QueryResult</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">QueryResult</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Attribute</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">dom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which one can use like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"n\">QueryResult</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Attribute</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">get</span> <span class=\"n\">res</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>But this is just a typified approach of the set theory formalization for relational databases i learned in uni, I would imagine there are ways to represent this easier and more efficient? I would also imagine that this is at least a partially solved issue in the Haskell world so maybe take a look at the libraries they built around databases.</p>",
        "id": 262485411,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637687879
    },
    {
        "content": "<p>The paper <a href=\"https://www.researchgate.net/publication/259480756_A_Coq_Formalization_of_the_Relational_Data_Model\">A Coq Formalization of the Relational Data Model</a> could be a reasonable starting point - Coq being a theorem prover with DTT (technically CIC), similar to Lean.</p>",
        "id": 262486066,
        "sender_full_name": "František Silváši",
        "timestamp": 1637688146
    },
    {
        "content": "<blockquote>\n<p>Is this for your project to make bindings for a database engine like MySQL?</p>\n</blockquote>\n<p>Yeah, exactly</p>",
        "id": 262486084,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637688158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši</span> <a href=\"#narrow/stream/270676-lean4/topic/abstraction.20for.20tables/near/262486066\">said</a>:</p>\n<blockquote>\n<p>The paper <a href=\"https://www.researchgate.net/publication/259480756_A_Coq_Formalization_of_the_Relational_Data_Model\">A Coq Formalization of the Relational Data Model</a> could be a reasonable starting point - Coq being a theorem prover with DTT (technically CIC), similar to Lean.</p>\n</blockquote>\n<p>Hey they're using something similar to my domain function \\o/, seems like the database theory was useful for something after all :P</p>",
        "id": 262486264,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637688242
    },
    {
        "content": "<p>You might also look at how F# does things. I remember it having some interesting ways to interface with databases, and I think it has a mechanism to be able to generate mappings between its internal representation of a query and what we call a <code>structure</code> in Lean. I don't really understand how \"type providers\" work though. <a href=\"https://fsprojects.github.io/SQLProvider/\">https://fsprojects.github.io/SQLProvider/</a></p>",
        "id": 262486442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637688302
    },
    {
        "content": "<p>Thanks for the ideas everyone!</p>",
        "id": 262486936,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637688497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> </p>\n<p>Adam Chlipala (of Certified Programming with Dependent Types fame) also did a bunch of stuff with types and SQL for ur/web. He might have written a separate paper on it, but the 'SQL' section of <a href=\"http://www.impredicative.com/ur/manual.pdf\">the manual</a> might be of interest.</p>",
        "id": 262497773,
        "sender_full_name": "Chris B",
        "timestamp": 1637693547
    },
    {
        "content": "<p>Nice. I'm gonna start with something very rustic and elaborate it gradually after I become more comfortable with the FFI protocol</p>",
        "id": 262501672,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637695491
    }
]