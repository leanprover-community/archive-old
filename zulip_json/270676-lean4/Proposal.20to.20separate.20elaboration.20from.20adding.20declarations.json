[
    {
        "content": "<p>Would the team be open to a PR that separates <code>mkInductiveDecl</code> (from <code>Lean/Elab/Inductive.lean</code>) into two functions:<br>\nOne that does all type elaboration related work, without modifying the environment, rather, returning some <code>InductiveDecl</code> struct that takes the same argument as <code>Declaration.inductDecl</code> currently does,<br>\nand a second function which calls <code>addDecl</code> and <code>mkAuxConstructions</code> and other environment-modifying stuff. (or even just move these calls to <code>elabInductiveViews</code>).</p>\n<p>My motivation is that I'm working on my own inductive datatype macro, which is based on alternative constructions (qpfs). Still, I want it to be a drop-in replacement with the same syntax and elaboration behavior. I started by copying <code>mkInductiveDecl</code> and removing the side-effecting behaviour, but it calls a lot of private functions which I then had to copy as well, resulting in a maintenance nightmare.</p>",
        "id": 284190603,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1653689531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> could you comment on this? Since it's a relatively minor change I'll go ahead and implement it, but feel free to stop me</p>",
        "id": 286052666,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655203910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> This is a reasonable suggestion. <br>\nWe want to make the first Lean 4 official release this summer, and we are currently trying to focus on bugs and missing features. Reviewing PRs consumes time, and we are trying to focus on PRs that will benefit the whole community (e.g., widget related).  <br>\nWhat about the following compromise? </p>\n<ul>\n<li>Keep your changes to <code>Inductive.lean</code> in your own private branch for now. We are not planning to make any substantial changes to <code>Inductive.lean</code>.  </li>\n<li>After you finish the alternative construction (qpfs), and it is useful to the community, we work to get your changes to <code>Inductive.lean</code> merged into the main repo.</li>\n</ul>",
        "id": 286084820,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655218684
    },
    {
        "content": "<p>Your compromise seems entirely fair, thanks for taking the time to respond.</p>",
        "id": 286086935,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655219453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> This sounds exciting! Would your QPF implementation give us coinductive types?</p>",
        "id": 286131327,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1655240161
    },
    {
        "content": "<p>Yes! That's the eventual goal.</p>",
        "id": 286137189,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655243476
    }
]