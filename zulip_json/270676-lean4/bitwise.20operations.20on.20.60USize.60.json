[
    {
        "content": "<p>Are there any bitwise <code>xor</code> or <code>not</code> operations  on the UInt types? I'm trying to write a fast hash for one of my types, but I can't find any way to do many bitwise operations</p>",
        "id": 227487361,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614107782
    },
    {
        "content": "<p>If you wanted some that don't yet exist in an expedient manner, you could add your own in the same way that is done here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/UInt.lean#L248\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/UInt.lean#L248</a><br>\nThe Float implementation also has some examples of declaring <code>extern</code> functions with C implementations where the definitions are opaque (you probably don't need to reason about the hash implementation, so that may work just fine).</p>",
        "id": 227497156,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1614111707
    },
    {
        "content": "<p>Yeah, I was thinking about doing just that.<br>\nWould a PR for these changes be welcome?</p>",
        "id": 227498071,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614112057
    },
    {
        "content": "<p>Unless there is a need for it to be in the core library, I think we should hold off on PRs for now</p>",
        "id": 227506683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614115815
    },
    {
        "content": "<p>I think <code>extern</code> functions can be added in user code, so there is no need for this ATM</p>",
        "id": 227506735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614115838
    },
    {
        "content": "<p>hmm, how could I compile with a C program that would provide the behavior then? There is an issue with the base implementation for <code>Nat</code> in the core library, so that isn't really possible to link to</p>",
        "id": 227507582,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614116182
    },
    {
        "content": "<p>well I implemented it in my copy of lean as <span class=\"user-mention\" data-user-id=\"278501\">@Andrew Kent</span> suggested until there's a better alternative, I'm submitting a pr so y'all can discuss, but I won't really be upset if it isn't merged <a href=\"https://github.com/leanprover/lean4/pull/321\">https://github.com/leanprover/lean4/pull/321</a></p>",
        "id": 227510607,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614117523
    },
    {
        "content": "<blockquote>\n<p>hmm, how could I compile with a C program that would provide the behavior then? There is an issue with the base implementation for Nat in the core library, so that isn't really possible to link to</p>\n</blockquote>\n<p>I don't see the problem; the lean header defines a type like <code>lean_nat_t</code>, with some functions but not others, and then you can implement your own functions on this type and link to the header and link it in with a standard C compiler (which I think <code>leanmake</code> handles for you)</p>",
        "id": 227520098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614121294
    },
    {
        "content": "<p>FWIW, you can open namespaces in any file, which makes it easy to \"extend\" functionality of things provided in Lean's core (and later if its added its easy to delete). I did this in a small project for some <code>Float</code> ops before they were added.</p>",
        "id": 227520226,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1614121343
    },
    {
        "content": "<p>I'm not saying that this isn't a useful addition, but it seems like something that will go in the (planned) mathlib prelude, since it isn't necessary for core to do its thing</p>",
        "id": 227520286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614121383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I mean that there is a C function called <code>lean_nat_lxor</code> it just had a bug so it wasn't usable</p>",
        "id": 227521801,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614122167
    },
    {
        "content": "<p>oh, if there's a bug in existing lean 4 code then that sounds like a good PR</p>",
        "id": 227523303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614123071
    },
    {
        "content": "<p>(you should make it clearer in the PR that there is a bug fix in there, I missed that on first reading)</p>",
        "id": 227523415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614123142
    },
    {
        "content": "<p>Indeed, but it also isn't currently used anywhere, so that's what this PR is adding</p>",
        "id": 227524321,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1614123703
    },
    {
        "content": "<p>Relatedly, is there a proper way to make external definitions of dependencies available to the interpreter in the IDE?  E.g. if I have a library that defines </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"#1 ^ #2\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>and, in a separate project open in vscode/emacs, I want to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MyLib</span>\n<span class=\"k\">#eval</span> <span class=\"n\">xor</span> <span class=\"mi\">123</span> <span class=\"mi\">456</span>\n</code></pre></div>\n<p>?</p>\n<p>Currently I'm achieving this by building a hacked-together shared library and loading it through LD_PRELOAD when starting lean in-editor, but I feel there must be a less ugly way. I though plugins would achieve this but that didn't seem to work.</p>",
        "id": 227525627,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1614124442
    },
    {
        "content": "<p>mumble mumble nix</p>",
        "id": 227525788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614124534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>",
        "id": 227525794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614124539
    },
    {
        "content": "<p>(ideally without relinking lean on every library change :) ) but nix would work, thanks! the reason I didn't use it for my current project is I wanted to use some third-party deps, and they only had only been set up as leanpkg packages and not nix packages, and I was too lazy to fork/pr</p>",
        "id": 227526388,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1614124854
    },
    {
        "content": "<p>I wonder if it's possible to write a nix rule to use a leanpkg package as a dep</p>",
        "id": 227526475,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1614124903
    },
    {
        "content": "<p>Yes, plugins are supposed to be the way to go here. No, we don't have support for automatically building &amp; loading them in either the basic or the Nix build system right now. Though it certainly sounds easier for one of them...</p>",
        "id": 227560250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614152819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130439\">Zygimantas Straznickas</span> <a href=\"#narrow/stream/270676-lean4/topic/bitwise.20operations.20on.20.60USize.60/near/227526475\">said</a>:</p>\n<blockquote>\n<p>I wonder if it's possible to write a nix rule to use a leanpkg package as a dep</p>\n</blockquote>\n<p>This was one of the open questions from my LT talk :)</p>",
        "id": 227560285,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614152850
    },
    {
        "content": "<p>Is there any documentation or quickstart for this? I haven't the foggiest idea how to use all the compiler-styled features of lean 4</p>",
        "id": 227561653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614153736
    },
    {
        "content": "<p>No, this is still wholly unexplored. There is a single test making sure that <code>--plugin</code> works at all. <a href=\"https://github.com/leanprover/lean4/blob/master/tests/plugin/test_single.sh\">https://github.com/leanprover/lean4/blob/master/tests/plugin/test_single.sh</a></p>",
        "id": 227562103,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614154081
    }
]