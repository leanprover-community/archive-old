[
    {
        "content": "<p>Or even shorter example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"k\">let</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">x.pred</span> <span class=\"c1\">-- \"y\" would work as well as \"z.pred\", but let's use \"x.pred\" because \"x\" is also in scope</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- is it possible to prove this? or that \"z=x\"?</span>\n   <span class=\"c\">/-</span><span class=\"cm\"> without \"have\" we'll get</span>\n<span class=\"cm\">failed to prove termination, possible solutions:</span>\n<span class=\"cm\">  - Use `have`-expressions to prove the remaining goals</span>\n<span class=\"cm\">  - Use `termination_by` to specify a different well-founded relation</span>\n<span class=\"cm\">  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal</span>\n<span class=\"cm\">x y : Nat</span>\n<span class=\"cm\">x_pred : Nat := Nat.pred x</span>\n<span class=\"cm\">‚ä¢ Nat.pred x &lt; Nat.succ y</span>\n<span class=\"cm\">   -/</span>\n   <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">countdown</span> <span class=\"n\">x_pred</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">countdown</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- same as the default but with better error message</span>\n</code></pre></div>\n<p>For my current thing just not referring to outer name of function argument works well enough, maybe this is never an issue and can be resolved by capturing matched name. But still not sure if it would be possible to automatically have a proof \"x=z\" or is it maybe contradicting how lean works</p>",
        "id": 314782034,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670537614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"k\">let</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">x.pred</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 314783169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538073
    },
    {
        "content": "<p>the <code>e :</code> syntax gives you a proof that <code>x</code> is equal to the cases in the match</p>",
        "id": 314783215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538096
    }
]