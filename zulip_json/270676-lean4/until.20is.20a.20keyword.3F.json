[
    {
        "content": "<p>I've just found an interesting quirk in Lean 4.0.0 m4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">unti</span>\n</code></pre></div>\n<p>is totally fine, a boring type equivalent to unit.  But if I complete \"unti\" to \"until\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">until</span>\n</code></pre></div>\n<p>I get an error: \"until\" is underlined (VSCode Lean 4 mode) with the message \"expected identifier\". So I guess \"until\" is a reserved keyword? I can't find any docs on what it might be for; is it just reserved for future use?</p>\n<p>Not a big deal (I just won't use 'until' as a constructor name), but it took me a minute to figure out why Lean wasn't happy with my inductive definition of LTL formulas, and now I'm curious about what the future (or current?) use case might be.</p>",
        "id": 290378636,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1658411876
    },
    {
        "content": "<p>It's an extension of <code>do</code> notation which is part of the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean#L270\"><code>repeat ... until</code> loop</a>.</p>",
        "id": 290379054,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658412061
    },
    {
        "content": "<p>ah, of course! thanks</p>",
        "id": 290379236,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1658412133
    },
    {
        "content": "<p>Heh, I didn't know this existed. In general, you can use keywords as identifiers if you write <code>«until»</code>.</p>",
        "id": 290379298,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1658412177
    },
    {
        "content": "<p>Btw m4 is very outdated; if you have problems with it, you may want to try a recent nightly. The nightlies tend to be reasonably stable as well.</p>",
        "id": 290379548,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1658412296
    }
]