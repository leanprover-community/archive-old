[
    {
        "content": "<p>The following code snippet ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Finmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">lookup</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"n\">Nat</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>... produces the error ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">lookup</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"n\">B</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">_nested.Option_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I previously had an incorrect formalization of <code>Finmap</code>, that did not cause this kind of error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Finmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.univ.image</span> <span class=\"n\">lookup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n</code></pre></div>\n<p>Why is it failing now?</p>",
        "id": 251217960,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630324604
    },
    {
        "content": "<p>I guess this has something to do with how nested inductives are represented; it has to unravel <code>Finmap Nat B</code> into the two arguments, as well as <code>Option B</code>, but then the new <code>Option B</code> like type is not really <code>Option B</code> and so <code>lookup</code> doesn't work on it. I think this is a necessary restriction, since you are defining an inductive-recursive type through the backdoor here - you can't write <code>lookup</code> until the type is constructed, but the type depends on <code>lookup</code> already existing</p>",
        "id": 251219004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630324980
    },
    {
        "content": "<p>I have nothing to contribute to a solution, but here's a smaller example that produces the same error message and doesn't require any imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Something</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lookup</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Something</span> <span class=\"n\">Nat</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 251220145,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630325562
    },
    {
        "content": "<p>The application type mismatch is probably a bug, but even with the other version I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">_nested.Finmap_1.mk'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 251220178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630325589
    },
    {
        "content": "<p>if you use <code>foo : ∀ a b, lookup a ≠ b</code> instead (to get rid of the <code>none</code> that is causing the mismatch error) you get the error I mentioned</p>",
        "id": 251220358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630325687
    },
    {
        "content": "<p>I believe this is the error you are supposed to get</p>",
        "id": 251220438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630325743
    },
    {
        "content": "<p>Also if I change <code>≠</code> to <code>=</code>, I get yet another message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">nested</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span> <span class=\"bp\">'</span><span class=\"n\">Eq'</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatypes</span> <span class=\"kd\">parameters</span> <span class=\"n\">cannot</span> <span class=\"n\">contain</span> <span class=\"kn\">local</span> <span class=\"kd\">variables</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 251220526,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630325782
    },
    {
        "content": "<p>here's the \"unraveled\" mutual inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option_A</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">lookup</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">Option_A.none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Option_A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This isn't okay because you have one constructor referencing another one (we call that a higher inductive type)</p>",
        "id": 251220807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630325962
    }
]