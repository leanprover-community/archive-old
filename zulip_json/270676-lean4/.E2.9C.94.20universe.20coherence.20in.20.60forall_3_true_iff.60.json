[
    {
        "content": "<p>Consider this theorem from mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_3_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">forall_true_iff'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">forall_2_true_iff</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b62580375619170f369adb3010dff4643ad43e4f/src/logic/basic.lean#L1084-L1086\">https://github.com/leanprover-community/mathlib/blob/b62580375619170f369adb3010dff4643ad43e4f/src/logic/basic.lean#L1084-L1086</a></p>\n<p>When I try to translate this to Lean 4, I need to constrain the universes to be equal, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_3_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"n\">forall_true_iff'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forall_2_true_iff</span>\n</code></pre></div>\n<p>because otherwise (if I say <code>Sort _</code> instead of <code>Sort u</code>) I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">forall_2_true_iff</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.13330</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m.13331</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Why is this? Maybe something about the unification algorithm is different in Lean 4? Is there a way to prove the theorem without constraining the universes to be equal?</p>",
        "id": 295241728,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661438310
    },
    {
        "content": "<p>(see <a href=\"https://github.com/dwrensha/mathlib4/commit/fece8a11cec5342abc81591cf08238d44c0a27c5\">https://github.com/dwrensha/mathlib4/commit/fece8a11cec5342abc81591cf08238d44c0a27c5</a> for where this came up)</p>",
        "id": 295243367,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661438779
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 295243658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661438882
    },
    {
        "content": "<p>I think this should stand on its own without mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_true_iff'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_2_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- doesn't work if I replace `u` with `_`;</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_3_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"n\">forall_true_iff'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forall_2_true_iff</span>\n</code></pre></div>",
        "id": 295244231,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661439052
    },
    {
        "content": "<p>I get errors about <code>p</code></p>",
        "id": 295244527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661439149
    },
    {
        "content": "<p>edited. missed a <code>variable</code> line</p>",
        "id": 295246475,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661439178
    },
    {
        "content": "<p>I get it working if I change:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-@[simp] theorem forall_2_true_iff {β : α → Sort _} : (∀ a, β a → True) ↔ True := sorry</span><span class=\"w\"></span>\n<span class=\"gi\">+@[simp] theorem forall_2_true_iff {β : α → Sort u} : (∀ a, β a → True) ↔ True := sorry</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 295246884,
        "sender_full_name": "pcpthm",
        "timestamp": 1661439295
    },
    {
        "content": "<p>weird!</p>",
        "id": 295247047,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661439353
    },
    {
        "content": "<p>Yeah I don't know why Lean 4 would infer a less than fully general universe there, though <code>Sort _</code> is in general asking for trouble a bit</p>",
        "id": 295247295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661439416
    },
    {
        "content": "<p>I think <code>Sort _</code> is not same as <code>Sort u</code>. Later is generalized over an autobound universe variable, but the former the universe can be unified to other universes.</p>",
        "id": 295247499,
        "sender_full_name": "pcpthm",
        "timestamp": 1661439471
    },
    {
        "content": "<p>In Lean 3, can <code>Sort *</code> ever be unified like this?</p>",
        "id": 295248144,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661439633
    },
    {
        "content": "<p>Yes if it appears inside a <code>def</code>/<code>lemma</code>/etc., but not if it appears in <code>variables</code>.</p>",
        "id": 295248290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661439681
    },
    {
        "content": "<p>I think that is different in Lean 4 but I'm not sure.</p>",
        "id": 295248507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661439737
    },
    {
        "content": "<p>Looks like this faithfully matches the types from the mathlib3 version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_true_iff'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_2_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_3_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"n\">forall_true_iff'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forall_2_true_iff</span>\n</code></pre></div>",
        "id": 295251017,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661440141
    },
    {
        "content": "<p>... by avoiding <code>Sort _</code> inside of <code>theorem</code>.</p>",
        "id": 295251103,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661440169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> has marked this topic as resolved.</p>",
        "id": 295251171,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661440197
    },
    {
        "content": "<p>I believe the issue here is that lean 4 infers the universes only from the statement of the theorem, while lean 3 will also allow universe metavariables to be unified inside the body of the definition before generalizing them to universe variables. So lean 4 will infer that the two sorts are different since the statement doesn't require them to be the same, and then this causes an error when reading the proof</p>",
        "id": 295261592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661443448
    },
    {
        "content": "<p>After testing it seems the issue is some unhygienic name issues in universe metavariable name generation and the variable command. cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"k\">in</span> <span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test1</span> <span class=\"c1\">-- test1.{u_1} : {α : Sort u_1} → α → Sort u_1</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"k\">in</span> <span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test2</span> <span class=\"c1\">-- test2.{u_1, u_2} : {α : Sort u_1} → α → Sort u_2</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"k\">in</span> <span class=\"kd\">theorem</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test3</span> <span class=\"c1\">-- test3.{u_1} : {α : Sort u_1} → α → Sort u_1</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"k\">in</span> <span class=\"kd\">theorem</span> <span class=\"n\">test4</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test4</span> <span class=\"c1\">-- test4.{u_2, u_1} : {α : Sort u_1} → α → Sort u_2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test5</span> <span class=\"c1\">-- test5.{u_1, u_2} : {α : Sort u_1} → α → Sort u_2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test6</span> <span class=\"c1\">-- test6.{u_1} : {α : Sort u_1} → α → Sort u_1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test7</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test7</span> <span class=\"c1\">-- test7.{u_1} : {α : Sort u_1} → α → Sort u_1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test8</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test8</span> <span class=\"c1\">-- test8.{u_2, u_1} : {α : Sort u_1} → α → Sort u_2</span>\n</code></pre></div>",
        "id": 295263725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661444107
    },
    {
        "content": "<p>I think the problem is that <a href=\"https://github.com/leanprover/lean4/blob/82e9f09bca2d51dac11257058e6358c70093cbbc/src/Lean/Elab/Term.lean#L588\">https://github.com/leanprover/lean4/blob/82e9f09bca2d51dac11257058e6358c70093cbbc/src/Lean/Elab/Term.lean#L588</a> only respects explicitly bound level names, not auto-bound ones. Probably best to open an issue about this.</p>",
        "id": 295267042,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661445272
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1513\">https://github.com/leanprover/lean4/pull/1513</a></p>",
        "id": 295272163,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661446929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do all of the tests above produce two universe variables now in <a href=\"https://github.com/leanprover/lean4/pull/1513\">lean4#1513</a>?</p>",
        "id": 295284009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661451017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ah, it works for everything but the first one <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 295294723,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661454950
    }
]