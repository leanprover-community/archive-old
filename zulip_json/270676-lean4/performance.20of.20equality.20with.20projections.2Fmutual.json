[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Unfortunately, while the fix above kept me going for a while, I feel that I am again blocked by this issue. I have medium-complexity proofs where every step takes 5-10 seconds, and on the larger half of my theorems the memory usage prevents completing the definition, requiring workarounds with lemmas.</p>\n<p>I'd like to better understand what's happening. The main components seem to be a projection and mutually-recursive types. Could you maybe explain what part of the equality check is expensive in this situation, to see if can avoid it?</p>\n<p>Mutual definitions are clearly a recurring theme in my inquiries. You've mentioned before that the current well-founded encoding will eventually be replaced by a recursor-based one, which I understand is neither coming just yet nor something I can tackle on my own. Would using the recursors for such definitions bypass the performance issue? If so, I could try to implement it for my specific structure then hide it behind some elaboration magic.</p>\n<p>For the sake of a complete \"bug report\", here is a slight variation of the MWE from above, where the projection is created by a typeclass method call rather than a pair; this example still fails as of <code>leanprover/lean4:nightly-2022-07-13</code>, using more time and memory as the strings get longer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Assign</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">Assign</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Block</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span><span class=\"o\">:</span> <span class=\"n\">Block</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">runOp</span><span class=\"o\">:</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">runBlock</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runAssign</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runOp</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runBlock</span><span class=\"o\">:</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runAssign</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Run</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Run</span> <span class=\"n\">Assign</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">runAssign</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"c1\">-- (warning: high memory usage)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">equivalent</span><span class=\"o\">:</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Run.run</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 289524268,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1657748132
    },
    {
        "content": "<p>I am working on slides today and traveling tomorrow <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI think I will have time to take a look during the weekend.</p>",
        "id": 289530154,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657751927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I hope the workshop is going well. In the meantime, I tried but mostly failed to understand the performance issue. Nonetheless, I was able to confirm that a fairy simple recursor-based encoding of the mutual type eliminates the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ProgramType</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span> <span class=\"n\">Op</span> <span class=\"bp\">|</span> <span class=\"n\">Assign</span> <span class=\"bp\">|</span> <span class=\"n\">Block</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Op\"</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">Program</span> <span class=\"n\">ProgramType.Op</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Assign\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Program</span> <span class=\"n\">ProgramType.Assign</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Block\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Program</span> <span class=\"n\">ProgramType.Block</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Program</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">ProgramType</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mkOp</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mkAssign</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">Assign</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mkBlock</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"bp\">→</span> <span class=\"n\">Block</span>\n  <span class=\"bp\">|</span> <span class=\"n\">emptyBlock</span><span class=\"o\">:</span> <span class=\"n\">Block</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runBase</span><span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mkOp</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">runBase</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mkAssign</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runBase</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mkBlock</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runBase</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">emptyBlock</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Run</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Run</span> <span class=\"n\">Assign</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">runBase</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Assign</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mkAssign</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mkOp</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"bp\">.</span><span class=\"n\">emptyBlock</span>\n<span class=\"c1\">-- Now runs fine</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">equivalent</span><span class=\"o\">:</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Run.run</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm not sure that would generalize, but it feels like a good starting point.</p>",
        "id": 290222849,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658316944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> I didn't have time to look into this issue yet. I will do it as soon as I get back to Redmond.</p>",
        "id": 290223024,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658317056
    },
    {
        "content": "<p>Thank you very much. I will just log my findings here in case it helps finding the cause of the problem.</p>\n<p>I generalized the non-mutual inductive from above and observed the problem again. I reduced again to the following truly MWE which uses a single nested inductive and no mutuals. I'm not sure if it makes a ton of difference for the compiler, but at least it rules out most hacks/workarounds on my end since I can get rid of <code>mutual</code> but definitely not of nesting.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runT</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runT</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Run</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Run</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">runT</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">T.mk</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\"PrettyLong\"</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"c1\">-- (warning: high memory usage)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">equivalent</span><span class=\"o\">:</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Run.run</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Run.run</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290305178,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658354394
    },
    {
        "content": "<p>Pushed a fix for this issue: <a href=\"https://github.com/leanprover/lean4/commit/2196a3518e131455cfeda715df7737778ffecea1\">https://github.com/leanprover/lean4/commit/2196a3518e131455cfeda715df7737778ffecea1</a></p>",
        "id": 290694274,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658688558
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>. I did quite a lot on testing in our project and I haven't seen the slightest problem with this fix. With some improvements in our choice of tactics, the proofs are now about 10x faster with no needs for performance workarounds. That's a fix and a half <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 290815261,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658781572
    }
]