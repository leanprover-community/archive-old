[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> I am assuming that because <code>slowMin 2000</code> is a closed term, Lean decided to float it into a computation that is evaluated before <code>main</code> starts. Does putting <code>set_option compiler.extract_closed false</code> before <code>main</code> help?</p>",
        "id": 265658605,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640075067
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> - setting the option worked perfectly to prevent computation in advance.</p>",
        "id": 265658839,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640075257
    },
    {
        "content": "<p>The Tasks are still running serially though. Do you have any idea how I can make them run concurrently?</p>",
        "id": 265658916,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640075301
    },
    {
        "content": "<p>It looks like the same kind of floating is happening at the function level. So Lean will emit code which computes <code>slowMin 2000</code> and then starts a task which just returns the precomputed value.</p>",
        "id": 265660583,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640076478
    },
    {
        "content": "<p>Wait no, sorry, that was the case with a semantic change to the code. With your version it does emit closures as expected.</p>",
        "id": 265660838,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640076674
    },
    {
        "content": "<p>The emitted C:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_closure</span><span class=\"p\">((</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">l_main___lambda__1___boxed</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l_Task_Priority_default</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_task_spawn</span><span class=\"p\">(</span><span class=\"n\">x_6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_closure</span><span class=\"p\">((</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">l_main___lambda__2___boxed</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_task_spawn</span><span class=\"p\">(</span><span class=\"n\">x_9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_closure</span><span class=\"p\">((</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">l_main___lambda__3___boxed</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_task_spawn</span><span class=\"p\">(</span><span class=\"n\">x_11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_task_get_own</span><span class=\"p\">(</span><span class=\"n\">x_8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_task_get_own</span><span class=\"p\">(</span><span class=\"n\">x_10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_add</span><span class=\"p\">(</span><span class=\"n\">x_13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_14</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_main___lambda__1</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">1u</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">30u</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l_slowFib</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so it should be running in parallel. It might be that the thread pool just schedules them sequentially?</p>",
        "id": 265661192,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640076927
    },
    {
        "content": "<p>Indeed, if I run the tests in <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/lean/run/task_test.lean\">https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/lean/run/task_test.lean</a><br>\nin the main method using the code <code>(tst 11).map &lt;| fun _ =&gt; ()</code>, I do not get the flipping of order that one is supposed to see, and sees in the interpreter.</p>",
        "id": 265661218,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640076945
    },
    {
        "content": "<p>This variant will spawn a separate thread for each and definitely run in parallel (<code>slowFib</code> is my own slow function):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"o\">(</span><span class=\"n\">prio</span> <span class=\"o\">:=</span> <span class=\"n\">Task.Priority.dedicated</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">1</span> <span class=\"mi\">30</span>\n    <span class=\"k\">let</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"o\">(</span><span class=\"n\">prio</span> <span class=\"o\">:=</span> <span class=\"n\">Task.Priority.dedicated</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">2</span> <span class=\"mi\">30</span>\n    <span class=\"k\">let</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"o\">(</span><span class=\"n\">prio</span> <span class=\"o\">:=</span> <span class=\"n\">Task.Priority.dedicated</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span>\n</code></pre></div>",
        "id": 265661234,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640076956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Order.20of.20running.2C.20Tasks.20in.20Main/near/265661218\">said</a>:</p>\n<blockquote>\n<p>Indeed, if I run the tests in <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/lean/run/task_test.lean\">https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/lean/run/task_test.lean</a><br>\nin the main method using the code <code>(tst 11).map &lt;| fun _ =&gt; ()</code>, I do not get the flipping of order that one is supposed to see, and sees in the interpreter.</p>\n</blockquote>\n<p>I don't see any reordering in the interpreter on that test. <code>f1</code> prints first even though if ran in parallel, <code>f2</code> should go first given its smaller delay.</p>",
        "id": 265661566,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640077202
    },
    {
        "content": "<p>Yes, that was perfect, thanks. I do see three threads fired up and the time is the max. I had tried priority earlier. It looks like the combination of priority and <code>set_option</code> did it.</p>",
        "id": 265661669,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640077233
    },
    {
        "content": "<p>For the test task, if I rerun by using \"refresh file dependencies\" I get the flipped order.</p>",
        "id": 265662020,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640077494
    },
    {
        "content": "<p>But most likely the problem in the <code>Main</code> is the same one you solved for the main case.</p>",
        "id": 265662043,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1640077517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 265662057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640077530
    },
    {
        "content": "<blockquote>\n<p>For the test task, if I rerun by using \"refresh file dependencies\" I get the flipped order.</p>\n</blockquote>\n<p>That must have something to do with the fact that server itself is using <code>Task</code>s which changes the runtime environment compared to the command line.</p>",
        "id": 265662543,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640077819
    },
    {
        "content": "<p>It is a bit surprising that even with more spawns, nothing is running in parallel. /cc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 265662962,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640078114
    },
    {
        "content": "<p>Mmh, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 265664161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640078960
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">slowFib</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbgTrace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"fib {id}\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"n\">id</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">slowFib</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"running..\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">1</span> <span class=\"mi\">8</span>\n  <span class=\"k\">let</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">2</span> <span class=\"mi\">8</span>\n  <span class=\"k\">let</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">3</span> <span class=\"mi\">8</span>\n  <span class=\"k\">let</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">slowFib</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"done: {t1.get + t2.get + t3.get + t4.get}\"</span>\n</code></pre></div>",
        "id": 265665122,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1640079559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  Could one problem here be the use of <code>Task.spawn</code> rather than <code>IO.asTask</code>/<code>BaseIO.asTask</code>. As <code>Task.spawn</code> is a pure function, it can be reordered (and optimized away). Thus, it may be possible that the order the compiler is using to evaluate the string is 'spawn t1 &gt; wait to get value of t1 &gt; spawn t2 &gt; wait to get get value of t2 &gt; spawn t3 &gt; wait to get get value of t3 &gt; spawn t4 &gt; wait to get  get value of t4'  (which results in nothing being done in parallel). This order could occur because Lean waits to spawn the task before it is sure the result will actually be used. Thus, Lean waits to spawn the task until it right before its value is retrieved via <code>get</code>.</p>",
        "id": 265668948,
        "sender_full_name": "Mac",
        "timestamp": 1640081954
    },
    {
        "content": "<p>I don't think so, see the C code Wojciech posted above</p>",
        "id": 265669614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640082385
    },
    {
        "content": "<p>Ugh, it is the accounting for idle worker threads in the task manager</p>",
        "id": 265669825,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640082562
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/899\">https://github.com/leanprover/lean4/pull/899</a></p>",
        "id": 265670618,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640083173
    }
]