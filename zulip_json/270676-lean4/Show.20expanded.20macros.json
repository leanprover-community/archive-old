[
    {
        "content": "<p>Is there a way of viewing the code generated by a macro?<br>\nFor example, for something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">thing</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">One</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n  <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">Two</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">f</span>\n<span class=\"o\">)</span>\n\n<span class=\"n\">my_cmd</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>... is there a way of having Lean show me?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test.One</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Test.Two</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Or does this question not make sense, as Lean can't know which macros I want it to expand and which should remain untouched?</p>",
        "id": 304288560,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665914476
    },
    {
        "content": "<p>You can recover the Syntax object itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">thing</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">One</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">Two</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">f</span>\n  <span class=\"o\">)</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">stx</span>\n  <span class=\"n\">return</span> <span class=\"n\">stx</span>\n\n<span class=\"n\">my_cmd</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>but doing it in a readable way would require you to use the pretty printer which afaik cannot work because it operates in the meta stack (CoreM, MetaM) while MacroM is only a weak:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MacroM</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Macro.Context</span> <span class=\"o\">(</span><span class=\"n\">EStateM</span> <span class=\"n\">Macro.Exception</span> <span class=\"n\">Macro.State</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304296377,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665919378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I don't understand the last part about the pretty printer. Are you saying that there is way to pretty print any given <code>Syntax</code> object, but it requires using <code>CoreM</code>/<code>MetaM</code>? If so, let's say I have a <code>Syntax</code> object, then how would I use <code>CoreM</code>/<code>MetaM</code> to pretty print it?</p>",
        "id": 304303816,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665923694
    },
    {
        "content": "<p>In your case for example with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.ppCommand#doc\">docs4#Lean.PrettyPrinter.ppCommand</a>, the pretty printer is how all of the info view works, otherwise we'd only see <code>Expr</code>s</p>\n<p>Also i dug a little more you can get a sort of pretty print (more of a toString) this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_cmd\"</span> <span class=\"n\">thing</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">One</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thing.getId</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">Two</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">f</span>\n  <span class=\"o\">)</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">Syntax.prettyPrint</span> <span class=\"n\">stx</span>\n  <span class=\"n\">return</span> <span class=\"n\">stx</span>\n\n<span class=\"n\">my_cmd</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 304304073,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665923840
    },
    {
        "content": "<p><code>set_option trace.Elab.command true</code>; see <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing\">https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing</a></p>",
        "id": 304311283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665928132
    }
]