[
    {
        "content": "<p>In case you are curious, this is my (still moving) goal for the hackathon:<br>\n“interactively editable definitions” that you can use in lean to have a UI to define a value of a given type.</p>\n<p>The common infrastructure could be a type class for type <code>t</code> consisting of </p>\n<ul>\n<li>a function <code>String → t</code> (for some possibly quite opaque representation of <code>t</code>, possibly with extra information used in the UI) and</li>\n<li>a react component with state of type <code>String</code>.</li>\n</ul>\n<p>Then you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">answer</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">=</span> <span class=\"kd\">by</span> <span class=\"n\">interactive</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>and as long as the cursor is over the tactic, you get a suitable widget for the type (here <code>graph</code>) in the info view where you can define and manipulate the value (for <code>graph</code> it could be a graph editor) .<br>\nYou changes are then automatically persisted in the source in the string parameter; you do _not_ replace that tactic with the value in the end! This means that you, or your collaborators, can edit this any time, and there can be extra information stored (e.g. the actual positions of the graph nodes, even if the <code>graph</code> type itself only stores the edges).<br>\nOf course the tactic returns (elaborates to? what’s the right term) a term of type <code>graph</code> here.</p>\n<p>The idea is that the string should be opaque to the user. It might be Base-encoded just to drive down that point :-). At least in this iteration of this idea… maybe there could also be a variant where after <code>interactive</code> you can have the normal lean source definition of the value, and can edit either the text of the graphical version.</p>\n<p>With this setup I hope that many such interactive editors for various types can be spun up quite quickly.</p>",
        "id": 310636184,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1668699463
    },
    {
        "content": "<p>Finally an interaction idea for which we do not need to worry about code formatting <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 310647342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668702591
    }
]