[
    {
        "content": "<p>These two examples work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">h2</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This one doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This one does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm trying to figure out what the rules are for indenting after <code>by</code>.  It appears that the rules after <code>have</code> are different from the rules after <code>calc</code>.  Can someone explain what the rules are?</p>",
        "id": 309480072,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668360441
    },
    {
        "content": "<p>This is probably because of <a href=\"https://github.com/leanprover/lean4/pull/1811\">https://github.com/leanprover/lean4/pull/1811</a> (/cc <span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span>). It looks like we should special-case <code>by</code> in the <code>calcStep</code> parser.</p>",
        "id": 309482386,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668361779
    },
    {
        "content": "<p>Yeah <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pointed something similar to me earlier</p>",
        "id": 309502575,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668375637
    },
    {
        "content": "<p>So what's happening is that <code>calc</code> does a <code>withPosition</code> on the RHS of the <code>:=</code>:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/2386c401d231cb15292ba358cf58ab33adb5dfca/src/Init/NotationExtra.lean#L91\">https://github.com/leanprover/lean4/blob/2386c401d231cb15292ba358cf58ab33adb5dfca/src/Init/NotationExtra.lean#L91</a></li>\n</ul>",
        "id": 309505929,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668378289
    },
    {
        "content": "<p>I'm not completely sure why it does that, but then <code>by</code>'s tactics need to be <code>colGt</code> that position because of my PR</p>",
        "id": 309506030,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668378364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (correct me if I'm wrong) and I feel like this <code>withPosition</code> on the RHS should not be there, we're trying to understand whether it is important or not</p>",
        "id": 309506086,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668378449
    },
    {
        "content": "<p>Also, sorry if my PR caused some confusion <span aria-label=\"crying cat\" class=\"emoji emoji-1f63f\" role=\"img\" title=\"crying cat\">:crying_cat:</span></p>",
        "id": 309506361,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668378635
    },
    {
        "content": "<p>it looks like that <code>withPosition</code> has been there <a href=\"https://github.com/leanprover/lean4/commit/f9fd0b3de4626a668d4ae6b45609dd2b94db82b5\">from the beginning</a>, cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 309506378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668378655
    },
    {
        "content": "<p>If you really want to use line indentation <span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span>, one way to accomplish that would be a combinator <code>withPositionAtLineStart(p)</code> which sets the position to the first non-whitespace character in the line</p>",
        "id": 309506503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668378750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and myself's current plan is to just remove the <code>withPosition</code> in <a href=\"https://github.com/leanprover/lean4/blob/2386c401d231cb15292ba358cf58ab33adb5dfca/src/Init/NotationExtra.lean#L91\"><code>calcStep</code></a>, which solves the issue but makes custom-aligned <code>calc</code> lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>illegal, it would need to be rewritten as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>\n<p>if you're feeling fancy, which I feel is a fair tradeoff</p>",
        "id": 309511676,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668383077
    },
    {
        "content": "<p>Sure, the last example looks like our conventional formatting for patterns</p>",
        "id": 309551900,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668415358
    },
    {
        "content": "<p>I tend to see the first one a lot more, where the LHS is right-aligned, but maybe that's a coincidence</p>",
        "id": 309556826,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668417403
    },
    {
        "content": "<p>I can't say I see <code>calc</code> at all in the code I'm usually looking at, so I don't know what's more common</p>",
        "id": 309558319,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668418018
    },
    {
        "content": "<p>If the left side of the first equation (<code>t1</code> in examples above) is long, then the third possibility will look a little funny, with a large gap between <code>_</code> and <code>=</code>.  But I can get used to it.<br>\nI suspect the first and second are more common than the third, but I don't really know.  Here are two examples from Chapter 7 of \"Theorem Proving in Lean 4\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n                  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n                  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span>  <span class=\"n\">m</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"k\">calc</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n           <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n           <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>             <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 309617452,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668436656
    },
    {
        "content": "<p>How would you format the first example if the tactic step took multiple lines?</p>",
        "id": 309618046,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668436825
    },
    {
        "content": "<p>Do you mean would I indent further than the <code>_</code>, or even the <code>=</code>?  Yes, my instinct would be to make the tactic proof not interfere, visually, with the sequence of equations, so I would probably want to indent past the <code>=</code>.  Which means I would probably use the style of the second example, with the lines after the first not indented so far.<br>\nIs something like the following allowed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n        <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span>  <span class=\"n\">m</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Sometimes, when writing calculational proofs in LaTeX, I have used that style if the formulas were long.</p>",
        "id": 309619992,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668437361
    },
    {
        "content": "<p>The fix where we remove the <code>withPosition</code> in <code>calcStep</code> accounts for both styles above</p>",
        "id": 310578370,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668679649
    },
    {
        "content": "<p>I prepared a PR and added a few tests inspired by these examples:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/compare/master...AdrienChampion:lean4:calc_indent_fix#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578\">https://github.com/leanprover/lean4/compare/master...AdrienChampion:lean4:calc_indent_fix#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578</a></li>\n</ul>",
        "id": 310578418,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668679670
    },
    {
        "content": "<p>In particular these two:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/compare/master...AdrienChampion:lean4:calc_indent_fix#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578R25-R38\">https://github.com/leanprover/lean4/compare/master...AdrienChampion:lean4:calc_indent_fix#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578R25-R38</a></li>\n</ul>",
        "id": 310578482,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668679688
    },
    {
        "content": "<p>FYI: <a href=\"https://github.com/leanprover/lean4/pull/1844\">https://github.com/leanprover/lean4/pull/1844</a></p>",
        "id": 310621292,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668695681
    },
    {
        "content": "<p>It would be good to have more opinions on whether the new style is acceptable (see PR tests). Just to reiterate, special-casing <code>by</code> in <code>calc</code> would allow us to keep the old style (as long as you indent your tactics more than the next calc line).</p>",
        "id": 310621930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668695898
    },
    {
        "content": "<p>Will the example from my original message work with this fix?  Perhaps something like this could be added to the test file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div>",
        "id": 310641948,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668701111
    },
    {
        "content": "<p>yes, that will work</p>",
        "id": 310673276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668710167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/indenting.20after.20.22by.22/near/310641948\">said</a>:</p>\n<blockquote>\n<p>Will the example from my original message work with this fix?  Perhaps something like this could be added to the test file:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pf12</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pf23</span>\n    <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">t4</span> <span class=\"o\">:=</span> <span class=\"n\">pf34</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Added your example as a test thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/pull/1844/files#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578R47-R52\">https://github.com/leanprover/lean4/pull/1844/files#diff-033f2685e2b9ff73636791b77ef24e24530d42bb8bca39f9d3afc9036a073578R47-R52</a></li>\n</ul>",
        "id": 310765364,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1668758406
    }
]