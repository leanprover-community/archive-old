[
    {
        "content": "<p>Why isn't my induction deconstructing <code>f.data</code> in <code>hh</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPos</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">allPos</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">allPos</span> <span class=\"o\">:</span> <span class=\"n\">allPos</span> <span class=\"n\">data</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Bar</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">allPos</span> <span class=\"o\">(</span><span class=\"n\">f.data.concat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"n\">f.allPos</span>\n  <span class=\"n\">induction</span> <span class=\"n\">f.data</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">allPos</span><span class=\"o\">]</span> <span class=\"n\">exact</span> <span class=\"n\">hl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- hh : allPos f.data     (why?)</span>\n      <span class=\"c1\">-- hh : allPos (h :: t)   (i wanted this instead)</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 267677461,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641957065
    },
    {
        "content": "<p>Inside matches (I am guessing the same for induction), the info that the pattern matches the argument is lost, but can be captured as an equality using the syntax <code>match c:x with ...</code>.</p>",
        "id": 267687193,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1641969436
    },
    {
        "content": "<p>Sorry, the syntax fails for induction.</p>",
        "id": 267687346,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1641969644
    },
    {
        "content": "<p>Maybe try <code>generalize hd : f.data = fd</code> first.</p>",
        "id": 267689719,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641972385
    },
    {
        "content": "<p>I think an explicit pattern matching of the <code>Foo</code> structure did the trick for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">allPos</span> <span class=\"o\">(</span><span class=\"n\">f.data.concat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"n\">data</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">allPos</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">allPos</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hh.1</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">hh.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 267692758,
        "sender_full_name": "Anand Rao",
        "timestamp": 1641975296
    },
    {
        "content": "<p>The code you provided works the way you want it to (showing <code>h :: t</code>); I'm on nightly 1-06. What version are you using?</p>",
        "id": 267719991,
        "sender_full_name": "Chris B",
        "timestamp": 1641992340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/induction.20deconstruction.20on.20hypotheses/near/267719991\">said</a>:</p>\n<blockquote>\n<p>The code you provided works the way you want it to (showing <code>h :: t</code>); I'm on nightly 1-06. What version are you using?</p>\n</blockquote>\n<p>I'm using <code>leanprover/lean4:nightly-2022-01-10</code></p>",
        "id": 267723549,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641994129
    },
    {
        "content": "<p>I switched to <code>...-01-06</code> and it still shows <code>hh : allPos f.data</code></p>",
        "id": 267724126,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641994416
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0ITya7CigukE1we_5ETnxReC/screenshot.png\">screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0ITya7CigukE1we_5ETnxReC/screenshot.png\" title=\"screenshot.png\"><img src=\"/user_uploads/3121/0ITya7CigukE1we_5ETnxReC/screenshot.png\"></a></div>",
        "id": 267733847,
        "sender_full_name": "Chris B",
        "timestamp": 1641998731
    },
    {
        "content": "<p>Just to make sure we're not talking about different things, this is what I'm seeing.</p>",
        "id": 267733882,
        "sender_full_name": "Chris B",
        "timestamp": 1641998749
    },
    {
        "content": "<p>Yeah, it's deconstructed in the goal, but if you look at <code>hh</code> you'll notice that it's not:</p>\n<p><a href=\"/user_uploads/3121/Xv7cICIpka67-ZuNTGIsrOhk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xv7cICIpka67-ZuNTGIsrOhk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xv7cICIpka67-ZuNTGIsrOhk/image.png\"></a></div>",
        "id": 267734017,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641998806
    }
]