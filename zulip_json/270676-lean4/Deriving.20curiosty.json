[
    {
        "content": "<p>Why is it possible to derive <code>BEq</code> and <code>Repr</code> for this type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n  <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">t</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>But not possible for this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  BEq t✝</span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  Repr t✝</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 245109691,
        "sender_full_name": "Mac",
        "timestamp": 1625612932
    },
    {
        "content": "<p>Is it to do with the fact that <code>Array</code> prevents <code>t : Prop</code> (and <code>BEq</code> expects <code>t : Type _</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 245109893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625613120
    }
]