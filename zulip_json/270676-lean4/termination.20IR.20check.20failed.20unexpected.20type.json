[
    {
        "content": "<p>Here is a mwe where it fails to show termination. Feels a lot like a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Family</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all_but_last</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Family</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Family</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inhabited.mk</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.default</span> <span class=\"o\">⟨</span><span class=\"n\">k.val</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">k.isLt</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Family</span> <span class=\"kt\">Prop</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">all_but_last</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">th</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Family</span> <span class=\"kt\">Prop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">⟨⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">th</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">all_but_last</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">th</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">th'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">type</span> <span class=\"sc\">'◾'</span>\n</code></pre></div>\n<p>Surprisingly the termination check is repaired if I do any of the following:</p>\n<ul>\n<li>Remove the useless Inhabited wrapper in Family's def, that is make Family a synonym of <code>Fin n → α</code></li>\n<li>Replace <code>α</code> with <code>Prop</code> in <code>all_but_last</code> to specialize a little bit.</li>\n<li>Remove <code>Decidable</code> and <code>isTrue</code> in <code>th</code></li>\n<li>Make <code>th</code> a <code>theorem</code> instead of a <code>def</code></li>\n</ul>\n<p>I am using Lean (version 4.0.0-nightly-2022-02-13, commit 340c331da908, Release)</p>\n<p>Thanks for taking a look!</p>",
        "id": 272248973,
        "sender_full_name": "Michael Jam",
        "timestamp": 1645099237
    },
    {
        "content": "<p>Pushed a fix for this.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/dedb6ee01bfca70481f615f79ff06d8bcf187de0\">https://github.com/leanprover/lean4/commit/dedb6ee01bfca70481f615f79ff06d8bcf187de0</a><br>\nThe error message is a bit misleading. It was a bug in the code generator.</p>",
        "id": 272305706,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645123893
    }
]