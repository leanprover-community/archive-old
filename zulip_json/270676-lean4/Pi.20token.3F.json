[
    {
        "content": "<p>Hi there, I might have a stupid question but why the Pi syntax does not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monotonicity.pi</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It's failing with <code>unexpected token</code> at the first Pi</p>\n<p>(I'm trying my hand at porting the coinductives predicates)</p>\n<p>Grepping Lean 4 source code seems to say that <code>Pi</code> behaves like a binder, right?</p>",
        "id": 241658538,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622931095
    },
    {
        "content": "<p>Lean 4 uniformly uses the forall syntax instead of pi for types and forall for propositions</p>",
        "id": 241658728,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622931442
    },
    {
        "content": "<p>That is not quite correct. In <code>Type</code>, we usually use the Agda-like <code>(a : A) -&gt; B a</code>, which is also closer to the <code>(a : A) : B a</code> syntax in declaration headers.</p>",
        "id": 241678247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622964478
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#dependent-function-types\">https://leanprover.github.io/lean4/doc/lean3changes.html#dependent-function-types</a> This may be informative for you.</p>",
        "id": 241679681,
        "sender_full_name": "Max",
        "timestamp": 1622966947
    },
    {
        "content": "<p>(And <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#lambda-expressions\">https://leanprover.github.io/lean4/doc/lean3changes.html#lambda-expressions</a> to a lesser degree as well I guess)</p>",
        "id": 241679691,
        "sender_full_name": "Max",
        "timestamp": 1622966996
    }
]