[
    {
        "content": "<p>There seems to be difference in traces in goal view and while compiling.</p>\n<p>If an instance is not found, in the goal view I get trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">differential_of_linear</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsLin</span> <span class=\"bp\">?</span><span class=\"n\">f</span>\n</code></pre></div>\n<p>On the other hand, during compilation I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">differential_of_linear</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsLin</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"bp\">•</span> <span class=\"n\">swap</span> <span class=\"n\">comp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">•</span> <span class=\"n\">NDVector.getOp</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>i.e. it tells me for which <code>?f</code> it failed to find an instance. That is vastly more useful and I would like to have that in the goal view too.</p>",
        "id": 257706423,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634308035
    },
    {
        "content": "<p>Which editor are you in?  Can you please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 257706977,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634308236
    },
    {
        "content": "<p>I'm using Emacs and I will try to create mwe. Now, I realize that my lean-mode might not by in sync with lean version.</p>",
        "id": 257708494,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634308837
    },
    {
        "content": "<p>Ah, so no widgets yet..  This would have been my first guess.</p>",
        "id": 257708579,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634308877
    },
    {
        "content": "<p>Here is mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsIdentity</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n   <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">identity_reduce</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsIdentity</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsIdentity.proof</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simp_succ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsIdentity</span> <span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.discharge</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">simp_fail</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n</code></pre></div>\n<p><code>*Lean Goal*</code> in emacs shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"n\">above</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span>\n<span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.210</span>\n<span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">54</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">identity_reduce</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsIdentity</span> <span class=\"bp\">?</span><span class=\"n\">f</span>\n</code></pre></div>\n<p>From command line <code>lean simp_trace.lean</code> produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_trace.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.210</span>\n<span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">identity_reduce</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsIdentity</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 257716614,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634311758
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257716855,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634311840
    },
    {
        "content": "<p>So it is <code>IsIdentity ?f</code> vs <code>IsIdentity foo</code>, the later way more useful.</p>",
        "id": 257716992,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634311899
    },
    {
        "content": "<p>And my lean and lean4-mode should be in sync now.</p>",
        "id": 257717023,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634311911
    },
    {
        "content": "<p>I get the same output with widgets.  My guess is that there is just an <code>instantiateMVars</code> missing somewhere in the interactive trace formatting code.  <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 257717119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634311933
    },
    {
        "content": "<p>Should be fixed in <a href=\"https://github.com/leanprover/lean4/issues/730\">leanprover/lean4#730</a>.</p>",
        "id": 257879171,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1634436532
    }
]