[
    {
        "content": "<p>When Lean4 gives names to stuff on its own it likes to add these <code>\\dagger</code>s (e.g. <code>h✝</code>) to the names for hygiene reasons, as has been mentioned in a couple of threads. I cannot figure out how to use these names though: if I try to use the name with the <code>\\dagger</code> it will tell me that <code>expected token</code>. Or are we not supposed to be able to use them?</p>",
        "id": 272837808,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1645550961
    },
    {
        "content": "<p>Yeah I think that's the idea! They're \"dead\" variables somehow. If you want to use them, you have to name them yourself.</p>",
        "id": 272837930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645551008
    },
    {
        "content": "<p>Naming them ourselves might be tricky depending on the syntax you're using. <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> you might want to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if that's the case</p>",
        "id": 272838440,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645551212
    },
    {
        "content": "<p>Well, I guess I should name them myself then. It's probably good practice anyway <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  Thanks!</p>",
        "id": 272838550,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1645551245
    },
    {
        "content": "<p>In my case the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is not so complicated at all, I had a <code>H : P ∨ Q</code> and wanted to do <code>cases H</code> and didn't know how to name them in Lean4, what would have been a <code>with</code> in Lean3. <span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> helped me out there that I have to do an explicit: <code>case inl H1 =&gt;</code> and so forth</p>",
        "id": 272838946,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1645551417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 272839077,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645551468
    },
    {
        "content": "<p>The <code>rename_i</code> tactic is a general way to name inaccessible variables, when the tactic that created them was not nice enough to let you provide the name</p>",
        "id": 272845881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645554317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> <code>cases</code> has a <code>with</code> clause in lean 4, but it looks a bit different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">H2</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 272846064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645554397
    },
    {
        "content": "<p>You can also refer to the hypothesis by type <code>‹a = b›</code>.</p>",
        "id": 272846189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645554448
    },
    {
        "content": "<p>Then there's the <code>rename'</code> tactic: <code>rename' ‹a=b› =&gt; h</code> which gives a hypothesis a new name.</p>",
        "id": 272846246,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645554475
    }
]