[
    {
        "content": "<p>I'm trying to express some constraints about resources but I'm stuck.<br>\nMy idea is to use dependent type as a constraint for resources non-transferrable.<br>\nIt  fail to achieve my intention.<br>\nI'd like to know a technic to solve the issue below. I wanted to prove, if I give a tool, the person has the tool but the type check of the statement failed with obvious reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This is a bit artificial because this model is reduced version of my problem to solve.</span>\n<span class=\"cm\">The situation assumes:</span>\n<span class=\"cm\">  - A person has 0-2 tools dedicated to the person only.</span>\n<span class=\"cm\">  - The intention of the code below is to avoid accidental transfer tool to other person.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">PersonId</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Tool belong to someone specified by PersonalId and non transferable.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Tool</span> <span class=\"o\">(</span><span class=\"n\">person</span> <span class=\"o\">:</span> <span class=\"n\">PersonId</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">pen</span>\n<span class=\"bp\">|</span> <span class=\"n\">paper</span>\n\n<span class=\"c1\">-- Person has his/her PersonalID and set of tools.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Person</span> <span class=\"n\">where</span>\n  <span class=\"n\">pid</span> <span class=\"o\">:</span> <span class=\"n\">PersonId</span>\n  <span class=\"n\">tool</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Tool</span> <span class=\"n\">pid</span><span class=\"o\">)</span> <span class=\"c1\">-- The intention of this is to model a Tool belong to someone by pid.</span>\n\n<span class=\"c1\">-- Initially, person don't have any tool.</span>\n<span class=\"kd\">def</span> <span class=\"n\">init_person</span> <span class=\"o\">(</span><span class=\"n\">pid</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">pid</span><span class=\"o\">,</span> <span class=\"o\">{}</span> <span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Give tool and it is bound to the eprson by pid.</span>\n<span class=\"kd\">def</span> <span class=\"n\">give_tool</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Person</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Tool</span> <span class=\"n\">p.pid</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">tool</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n  <span class=\"k\">let</span> <span class=\"n\">tool'</span> <span class=\"o\">:=</span> <span class=\"n\">tool.insert</span> <span class=\"n\">r</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">tool'</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> I'd like to prove:</span>\n<span class=\"cm\">  for any Person p if I give any tool to him/her, tool box contain the tool given.</span>\n\n<span class=\"cm\">  r ∈ q.res does not type check because pid of r and q is not supposed to be same. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Person</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Tool</span> <span class=\"n\">p.pid</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">give_tool</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">q.tool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 291567138,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1659356801
    }
]