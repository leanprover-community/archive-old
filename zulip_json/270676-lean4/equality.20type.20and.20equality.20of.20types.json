[
    {
        "content": "<p>I have a category structure like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cat</span> <span class=\"n\">where</span>\n<span class=\"n\">Obj</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">Mor</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Mor</span>\n\n<span class=\"n\">Comp</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"n\">Mor</span>\n\n<span class=\"n\">DomId</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">),</span>\n<span class=\"n\">Dom</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span>\n\n<span class=\"n\">CodId</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">),</span>\n<span class=\"n\">Cod</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span>\n\n<span class=\"n\">DomComp</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"bp\">$\\</span><span class=\"k\">forall</span><span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"bp\">$\\</span><span class=\"k\">forall</span><span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"n\">Dom</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Dom</span> <span class=\"n\">F</span>\n<span class=\"n\">CodComp</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"n\">Cod</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">G</span>\n<span class=\"n\">CompComp</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Cod</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"n\">Comp</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">CodComp</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">Comp</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">H</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">DomComp</span> <span class=\"n\">H</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And a functor structure like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Fun</span> <span class=\"n\">where</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n<span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cod.Obj</span>\n<span class=\"n\">Mor</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cod.Mor</span>\n\n<span class=\"n\">Id</span>  <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Obj</span><span class=\"o\">),</span>\n<span class=\"n\">Mor</span> <span class=\"o\">(</span><span class=\"n\">Dom.Id</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cod.Id</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"n\">DomObj</span> <span class=\"o\">:</span> <span class=\"bp\">$\\</span><span class=\"k\">forall</span><span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Mor</span><span class=\"o\">),</span>\n<span class=\"n\">Cod.Dom</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Obj</span> <span class=\"o\">(</span><span class=\"n\">Dom.Dom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">CodObj</span> <span class=\"o\">:</span> <span class=\"bp\">$\\</span><span class=\"k\">forall</span><span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Mor</span><span class=\"o\">),</span>\n<span class=\"n\">Cod.Cod</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Obj</span> <span class=\"o\">(</span><span class=\"n\">Dom.Cod</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">MorComp</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Mor</span><span class=\"o\">),</span>\n<span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Dom</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Dom.Cod</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"n\">Mor</span> <span class=\"o\">(</span><span class=\"n\">Dom.Comp</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Cod.Comp</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">DomObj</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Obj</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">CodObj</span> <span class=\"n\">F</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>Now I'm trying to make a natural transformation structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Trn</span> <span class=\"n\">where</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Fun</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Fun</span>\n<span class=\"n\">DoubleDom</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Dom</span> <span class=\"bp\">=</span> <span class=\"n\">Cod.Dom</span>\n<span class=\"n\">DoubleCod</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Cod</span> <span class=\"bp\">=</span> <span class=\"n\">Cod.Cod</span>\n<span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Dom.Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Dom.Cod.Mor</span>\n<span class=\"n\">DomVal</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Dom.Dom.Obj</span><span class=\"o\">),</span> <span class=\"n\">Dom.Cod.Dom</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Dom.Obj</span> <span class=\"n\">X</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">CodVal : forall (X : Dom.Dom.Obj), Dom.Cod.Cod (Val X) = Cod.Obj X</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Comm : $\\forall$ (f : Dom.Dom.Mor), Comp (Dom.Mor f) (Val (Dom.Dom.Dom f)) (Eq.trans (Dom.DomObj f) (Eq.symm CodVal Dom.Dom.Dom f)) = Comp (Val (Dom.Dom.Cod f)) (Cod.Mor f) (Eq.trans (DomVal Dom.Dom.Cod f) (Eq.symm (CodObj Cod.CodObj)))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>However, I can't create the right witnesses for the codomain at the structure map and commutativity. For instance, if</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>how do I obtain x = y in Y?</p>",
        "id": 317861524,
        "sender_full_name": "Dean Young",
        "timestamp": 1671990559
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 317862251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671991116
    },
    {
        "content": "<p>You need to use <code>Eq.rec</code> somehow (not sure of Lean 4 spelling).</p>",
        "id": 317862262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671991124
    },
    {
        "content": "<p>This \"essentially algebraic theory\" presentation of categories works okay for 1-categories, but Cat itself isn't really a 1-category so you are going to end up with some pain.</p>",
        "id": 317862323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671991160
    },
    {
        "content": "<p>You can coerce using the equation, but another way is to expose the domain and codomain as parameters of the structure, instead of a field. That's how it is actually done.</p>",
        "id": 317862381,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1671991195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572658\">Dean Young</span> has marked this topic as unresolved.</p>",
        "id": 317862747,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671991408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/270676-lean4/topic/equality.20type.20and.20equality.20of.20types/near/317862381\">said</a>:</p>\n<blockquote>\n<p>You can coerce using the equation, but another way is to expose the domain and codomain as parameters of the structure, instead of a field. That's how it is actually done.</p>\n</blockquote>\n<p>Thanks!!!</p>",
        "id": 317876069,
        "sender_full_name": "Dean Young",
        "timestamp": 1672001766
    }
]