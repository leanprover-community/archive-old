[
    {
        "content": "<p>After struggling with some meta code involving lots of <code>Expr</code>s that need to be passed around correctly, I found a nice solution that I'd like to share. Not sure if the benefit can be seen from these simple examples; in my use case it was more like hours of debugging vs. getting it to work on the first try.</p>\n<p>The main idea is to annotate the <code>Expr</code> type with an <code>Expr</code> instance that specifies the (expected/inferred/...) object-level type. This annotation doesn't really do anything by itself, but it makes that second <code>Expr</code> known to the elaborator.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Although `α` is completely superfluous, we can use it to infer arguments.</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">TypedExpr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Expr</span>\n\n<span class=\"c1\">-- For `α : Expr`, introduce `a : α` as a shorthand for `a : TypedExpr α`.</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Expr</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">TypedExpr</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>As an example, here is how you could write <code>mkEq</code> from <code>AppBuilder.lean</code> using <code>TypedExpr</code> and its <code>CoeSort</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkEq'</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">levelZero</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkApp3</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Eq</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkEqRefl'</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mkEq'</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Eq.refl</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>So instead of determining <code>u</code> and <code>α</code> at runtime like <code>mkEq</code> does, <code>mkEq'</code> takes them as implicit arguments. This isn't much of a change (though maybe a bit more efficient?) -- the real benefit arises from attaching type classes to such terms, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Reflect the type class `Inhabited` as a type class on the meta level.</span>\n<span class=\"kd\">class</span> <span class=\"n\">_Inhabited</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Make an instance of `_Inhabited` directly usable as an expression.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">_Inhabited</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.s</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Reflect `Inhabited.default`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">_Inhabited.mkDefault</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">_Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Then code like this tends to just work as soon as it compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example_defaultEqSelf</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkEq'</span> <span class=\"o\">(</span><span class=\"n\">_Inhabited.mkDefault</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_Inhabited.mkDefault</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Note how the instance of <code>_Inhabited α</code> is automatically passed on to <code>_Inhabited.mkDefault</code> (of course), and especially how the two implicit arguments of <code>mkEq</code> are inferred automatically because <code>_Inhabited.mkDefault</code> is defined to return <code>α</code> (i.e. <code>TypedExpr α</code>).</p>\n<p>Finally, instances of such reflected type classes can easily be sythesized on the spot, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelZero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">_Inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">TypedExpr.synthesize</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- `TypedExpr.synthesize` defined in the obvious way</span>\n  <span class=\"n\">example_defaultEqSelf</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Here is a gist with the entire example code: <a href=\"https://gist.github.com/SReichelt/860ec32e85e05311cc51a5b10b70dfef\">https://gist.github.com/SReichelt/860ec32e85e05311cc51a5b10b70dfef</a><br>\nI guess it could be ported to Lean 3, but I haven't tried.</p>\n<p>There are some aspects that could be improved. For instance the <code>CoeSort</code> on <code>Expr</code> might be a bit far-reaching. It would be nice to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsTypeExpr</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and restrict that coercion to all <code>(e : Expr) [IsTypeExpr e]</code>. But for me, it already worked exceptionally well.</p>",
        "id": 262644814,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637791119
    },
    {
        "content": "<p>The idea sounds very much like this library: <a href=\"https://github.com/gebner/quote4/\">https://github.com/gebner/quote4/</a></p>",
        "id": 262646496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637792304
    },
    {
        "content": "<p>Oh, indeed, oops! Although I had seen some discussions about expression quotation, I didn't realize that your library also did type inference like this. Very nice. :-)<br>\nI think the type class aspect is a bit different, but I'm not sure. In <a href=\"https://github.com/gebner/quote4/blob/master/examples/typeclass.lean\">https://github.com/gebner/quote4/blob/master/examples/typeclass.lean</a>, I don't quite understand whether the second <code>q(inferInstance)</code> is guaranteed to refer to the instance that has been synthesized in the line before. Also, I'm wondering how <code>q(Inhabited.default)</code> picks up <code>inst</code> in the definition of <code>typeClassArgument</code>. I guess the macros are basically meta-meta code that automatically picks up variables from the context of the meta code?</p>\n<p>Just for comparison, in my case I'd use a type class on the meta level, somewhat like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeClassArgument</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Inhabited.default</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And then <code>inst</code> would be inferred from context when using <code>typeClassArgument</code>. Since I have quite a few such type class instances floating around, it's nice to pass them implicitly from function to function.</p>",
        "id": 262649667,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637795015
    },
    {
        "content": "<p>In an early version, I used a structure for <code>Q(Inhabited $a)</code> and you could indeed use it as <code>[Q(Inhabited $a)]</code>.  But this no longer works after switching to a definition.</p>",
        "id": 262684057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637832950
    },
    {
        "content": "<blockquote>\n<p>I guess the macros are basically meta-meta code that automatically picks up variables from the context of the meta code?</p>\n</blockquote>\n<p>Yes, that is exactly what happens.  If you have a <code>Q(Inhabited Foo)</code> in the local context, then <code>Inhabited Foo</code> is in the local context inside the quotation.  (And will be used for type class synthesis.)</p>",
        "id": 262684154,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637833016
    },
    {
        "content": "<p>Thanks a lot. I'll play around with your library over the weekend and then probably switch to it -- or maybe a slightly modified version of it. I really like how many things work magically in your quotations, but picking up arbitrary variables from the local context is a bit <em>too</em> magical for my taste. If I come up with something that I like better, does it make sense to open a PR to your repo? What are the plans regarding this library?</p>",
        "id": 262742009,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637875729
    },
    {
        "content": "<p>Oh wait, I just realized that Lean will <em>always</em> use arbitrary variables to instantiate type classes. I had assumed that it would only look at type class instances. So the thing that seemed too magical to me is just normal Lean behavior.</p>",
        "id": 262743192,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637877293
    },
    {
        "content": "<p>Feel free to open issues and PRs!  I have too many other things going on, but my plan is to clean up the code and integrate it in mathlib4.  One interesting case study there would be to make a \"type-safe\" ring tactic.  But while typed quotations are a key part of that, there's lots of additional complications.</p>\n<p>For example you have a type <code>HornerExpr</code> of horner expressions and a function <code>e : HornerExpr α → Q($α)</code> that converts this representation into an actual expression.  Importantly, you then have proofs of statements like <code>$((xadd ....).e) = $(b.e) + $(c.e)</code> where you need to unfold <code>e</code>.  This works okay if <code>e</code> is a simple recursion, but the mathlib ring implementation is a bit more complicated.</p>\n<p>Then there's the whole can of worms of pattern-matching.  The Lean 3 expression pattern matching was purely syntactic, which means that 1) it won't unfold definitions (but in Lean 4 we now use reducible definitions more and more, for example x&gt;y should always be interchangeable with y&lt;x), and 2) it won't complain if you use the wrong type-class instances (which leads to nasty bugs like <a href=\"https://github.com/leanprover/lean4/issues/755\">https://github.com/leanprover/lean4/issues/755</a>).  The quote4 library provides the syntax <code>match e with | ~q($b + $c) =&gt; ..</code> which is implemented using the Lean 4 unifier.  But the implementation is horribly ugly and inflexible.  For example: what type should <code>b</code> have?  I have a <code>Semiring α</code> instance in the context, should it check that the + is the same as the + from the instance or should I get a new HAdd instance?  I'm tending to think that it would be better to have the user explicitly specify the free variables like <code>letmvar (b c : α) [CommRing α]; letdefeq ‹Semiring α› = ‹CommRing α›; ...</code>.  This is all a bit complicated because you need to do the matching with an increased mctx depth, after matching <code>e</code> should be replaced by <code>a + b</code>, etc...</p>\n<p>Did I mention rewriting the motive after a pattern match?  This is another issue I ran into when trying it out on ring.  There was something like <code>structure Foo (α : Q(Sort u)) where bla : Q(α)</code> which looks fine, compiles fine, but if α and β are def eq expressions, then <code>Foo α</code> and <code>Foo β</code> are not even equal.</p>",
        "id": 262776693,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637919634
    },
    {
        "content": "<p>What would be the goal of a \"type-safe\" ring tactic? Would it have less bugs? Would it be faster?</p>",
        "id": 262788861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637927736
    },
    {
        "content": "<p>Right, ring has a lot of code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">c.cs_app</span> <span class=\"bp\">``</span><span class=\"n\">horner_mul_horner</span>\n        <span class=\"o\">[</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">x₁.1</span><span class=\"o\">,</span> <span class=\"n\">n₁.1</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">n₂.1</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">aa</span><span class=\"o\">,</span> <span class=\"n\">haa</span><span class=\"o\">,</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Each of these arguments needs to have the correct type.  With typed quotations, 1) you can leave out half of the arguments because they can be filled in automatically, 2) the type of the expressions is clear from the type (i.e., it's not just Expr but an Expr with type a1*a2=ab), 3) the types of the arguments are checked at compile time (these bugs pop up from time to time even though the tactics are well-tested, see e.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/4682\">#4682</a>).</p>",
        "id": 262790726,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637928919
    },
    {
        "content": "<p>Performance-wise, the mathlib ring and norm_num tactics use a lot of custom caching (this is the reason why all lemmas used by these tactics can only have a single type-class argument).  Even with this caching, the cs_app call above still needs to do type inference and unification.  The typed quotations do not need to do any type inference or type class synthesis when constructing expressions.</p>",
        "id": 262790870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637929041
    },
    {
        "content": "<p><code>cs_app</code> shouldn't be doing any type inference or unification AFAIK, that's the whole point</p>",
        "id": 262790961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929104
    },
    {
        "content": "<p>it's just using expr constructors</p>",
        "id": 262790980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637929121
    },
    {
        "content": "<blockquote>\n<p>I'm tending to think that it would be better to have the user explicitly specify the free variables</p>\n</blockquote>\n<p>If I wanted to use pattern matching in my use case, I think that I'd quickly run into a situation where I need to supply some variables from the context and introduce (typed) metavariables for the rest. So what you are describing looks like a useful feature to me (though at the moment I'm content with <code>isDefEq</code>).</p>\n<blockquote>\n<p>There was something like <code>structure Foo (α : Q(Sort u)) where bla : Q(α)</code> which looks fine, compiles fine, but if <code>α</code> and <code>β</code> are def eq expressions, then <code>Foo α</code> and <code>Foo β</code> are not even equal.</p>\n</blockquote>\n<p>I have a somewhat similar situation in some places, but just in the sense that I need to convert an <code>f : Foo α</code> to <code>Foo β</code>. Since everything is just an <code>Expr</code> in reality (which is why you write \"type-safe\" in quotation marks, right?), this particular case is easily solved by writing <code>⟨f.bla⟩</code>. But I can imagine that pattern matching introduces cases that are a lot more tricky.</p>",
        "id": 262828480,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637954462
    }
]