[
    {
        "content": "<p>I'm curious about a recent change to <code>mapM</code>:<br>\n<a href=\"/user_uploads/3121/tzl2_mTILZGdYXdWuXIFbAtl/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tzl2_mTILZGdYXdWuXIFbAtl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tzl2_mTILZGdYXdWuXIFbAtl/image.png\"></a></div><p>the part <code>do loop as ((‚Üê f a)::bs)</code> is the same as  <code>bind (f a) fun b =&gt; loop as (b :: bs)</code> right?</p>\n<p>How is that tail recursive?  (as  <code>bind</code> is the last expression of the function call, not <code>loop</code>).</p>",
        "id": 300261164,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663887279
    },
    {
        "content": "<p>Quick remarks:</p>\n<ul>\n<li>We specialize <code>mapM</code> for different monads.</li>\n<li><code>StateT.bind</code>, <code>ExceptT.bind</code>, <code>ReadetT.bind</code>, ... are all inlined by the code generator.</li>\n<li>The specialized <code>mapM</code> is tail recursive for these commonly used monads. This is not true for every monad, but it is true for the ones we use most of the time.</li>\n</ul>",
        "id": 300441603,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663963255
    },
    {
        "content": "<p>Basically, for that expression to be tail recursive you need <code>bind a f</code> to call <code>f</code> in tail position, and this is true for all the standard monads except <code>List</code> and the CPS monads<code>StateCpsT</code> and <code>ExceptCpsT</code></p>",
        "id": 300443028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663963821
    },
    {
        "content": "<p>I see...  so it is tail rec because after <code>f a</code> is evaluated and the resulting value <code>b</code> passed to the lambda, the resulting expression <code>loop as (b :: bs)</code> is in tail position and can be evaluated without having to keep any stack information around?</p>",
        "id": 300463733,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663974271
    },
    {
        "content": "<p>well, like Leo said it is also required for all the intermediate stuff to get inlined for it to be syntactically recognized as a tail recursion, but semantically yes that's what's happening</p>",
        "id": 300463892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663974388
    },
    {
        "content": "<p>got it, thanks!</p>",
        "id": 300463968,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663974447
    }
]