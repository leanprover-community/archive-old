[
    {
        "content": "<p>I'm trying to do something along the lines of <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> 's <a href=\"https://github.com/arthurpaulino/FxyLang/blob/d7cf6aeff91f02d59bf9387e853983184a001c44/FxyLang/Implementation/Parser.lean\">FxyLang parser</a>, discussed it <a href=\"#narrow/stream/270676-lean4/topic/creating.20my.20own.20programming.20language.20in.20Lean\">this other thread</a>.  He defines explicit functions to create his program's AST as an inductive type <code>Program</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkProgram</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Program</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Program.skip</span>\n</code></pre></div>\n<p>However I want to use my embedded syntax instead, defined by <code>macro_rules</code>, i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Program.skip</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I suppose the <code>macro_rules</code> macro generates some similar function to <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> 's <code>mkProgram</code> under the hood, but I can't really figure out from the <a href=\"https://github.com/leanprover/lean4/blob/fa943d3864daa8ce709378f7783f849c72318f0c/stage0/src/Lean/Elab/MacroRules.lean\">Lean4 source code</a> what that does precisely (i.e. what is <code>matchAltExpr| |</code>, etc) nor how it would be named/its type. </p>\n<p>I imagine I should be able to use those functions to parse a file using the same trick (i.e. piggybacking the Lean4 parser) and at the same keep the syntax extensions, right?</p>",
        "id": 282305955,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652476086
    },
    {
        "content": "<p>By using <code>macro_rules</code>, what you're doing is more similar to what I did on the <a href=\"https://github.com/arthurpaulino/FxyLang/blob/master/MetaDebug.lean\"><code>MetaDebug.lean</code></a> file. It means that, while on VSCode, editing a <code>.lean</code> file and seeing stuff happen in the Lean Infoview, Lean will replace <code>skip</code> by <code>Program.skip</code> and you would be able to write <a href=\"https://github.com/arthurpaulino/FxyLang/blob/d7cf6aeff91f02d59bf9387e853983184a001c44/MetaDebug.lean#L210-L214\">Fxy code in your Lean file</a>.</p>\n<p>The use case for <code>mkProgram</code> is different. It doesn't turn Lean syntax into more Lean syntax. Instead, it turns Lean syntax into a term of my end goal type (<code>Program</code>). This is how the real parser works, because I don't want to create a term of <code>Program</code> while editing a Lean file in VS Code. I want to create a term of <code>Program</code> while running the binary file of my compiled Fxy interpreter.</p>\n<p>Does it make sense?</p>",
        "id": 282307788,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652477112
    },
    {
        "content": "<p>Yep, I understand the difference as to what the two approaches do. I guess I want to have my cake and eat it too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I want to be able to use both, so I want to be able to use my Syntax in my lean source code, which shows up in emacs (no vscode <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> here), as well as parse it from a file I read in the file system.</p>\n<p>My point is that macro_rules is just a macro that generates some function used by the delaborator. If we're using the lean4 parser anyway, we can also uss those macros to generate the internal data structure (AST) as well. I just want to understand what macro_rules is doing under the hood to be able to do so</p>",
        "id": 282308455,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652477515
    },
    {
        "content": "<p>Then I believe you'll need to do a hack to read your source code as if you were reading Lean code. I'd advise against this solution <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>Of course it wouldn't be so simple. You would also need a way to include the right imports to have the syntax definitions, your <code>macro_rules</code>, your types and every other function you'd need to run your code. As well as a call to actually <em>run</em> the program. Then you'd write it to disk and run it as a script.</p>\n<p>Roughly speaking, you'd <em>programmatically</em> generate a file similar to <code>MetaDebug.lean</code> and then you'd bravely run it</p>\n<p>I can't even count the number of layers of hacks involved in this solution</p>",
        "id": 282309164,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652477903
    },
    {
        "content": "<p>Hm, I guess what you're suggesting is for me to create a lean file programatically and then read it, and I agree, that does sound like a hack I'd like to avoid. But I don't understand why I can't use the delaborator to parse it using the Lean 4 parser, just as you do in your code. When I write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Program.skip</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lean is, under the hood, generating a function very similar to your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkProgram</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Program</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Program.skip</span>\n</code></pre></div>\n<p>isn't it? Why can't I just use that?</p>",
        "id": 282312883,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652480131
    },
    {
        "content": "<p>By the way if you want to \"have your cake and eat it too\" I would recommend doing it the other way around: use Arthur's method to get a value of type <code>Program</code> and then reflect it to a <code>Syntax</code> using a <code>Quote Program</code> instance. The main downside of this is that you will lose syntax metadata information like file positions, and you also can't create \"non-canonical\" syntax which e.g. calls functions generating <code>Program</code> other than the constructors (although I don't know why you would want to do this)</p>",
        "id": 282317723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652483315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> you can't do that because <code>macro_rules</code> instructs the Lean compiler how to deal with Lean code. Thus you need to be running Lean code for them to take place</p>",
        "id": 282317992,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652483544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/naming.20.60macro_rules.60.20expansion.20function/near/282312883\">said</a>:</p>\n<blockquote>\n<p>Lean is, under the hood, generating a function very similar to your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkProgram</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Program</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Program.skip</span>\n</code></pre></div>\n<p>isn't it? Why can't I just use that?</p>\n</blockquote>\n<p>No, lean is not creating anything like the second function on its own. The desugared function looks more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkProgram</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">program</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkNode</span> <span class=\"bp\">``</span><span class=\"n\">Program.skip</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>That is, it is creating syntax objects with references to the <em>names</em> <code>Program.skip</code> et al. Within the context of a running lean environment (which you do not have at run time without having to go to some trouble with <code>importModules</code> and shipping the lean library along with your binary), you can elaborate this and evaluate it using the interpreter to produce an actual <code>Program</code> value, but it is not easy by any stretch. It just so happens that lean is already set up to do just this when you are in the middle of evaluating a lean file, which is why this is relatively easier at compile time.</p>",
        "id": 282318111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652483657
    },
    {
        "content": "<p>thanks for the explanation, that's insightful! To be fair, you also need to ship the lean library alongside your binary in the above approach, using the lean parser <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> But I think I understand the difference, you'd need quite a bit more as you'd have to be able to parse arbitrary lean terms if you just write the macro expansion and want to parse the desugared version, compared to just using the parsing function for your terms (and no Lean terms). Is that more or less what's happening?</p>",
        "id": 282344340,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1652522433
    },
    {
        "content": "<p>There is a difference: if you <code>import Lean</code> then you are statically linking against the lean library, but if you use <code>importModules</code> then you are dynamically linking the lean library. Static linking is generally easier since the resulting binary is all-in-one and has all the functions you want, while dynamic linking means you need to put some dlls (well, oleans) somewhere on the user's computer and make sure you can find it</p>",
        "id": 282363147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652548789
    },
    {
        "content": "<p>Static linking also means that the linker can remove any unused functions from the binary, which is probably going to be a lot if you just use the parser</p>",
        "id": 282363221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652548860
    }
]